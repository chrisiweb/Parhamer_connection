%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 4.3/AN 4.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:45:26 2017
%%Pages: 14
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathSymbols8-Regular
%%+ LMMathExtension10-Regular LMRoman10-Regular MSBM10
%%+ LMMathItalic8-Regular wasy10 LMMathItalic10-Regular LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 4.3/AN 4.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0844
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE20B44A2BE90
C36DA2687DCB7DBA40F6B99E51650B25F4E51941B49774F8273B5E98306C87E5
3A03E6B35B82A143A76D58265254C13E6E1A9D0DB17A1D9294C759AEDDA6D4E5
CB498912E3AC15AF88E6309CB00AA35170DBDDB43739D05EECE15112FADEAFA8
DF7BB6157C5374FE3D6DE742A6980C8C55A9DD737F2069BAABD6F1B8A83AE84F
8ECCECD0CDFA74FD3C4FA486433D06974C660A27F619ABC0E178D15C8C217270
1E6C1493BDCD772A1B9A9CB8C1205F7896343973FBB99481B1A6B865510896B0
133C9D9C98E813E0B142027A215FC75181A42E65C3E1CF5269B00E31FB47B4F7
7FD95A823A176D8387CA420A441980D3E866604325998BF88E4D0A27D4DE5AB3
F44DF52033A1EE28195614165597150B847315C78C3871F7DF0D5B8BBD40BB58
C6F12D16BCB3BE5B4EB51671AE9357176D5AC14505504C43A33EA29CBE2AB98C
D0305DD935D8F0F5EE3205B6BA139A251BCF348F2A19EDEBB709068CE066960D
6D0E7801038F92981250C3BDD77F02C296953F4FE2ADEEEE96C2499E4D5C40DE
EFB9EEC8853BB3E2BAED185D6B4A80C1BFA827E4F15E623A96FA4C467940BECA
B15E072F4D80E6FA1492BDE59F46CA026F44D74B0536463124DFF7ACBDE3E03F
7063896D3B578B229735564F4BD7CF18486E33C6AD14424873AC44919FAAE46F
12CC16254F52A26FE47FE41504D3E851A066522DD56FAD7828E5E203F328AD95
5AB433987B2296EB3B524700CCC455A521EFDAB11378FA57CAB556A4F4B23D7B
C51D926CA86263840FFCC3BAF798B72E5EE24715E42D9D1AFFF7AACCB3BE5EF6
3B1C4E79B49A3CDF145253BD827ADB43D157A1BDFCB3233B9397EA3C8B3217E2
26202117CFBE3DE2C6DBFB0BB25BB138BCB5DEBDD171A3100D4D69D8A56566C0
FA3EAC58EBE319E08383B6A269D928DD94CE748AC1F0E99EB86D800AAC284813
B298DD1D7EF648B69F693C23EA484E5EF04ABA445FF958E4CA098C9D022FF497
44F3F1DD4AEB615ADAD672C6BE223DDDA48E95A221C8EAA6415537EFF572CA73
E4E558E2B016B13DD10CA06A91925B8F035FFA5B7481050ED9EF7A99E3FE103A
B285C96ED14BF085FBF50AF7CF2D153881B994A7A8C7FF2F25AF4EC556835774
B08B04CBF20D471B7C228958E96587810AC9401E1D5ADE97B6CE7BE0CC90B884
3B28FEB56250D8743AAD7F2CAD78D6F32E558B510C0C2730F09ECB07AFDE1428
7A32E1F9046A37CDCD838855DA828AD50EB703E99F0C33737F64E650B2FBCD9B
1B2D63BF87271B5DC4615D281B73F4DA92823A4FD666C4B19ACE6690CAC1B113
237A3F35EAD437F588CBDD9BB31C81037BED3641265F815F8E69BF0C8A5BED21
A826EC20AC4384A8CFF8CECF07A597EDD246FC0CAC7850013FB3F1B075D4754A
82A584D88CE3C03E3D69212E49DF05A42ED088BEDCC2539F884446A7254B3275
6000AF03E97943129A8A6FB15CB94503E4231DD1E14AE1E34F34BCFF6055BC43
0DCF84FCAF507DDFF4885399DB68282CAC77A0D5895184306707EC587466B0E5
5B5690955F260A441AB54B256359EDEF9C514BF9FBA3A854DA481FBC1CC4B580
95CA47F3F8F92DA0B1B3A34E9BB9BCAE0E89082ED18572CF877640C27032E69A
65588CD61115FC966FCFE51E5A9371706E846D02F57F18066ED53549CF9E7C3E
F0F8405324CEB0A5DA14980B1FE43A4C4C566EDBC7AF39EF79B4E7EE3A8A30DB
99F0F40C21C0BCE46EC223C08E0050945569610079DF9E96CDE8D005FC25E59B
029C05A28021D66F223A6ED2EAE1534A139466F7F62EFEBD034610F9A7BBE4D9
4389941682F0CABD073F2376E124CCA5752AAF92BFBAC68A88FA66C49E1490EC
01C946247DB315DBE2328B3A70167B928CD4B189F8BBE8BE4BF6A1ACA730BA1F
A90C0D7F09B3DD6A5FE918C86610220FC1CEA674D56637B407679812A0890AB0
8E2754E03280E403235E6835ED221EAF81EF6581C6AE0ABC0452FB99C4190B42
97DFC9B4A2CF19A4AC6ED1DAFDC63493D8B9EF33711947B65B0C07BB7FE129E2
D31FF78077E0118B0B9702ACED9DB6F1156B5FE3883DF8B6FF0B0D28B049F33D
A50B0FDF4FA8F2153C3429AF1F0487C30CAE8A871B9627A789E268385070E27C
92147BCD955869B80587746A2C55B63866E552FE3DBC2A06A959B629EF744486
3CF361D2F7242677C5148F295C1CE0B5E19A665BEA628E5C361F4CA0CB8C129C
2C7D246C6BBBC779F84B6DFBE0E673604D21AECDC9022814F58A69A8643A1655
DF6C848C3B02C047E7DDE830AE5FF2FD1A26930E14FADD837552972E487B7F8B
9FCCCCDB9F327097EFE73DBA9E508070C5E11C262068E043BAFA2CCBCACE0875
E368521C0D91FF9EF94963AB9399A239A74E0C03B7D1CA4CE35D25C1EE22A644
41FF6949A8AE1753283BF2E9B0A86139A5BF3A04BA1F3E668B0082724961CDD8
AB05CEAD315D878E0034288E97C143576D2AD37F46E21F017D2EEEEFA163B82E
56389248E7594FB9F4A2522CCEA4ECA91EF2A9B90F5CE713C315E6E1A4950DBE
C58E9369EEAB9AB636016EE266358CDB0E27E89D4F5CC7779253CFD5B1F30EC4
6FE8971B8CE5F43DE6FCB7C928450BFDD46DDF88004A089BAEC734DF415EA833
4CC2F26CF23323EF301095C6E99EF77CF350E769A7EB0E1B9BF5CD44BE116463
8B6D952B4458893802CAB57B9DC5BF9843A67F7224EA242372B7142F685A7A51
091536FFA4C9DE6C8C2C8B7EB292D0E4EC96101C4AC46DFC475C716CB352830F
A336B8CDABF38EBC07753618A374051DF4743FC631A2BF9652C4E0805F625D80
6B486739CE5265CE4EE240200BB7085567F6AD3F4BB72F1633644BBE84967364
952081AC22A85157BA5C9BA0897E711DFFF1EE6ABE33479FC9E09D33F9D8EB2F
CE5DF8E873AF92E7A41E0400C3AFC76281C22AAF7BFC20B637B2AE97252B5210
1B6F33F63CF67434E388FAC6474970914857919926E5A42548B9D1A9078F1D76
243E898F2442AF858196ADD0AB7EC59A2815F89932C19E128DB67D6F73FE591B
DF942BCABB96853DECAD02B6123F25D2E5978D05E9EDF07B8E6F61A812735FE8
335042BBEBC8DCF193CA3D40E5337359272C890F4D3AED6F03D917F0C8BB0CB3
120C3CD743789E435A460AEF65C161371032BE4902BBD57AA5DC285EA30F18F2
B9591FED2312CDD8FBDFFB276035A428E531D41C57BA6BF1A56F65B8FC21FEC4
0F4059C2EA3DEE94D79A8D046474CA6EC92FA9101102BAEEAE5C1875DBE42C23
E561946BE110C37AE06BE770561CD930E8AE76E35329382BC56F6DA0468D5C98
B4E9C99FE1B4DE04B482145F3924B20D19E633C26771E2301735A28978B5135B
8F28084F419E5F85685735F0B0A47B75F63DC4559D32A31558EEA998EC8C4702
F89F660AD38ABB9AE811E6C73E3DF9C364357ACD480B48A201BA6625FC608958
9E70132E7CC5684E34DC85646396AA84DF28CF38994138E0F4E0A7CA0058ACF0
8F7C784508366CBFCD223ECEEFF45CB2E9BF61FA2AC17072EA6C9F52E42816C8
5AF34C21215E7731E679C9DAF1AED801D6239C7777FF97DB2AC67C7F6118F432
42FBA0351FE639313C561BB821C5577F7ABE95D06F4B9FFA8B1F91DB49F181F0
DCB7453E2A33C81476A8951B1A5624BF0D2EA0214373BA9992CF371C1A07A956
8159D030BA9F1AE6A71D61E4DEF3D5B062FFBEB54A430BFFA26066C7CD272587
73D747DED2B68D227691ACC53CBF939792B6CD340BA06E12F284DD1B240591CE
5F32317201DD80D2851C59D58E117B85CC17F7BE4EF1E76BD275BF88D7E1F8FF
373ED07D33E42FF9C37B2EC62DA5486A550A868D0C17E5861E79939718243DB1
F1C729D9EAB7B4E5B768EA4B1F96983772097BE3F071225074652B12B08286D9
47413E48F70CFA41C190D9CF23479F5CB596CE9A764D8FB11597FA64C204AA8A
AD5CA267A0997CDAEBC1CE52CC8015865AA46773CFDEA403727CD8E363237782
E3B2AE143E60069683917D8D87F033AFC4AD73344BBEFEE80BB9A0D2C7128CC2
134FD59FFA81FA64CE47387229F7E44D0035FC5E61FAF31BE1138C61BAA39B08
548F9EE32019C3AF991B3613B4753264B6456A782B00071898AFDFDE6EEF2CD1
2825463626648DD1F1971AED8BCBF623F712DB90050258BD9E1A5B78D2099789
13E0C0C086DF025BD411AA8087576F497EB09A9630A006FF0908EA1795C412FF
957DBA11A7D7613AA7C519BCE1182B6C30F93DD0D7DEA85FE195C0E12E861EB2
84C7F9FE20F25EC9A1269BFE3F4AD2CA93D8F5B1DFDCB271329400CAE5B90560
D4FC5E69FC6C617365E9F141CC3CD485C3858F2EFEB078DDDF175BAB0DE33EDB
55D958E1FE80BCA50544E5D07AEBB27CAD8A150F12EEBF5F137AEAF15A3EEB91
741098C5E1E89C0E92C1FB18CC4B968D70DFD13C6223FAC9AD312686229A0E06
E6873997A3490967DCFBB99FFA480FF4A37E4A31C603AB653316994DE4231236
62D2F640D9972A9FE560FAFF76ED5DFCAD3B0F3C59A4D52A0E034635795CEF95
C35A44216C939D3F93B323344D1A9C173F501BD23D182F1FD33DCC71554DA837
1698B3536CF6FC0B639442B33FFFB35AD715BB0DCDBB2D35B51730CB8CC9D4DD
514C4F20B9D3F72A9B0E07A2F65B9923E587A4AB6572D37740E0685E046AE1B9
9F5177F66C4A4B2D5FA12B2A7D24A7C3875E7151C6C6B30762F8B71B62CB959A
1B797238A1926BCA7B7C3F049E3E5B235D984FA314E9F006692F32777BBD74CF
F9C797041D0A982AB1C0D49992D1F261B999C85AAF3A2346EA93FE7B04414B71
D626BC8146CC81B3445B02E27AC2A2FE3A14C5CA57DB545BA3E3E72A6BC4B0B9
1385CDC9BD557E8A0BD7A9A7D9B68DFBB0586A0FFF6BD2983A840B68D656FC15
842D694DF8B0AD0C5C4C7A725889284D623CD8E5DF6BC4ADF81328AB512611CA
37ECEEA4AAF6FCBE1752316A17005BEB08F4B7F8C9E13B34AC259F84ACE75666
048FB4966363EAC5877B0E9EDDF80CA00DC0F06DD1F83FA50F2DDE536E05D19F
898974A0BF0595CBF0593CE5D42768D7723D2566B3A1176CD153304E35363E71
35CC354BDE1B3734804F72600587293247C5DB2C5FA1FDF84CEE9655941884D3
B9FFABCA4F49031745D86203812984FAA0E3C33421B8006C3CD93617E6B0B1E0
DFED76A2D6D16343DBE02536E476BADB55EE925B6BC8A982579F3480A7553ECD
27B328EA8481D053315553F3C5C3BBCA1E80735B15D36B3AC0B08922F007FB1F
6127A9A61CC562430CFE77568235A193F57FD51F202DE6294C204F515C7E6290
AB1C4B10165DE8C3E9109949A8FC60CB19EEF6EFE63C8EF59F0297765D3ECD62
6AE4B8C3688667D8BBD22020356FE33008AE94F1908928FA612F5941DD8E5E2C
90C7AB5071280E7C7443B4CA3E5F33D2161B0C6FB90C7DAD069E02B347FEF08A
6FCBE03D9CAF6894363B2114294E66864446DAA5CE259112178AD13CE9B69E7A
5D0E31726EC3BF9FD98C0AE5BA1BCCCC90BAFD749F78D8C87B5DEE8390E32333
9D9456E298E64375445977B74378CDA96C83F922465298B05A57E2F149F23BB4
F42F155C81CD0A69588E4AD3C11D0D92D29397478BD8C0F91FD52CDEA7FA844F
E850B3DAEB07113D7F5F58FF851A04F89102718D0FC57EC5B2782500850E519D
305B0313F79DF99A2A0438DA76A0A508D8A48CCC06C8036B5BFAE9243788451D
E723870FAC1EA142288D31CD256FC02FADB55E3EBF811F56F206831E8F728FB5
3D42A3C5F89AA80595E43DEF90FBFE5BB42A7150737F7B9FAF7E0D5C9B7C3D6C
491CA364B615D9AB5795D2A08D94F4FCA4923CBDE129996B40A37139C454E6F9
7D43EB04827EA553E90C85A5859C2E83A0D7A93F3AA16385F40896D4A047C14C
559903DB7809692DF4DFBFA3EDA081AA379231DB5D3C332A27D42FBA7F757259
A5D32A90AD3A6AE9463220934651C2515D06D306390158C91859859A1422520B
ECCFCC4DEE9CB4BD17DA633529C87CB33A7E80B9947416A78AEE3073447E9A1B
860E1085D81B878A24E96D6E16583FABE24F20DCC87145B9C3C3C5CE0F22D4B5
DEC2A17886B067E4B0E8B08AB13015B27D05780681C3BC280009803DBF56A7F8
E26656DD8A36663CDDF2D7A130D2E088EA3F19BD28393DF8BF4306AF12BA45A1
1E88E61F04E09FBBAF54E3E5336D2EDB9B6D48AFD2AFC82E953903FCA10F24A4
134C1C56CF4D56B65ECDABC1AA409A4F501AF32FD784905EE7B82BBAABDD0D92
BB5351D3A0B3071E86653816C14B5541515438E1F36DBC13E11854A23AF95CFC
A49ABEB0125267D929CE8BE711ED480CBB8B9E59E1BEAAE9A94A5F932FCE2CD9
6CA703FFC8167C703D76BE94CC4D110D6F907F841D095F090BFDEFAB9CE81135
532C2313DCEFEE96974374BB6E9D392B51363C384BBCDAA353D356659A14AC21
316C183F9C1A3AC7F42D1767C2A20E9F1AE8ECD9FA81542BDF2407E3E0FE8D8B
FD3506526B470DFAF270C91679C516D2062B949A8D91BD5C8C1A09358307F900
41D351B844947C40B5D8C75ADA3F1A58197A7DB16730051EDAFC10D2A983B5A2
CE0505CD251C58DCC9BADA8760AD44E31416EE4EA8C182C1D459885DB03DECC5
23548E1BED287E8F47E7FE27ACC12DD93E96E9AAD1D8F443AAE0A3F0C050249A
333A1F83E14DFB07FC0425925E58EB63AB2045E56C4B20C4A5320055F8EBA2F4
5CBC8D3BECEB718B49F2297D416D2A3401DAAE76C34991FCFC707E8C95768AA8
C3A484036B56546D498C0851954FEC4C1207C704167F82DA84D04F1469DBC64C
C28265D8B9959A9855B99748A4BFCBA72B3406153235F0D90B46BB86D33CD66D
069CB847A315262F8F4F114E3F606B88DB03CE499BED38F0342867411C63FCBD
0D711CEEAFF4DDD78DDA83C237AF564E874A8CC6004D041C5D57BFD5EE9253C6
EFE87DFE5A7A153BC3AEEF9A0A9AC37D295E1CF51BAD0124C1C996F03578FF6E
93F270C576F343627F3A876E3B269DDB919565188D79405EDFB8AAC1D072E20D
0E000DBE4A0656BE7F021DB863F63DE614ECB59A09821BD121F361A0BB39E022
17B34E09C2804C0677BE5E51E570BD135E3CD4C130FFD5EBA5C71475D74D8635
1C8B082E81EE08E8D3D565E42987DDAD250346A17AC8E5B4F0465D0868939AC7
7CCB448D3F583666A84A1EB02F38BDE00115A21706BC3AE8F29C792E455C756D
BE5A9574D5351815A959020591659CF35B170D1665675313CE4D37F797DD4B69
DB1E8B90C4BBE8F5F6F6DABDEA0A5CE7E682B6A859D852D22ADDC8B4AAE9F226
3C2A4ED19942888CA8A3B820DB6BE101296BDF05D291125089A34A007D82C75B
81149C64456A88F88F754C3AB8A1B449076E191A04CAADA5C99DAC0E8B0A9553
02C23C81B5792FFE4B43314A58021F36A765FC2EA4BD68A5B3E68DB7DF1DA1BB
41D984B457154D1DF0103E0A79EF1B2FB791DB1A56767B0A22F335A7A5AD395D
681A059968284BC1FCD6B3EFF627203630AF2BD897DB3C7DD9D3C003988D9485
4212C9219CAAEC925F4AAA1D574E595109370B4D2F92C01428AC9051C9F5AA34
4BCA6CEC10B73FFF05FF30BDE997DB689CE85F6312A6A94F0B83CA660D606486
E4E0A6FC3A0C6CD24600D6CFD67F9DA4FF12E51363B35717DFE874692145232E
89FC52487BD40EC9AC6967CAD0A3DEBA0D947D0AA1F03FCAAAFB2470787B889B
8A4ECC0DE847ABED596854D54DC3CF3DE605BCDD8687322B02124415DA5CB7FE
994C3506E6C02DD94BF42C8A1B6693BB70A7AC9B290539B172E2F22DC62C985F
E99D0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEB5B78764BD1BAC318E271
7E7BDA4097FCB8FCB635C4E815B4681E1A56C83637A1913D5E8A80518B985D78
3FD6CC325E48BCCE920C979763D1BC2A97B82446053FED16064F561AC3E73728
A55039E4A7EA63CDDCB2C2AA2FD37EA7C612CA44A7392D8E791DDE1DE818BBF2
6CE3BCC1AAF45424EC1C28487B7D93628E039E14526B19E4EC1601F7AF80CD6A
74273F5204CCD208C109EE75EF233DF71500B2B36057E00EEBBCF206EF6A7B72
9380BEF8AAE693D829CF4FAEC848311AE816B532B1EABED7954E7B96734F9206
93615747CA7804791C610BB1ABB2DCC1FC2B70D66AB1CF0D1A2BEE1E1B87180B
5989F1706873C97456B9C866CD45B80656513B6871E5258B4F80702ADB029A13
5875B876CA70B1C7D8A94FF1FF6FEF4143E5FABCDB2F88257C320A48A3655FAF
340B4244BADD57DA5902E2CA9D16AB4F43972FF957469563D0C9922640E5FAEE
D343B2767533FF7F98ED693455F82F098F49FF48762C6CBC8A23FAE7826559F9
F468E6C87F3B6D90DCC6933B38DC64D7B25FD01AC3E78750E6C317F693DE407D
800C5F07EEBDD461895B0CE67EE0F3250A0626C15B61C06F16D1F82B44B4D6E4
ECBEF48C6E2F39CBB2B53B18DF7A1D813DD1D270D5456DD52043ADC089C9F1CC
96E65C452344B2D8433E743612D6589E714230D8F8C47ED334C81F3B042B5D49
A971F125238DE14F4F908066D56D63BA3358EE76A5DEDC6565AD6A37255A05BE
E687BF902F9AE41A213DE8C23DBCA777AC4DDFEDD5278ACEC4A55F1A082D537B
3C1EE890A6FD2ECE004BF019E81A104221C9323CDCFEF5FE353B3B0FAC7534C9
CE93264A7069B08A4EDB0707BE8D0EAC7708CB4C4E9A8C6C0B36B033E9CB6709
7BA5E6C02789B469CE5593207C521F9CD08ADE0BC698529161122BC11116C802
8E77D0FE5ADDEF0931C9EFBA2B76B78A6219C830E0BF310C364C44C6C465F7AB
7CFEDCEDA4DB46387ACA9492AEB601D13C01F568CA8236BDEECC2144CC238049
BF932E05C2EED82EA1183B102B4387AB3B6495E46CD7967278469F815187D89E
C2E0AE22AD50955595FCE9B6272D5672263EF9EF386EEB42006F378BB8940100
A8B8D203192EFDA892E8AC1E9B5ECE8C23F82FA31232BF9D0CF9C597D22FF591
A28B79F5A95764CBB38D4C895235568F90FE7150C1FBDB908FF89B7A33D1EE6F
74FFBDD658513660C7E94D13D9E8F3A7794EC7CEE9F398EED43BC2160CF72C0B
BB45921D4E4136E900937C430D6FB6CE60547AD515C65057701A72EAA4265BB0
838DA20FA3A099160408B7E370811F42E7B4196A92D2DCB49F83986255CA4EEE
7AD745EDF39BD13236E82AA01695DF3C833BDBD01FCFA2AD3988564981899D91
06B0014AB3E73F01713655882FA3C4F97E495949E90706F05BA23006ADAC1E98
CF9100A813565F1D434F1B0B6E1EE0AD2510D6B21D5E44574DA9F28D120BD216
209890529FBB3D24651664E84B70EE662463EF171CCD22DCB473B8173E8F9133
A6D45FBB58728E17A29A339F99A0BE9FC33A702D808AAB91FD490E660AB152C0
727DFE340139F3D874DE4D10E363B15E2393EBBD1371F20C284307E54889EA74
760E16926FC20CEDB48A5D350AAA08318765F1F8406A7234AB0C0FB1B185375D
57E1181660E7EC9261A296A742CF5073AAF797B2AD6500D75CA74B270861D027
B81EB14663E3073EA68EB9DBA1DA800EBDB8202AD344BBA3031C1634BCD70CE6
F1E39534A987A1EEA442751DE48D1AE4276150B16CE3E80B5F05F98041C13A2A
98357AF1CCE46D69A9E54CE77A8F07A43830B823E313133F5880A027C59089DB
3E2579BCBEC7B18D4B6DA7E01BD17EA3C77D92FC02BC0D0A1A2A15BF98695421
9C2577014CE55CEE9E4D5B2FC439EFE67900498C2F9834799128DF2B034852C6
73ECC2D551820D3A4C2876F092EA5477430693F2C076AB6232CD6F839C2708CB
5A55F4ED91FBA9AC00C0C25D34BBF10CB3C2253AE85AB38889B26761BA509C7F
638C6CBC49DD5BE614938B3324E67788D1EF8C9E48A54998D814DF79A7A56131
C3C3E2DB3D9254363A00BFB2F2B2FFC89CBDF00A73211447F2F4AD6CB5ACB2C7
C5DBEF5E30FD84E60A84385CF7C56DB4A483D83D7CDB2BA248A366D5E060162B
0A1601D78E215DEBFE216BADAD8CF8DF891E5101CF9AB4835FAB0C9F2051C82B
75D8E0E23852708838EE1F19AEBB6A5817AA99274DF957210A401145ADFAC54D
B64D7E47CB31336E00CAEBF6CB3BB923E06AC9A1ACAB82BC6EBAFDBE642C9634
11707E41DA572B2601547D1F0D19C2F050BA73D021C39EA26F677C972818BF8C
85CAD5351BD58EC7B28C4DFBB75F82EA4D797568761CBBE610F8B8D710B9EC75
90C31F3DD79FCCA574053CE0C65C5AC1C17E225F9D0CF6750AA8B03DB2896A8B
B113E07E483298507F192AA3372BC8C8C3453A6A5732A7CB0A03B2162D12D2FE
500071536523BE6C63990766307FE92663BAC5E8703FC75242CB2E3C5EB7E7C4
F285F9BD614A00DE6825572189A19315AD3E7B979B12F44E4113E500453BF785
898CDE9DB4412879973CC6965E0B63963876786B6FD9FBBBC704C1DB36ED8954
56428E2AE9ABB2ED239303AAD05165D1F22B1B0254F7980A50D39360DC793D9C
260F9A68379C031C3F37E1FF8F6F08F06BB44BD9534030A4D4593C5356214C5E
C57285B142D255D9CF6EF11271FEA3EE1C24530AD38FBD685AE266ED133ECED6
33BAFFCE5535163BA355DA60436E4E34DC85646396AA84DF28CF38994138E0F4
E0A56D35830400478600592C2FF2A519E5ACA10F637832A66AF9B647BD0B993D
5A426CCAA11CD55B67739B2771CD5E44CB73B31B54F16384D54058913521F902
93851FFE4D32F6A8AA79106C39A9F3738C63B39DD1BC2B47072CA5B7D595041D
0FC126AADC040D9212923F8948E5A8C941D1CB24653006874B7FCD22DAE8A539
CD906C75020B655E4B389E1934B98FFF72243AFF882E061CA00527AB04E6EC08
64080FACFA56E1FDE940835580087C60327114C0E11857D69CEED6B67979C723
818FDE9363FC7DC252868ED0D273EB6C5E74C8B1810ED416C5B52DCDDC5FCEF0
644BB6FA6C7B5DB4598D76106609CC1A998112FD94917B4356D3C2DD059D73A1
F8086340A0CD4248B15B44045BDEB67A0F5C70BCD554C23A55968EBA1D4B6241
35FC775BEE16B10B7FB0291B68BBC5DD2C7A5ACB411700C0BCFD26A7241379C2
955D9BA1921169B16ABD7E4A346CA387DFFCF55AEA0E7CBE23CF6D927C59A580
7D2190600E077EC8EE339C4804180FAB47078057D55EA082989379D88540FA56
F817D5C1B557C9C11D2D1E7D8E9BA2D30379B3A56AD0148429BC6DD9F89D792D
A8AA542E57AE123D18993CC91FE947C21072039C8206693ECCCCF98DAEAB0975
329109C6A52C4D512B80752200BAA22672472ADEEB9E0891A62B5B795FE1FB8E
F40078DBAB97124D5C132E47DB109EA3EEDE1884E4F0BCEF34A1B384EAD081D4
F769B5CD39EB86C28D03EE6A6F5DD566CD2A6228577299FAF90989AC7E1C21B8
EB085BAB7D12B3B5F1AF9C403D65CAC4A7A6E17F4C471B6800267C03E9D494AE
9808EE75928C6DB2B305A37A4B011776C7A572D2FCF18871BB569C2DB5B9A20A
C71449E90BD6EA65B8E7DDBC69A7F7EE5667075A2A5D2E791B87D4136A050694
33055575EE2B52D2DF36AD3AA48C5147CD646223EF5DE660A82E05BA98AF862D
C785EA919D0D096D862AB1F528ADC04010B860F00BC6F3B15E63C8A2951F771C
C656327D1134617F6B1B60CCA4482D0F009098A4B6E0567AE9A9C245F841E744
B67186EA100844CF77E73B7B02A4018ADB15BCE78F8DE275FBF44BB7B3572D01
FFFF3BAFA6428355378CA104CC824C86BDF2F9D1E0768F69FC6275A5B482EDC6
90DB077ED02B06C89697DC6FF5E875146F413F4C42D8470CF5CF70BAB8E99F06
F87D1352E58958D2F64CBA7D25DD0C424F2C51BDA2FB7C6992B79CD83E402923
15B0EFE711C23107EA49C7DA55875A3CCD94F522EDFCAE0CBDD9C92CEDD765CA
D27B9EB2020C908E91E81B07A92AD544D20465D54EE1C52A29C6D3CEBD747AFF
17A6AFF908C79C7DA16969020CA5542A08A0F20CF0D414B21E921D3428906A9D
99AA29639EAC0FB9701025D55BD054E058D3E91D4E1C34FAEAF8703942158003
E586C24BEFDB1660A6DF6AF41AD30FD0099419E94B1EAAB833E4E31084024D0C
90A833D56B118DFCC4F09721BD57C38734D3DB8B53843E1197771C1687BB8C20
8C8A4A69B76313CAC04F35C68CEFC0AA4E3FB3E64340399F7B2810D439A4CE8F
F97123BC5228ADF4F9AC7621009AA271E0B41B6C1C6DA4216EC9E75B6C629871
9600992548A68772C1CAEB0A3EA07DD32BE1E435043FE03050AC7BDCB2194997
38157FF685893185DEC6C4F8EF454A0A41DEBAE7BF7A16F17D75958B02FA0753
A44EC9E581AE3691C027FB01BEDE9F712B7DCFC54A94F447A97175E18373A7A1
08C2925DEC6065EF83FADF34A6E5CFAF53CAF1C31EAABE44B4E65AC052DDF3C2
DDC16FD131C7F302A2F9FB65ECCCAD46169595DAEE4789A37575171281D4F085
5953153234B69713040CD81FD490832AEE5010AEB42AC994C4B96D4043E4E35E
31AC92BB7183E58236D47999A1066D8D27A25818FA7FB3C26371305DCF168797
6964235049BD3E3CE7000C7973BF2299F3DF4D06CED78BECF34BFCF41D02C7E8
55D47BD4C4E854BCDECF5DFC2CD7D09ED923234FD2A518E85789B071CF045407
4929A23EC014E6F3D1E6E16AE77A0CCACAE3F78F40E9A45653BBAF2A5DCA560D
B5BEEAA63C2D221DD2FD3ED1A35B28385846EB372D926891724CFEA5D9EA2F61
0ADB9AE7757B2307A1BB9D6797DB5C478D3C0DADC361309B09C897726DC61646
6250AF1B3BEBADB9F11C2D1B9D7B6576029D6C19FCC634E08E4B30FF5A8726B9
01790B3780CD4482E347D5CADF769F31E969EBAF6E9A2C69F153AE233488B2D4
1B812A11DD57D75487F4261444111E1CB316702DAA740300CC2654A0674BF4A3
ED6D0A92C08E4B79F8C713BC7E31E870020FF5BC586A0FFF6BD2983A840B68D6
56FC15842D694DFDBED78CF74E739DE8C200F17990D35A3680EB7E38BE2628AD
36E5075280062A516E93E883C04AC3D262EFF193BA8822EF5DAF152DC870F653
E379F706AD6E68279120B308770A202E74519F043C7CD8FA2E6C749D88789C50
1443CB717C3C883DE02F1CEFD0BD71260782BEF6721F8437CBFD3BE97D9FD776
E8BD0C85430AD13990FFCDB2D4F9C52FE65532DB267008022C1DDC0F82F21CD0
C6E64F61365C4228D7404756AFF88FF10A172C60310C10FB631F7006B2867C7E
588D43E047676E81744DE1D89FA7F65274992821556F4E2234E00BC6D71965AB
FFB6F138BEDDBE97B8C11D95DF2B43C2C1B991E045743BA616B72E939997BFF0
1FB5C81D7206C438D8A4D6F7743A0984088C61D7B53248D9F280C9CD217D4489
94D1EC57E3F08B64AFA20FE86DF13E7C83431A4CEE4425C40ED537AC50B15AA2
F7686797569D918E9067154248AEB3A2D305852F16A88E8FC0194CE3B471CC2C
4DCD7EE8DA67D9B9DEDEB53FB0BF788FC6CCD3C8503663E537B72974527D5222
A9B8728BE7045DF33975EC34387F5E4BC4A044FB5380D34FA65B3FD76716D40C
47CF247250C134FF33B14EE7EB43D4885785D4D1F07DDD373CB57A8F422670A2
1AD7FA90C418428EEA7FE8502D8A61B50F46B5B91229DDEE9BDC5E27B86B5AAF
00C4FD7FECE560A28F181963F9D2665C53D66C8744DB5881A2207BED1F3B5D59
5DF2E4583D1710094AA106AAD876D5DAFAD2787113209C4AC6070687AEA01E61
1D2A9C5C0AB25486AC71014AF1E1608D9106225ACDC6D829F002A20624B2659A
7011A960737631D26A76333D3B376B4CFB907A890BDF572C18A4AC718A986B66
DDC9D43486DF7BBC05B79A1E96F4F6F11DFA48E98D29500AAE888596D0262AB6
25249432DC77C06982BF37C3726993CE2E3BB3F4CDEBAC6A13D24C003CE7910B
D6004EAB05E713C3C62B0853381B561B1DF70FD81919048628CFB416C87C3172
D99DB6F9A66664C121E4B019C7207B0558CBEFB9CF25E8D97B854F2A29221C65
057830951C7BBC506AAAB6B13F7D2A91DF1E449AFF4711DCD97FD5E3F1A99662
DEEA6EF927E221050F3191250D6B6B3E6330059159C189615897A97EB497CFB4
5085666DF396C64D8953B4F3B0FA8AD33C0598C71A0E87D456CA233093AAFA54
FFA50A3C775B46790D67CC0BCB2112B1C69E42A69D64B62F0E7D8F7E5BEBEEDC
09E5FAF045B8BE29FCE6F56F93CC01814CE35C353A7EE33D323B8499F0BB7ECD
1FEB1ADB7696B6C8FBA9A8C1BED60C8E8939DAAC4A2EC5C445911CFDB94AECC5
0946E35986ED39A5974177626618AA5E29B8E8EC7CEA9151BB39DE44B5BB958F
763828B23FFB6DAD516D7133BAE9E3BACD63B3619B40515553DB3F71F0EA2621
939E55E20F3EC542292AD4367DDC8671EC48E447C84A11C0CD3321730D976806
C49C1636A77020753AE9AA57C1CCA7866F623240E31FC56F48648689B5A0FA8D
AEE8CCC5B3CC8C685974A8043A2240FCCFA6434B1639A763B4DEEE7EFB16C0BB
056BBD534984BD9B8D746C1800A4C8C647055A0A522E3D33152BDA977F2CE166
BCA591084EC06E04746283D175D8D40163288D69FFBA0F8D78760DEF4C5AD393
C7E2F79DB65997EBD308E2F0464B9F2AF622E8D4903B4F7895F2C229917B9785
404865783BE784755194506F32566CD7602AA4C8665A3C51B5D5AE82278DE0CA
379768691D5CE7BEA436FDAF8EDFC92BA4E94A33671706212FBAA983D7B5A446
BF526A58DA4682C9F22549FE68E9C1E9B5847497338CE30CADE1C5BF81ED4836
1530BFB4AA25ED53F1BB7DF1C66513FB59862A2679B71C2BA4F9E98048B005E3
34974DEDC6612AB66ECAD3AF64ADF60EA76360C6A22A08CC5EE51D63E06664FE
BAFE8EA3EF4B83CB84646C78399E063C0AAF44775E6D1570F08B3087E7C76F9D
E29DFCAC798130C0CE5C49E1C5FB11EEEDD8E594F9FFD8090BA7D3F1B16D748F
A531452C7BDA4E2C719DC0BA6CB7E33875B819AEB1EFE37A3656C9B2060FF4E2
B018462BEBE17138AA07373412B44023BA4E2048104C4078EE1312FB9ABF4D5F
CC4C285213F93391F248F13ADE3CD408714E8E7C016ED719D6A4D045FA24AD87
9BFB3139EA35AB802943B5628BC95CEC4FBB62C5383B7DEEE9D850E8A6A969DE
6310CE224B6C00F8F4F61939FED984C2BE19FDF1BF03737057D22C125EECC5B6
161C6B372D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC8A8774EC2D5D5F195A0D61
A2E5CFC76D816168B879E23DDA5E72A7022DDE36A1D32DC13EF721BD656F5752
CFDE4502AFBD45E6D36223AB972791081FE59397EF9D69415C6C2A0679470F55
03B71479FD9AC22E7818EF7BA807198621E30376F60BD85C374F605A05FC7CBF
B86718C5FCFD349ACDBA8A977F82C51263082991C3C58874284F7225DDBCB963
81260345756E793A68C54344BA08C9F096A8013F986CEF5A3DE144D44BB68F1F
BD1166D8ED27FA15B52273FC4B62D766B257DB2E4947F750508B0076DF129C6A
7B69063847180B6DCA83EB97A55FFB23788271A4908468A5E986B3C401AEC31A
E98C6CBF5DB8F608C04FF0EC188EFEAE13FA319E5F388B89BF950C292C152AE9
B1C9F2EDC7FF839307FEDFFEC8F435767AC00997A6BD1E41DB0C2D4E80FFD5F8
8B43266A672CFCD697B42FECECD1750A6E07486D39DD38FEC1C6FA2682FB89B7
97E655B5E55937DF0CDB33E479A0BE74BBC7DD92D941DD65B6A2E6017118C37A
B2FE439C0785F4006CB6D67EA8464B45DF7783CDAF3688E57564736CA6775316
D92B81447AEFC9059DB1F04895DF000C2F81D492A9799B23B51F19772D4973C9
2CC976AF06D7CBB5667BC5737A6818125A3396463F528D5160C7E9F656D93EB2
14E1FA04F01EF82FFD61F346CAD55B0BEF461C749ACD6B2E995F9301AB17C380
93EF9DD5062FA35EDA346E927271617DCA6E532F9E9140E054811B3EA3F5D23B
9220A659E44717F40B2AF08079CB5D0CE2CEAF2D85E987DD9FBA00895D8125BB
E0A6D72DADFBADBA62C969C40E5AD567F556BF4DBA9E3D0CE34CB2B48DB39EAD
4D6A8939194DB0FB0DE24CC9DB3E0DAD7D09451AD9CCED0E89320F996E99C816
901A65536AAF054BB9154531EBEECD5C8A5BC1850FEB1772BA9310637B999350
74B5B5A3470CA5F34361AE56AA4166A829619C268D692AC008C42D510A67435D
B54DEE9349744D7F48C9E39E6A99ADE7AE908D2D4339EF9880EF152FAF7E1DB7
01F8E345E74FFEE4F2237D5BDD9739F9149430DE3ADBF4CABB0D9F723BEB4080
77B9CAC40BD156659A14AC21316C183F9C1A3AC7F42D1767C2A598F3C9EED4A8
E707FDD5EC67F531382E4E32D290F9BE674DAD203CBCAB5465F18682746D4C6A
28F9D30C7151157C5C54299607C439FAA1E16B9860765031E331E896F6F49CCE
F6A0304CC43B7F5676C0CA17EA9FD601A8A6088057629822A651684F29C40542
E30D527396132BCF5CEA59C7E2B55BE2EB8B973B283C9FE104E141F00F8587AD
F862FA731D18CF33BBF61F01565E3C825B0D6141DBDB78A4833AA4ADF9716441
C3D9BA58487A9DF5CF6BEE39F4229BF696B159AF031D2926ED0C9A92315083DF
4961108EC36BDB46E5704EA4E95BC91194E2A4F974546A5D984C311625373FF7
3925D862525CA5E696419DD7392EB2FFFD6F1A8348CFC3FED7249236C0992895
B885E13701E425D4E2ABE4A64D472667986D6BBE1EFE7901E3BAD177DA5905E8
B396E7492E95B9E76C94149A3F195849DA4F15A736793F0C6BEED9FCD9CF230F
4B05040E9A7B26FE06BAD1D0C5C99C055A806FFF66EC1EB8714E452E894B96CF
035A3B45ED6A55556828362D6B0DC62BF35DBCA1A931511C21DB33BD5F7188AB
430B481D5BCC01F6D77789C0DC1F4A6B57C9106D3B5B022409B7B1A8128203B8
139B8EEC22BEE2E8A1A721E5A28DCB5D3CC2243FBD0CC90695413FDE088379EF
2239E77CD65AE292200F977BDCBCAF0CCF5D22E677FF4BD649053FD2938438B8
FDB730DA86C9CA2049211DFC67FEF43680759C508D6DDFD810CBF197D55CE63F
12950167935869EC0E788EE613013F1762AFC73420EC7AE14E3B5C8D8DE89E29
16A05602ADFF175C1ED1EAADEC439EE105C467F05ADC211069122B6CE52DFCF8
2F1ADDA9AB38F688165367750AE3FDAD04F0767BE960612179D325BE5FBB5151
28DA213C13C5028D0F35B01F081084D92EA30AC2431DEECD18070F7F0D395E15
943D0A90F2B930C579EDF743F2C306E3B17CB6C82D7263DE921E4F22630D3B3B
95B790F11B494DD911E42818FB31D40556CC6F2ACE52FF958ABC8B88FC4DD9E2
B7C8DF1C241030B68FBDBA63C29C3A6176AFE8503CE425C1502DC3E14A5993AC
B13E773416364098AAB3C0D8EA20EA384D74D11F9273358E7F80EE29B4F2194E
4F70FEA9D89B449A816459B14ADFA9FA485A9C937CB81EB2374992009A28B699
901B1A6F7C9D69828816E5C27340B373D417016817C6D279CC08B086858A93D3
35B444547DF7D9B7F9EA1DD690571689F7233407627EB2B8DFA92F8C86B98A36
AB956ECE9F5C56207137C9B6C0EC2F626498A0F0C355F94E92659245514FB482
E1CCE4491930A1D4B662BC21C5C6FC7B5E1BFF8F5A244FB8899E1A8F4CF9FF67
EE19B4FCB61AA4463C5F063C6CD64935A0CD72D2269D74A4ABCBDDE3DD98EAB2
4D33C836ED6982D918C794D4BD78C6F05212E127632723E22F2B16AAC5E5F9B9
A5D0D40021B4D64A7FB5914F07F8AA2CF6CF7E88A660686049CE34E3D38D861D
BF4B44ABF360EB7D3DE8A67EEF8FB207ACB06EB3C96569E993960C736F368D18
E7BFE2F17595A6F06E86C9A3108BB7B16E2ECE3A5AC40742A30EE6FC63D0C527
2A643CEC1605350112A1EA4E25D77E21030123C51E9DC543632F6032C907FC8C
50B237F178515C2676237B1365D6F6CBF7ED442F3D6C07BC08AB6822F2C0E931
084EA0348242F396737B001BF8D912C415C3A96A69296704440127AEB4C259DD
3E2A8F118D5E6C141F2C795767645A5E0FDBC228DE1C8B3A966B925085317CCF
8666F62C965542DC03CE3C79CC2777500C3D08C9BAA0E46EF9B381605DD868C8
F663872B230E921494B129F80EA04C64B68413DF7821859BB191D53398A26D61
0D53AE6A1C341E994238F3B603EA8489EF99E770EED78A968F1DC07FE15FB05B
53E1B9BDC776BFBE74BBC7DD92D941DD64F6A70B768A686E1B9E4ED6EDE958B4
B827BAA86E5D2852F0F9D2D12123ED09C5306CD06AF099CA02BAD8CD2AD895C1
CD10FB7223F890F215490ADA121792C467B3251B9D2A3FDE2CA792B25FDE6BD8
F3E7BE64D44807885E1F3CE139E3142A6AF443FE31A419926AB080C6384CFDCE
C2B6116567C4861F0DE79E3532F81D774AD4D86F2122C52BBFB25F7D6E865018
CFA9A68FC5D652D383688537E7372AEDC240A63E93D092044D9F6ED6837EFAF2
5A8BBD0D017D7AFE9F7F41F5815F3A3191BCE2422D7A2ED72A73759271BDD01D
E2FACDE3F5A08254D35A6B15321A1CE74E8AD0D60122F30AC6807B714B972DCB
F7D9C11B71CBDF380BFC10D7A7A77C415D05122439FC3BDD16A69CE127645A37
BC44B3F9D4EF0419CAE23086898BB25A222EEA181459F65A54CE36C42B22AC76
ECE7686E4E8DEB9AFB5A1362D2D92796D62FD8134707E2BEFF7F1B444111BCA3
390DF05DC8B7DCFF5B2424F98BF1A4B2A5862A845F52DF615B9DCA1DB325C4BD
E4011CCD8FC4073F9A441252E4C5BE8704CEB906FF2F4780868C807F5232D55C
D39F009E04929152CC2294077F56A27815609EF2F8EA5A593D8B5FB2F3E1C137
402BCF95DF9EF95772F679457B689F670B7E7526B72223133C1B6DDFC0350D2F
EA09ED1A57A556E7ED936F87EFB364534442C0D46A1C594C275AEEC243C01B50
D644A12E697DC1D8A79CCD7AAC81C7C46CEAF94CF4BA270169A7F79A91616E5D
117BBD39746E2C432C2AF2E869C4A6603888E74770C07DF34EAFE36D3104DADE
5D30F663E2E09D3F835F9D0AC73865D8389DAC8AF2BD995B133F26D26FD4BAD8
03BDE3B1E7B4E5A33E23DAC9405D0D309A900D53CCB6BB86F31C536BBFD6DDFD
C9966D6F8C888508E4F34DC8FF5AC073E1E41F971A85D3F3E0DE1892E99A5DA9
CA76541E158C0FF45936369E8A40FB3ED9A84BACA41D9E1DFE1E8C51F0F4A575
17E3235231EE24E135047D1D41A4DD41BE33CF4DD6B01C27713D884219DD848B
C422E4451B3E77E614BAB9E610F447D00F5C1E7A21B05B1FCE97CD9B54947B4B
E2786DB87914B7DCB9D1F7829958FE71714B439BF1631AF1D7FDCC8CAE78A7DB
AE18A1D22F26FE98B46190E02541EF6D7707F91201872E6993BFF09EB6154A78
525C722347D3AA2C575D1C0F0A479200E5F7A3C35D2DAC2AD31A4A8FE8112B67
C5D6D6E9BBC70968AEFB7F45C8502E8D315A417268C5346677DB6BD9E9151B4B
704964E5695E4E519B8F99CE69629DBDB11ACA917354CD7B5811508053C9B591
4FC368A5F17E77A0CB1994B8B6D5F3B8EDF9D4D1459A3A389B80395B50D7D4FA
086B02F42B2EF6104F0437D55A4BA4FFB96B040DD351580824450D62A12078BC
053A65AE1FF65465B45BAA486A85DBC2F45566226D9EA08B48360A2E96F5248A
37F2CD354ACE5EFEAE295973F7FA2EC08BA35377D5D1AE50A44DAD397382EB98
4802BF9BFFA809061435E8D0D92FD96B367C35B350541459C0EE14BA0A909427
0A3EADCB9E7DAB19B7A27F2BE09900B60B0E04DDF61B063C790D6986F72167A7
B5FCB735BE5857F22DDDFF15C720B0CAF9C20C967E0EEB1C7C304449084A11F9
F5441FC3204748B39BBE76D32933BFB3185C3972FFB5EE959AF5B321D1550C15
C0E4AD2245D110C2485C08BA8C75FA4138F1AB7CBAD5433F32E0B087B698901C
CA4A985AC01117E45F49AFB2D3E936B548CD78AA6A6FCF0951D2B0BD195F6424
2395E6C807B7D00E12CC9CA7119D70638A6E1472E9BDA7EEA81A80FD5FEB5075
EAC45D7F68B01FA3DB2764610BB2340F89623D8E13AA5C261B12CF6A05ACA026
062FC0ABE77E4C17E25900894680BA314C4664F3561E9B74C5C88A8A1AAB4FCE
A6173EDE41E3E0E20718CD150049C59AD81282FB942F156ECC4E82D4CF8E6F87
B2A2DAFC69673E1FB9DFC2BAA665D56A05FE6A270625DF8ABA04200678179907
67F1E8DC707AD40BD7C35EBF67E940285E59CE23C3733F375A6E894FDFF9A4FF
ACB66E01B393AA86C6CF2C1314DA7ECDEF56CC7B254E53E5B07C83A0C39EF64B
938FF2F78E3F2E339EB25046CAD859EC125F231291BB071E306C03159CBE0C0E
BC3794292D1C5C5205E67652ABCF4230A881346337173F2CAC19874CE16FF76C
E828B01769F1BF38140536D601679D0E1CF678E07958D2E8D1710B7ACE4F656F
499E45D95AB16320C06B4F625F5741DA37E29B41B45161262BC8B0012694C3EF
26452F9B772CD7C7AAD71C314A73CB5954C6D639CEB6F8A0A1F4D9414F1CA563
844FBB23B636DEC931E87F4BF5F39840266A3ECAF1104956B59A0A3ED243DF5F
C4465A19DCF6C41EF3B021B251DFAF7E3886C50E125D3838DDC8AD6B097AFF22
FEC2FD5FE356A32BB5F337C05CF64D81FE3741D934528004CF4A16E5CBDD2993
0856F00BAB4302BB272DF7D1D74E1AD6C2925E38CBE6CCA897724AE8F908EF48
5539C01EC385870F845FAA30460635688ADF7A6A9BBC23C207E2F29F0C9979D3
1BDB99BD473FC1F58D17EAEFB29D08CA6FDAF9AC4AB41A59E7DE46346D005634
E91C205F20E0B16731385A3601056504951F317CEB0440C1562E73CE97370200
B05AC2BCFE82D329D45A66FD27815BC6AA35AAA24548EF843B42B699C5237E52
CFDB3F01B1C7B596DBB8AF64EC68D4CD404F5B9B358162EFB56E21D0DD0CCC48
F5EF3FF9E3CCC1F466DBAED2B773B59DBB7841B8572DA86652C53383F987A870
24C1996049F83DD2940CE86DF0B49F8B78D2C81201782DD30863CE69C4F8ADA6
3B97E8BB00ED263A0C0CCEA0B03AD63A68ECEFF78049A3C48F0C0194A8863D93
82764DC241811B3912F36AB2CB1440EAFBA9B6D98CCC9F5ABFDB71AC67AB7696
B479360490EC0AA129AF184694442AADDBB4DEAF6141D460D1FE4D5BAC2E4B91
FCFC707E8C95768AA8C3A484036B56546D498832E8FACDF70F4ECA4EC2777055
4DB296C79D6604875D7953AFA08A933B05135FF872432977E2F106ED93EFED2F
7B4887D93C19B83AF6E957C9A4253FEAC804D0C0E9F2EEB0EF200E16BA13E4A3
6F92147E38CD271718777D73D1FA97743B7726D3CAE5BCD397BA1FDCA43DFE85
D83BFC19421FA0D6027EF8C615112A29AD57AF9DCF94E4E355F566C1B6345A9F
D75F123B9D58A04D880971F69738AFA8CCB0C007F4C50242E48324E9A31040AE
138A87F98E66822BEDDEAA3E177C5141A9845302F716DECFF7B847E160BAE1AD
CAB72565D3820C5DC08A716507690BB9102A46B866F4C7596B3D3867CBE5B640
9D4903CF33BB2B137A8437C97401626DF593F477A0F179C4069C064B1599FE2E
38BEFB071B9FFE3D7574FBB32CA8ABAF8881ACAE02B576992ED48145026B2113
A4179956E369C36C9104CB5163EF7FF065FE895D0F59D9E57DC8F688D67977F4
11F9A7083494C09998FB17B13D8773D1003F34B3D702D587BE6EDD46E091C95E
57B5C19979E675BADD4D87A9F15DB9A16545A27E0FFAF8F610F981D7229F572D
3645759871E00DDB0FF9F0696705D0D31DDEB36819F3701C5EE47302E0C83E02
4E1A13F2AC8B92880E5E5B022B6AEDEC8B7DC647E8C1EA5FB21EE952597E846F
B433E736D2E15CBE3A290CD8EDBAD8D74DB6E9698459E3729274AA08B9E76AF6
E972C730016968AA3FCF6D4C15FC110A14C6B17D85CA1664AAAEB4B0BE5CE51D
102BC0EC8B0E3E69D117EBB396D563F18327EBE4A4D710787BD2B5264F5E83D2
A06AF4B94750DD9AB45446002A69470AA8A3EDEED7843455C81540BAD565BA9A
4D0576098C48E50B5A3CB5B77A54BB5F0CB257D6F6513DE3F13BE05939C2A6FE
FEFB5FE356A32BB5F337C05CF64D81FE3741D934528001A4CEDBAEFD14FB9E03
BD6DCEB7158A8BF35603C68977B22E7A1E745CB4426C0B58421A76F7F4C0C773
3A6B9058E7DD7C1B142979D80DAF96A3F3517933574B07E63748BFA42B5EB6D2
DC10C1B440B5B316FA8F6565B7C238CFCB15BB5C340A21B4537A9834C0B57F6B
0404398961FF1F523A2F174B13F64268A18E8E77FF6F775ECFDEE9B7C0BFA645
9AEDB6C7A96847EF66B919660191C515E6BA18C470914CF1D522123E627D0009
7377258E81C81801F6875890DAF09D18C3EB567019261C42C5D429181EB401CD
60D01E56D959600E3DDBB1E00F77A025329A5EFCE12EB1E2913B766CA2BAC3FA
555CBADAF2CBF6B36831807713E3898334BD99CFBE66C4FDBDD9B91806235C54
6A7BD7D223FF9A05D570F0E0A6F810006FBAB99D5417D7835EF6AEBBEBEC9454
2C15C46B9D992E648CE043D308C4972D2A18551937F8210E34006A8C16D25521
32E72C476CCA444BEE97377315695C92C8F48B152D447F701B9712FA1A2048F7
BA02A2AD093DD441324C85D0AB380941CE0C6A4629254D9BF9BD2399761E96FF
B89B92D564D002EEC1395F056369A8019090975482CE181AB702A4CAE2DDD26C
7BEFF46070A5F0023BE5D8D75060114BB740E4775B72D50AFD9740758FD5FF87
FE68A0180D3AF01E55645C56C2A2A17A93CD9750C808FCE20153F887B6F18733
F551FC2F7795B77D2032FC22EC6B2D7876BCF41DE872E5B2B239D49508341F5A
B5EA90F5AAACBA8D5CEA9822395D8FB023996D19AC5A354550A0A4B324F05BD0
1D36D82EEF86CA96462CC10A9928197E45277F5C32166AB539082917BFF7EF65
2D589681C3E2082A18FE28F830562887FDAFAB6244BE43DCB6A70A1F25A205CC
15503BC31EF6605F4FCBC99AD58058728C98C622AEFBF4978B5A3FB15D572551
E6F6D1CB6E43FC5614C2DA8F5E3A027390810C044FB4980C9A434048981BBE14
00BDCF7A4BBAAC2CD397686834A6BAB96EE0F342B73496C7D5492238EA2FBDCB
D626A1693E079C5E0DF9D65BD6D679F1AC4E210C9AE949387458E07711AF43C0
BD16B12E377A73727F3AFA5C79A53E853EFA52C2C8F7A6956A580CF2A51B9668
B5B25B02434555D99F2E2831DC345014D35EAC9BECE4E62BCDBF60C6047783E1
4863304DF468BE421CC531EAE4B3CD2473C979D11C11B9A47BE62C2A2A65CE33
0E80517256C2ECB6269D49C44BEEBE838F779D685FADB6B36AAE11723FA9E18F
4EA7324558D652C6A768CF09BFA61252C2A551ED56EFEE2EE742AB52AA22BF7B
5277DDF4EDE110185338525E512946CF4BCB5786882BEB14A2C8CE53D19A5303
228F6823D5B9BE65C32C2FCEE435745272FFE8FE3D126BBC92804710EFA337DB
1F4C5BEF5A589847B993C18E41D0CDEF40353FF67F038798B2DAA8B794E35FF0
E71A3712E143B488EE03E485B2DC828E0A0A68F658BBD4D39DECE328161A5FC9
3E7C24403DB74DFB7200435CB6909A403F6731BA048413F7BAB4CD7848CB68A5
110310C59E864A74877AB527DB9E9D3BAAFBA2577874822FA06852EBDFC8B36B
5101F56E105C4987B4DB7095DA38628E622CADD9CBBB97E6B3588363BB9C7DEB
8602373CA4D8C3ADC82B06160E76764AD35A0D801EAB3A54B90340EE12982202
8061F5D741A7B324A31E114B11AD245C3D14EBEA4A6D96765D692852724CD2F3
7B177FD24EC26F0986C5350312E62604B79BC00AF48A56ABD34136479D929405
FE67FE24FDF51775EC6A87416143682C4FE94904E5F5FC71490ADD5DFA58C4BE
21FD88A9327C3609D8888F174524917B75622437819AF5EDC88C5B249C58CED5
C6CBCF63B4FD224DD99546C10DF547D3529C109CCE1864549E58198535EA51FD
2E8E5B900B8591E0336E37BF4D4D9CEBC3315EDD401FB85FD2AAE351AA5C1A5E
AB8CC3B57C95508948D8A2E55FB05B53E1B9BDC776BFBE74BBC7DD92D941DD67
12B9C0BCEDB0E2DEF7ACE895397DFAF366B982B1E79876D397EF45C542582B6F
56F890EC5EE8DD9D075383DEFC29CC08DA5DF4A1E25783E947D40F9E6B3F8299
146E716BBF02D0E32620F3E8A2D06FEF8A8810791D8613AF1938D2E609646B59
17DEE430E079F46889624F7D704AB5D94AF245DD3BF9F14F61C0D235CEF30609
FA607B45E92D5EA21EC37433A363EAB0A06DC62F7478EF61F4F1F8D735C477A9
9A63E84FFDDC6459DFEDFED146296AA6AFA16DA11BE2F6896603072ADBCD36FF
F8986EB0A40B5B19C2DC1D4D8A059876405158D9422E934429B55AE8ACDCAD6F
0083106745A11A6AB035D69BC4C78D51F0A7E43B6E6E3919B677C2599BAA2696
DDF00B27D9E1AA2D9C8E73913FB67F661E0251CD156190FC3B3561C0C632F980
B9CB6494575BE7C27F44B99EBB6713BB8306E5B5A273D464D63141B1EDA0E6FF
D1D82CE4D084352E97F090E2EC38F12057AE3A4492672A3B30BB7DFC8DF26DA8
F9ED33E8062A9F9101ADD125A32195B8CB98C9B19235F81DEDB0EF200E16BA13
E4A36F92147E38CD271718777C42FDAAB9F2E527373DAF483D0CECDA8EF1A082
C93DD3BE0ED5BCF8FE0BBB3027FEAB1C0E29E1FB46C6879342FFCC08E514026A
46682D801AAE769BE7F49BD6526B98F04972FB99578B809358856E4E99B28E13
8E2DB585CC1EC34FAE88B9973536BB9572ADEF166228948D362EA3C1388B62F5
FB5A92DA2D93B044AB8EFE4F0C814F8543BC9EDD7AA79FC7A19652B7004BE647
A5525A8B2067543797BFF3531A3038DC384130E69328D85D3B1736FE39987766
E664D2B835FFD07328565672AFE4D260B3C5CBCDD213E3F4AFCD0419C5E08EC8
14344AFC21976BD13CF41A65E0AA0A4ABAF2E72109A764DB70C0C2B6A928553E
7F0FD284AB603B41B8D938169C832680FEDF5BCBAEEA8FF2042B610A434525B5
D3F83B68A4A45F428997E2A731A4F184DF735C3EB876E244D5CDFE745A089F26
79B720C10447C76A19EB6A3E1BF76F90C6FFC27B544A46BFB4267200F3778B7E
4FB07ECE69B6C047DEBE3E904FF1F6CAB154064C2D37475078B1996A964DD7A6
32B0741C67B0A076ADDA05386BEACC3228335BB67811370645D5A3892446EC8B
C0358E7EB05B2A2A877C99A2BF9C4A75DB0DB9C98FD0BD7C8B46BB47E63CED17
9B0F9340F6C78747E3E68BA7745256DC9C88264BA9CE0CB845C83C0C23485479
85840C6AB9269E1FFD3D6432231D47B3729F7F9F85E0AEC17907788ECFD84AC5
99CF9C38E918B17E14F8702E8CF1CA5655EB64342E5FB6E18F2149FCF4C0F743
AE51C94E01FCA305E0699ED2002033D0851E28921CBC75ABC5E334E0EDC575DE
EA0C73666D12F2D112B93EF7E3610EAA3D8DC20F6C6B95C0CA73AA6E6C1BAFA5
0300B7D349844F51FA314E48DEADBA1FABE0BFD016F19EAFFDA3307EB3FBB383
D33D3F49A37070E2597C7BC1E9EFD4B03FD548584AA4BA05E271A0CA64DE7FC6
FF52CC4EB53F26D7FE8F110347B7B612146B5F7394019ADC42725032D284011B
7B7F6505A11E4649F19D931B7CF21F7DD3136F99DFDF0A598942FA060B061647
3C9C56595065F649FE81E6B3419F827BB8122D3511C0730B3384D1BEA7C3DACA
3F9CB6F0DCAE5CE9E1AB805CBBB65142F699CAC3701D96515CAEC294C1580C3D
D5D7D1ACA7EF735E4FAB04830EF077A8D788B224C18433927336793B4930B2DF
DB4E6C7F70B76CB486438D247D04ACE846336FE0F152908B4D4E14C0E76CEE3C
5B8B6C8367CA5FDE664A83A2078F2618C6D2AD6B30AB09391800015BB8B29B70
C0831ADB61A92C2DB592CF08B3DE2FFA07BA89CF6B19B051C243541591BA42B0
738C360E479E00F9C3A1D16DF1D7F7DA574AD1206B4B1ED161ECA04A033DA2B7
CADB6F645DBD3A8034F4151893F3AAAA5336A17673E9760C57EAD7CB37952D1A
0E9F744FBE8041D2F1BC33E3899664CA77945407382F699101240F732E1D5526
7C9995C6F0BFEB3F5BC0FE45B681C73C50BA9A47821865886CAA5F0136DEBDD9
D4265B8B8BF3A39487DE3B01CD24D7090BF490E9977036461B66EAC5BB976C6C
DDECD24101C91398605EF9467750D982CCCD4B937C7BDB313CD1D23D5C8E17CF
1B43A482C44FE52E57AF48D0449EE88A7A33FC9FFE0ADABDB61315E9068C032E
A11C9CE891DE7655EFDC4FFFB8C6040C7736376F69A88AE986C644B1D6E9C29C
2E65C25A7376AB0951A98F66890658510AE616D7CC864B7F781EBBD8C93AC879
D09B84723AEBF52AC5C3627A231EDAB2CE032DEC53C70B6F33308DFD86F3270D
22EFA230C261DA2FB591A3D5C55971AA64A56995041E4F7A64B77EA34F691F00
CA0445D342BA084E79B46797EB9846C6D03C94C942ACEED01254199D187C2786
2A60CAF9C5128203F99E12BDC97EA3E8503CE425C1502DC3E14A5993ACB13E77
341634E17BEAE12A0EBAE828FADD77BFC2ECDC1E562DAF5666E0C9CD960C9757
BA852F889293D91A1CAD3A4AE79D36983C8FF110BB19E18B570DC8E76669D1D9
5412A61ECDD6F0052BFA2C666FA0A35C4C8538D0E469D3169FFC83D2CE41B10E
ED18221F6B5BB20E234D36C9BA4664CC503DB033478403D995474B0B9C993BBA
F0D90F2FF97D117A3D578BA261CE4E68C0F77F30F59EB1784F6A0F9FFEB46FD6
A73D31AF128DEC09A1F7BD23CEA9ABBE841F18CBEF8607CCC1609652E26CF6C1
22C2ECBB711CAE3F61CDD6645A9C7DB42FDD905FF9EE5FA98B2F04D30B8F07CD
CF8827EC04177712A79AED14FD6A58590CAD14A74FBC23BAA5A113EC30784398
DFF65DA62C90E39E9105F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F4C11CF
63E51AC2C563B89563D0254194DE000681912B168D5A19616751A5A80154B18B
9919E7E1A053EAF0914F03174E7682641E7F09BFCEB269B2B71D44B77142FCC5
CECF8D07A5D43B48D40D3DE3B9062DEBFA016CF35B34778ED1914FD7D79D1494
7572CB28073B7AA530ADC5126776CA291A09FF43B943338D442F64F168B93FBB
1CFDFC4820DCC87145B9C3C3C5CE0F22D4B5DEC2A17886B603E559A1023F9B8D
3C9A53B4CF769C01D22D88A00E6A19872FEF45BE21B75A75962A06505FCB9E5F
AC6EDA1B6F2ABC16E79CC17E34C452AFDD552FC63722B99D6012F8638F654654
9C06A5FF101DFF78B9C46DB5842407EEF346C76EDB1A1853D0195D5E74DAAAC7
B9463A89A504AB57C377BB062C02225DCA03E64BEC1177042937E911586EA165
47F111B035E4950C2E95FF366250670C41BEB73DDEB6099C156F65478D26C2C9
5022F1477A18C5FA931ACAE31CE6B70C0C19FF70E8B38B0C86A6D076473DA09D
5EB6334E81FD2B536C53C1E5383D08E9D4AB856B9CBC75EEEF8D77DCFD4CD6F5
A57CEAEE95C35A44216C939D3F93B323344D1A9C173F501DBB9921563643E27D
E92FBC4A239D237BE625AB95503A6F5CDE49D65F468A51513C6C0C4E7C73BD8E
43A845AE2C1ED751DD41D840427BD445817C308A3CBCF0FCFC51A98AECE22CC3
CEF548C0A57A88150633F3F937E960693EFC0372F21C2C3F4462F60F5E9AF391
31695A11CC6FC267DCAE0C9B59A56B57B4F537504ABD10116BAF971E26423C54
B911D61724EA6C5F87CD37B3ED9960F3EB9922ECA0D8291A2B2BB5745E739B4C
34BD9F2A837D13954327A0CBF4BCE71C6E4D3DE65DEDAEF8BCD72364F6206BDB
FC0443243C551324A202EF7D342162142EC4E2496F8761C0638C9965256B1480
1160E4BFA86D1BB635E8AC746436363B2E1F3105021F0B0AD971DDAA36218229
3B730B9880BCC220F03045ABC9A5E9FE04F0D6F9EFAD10B421AB29D9C1BAEF5F
DF14155487DC65939F04DF25603E4E215538A6AA187E78FC37793E289C5B7376
D99A638AC0DC1015E7B58BB720CBE08D7F586D9484EFF2E090F2B7B83494A306
6ADB2182BF36E33D367D772C362F558A7C97771D9C270B1273766151F36B081F
FA1E403BB81EEDEF8A18AA38A2B27ED05EAEE83D45EA1268FF07352E9361C2D8
EBDA0EFEA78640E719188E911FB5CD093EDE364BDDB5993395287255D53B115D
445AEADAB0DDFCD4F291E0BB1A9D79E829E1B64DE91C306B8CD34747CB082ED0
9958E703F7C6D723B9765172D5C83E354B62A53AB284FAE1FEB947C50CE8BE18
F24922B06CAB0E7251032597B9AFA1B3FF320C672715B6FCCE5547387F66BE03
7BAFBC79F33E07B315ADF614ACAED323D7CB1D1D60E376B4E430431F04999264
7E2B744E48AFDC7CEF3762684C3BB8CF107864C3D34C29F89C28469F2FEEE495
C2D8EE9DD57456CA8D38C41F453CF1F228BB220053F5C310AB3BC4F61C2FAD79
570767979CEC35A11BE7BF064F09E48B5B4511A96F0B997142CA4442EC8CC339
16C18366205609F36DCBB866B864DD33B989539A22EB58B91CF6D38106B8B144
4B5016EBB91EB3CB214F4F214DFD130D697972BB11E9FAEFA4E5227FA99FBA99
942BD86CE4B46FF5C69BABCA7352C1367151C840D11BF79397C17BE61B0803DE
1A88E398E151F8E026BD45A921C4D6D0AD78FE0DF483ED62E284A2DBB1C80C3B
D4BDB39499316211ED5F53A3BF9F28CABDCE6588EA8409335FFE5E7239FF724E
93F2A7241A7F524982C6CA2E48F1A1A43105912A559D78274189318C95575197
3D167108CAA90BD20054D93090385F7C313B4F6461472596F8F409DFF33F6250
8230EAE1281A7B8642144AD516A8495C2305C7DA7391F7F20453206FC27D3F8F
0859AC0613F8DE361C46A55BAE9F54A1BCFE5626C8548D50EE4CC7382C721D12
721DAC380E4F048050E3FB3B74EFFD86F7C3CDF4692D601ADE5D71C7F2B1608D
CE844EDA1A1EF25D72940D5B1DB1A3097E0A85ABF31B62E3BE12365458999B86
DFDD3005F3AED1FA8F077AD1F27EA247579F4A6AA5B52709A8FBA2E4C924C0DA
8E4692793C7BD16E138907FAEE4F24AB5E19292866F8B534249B0DC2945E6FB7
FAD0C346FCB6CB449F1872A1C253D156265FB9B5B42AE6E5FCA3C6AD820A8ED4
978E6E330DA55D39534530E84A3FBD9E2E67C4DFC4F613C108E6DC49562B39D1
DE91ECD2A4B570E70B8E61B2E9792E6510FD62D39FF5A4ACAEA50A28342A2B70
936B28D161B0DB72846C611F246C64A17DE4C3F7DDADCC18FE25596E2E2BA97D
AE7FBA899EBE5BA3C09A5C36121A36BD6A5E52B07A1D5FAD73ECBD36730782C3
5171B47739230F3387CF6AC28B30B428835FEEC3F420D0FB6ED83A13C5028D0F
35B01F081084D92EA30AC2431DEEC082EF3C011DB7AEABF17F2425441348DA86
BD66F8023DB0F2B9B1F2865707060EB124540F0904449493BEBD6EC50BFA7ED4
5DC86A0658CFCDF03557FDC0F4A6562E2AC409F8A6677FC3E1B8C53589750BE5
BD6543BEB9C341427D0A4107DD542FAB58593490D105D3EE27FC2792CAC78982
B09CC6A77CF0FFB508FE9D9D43D47C143660ABFB71018B117202D9A63794BD7E
C9430C3C2F852F0CAB96181AAEC8DEFE1F97FED32B2A2F533F048E041466A7C8
6EB8F60C3EE5C5DDC5ACE95A878698D21447282B5710A1BA4A2FF5B9ADD5FB18
289E72501F234A0881F6824498B454D88F5BC45BA812CE660E06FD5FBE491934
10CDC594E321BFD2CAEC9B410445B4F20C79A7038E473F435DCC8DFED5B9071A
CAB8DA75E4003E7B7FE30D31721B0ADF552294F3AEAF6C95599EB68833B7ADDA
86A3104E83AE7D12FE930AC07EF993D5373225C6385265F0B26F3B72A68643D8
44B4F852D7AAB802610A0BF6A7DDBD2B1241785EE4E3C12C9818C3AF0EAA178D
11BE7F34711A204432DA217576D98714DDFAB92717094ECB693C6A287E40B44F
6435D089AE62C3372A59A03E715AC1329D7087AE7FA7566551A6F3D47D0F3296
C0C24906443389166F7F9B34EFBCC86A882B2FE990E5287537A5E25A047E45CB
FE8DEC8188DFCB3DDD2C51B46DAD30ED18B6F832E47B4B52C560B31917915666
501AB51366B8E34C7089DFADB5710893373E50E21B6CD3542AA43722748EBAD8
C81EE73B03FB45F63FAD9A24158569F13BCFEFBC700CF3DCC7585F8945761B84
3E36999482BF45A003B819B9240E0346C843AF0C457C31063A6D8E0239BC3C5A
5CC560BF75672D046287B1E72ADC3A0A4DCD659602601B111221ADC50EBE6642
7070567056000A41BDD5961527034B728049B116F1096A79598C81500F56770E
0EE05835F314EBBD40E85352ED96AA4B73398757BC9AE79EE239D0737094E88B
1370B13A45BE50BE7B22AD864A0ABA9DFD6D2FF80B009A9FBD85CC9A2D768527
7C33CD0102E9F88767637093A0A3133D5DDC1B99B3C28577C37DD451AC570345
D926A1CDB3A4606FF411494DA936F08C2492B5C977B0403BE04D0A2661ADDFE8
81C2D1E76E54D675662C4DE8690CED772A1EE51953F98788104DFAE96B24CAA5
5A866200AB5CB4429B02B82D1558588B2C1FE89CBC50C964A773F0EDE299FE89
87E4A6F78AEA9A8AFF873FDAEC5472E6071C4ED1F370BBA3B81920255B64B288
9C78AF85B7370A46DD365923F7A9551DEB128EF55B10ADFA27A7EF04FDCD12B5
C689DBE39DCF74A5FB69945169284ED9F33C0FC7C9CF0337708F538414490756
7350BAB1E4EBF817A60947ACAE7D3471888432D7992CA8F26A8CEFD4BEB7AD1C
6E62D6DF330B63A423C7D50E3B8BE0ECEE39C58E5C6E88B34328AEB0DCF25C8F
F2D392A9206CB76437B16BE3D68D147B924AB9EBC8DCDD5031752F73F763979E
9AEFC3033B88B33A14BB7A10E8C391D7E4543DDF0459CC060DA40CB54BEE8DC5
905A6024BD32085C531898ABA7BA5510ED1E01F23C2CF84F3025E1E2B911A981
97F832809F5F00686E689A7DE7EC08B4708E751CA321B950C8CB71E91665D386
B2DBDE10A36793E4FE6DF3A8E78A27744CF43DD2E15305B2DF036282675F573F
85297ABF7CC58424075DD74BEFFC969FFB68CAE79898785FA3DF8C86197B0ECE
1DC4AACB3C7212A48B34C09BE296D0A2005E03E188115026D0C86D41308792C0
796B6E3E2E4E6A81E8C17F1881B9E7EE0D4F45D8B9765E69DE0D615DA1FFE787
387CA91D8686BECAFCE3F90866CA825FF8552332D2511AD80B861B7107F8ECAC
CBF276C8A4B98C7FBE461D1D88D4FAF7513DAFFB4D633333FD627F1A45160C33
D352D8C4416C5AAE647D0B71AE6B673FF18C09D269ADC50F05D50AD96E7196D2
E4BA1BAE2EAA5306FA4A8D88FCBC49B28D6F580BE38A313F00EFCA518E9417DA
3ACF279A6E6B8493FB1BF2ACA9DD5F5D24DFC1FC37598A2B80217A7468FD4C5F
5E0936338D866AB0FC624874C0C16DF44ED7E1AC97064A9AFCBBFA6317F7B79C
3911A9340F9DF0129D50CD422300A1E3AA04452A7D2F71DA7349F38B02FD8A81
C733BA78C0DEB81DFA767F0C5E3D8665D1CEB1D5758651D6BF00BF7ED2D50F88
7C730F1080B4D84746BB5CAC8DE9AA09159EC3CF56A6CE45FD1345C68FAAE694
D161B23A5E09497CFBB521F4C8A5AD311E7C2E299020C72B6DE3B82663339A9E
30F05375A666FE0CFD16AE17E43ADB3F221B7937390CF8C8F0654A94227C2E39
56E05DA1D289D47008CAB8EF81A6F42953260F44898C547EFCB14D9A107BA917
82C50ECCACC82AE08060DB989AF3F53873434B09EE05ADA7F16525489C34241A
FCCBC365E9A46EC93D069832896C1EC4D3B69A54F4F4B2D472C784CE42757A07
F5FC7CAC64180FF2DCF208761B9D531BF71D9EF5E69079E547555017E3FE0E6A
AAD35A6AA869D43A7021F32AA2D9E33EDCEC2C2E8AA1A017B5A42F95F11C3FD9
E8817CB287E635A610E81026A40422BDACFA385D9CAC5756DBF95E9A6BB12ABC
491F5CEF87C0AC8408FACC216A7501498D4064D4A915923C09E0453FE33BB002
3FBB0448D628F3A6AEA3BC3B739E65175C965464B32E4EF6C64C0B9207BDF345
201376AF5E40C5D013E52B24313E890AF0CE83166659F46C467318F9972445C1
11D1BD905C08103422409C152BC027E8FC95FCDEFAB8AF9B5563097173DCF7EB
E2C0B1CC38F246D5B7D2EBBC449397BC150B3ADAE35AC3CF5825BA63636F9BC7
190004D7FFADCA08AC7232192FFBC1B56DB638B9EF529DE92632C119B21EE552
E2B7B5AB9A42CCB70FD45377E4AE63F9FC6A967D8BAE93C1EDABE5CF33B11BD3
FFA660B38233EDB3438A3EDCADDF8FCD6E97D2823D18712424AD480C7AD4C9E3
DCA264BD19CD288743FE913EA90B9ADCC3B4D5993230BBF933561EED60CFAB17
BFCBE4F0F8F51BBC9190F7370BD1B5B4EFC4A88C745E4302A160F5C9D25568C3
17E2726BBA2BEC6C25E7FE4C1715E4809583E909BBF393D8632288D5C2F51789
57933B40EF10CFC824D0E09B50DC908AA8AEF832D09427BC1E0D7710DBACDFF2
85067A11117466B22E13F97DAFECBB332C24F5273A0FCDBE85285475
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A11065111310A46FCBB19212E33F0B75634F4B5550
DCA5BA87E18E4F07B5CFD4BAB729CB705A53CE0E0336424602EA4A3032DED7AA
13FDD13235C6514EEA804EE4C5F3035A6AEE4391BF9839800B20C7E958E4B42A
1EB67E90C22A997075D4F197AF8485F01346CB8E17CD12A285205B2D5D6FBC1E
930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A3BFDCC677895D8CDFC66
887FF3C563185662EEE213EC8671211F7317D00BE0D30EB7BD4463F7A542C9A7
373C3A40BE476AFB688358F195BDCDEBAB71622D0A07E8894B416C8D24FC15F4
5E5961D4C11AD4C569CB28F6C6D112762B8527CBE3381953B0908617A28D2D6E
AA59BD102BAAFEAF854C1B48B036052A3D727C0508062BAC23C2866945E46981
F9406B6E4F61160966AA3922C4B0B6ECD515EC314C7493E8924708EFB767FCBC
B0F795CC6D377F09A17FB2C3F45B2E98C37EC1F64848F36CF72B5D3FD84E73F2
2023C63FEF39B8BA4CBB8D50429B985F23EBA0C907B6CCB4A57AC0CEA9F70D95
2224811BCECEB52C86E3666430E4FEC39C474463806CE627529201F1A70ED484
FE92F0C684F4A045E61AD94FCD6D373246804BA5F2171C5C56B6562A13A43B92
A806EB2F90AB0BE445530439E0E8AE43B439654E6175E9B3AF676603DD8C5F5B
037022B38CB7DEAAB749F802FECA58D6E39A107ECE8A3EBE7E645FC1DA735CF0
9EBF4678CFABD1A6D3FBBF8357D4DC0527C2DF2E6C382CF8541FF7E243AA7F16
F534CB8E4EEC56359CF1068CEE7B5E2928E43D4A764EF76A128CDB6111E10967
09BDB6D8C9510DBF277B31B8BF2B86755746BDF7C38D8480A71A9FCF98F4F950
1DCF69FCD870565A7154A43D5879042740352282BB0DFB808522CB0CB8C0D4B6
4A6799C8449E97E13CA0AAAB196E8A40446C77F005D897D944251600E7A6B304
DD76E08FB03B942847FDE355DB3C39956F9F914DBE112C8394C82D57D654286D
5C2C2D8E6A24B34217D101BAA3037C63ACE221E3BBF2A45CE39B80FB268D543A
28FD409DB32F938FC52C0AEA6475261702FAA0ED37FED6546463AD649C32D00F
99B504DD1602FBCC202CC8046BB4EF5E5E1F853052970408E1B96714C7B1D4F8
06F88EFB99AF0D7FA4DA1316C3C5279767142D132F62EB21701C915003C885E5
77E9097CE4186BE217A2F3DD498FD152C0CFD0662D318787C108CF6922C96AD6
D8D0C2052FF4A76D691AAD97701382DAF90A28C0896AC2934C35E15760990827
01FCE199811DD294CC46CF1F0662D1D1E9C9DF1DA7866A772E358CDEA9FBA4EA
2EC4425B0A4947CE3C4A3EE986616449FE094A5F910C93A5B74FF64283F15EAA
51DF4C74CBB662283EA4ACAC860B567466240E3A598E0D31B4BBA740CAD470D8
BAD77608136DE5C61CE6B1953A900D0847C53F2A87B3226F5E1F4560A4C061DD
345142D8F2F4A85CD7DB687B5D2BFCE80CD03235A95EDDB64BE30EECBFC6618D
90A399CBD792FE3855F316DC33187662B519FC5AB1FFFE0A6A33736CA5A0A7A7
5023BD9BFDD0C94753098D5FD28E46480B0DD99F4679772820B94DC7F8D4C2B5
A8BD9D9858193BC1069471D0CA4DC7AA32B72C9C581634E789A5C10BC1E93488
DCC273143E753907B15EE37DC5F4533724D785C22C645809C6B3B4B8C9830049
95898EFFC985D007AE44672530620E26E88BC793DA7E638388619EBAB9C62CB5
1FA723C5F22F5BE5873D64C726C983B33756ACF3FE3AD85C6A571F2C32DB6208
081585CD9A312B09793B1C1FA056374433EA2FE095D4A9761F4DCF1E7FD3ED38
0701745BE983D2F572BB56C524FEC5C3D513E8B9306CB9F10D1D8371169DD47A
3437A02EF556D9F32B061E78C54C768A72D9586113BBDECEDB4192AE9991497A
922907E2AA79A60717C38B23D7CA54BD43619A46D5FEFDD4D548F4A1B5C4BF78
895E49CC6FF69C287D243D182304EA766957C4B309FA76BC36084200592A259B
C950CFC7BBCE0055AF1446D3C9A163230C5D3A4A94455AE704A09A3F3D68C52B
226196F0E466DB8BE5C0AEEC0B983770CFA038C3DB87BE396947FBE8692B77E9
A6F66A56FB00A1B25F2BC121CF9F4F5687CE3FBE729922F42CD1C5811F86578F
44E5BEB7F997758232B7EFE394F5265392E03264AE22D81E75A04AE68344A9F1
51D5B3EC66EF1D37916398FB8CE955E12D8A89ADEB15FE0B39F2C388F118806F
AEF0361E5A30DA786E599B3930697B0E81958D7D8343C840CD6FD8CD9CF8AEEB
9B406B7A6D96510D772EB2BED726D5F12B4487AF4052AC962A19C387672A4D10
1E1BFB07CFF9F577580D64EAB72407B03DB1D677859BE22829180DC4FEE2F095
7F061B9FA20CF2EFB32200703EF58C425B9A7D211E88884D5B37EDC8DEF2EACD
9C3985BA9ACAC69EE37073ED2DFE552E96EAE73E7AD80E3341EF23D94DC5831D
1F7D822A57E0BA52FD6822344E2682F728CC93F7D0064EBFC23908C4EE8655E1
2DCA4E6B66BCB8909CF25DC3C2D8E9B7C6A23C5EC9AE71B2BBD442142D5889DC
10A627B2A8A79B5A871AE317BC920DCE5A312852770DAB7D443F78DE3E69B920
FB62339B763460D639C22F88B276E5AB9B6746E4B80761EF5695001E43CBBEC8
75B75A4FC1B2123FA24C9748AC93A1702B10B0E40E16407433FC9A216DC7AFCE
1C5592473BE60EA5DD2C7E20D9FA68EB94D9FFB9C3E8551FA76B2B182FE2035F
15CEACC47B532E2A0CD7BD22DB24F1D4A26A62D71FAF1FDB22E36A57E3F58DB7
A6B985A49A37D37011B460934CE4FE280586F49FD910BD17B03410E59E6C7C4A
CBD209E5F18DF654301142255D891F5D5EE25C7E2E642E6FEE5FD39DCBF8FF30
71E7B36E3DCF1C4DC905B343BB72416574240E31CD2631116809206D8FC9AEA8
7866065A86E8C27F8FFA109002DD5225DAD211F5C72F3127A60A33D311387343
3BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2EF147C8FE6C56C2062C0AAB932
CABE462536722E95F52B3F0EA4A4DEBD5431F08FED5C9A7C221B4047CA139DBA
78AD79992F031102F368A46509053B640D5611AE12CEF3978630F65EA5D6637D
5F9E3781F9B21AA9AC26E630CF3C66C21426637245657B86A2BEDBEA23EDE4F1
9D7C0B5E6825980CAB56D409278CCA62106CAECCB1CAD19BA26352397C3DC55A
0FCD95276517788B57C336005F77CFA52B22A941B3A6E2A2FC1BFF764DE0045F
27821921B96CB5E1B2410664A97DA3865940CA0CBA13092554BE2EFD56230A94
692248D224912F77E5C213D710BB30698AA060ACD6CBDA8D00D12D8F361B497A
5239C968377C641187756FD690E185CD0FD6180D25ED5EF277F5D144ECC7FEEF
A841B2274570DCE510E39D6CC4DB92AC5F9A65F780A78E56CA9D874106924BF0
0029F54AC62AF2A47E507EE6EF317C394275A8D4EA9E4728E8FE7996128DAD33
602D146F2F5391729B51CD703B8FE781EE6D0760089F9702E3D942063E0A67AF
5249EEF89C244049C3CF1978F8FCF81B325B2AE34622C9DF93BD5BB18F3832AC
E4F3BDB53EAE667C420CE57717C29FEE0A4E36339D66998BB4E92AE72C6688A5
942A820EC8533878806F9D4BF2E9C684E2C80951B24AAACDF129B2BB843A30CC
0BE0491BB50ED4D6D27399B516B372D050288238FAC9752B71333FC04EA41A3D
47ED79F3CF854023A848091216B79A09D0DA43B3B6D093109037249EDE4DCE40
366915CEFBB990105C1DED1E18B1755EDCEBE41A6528A11036BDBEB9F7C29164
1E662513C6A53E94FDA12E86C83CF6FE6F19A849D53640C5E597BE394D55A8FA
FF09FD3E5BC71BC12C3208B9FF934A1DF3070C16D6E08A6F36CCB5D8C545F3F8
5475C51BE22597651714C1A4FD2F2959A442EB1662963564B1A7B40E5DF8F48C
433C5CA5E619816EFAA8E50F91A710D45BB0452D7895FED4BB91EC4D99714620
6F25481C94C0C99771491E1E13819CF6A7377A8A6F0B10BCD386D19E8EEB424D
3152712B846F6974174642805F7AC940DF416E626B66428A89D6B762991EC1D1
6A7AA32EC49EA31641D1739B576500ADBDD6E41780224B0BA4B135CC8709B341
37EBE447A68F1A9E8D013BA3A8E4F5A17D763323249C164B1A53439CC169CB92
87CC2897C588A09FDB14647F570BBEE55DC7F2AED109064F325AED5CE3785DD7
83438D89D92DEEF30B1108A7B89032C6A3A9CE03FD8D7995C36D487F4473BFAD
ED7EB57761DE73497A3B48229EEB9AC514E4F025A6152B66D3C8479149B8F71D
794844779E3E75A3B587ECEB87AFE9774D0382F4344609B68A5C8D214B273599
AD506E8854424DEFED99CFC4E44ED5ED05A828C54ACBE6E9B279F7F217372686
B1FEEAC57C32764D531E3B5CD8D17B0CB9F899FEF3A2EAA4A823554E47293FE9
A250E723A0904FD35956702C9EAED6CEE280BA2961683B841750023A049ECEF4
E846C3B11474D80FD7EFE56186D215F35E8466E92D1CB0373B54B48A334BC58D
1E56137BCCE7801E3E60E9DC22081E65320BCF3099187ACC0F680A66AA8A9876
79755C4CBD2D05F9A170FC269B792E8CF7A042ECC3C14796A19EF175214EB32A
5FC96F88FDB8F030E705C95EB548911B66840F812555122B46A03394E8950D9C
D05752ACF12F16A5BE9A050B0DE704CD8EE4010F3934E4F5E41A104221C9323C
DC0D03B79E4C0CD14763A1A75896A1B0ED2BA5E4D5BA20DBDDBB8359030780CC
EB0C66A4E587C32FFDDC1A25905EFC237FADC20659B5F9286389DB526CFBD3C7
467A1598A876ED18B65ED8CF23F4E7A16DB051E930FA7ECCA082ACB5CB8542AE
65A90DA152643E676A125CAE42E92DC32D807271357666762D77694B9A34F6D0
492707FF62210299A4423C3ACC13EA1488C6BF1466CBE78E88CF731D3304A8C7
6D1382E6670E3170FB9B6E9F731B075C021DB2F0DC106177F0F23DA3E1384073
BEF515A459776DE5C16AAA95E2A57AC09E4ED044E21C27D5FE8A6DE4CEC6967E
6F066F7E0255587A4DB4114D7AAC6AC5870D0FDB7D9B36163ACF2F27702466F2
9C46F0D9DE2A36056C5EB91055B4C390D8A62D651C5EEA4D59F98C4B03FB7768
5A0AD426DC91479072E54317F8DAC250A102E7404CA135B33DD66F8FF40D18F5
735D4B754C6DD160206DBA83310D820B6904B356A92F5781E40BEEAE93DB98DE
236DEF8BA32A536C00BA8B710537FA5B49AA4D0AC7248E1CB5105749E30C15E1
CAAF2439A888B8FC65FD9DEFC68C0C2B37B06923F120D61F741A59B2C119DE91
6B29DE7054ED785232C74B7B97CBC2B55D9DF0244CD985EDF7315B239001EA63
1F6E56552AC72D6106D0753818E3D60C609F3509EE55639B9717FFC3A7C06483
A7FE49E9118C94F79ADB280E5CC38792FF4C7D441AA62D48801769531ED7EFB3
C438EFB1B7F00196B3D4677A6D2AED73403C90884F55AF936438B16B42791907
26592F5D4BCE6738CC357F0EB6F73D82D3FD639157F082AE2BDE83E736F2993D
8C048393BD80B5A86889AD428BF4E1035E92E55FB21E639AF66E6A3A57159BB4
B6E2491256DBD49728AB2F1555042E52D5BFAE0CBACD1CB0F12CC3632AFDA907
6C2B4D0CA7D89ED2FFE76547C10CDE73950A2DBF81F7C3B10A749A1436FEB3ED
08F41F60C1D342C94322EE4191CAB860ECCFB206B89750B2D2505E80A48D4190
66CDB888332A6798356799E3C5E8E27CF34B972AD10DFD269E762E83D1FAF55A
A92F49446DF8C97971B91C521C3C4DF935F68A9237EF9F9A9822B5ACF8839490
203560EC53F1F43913282D7DD1E4E4C82F572AE49002D43E0BFC4D3E0EB2729F
2C58CED6D7A136ACD1C9780AA0F25FA907699A94684125A3870DC6D07D1B859F
13CF627ADBBC9690CA67FD00E04F4B4E33E69E1FE68FB06FBD58BF563372DBD3
0BCB727C32D54CBE10B839DF0E5EAB1B036C24E04B900120FCEB6A4B57C4E828
D61D7937837DF89B62C6E21AB81DFA802852DB1546DA4EFC75CB69B897C9EA83
852D31F31DB5D41A1BA20CC2172E8954FE7E4AE6BDDDCCD03A3A1B7138B8C1B9
43C4B9D41C4A6A03DF00E2D87F00952D0388B9317B30F3F663394D8D17FD4312
9065C91645DBBB7C72621EB46B4978717C037E9F3651EEFBD9C759E6CBA161E6
1707FDF834395B17DF67193ED3CBEC072A1A22806BABA468EC0EEEAC5B338AB8
2863AA355DE4B122317B648D6637053E7E9FD8A52CDD6E8F228ECF8742A92AB8
1DF722616642225A5AD8C4FBEB07FE262D75AA093A73EA927D615725E850B6C9
0240601B19CFC0476BB5CDECBABA39535735FB2F12E8DF9C6EF0F015C8184493
FC6CD5429B546C927D62A6E61E1F705A0403E9A5D8769428006437B4CC1AA1F4
E87F1F184F6819F4D26416C3F9BAF05F10CCA936D0011C53E7B33D5B50ED7BF3
F41289F48E3A0F02CC9E6C93F62E5E348A37CB440C6BBBBA505590A0035BD87A
2668C28A6FBB81E9A15B54807B1EDAC16B811B1A83C27343473FE2C00C904F86
AE911FDF345231182B619096500067E65955AC79582B2F0C81C1F104AA110C1E
2BA4404CBAFAF99040CF04CE4DB5A8C71723B2E2434DC5C0F5DA378CA90CE608
FCC8C5D9EDD0C81B675B7F3F7834D125F12A97B95F6A354624C31C68A7AE9743
8D7050D043B09368E43CEB4EB4ACAB454C6CB74F08ACAB3B9F18F4022B529300
1DE70E6840F613E8C5CD0AF6C7F8FC60222DD0D159923519E3E7D441978E38D6
CD769113E7449FD300F6111A501180C56DF1515BE3D4ED6230F8E013B16B9325
25E99F89904F7D5F282602FD48E90F571AC2CBDBA9D25B690886A6F6CB294CC2
9F9AE52FA751389ADC418F07FC089E8E4F3C0AF189B9B778B86B03AA3E907C1D
B5CA65E297B0DB9B140DF4659E33C48831883E481BEAB54023EDD9BB94E7780D
EEA577ADA965E6EB414F26C049CC42A107DB8F52DC35DEB406386787E703772A
7BA6764A304F98143B209C374E832ABFBA18B03DE375C1AB93D839DC4F2D4163
9E03C463B9D53B1E2F0FA46031B8D11FEDD10EBF2FFEC29CD83DE07CB47C8C90
52B7E802445AA7F372F527344AB7B4970CE004C709302B0425976C12C80E4D9A
88629DE47E52E366904FC2729F65C26996C69E6486DEE35F247C439B8FBB6A1E
08B30A9C71A8C23EA2E1EB0302C214E7D6F7E62C178FD764A4B74F21DBCC8F96
697ACAC75B1E69BE9B77107B9E6CA9194A2EB640F2E213494457C432214A3172
F06613953A7B17D211E29E3F949F0338DB92FCC991DFF2A2E4BF85A1A0F45C22
85C8FD8AB16B1EC17403B22A30DC30A2E1D0C22CAA7BC9EF0A2052A9FADD2B08
9FDCF834EC079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D57C57B96B9C7C7A4
BF4DF6D6E015FA1CC86F6E109C8196517915A7D4B249CEDAC4F913A8956FEA63
F7A79B25BC31D62B143DE775B9F4EBF84063066BD0B3827028E310259BB8A735
E82BA885886035E32F00C15325D93A4475C57354DC43E9E4390F68436DC9F879
F349028EB4377D62375A8A64D2488FD5562C307837ABBC42CE0AE98F7A5099C1
9D635F88DBBC73AD3C77E7D0EC1C2534CB9A27E09020A88021B70DB89EC4B9C6
42582DB27E6C1A55897178FFAF8782C30F4FBCD5010D94DDA30568C75286BB74
1711407B364EC5961CCA9140BBA1CE8E49FEC7EA90607D7B6593B8270723603F
097803324E2127A46E9DBB7EE422D09785408DF04F04C9218D31ED24A5AF0600
034FA70885282382FB1854E2317ABB61D9F28207671D7934C26641B9CE61C958
091ABDF028ABC067885B5CEC66B599B5C1AC746A23640AF1DAAE306808A6508B
40890A680EBB219F52819B5FF425210905BBDF5AB7C9EBB35805F048CF4784F5
6A7F0A00CFD8A93B2BB05DC4BCE6FB521C78FE6D542317CCB8D89E45AB391746
BA70609143B1189648D68EFEFB7BA64C5B3387CC896ADF7ABA61FC71A4841BC9
EA8A8E7DB311080558CFC8D79479C3228EB0F733C9EE13BB629409273368AB89
1AA0006AFDE458F28C88624B7CD1FEC7FC73FEB72F3EFC3DF5F9C35B0D6BD335
FECFA175268336DD6EBA399743D35021FDF6A848FF71AC4935E79D3376E30097
9E292B3B57E1F7A9FBAE495A2A25D5A813D0A695A861BE4AF763EECCA28D2620
2273D879BF2A377672FC17F851F4C6221FBD208137CD1AF401D01E56B5768880
90CE03AD09E0F5D7FA56BAC92F64BEE398EEE222B7486A680C4C9885C5D0ACF8
9FABF737E42204D7CA411E72AA4240AC015EA4782EA6E109CB0C7CD17D94D856
44B1EEF3318B83B65DA5C774B5830C469036ACDDBA116204959F428EB9105018
492FBEE039B2FD87A31B428501DFE5AC0E7921B8A1509E3B1C647F00D147F33C
0A680456C5008EB66FCAD1F5D3E2519E9D23ED670D2DA2EEA548BC14ECCEF071
8D58A4EF75C3E09284C1B5477518EF3FAA5A3B4643E1DA29008EF53B1D720886
42CDFBF5CACC3AD41CD762C0267BA5D5E737B0583EF1AD017455210C8B14FE52
622E33D0CA92E454187EEC90EF1042DA786C6234FB98DB819563461E1F890316
11BB0E0442727748C6C1C87AF4243CA96B1C21DF7AE2EF505C0F1C9BDDF1747C
A2F97096DFA01865DFDE675D073F415271514ACFA19D2B9D2E2D6B67A42A4BA6
53D5C26C224A560EE958725486FC899905DEC21A91E29D6A6A7C4C82362A11CF
147E4C100FC97DB4058172DED8AB858A3708405E2A42E5C47B6FB43241508333
2BDA82C4109E89E7CFD5C7E6C184E7BB7631580F879AA4149F93605BA3D670E7
ECD6DEE6E3D1420A75FD8AB0B03187728AF15BEF6EBCEDDC19B9F7DB25136436
202830E4F2AC7BC9A0512C5598CD6A8558B8C483A30487CBB418B5B2786E77B6
9ECA81864B4F28882C750B0BB9A42F9ABF48FD69D228F722EC13D6CD3D48CCC7
1E9781BC32E9C8DC4B3B1236DA3DFD04797A8DD688A4BF04A42F77671B303190
744202F279F7F5A42B5F5DF08EA0E24367EB14A7D28DAC9A22E2DF55C42D244D
9DBF3EA7B5AD2ACD4E749734781021CBF8204C93E1E8BEE880DBA1551A96E5C2
05A44CC4E279255DEB3D39C8E6D7A7853CF8D3D3E9172BDB50096C934921208A
8E3BB6AB81D2297F5A7BEAB0D625692F612266A93EF535C7209502BCE0A35453
EEC505A64E4AC9B0D19B39BF010C614737D9F90DF91C526DC6BBEDB74A1AC54E
8CFB3F7F1033F9D955D602D1FAD4E4561EE91ED932EBF29214E8FCF17AADDA48
E5ED3A2BA43BA9064D59C171AE87BB22E4707BC8F5E31A6C44A32EA4D1CE1214
192029A2AA4A73021B42BCDBE88FCF29C984876BEFF75AFC65947B449F252554
B976239E485942A55CE487E0A60594F529E8FF5696E9DDBF1D95FCFEEE32F189
B1F6477232AD8B11FBDB5F00B5114C5E507E856A931CCB05A58C30CF4B9105E5
D4AB33B6BD3485EB7A78582FB9373716136C63EADBAE432F566B91425A2A65C0
7D4FBCBB8FB94BE05DFF2B3DC0572C2612D122158C723C69AC7843C0DBEA2D22
6A96B711613781FCC99AA56713FCF06F2D8196D967F64D7A76112A11C8B2EBFF
AADD0C11B0065E2ABCF51132F38958543A485B0615F0D3D880CAE4ACC7B6E8B2
60A180B27C16535CF46861E8FA19A95B7960199E665BDCF1E6EBDC8DE21FC60A
9895B6CF391CAB3B0F645A4734C6C3BAD1BD157A83AEDF417E0B742524E7FAEF
78B5907B740AD6AC18C8319F95F8038848C132C113A0689771474616803AAB5D
309CF795520A8122F5EFBE0D7F58C0B3B31774BF04723ED0B64CEC33739EDA87
ED682689A81738CA44B80AB2CE131DCE3F5B17D645EDBC0B373BF97CDA78F7FC
96502FE6FD8068F002D6E1D9C3FFE7E5403F304ADBED862B74C090DB4AD61A73
BC0C1D2A286E8FA222D6BF84E21F13FA431B7B117E787AFD9B6F938D17831157
75F5935D54BC20ED3F90905788CEA450619E78AB817A65EE30C90E2219692575
43026AEDC02C1CB17CAF8D1FF2EFE2EAF70680BE2B3D13B9ADE40F20C67E07A9
1DA3B03018FE16859A40AD64A8C869C515A0696A8E3E169C92BD7D76B43450F2
2F40CD7C3F94CFEA86A00D25806A181D6CFC2AFD82B5B6062984CA5731AC4034
A3B9A917AA1115B56E93483B352882215895A743EA5E07ADD887271797716DBA
03B23D85CC8B701EAA654C5EE74F40D34504AE2272FFD1124BFA91C2B251064F
8F0B8FD51EDA34C7C1461479D489B8F6CEABBD6962F9D2DA9E68A450259DBE01
CD328B332F06CB1DE98AA4C60583906515E64EAE25F30B42D24F3975F6038AAA
87704C4B218F9B7E2A9129EA602B0D2C1E4F78F0C3E0845F31B2A26D70E4B289
0461CF1C65AB7C2EE42288BD17DB983600580BB3377BFAFDE14EE8DC4F4D6AA7
0536BD8E66FEAAA8CE3A9D67163F4D72FAF2D79EC8F4D4BF3D849D27EBDB2B27
7CBA6A51567AD17C93C29A9C4516327A2627A5EF966035D1469A37176FFBCBE1
C6CB58A383EAAEA0F49A02026DD7EFB9CF5F432E37CE6ECAAFCCE297DE8AF6A1
4C753A41B03FC0FD52500E8D21D81154899B9DF267A46260B89E15331E5E45AF
34161186E06076068BA5EA229156DA5F26E5ECB3811D95422BE5D90F0E736BB7
657CF2A2039D61B2D8A2689D237E5558E7E4CEA9A30BD85817568CE1B4AD782A
AD5BC54327ABB731AC87BCD3AFBA75DBA2025BDFEA36924D015ADC134E037352
63CA0862E5C2046A1D8F2F796E97E492D77BAA5654806C9CAC0D5C43F6D3EE47
7C9DA3D871F8AB4E0B4D591478C3BBE529B6EC7E4ADF4FBCF10F61C9BC429B5E
EE3FAB3E8E69689CC939050F0907E3B61B9DD252FC8B15B56D7AEE5FCC7B942F
D733F00FED1C052FA2DD6ED929F2336F1994F81391FBEDC861C8B6559F06F3AF
BDD9A0F6C3E33B3F38C34B2BD09C3DDB7FC6A25976EC69FFF9B117C01C390C30
0B3FED8E2F79999D0D5FB2D1F10866FB55664AA7D6B2F76E37B435FF635B80BC
C4B4912AC3076B863D865D845C9C5AA837B8C0B647161E5C322CA8205214005D
2346E68D195B37D993CCC2992E4434D1B356BD56EDF5FA00BBA4B8DC37E7C7C0
CA4DB5C3993FE8C1C4A90327065EE96C24DA45F0DA3A2D5C32B18BF4A99C62B6
D732AE47E2A5945B60AE3D43E04691EA342FCB2623DFA6BE42AA1FB0F0B3DBC3
6B1AA378E1A78FC7C507BAB3555B2657D77D0C3635D75B805B4F3426C6C6E12E
081339CDBD42C325050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D60949C70D
16F721EE8768AF0C5A6E66411D4612096424E212D3C293274ED2C5CAD0C162EB
F98632D63BC149DC142E137AD2A30F9CDE995E06A82E0E3D4D0616EEEE3B4FE6
A3BDFC3AA8DF0F3D5886CB8AEED26D9949014AACA71992286716650CFDA57CEF
6889E6449AB834ECB4E89000B8FCF4F8A5E53DF6E447AAF8A2F6C1E1BC9061A6
8E29FCDC136E434D7FC5E7710559B91756AD1171ED3E35715EDFE87F760D7200
C559944587EAF9A8B5216B3D9FBAD299B81268F3A0B7F152A9EACD5E0E0D21CD
6BEF486F36519311DDB3D1CB66837C2964A2DD0D34A23DDF76A21269E381E282
B42D22BEE539B252F78D43A8926570C0FD65AB2CF6A54F79BDB9DB56F26CFB3E
6591E5D3A110F149B5DC15AEC0C2F352F81DBD13A927892557DBCF27C1E3B8F0
E980DE9F1815007CEA51619D84375B758597E07EFFC894400464219578846685
909845C2A0BB763FBAAD27AD91C44C28F1D579989D8C3B5D6AD1164755452E90
D4BE04D525BAFDD52768BDF1A82F018B9599B8DCA6034994F5A338B85C4ADD0A
28C7A8FB765C4A06B683B65331B9E7EC901725E190598A31E0BA4C800DC4399F
FB37A1EB49A99E4A07515606610BF2B74AB4A22A342957124BF3FC0BA485E050
DF883E4B2767E236BE20EBB19C0B81390C67B61C835FBA29F185C0181148D2DB
15BC49E97F6C22EC02CE64CE9F9DBE52947CAF49A78AB2B08D5C6585CC4C3D37
3AB6530B16F574AC8B12D7119ED335B444547DF7D9B7F9EA1DD690571689F723
3401B838B3B8DE8DD27EA9D12727FA1535196170E9653BE1BD5D39F71C4F0499
935074B5B5A3470CA5F34361AE50FCC4D155984F2C2E5939F7FBD5EFBA078A33
0AA3D47F32CF9BA8A34F1E77B2FC8CF73D877D1A660D5056FFD41CF18BDB5187
DA096589FE1C6AF104DC95DDBD1FA5C730365AF6FD13BBFCF23842A49DB132CD
E66F20BAEC015D83893A908DC4D0DAC6FA6AAB73CB8F02BA4A00DF70731D6D07
35CAD73632F8EE970DC0EBA43D2C700A1D5F5EB49114898EFD2472B10CEB31F4
E58CC760BAF73EDC30AE9EFE9E8C4A77C773CF449D930D30A3EA8185BCFB50AF
8F703ED627284A783F001789834F51A623C6CE602AB571F7DA60566CAC0B6A19
3DCF574938B25FAA1E98AC6D253F7CE3745FE9FA4FBFFFCAE245A23E831BFC82
EB4CEB65118457D5C4E806B2A97ADB2DD5A9F66C4F826BDD0FB43E120BED34DB
66E8D610F9A61C9B8F56EA12FE6B0B75A17494C4BD2FF30B17278D535368BFCA
054173AA8327C3AE4393C1F3EEE76365A67C3B6481CF7F0B2B77A332F3AF83E8
680C4298BB02E8DF6E257FC4720D56326ABF752EE368229466AA66BD23250F32
4FA5E2D6DC27EC7F9E54E92E75E48291ABB565C1F8644CD5D9F7E2A134D8A8EE
1FBD1281D259EA64B96951ADC7C641131F10C44612F4D39B6D5FC5E14BDBEBAB
995DF855C081B38CFB6F1B63AF69A845515B38D7DD41EF767759375B9FF9D4A8
62142B7A895F9DB67F41582D0C8174604408E92DB7905A1D4BD179AE5684053C
A89B477D5A7CA9BB95E25366520D713D1D90DD8D9C53C9C4BDD0F3E0EAC40693
083C2A380E5EF5098DF574EDDCC3F0F4130A40A9EE66592CD31FABB9681E6521
877550339CCF16751CBCC3080279B44188897585385A1BD3C350F31F6E61A733
AE3C99463EC5DA4EABBFEBE23FAAC12BA68C2622BA37536CFAFA2CB139762BA4
D2046C23DCF069221A28B397B7135874360EED1C72A524A9E19BED13D137DFE3
F01A38FE511551B4793C42178514EC183BE32AAE65DC84BECAB8A26FE7C2418E
EB63B7E393108CADDA24C91C1960490D97AB1E6E22EE5A58C7B3B5A46A860FA2
AF035F5084F336D030FB2B0EFDD9A57200A82974EAF0D36C036985AF8BB827F3
0EABDF8E4AF75FC848456161BC77B2470B3DDE3E0CC49BE3BA370215A15953B8
41058296B4C08F4F637F1864CE423FDF8BF9B3AF739FC73D34077A739FB1FBAA
515F68E3D13AF1E8067FE8AD1D722E59AC01D2A48BE86A783BD5E0935B9AE0C2
0F25A9379E3924A26F66952A5CAC70B1A8AB77403A0B2E538CFC17AF02B1EA81
80FFA7BE37E8A4A621D08846ADE751956AF6389B2FD92416870588344D7AF34C
E6BC647478C7F346027DAAE1671F9C4B189830EE8D14F60C0B87DDD481DA4789
B034819B7619DBE08DD2EE3C007463730DBE8260970EBF186F208E041A8BC089
735A59A4A4B48ABF4B835D32B87E700FAB750E41B77997BB57C3923321C9D354
EDF667C863127CE5ADC833BDC7BAA33C1937541891B78E0BA14D8FA5BA226E00
766FF829895F285F112220F830030F5BB39A58964B4CA44CAF45F63AF49B330A
B3DD863A57EFF483E279574CA2D0D685C7D7F56248A987EE709BEFAC2DDB65A8
FC8069D4D1F6A44841B901C02800247CF68798D6ADB51AFE9B73054AE10CBC9D
3A107876C1F9360B9B3D2BD411FB9BA4C621F23724D73B1079F7FA06F9D335FB
DD7DCFEF07F93366AF7F26F35ECF8D5AA73B25A03ABA2B5CAB0B6342F1B4A300
3688088F1F6DA3C384AA1865DFDE675D073F415271514ACFA19D2B9D2E2B8C82
98A4E666860414F5C000CFB1279FEB8FC14062F22C8CF88992CF0D52A2D4AFDE
A7F2191ED663BE4CEC9B314F43D871B3DF88FBB349A138F00F4AF5584F6BCC08
9802C381C6793D5574AF08AE5A4FC89880D4A8DB59D6E7AFC4A8C7BD0E74E4B3
142195DD8F5B2A24F02D547664E985820F22180DD6936424E44D375A97F3A954
AD956794E7CD5E837BB6FD8976146C7B55B5F032F85BF385A4FCE12F33586A69
339B06C285601749955A3AC5F7C62CE7E37B799A57B8009493929890EBB3F0C1
68479B6E83DD3A907195803AE02D1A6A8F255D8E2922761A4B38442B2EB34AFB
74F13954B882D400597DA6B584E6F9460CB7BFDDD97C3713D2D2751EBCDB6B4D
935084759EDE53B849BEF8F9E96DA8472455910D6D61F24053B2D5396A21D12C
4C3381446188AC97C27E08981419E658103DE1F6186AE2E7F9C81FE8C4F9F1F2
AE3B9560C9DF5FE749A072B2BFBA84A84C9BC4093E2151EA61F538857EE97B9B
B04C8D0972A9E22915D6453A0C46FCF77C04DB03046519CA67DE7AE30BE86371
DC189E1F2891DC18525D966190727543507A36A01100B17076AE6C6FF5F775FE
95FA0E869A35A58844DCDBF7DCE03D6DF9C02645D73A4CB1A3F0BA2C1FC2BD60
B7E11C35CF8CB2594EE9642E2DB543AEDD72B66B8DFF757D05048CCF86D9C250
3E2AC940E837087FE7179E9020062622DE064EC1424A36558F1AB735C050E3F0
2A9636E89EF795734A43944A722024C5A9B0FAD31C60B565F5BC7B74FD4431B7
DFC926AD14D993FCFBEBC586BCB872E666A060E4D9241802B72DF02DAB44A60E
6395AF687EC88E429815282D63236602D6F8A31BE1697149D7BACECF4481DC61
CEAB7476A2E574EF705848382A85282F79E181EFF14733E3B857A5EEE5A77813
157D0F0ADBEC739208D41C02C71A920C9DCF953128D34C027E2CA2F3198B67F4
070B0BF7C049F5716574B908144FD6A49D62B4AA487C72F456899AB090228D3C
2CAAA2E1A47767726BD5568FEE2FC810F9149097BB4550BB229B28B167355EE6
F84A6ED6F6C0C6A035420829453139A615402A144402BC8CAD70441769D98F97
BAC267EA8E1ABFAF6486A9DBF6668550BE7858F5790E5E87D867E935B40F3FEE
29A68FBAF8F95762FD3FF5A8C7B9F9F1B25AF98EF04FD9A426060F8F94009F55
731005552C23DC7D7B9AFC3EBCAFCF7D634D4C558A8EFA98F66A5587761AC21F
5ED179AC834CCDCD90581DDD15300FE0F8F43667B79E809F5F38468C15B44107
090BF34DA1C203CF560A545A7BA4701A203715E313E311E51AB1D97FB8FBF527
FB93791CC72A66E417BF6E00591F78211203FA899166FC7E7F6EC4C4BEBB3CEB
93769EAD514FC4C713DD0B97251C58C2DF3AE4E1AE41F64D1B5101E151FDB1AE
7D1F4FD7BB0D32C0CC64B7D418705295AA729B9C7422B53CCE01B56A7B0FC859
F6A13415FF25D97D0C631413A13E707E88CBC5B2CBBB2642E6E29259311BAA54
DBE9C01C812B0C32F4F09AE54B9C67CDBCE3F58CD31ED9DFD15045C345839AF0
A2A207C56F3D57F8DF7F5011AE58F63D569BB78545051C2FC0B81CC7668EC6C3
E1DDF424CFB1800057E4CD4218C88DAEE1BCCCA10DC7C10344C4920CC2B761F9
4727DF477D8DB7701726915638E5A618276284CF0B0724C84017A881CA94A329
EDE534902DAB236D183C46DCD920BFDC0E43AEE3EE3CAE149E069B6BEECEA23B
623899E68B5258DA53F75F1F875A2C2741AEDF05CA40B85CE365D038C5388226
AF3FBCBD086519CA67DE7AE30BE86371DC189E1F2891DC18525D9AB861F88696
6601C53826AE17074880519DE36B7F98A15ECF92536D9EC9F3BF0F340B3C74BD
227D09123F6C99466EF7DC3BFACCDAC376BD3BABB5CCA048A1AEA3096E6F0FCE
72F40947889ED65C9A6EF5A6CC38CA5864656D7E6070BF2E49EDA9528B7D8F87
24EADAB1EA2DE9F086E395CF892AF4BFEE6C45D4B46C6326BE2E10D76442AE0D
19C139B7DC98CCAC1F5F95B5AB4446AE0761DDAEED70C339976E9A138108F567
FDA124069BD4FEFE2F2249FFF6D42D0B1804227B1F17190B56EBD27CEDBAC9BD
9E8F1F25AC7EE3A0CCB8649F60957249EDD95E20DF0ABAD86F9D30BF27F857FF
FC90C7BF80F1363A04FABAF46BAD37087C92DEF6DFF655DFF39C5B92C79835F6
A04167FB100204D212B6E7A84CC797802E2E30E3B9D85E3CFFEA4686598F875C
9C782EB39A105A71C22CF37FCB40C0E39EEF33CC0AF6A8C1095C81DC1E52C828
A7A1155E61E771ED2FB13FB2FE1EFFCBC719BDC2448BBFC520C3A3336645BE24
D02AFF56B18D6E2E1503E9DBC77A09C3C72B964FEB500B32ED3ED63FBFDC0E43
AEE3EE3CAE154790E4606AF1447602483A341A59A1B95EA285C94FA51F6EB9A3
2F971FDC88ED8244072D111FAF3B29F82B6A53B5B7464966DA6D4D3C67A1F5D6
0F9D4C78148EDC134552304A74E667C1C278B677DE3E822E02D8B0CDE82C39CF
CD90D02C96FF328560331A5A45AA9D915695F9BD6096A1702B10B0E40E164074
33FC9A216DC7AFCE1C583D9DF8540FFFA6C0EDCECDFA28A951DD5211ACD684EE
EA1B495C077DAAE47E6B8FB0144A861E53B3DFC693897FAB7394E7AA0197EB36
48B68FAD548A1F010A0D2854BC416E208F20774549A2D4DAF2AB5AC55D031A2A
37B5A5C4E1F920AD6206B9314B5EE2A45D55AC4CFA726AE815C389FD9024AAC0
B8B6A023886FCFCAF1C3215B3630FDBBF9F07E996E67B1730C0D64D471BDD24D
CEA030AB330623FA5051B3D743AFEFD90A9A9AECDCE9993C761F2A78C05B82C5
8509CC2E624E738FA2C0117AF693E5EB64167475C4793F8D1DDCFEBCD49ADC69
315DBE3D9CB510C816020091018865E23D6C0C9BA0696A6B6CCFE54DDC4F9E23
C5636217774935F6E81155806CCF271460659E5391361B7AD025F24591E5C275
8ADD4FCC06F5D5F62106E599BB78EFED9306D41725FDAE6538D801CC3A7BEEFF
3446418F042CA5AF34E76A64CC708AAD5D2F991AB21FD69AD5BCED66E5157585
BD3B9FCB66CCBBD5A735A6CC63CE9833F8D727D6F75B3E5C56959B54C5CC1D5E
ACB1484FBC1BFA5CDD2472E3C0F8EDCAA3573EA8446BE6F8BC46AD9BCE54C1B8
34BD195096C9A61145921EBA98A70B52C5BACFE88BC3EDFD4E8F036B7A8E0B93
3723216C053851A24BC506AFE312988C0368F9F90D9C4536D71DE4847E1EA2CA
160E70DC726AFCBC56E7963B092951E7F28E41BA40AEF7DC35F15191FA8E82F6
C45C7464DD8D22FFBBA2D6B1A9DC6148455FCBAD4F95D47E6FBDDD1AA6690AE3
540098F499D9152CD66F960B99B9DAF4A218BBCC7A64C909FEAFD1329CDF82CC
D06B7C8DD537420762BE015A9D168347B9FD75B3E97A3ACF637BF3CACF81AF69
3EC46ABFC89E1F33F7D49A5D75448700E269AAF9E71A4DEDBFC96A46545C5EFF
FE6685E39DE90AE39CDDCA0264C9CF8A5CEBF01707282D962FA171248D2CF5CC
9390737BFCF9EE4DED1841F703375E81298CB839DFA41A7D400E45E873E73980
25B179511840510271C3A7D64812DE24BE0003908E91DFF2043E53242B1D8E6D
2353EB07C3500325C2BFF8B479CAB483B3A034DB50996700C2E7889E1BAB998D
3EE2C0BAA7AB94A0807026C3BDF1178CBC624BE0FF069DD3891222CDA54C7892
F94C31BD6B6F58348859690E918B1F43F4B7B7AD9AB673C87D665CBB49E8FEE0
AD1803E4DCADDBA121E96EC75C62DFE4A87918BFDBDC3423CF739AC5B38303C3
D4DF196C462BDD10C2C52E82E284CB201B362800EB313E054934D4FFCAF9CC47
D2DBE6A5B490374097FA22ECDCB69D234D60A76461499C303E600F7B007D5131
4906942DC7A6B353CC882659FB302621E803F86E44DE814678617D7D9E89A74B
ED0D573B1C55FE4FD3B23D2D25E543A498D024FF214769C0BED2DBD3C9DBC182
D0BAAF8883B6D609EBBBCB6C69DF836FB0382F02C356CC53B2921BC4B6837321
D5CFD24D23DF79874EDFFD683599494F1332307F1397FF0A40D17D352B303F25
18E05CFDC4DFA697683ECBD6A95D98FFB02D8E94207DD4475611B45D1F1026A6
13D682DFA6B241473F8252E34FA911185BBB34A6EBF5F6422B74D03A38D11BF9
A3E8B0E5080A1994B7689E5EC50C3645EEC16AD24C4603D1BA3E926671E31842
C759229C4DD1A2F966331B52ACA50DB8C6437C945D1D7CCAB29C9946DA4F15A7
36793F0C6BEED9FCD9CF230F4B05040E9EB6222EDD152AD19C307118AC008665
3521EA59D672887A873D93D17B5F45A358A7A162679E52850A292A07CE29B6B2
9C6FB2B8487C2466496CD53654AEBEBDB8C08D97A5372BD85578E1D63F8ECF34
62CBAA35C3F6DA407B7727B2A7D3A46798F5F975A2784717BCE6E4D0B668578B
9D5356746074519505DBC4F8AC480362656BF724DAEC2782BEC3FA70A36E6F2E
812C23119D75A47EBCE599510F9CF8E2B4685C29D7ABC599CBE21843BBCC7A56
BAD7ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4EA69E8FC7A22B23D25744
25D4D3739ACE775C6F5897768C903198AB538589228B6D6D2C9963C0609C5971
DE72A3B41254BDE53CBA9A040A5D36418F1D8742B0D0B1CEE1858FE38474115E
09CDAFD685009C311A387486511204C3C7BD46F7589DBD67F36E779E932E0F3B
E74F6B3E9252D7AE648B74B7E08A7EE90681108D1C214A35C93E039EA707D35A
30F9F5C857DA15BEA4BBD681EB4AC7FA5D24821BBE2AA6B136559500CB2646B1
45F05E86EED0DE38D4C58F03536D9C931372F3601480B5BE6AF8E5668A01A987
4A8FE164BD94B4E433ED6A10C09F25A5C66295498588499BBA7ACCFA8977580B
05B74CCD3E6D70D97D55237269721B3F1714B1B6268FF72060B7F5F22A250609
FD5AB04D8EA384CA2E8970A79822217A4C81AD2CB94928851C68E33D00E037CC
A0DD1BE7FCFFD010079C29E8ED67DDF81CE31D16AE47AF14903C0BB6BD802393
51DB22542D9F627807BC3BAC98C0C539862F465F936F77153BF26864BE91C42C
739B21B195F6B81D312EFBC28DCA19E7FEBC0626976873045FE093C4CBF7D9C1
1B71CBDF380BFDDF5240166D84A2C48EBA62A63C347D512DAD1E9D82A6DF9F5F
7175382997B8DDC1BC31FF9BB31C292003A3619AC356F55822EEFE030D080291
D452ACEDC5D0EC5D3878C72CC5D5B3045583E77EEDAD8574BE5154888A93CB8F
5FDCF5E10577569ACA9770A56D61D2D3F448463E351065724C6F5679589C8305
3D4C8C9B53912E217AA365D8BBF620D38D020557C277B91824D544A070C12B29
6DC1A58A965B7BB003D7FE7A44486FA0DEFAF2F953448E5DC2198B09579780B4
8BE9C0136E0E1F0FB0A3B1951ED5E8434335D76E0707C36ED5E5C2EC7E59783C
A4DEE28A0570629D51DBD141B8B7988DBDA4CB77CB209072EA7FDAF89910094C
BED95E1E0B88C6A32A3A600D9BE2BFA98256BFC6A306ACDD86AEFA6F4F2AFCE5
5BF27D0EBBD8AA5752C845DEDC25045FFDC7FD0F06829558B0B8F88ED849FEC7
A065461871F62A56555CAE6BD34D7A5AF4F5F1B4DE109C3E06915E3461C79E71
BD7FE5E520E34E5B6DC1B2450D42BD399CD6885317C80CB800A2941FCBA7C8F8
272B4C34FD26058AA9E35E6DE5D8F2B1B47900E624B24D44ED1E3D3F761928CD
2D8CA7A1B133A0F65B0BAB2844ACD08BF7E780F58C3F646B4A877F4C34732C6A
D7AE02AA5AA6382253CB2BA6EBCCFBC26B35BBE5EDC0AB82FBAB2A72B5C5839D
67E26A540DBDD8EE81E50B77DC7D364D5CE4021B8DD85F1E8A29F10E88312B1A
DEBEDA65FE59ED0418F6CF07B28837D638BC0C253A1A0903279D7E2F2A9CF549
FC86FE0E0B595F2DFCE911172F8CE57865184F7B0295EA8423C7301B1B5518CC
331DAE2E6E372DDBEE44AA952CA42668A93FC84298A55BA4D2BF6E6B3FD434FD
E1329BEFE5A0C84E397732913C1B50294390E2C94CCC44A38C2CE2AC5E22AB57
C488C5B5802C1EEB6BD2F273D93E0E5F1C2B92E80B1EB0FAC77A5AF40F411EE4
6E679F57A19EB61F1CA27ECB4E79160681674673692CE6C1E789276862A62B2B
4CCCEAA8C0CB1D4D10A732F468CF58165296CD5332C2667B316181BD8C4BE1C7
AF9702CA13B36325FDD90110F1B8A03CE492A836B4369B8114E1BDD480913E76
BE4F94D9F38EE02EE97CC79D75EC3262338CD13F13C659D762DB619946D9C32B
E91C762DF8E6D8F1E3DECF77A703341F4D587EA1BFAD178EE10572D29BF719BC
6C31CA404A9C2F3982F2514C4E5EA79D4611AAEEA72B791C22A1822E686F3A36
A178F05508A9585AD95B37C108883AAE45F3C3D7057C041BA4DDB388A1747F5D
3F327CE1002D81308F20F02D7A75A9BBB6C2BA3F269200B3012D314920AC2333
6A812E82CE22F9347E926491E86123A92B5BE49A4FC08411BA86C8BEED540169
8A5BE5EDF99DDC605C20006E9F68B17D0305373271A4C069322D42C893A30F31
018A64DBD11D7A52FDFFE8A2AB92BED886B0533C7DB51DD3C3C7E0D339631C93
2BBBCC1D5EACB1484FBC186FB2E86E8E20702E2BBE02E0FDD97AA289F96062D4
8C0D9283F5A9962D953AF02C2FD19225D25382E07A0335ABEC054CFFFF5DA472
8BF4CE1D892052701B48B81F5A6CBF0C8A5BED21A826EC20AC4384A8CFF8CECF
07A5944093B87035A3444D643B1ACD115FDFB8CC64ADDCC522D3CBF0CA560734
65C30981210962424D9BC090DA2B22A63819D0573BAC967DB05685E1E2031A7E
A3B7A971E32439FF1B13F40D3F8D619DB75BBA85281C413245BACBAFA09A56DC
AA101DAA6BE705FF575048CC768BB8F13DCF60292C55A687F3837424612103BD
6BE8FE2C0B3F56D5FD72A19D514A9E5A3368F148BA687B89382110163F12D077
12FA1D603AA8E1C41CE527EF0BD411C41588B7D29D7608A92C7FD15925FD0877
BC80D2477F1C8B74D9BC4D8C02A437C099BD473D3BB55E05E6A0988E6ECEA70F
592A300501E7C664BD0F17F1074D57FF9C2CBADA18C621D859943D700A041EFA
73AE2039F97ACEFB9E736E98AF02A05685951906A8AD04FB860DC6E8EFA0D60D
684F6F9222E4BFB76534741D10EA22DD96FE3A7EBD7123D9771EE4312A42DE87
D81FDEF20FA8365562FE357BF1D7A939C74BD161B6D57BCA6BA08A3460339AEF
AF4FCC58EA396431BD4F95BD5F6DA7504506473F525372BDE229F1BC27775145
4170B6DBC89282DC381EE896BBE7AB8209F798187BE85B570F3AB09A83FE65AA
30EF505F246F21D3AD1E663AF5FA6F4C6AAF593924C4A54AC5EA84386CFDEBB0
C59C96F06052E117F31256ECFD54A43D2C903A84418461C6C6A7E9C70667B7F0
6BAB9B1442F59224E465D6E1206D6812E734A2BCA56691E4201028ACD8315DD9
F837C6799F807FA84A35ED5CC53EE38F810C494CDE233ED8AC7E6929D33E544E
0C41B8098970689B23D558FFCB32BAEAFF5444091502018D0F42D2C05275C5EE
7AC03CDA298908B6F30F4EA9CE1E6099DAD342BD2F4918464470E352CD308B16
5A1600EA8BF680C97212992BB2F5000FF23382B563436CB8C374E0C45BE51CAF
EA0A456252D1446648C2CE78B2EAE618456BE93B8235C2F025D73A3C33B647F5
369BD658D343B6CF3CFCA0601F87A6CA1005416A0274D95B0F92C0DFCC7356BD
6CC7414C701A1D4AACFBA6208FC4B1CEE17957997FFB4B64B2B3B6619FDC7541
557CE9C22FDDE5DC2794707DC72EA36F645E4951E3A798A09C691D523CE620E1
59D1A91B4EF0DBFAC9967E6C64923081F2F97B757C512C8213DC07182269DCD2
01B947F78334DDC4B3D69A6DDA20E104C5BAB68F3D943A9B0E20721FF50DFCF3
71A8C762AF5BD7C49E875699AB0AF95A0A8444F6F225FAB6045756E1D6148F9B
E2064A37646246CED13B6BF610E54C5F0F31AA17890D1807CB287B9AB1214E0D
2BCAA31920271BE74A082ACB55C3009CDCFD9F4226B51CADA6D39CFFDBA38C11
C7238C738370C4881C4D0D1BDE3D32EC7DD98AC6F7061D9C3DF3C8DE35F7C4E2
52007805470CF8FD960389A736A651C8E9877DF73E45C1DC10CE4D1B7A2CE5F5
6F369AB2355524440AF77D1E73E08A7F3F8BC5E5831303447C940325E2C40308
60427E314A83705E9D91A2FBE40D45B43CE00941BF138027E3528F2DA1D9E5D3
042D12A493D71F7E57B2CAFD05F718102000FE5C8DA04A175D2E76F7D9586353
0C605EAF261DA090FA8FA27CF9BA4E134BDEC1E29E78FAA1818940AD84C8752C
341604BF43CC737076E4A450C722AF53D42EECD5FC0D9343070BC392C6FCD4B7
A331AF7237DCDC2483E367DD892F6347E5FC256454095C9B38704024072C5FE8
9BE9DCCE26E345425DD4EB1F21A754E413C55D5713C9D3ED528247757063E63F
33E038A136F8256B7DCCA0D7503A0750027042AE2F80F434CB42F82042DA4940
6B00B1E3EC7B94785F492ED1425830D0F304FD7A9EB6B8AEE7919322D2FDF6C7
D0CB83F83B637F19FFB7511DE223A0A261324189EDB3894862EC82C0BA3D2AF8
649CE5AADCD3CC336BC012FD2927F85456B353EA0D2FCB03FD86FD6A1A1A68C4
191BBBC294FC29FD565D68BF89BD37A2E4A0B6BE71A47B686444522D07896534
AD7BCA233A7D21FDCC48F92986F511F7CFA906707D4050015C93B8A7F9FDBAB9
14EE33DB10606626F2893A987DA9D0A45EDB6812A309A42859ACD1C4105595DE
B9D305ADD3F849D4A867BA24B083E54D93B4075011999870F0AD19B5EB1B9D54
BBE7593C45B8F0C5DA2A57657BE4BADBA11C52E735C2C981DD1A51008CA9960F
5252385EA3E898611BA9C4C8A5E0A6AD4E40D7C981A7D46466AE0CCF90E8EEBE
B0E65B1286946DDCEA9ACFE66618B19A9E2827E94DBD4BE8F8EC4704BD05FD39
70E4D799425D869F75A82E117CB23CCB5DD5AC1C4486207ED18BF7D754126484
4FECA5CEDC552F7F63440C40DE3A3120EDAAD93A074010C5626DD9470582E82C
15BDB693CCD10C045215C334AA21432F7B87CFC3379E3EB3B9CAB15E072F4D80
E6FA1492BDE59F46CA026F44D37C0B5592DC31004A9B21D2E9366735F2983F7D
46685E4C4EFEA5D9EA2F610ADB9AE7757B2307A1BB9D6797DEE804EEBD872519
D89ECB766FAB70ABFAD26F89E6170498C96AEA8C43CE8FFC9D1AEB97BAF55DA2
3B2FB4A86F105CBF01CC178DAD3D35670F258C5D392138E7847EE8F523E352D1
8C95C6F3F033B3535A024461616399CBF5E06DF5CD08D2103181F00DF8ACF628
82BF41514C613E5BB15527A43590C6F1759DCB70F1D04C517645CC5CEB9A3990
1B021C755A31414883C29C68C3260535835CAB0C299837ED5FDB244AA92EA8A2
D8C1AA64FAAC7952CEEF7B20E23B36D9B12A032418B9321A056670EEA02CD5BD
486B16E18F9986304859D5F2FC0E0D81998509EAD159A5997D5B146A99666D5E
C0FAD6AC9F5398B1DB515D0797FB632CEBD691C1F29AFD52CB18BD258ADFB0B4
B95F287C55A74F13B01343474FA3B865C083A61C715C70900D660747C0A48205
DD807BBCFA889E3DF1F3A9B584DEBAF9219537AC98E1666C760F3C795DDBD395
4CF74DD4E1B01B54FE67A2DC0DF375C8F1AD952B422FDFFAC7868EB612BAAFC2
E004620731CF09B5C5B9540833CF8A826C8097995D2358258E922079625E4B5A
217E4297A003BA4A52A17EC97639C5852474D1DF235DE89D464EF44F2C9297EC
BF2840EC65FBB63C8C802A1517D9C6FDA3474591F19D573EB051F4A309747CFA
9674F943E7EC7A73805701F9D4D8E41704DD7D1C75FB6133581595F46226B4DA
81F09AFE275D11CEEC42C213CB237B187A7B54F41B54433526B5BCF13F82B6B3
8CEDA174CA001B312141BA6CC5B99C850C4A7D7D461BD05563EC9E6754600AAC
5AC9DFA7381C5F099E4973B9D9B3D5003D79CDA613B8B4263412C0CF0B614262
07C1EB30A98240A5DBBAD1FABB461A009DF7C2666D5C7F3DFD0C7883FB18213C
770555759AFCAC5C084DDAABF8C600A6F211107A589D047118BF18C3723024E2
3EE44D479CB777B38BEEC165EDF08AA1AA9B8B40BEF130CE45A3891B01066BA3
6B19BFBB47A27984EA986747BD8F6FA387DFFCF55AEA0E7CBE23CF6D927C59A5
807D25EF6DCA10420F989127A04BDE01D71D3C32869196A7C5B0429FB13CE859
0A7BEBAF2770DFB333EA66621A5613345D7498A7B5262D6F945FD708A4B04A9E
22F5347DE0C14C6E208F20774549A2D4DAF2AB5AC55D031A2A37B701D8503E89
81DB670CF5CBD09E176E265CF148A200932D71BC183043EEAD380C9ADD597B88
F78BE3410F070DB9434B8E802A47C2278F2BD50DE2A806B0D7FAF79144B46B83
9C74458AFE461803EDAAD78BF5F7A738766E7EFA15A0614101B04CBDDA982E68
D06BEF3405EEEAF0EB2841A5C44777DDAEFA56B27091598B2DFB77BC1215DB3D
B0DD20C73B220E9E8A694F5AB21C2E9BA2D96F5278F06195E416863CB6E924D7
A865C817F3F289BB8EE996EC49746D0F1FEF45942CEA347D253E10733C2AADCC
B66294BDFD72C4D5B371CA54AD62FF2C66804BCAB7DBCAC2C68165EF09AFDA58
7B09E521D96E58A9E2F58E923FC8267AE2B08EF5ADC765E59DC22D831094E398
6C1F052F4A68E6CE5EA8AC69ADBF68EB3D1734B6A9696D4C695B53B5BDC94E1A
BF95D33B8396AE9B26342CC1D2A286A4B52AA0023E80872307E08BDEE03F6F73
68F422D97C329F5E3203005A55E0EC96BEF80AFCC65AF614080C54EFB176D315
27A71C30CAC83A8297461F2574EDBF2E2DBE9D38514538F9F0536817398DC030
E0275051E800D1B8E508F319D493DC71793E84BBB190046644C70938A7526101
9656D36B3386E1305D386FFCADD4AB0292C38C4814F51269E989E7EA469D4550
235FD56FB84F38B2F157E170E61E6B7F4B710CF03E37DD2CF0B5096654FBD32A
E761D29E7A2E61CECCBB294DA4B303547BC3C6BD1A67CC197C6775A117B7B607
BEAA7CF9812FDC1FD16ED4A688023BF4933D7B415FCEC04738328542C9BBE120
9B5AAE73A04E1194CDEBD673BD2C25E906446B44EE5CA10067DB95276F5B0820
E139D55D686C7E96E5ABA7E3D51594B472EBD68B46C87FFB5A530833A191BBE0
F806D303CEEF0D9E89E6660D609C17A3E2095F15EB0F6B2DB6CE16E840BD0577
CD58A2FC5B7D170AAA23986E61EC5D5D66EDF8A007C8C599F051F8181FA2DA8E
B01C1AB485F6884A7B560FAB7F0EB5F6FA72DABD6F0BE52C8440387F1D4C2912
B3FE793C6BC40C82F3A7EBD9537E5C850C6ACF3DD244C32A9E4618FF40C490B2
7180A4904EAA43A8117C0B9DD6DF82B5C4C610882FCB3FB67ED7BCC89AD08FAB
3A14213EFB6D602C098E76E62A5EC461EA9E0DF35C6B43C7C81B91358CF6517C
9C418DA097734EEC2821B195C3535CCE79DD39B987048E8FBE346C1C6A11B43D
85601ED4EFFB48E83B9BABAFFDF4A50902BBA46A6B70113D5EE7B15C46E39393
3D2C0C9B6E55C71F7EC02B32BE0179DEBACAC5A6DFD51F6B5047857684B4CC7F
732FE2BA1F6ADB2A95D564B19A3035E27F66FCC306734A9E46C0D94B3911FFA4
35B4560DB12A7687A9A2670BA768889CB155EBDD1341D52F0F72C308147520C1
AB094D307B9A074DA1502ED05F04969D83194164CA3D6DA0F77A40E2302CA4D3
86A4149D5533482274E276FA9D1892AD2AB3528E7F851C7566BA81164918688A
7C0F747C8B2E92C0A1800E4FEE7E5C815A19621A9BC5B51783AC8C3EAD6F5182
31408EAEF5070BB95F0EF5022694C022AC76124A59410EF51880CA64BDC73AD1
A8116A1BF9C4368DB34A28F256E4B8D91F6146E01C55CABC60F8C4272BE4D277
E12829BC46E495118969616EE7776AA60C53165349CA83A68837067805FAB4B5
6970CD156810F441E51F352F5ACF474B8D104A5677B231727E89E7C1D1601F2E
8ECF2936E74C53FB87A0B0CBD175F000EA557409871F31EB98F5CB8CE8F84A9D
9617F983A5853EE72E80AE99A46FE5E911B5391C8D67CDD3187B1C219C570C0D
2491AB13FCB507AB79FD0421C5C06B9D593024A4172F7F563FE06CE01D7DD7C5
8AB1CC518FAAD040358C0431EE855732DD7DC86ADD2122AC2B78035C26D33F50
489FE18C377E448EDBB0823526BD66B40F0519F048CAF1E842E222CA480F1F22
089A38079692312519392478D3D6EB48B5EF659F1892A8C81AFCA148704CC131
34498BC46021F039173A98507B84A1ACF2699CAE72345CC58732FC5B0BCCE07C
CF4C82B39A7D01DE48521BDAC579546CF72283E2EAD448D273349CE49EF8C715
54AF46D90692B49F7B372CAD916E268A701EE5404CF3ADD7D79A33AFD79FA3E2
B6B0507D12F94D4695BDEC556DF7A96D1319C37848E94B3AB2B3E7EF15157FB4
518E5F5ABA29943100DC94D32D05D7FC8FD35C3A2FDA178DC51B0D9F7E1037D7
5F4395B4E26D499FBE545C804154DD343D0FCCA88D2994AEA23220D2D2D7E02F
4D95D8E30FDF8339ED63CF34C87C7F95F6B9368142FCB34668AF303A6455B248
FB866FD990E46DDB637486F5A5AE16B8B27E8909626114A5A15E0C7ECD8F3E03
97E9EE664F5D6AF7AADA2681AE19E69340718297254186940D6305C96EE2B9E3
E7C9A622D430728E5F6AFC8EE6E2EE98763933D814901FDEB3C6B0DE46B6C8A2
85B25A06D846FC7990129466841B773E2180C2D6024677A39CBEF701D77D05FC
B64F261AD82C488022ED5270A2E632D36C86B97D084A83A5A0AA4B9C1152A342
EE4CA0E11E8CC506066BDFE472196A930F7E54D5A0715C3E6AB79D37E3F452F9
51612427A24B996F9BCCF828FEF7AE18923D4E4EF922719BEA95A88E93D13F2B
BF325F3D9D68754782186ECAADB3C8E713340C1100E472A72DF0579C86603949
39C321A97D4644D6A8119224F3980A50D39360DC793D9C260F9A68379C031C3F
3CEC9853DA1134B7EF26D10EE05685EA4B31E5396C42880126B9183336B45E33
8CBD396A3D7C0CCFFE26F87E374A0D49F0B371789D5145D60A7F69D61F695655
EE42BF46C352D88DDBF9A752EA88550C3B52F81E88195D837F443331FC6D236B
A47C5C52A83C1AAAD52E4279CEDF345817EEBF0BF3BAC3B44161787AAF076F1F
53CE092889E84E5CF483942A38B7120E8EBE9417C4AF1E4E777C38BF8EA9F321
3E4AAE753E34A7C120CEE6144744E50ADB6E0650E1C40EDD6DBD115CB6E00E38
66E88FC69A121810DDA88E851D672F598789D1EE0B99F191326981634CF69C04
99652239FC4B3201383F72B1D75A267D3C5D62DF44DFF6E8E06020FF6DC1611C
0D536171DA37C609A831C2CB28D7EB2B2787C65B147FB7AA49FD7B056D8E1B16
11D9B8A6CA041B9C52065ED9868BD921AE2E19E59DD62075C311E6503D4DC2FC
A7AE4C781A2AF6751AC2366302AD6819E262F020AC43AC01DB8BD67102E1322F
D08D6A15EED887D9CF2FB4A626EA3E546717AE6E239813383277B22612D4A0B5
F79DAA12A9565137074466CCDBEF2182E52EF081AD847D5976FA7D44D4F8C8C7
52B02DCA88D7B4B10945B9CD7B18C88E1931B1D04524CDC4DFD9125EE2B65F44
FC0D155C1E04055D6F81AE5E20A9E98ADD7C7573BC183043EEAD380C9ADD597B
88F78BE3410F07029E3D8F2172FC810D86604C883BCDADDB6EF52427E0BBEC8F
BD4637DA34744818D2364CC6932DF0E2362CCDFCFB51A4191C68077EE40752B4
110D0450852399414A0AB4DBF6A3EB5A3F665C5A98F578A03948821E40D16086
7FAE0496CD8D787202F8B55AF2922B6C713C2AE046A286EC5A55ACA65DCC2D70
D6682DDC8D06595AF02DE1A3719D158291D7F537E66AF56C22A58D8D35E53CEF
C1C3999A20C9F30363291678A7D920F128855CDD17E51BD6AE5B4859D2A47248
BAAA2A6D4330094BC0F348A0C850345A49E0948E53CC2FB8479A8E528B9F5EDB
4586541C7B99D70C7D7E0CF9B9C97D35934825E7E8A09BAE1D07E8D42A8DE84E
EC46E015BEB634516E64EDA0EBF49A3070CFFFB37751AB5F9D5F7E685C44F5AF
AC1CC00F6CB2EB0720E6F45BD57DB169FD3568C8E044865DE7308E80EA37765B
EF328E9065B57C331CDF3FFDBAFE3C2A45868021A54AA1B3BE277E804C6BA17F
299172AC3A4A3FCCC584DC8A4A3A66DC9C5296DFDE89C5BA45AA1E939DF4CF7C
BA337E6AEACC7FEB7F64CEBCCEC52EAA2364B7CD0CF62C046877F31BFE9A0EB3
B38A9BBEB6EDAFA096FCF59C1E5ACCA22A9E65B8118B24BD79414E8A810A1069
26A3C33F1DC2F01A5EC0C489F2B5FC3F9CDE62D34F0DC78503C9876AA064CF0C
5DB840B2BE5E8AC62C83C8DBB9E3C72F4F72D26661063E85E7BE4B10FD5C4221
2DF0F641F1EFB0915EF03A2AB45E9EB6EF6577F3721618A28B6771388DEFFCC8
6EEB064D120907E69AF853FC176D6E28505F9C8EE867E72C2BF44FAEF9D94B21
74CAA3EE08946129664626288ECA24B1F5CFEABDF923EBC52227A086FA1CEB5B
0055E0E6BB6AA10B8D6A55888AB9F4A9241C3C897FB43EA8E3D52DB93F05F9C7
6DACF722FFE9D0A321F5C14EA5A2269B7FFB1CF8A91A17118C51B545EE7F4628
76AB81FFD23E51ACD53AFB930FB081A6F62D772FB4DFD922E3344915DB4ED465
339B3EF1EC16B2E535DDBEB21F384941813C9E50D108A802E9DD2C1BC8F48BC4
1686124EE188D09F9FABE6BB9A468F256346BBA947863DC77F8ED2C32DA47986
BF99DBA6DC4160A20D08FEEA6ACFDCE37767648033210506F9543E915DBDC6D2
6122427DC054BD24E73C577B72DC97BDCA341D8458943368A9554B60AAD1C926
EFD44557B1CF45C204584E5D8B69CF15A6224674A0696F5D8BFCCBA22989B523
37A7CA84FFC146A0B24C496E49C3BAF470DDA6800AC934F27630BF57F9914D3C
9CB2CEA0E439B4691B1ADBB0CBBEFCD733D3E43EA93CE53E04A7095301DCD960
037D8CD2F287E3D38BDE6533572539C228E09D0110114C3A2E5F782B98418069
6A482EAC644B383B846E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C4E0758F64AAAE03C0F7C813814A67AB8F69682F2
563C8FB6A05B1977B6AE44C6E4000F0EAA9978BAA153D1BB827AB157761D2327
965F9752C64E38D854A38FF82E52CF8B2517C0AAA66CC5241505CAB511A0230F
97BDB6CC25A74233F501D7DC96AB9C1952B9E9F348994DDFA029CE05D7A4A6B2
3A7D28B3BBF9C47D8F4284E6FED660C1BFAEA074DF7DA4A6FB60BA0B35346029
17AE80A539BF3508AC3F2E860A3321AEE4E049B65DB2D34B797985E43693F05A
D440F651866860745A2967EB5CA19FCE71E5EC1CC0E55E8C3142B9B4CF53C1B2
438EFD3E82C186A8A3B828C11F2D7A87435E361BE488FF75DDEFFDCFA7FA8B6E
FDD5DB8296EAD27F2A652F3E37A51B2DDCF2695A95B43ECD417D7BA7E61DACCE
CADDA3149B6F56550A0A0F3DD3F565F7751C615F82A1C73C4EBE0D78EEE02B01
C8A3FEC16FC7CE284A888F331C29BD8999D4F3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6F6BDD983146333DDA29DB81DA54F44DCF5364857E
A20DB59006F78BA077D29ABE7A537D2358B1DC13AE97ED90F7D1AE27A1CB55C2
F534E2B546BA5531AE88840CAA741A57ED1F4587A72E74AFA15F15C69046ADB1
B3B6C392AFD856716F96B850D6FF61144F6A9E51CC1B8A86A35087D4A3A37081
D7529F94493EB4739C267B8C54B3A1FC2146237C1D110D4A10112D496250647F
37A36F59299DD9529CD003AD4E0847689E519FBB2B7796420D8EEF6ECA04DF85
390E261B43A555BA97B9F30C18F4F39F192B2A2CD3C1D68ADB1867509CDA93D1
CF858DE8EC69D57E5A7BB2741F4713569CDA64AA18018935D81D1ECAC3C42C4B
6105C3B521226A3AA2ED3A5EA5FE176CE753C04BCA19E4C4A11ECC428F62886F
B3AE8EBC12CE6421C3E633443649187C8B38E5EE9428E1E533FF1260DD242EED
B955A9E3C2F73B641A68A0EF3B9E26314B306649FD15D7B593CF3F02EA2E6627
C292001D28A40628F89D0C92DE66489694C976E71D9214BE0875849A35084581
5873E4D6FF4EDA98E456F41F67A7063A2EF9ED5AC30A07BB8768BA4B23707BE8
C925BE37F7B4C8E511C95D4B61E15A9B84DB541D8D299C5C5F56DD69E7635073
B64FA376773A98E09E6A816DD71D80C3D80ABCB006353330E36963118A600F83
AF3F1902CB9FEDC0DCD19B1871455394437C3A7B477AC27F75850CFED5BDB2F0
71EB6873264F76A5963F0D97E0C4887DEFAF1A5E5016CE039FC62C37DB28EBBF
F30F651543A11127279FFE3AB5F06E440720BE08EE3F85DDAF46CC4190F93B9B
749C6AF33D323C2211D5ADB7AEC6905E1E94099DF34C4CE52D95FDB6A8E7ECA2
A07D4200535F51BD082591E896938B584450D9E008CDD0202DB1B3CECC4CDCCA
F87401373886FF9BFE508C3A751057316CFDC6729F65C26996C69E6486DEE35F
247C439B8FBB6A187926694EC48CB03CF1EACFD31FEE3C7AFFFF0C5E0BAC7583
F21FB6E4C8D2975DF55D9CC0ABC55E08BC81772751BDFCD4A1FEF82C144BA8DC
FD22EB1EE626D143E2530483ECF9EC3055FBEF738582004DC27F7E8E3BCD4513
9706F68286959C07BDDBE793C16F9C0CFA569344FE06F0B093B14CD9DDFCEF55
5DD175A836C0B5998BC9894E64BE50D4D72F52C9C6BE25488151522F70390D93
5D9AC4F8085AA5A8E79D610712E4B57653F9D83164D091A04004D2AB894E7DCC
7BD80F2E8E13073B30FB0216C380B52EA55549ADDE54055B8F3752C3BD610FF8
551EBBE8B2E16CCC5EFD174057C781DFD270EE443F2D8FDD855B94E52711EC27
C88BAC6C68007CD2B57E295E1CF51BAD0124C1C996F03578FF6E93F270C4421A
FCFFA1F85F2B8203BBE83A880E64EF19482C7F416CDA81E1E42A3DD762EBB410
675DAFA048A99D123E16F16A3BCD25F0443CF28927C29049ACDA49759F516973
946AEF43060029E6EC423C5CF30149EE8050AF2B80DCF0F48E1390CD9CBD3B09
8CCE53DF66331BF85D88E76CB17C63F8F01B3C99432093AA8EF1F5AB6E3DE7EE
4F6BE4BF710C73E540AD1D6560138A34D9A3BCFB8D3EF8DD4D8AB58C69D55395
9CF9B282CECAB74DF6BED03AD311FCFE02F2D03BCBB418424E2AA6D4B462E09F
CA2B000207361428C28FC302DD002F50F36A89F0FD1E4BF6558F7BE41680814A
942655822F46D49BAF752BA0452C5C6E54116E0436151F200F13F3680A19FE2C
576FCD8F7D0DA58D5F92DB4D769519DAE82D112486C126CA7D222B4FD5C3A9B8
FC0FB770292B7F1A7A7F2B66F18260BC3778049B8DC14D2376A57F8E999C911C
47D055C7641DA8014825EA8EDB09C617F211946A66200BA2699FE6FD7B53DA3B
79A2F89BCAC29D6B9838390693267C587D384F80760EE46F9B4401B10CFDF144
1F66B82813C96584AAAAFB6010088A1B971AA55A7234B9A6FADCE26BADE0A64F
B79C4C3FC50BF0163B30FC6AA94E845087DA7119805FB5A3BB8757CEC3602EC1
C7581BB7AD91A2830B75F1F6BC3E576363FD8A878E6C26577F7CDC5AF66626DB
81C307C73B24EE7D366B48BB87F15D6FC4F753569AD3D283F63584E7CBB13B11
282D8733C5B3C83FF59388D9ADED57748AAD48546693F03963592EFE6B93DCCF
FA7BB062636B23317120AE39713EECE16EA3B385FE59111611E973D171B832D8
15A5153A698CEBA60E6A0572D23D542D379BB4D4C8DFF2061EE28D253229A6EF
355EBC095BAEDAF4A87A418C0E8E4F8337C2C1388C474C49C235509E5321C900
CB05A7AC9B077E830AFF3ADBDBA865BCBC90606174066959BC69E483AA5B9B28
ACEEC02D0F78BD95634A2455504FFB953CC0D5BE255AC2344AEC5B0437D60D85
139D39E0747DE2E6E7A4A0EC719AB2797093A637D83B2A7B881891DB7025D97E
333F3DC2243BB5C0F72E70572D7D1741E1A1653F2751CE1A3CDDAE7328169FF8
DF4775A03BD1F7B995FEEF374CA8B305A920CC4F7D568E925F71A028CAE5CFAE
8036216E9B49B495325372C5D5075E565C4E883F8C93BA2BBB6EA3D7BC1E53A2
EFB4EB81D4BF7080B2664E0143544CA7AD4F7912B6D1A1EDDA87289862F5E552
7B27BBDC6589428669F1327CEB6FF16A037BA8DB3755639171E716BC1C6BB8D3
770A4893A5F2C69E57BA098F7C297B6E40F2088155619B03EE392E460E98AD01
BBD67C14FAA28243D77AF07DBCE014423D8A06A20A5A057A64B1E35834CE1F35
6ECED9034C186564B121E7588F35A6376D231490C6836978E7FB8F70BB40AE44
9C3070D355BDD7E20F4F329E692A716090B1461D0CA70EBA09E467873B93EB3A
EA8366554961A4598A5A1F893EAF2F30DCDAF0F2D14DD4BDD65D68852CB0F80A
1E454267A987AEC2A0EC64AFCF9F071FBED2F87D04BBDE06BED94B7B8BB50F08
05399A755E60AA5C014952D13DD63685CE97C9460A11DE369EB0D9BD426A9461
30508EAD8120C3E0CDADB2EB5C843FF3AEFF7F1C8F52653D8B20D1525C1C8D2A
15B3F6DE1A6BD85E53CDCF8BB5AEF923F2D4E72B7E07384999D3A4E0E50E820C
E12AD88A642027A6871825ABA622CD210C4E87FA7C56822726E15BBB926FB299
11C52B65A6D7097A49C7022530E2BF63B2701636514AFBB24795FF4BB87992DB
18C32BE05182015FC6DC973983999EB188D1DE6F9B7BF7682583CA2CB4CF9A14
5AE1EAE6EA96308EA15ACFAD439AF04CB9F1DFBA84F4B3DB8FD76FA69EAA64AE
6EC07A541024229E51E2FC0BCC75E867A713E3FA9AD061508E3482A869239681
02
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81A
9AC387913FCA9209F9142F9CEB88DC7864ACE2139716A8B8BCE22870B2A8AE03
61A40FACAAD0F82B44B4D6E4ECBEF48C6E2F39CBB2B53B18DF7F144E9FD272CE
6A23BADEFC0FC80B646A2FC08C8AA1C44A2A00554667CFAFF8A417D246F28CEE
905824D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC640686BC6FEEB9C1DE214972
4C015A2D62C7ACB01966717F9C4AAE6203DBC7E60275D3E38C7F66058EB798DF
3A42628DF4378C539BAE628054B5C31D23B50C2B33943C5AB05E8304A43319C5
8B569F751361768EF816F30DA12ABDF5C63C5B1602823BBFC0C03B7A421A836A
CD4083FDE377A8E800BF093CC74B3F067CC1DF9F37F37B225D1A63E440A719CD
8CC6D148F1442F1386DBC7309C37D13848552D03C07E06969315884369E30CFB
BD715C131435EE885780EC50DFD4D90B568153D7F09788C8877FF9D119C062EC
9DB71DDBB40357DF31989908E4FB3FDA3303E6BC7EBC8C3F90ECE5DAE3E02206
E93022A0609D842ACA6AA03E96F8C117951E672EC54FCF9A8273B7989D201B16
1E870432822FD897B71CEC0427D5FA06B29F527B6A236CE267095F2193898745
610FFAD3AC143DC9CA8CB1C3931E36AA844248234F51BCA6F444C2905A4E241A
269ED51FF329D5C0C86D9C66ED01B85534A1E39BD5C20DE216B33240C40D188F
4E304C4610FA7CCCF0512FDD24CB36B40AACA15B0FA0098083597E359F090380
51C4BC551BACA6F728980ECFB1E999F4E0E329B15FE526F0C6285E5D05CFB53B
F7212E2933DD050FB0820AFA1B2ABFB2AED5544B06AD48DAD5E377C2F375CAD1
3A904419D9E7F6D38731EF1E8CB0917657EB749149E1D61A1EF50C19E72FC8AE
9D835BE39DF765ADAAA523C72A653D19D310CC10E9080C619F102E6C0EE4F80F
05C1AA36C2027A88763A7F0AF2DD0CCE40F2CEFD4D785A43264BAD874D4FB758
1C7082EA167108BEF6F7E34D958D6105130AE25923E7EB77C0FDF5286780C376
3D9D24E27F7FECB251C07A0CBF632410D7D948427FF6782B8850466A1FE66362
4FC26E88758AC01C1C98B568253442AD48691C2A47DF05F6A7466E87D3020FB2
D824E71394F6605CBE638D9A6B5A0DF28C4D81535BA76F76B16C6815E977CA50
513DA81445E93555250A43815E80B39AC00F7086BCB4B36C35CF2E4A42B114C0
7AC99ED39EF436CBA30F8EB1A6E543782DABE3FF805D54945D6DC2C09A0F32C2
954C689BB04A12A787B88A966DBE3F4C2EC9888B56E96241D345CBE471FFB513
9002DD5225DAD211F5C72F3127A60A33D311387E6DBB2951640D74E59891DDBB
4526022E00B54489023B0FBCB6540E7EB3B2ED0460F81AB38B9240BAE8424443
749F272CA43BE6C9B5CD3E674BCF858A46BB2D1898684401E25CC37C0FF9DB9C
5064E2E468F5906C1338EBF0AB1F2B5C97A5E4D6127212AB225F2857D0014DE7
F40568FC538A0EA2E76E1F62790DA67887A81FED8BABAFE9416AA5E06C7C4C60
0BF38B70C87E5ACE2C713203A64DACD5FD072694C71A3AF841F9E3D07C7B3788
5856BBA23EFEA2AB1902F879F1361AF8C0421A296FEED926836406E96C49A48D
AE1DA613DD54D9C840D4896A183FF4E395EB7A69DCE16AF779DB5DE506A534F2
9DCF33411B194DEE2EC1B99F36FA1A11D14A28C0E938F608AF10E3B31B98C36E
5AAA15FF94A95B38469000FBF31BAE9CE8703754A099D21B3329E0471463D457
0D4E89F4CD31A93C312EA4674730466C3EBE9F8964D358AA76DE110300CC7B89
8FBD8BAA1FEEEF4E78760F8A25C60981E6372E49D71614BB4E6EC7B1ED60BBA0
8F874D9E1B1661393BD85DEB50C29E3DBFD4613BD0DB2A70E57CB73CEEE6A51B
72B52020AB471FA444491570EBF12F70F2863F9CBC2CE3E571F5D8ED5009FB80
9985FBD9A3E99D1D6124A3B4DE50749E55267744E046627E381FF09727EFEBB5
2E59282E0199771B95DB671D4B2AD846EBC0109861075A936D6F2508D429C625
85777EB9E6E9DFCA889F03CBE5A9FB59C55523ACF1E394505886FBE4D6F739C6
6BA65248D16465F0743C602C6E12438E7E9CF6405EEAE7CDC599E8BF2CE72DE9
FEDF547B68A41FC346A14D58EABC55ED2D98DA057A876FB35F46EFA6A949A75C
F1DAD4E176B50DB98341C8D442F31C7CA70CA4411B4511BE399A1EFFE6AA02EB
E529146BB9E0D14D16625D3C830ACB43B26371195013F74FC07E862198AB570F
44DAA7CD767C726E7BF288414284CCC3E6FB3DBC5D11E9807F8B247CB591852F
EC9392079A91D02F4954FF97236F55AF6FBCD9AF0E167742D0BD0E131BE7AA98
E955D662DC9AD78F82C29C3DDC08B6A551B0CE96E180903891204F4EBE911581
EA3BE89E4CDAA342B9E52F30E55B902ACC35DE87E70DE8EDFE7D803CB0770A2B
0B8180E5389A54B85BC69FF37B8CE078CBFF5CC6F11D65E7B61ECADC94491C5F
F034CEA604CDF5412886758D49CE07427C96AEECF83C52A4555178C7AB4DC1FB
491ACDD3A0CE09DF3D2AA01AFC9DDFC002A9863D9382764DC241811B3912F36A
B2CB1440EAF4C36D14A899C877A1F71CF5F205C8FF35460B37921BABF917E5CB
A23CCBA7C46C157E3088F4D1C99603A5AE29019C97D03FA54726D906264C82E8
AED7E4AC8F66E56EDDE14DB1462E4F9859384B15882C6B0E2219186DD528D0DF
17F15FF78FCEB2CA616D526C530E1BF18C3FC7EFAC5BC5F623465E81758FA863
78485C3F65040DD351580824450D62A12078BC053A65AE1FFA91D645A9E26C29
A8311282A2DFA57985CEEF4463E64E0B7DD8D11FB10DC168A704C2C70DAEC483
F6942ACFB86DB9C4EF5E16FD6E2A4523B99D267AA808751385186A779C73E575
948744853BCF5547A7870E7F6196444513F4AA8D5FECEAC8EE88C8830B526ED9
264D4F56562FF445F348D19317A058A4FCC154CEEC13E60A53EE79C07932518C
BCF295C49DD58CF10B322634A4B9ACF5325B842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFF57627DD17FCDC5BFFCC5CE9C78BFA2B830328F9A6D45FEEC239A
D76BEED158DB3BE2DC4BA1DC216B2D085F251E56B085F80C7C11DD39ACDF31FF
8D01256B7CED1EDFEEE0376E57B6E45D2F375499F8118EAF5C7F6607DAFC48AC
6FD2258F0314DA293F61D30028BB0FB43F50BFFB3005B677A74AC48E341259FC
DD1E8D932840FCA3727301C942C987A026992772DC2A0B06D5E4AB1186D81001
AE4288BC2EADC60BB6225D9CB6CA887922B117EB0E7F81000CCC4A20522124F8
B7DEACA9E6FB322B9B66DE572DA955FF06BBF51728AE6724360C97CE27BF0DDC
551716E8E06DDDE418B6E3E407307088DF1BF21C09F61DFBD19C30D92CBBEDE0
59D026A5A2D9B65246D93E36A7276E70D11DE1DFC7E967F6DECA7277FCA73E84
1737D9AE81C25EFAB95DC9FD91A124F9F5AE28E844C6C3EAF7DAB0FEED7AF2A9
13FB2CE66241C5102CAEC3992BEEF1999CE2A5574EAC934945ADEA6DB4E4DCB6
4BB074C6094FFB7D2AE0633C33C8E4823681C0A61ED898C571006202CEAFB5C3
E352E7F66C743DEB4EC14A3AE0EF469A2CDB23445830D0F304FD7A9EB6B8AEE7
919322D2FDF6C7D7906EDC7EBCD9E9B6AAF63DB3AFB9D9B87CC743CD66342BC3
BABA111186A0F38F642261843011FB3389DD944969E83C1B8315BF63C3BA9B84
9EDD5F620C7E451943A4E3868D2F9A6B78E6AC615258E663C9D255FBECA07BE6
FB4B14EBF66B06D640012D108ECD3329117185F2DCCD3CFCECB7224FC5E7E437
7C6E1F717DD65F6A274994CC40546439FA5A60BC3719653E525E49FF6F778D8B
ACE4664D86C8FDAD35CA3EA60BE1E28418837CFC7209F4A7357804EDDB05D506
686757C79C2ADE54B913F1ED476E3D86BEEA512B1FC55E137D23FE61B7D69D1E
E48363146DB3EB9914CE42558ABC90B623AFF1FA2CB3EE64202B74F76E195C0E
3F2B12B433D7DA1F634865DA6E5ED7511E1D930D074D76A35F19891E3842733F
8AC91FDEBDF9F8A426019EAF34A2B13634F55E964F8B7C21D937310590871C58
2F30C6DF5FA2097A078ADFACAE547DA592695486DEDA95AD49D2958D1F43A3CC
E7B7B9DB269FBAD050E6082D8DB99454AEF0AD0088753DEB92924B8AACE496E7
45ACE597058C23D84C0FB8BAE6E8B396D944701FDF7FD723D145E93B12A799B9
D0210E411564EF88E75FB2380977263E4EB261F6718EBF15ABA15B45CE0008CB
D8D2B7A1FADD93BD3CC207D8623EB59F6B3FDF302406C8F16686E31B66D8C1D7
E8DAA6804AAE5DE138E8A311A4A1330604D0E557EE03662BD31AF90587A45AE7
42E8CF9E4697F94F59B8AD259D2DDF433930B270C63EEEBF992ADB20C9F233D8
85BD42C04DC9300D4CFA004F89A55999A93B5A3EC2D3098ED38FC4CBC6BE50F1
4FFF4452CB1B96ED0E58AC65EE13077831824210531E56CCF19CDD93E462A12F
35E45673FB121E1AD75F20A8F4E8B29789DD95CA5047CDB13FCDE826D3AAE15B
CC039B1C6A9C21674AD3ADB75770688524E0B4D3151C5E51D640C741C6A05E85
EC79363ACC8A5F234575C256306A3E2B5F6A6ED4C48F6D4440488AE7C9B57B85
DE61CE78FD299609DE1D6795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD1983D
695AD1DE3E935E231AB657C704B4FAADE3CCBBDC7C31C1FE52D8A57D79602D65
BBA312E072096DC25768434E7B56ABD8AE83CD6836A2A624A32128393B9D463D
FF8B865FBC10316F6EC4806316954E90817A74BFFE390FE7B5348DB0B4782BA6
D48AEE80D379CFEE11E4F1CD9A521023438259A1AFAA427959EE4927606F08F4
255EF756643EB591366950DCA06596B169C9665511507959228D5480C7AA0DC6
1F197A9CB5C80A00332184637C6FD2198C1D859D45F35E20C5554B0D72C262A2
3CCB48B112D5ADD2E056258AA295803C60070F8E89217F14F953CC4015C38151
4C1E1BDF36283AAFF8AD785A49E091119556FED39BC1843053FB2909D78D0CC5
BD0202C8FB9DFE45DC35209300AE63A15A7D983219EB991B300213F2BFD5B477
A7342D64AC059315DDAD1A2FA1F4E8CC6969A0E25CD23969EF9E387BB3BE62A3
51C14DAC4BEA7FB4C8F38C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3992A7
7ACADC778ED2784B3423154B7FC03D43F47C6F505869EC5039310EF1F4ACEA1A
40014BA27BD58490D243E14831C19698C0C0C9683827A13C1735D2C649C0D4A6
BE354B0E303F96F1A7DA6410CC5D3F84EC5C9F615650160747A724AF9C66AE82
CB864AB947E3582308319FF3BA95FAA268D83B462FC0BD10BBBB8DB7B12BB101
1EEA4891546F4AC7FCA094F32499C0F8AA33D2C7D00283804FD75276BF2C4F9B
E9BD77A75D5A1E7BEC988F06F62D50278904F0928D97C2A77894DADB216105AC
441F7544C3EEC8F09A260BFCE7C040D10575084BC081821FB759B9016DBA3AB3
9FC05FA6C191F7A83C324AF0629A269BCC414DDA1570B980F3596906BE0D23A7
1396BA0A0F3335B74FE5BC3367497C95A462341C8707177AF767B83F28AF4C0C
F952EA0D9C4176D5ACFBC48D8A48074357B1B8E5B17C698F2052A9C6410435FF
3D114F67EACD436BEEC8ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A6FDD
7D52F256FFCDF706B456B6886F5FF5F416C079AD248559BBDD2767549450C680
3B603B312979604965F7E8298F454E098DC4EE83D9EE5A229DA5B97FF0861841
31743AFD0DC1CF828D0993C56493FBD38744296B82E3908A1A0CE811E0CA2E52
A0EBB9F4998D40FD7B001C660CCA6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4
A868BA0A41CE90D7BB6633CB481DC110FC14AAB8E9264F5EE49798BC49D9D9D4
9B9CB9429CA197321B545625093FAB4BE53BC96D108520D9CE9193DA216221F8
42FD0F3CB18D4D9C66FE5891B484C4F3ECCE8A8CDF069387E4FF4967E9F11717
A630BB0422421290360984C499D5C2F4750008B8107BD17C259B723F956B5B14
7E7C0D6AACEB4C9F0ADEEF68329D5CAE9EFC75DC15A9494E876104FF7675D11D
E1DFC7E967F6DECA7277FCA73E841737D9ADD1D1BAB1961E212D20880069F0F3
B5536CDE53D4A4D5012B54B227A0C18DA8A43ADB7593E98E5E0C75197138FE3F
BB31F876BEE000302935A55EBFE1CE914272A8F50A983AADC0604FD17B2A2F43
06AC9C0E2C687D1D9ACDBB674244037384B36372980DE4F1819DC2B4F825D7F6
AF5769BA3C34DE43B531F84B485EF8F360082659FFD797F6E37B87EAE0447EDA
DEB00764A38DAB429277B77869A70AD62AEA3CFD663916700C95E0023599AD8B
F5E4383BF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0F2F8C4E44A16A51FB
C10F2F4BD0EB7475E396C85116A9D3FDF82014EB00C07DCD76514565D3E6DCBA
5BBF1E7E65EE55B3A8CC8D2229A01DD3EE09EEFA659502F90DEA0CEE99851BA7
2A097446FE8D54CEE9CBC3B88AF70F6D0234ACB6350CB1C56BB44AA5D7005841
0088780E87F8A0D2F6D2FA07D508BF3F6314B934962984C7FE400CC9AB1E5F79
2699F15AE7E181FE3ABC4B4C70E21F3AD9AC49685171C47A257EBC1FA6B40E10
B77C81889061E668B9444D08F3EC366CF071C473CEAF7FA64B863164AA97F309
B76EBD1D860A54D8E656ECEA88768396EFEC282AB93B7CCADBEE9CAC7E77D79B
A760EF4C53A3C983853C30DFA6B0093FC96F298AD1B5807C33A89AB14673D370
619267FFE6A05DCE65C7B986CF466B6A832F1921A6949469ACC2B5EAB9F109C3
6C9122359A60190E6C42C713A9BC911105DDAB231758BD41BEE389B057A1F7D2
5215EB9D0F26C738D1E8782D670AFDCFCBEF6BD68AA64D6CE1D7C82A1E46EF79
FDC5CF1DF72D2275F3857BFBB4FF234B2192EEE72D2CD5E415EA5C1C28F4B537
D15C66B6CA739B8D92F22E3DDFDA20460C55C375A40A34BF6BDB012F333DA135
67389FF89C666BAF1696FEE4BDC1B32589E1427C1749969DAF3B72CFD1F579F4
A62E705B6DD2AEF3D166BA507A1EDB131616EFCF91246FC75DE3D8A915DBC82A
1E46EF79FDC5CF1DF72D2275F3857BFBB4FF2296C19E66F93DBC8E9CA5E86793
FA37889936F823DA9CBA746BDC1BA4A84F7B70846E33CE5F285F32FC4E53A284
1E737ABB84A750A16A4999D5A59AEB5FAE6FA51F6C8CCF447A19D91B8CC30481
B5C49B6ACB4DC451F9C524349EAD4DF1F0DBB3869B74C2373223236E809ABE92
C2630C9A877AE16BC30D56A0B208DA546903B801BE445518F14E701BE121A6E3
C832FDC31C1546BF0855A6767030D9B6B47266B4A1084BE171D03696A026FA7A
544E4D106B9A315700669D9D8A3D985F44DE6070E8E4AF6424F3048173F52CB3
EECA756C4D24FC6054D922F59B105DBB74686310F635AE6153D9E18A0514882D
4CCFE9D44B8952190FB9EC8360698A45EC064FF735101C9B16BC27110FDAE792
2D97BF0BCEDAEBBDA6BE7764CAC582CDFB785921653201A8230C66DEBA105E89
909D76D034C9A5C6A216EE8C2D9C96FF0A04F2EBCCA2467174529C592950326D
E46CC1E57DD4B2A8821A8506BEF79EC524565788A28F5870230E9DA69ABC8078
8F2F72CEE5F5594F71A24092D1CA9BE1635F769E2AC1459B0B3AC1DC117B6296
C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6A0BB569A91BCF947E682976A4
A993A413FC97F6F1331B12604C28FE4D8F7FF429F96D0DCE41EEC1EA29EA44F3
F8493AB33413FB84F35B3C0016089A6C4D67EA0050A0381699FE2E38BEFB071B
9FFE3D7574FBB32CA8ABAF8CDE383085DFFD5EBEEF83D696C0FA27B86904477A
22C09610E936D310AF8455122F4C6B61307071FBEB6E8DA8C43C5E1C317DD3AF
44E46800FED97CA40252808F6AED21A9D6F3EF87869378858BA7E6E918D5E464
49525A4A5A2932DB6208081585CD9A312B09793B1C1FA05637430A13E5AE3E1A
3D5B471CAD468007C4A6BFEF07D313E1ED2F47BDF624179D8827CA4664F96F70
03D7D0BD14633673BF1A66D0126713294E13C1A4571B8A9E6D98EE5C2084E767
98939F0AEF7E64F621BE09010CB6F43790AC69F122BD9618E23C7FD95CDB02DC
661ACA0D9FA5DA0CEB0D82EC823434BFCFE218A4B5FF0264F1EC9818FC80F9E3
E06FA21B47A2C431ED3DEFC7267AD9DE87E23C2411D06FCABEAAA6D87458CCF2
5F198AA55DBC4F8AFB25E33D6830FF6333593140C974A8B13E94CF0E77EFE6EF
C2F0C2FE513C93C7EB2528CC8B0472B5A579EC88E8BBC1480D4976695D2851AD
FE75F0E8AAEAF174FD8B2D5264FDA6E40432CB09DCCF5C286D5EB04E5A7D952E
716DDE9DD17F51C40339BBD717BA9555F70DBFCE390F10FFC62821D7082423D4
6EB801F8502449684418493C3E014D603933A576C6B0758D49F3155D448D505F
73A5206D1647639FBCAEA8108A2649D23FC552CAD67A60480964C6CB0783A8AF
EBB8E005813FC0D89420F1930E18323460DB56C9DF95B90D45EA22620C2FA7D7
521D7D4B3FC1FDA5061C6F4B994301864942F3C18428C06EF16DAA37D7CAE4F8
5E3CC5AEF1EAA75C658E90F0246C18C21CF073CC1D7732019B86C11D799B79F3
3BB09CB6771F637D534DE9FE49A53A3812D7DBF47D9E8A2D353B48627891CB99
B8C759187CF9112E3619F9ACCAD376725BFF2760B9ED7576B9D9EADFA0D51077
ACDE9DA732031E629834097D62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAC
16F85A63CA278DCC38682E1BC6D134930242730DFD14B49376780164C5A1F030
379CC9E763CF518CF9E2DD410B31012ADDA5B9ABA7F5EB2EAC54DB67BF9CD44C
49474B134D42210504E4254BC7510C4BDFDF53EB3D5F54D0C6A53862B4ED64CD
18471A49B62240FEF22F4D82468E075498FE2FD44122E511E5FB2FDC8CBDF6A6
9012CF9846CE3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB3A260C7E0FC2D
A6ED47D61F83DBF89585DAB88E81AE9FD0426205126E4CDCC23EB4C431FC6C1D
BBF79938BA64859723C4637574DAA16916B8CC6DC32495D5247D877E4B863070
61E7A19A3AF4137889983657F78257CE77F03D0E9DA4E29707C31DCF1707AA65
83AFB9A309EB1599591812BBB5C8F3CE43DCDA76D261E3F7734DE2DB7D9BFF35
01E5A6D23CF1541ABF3B301F226510EBF89944E4E9C5376A9F2841845CB62FDF
58F84CEF83450F3CF96A040F4C2047DEB00A172677774217ABBFEDC33DF60D1B
D15D023EC0FCBE6548410923051F875718FAC168E4E2720E8D959D339DA26151
5C42555EF75A03385FDF6C7DFA8FD7D02B80E1A845766CDB597CACBFE0700303
409164B5CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FD03763D20BE507F7E
56122CF46DFFFDB6FDF9361520D2E388DBC639CAD5B2E83C049DA71FA49785EC
5565D2B3A261A66C9F2C8501A2E9324D5E6F0F1294E1C0AC67EBF4A840618B23
172EE2D3E6538CD9B1E12B834A6D01EB50C781646E30ABD086CF9C09A6B0FEE7
416646141CCA188014A29CCA5AFD1215D847550DC0F06DD1F83FA50D4F154867
B579F69E34040E2AFF508CE7AF4B0D544E70294FCD49BCCFB65347FD1767DFDB
6F85337F7B399827B860FB08BF9D15DA7739FAB5D8E03BD8F283FB6832C3E10D
341F8D147A88D61C5990E609001B853B273DB140A7DC69895E465C1ABABD4CDC
88310748221F5BDFDC2306912DAE1934E475C3AEB56C96D1978FC7659ABBE845
A08BC6EC9EDABFDB1CAFF5FB8203CE3B25721168DC1E382A5267627FEF41D963
44A05EEE4C43E2AE24657176B6C8D3A0EB5A8C229616709EDD4096C1D4D817E3
96C6A55FFA4D67E59B58C6D9BAD063D247787282EC4820B3C3A8D7EAC66D120A
3911D284DCAE2018F883AA804CCEC457CC6213EEDC75C8890DBECB670000924D
3BAE8E7A8066D804B89BD943B49ABF548E5D92C1D6151D1ED96241CF76510076
26E9D2EFFD007A8E985FEC263E6C90BAE36C27D704E88F1F7BE09A971CABE15B
724B62BB0C1A5263449707BC0ABED19F4F1ABEA27322584D473A1A888AA4DAE7
7864042EF587A6D6C04DCE664BF83492D166B205011A3E283257FA60C5AFAD3B
71CF6D6772E5E77FC5742D4D77F4B9576213835AE7E32A2B401C36C3D58214F6
DEAB86E06EACF7F5DA3BC32030E4E23C5E0E7E82C4D1F9BD7278685C4CC54FE1
C1C4332F05F5AF14E70FADCA465393A7DEB7DA08B3012A99FB2FC7F6FF7AE570
BDBA718AC1E0ACEF9AEAE22E5FA653C2698E05E0E072A7DBA0702C0CBE5EDF6B
D0A5B47D7929F5C9317680A392DE0CD7AAC72A99F351D824F86D33CC89BD70DD
41F435624F598030F2E7121F6A610D640FC7E512A28BF6C12496361A53953D75
312631D6F07794B1D853251462B4D522B6EF8FE6D2DC18EB4C02C6BFCEC3E71E
20E6D98720013BBF6307EAD2720BD9674E2AED09E56CC6D3BF927657BE2D0749
3302A5492BEA01CB223FEA3B6CA4D0A35D6F2C5D17804371F9AEBC100D7A6D14
14C37CBD273EF593B596973EB054344F62115963E3F61A1A2774E6837D2DB796
482A00E2BEFBD6E3758A5A1CE621ACE547811799B1D7893DF52D57BD6C1A6B74
4024CFC65AAF320264BA65EA8FE3B2E77F515CF05968797241B5BA06E190C023
55C664139419373923D5BE1FDD292F80E973E271248B2E3AF05887FD5142811C
2572A1D4B9F9539CC6D9F441AEB22F4E871755911D8FAEA73E35EB7835FA1C6D
A4635171C47A257EBC1FA6B40E10B77C81889061E6696F50954EB8B347918C49
20C7142A2AC68231DD2AF574910705DEF2893D8D4BD1C3ACFA2BC75EB9471489
0422528F5121B7A7D7A973F2EF67F2795E6DD8CF55B98238D6654F8B47476E40
98ED693455F82F098F49FF48762D1C9622E0B64CD190A4AF3020654123563C5D
6ED62F1387AA1BC5F00137C6AF5840026DA68D8DF87CD5567644A09B52124E10
51A715399BBD1A6D3704BCBBE1FFF89BCF8129B98D35736FD2CCBB0E36AEB664
3C283A61B6E8613BC8134939CD28AF21976B42B06A63719C44432BDB419B04C9
19DA628C6A5B0F4F626E8935AE2943365C505CF5C7955AF2EFFD964AB8EECB15
C33CFF111F801E31FA0889D1561CB28638D1D24AA9F358AAFF93B9564AB4CED5
632C12606449ACD326A76B011D9FDD66C24C5342A5575E940A10EF9A7C4E0857
59F390036755C4BFE971F6DFB9FFAC965ED71736140A0D41AD571329C7FE5460
ADECF79C3543E3592283C6770B4087ED9EB76ABFB56774C4A21133E594461685
A92D372D4ED3F9DB786D7E7245B9B5DE70958048F037C56C14FDBCE691048469
BC488E501EB5DBB042B02CFE90432FA7D98B533F89DB0F21A61657E268166431
92F6AB4C4265A5C2599F55E134AC2DF346CD7C05F0C4B63DC1C10E03B9D34C67
27AACF1040ADBF7713E3898334BD99CFBE66C4FDBDD9B9180626E338FA32B67C
16195DE9D59A0F447B8DB69CE8FD6E2ECA90C6B424F1D39D11670BA89B298DE4
0E91D1CBAEDF3D811318D493DC71793E84BBF3E2BEE2EB813B03690C774E6DCC
F2D7221490784231EA6CF28982A4470A7156F1C7312FFAE07D32B62AEA32B58B
8D127C00F3B953C795C84E1A158E799D50610BA45F2003568AF44E2EE4DE711B
A128C91C36EEE43CB41592BD13837B9EC9735996A1376BC209B8D579F6A057A2
7AEF243C4B389CCF9385CE645C882CDB6A03A7921BB9F85B93AC64F9C82C455C
AC60CC9896FD453CF3AF2307B191F79C5C6F070D7E814EFF05F881CD7EF43871
21F72EEB3A9ABF13F7A9C46AABD4D0D976EBE8AE53D3AFDDBB926B54EF0C41B9
8D10342A2BA4F9908402DEF9AACE7BD76B3D4A244E3AC7442DB6A705BCD7E2F9
DD7C73DE15B222ABDF7DC3B76EEF17AE4CBDF387FB03FAA5AD122CB4A90F479A
EB32B0CA993ECF07D050F04D4CA153663EFF8A63016F79C7D0E464A57671FED1
E50936B0CE6E364B62411E6DF77D4A4DDF74455394437C3A7B477AC27F75850C
FED5BDB2F07349EFC5134BBD646BED8080D44243E74485FB82236249FF6726F2
D6775F15948A9D4DC82D6F60D7DC6F714656E89DC882B95552C5215183E5FB51
605BAA7948D6E5102CCC8E7AEE127E914C372C6E2DD84989E78792EC3F50C186
322A81E6A8368780A2E815A7EC49B29EA2F4594EFA2C1C079B0C777ACD0210BD
A4F06EF57BFEFA0FBA572A16A81DD123F8434BE971D9EC8149468CC0F2C45ACC
D61E6DEA7CCE2D711A218FC3953EA7B36F464567F208953F9AEEC1EA50C522B5
A42C4A99B079ED011928C2C8CFA17D95D50A7C1599E62D4FCAB001D5F9DA84FA
530D65FD2738BD6BC724446933E8927F3AACE64BE6623CC4CDCA1DC0B686ACA4
41E316ED0CB3CCB6ECBBD05FB823FD79EEBAD2F9F0891F553381C5E352B4D7C4
C1678904B22D75C8E8D4ADF7A319E9EAC6238093C798878E5D5087FC5390338E
CC499C043E346A4DBA66B7EDE932FFD9780C75301CDA60558F65241DEE49409C
10DB07153317E1A13947E293CC426E38653A16E2A7EDF6D500E9237793DBAF2C
6AB5E2DB571739092A476FF45FA1A1CF898E3FF479C1EF67CE435AD93677B705
BC81144F2E45854E93CA8D00E814009234E2A36EFBD854F868BC9301D33BA670
0EEC06C030DC43B2245F9D24D31A31F06EBC65712C870E62BFDB244441198618
3617BF19EFB5DAF155F0957D038B6FC5BF776DB24668F0F4594572EAE33CFF78
6BFADE79FFCBAA6606E892B2E41A173AA590B6C92E254AE642A2EEF5D51BE02A
C50855B9158840F97FA94CC03CF388C8AF7468EB28FD5E0CBDF9E23D1FF320EB
F19E60F85CB9568AA9C68C085E87B32EDCAFFCED2FA9A1619C3D1065724C6F56
79589C83053D4C8C9B53912E217B51E90F13A589F452936A798BADF461C448C5
480CA1D7A929044CC07FCD6CF9DD7FCE413A0B2CF777529685854F63EC8FB112
3A12157DE158671515E8FA0324852EF95789F16A8421B4FA121305A1AE54DD69
30796B192862AD337BAD6CC06279077389A26E7EF7030CB43C182223AFAAEE62
0EB7E7F02C11C1B52C95B6B66A2DF1FBE1991088128B8B12C2B28A050B50BD46
CC83DDD732C8EA609E2857FE8377112784FC50B3E2940B0D30B506FB4732B2E8
8F32140F3893EFF849FE4E17A69F02E7B4C69CA806A1A347B174992DB8D542BE
C631C8069D0DF3B6F3A5A80891684979154D98437D6BBE4C8EEC74B6D9BB7D6B
C5924BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F09B9350C42F6BF7A4521B
21554098DCD8F7DA254922301AC847E5CE09E60F0839874318C8389E298F5546
71CFE508839634A81ECF5A229D2B16EF77A39178507E41DE72C0B30162242B3E
F7756A035C0529533E59108C550FB89650C5B0600791191AE0D2C2D576DBD6A7
3FB4C0722AACB08ABBB932D5E6A03F957B7C64E89BB59C4ADF019950C6276EA6
1AA9465BBB3A56AAC8D14E62B83EF68CDE87804FE10153467FC0AFC951B645E3
0ECCABC655E635DB463BE72AF1223D0690DDB88C7DA9D59148324E7CA0701024
42574818D8E2E330E2FE5102B7F4DF3E4FF521CA5741D8C57CCF85B7887E6A7F
6B6E4F61160966AF27B74B21C9F3D6882E3E909D80E0762C58ECC4E243CCE91A
946487E546C6E433A5C5B9FB7D5B97F2B4B202F94545C8C3A9D70992C1F31DC6
753222850ECF459A7BEA8D8482342AEEC5762713C43E7E94884C06329D340EEC
ED08ED58B05FA74B94FD084CB58F31EBFD5EBC6440498768C234573DAA11A489
B87A3C6A208E9CB0B30F7AC129D5E7217B10FF89AD4A78408DF8ECB0A02D9EED
19239FB927915A02D3D85B0C237669DC17FE1A48D20EA8C5D2A68A4127CA7332
E5039A2A7E32F2389255B0491050D86369ED418F2926916FB309B314347EE3FB
1EA13799ACEB62CB55BE2301E115BF38D18AE8461F466E207613B6C091C7A10F
D77A10F08ADDB19E494C72ED471DF04820F4F3A6713E67E7C08467C617E31DFA
524A30DB697FB4139002DD5225DAD211F5C72F3127A60A33D311387E6018F5BF
F946CE8D7834A3410F5E6EC14CC8E47337898E5E8367724E6A7662499EA3FCC2
78B616531C0CB5BAD1940ECE80B6479023DA0394E3CCA13502D03B122C2218B8
7DC1A0A15DCD491B2BA40939A647E01CA6143950A0D13DCCE128401BAB4E3322
2A22ABB177C6607F014F0310C1E7BD29FDC20E11094E2852779FC5C0D5DB9D39
648317DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DD74D4FB3A9FE077F2E6D4
384BE6BC394E71C5DB81E42B90ADB935FE3468186ECD90E2F15FDBB395191E6C
465F4AA552F9CB59DC4B0FEE8C937A0920796C09CB74B3EA1DA5B74EB358437D
0CEBB9E03109C593BAC09CA9962533B3AB0EE6EF76418EDA7CC6B8795043E5FB
6F899C3CD8486A6DA3E670E6D13BC51C01FAFED3D47621376F2A271728AB7439
3AB3183B6CFFE1D0E2948B24D2A7E6A98712527A7F3FDF0C07D30FB6436D5875
3F6AE969F727C534CE5C9001F9E7A0149021BE5A65DB754E14D890F42F4D23B8
5DB5F2BD66726A544C10942C271713B28F9F33282D2063886DA7006EB5C0F757
82A3C48BD6B7D4DA8C112653B00D7E484A88A248FD17FF0E7A075A554F98C451
C7059F491D1C8BE038ADD1FA4019E1C78B8C7656766444617C98548A8EC0CC14
829F7C67999234D302FD1E40C28703DFB713F881EA0F4B81A8F1FDE4B3C92CED
078A98A433D6F3C4B442E014E3E5A5E82E52DB5332A895046FF12D01742E9AAF
ACF2CFCAF0517858C28A24FAED300D643F1880D27C0F7D73029F171028FDDF8B
55080BBC908D26B5CD10691FB92BC2FA54A04EB649B111671B43973E31253DAD
08488B1C71AA6F08A5FE3F6222ABC942F7B152702F7E48B93155A7DE83B3A6DC
7FAF8C2561841226C56160914266B1D28D74185B0E0FAC89BEC8ADC3FC027EC4
7FB0EDE4D2906CF1B55597831D98B643B81D2FCEBC963155762A1019FE6A9467
DB7E5464F6CEA824787BF86ED78492C31CE4E8AD0913637E245B375AAA5B76D5
95F18A4289312E74FA9C289A53647EB6D776E3BBBC735D9E7226D2B353CC752E
FEC2E91DF8E2DC63650E22804A5B31B13418130BA661F22AFB71F8026DC8F788
188647382BE1B7891A84B9697E22FC61EE575564D48A537CB190E26707CDE0E1
B29B2BB9C4F4716519A4A62A05A7B901F7AB8E77C6FB72D7CB3D6953F1416C40
FE153C7E73D86FD65663DA0E08018ACF34CF9BA5D7A937AEBEEC84B992D45A26
80BAC63497C593C90728B12A42833DA3C710044C03A37A680D1F806296BBF942
428E9FADC28CB5AF48F8947D9BFAF2F57F0F6C4AD7C698D46568068F98C3564F
42D2F7F26014DE37C4DCCB6B3082CD71C69A1E1A3AB1C1298DF12BB54B3EAC9C
3325FDF74E1B6222A84D10CF5EE66EC13A71302C6786D05D419441162EEAD0BC
CA6315D5D70AC07AC571FE97F03509863B9CF7A0E4A8D5214D07B149EABF51C8
5F0C8A7B7BA0AC8B5A90540E5FD5922F512C0A83999C07CEB7A37F71BB8C4C08
F359CB4473250995CB6F5DA6838536F3FE0B38EC7BB696C8285F78C66D154289
455C5FF2D23C1A59A2944DC972F44474CB35738074BCB9FEE4077CC0C49D7185
B623A143311EC892D1BB9554D34547816955434DFF68BFBC34A074CB3BC8C175
4662B5D3FC0462AC4967765A50D653FC3FA379FB4FA0AD9F83269A99D550366F
C8714B92BD48CCF7CFA30A7E92FA628D056602E7EADE6F2B3E168EE1B0AEBB2A
BAC2B90A514D97941B12553B13AE64F9F960EE62E049E6D9BC9858A3ED3CAA1D
77CFB4A424858251438F05B3EA1F686B35F0072DCABF52B26423E8BA630090AF
D344BB225F08F47868D6C4D857CF0A3C6CF4B205301FE5A2F54624315981DB9E
59213A134B651EB7A024989A6D910914C0224A700E1245ADAD0C701A6F5E771B
E54B09E2D6EBFD77645845B7C08389FFD5AA6D6AED2DC26C28A403BBCA3435C3
FB7971E9A56226D46A1174136F0A04A5CEB915B8E21F640745A0AB62F15FA8D6
5B74900DE1EA95B981FBBCE8D846DAE64D91AA7BFBD49CADFF1DC7AD838B897A
D728B35D869CF7874A1F48CA79E025C3D54743A3B0CFA14625FBF274F3794F04
4EDB9552BE2C55747D7AF3101C5F1A2A1BF6C0E2572AA0624592BEBF74CDD683
40D52E137B1DB6FF17B6629B871F0D3AF01E55645C56BFB97243ADC4813F842D
E44CD9352178217879909DFE3C012CF2809984881E57668BFAA1644FA922FC56
B0B93D32362BA966DDE41AE6A21FD20EB82747C47F18DC85145900305F388143
6FF377B1500EE02F9B9B8774237EF1899A326BEAF8EDE7CF319D42D7B7B61296
2A9DC4B8DD8DD87504652967C679E5629FE5449DD1BA7DE9ABEA28C4E2496F87
61C0638E0F7508D281F5762ADE506C2DA47286A8A2312B11DE4B488136EDBEC1
4C5256B9940F0800E6DD26001BE1FD4BF642AF9525279536814044F4AE7DAABC
43A230FDAC3D9FF0B8CCCB4C1E7696D16531A5EED36C30AA15C66D5398C145AE
DCE5826302220B185F12F8DC154E4B79B163C08F53AE78243C52D4E02E82A4A4
310980801A463964F3A0BBB90D85756EBB96B5021481EA4E845488B79682BD09
F8D07481630EC3129072AEA5778A135D164A571B22D1D619980E73841F84F59E
0500496E84FD5E9A7E4A28D9EFBDD34A443F263B41A3B2076595CE2A7DAAA94A
4B95D7E9C281194A84A9ECEFEA5023317F88FB64830A2CDD5277003D6F1D46A6
DDD51B3C62188C66D7D12CE54F29D09DBF020D89506CD1270C0B3EA235BDEFE3
E24373517FF148B2CDA2B90CB5884440F464CD57295728A8AFB1A5C97B6B8F47
63D21E005D89FAEBBD7D8B06F3FCA5D7107E8B918D946E250F561E5E394ACA6E
AD2890CD407F38C53B3E51C9FD432F22202E89A91B046BA4CDDA6E23B0AFB2F7
9CA39D61350D26435EB900ECE26C5AFC283144EA933E003739EA80DD65A63FD2
020938E02C1C72FD8A4A14DB003C5D21197F835B183FDC1269D70A0B14D4F9BE
76C4CAED815AF7DEF664098CF1A167444F32FDE1796595709294CCAA488C37CA
EF08DFEF5DFA13FE0CCA32024C378A87CFE7506B67F7A6FBF8635703C7EFF67B
9F15A7315285D2565D7434FF3C75A20CB3C1B57AF37CA806711890C1AC5997F2
1A14E7523CEDB295474F36E7AB3493706076D62F4C407BE252B5F31039CFF52F
2855C8AF27ACFD99EAD434BCC277A4805E6F068CF203053B151CD82DDFA79D31
F0B4A0485F51334BDF5CD5E855A60000B2D49835C34DE75CAF4932693BCE009A
5801BF822C193040C8E053C3F1EE0BB0AAAB446819939C850C76B37EEC59A516
F15F22949AC658037300F1E113F3BD1B4F3ED7F9F55C21A04F1A6DF8168FA228
6D8C7EB944B03F3907EC73E5B4F9B71156B357F62608909B7E4BA8223446F5AA
B34189E5C5ABCFEC51A249DEDC76E04CEABF371BFE2347C17AB8C17FDCBFD6F9
553E8BCDA3094DC141B331BB999963089C9E8131AC54F43D9D7AB95C97BD691A
D8934FBF8FDC7B97C76DF5FDC62765D55AD993DB7F0907EA177C36ED9FAC7854
AC865B2BFEBAE6EFF4DDEB727B4321E24A2D8C7D3358EE391B31E80FA5998089
7F9471F36AF42899E7278ED6D5DB95FD665B591E12E4DF06B3CEC7D015551B07
AAD8C85C6196DC28076CF4C4A1C62A4647AC1D5FB8AEBC6481A94C6ED5EAD255
0500073598D17F51C40339BBD717BA9555F70DBFCE390F10F87B5A4D7682D1A0
AE125DF60CFF05C7454B82F991CDAF3344A10115DEA01BA7890B3A1123170D99
3F727ACDC8C0F00E871C90A6175956C54E9E368CA67F79A9DD91ED489EAAE76F
173FBB4663DE44D9F0B3A184AFE75609B62AAB76074CAA13A2355873BAF0F0D1
B5262B824ECCA9A0C7F74A4D13C03D0948B6F864DCD1251D26551CB2337693A4
3B080FD17A292531B5F5E64B876C58A4CE3CA66EC2EB0A098A5D9D4D41C9E55A
7E4EC94240107FE7909AFFA25FBE1041A54E0C8A79511ACBBD91ADB807ABEEAA
542EDAC9B6ED8F254F6BB7D73551EE33D4FD3CC697DF01C1F094DECCDD9F43AA
B88640D0E9347881AB1F62D9A8E4A799A0706A34C9C8A243A6890CE854E3EFA3
B883E515D1C4E5829166B8DBBB1DD948462957711B3A26FC69AA03ED308F28A2
3FE7A7DF7F4EE6D26CBB6620076B0AEAD03AB485F43DD669E9F6D78F7F3A3D17
9B8597267B24C5A0B90A66F0FF40B7A8BBFF59DF5DFCA78C2EABC4E6596C241E
26D1DAC6FD9EEB3E49BA2F9C8A1F81321917173BA912ACDC3DEA3227495785C3
F2294F7B39280205AFF45CB3FC3BAEB6236FA30D74F880C2B7F9F332869613A4
51A1BECF05EBB5F9A6AB29480451E1F04B10F526DE12D88C310BE18640A8C3F7
D97DC5E94894E1E63A7D80600B945DF961A051A3404D96334DAFF3A84B4AA0E7
8957C95F4AEB860E63F394C4C8430BBD1F3153BB1E66022BCB537FAF75BCEA52
B0C480AA4A7B456EED703C27AECEDCFF899632154D9B94338BC8126131A6A430
6EB0CE8E5ED39155F7935D54BC20ED3F90905788CEA450619E78AB817CC98441
4283FC7AE67D07BFD4AD7D7C4574F0F05157100BBDFF6D94E602481654E5378C
8D137E3A872753CCDF7FB7936D800446E46A852229C5B4F6A84675CD614591D2
CE4A17D968CF0EE334272D0C07FAB282082DED26D59937662A90683655A66893
1A02B1E2F133686110E9F6CBF529A003DA8B574FD56BF4A9CBAFDF2B1BBDC28F
654075946FF72DA1DA89CF6F9FBFACA3A735ED0119A05A899EBBA6B2A5A6D96F
9F2221E85020131163F32645F474831ABDE24AABF7BF07C8C599F051F8181FA2
DA8EB2FCCE6ED8D9799646156E1491E5521FC8B9CD9158D751961A994238F3B6
03EA8489EF99E770EED78A968F1DC0708455FB4E2D527FBF80D86BDC60DB268E
AE4450B7679E7B3BD358D6931EEA4A860E1A17079A59DEB9C7A4C5E1B646D86F
FB6D567AEF67B112126E2ACF3642047B538A5ACC31CD5366FDA28662B8B1E5B0
D69E77228C39700B0D924194E8BB270EAAA64FE96AC960F649C3503F0C3E2DE2
C9375CDE80642BCE84D2C73C8376BA18203DF1015DCAB4224C27161748515EED
8C9C455107A2D2C947255EC7EAABE035F2A19ADAE898B7F06CE566B5620FD22A
897330AA18015EF8E9F24C2853EC5DAAAA0A3CF68F9385394FCC328B413F11A3
968D9FCAC28875B34AB843A708428E61B06606BC5EB52813C4291A716631BA51
59B67DC9CA5E9E71CAAF5A17D5598D8E8BB772EF73E44F16935F4004BFFFC328
F44E8D61C0AA41A67D2613F71AE1C9D16A7AA32EC49EA31641D1739B576500AD
BDD6E367A5FC24C9A2C7BDA35775E82F7A255D99F0E55E529D9D84E737091B05
A3BAA49FCAE6E32DC9D1AED22C2EA982CA04F4C1E2AE758EB7547FCF4ED34903
DC094F76FA3181CC2B509E9D70AA5F53D932C71EA76AC75EE6B6869201F2CB8D
ADD035545E90949354146146EC313CAAD0714F46FEB731944E4BC8904F2378CA
3894EBDA6458CE2C1C7C63FB94A146F8B198581C154A82DCC9485E11904138C6
CEDF412909C924E8493747E723EEF55EC3FA5F63F82BDD7EF5018BA0B9143D16
4B56881B07218CA48BC688FB299CEB1030A8A9959F374A4E9D79539ECE65CAAD
81B406E0401285D6645237F7DE0A89026F9112209530A35FC6145232C379D553
9538424447C802D85ECCE0C0F2EFF20DFEC6942E2E9BF901A0305633D7AE561E
A78C8C5CF8BC3CEB46314C6D52679533CB2C9CEC2CBDBDC9CD49C47C8E31E70F
F75FC4E6D7789CB482A3C065CE71C64A50CEB925808E57CB966FBA3A8D0AE464
4AEDA86E3FBFC275FD432A8A3B1ED1EC859DC0B8E8E937971E94C01CB172F3A0
D8F7D7A4E37D3CEDF8F120697B0E81958D7D83437EBBD3A39474BE7A23EE13CB
B70D36AA86BE187E08AB2470B13772D965B0B0A35B1ADECE9735C4AD9C6BC5E0
D8BBA88532DDCBD0B2CDA80FFF66E6DDC9AE9696B7A7EB74D9B29B9B4E8316E2
23357573D73E9D558AAE4AD2AA0059660CC56C1F65DE91A7A26714A6AEE56975
01F96B6036524AA186982F47DA47525569C373B4B066BA705315C99C4FD0FDB0
357BB5233F3D0F6212F013072DBC1C07C44C52914F040EA59ABBA7AAF1FDCC26
E18DCFE1C13F3FA7BD5DCFEC68DCAC374CC58F53516ECD13D633B058D5AD5AA0
468323052D1205BBE6E794D7FC7861CFD3943ADE06BE1592DF2A0F06B94E07DA
110B5F7919D0F720619096500067E65955AC79582B2F0C81C1F104AE68F20073
7540B21745BD882FFECB8914A1E25B2A8B2932A30DB6847516F91852E1FA44B3
3B249C615F4A4BCD73E475D64BD63E250047E910F5587847B9B4F6BC4380E9B8
216A9599E4081BE9494718C56D998F9DDE9AA52800C1CCB2A074C78B92C85737
50B91386CECD4A1243D1A3857F0E455510C6AB9398D0660C89E1685C61048666
79C4B0D78AD8AACAB446B96DC3801FA8715FC91FFA1CB7F3F0752D2E9E84FA4D
D17E0EB69D76392B84CF4114D5C67E1EB159606D2297BC192D312488ACA3A78A
2BEA3E1AD8F9E0AC14D1C5CA1FEE4603A58DA94773BC1AA40CC423330E4FA7E6
5759489A8C1A520E35CC383CE5CAA257E9F70669113065923D7A6457012D7D59
BAE248F9F501F69B44488D58DBD6987FAA54DBD4356865673BE7F5DE37805581
9967C7CEA6C17BBA5AA16E07F1E26F00C51822C9A40E3253F2D48149DCD7FDF1
3F5351E6C89C89D4AB69A49F4499066BCDDBD6A90DADFDC11833C93640CDA7C9
7A82344F676958CBE764ECABE84ABED150C66A6B065ED42EC037F2FBC40DCC16
E9E68985E1FE9D31F6521AF122DA22C4CD306406B316B1705EB7C713DAF70264
C93E01992AE7F8D0C563A05EBDFF06ED11E5CC510D692C529DA22A5A9F0AF66B
44344F1DF681219626CC30FD03A242DE01C8F3F2353809B5F2104922CC21BD95
A38A355EB9BD77ADEDE2D1599BF1A2A856D76B3DA2DB46E852D7D222DB53543E
61AF31D100DB3EA0C3728F2E6571DE406B27A8890BEF705BF3C5C8A59615D858
CA23CFF5A6B7BA4694F804EC6DC2182FDE51196F72328E5FCA405DD4B94E0C5E
F66E5F4252E5511A19172AE7E16EFDE1F5413B11FC9A0751C9864D727013B6AF
798D3CD31C1D1721FAE4B1884FC4CBC15DE7E764671E5A5F3E4C48DF435854CF
9F5595B56A90380C329B741FD07F83B926E1E1F32E3F90B51313D7430BE1825C
90D88DF40E72A0EAE4F02616F1D45745A47169DFB74A9DC82D26722CEDB2D0FD
EAAEBB5289568D37943CFE6B7DE09DD4E827CA990D0ABE379AB6DB9E9BDD1736
D940CD1B21B70D7186B5B963CE62F33F0C59263FA14E1C9A0A271B585DF162A1
D1DA2B2C9D1B1B0FED72EAFFC3A476F7ABDB58F0BE523627402DFDC0890A4296
F3E9B0D405E9DEBF3A7885640A42C4B8309E79BEA25A9E2BE4D1A042E188EB1C
1F2F397C3D4B3BC97F1CC3EEFB3E577C48B5548AF396C70CEBA7F76CD61AC530
96FAA3425090497B7676146BCEFE0E55541282EAEE8B95636805412E79E49A82
6C8F2AA7BE1EDEEC9794CDC1DA7C9208B2FBF7164DD4B02CA1AFD346AED70EA5
9FABA7039A499709F7C85F0771516E927CA480468889080FB68E9896AB991D6C
62169A67F6E74D8B491F2E775A0495EC4C7C74092A337AF574553940FBC7B676
CB4CCA7B5AE871BE31318865A20F22164BC891C45B8261D9FA08099BDCC0FBB3
5FE44DC25B2316DC5D3FA827EC09C4A5745707438921B72245BB1496586E0B74
207F0434C9599D055D786DC25523AF3CDCD9D0A126012BBACAB46E5B0A719390
1C65197EF81E8C70836F3FC2E8D8E14D1017DC8428791C900E377B78459CDEEC
9EBDB9F5C00CD1E96EC3028ADD17368F5DDEC4C1B1C136C3BC468BDCD6D69D3C
10A0DBB28EFC16DB6E14EDFF41B7C7648602DD62C32CDF44DD8E430DCB7638E0
02DCF6DD26F9490C8416AF6C8F2395D57DF91F232C8CAA0C9B6E71FC3C112A26
67AB420374B85A3C89DCB809A411C5BA69177FE94D14189B85DFEF3367BEBCD4
32429F49DF96A63EA7FC392881EAD14F12086677D38729C2EFAC319FAC5C8303
8807C1CF9869ABAC639B076F95279A29A45496B732668DFC3F3B096686CA6EFB
E32940D1A86B982B8E51F67A14B5B2C6F84E9503B6429B70C9A3EECC8589D0D5
2DD944C86245BD9D75B49EE17C674DFC3543334BA6EB4E7CA147569CAB615C61
E1FFA0ACDE9EF30CB76C4688D4C2ABC3DA2BA5A87574756FA0D72F291B23F69C
367F0DD4D73689183798A4A2605095672AF085551041B0EE4D1E1AFB6B6FA6EF
F9D626D24C4FCC94A004DCD3E057392B1202E416B635D3F474AD6CD39E4D1999
04C898AEE1CA2D6ED5112A7E67D718A1691F6A9DCB2297D9B7C2B7126F601786
EC4B09DE2F5F3077293575DE021A3E7FB37914E7F6865A5857BD7887CB412AF9
322854E33896A851344E2E55ED6C20C0FEDB79EF058EADB88BD4D92DACE0A7B4
068772E5278DC1215183569D3F815D7C1D09FC3085B4B3468B6FCE2EFBA1C6F5
C0EF1DE2B4D2014548B232CF00A760D92BF4B537D15C66B3BEFEFD0AF513405D
71A1206B2E906EF1099DA1BF5D653336CA6FC4604D4C1572EC48939DEFA7221C
FBE92AA984B39F18E5AA02000F39551C3DCEFE8BA4312F68701058B388D61276
F94706B29796358956C55E2AFF9E1DDF459DFF8E3B0CE768240F0E8CE9FF939E
4B1A6365664C1EFF85691FBE1D0A38FAEF19653C8D5D5C1CD466145C30253E40
222126B2F695F1A7E22D58E88CE48EBB539281C3EA3A45F41D2EFEC1C8DAEF79
F5F1E8DD468DA18BE85983351D10405C55F6EF17EE4D84198A9E10E1101057B7
DCCB2CA4B5EDA26186578223C50EB478AC4131EA373A6F80141BA943A9A26489
8304A491450FD1452BD0CF02B5177BCCF14778CF7C65AA035205A6E77500B274
8A2B599BD2303842C303C712B005BB68F9913CBEFDDA2AB538CB32649C98597D
DCDE8DDFBDD70EF02E745353F1F869376ECB29BB35D08017FDB67ED9FD13987E
816E505B7E6C88D2697B5AD4FF8BD03161544EBBBF2A1D8170D1D214356F2F45
DBAEB9560610E8BC8794666459C85650DCC240976600A90CEEC68D8D1040036F
2E0E500BDDB9FAD51EF554621FA6B22F0346F9E6D4462EF7D04FDC0729867491
42F92E2DC5B8DC0CD3FE27522E90E1455049FED1A401EDAFBE8A3F9F871320D8
40B1BFDD84BE9F00B76F3FF8BE68BBC5A2255E789ACBD75DD3D914DCA20897AB
1E6E22EE5A58C7B3B5A46A860FA2AF035F531347D296FC220C6416877F7F1995
EA262713DA7EC6A8B3B337D0E26FE1768E05DB3BC25F19D9565043816BDB2AE1
A64B2272ABA4EF8AE4AF6442C6388024212A3177259C16169714AEA697245BC6
BE6C302F0411B5ABF7600D2BA427FF8E3D7F0D04A17C5233C2CBC92DD03C1A8E
C67E99058C8B8EFBA9F66BBECEA13733037B3072C48A4A132320B7F5C1B5FD88
F705521060CF072D79559B3702918C31131184682A1D548076F2FBD627B6907A
18FE7DCBBAA7E71D9C2DBC66C593BAD139B3E20FA7F817E27539D46F63163526
6FC2CA5EB9736576A2D18DA69F91CD520F9E30B9B61C6C54309BE136E27A372A
F4CE5A602D6B50BC229E49B5D231FE5E26BAC879B6A7E1A6BEA297B517E2FB31
CA9E6030B970EEBC3219609CA323FA149330956D729E9026B048BF61FA390F64
979D77A4C7CAAC6FF0450370E650B2F47F171A0E27FE61579C2C592D68DA8555
8056EFDE8757BD40D52FE71FB417926EE7E44C4AAA40EF5C7609B7B8A5E1768F
D239F48D405067751593F4C6465AED57BC4ADF0681354E61498ECF9480EC0957
AD8FF6D402754F0A59F7B466741F359B651D485D710649F36BDBDFC5AAAE4AA1
8B106C43E65C93925D9CBC8F88AA8FA5A38A2A7BED7CE91AB3830B6820671810
214D4F155166BA36E2A6FA8745C28178B036AC8106AC901978999867C5F0970B
AAFB320F87FC5D14039580BACD3A0B1EA301EE8BF7F102D69F47EE35F889A710
7E9B64CCF035BEAAA6D87458CCF25F198AA55DBC4F8AFB20F9F33F4CC39C1712
E057311DF474799C7449FA8F5747796AC65DA4791C5CAD5D6C7128962A81910C
6EC89508E1EB59A6FD6254E9EB5D2927F8DD71C97EB8FD9C28D709E9E6DB0A0A
0263FCB71E2056193FE8F09130EE36B68581CDBD8B600FFBCFA5C1900BDB1112
5CE2C263BE3342CDA82DF0EAFE9AD88A24905F7DB7DC8097C0D9B0FD741848CA
8686071FF45FF489BCA0F4BAA4D5D9655668A534EBB3DE636A8E4EB10E500A14
4A602FAE78B968D08CEBD8868CE29857AC764A19824E49578AEBD9108BF826BA
7E3EBC4D1B2751AC7FD85A8E9725D8D3AAAEC15EC6871305F74E474FB917184A
403006ADAC1E98CF9105AFE445DDA85E5DD5C024B24774975B422C912C9FB612
B14855823DB7D1D12E2435634CF69890D14A1FF76CDD2D1F069C0B0ABC6B5C2A
2B08E8F5AE4C1E037041529ED7FACC12C6089DF41522A1772D82F92392B9224C
23291D8D2091EB36923F31341B9DF942E732F5332C616239F44357D8894876F4
6A2A4BAC73AD3C0FD804C49181CF81EA307ED49717F2E9B515A37869A7146A09
7AAC9BD1807F21C0F9B128B9B12D53E262E7B26B484955D1156EA33CF8E64FC5
F6ACAB079419240001579068F1BEB92778964725D01E66D56E0684FA4F2851E5
99B4B8304CF219B8E6B7268BCF2B4DDAA573EC35918A52243149770E2A539671
6E56A1A20CB8F3D82BDA0E323AC159FDA3F55AB8331CD57E3C2B42F2B5A96FFB
B94B086C78474005E985330DB825457E99D0B5FE9818710792B362255D1FDA74
47DF9EB12279945703791E58CA7AD364445E210A9AD35D9E066031D4383B2202
DB203886107AF158F4F9CC1A81264468E3FC7C1941F8EF841769777C502E4DD1
997B1F7478509623114B059BDE45E06DBAAB8396B475D399CA0C92948EEF95C1
18FACA7BB622E36E4EF950D0268E82849184A8EBDB90B1167333987F7D42A76E
9C5AEABA288931FD635A654243F2DB2D8BFFF3D0D13EE0E17E224EA25AA15916
8EBB2C3776B64C0436F1F67FCEFF8E7BE4D32170A9DF0ED814B56FA36CDCE4CA
26E456B1D3F833A419E891E8C5AD303FF87050363CCD7CBBEFE5601804167D87
01702BD3C055F8CD1EF6E60FF70CBD8FAE0D057D6AAA2EFF416F401936169B51
765AEE96012FA5C375AF0249835F399A5539D63AF043C136465C5C6B40C68773
0A9CFF0CDD365650AEAA5E1D52D8F88DD498C4656155ED2C2E95398C0BE9BC7D
C784E4ACBC3A4A0DCC7385E00310B8A923BF37C6DFF8C5ACA261F0EFBEBF0ABC
0EC609BE0B28114E5B0AA42BB0F38F2251827A46FCD603C8994A078ABD9F42C5
727A1DDD62734BC085944CBDDD2380CC96B5155C7598D6D71114D161E132C412
2F307F909B8B374E4975E93D9FD32DFA0AE84699D18E96932CB6CF32C5C5A258
F7DD5FBBAD95569477046CE7C2BE8B1AD14D60862AAB2F2AA9A9B7F03F530456
D6AF4C7055631B667A6E45E7BEC208C3B4A68B34E3E1AE0432A87200828B2E08
5A16B4BB005B30C1614AEAA2AECDE8A62074BD1AE4BE971B4B4805A6AF3F50DF
969F3B55DE17A3928640F97B6E66D0A2557B6A75D56EFA3BE868AFC227449052
0FEBE076B8FAACF504DA1030B5A97335796CA0561E63D83817806E2DF65E9416
31878B1817EAB01C60D641DACEFB5C76812DDDFFA60953E618FF546A6F07ACA4
914DF3E56D335825BD5474328B7AD72AF93B67C62EF9EB9AD584935A58676976
DDD2B6E118FD1D4F88BF29EDD545EE1C04CB2CB5110DB326A88D7A75563C60B1
22282F1FB1F986A5E62DC37AC584AA7417281663AC792B9793E3E2CDCD508876
E200F3B1C6FC0878C36894ACC4955C7691B72AD442BDDAD18F30DB190E4D004A
ED70EC6E8B4CA921C1AAFC0EC3E24C38BF6D64E9C25069791BE6B07E1C5BB164
A3361765B4356C4E2C8E6ED1E3FCE396EA1B598CDC2B459A81B19A090AA25E8D
003DC6C347E706C508835CB5ACF60BA71FF3419336AA6685D22BFD31B10B777D
6D0303D8672E444155451033CEE0405533442D89735D609CB0F6C0971EC9C587
5A3B85BB1704E8700632CAE05390CBEA0D372F447F46FE7BC059D7B3C9892DF4
A062BEA11998D025B544A987BAA117D73B49D0F8B2E7E8FE43EA25BA9908D08F
1A59C40A588E49BA0DBD3998E1FAF95B38C37DF0CB58C972E3A3DDE71B52FBD3
2AE761D29E7A2E61CECCBB294DA4B303547460DDEA51BCC61B14C231ECBC73C5
11681AD69F4B4706E6E40676A861BB5FF8B74EE25981C24E8C36BFA67F7A002B
73F914CD280E2C9F988666835FEEC3F420D0FB6ED83CF06ABEDA264DF7A88FC2
9D467F23708854A6AE61E53EDC1C42D398A2606B31874039E114F6807BD3F825
C70531CCD4204A19770A190BD48DEE41ED4A22883CC403C4D9B3656E83BF407D
06A0F342642BA86B74865A45D3C82058957883B5D74BFF42E61DE232E0D1F9F1
E4A0135C64145D44C0D9BDB91E3928762CB7905A1D4BD179AE5684053CA89B47
7D5A7CA9B7580FB152B3AD1C4754696B239D4B13935AC1976960001C24DD787F
EEBC4A63D583CE7227EC10365966AF2C074E8FC136DC8767B74025EF5FAF470A
272F57F548D734891F71AACC94CC7F685CF1CD35D814B09AA8D57F86088D7395
4600D2E2FC7D7E10BA4420193233FB4633FEBCCB1D1A80092C9ABE53C544DE02
DABFDC209098477C2AD329271301D7391127468DD2C98E410268717EA1D475A0
C0F7540FA825DE6E0B910F0CAF88E6309CB00AA3516472363A5E89F1F6C66869
6A2F1286122C63913DE4AB843CB16360A1E8B82FFEAEBA6EDEC5FED81176BA98
D4BB4D0F36E5B0018C20AB43FB4C215C95659DD7D72074E2D08224FE93C933C3
4C64E6009ACDE37643E89D5BEADD94B267D8B04CA8D3F2307C8F88CBF47F32CD
5EA97C2D3803915F269B7B231F5D9B1F61DF7CB03421C5F46AB598412813AC5E
94569BAF36B58970E90CC6E9E86B11163CB0DE80DB56E28E37B8A1E5EA3A4880
1CC51BE0E3CAE4F180782F4AC8C68E473CD0F8C7AE272F8CF645EAA7E1DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F489FCEF8615119754DAEB4C88C6F6D2CA
046B557000AEEC4C2336CFEB7A1DC6A7028A0ADDC43FA3076B2674E5AC2D4F1A
FE023CF71A53C9B51115169F0E5885FE2BCE38AE8D4E5E108E10A4DC59B21D4F
FF53566407CE641227BDD122842F6DC6B811882556AB045BECF657C08F3A223C
0AC461E70A441D6179A3710F4F963AB42BE4FC6BEC0F366CED42FC81FFD7145D
6312BFAD536C75139FE226BEDECE33AE1F7FA543F7A08E0E346A4BF6A81A4ED3
3A9C10A46458D2BA16E8B9CD0EE418F27416B848B93D24EA77E98635D7F86ABB
3AE30C853B5C7E05E9821C0BD24FCEDE114D883F73A4E64E472E5BC647D47AF8
6948448DD0EF757ED0C270A68138B64309372764D4D1136664D8524EE265DA45
2D7B642A48D8C98E97A65EBAB63DEFDFD3E65ECE15910DA628146AE4AAABAEB7
3465DA1C11BD85099D9377DAF483C930035513794A4BD2F2EEBC3B98C289421A
80A6EE2A75D15D35B7BD5E0F62091E361616F5B783EA5E4C991E7C1573B39AE4
30C689663338F7446FC7B950F785909C9EA3257541514C59016498595CA39122
1D68DD8A6443513BF22EE8649A3F7176DF39BC1FA0CF7FF642EC7C860296C471
DC987F274031D6B66BF1D9437006998F220D13C173FD5D8E218C777B6DBDB7A5
CE33E662E3909805A80BF5820E69D5CC3D80B203E7646A3B3A97B83829449F0A
CDAFB657FC24D4EB59E1F1FE6D6C1778507FA0285EE4A53C2E80554BDDE50185
819130108E7D01D4CD3A63DD893D0E4A65AE758F9EF7DD72D9CDCF17E896FEA5
8F6EBD49F9F22959A94336B24990272833E9A3636FD5CA9817E1D3091D14B089
FF85ECDCC4E7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A22C1891358A8E2517E771FA86C4210C7537BEA4
35CF4310F4987468340E2078899333E34575B1741A3DD9230A48751850985FE1
3F6F382B6D6AE0F7030A9099638BA429F043F4D17A96133B2E41002B0165D3BB
CF3704A6431624D00ABC22FD059C4858F97C79D08492ACE3AA3E3C9EF2EDA160
FF152DADAD834A43DD5CB510F4E2813868F76D25C8878E0AE2CD2CB6A8F5D480
878EA65EAFB3D4B6C5E3F2FCD8562ACCDD70CBB223ED1F8B2992B4BD17DA6335
29C87CB33A7E80B9947416A78AE7441E61FC59ECE8FF86E5068EB1C90211676F
6587EB59E5E1B9022D2E4700F5F4896B8AFA47B404339FDF833145AA60D404B3
187DB2B5942C9E2399DA554A6F7AC2B18E6B85434AA802456887484E0610CD30
95D41344271173529372ACDC687B10EEA2F1D2F4353AD17B0329006E4AF46A84
8C71FA1975956C403D1DB5BDD2DC150F2066AA14CDFDB2813F3E8130E33961FE
59835F21DC12BA2187865334BFB49CCE64613E5274D98E4F2B23DC47BC6EE911
A9D656E3D3D80C06EFA0CB0E6BE66E6BAD000FCA3390F742E42DF9ADB21E28EE
E3819F6B45F5CF7C91B97FF27348B1CDE904311CB4D5B50FA873765FAC54B411
2F37B8BD49E9DF143D400EF8AFAB6784168E035193B794B801DAF3BFA182C822
EF37B88B538AE06C27913E3DF2964201721F926BF4AFD867B30E279E64353068
DDC7021AD289466F1D312E19BBF2B974D0931DE41C799C82D5BF578A0C3DDECF
367D2624C8CE175D2B2F52AA8F9B709097350C50EF74FEFC348F450B397BDE5A
9E62A8C9E38391E5D0EA7740181ECD99B041A7269443C6679EA448EF29ECBB55
8548A3E0466D73A7E2E9E9480F7492E8925F359EC5BC40A45FF92404A5E826AB
D307B199BD44779CB17DE3B6D6E477624773CB5954C6D639CE4A40AF784AC984
63D705DACF26110BCA2589459909531C4E17F43D090B873BE87CE70CD44F61E2
E7C76E186813FF048D2A277D4669C2AA43EE4FDA40AC85A6DEF34FFE724F33A3
019979337C631CB3534886D203E7E0D6A1A51FA929308D23E3ED5B8103DA7039
4AD3AAD855BF7C27079F78CD2003C7DF5DC14724302F7CADE38350292746FBE8
ED19229DC63997A328A55E46D554F0E72779DA2161E5BCF385ABC78E53F6555F
F3ED6464AC86DBC3773E7FB8ECD0130AC31C6CBBC96400ABC187033210F5345F
9F4A3A3B903D30177589DC19FA96DE2A8B06998518C46C9E6E0429210998CFBD
B86F2724DB80783F6C7FDB22591C50012ED86C00D551C2946F2295AA9A462368
9D121664522ED8B97F6CD0F4931DC626B5079D7DBFCBAC2F62F25DE7B7B2C9F5
2B583BCD9A7765C06C267FD536EF51B97FCC8AB4F5EB2AC7500DDAA3F470E458
3412C4E04E2A80853774440E8B8C826D1017E298E6260C8E127E40EB947288DE
7A47C401F1874F82F849A1F026C6A740560A1364A8F393B19EF0A0BC22823C43
2A772BC9E4623D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E3353D075A1
E740C054E9AA191CC6A2B8E854AC7E02D6C53ABB1608ADACCABE3D5AC2F894E8
5E234F72A1C099901DE1E49328D413CEE1295B615F37F139B70238D0C3177995
99A49939640D06478EF23B0FA6C4056FC2D15FB7800AF689C6868DB1E0A5D946
81993A3B3C100B5FA02EC334CEE85D1801AAFFC4A9253F6BC832A0E63EDB6F31
07FCC58C94F34096603C9E8E3719950691B4B5D8C0BB08883E09585EB7530664
C79582CCDFDDA4B4E487A57D8207DD18420AF0A75C5534B47DC12F571F827CA7
B93D28D1B195DACC47FE5FDC29EDD6C97DEF92E40FA9F957D6EC2A2902F7C4D6
8E837E7D573068C55D4470801D8E2D6B5972D30B54C54E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C2D2810B26906E9
E6BC661CA55D65BC325F2C13A8708665D55BE4D6F30B62DF2C41352021125A4D
AB1222D4AE108BC688B82B188847CA58536EB5DB161DBD13A927892557D96A58
CA946D021BC9F43F89A649676321FFFA0E5FF316731DC3556B48BF53EDCE1499
F3925DACEC43096858618EAA62D3616BC1FB3B7C5F3EE8F027074C78344DFA13
2CF54473AF0AE80410C4FBC3A45FBE3BA440DB5D6BC4F61076183D794D01BAA3
DEF86BAB53D0930764EE3CF33B7EB2871498F77858BE6E3FFA70E0FFB4CB01CF
7EB213E7AC5A3C6243FF6AD2C9659F2B367930CA8A60BED8424DE9731F913912
E09C9BC7BA9DC8878D61CFEC7D90E2042F2635C15547CFF3567586D8B3FD4A41
EB80C03E0AE63E178CE4827CDB9D97238D932C544F86CBE9572F13A5F515D6A9
F0850A3650D8C2B264E630B012E2F6B422FDF15D630823FA1818A1390B67B4D1
E28137D75888DF5E020B27F5307E813975E8415BF150945BB27C33FD39B9E747
84AB5407812880F28CB727672D851CB011D85D5C9D27A2B6F6A2770C242394CD
61F39B7F3D8BB82E77FA3C1D7465ECBB8691DD922060C054BCA0853F0689136B
62E3BD68E6ECD8845965684FAC6E4B1735D331245039C341D15C9BCF6273225C
AF16CCA790332862C06F20674A21D10DEB76D65581FF882189F6B2AC6D8C8AB8
D07D59583F3CD38B09248D03E3A04DC5510EBA66851D2D9886503427AE02103B
3CF05830E2CE03F5276EC71C34636E8089CA75F08E7E526F96F026D2696B2EA0
F037CFA62A87ED47063731D8EAA7007884E8C0C973AFA5F05DBB2A1044B616C6
A5674C625680530555E7DC03F30256CE34F3FE117390EFC67C5F830EDB1EA3FA
DB5476AEB48A0684FC9EBDC42F4EB875813B0EED37BBC077724DB0E1245C2867
5A2F1A8408880E36CD0599BE1C6F5830CE6323F8D637ECD508271786CC2F806E
8021CEF2CAC46C7807955D44DF16A98AE021C9EE1A9DA7C7236839D7A9F115E7
8C3BDE649F3DB320F2F5DCFD5026655EB6080952DDD098B64D3333F32008F158
493B39CEC3413640932CD0F5BB04DEDFB2121D89B8A5845465FBF905209B8988
E786772C62B94BC2FBDFCFD32CF8F2D51B76885D6720884C29C0F44982E0644C
9B61D76619A05A4A7C9DBC3A4A5914E16FF55954CDE9219DE48DC7B981DB28CC
F77E514B42900AB1CC850226F38CA1FBDC6D6CB838E338F03A13C4A4022864D1
3B7865DA1BBE35C80FEC2CE173954645F6E5C51C85802678C76B32FD2385FC1C
BD87C63A604ACFB3776193081F441710F1F19D8068F4B9D5191B20CF3379B72C
2D5D0F8C02F39B7ED7A708765C68A457B48BF335ED3EE8CCD11C722468DBB472
37F01147B51D6A0847AAD125144FFCB13851868C2241AAE9CB0090D43DAAB4AA
3E5FFCDF1CD4E062846255F6FCE91941586F44229B414606F297876E968A1C44
5C754C136BCB636F0289416465D153456CEDB385402DDC8E7F68EED03DE18F36
25A699C40E151E097A1B6A7698E40516D5CE77DE57A799D9A187260004937E52
09D6A18DD94D9F07D4CCE88DF18BE3BB79BE77BEC0F0ED9136323714B6BCDE2A
B0210B99A940E77457CD8B9FF28FB8531F8936B22CE3D0A939897740196AB18C
210806EBFC9DCA81E9FD38C7D4D13B412EECF23C84EAA652A096A0888482368C
016E310A643DE0410A10663F4A783CAA181BFA14DB1ABF84EEE94CC8D6AAF10B
954095B7AAF44D463BDDDD8823AABD6D1DB4DEC0D185F29D71FDE0C9E1AAB13A
94C8246E664581827E54B56DADF43041F5A26B92
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC677E95307847599B02E5AF54BE91F662979D0BE
A1CC2205A8493A22D252AEBA66664B2A0FA2AD5C2BFDC446E8217D3E5D67616F
A9C8D25588F1689221B896E4663DCB2823847EA18AEC15EB3464CD20830192E9
FA76A8D8C8454C7E9ABF6C0F725BC64477D228181C86BA782F4FE02493A70F60
73CE5AC25BF5C0579654DB07E4ACEA3666110AE5DED90584F99E14B24C7F8229
7BA7530C442B5E22F23C7CC8F7E46228385681473BC971AE241B38AF02B14565
A533E6707D255BB42CD9DF0629D03971CA5998C47A82E39690B59C49C936C145
CC25F858E34B6D27E13A4E773B8D621B25C8B8A3F6A927E3BA6903B35183A80E
B555699747DE2975C0D60DFF13F4B2BFF0C2D48D73A369A4A30AEF829A5B56DF
AF7E3886C50E125D3838DDC8AD6B097AFF22FA89583F307499638173A4543C6D
27822D960AC1783EFDC753B71A0900E9740FC2826ADD5FD8FA44B8F4493AEBE4
6B1A95FF11B58FD6F8C64EBAFE0814DB9D98B3A4D7C75B9BCC81BC4C7C5B4EB2
F0BB2232BA259FC908247A47D56938F3FDF31D90D46A1124E27587935F9E83CE
1430E3EACFFDCFBD4F291D8D47BF8B69F6F59CE04301BFE7C33A8371EC60CA1E
C6E086E9B7B057AA3AE9D82F4D1453B60FC1560BE2F0BDCD3C5F4602EC0964E1
E28AF026A9FD1E4BCD68D656301406C1FD474D98B7555DABFB9933BDE94E7B47
ECE15B865346D956FA91D2C2028FD64BC5AAC437310F1A7D586CC05048684AF2
7EF3C09F73527FCF94D46E085D6B51FD3EDDA3EBD21CB5B571D21A64935A7A2C
587659A74FE3CF535DD1901154F701F3FE52F9576A0FA938B0A6615694D1A837
41D4F258C06B008E5CEF86B63BDB575DAE9F7E1E55AD308CD97CA63ACEA48B66
6F2A639E1FD66B020C2CBC5CF51F32E0F85CFCD936B00928A71B769371B2366B
CDCAF59B1C2BB8D58EF2171FEBA2728C2B0985C065194465D1DA737BE911DD03
2E8B51C5A80C5C7238AB883E083EA59959A3000F6492EFD60548FC8B0996B192
D9CEEE79A7012A045FF72E042FFBF8A7CFA315D2A1B0FA5117C21FB2DE99DD2C
1C515AD8D2AF4ED82E1BF056123ED8131724F0C8DF5E8504CDA09408587DA7A9
3B760B3D6A6C9D8552BFBF3E3BEF576906C3E0A204A8F86CA2DA812DB4F23DD7
676EC3BE949F7AD05C717514E523E0440B2254E0962A81910C6EC8950DEE6B6A
9C306F2B40E28DCDBFEB8719FD1B960C1297C7925F24BD5F1D9AA016E3419AF0
E9E6D69B9452D47689B24A6535E6A04D18A0E3064F5B674211447D44706674D6
34A37B2E3DDDCF25F9748E9C7C3457F32359513A8A2AECBCAD09552AE8213873
2AF2EDD4215BBA84E5FE4C18CA96E889C36DAF2D9A65E1FCF4A665960E5A0AB6
86F9AE782F6A1AA23FD70CFE0C2768667D456D79BD93C1F87AE8E2EFEC6049BE
AD2690BDB45E16CBC88E02E471759DE406C018F9EE020A5F6C02176DF5B9AE7E
63DF2BD3F3C6CBB52E5D75AB74E830939CEF9EF8A94E89AEDFB50EC74C20E497
DF7F8B51EA86B1D6F5D713EF85B2DCCEE85F7A35F8246393C202BDD6920DABD2
DE584E5A2FA8061F68CCC3D5063D001BA3949F96D12EADD820721F4A9C360505
0501628C3994C49C54795101F25ECACC2C965491B245135F08746EA00A28484A
FEF77CB101565CED14C8ECC6DF72B8D560BEF735ED052622E6770150DDE8EAD6
7981C7F8C466F3C351EFC4332563944D9F0B39019E61F6A967212A94B65456F1
3DB459A5F8DCEC48495F00E02C48F732ACEF5D27A353C5CC3393B2C32E6E1F3C
E48BB89C85B9B0B2622B0351BC30602EBDBB815DB969781F9C6B1CEBEE69CB03
AA08FB060A2ADA681DFD540B6C1366F6AD6AFD1AB243502A86FB184B3F8407A3
7A4B011776C7A572D2FCF18871BB569C2DB5B8FC1C56823C9811B3B5ED20AD2F
E457E763F1E38A6ED91990B27A350233112B0A339366B7373CE058456E0E1460
18F693BFCD7FD07158CECA1F10A5D75C8B02FB448146ECE1F32E3F90B51313D7
430BE1825C90D88DF40E76FAEBEEF1C6D4E507FE6C285D244462E06C90DF1FA0
2FE9798974079E36D67129C17A6FCC288B9CB288231E1169551E1B859901766C
1A7C54F22342E068E261FA07D7F71FEEB9CF08C2BAD47CA484F64080B76D7947
EFF831722F16AA125501337D3D039AF45D8E99BBD874DD4429221164AAAEB4B0
BE5CE51D102BC0EC8B0E3E69D117EFF571C1B37599396DB70424C67B69A678C8
D5CDD137A9E80B4EAFFD8C81AC0484F0C03336ADBFE356DDD6B35E3BFB360146
2693C32FE5B20E2D3CCCEA810BDD12127EC21130215516C50BE417BEB7108A77
DE7108D85BAA9D005115D8D1E6F076EA41F64539056FD6F12A603AA2DCEA355E
493D7A642A63F8C286FC69F1DE5A80C4C8B98B9B20BD03520B38959380B6F051
ABBD09BD9CD5004F455D099B398EC368C55FD0BFBB72346513081DED184AE12B
B6F2A0B8B954C1931A423352ACC356032136221AC340391697A1B020389DEB88
41CB34E59B660CAF50371D6FA4D84359D5C57E07C0131287CB8A1CD7229ED655
CBB2FC2F05D180DF588DF93B6925100D074E11C6D2880420219E3FF5933ACD29
38305FB7CDEFEC635C4E3E11848D6943D5C63D07B8B577D80F66EACA440D77A9
179EFA630BBC9D924302C969561C704F60EAD3DC1DFD8ABEE459FDEC1AD8CE41
047A2A4284D7A08F95EF2F9B2355F42C0201BCB01465B2BC0429162BE040639F
2EE9C0FA967A2666CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC726C0EBD7E
0BB5ABE6B5DE82FF252600C67408DE17270E0A6B60951CE771C000FAB997C869
9AA219CB578D5384599625410D9DCC9FCD627C9341EE5EE7B62160EDBB0475F1
B7E81EFAF7223E9D7B39DEF7203248BB6D5ED9A55D61D2D8A66A55FFCCC8EBCE
C593DCDB97D883FC87418CC6B88C5C7E080127212E2FDEC1CCAC426117DDA7D5
07623FCE556CFAAAF11A5DEAB4A0A12E2C7221F8D06EAAD43B675E071A5052BA
0E3B73895A45C1B6C1465432765BB6FD433DB543EB9CF74C2730621336930A74
2028FB422DF59EE85D2CCF2D8DBB400361FA1F9F3854C9EA86DA22AB40A3B388
6A6C0542C01CAC614AD832E9CAAF95CA8FB8D7D6F8E6B1F1470D1BFD1C6E4F5B
3F37CCB5C6F49F964FB9EDAB8FDE5AF3B0271B0147A8E7CF22C48D74DD85E83A
3C976FE83802D4CCD92815B69D985F3B1562AEAB09969F261EAB2991CF141394
3CAF186B136B64A55AB66D790A65432FEE0369E74E2EB935991C9D7A835EB88B
C04EB2B195DE98DA506D8AF6D5EB3D2751503DE9FF66CE21FD3F18EDE6972EF5
476A0448CB709DDAF100179C41CDD34E70639018C1D94157A631DC2B95C562D9
F08098FF6D334E1EA12831EB854BE550341FD8E4CCA7D7A3E18478AD3F1F1627
C7226A19500DDC798B57B6D7B7724B92BD48CCF7CFA30A7E92FA628D056602E7
EAD96F26C67B2E10B620750E2C44E5CB9DCE747E296F7E721CE090148AAAC9F3
C2A26C00FD63316B1338F012EBCB1549844D1A9F70EE29B069A97BDE7AF2209A
9F760CD4980686D6A0CA26D77F403C06D65B7394BF1FC7D06D3CB4D93CBC1CFE
349AED0167FEB6593EECBC997193BEC0BA17470659666D3DEEB203D4F89B1D0C
9F483DEBE503150EA72F5529C6856A2ED6DEC7F70D115725622193430953F8EF
2124C64E01DE0AF5CD890470A9A5F179902CD32D6AEC688F02A7365B66797DE1
EA02281B8CC461A2C93D616618D9CA254878ECF291309CBDB0A9F287067554D4
64306A44A49AF8095E431F91B8EA9CE5EA5A6AC021E852C3A8F8B27BD5EEB828
B2BA0301AF9EF77428F5D92F0D318ABB61FCBEE8E8B0B00C0CD028FDC8D49ABA
27F0C96DFFBF5A41C82EC805FC436052C08C11F14B3AD58805DC0020DA959EF5
24B8BE47F16C08B3A3981E2644AE0718BBDC6A43328284068B2AB05CE92EF92E
2E897C1AD9E6A375D7771A6AEDB0E02641A97163CE1760E7B2BD1AB594E30D79
7581F5A0E81AB0F7ADA1991DE42B2B781312D14C0A9051B17B14FB582DDFD9FB
29BC4EB03896F32CE12BC890FE786622570A50401A5E45A38F0A186733A85239
92CBBF6DFDED8BDE4E6DDFAE37DA6564E63E4448BD86AAF678BCB0B56BFF435F
C4E4109DB382F2181EC00A0208E0451F6B0CA3360AD99CD656E25305A846700E
91F93C1653145AEC22331C2DED3F4CA87451BB8D3A8FD9FA7E1522A322816CE6
DE933CC81D83A39CCB7E05896DE7069693EFC870CB86162612B23A4316EA2278
A65E36711CE80A4360D829E3905EFB8012302610AD7CE0DC20FF7AD70ECFB5C6
2C42B8B0B295E48F873407D8ECC2D0DB427E8E9D7FCC7FE4A04027261E419451
5E87FC36485599FBC9DAC6933B8A61A1267A07C80F9ABDAD878915286731DE01
010A7C89305D2E3DA554350CB8CB8E904E7535440A065493480FDA1C5103D54C
652E1387BD302832DA3B044A853EB94D553D568AB7D8C63B4FCE2D86964B7DF3
0DB1230AA9F2676882927A517090BE92D4EDC366D10C640E2BEEA25168B07B49
F4D258D6E0B6EB6A57B74E63A3518EC7667E07BA5B2FB2D7E017CD595009E52C
CEA351BF5650FABB9895623BD4768C31E35C395C3BF67A79F8B1AC292F38AB2E
F547DA895BB5B6E1C1BAFF90F1E16665998AB7612444953E619153EBA5E4A91E
A73477B75333510D419E477E7AD9D2433C7E7C3968C89EA69B3D0DAC30D4B655
52E3867D63B89B54CE628FADB2EF290290F23E9C3698A870C13DBCE5203128A7
7567906187C92C4F2B91E12092BBFA9867B165078A64683C37CDDDA453154EF4
1FEA71E4E811982F7E0E9E9EB25202A01894C458AB9007A524E4F3BEB8947E8A
116038BEB06DC30ED8E89BBDFE4480A36CD4F92F867E6C48ACFF17E976B3DE3B
C15BA502F6F1BC4B4589AFEB2C75EA7A1E22AAA8F03A4588EFBDF346148A60B2
EF074B9F6D550FE6080A7F4735504B58E07898EB92D4F0EA71ECFB467841EDF6
F53A943B0997BE3AE95EEFC0D4F5349BF23EBFD6F7D9D4618054064D0A6D0235
ED4B346A14E08620C282FE1094CC0EA2676BA81D5448A78AE62F82E58BCB9BE0
47B377F3257BCD12030D71140AE06B4329157208E3B37B9CE3F1D0C616D951BA
702DBBF98024CB40D1DAFA83D894B657908A112B91C0E426E31761BC68186C25
AD5CE0BDA86D6C602F27D4D17370D21A96AAEB8342C2773CE38E1EC3132A28B1
5C075DA951F8E47789D55B7579A895A905D0DCE8A41DF8804A6F855C349652B0
F2EE315A2ED05A5189E0C5A31E35448577FCB0CF36C3CA5680F622117252D1D7
2A6D9D057A413F748B33FCD51D6CF5DC1E2B1CED5D9B69ABB3746877771AF7A6
0BCB4C0B890E4E8A779653C1E96E17AD82C65D792A9F4A6E1D3A4BD9F0B7E0B2
8447E741364E315E7A1E493A13C6F89B4DBC3027B3CAF2C6EF0A5000F53914FB
AD2DE5D9D36A9AA32C283B25D9E35BED54243580FCB5769FBCC991BF7A13A3A5
BE34409C002DCF2B05C095A1C272A8B534173F947839FB3654757E4DFDCE1FC1
0241AD94EB503A2D1437C4008E97C76D74AD430973E848F8454CFA132CF54473
AF0AE80410C4FBC3A45FBE3BA4418FF63CE72DAFC207F82CCD8250F4BA04D50D
9B6D7AB5280337FA5B49AA4D0AC7248E1CB5105749E30C15E1C8CA95279F0DDC
C564D440B4FF85F92448D42014DF2B22697002932576183606F932E5337D2E44
7C602C3B2862E6553F6357B54389C5E44E2817807494BDA2645D0FD91FC847E5
CE09E60F0839874318C8389E298F554671C80734ADD9140716CBF1C5624422FB
5D2B891586DBA349D378D1E3D4AF398B968C9DFB8B3383BF9817F355C5BEADA6
8AF61B53AFA57A14B7F2D4815E0733979B9FE7F396DC883022A7F459CF47F6F6
ACF7812C886C93F399DEA8D8A824044819A5F8BB070D16A44EFFBD0AD41ADC94
59C94A47A9FCC007F910998AA28D18D0C0D347BD4A22E7F602498AEB3445D8CF
8CEA7FDF03568AF44E2EE4DE7E9775B7A95B3DE028283DAA7F99A55DB028501D
5255CD776183B075036DF7634B34983FEBFFFFBB7464003CF08D8A125A27BAF0
BFB58CB89C444F4564C1ECBC4CA5AE10BB3E2B65D78732C40F1F4B6614F932F9
8837F999C10772520647FA07B7B6A0D06F3C5A9923AA703FDE1724A942B2DA26
4DF7A88FC29DC6E8BF9A9AA611233045CDA79CA11FF988ABB796B6595823707D
1A37CD0C8A8A0E062F37B10826AA7F8D15F5A74F536B4F63EE567924173736AA
0E1ED55B70BC0079CC996AC611A934830E222B06854D19E01AF0301997B8F6DF
9DA616F6D521685CB67A8D7F27643D015A4423506A9A2A9E1CFFF120534F7077
78863DBAACFDE460906281D5BA5ACCD188EDB290DA5B8055D1622C478F8FDA34
2685F858DE3F53F1CEA18D2F4891C970A04C42CF7216E5DB8CBE124D00B4AF86
4EFFAAB871ECDD9C87C2352AB057C78C12B423635C60AEE5C82C9F43A7491015
09FEB31E38C10077F1BAFD0E1F114F695F5FCDB616F45FDA682823143D7430D6
5217B609A365378685B85A9826CBA11C00F4BCC269C84754F7BB1FCB5723D669
53BD9D0A313F39A6A3DAAD30374AA19514DBD893D279F20F49DC8C5F2C43537E
DC6CF4428CD1F4516895203B8B15293B65444080B62ADDDCA6FF23229B9DB1B4
B788BE82AEBDC173307D77DF3F66505F11BF1A13100AB11746A2053E0C5E6E8E
C7D1D9B54A573BBA224E42869DDEE75801F5F379101BE0E37118C5C4CD3BDCB4
7B5C404D62BF45C7F684E59B9AA6628DE7594364F1A56F65B8FC21FEC40F4059
C2EA3DEE94D79A8FE853BD9EAF321A2AF2256EA0675264922F9A98E6FBC4C35E
7E6F40B4A6BEE3B6989C474D1843A471576D48963927A54AEF3F5D38202A50A8
3FD3C8CEBEC959F88C7AB2E251292F1C935F264BC41873E40028AA8F3DD3F0BD
70AEC3B473C5EF5EA99AA922FAA53D9D03C54706B5EBA2142EE89817433A4A9F
9F19726277ED18E144743054DEF0EE8EE1EDC4194F1012D8BB958B6940681AEA
50C11778304F60092DC6D54944FAB3AE6F055641C5D50553D115033EC0330451
8C35E55502546E62683AA3563662CBAE642FCAEB99606BC079F3230443D11313
D6EBB93420F14FDECB9089DE5CC2DDB60A534461E5C023C137C2FDAFEB3D39A3
B9FDEF15DA1F1505CDD37755796CD5FBA5E25E5E97328618BF64DE4BEE2CB0F2
63EF782C0D4C7120A3AC5C7AD5348F07AFB5F7A27C2B8D494E4EA141C166C711
C5DC5DED743A7ED41E852DC45BCA016BD8169F5A87F51AB5DDF2041BCC6827E4
5A0370F0F2D6FDBDAC994E26E01B08DA208FE08B4C78C603DB2E5ABA40C4DD94
9D10C0CE6B2EEAA9BD1E83310FB2CBF3D51FBDBAC9706CA8B4D3FD1F68A5290B
345A721122FEF6C4B721ACC874FC2BCEF49359244D0E44C3533C0356C7D6AB6B
E4CCF1C2A978C9A8DAA2BC54439B2B53ADED366BD57798F0A499C68E97E7D0CC
D7A1A6215EE09FF45F2D070A7FF5391AA9BB2001FF877045A5D34BB1847473B6
50C674E740A1D13FE57614EFCABA99498E429AF9B1DC692F852BB697E9DE42E2
782FED4B850739675FFC9C10517B0D218C2C21DC0F3BB8B3BBDDA722C42CE163
3636307C390FEA9AC4785AA1A2B368DF676011E1096709BDB6D8C9510DBF277B
31B8BF2B8673F652833072010FFE6F743B14204876579A1A5E93702D6C388DB9
A763F1BA3386E051BBC1C7FB8B5CBE3D295F38E17F77E7D5423DBE0776FA1387
D7DF0DCCFBDA67F3038091B1E0C419DB3E99A2E08D6749F21CE313BD5A879274
20ED677569C646EA23E316AEE1EC29BA8D4A7B93238FEA7AF4618DA0CE348EA9
AD3FB54CC715CB71601B9785933E3498B2EFF70B8FCDE2984F8A0763A9D322E7
93E01F2C158167C6BA509BED34E0B0DA099434D7FE9074A7C89ED4BAC0C5A0DD
EF52F121996E2483E9C4F22F89B7D68E527DFEC6C96CF09019822C2A7402CC77
A43C03ED797BAA3658B8AD58435B34B1D7D501B561D3E182D4F6E18E43FB703A
7EF38F9CEC2CB0BFFA436CB8AB9D2A83B1A441900C9DFCC0F7FF114C014E1DA8
00226FFE97D925D44DEEE670BDE0278B68EF896E2B0FE4E7F1CEA0E6ACFB570D
76D01209F22F4D026A3744BF5BA2E45C7979E01325199C2F208A02EE453F545D
C69D66B1ED95F48C420A8C664C6F732F6D1E62401C3DAB3E3D1F7E61738274F0
A80A2E23211930F1C5D7F231365BE2C51E7060E5DF213AEA97259581392B9BC1
71B1AE1279F582DA9CE6E3788194F96259F8A07ED67DCE8B5ACA00EA4C0D6EEA
27522E182DAB2869CD2C2B0F39016EB778060F30BE28C36F1608E534EA5FFF06
387DFD9185BD17E8FB9C4C5E00E1EF6358A8DF8CF7B4AF6BF074A9EF6D192C26
D1D9514847DE88FBF2D6B94F121716D1213028555F7C991CC1098D1C67406AD3
3743D470DBEC0E12B5AF108B0A14AC3F8338E1910099477D1947FD9F73121450
490158098C9B50783AF12CE3933E56B7D7F0924FD66E0C5C61A99AD5D3EB1D83
3359B4088B7941DB0DAFB6ED302977E6E628C7B107212B363F9ACEBFBE088760
48521F937A458A63396A578F0213154795DBF03B3EC438D3DFB71B016A8BB6B3
15DE7285F1C1C23877217DB6C8F2F209C4EF07C1FDF20A19AADB222DE3723168
63FA73E29895CBABEF51AFE1EB024F24F6FB7AD4B198FA774E9941C942A3DEF8
53FD48FDC9E2F2A7E638E4C5134BBD646BED8080D44243E74485FB8223624EFB
24E68D7D01B39F4C5BB7FDBD12DAE03DF457371FA0A0C5E50C20D2B4169ACB7B
7FC90ECE99FD80496C271745E0FF1754D70709127DE32FE92176B964274E37B4
50F6AC9A2548177B3196BAA257EDDD055A37FC3D5A6F2D69C3B9F084C0D81A91
2ED19C84EAAAE99801DDC5B98E854470A8956B7B47FEFF3A2D6E11BFCACD6149
A2018BDAF303AC2C71F002337E8D937DC25E40F84CD33FAD82EF2E92259BFA98
5C84CE1C990C7E6582F2649DBDBEDC1D7E34B08DEA1708E447E0C557FAD8D550
A1F61EDF70AF158765EBCD0BD1C62E95F659D68F0D69B85BA188CD220301EB5D
FC9E470CBFCCFB150AE9088E7695DF1256ED61809DF7154DE438CC9B047350D4
E144978CB3DDB03E2BD45222454C6A9CBBF205039D6D35C09A0CE284E4B9E481
78CC1F0438842223DE23A662482960E68DD0C70C74E4D6171BD9AA3BEA81915B
81C56CD5055CD7F5258B6F3F987375A9CC8CC6267A6C8BD53FEE053A5F2AB505
5ADD50A55AA634AA0A8E9B612BC09C1BF35E84FD29B35EB1BD0FC6D08A71FC88
6A851E03026CF52883730A8B8C8FB9B4FECFF71E51A004880E26CB27712846C8
1C562CD6AC33CF8DC9139DE42570BDB11D0D084D3632B856ABDBB62EED39B485
5E2BE3AD45D8502C9D98B20642208AD035D663C354B50E23ACC22CF0D8353BAE
11F9D86F1E3A76B9E3BE31546E78CC29754430CA81A7E44E9386E2E6CB9C9BD1
C2332CF5DAEF593AC50493349798BC3C38137A81D75D5BE7E359EA0012AA5588
453A60DE2EF6D9A7CD767C726E7BF208B207A3F501A7148D758C0B8D82B7F3D1
73ADDB734315BEFE147336ACB1DFB98ABB5D36C9A0D0EE2DA962D069021C8FFA
41E4D4F47B03C6EDBE31C626E9E817D60B89C3F9FDDD16613F93916B0D5317D6
5DB1CDAC905C3AF1751732426011C2C8AC8B50A7EABBC2B004763221641A1208
B7091606BFD4E76355A029F1419A34A7F82874910F218ADB684D1BC2B16DE1B9
F84927D501C77484AD6E4829818CE1844055BC30995CA86B55F6C77783401AF3
1A9FB9318A91E72964CFDFEC785721BD7F0339D4128C54E6350054EF1EDA0C8F
E861C3B9182E122D0EFFF20E3FF86ED5C0E093217DDEFE2AFEC7B5B25B705E62
2591DB2A08002D89793C3ABA2F757F9B2606693001641630B28B5D3E6470C1AF
23B48D2537BD661D2D7D379C401455654B411849D355314D730A04F0F28F4DCF
CB67BDCF7F91795D5AA0EBE2C0E2000A5443FD66CEC1ABD6AE6E348202AA20CE
32D13236B90DCC36ED1717A591A8EA3CAF28A96AD84D7B728D2B44BCE04F3701
0EE47B6F004FCE8AE2C5A6C81ABE4E4AFBC048F64DD060FBBF625C8D3108BB4C
3F96132FCB6241AAE0549FAEA95CE3CFD580A5C52BEEC2E46BB6997A5608992A
5288A48DF30AA3D070D6A1FD614572275A4A8D62F0CAD8A122BEBC0BAC7E1FB9
B5FC777104B51E65B98F41244A4CCCFD088E5CBBEE14D2F8833D523EDA923D6E
74AB37D2C4DA4CE7F7F96AACC58FCD1A0629B9501E1D2577F32D1DD96313431B
7C84EB3D9BD6816529BEF7AD440C1375CAA1BBD14D32AD0A36042DE3885426D8
463258E374B7A0A25B0E1BF02B4108537CF2F15D8E7233F7B40FA129F404A19B
31824526329E1A9CAB58B0FA2A3A97A96FB8429259312CD33AE37FA6701DCAF4
DA65B68814EAD551D365821C92B1E7BF95349E3B7784FCB06409E718539A8A36
8389E56271E96908A1BAB8EC451DB2140CAB9A428F23B0F9B996EC30F56BDC0C
ADBA83120A2DFBFD720D34888EFA8DCA131B441BF1F70816D27F1D16A3F3E838
A24937F98342DDEE5BE36845C1CDBACF8E63E8D43349D8BC2469E6F68C6DA923
55714FAAC48FB52C672782889F349BDDC9EF8E150A4BB7A629B96BCC29336194
B731DFBE244CE87743112AE44D04161490FE1E8FF9E2152584768417147F08AB
6BE773C5C259ED77AA0373580EFE9D1F4BF908201D364E29610F5163E0706DD8
22C49BF22096860C1BEE8BF331055B23F178ABD4F8C666147FFE34BA78473016
D22B51479AD818557BB2B9C978E2750021A84B91483EFDD26B95161D61306CEB
ABF2C94499050F9269AB53C7CDB7DED49DAB96D9AB1201BDAD2782EC2B7B3A01
3C64825FEE9EC2D167BFC3F8901257FA56D6747EEDAEA2758F1B2BDEB57F379C
B3546D38C364A77EBC85A52ED30D1D400FAD5F2825C8CA0151A3A616B803DAD5
75D1C3F6A9E03CF8782516150C7F97431B46C40E3C5BDCF8837CDA8DA4ACC0A0
4A2F1844747EF1830DBBCEA5EEDB10D678D542A4724BC1E127D074918CF298CE
66E65983EA230EF2722AF3C11A75F16ED4C76B94C99F0A33FE83C973E6C4AEC1
2F4AE1EA304D2AD666426CDA49BFE1D934F32074A60DCD3986B1504EC71E5805
0EF111CAABCD0439F698CE2A02A53248B40EBE9CD56B8F43AE6FFDB36FF8F86F
DFDEEB1BDEE2D0D456531D03E5A0ADE28E5733E7B51F35115CF665980FEBE220
345F83733F90676C4DC5FE06D2486A4C9DAE75C5FCD7D4C9DEDFFDF21075B5B7
A1155E73DE218F7EED186FDF5BBBE339C234B645CC1E8BB7F532C829561EABA5
F829C4A771DCDE91E4E70A891479CA697C7D164BAC071B5D01C3AE8DEEC666E4
5CED430992DC91E463238A36732C3ADACB0EA238AB8B29F707E6181E840243DA
435B040BF8FF666F7C91E6D296AC56306512E63EA0E45ABD4ECBA000154A2E3F
A4C0BE4E934B125991A1E468838788379255D53EFA859F8A6C1DFD15B0A8CEAB
7729E75C2D9FDF25E7A880D22300ED71D9C0D23102EE49248FFCDB45A16C5E82
0CFBB30F2C28CBEB917A1728AF0405D1D3DA0482B107E0D658D1864B967FC22E
179249E0B08ED0E49466DEE887E6FCF478EB31FF512283643D9BA7BE700BCB45
D764D5754B34ACF93F9B6C2C4DE0971C1FAC50D22F229A416350C44D3C2613BE
CDBB2A1289DA0AFA2D6C738C928809D1820C10E52252265C062AA7204F2FCE48
1B7FE89A63BCCDD49FA1598C534FA8C661609017D367F053CBA01E86B3BF5DC5
6BF06198197E6340725A21D2C11151EB6753ABB6B2AFB5573F8892F82BD5B6C8
3A34C78F44E63D5B48E304FEC4C397EF336F53D7D3CA039C4C270E443ECA7AE5
DB1BFCC5AD4B2EDD2BBE65E9D98209EAC333EE21FB27553D9E68FD8E4040EA05
CCC71EE1321603E2DA2759C4D5180F276BBFB65BEFF8284CF9E8F505D5DBD7BB
E242FE071FEA0094A55B450B93A255D2D543B49841D3CAA44180071A4AB1A428
1E2C4BAABD8A23ECB4C310BDF9322778FC74AA95ED5D9F23982E16EBFEAA55F8
FB9CFD160164BBF49DE02B57D4926CC87F84F728D3B171F403649F30E6AEBA0A
87F4C80B9464A607DF18D1D94E59CF80490B80BE95E0EFE4195200C8EA481F27
51DFA6A44F8EFBC219C7944D9E42F82E7EA543E8E0F9C14F1DA1E860163510EF
84F392E6278D74ECB3172F52565D2F22C1AE5C75AA37A215135CEB7EB39C456B
9079DF81C6AD88937506530FAD536A884734D1A161ED15006EC6070FA9DD19EF
A6AC8616BA7A90AB43C36211ADECB05FB24C45BA6CD3BC9A7A2EF4C32D570D1D
28BCFCEFE63E35A77123BFC531A09C22B23B47209CB5B6CDBB42774CE1585535
0242A84248959DB1B6C5493D385AC4B2CD858165DE96C97C60AF211519D530B2
95F367F56046D72A851AF70A1CD55C16F978D9D0D88F0B1F82E39952810FFF3E
A86E2B027564CC122E040A0F8D3ECD9BC4AE64D224075884E3CF798EEEC7C8B9
98A08E6CF71DC969DD39E8949E608A1CA10322608F91F7EC8D1A1EFAAE77F13C
EE51A25F64EB4E7622B1DF6A97EB5B8CF0D704BF19E609AC73DDABA71876A64C
33752541A4DE08204FF0C454D0EFB2A42425DF9EF769EF858414B4B080B0ADD2
72EDE6F7997CDA8358B9B28CC547809595D1E114246049948C187FABF401324F
9989DB792F752C845B235B64B1A23A802278ED6635F3A42DEEE11D41BE8262AC
71A2B429489275571F6BF6F3C4A077577257B3BAEB5D55D267E996FD61E0E2EA
91C6FF86B9C275BA1F44C178C6930361E9A5D82AE8B454483AF6699412F96F8B
2ED6A79C62943F9B23DB483B51F60B8381D166D0D6F54541374410AFC00DDF11
8F4B74C61171FD4F94FA531C9A3698778751B279627D53116458DF41D9F27877
0419F5FCED8C52A95DDADB54D6706D51EDC248670E295524876CCE479433EFA4
EF95A80220FE72248FE394FF0E9CC2AD41ED3D78A757DDC850EAD335A76FA166
D075592A5C248643A17FAE628624E8EC95E00DE8AFBB11B6030A200192922A94
8F450F7282294145369C6561841A4AE6FC17F37C0E9D9EA0E29C6EA7E724E1D7
ECDA3A457619DE249FA86275B6057B6A33246EC97A3FF64B92804DADBE351DA4
9CDF38FC210A784EA2CF0DE96925680BBF73D4E9880CB0FB1AA5D06150B0411D
53BC4FDD03A55AEB8F339676D7BB9AF94FBE12AF5488D4B3F5B529A26A265D8B
70717542BC10E7F9CF2F5D3F671198B8E1077498D679F390D9F1F4D814D0BF52
5146732C6CB852F019ABC50E0B9686C5BFD5E5698408DACB75C3A6A7ADD5F823
AA0C197EF5A8A44AAA592BB04CF0BF542B7A9448B52A13B0746BAA6E23C5BCFD
87119A23471810117C269879FD23F4EA041206C036A69B4CC6CAA6806A65CF6B
1DB6AE3FBB58B034F8E717C84A7162FA00F6E05E5A9CA22A8BD2C6C3A7E04B38
3D0AA26FE8D9B9EDAEFF310F0DFD6CC7CED7D011B45A805FCA85D784E9F41D54
482D51A347822E9A1DB653F2AE1DB2F1159730BFADD840C8709EEE192B75A5F5
E81740779C790D9C6DA349C28E569E6F7F33FB6E7804A56375C652F5E8EE0D6B
9285E5F8F75AA9E538F3D988F55F9E4571C466AF1B5CAD7D7AB46A50DB4598BC
DE50B88BB19612A7B926385481D73595600DF912966AB3A1981F377DBBD68D7C
32DA7D27AF585AEF4309A39CEB0B8A1BF508BBAE74B1932A38B5EE2DB05502CC
A4E305635A3B4A1952BA96E0EF286F2238737E4E2845007C12646363E3D22A4E
C36A9E2AAE0091004F3E926B74236B053487ABC3D34172433CC652E9B2516AD0
EEC9F4521797B89C0F7806D9C84867CCA9F67943DF89183F2CBCD3ADD82E2AD1
967EA896C09692E9057801F243B335B5B40D0598885B9329DF559EE4F73496FD
D2B58F8B140D41A10982B3C81DCA45DDF8591C3B4904EC5B76A47DA0CE5753A2
90029A43D2C713E325980C175D8C20994382EEE9CCF43D79832DA6B617473941
A16D9A90EC8D1DA9F4706EF11EF5BB7DEB363C12E97A80587FD6180FF34F4E11
EAA4740D116700B79F070B79075044B457E26484C4B294A7F4D292172B102D0D
A5565803A8A0A15DC1F8EF07A1FD4D00D9C036E7CBDAB3457DCA08A8C462A1B9
66CDCAC71195AA3984B760FA7A9D7E3F3F14FCED028700C8710E6F4255B24A93
7F0879CBB6585126F5302B15BD31AF5CC06F5388AF623F6DCD75E1A1739179F1
49289E79316D048B1EB4FDAF9D6CDAE8F57042B0B8B8D42E066325FB5E08D425
7DA4F8669F2755479169E2387094956B5FE61DFCCF134D875F1DD645B9351BA2
44C98B0A48E2917A1C9855ED85CFF91923F2E29BEC3089D54A438A3D07C2F4EC
3510619779B00A5B79FED1391D0EC528D3744749C77556014BE912117100C90D
4B1FAF78A671E22BE763DE0DC29E24CE359B4226CE7ED35A4AA868D4EC803DD2
6470AE8F5A1E198518BBBC5C6D00FE216BA2A2613668A54F72CF039E7E678BB8
2DE21EF07D1EDE946538FE8BC5D15462CA37C5C212F49AC4EEA4BA84EEAA032D
2E88868148ACBD63FDD175399E3049DF1B755D43A687F901B1D0030920505BF7
D84597813143C60D3D1A515D52CB8732BD20D883ED67D616B08001738F1EC471
969DBE0A25C7818E63FBFDE2DA8122DD3D9F778CC970818AB42495F5BBB076D9
DB384C28773BF977EF07A9C449B821A5D70DFF2E81A1046742E54403227E0786
4367BAB7C7BA3427B025E947FD811859C65ADE3F367A70E5AFF798743CDB64AB
79C5FD276B6BF289DF00DF9ED466A951F95A6BF347B370619420081D7F82F1F2
93A88C26D54270428D60093F04230ADB67DD60AF15F202CB6F238534A077A2EC
0CCDC447881B31F7F142F318BE9EC950EE88E627CF8065509524B5AEECADBDEF
0C965D5BDB11229BB22B6BDC9B85195E718AADC5D397035AB9460A96040C1A67
41E56D793ABDE9F34D71C58EF11F644B47B7577AD0A401EDAFBE8A3F9F07BB64
ED861D07B9A83E4FFA101AB3148ECC03022C323C6F0F379546DD3D2C2C3FF934
BA442E86E547BA8DD64841E9F1B35D0B82C99C624CC0C65624B4717F15AB652D
550411C8C5953BB2455C041D9863AAFBC307AE5923381192351AECEA9AAC17FD
6A4983E273B0780533FEB3FE474B59EA8DC3F8EA9DB943F869FBE25703F08E46
9687957A804649CED0EA79275DAFD35D7E7FE358F6F877FA46D90102D19971E3
E5E5C7657AFCEFFF928399E0FAF11BBA9F67A4690A1847252DF379DB27BCEA1B
89E3E6480A4D3E3C10CF933C34B01F8890C5E4C89EC5F788CBF5FBA3B2D4B1CD
759E027B1FF044002B5D561F3EBEB21AF5DB12FB2BC393E88DB35F21445E8E9F
59D8C211281244A2857E36326D47AAA041FEE714076BCD8CEC233F735F323937
EBE4961B9840DC79B2049856A790660DDE83EE15ABF853113D433B6E1EE8B203
5FB96832CF006EA05B0254162EED97452D704EC37FAA311671BCD21B2926BE4C
650BD6D0D1A9F7779540C46BDA6AAC09689487F5E0EB021CADA860F9E9020AF7
B697A616F07AA95FC25807B9C3C178662265C05FBB14E147FF0EAD54D62A75A2
9FADB733FD31BBE5EE5A26916DD5095359A12DF93F95033B17298E0479974576
68F275AA7137E7E1D4D4C3D3CC2A2F09D3F493341676B566A2CFC8B3A88F58A1
790D0CA33DAB47724F9B67F3E20C1AA830B4DFCF6DB55C8F7A05225FABC118EF
0E87E2820110D59503A85EBC225D0366B426BD1154C58972E886571DB2B003D7
7233A407AEB6F4123693796F91BFA1DDEC196549ABE28871B49AAF2F30A35AC6
D3B5746051A0E8E152C99FF20214153556441D67AA21BF3EAF74920BAFB89889
071729076D755025AF9610BB65CB6D42230045E7AABF9CF4DBAF617F01869658
227F1ED73A6C9077EBF6B1E87C17CFC7E41AAE01771841F0EDBF88233C3ACD83
AE9F1F1FE0D911217F0E760B1B95F8DD6007AD0F8C9087B91E5EDB6135B5AC7A
BF4556EA65633D8BC4508CEBBC5F010EE3DDB37D5BCEE30EC3FE52FB428E23CC
9AD1A901D6705C0B8ED3F0313696F1B71E64486B56F848DF4B8C33F95133C72E
A83EE493A476511ED941D5CCB91C0E4AA0EA12349B63DBF6B6F7870A21F37AF2
670336AB875CB34ACE549576302D5EBCDC557A7D6A53B4AB077D5D6C004E3E68
2BE332398BA67B9C9BCBD32EA6B5B77D9934417A77F8CB75CA0C19ABB0C16F36
EFEE9F34D036FED019589CC2B5DC72244995F9E6C2E1BEF945E0A8B3D0BA3D3C
556D266E8B062ED2E5490246B2B6873BC4C334DA8AB3007F64A85944426E6516
5D3D47837C80611D126EBBF70BBAD9587137CFC5CB6950F1AC9DCC825EBA6392
2526BE33A73AD893BF2585FB9B7F4D03978D3CC132FB57FDD648A87F04E7A752
3E5DC7881E796DF27168074F3BAC5695CE860B8DC94D9627E275FC30DD1D30C4
1C32230DF74CC29B86B741B4235687D71E4CAB93A4A2C56D520C27F560F0BA5A
9C94346005F66BB20C96C895CA88DB9F7851539FF866695B45661565C29B83CB
1A4E8A92EAD5F470CF295F0BCC1353BC8689C6648892F007B7BB5138A9E24821
DCD4B1132C6B5ECBC86A5ECF1706A73B0316B76BD650024319A3F7EA6EBA4803
3968C918BAFFE8ABF123B5D876FE37F9D1CBEEB4A9F479B2116A5A751C1A0B67
EA037AA2C3AA0B97F2FC059D4C7F6F1C853F73D8E7C479F559E8C7902F0983BB
3E4461E699540DFB5252050128504FA571796A3B03B24B93118FBBEE7D8A0B20
87D1106B5F1BAF89339AB2D94C2709E08CBAD9A1926DD364A1D0A4E185FE68C5
D70161F0724055E7081A052F1883228D8F7B28591E3B2A3F767BE92E78DDEB38
C07ED43788F405C0DFE49851780496C0AE8E637675D5F840751738A373DAEEE1
14A59B254412504B5EFC2167B296F819024D17BC8F683E2F3F052E71E8E353D3
09D1D7731E2A6B122C6F57790C42B0368AD7A499EE5BC98ECD029984DEC1EE34
F30E77F7C3174AEAA273A07A8826A3A1A8EE0450E4C446AB059E11C519E41A2E
6CA751D88365B3D2E0B38820134DBEAAEBCB7139AF3AE6E0F15C617C20D9B309
62769711BC14FEA2F6EA3D9E6EC9CFB7C58871182D03B2B3FAF8F0C278DABA00
47440EF4CCCD92EAB452548FD5B6E6F84EB5E7B62F4ED31D68B15F2B74914BF8
6548D87316170A9098CA9F21511E1E20F202321AE8699A401DF6F2506B1871EB
BB6098B30449299E4ABD2019E521F656121A2778EE27C06516F9FEBE957DF202
11A50B9B037AFD8325758C951C8BA66CBD71E41B515851BC2E0202219DEDF55F
3F3FB3CB1AA3947F3B35D43FA75D5404F56A592E57250F65306A1666F002A9B3
6C608B6E3EE738BF490306A88A03A5801002B9F27B05DB0368267AA77398C068
7874314B7D79B20536B9F286360CA32A670A494B235699313E32BD36B9F3E392
52A46D4FE6E88CC271FD197140AC4570171D8BDD764CF968DB728C5382252DED
780501499B546AD49D1BB161EB07D1DC2B388DDAF66FD4EDE710B8E01C10FDC5
51ACB269E74119F5B53CCF11576A5B3D14BC2AB8ED858D43F22F68CB78053B8A
3EEB12EFB77EFA585AD16E5F5314FCF3C75088C3708E5C87A8F91CA6D7E3553B
D11A3AA0EA3444480195619020E78D68BF6E382772023B2FCCAB7DCB3E757628
F2A28706D3403748FD08CC88AC7EB8F02B48E75EDC8B9F3FC6FEB3FD3E1D20E7
3582CEEC37624B74E464ADB3D3F07F225FD3BBB29789223FC02A7EC12A43BF91
A433B3E91B7E06638CBB78B0CB5976882E607CA3379F33CDBDC9211CF7D04F62
7A3E392E139814D1A4312A3655D50D9BC63D9AB0CE022A2FACF7A29A1CB4A8E0
729AB1146098A7CC2A6696C9689D34A4AFF927895017165AF8F6B730EFCEA25F
DC5D3DFA0AF0A53861A009796C15E07C79096EC5355AD61EB9B0A39590295049
AEC2B509E09EEB88297CC97521EA45DDA85E5DD5C024B24774975B422C912C9F
B610DF63A051A3404D96334DAFF3A84B4AA0E78957C95F4AE69CC7ADF08C5EDE
73C5486C3A0006086B855939501B5DDEAAC34F9B27FCEAB11C8443E7AD26BC9D
83D6E96774223B875C6EB890E344635D8542D735CAC11FAB3A9021354DF1A410
9724FA449E64030A8D582B2731B02E6EA5A50FBB1078C3E8221D3132608D0857
6B177A69483B2176E1B0785A8023CA7D2A6B00CCA2AFC67544D9626FFF1909C8
78249C81A93A81645CC621D60371171CD543B90B6D7921F54CC839F08A51B9D7
F9237FE1F666A3EAED39E75459F261D9BE848BD90F06A5AB5B2CC0670CAE7CF1
C95B37803DD2D59238A6ABB6DB6354661340033C94E7B936A01202D8C5D2ADFB
60F74420E1159DE70A8E253DC0F98D3A04256A72993BF21DA93935ACDE329AB6
5034DBA13F34291B42E871473B1FE2C12A076078F2CEB0F09EF30EE8359E9C58
4D5A1044EE82D05B7B4689C56BA8D8D5822B721C34D2DEE8504EF05FBB7E5669
4F83EC022A34A730B1177F562C969C92D66E10E5B4B41504242E9A5E28527E36
E301C4F2F5A518F7EED2B1BC73EBA052FAA5311407ADDD4BDB10613A860B17B9
3BD212B4FCA7DAF88EE055B2CD2711EC377DF941210A9E8231ECD4193954E874
05F829FCA1228644722998DFB58ED520A2372560BEB6B9F6832847C1AD310720
D0DF49B5893948A97BDEE141CB25920E12E22CAFB99AAE3EE592FB4DAB538C28
0EC6600A4F67E4873740CBBD72B5D16B2125A1577850F787125101ADFDDA5711
CF4DDD77C9561F3682A81CCF9146A22FFDEF81158A47BD89E38372CE2D82290B
D895D117E2A4C2C7E3F1538C8476110D7949AC14E89E77B4C274BE06497B40B6
CE001EB5EE7A9F636F046CC24897AB08485C5A20DF7A300E7DBA6370B48142B7
47B4373D2FB09ECB639583BB7E9903ECAEC93D5E9D3E18F4A072711B3FAB2282
7038D5E2DCF97D2AB8EAEEF6071317CC32955F3C805136253ADE278AB7B25B0A
D31AAEC036756A4D881EC70A3867BA0FE24D41D941E023D8CA7998EBDB9E8FAC
93D5CAEA9892EC48051A07FC2A71AA9420BD3F8C22766EBD1F93402E96E10996
350AD66287687E706E47ED4DD7B9329F1A8FC9848C7A5BD9E1C158B8873C5898
D006C9748B9152F165B0CEA5DC10414D65CCF60800572266E29415D4050C116B
8861EFD8292EA67D4C205294597B09384BC11B0F1096BB8B09AFF6CA4406CB8E
601B345BF60B6462DD7913665633A369E0C2B1CA29F06FDFCA1636023C3B45D9
9837E560B855749CB63E2E8A943C94C5D0112CC26B45288E707897B9D16D90CD
556C341C478926673315F3BBC2ECAB70AE3C1E057F80AF5E8C93069A3A27AE6A
EF989BBB946F142D6F6AB1FB07508634A07D3A46006B0252188B7B98020736E4
A77353823CC67E36721E6AF0AFD9EBAB73776E7D9A411AFAAC33669E1D9F459E
A1854C8F20962C3C39C3C6F8B601E7F0B4C7C0495531EC5E0EF4D819BC7EE266
27B9F75765CE2BCD295D5626E6C459B074D03FF873E5D93A98D70EC865179451
F1DA34A4512AB3FD910C614BD018BA844429BD3B5F2F58AD8B3F993452076B78
0AA2A76F0A3ED01796438B84C14EB4F81E8848CB5D53D76AAE7582AA3AE49DF0
961FC9BDEA52C72153C48DC62B435E2D60435497EFE308AEFA18681ED0ED8129
43063FF6F488822C5F8D2F55689499EAC3A4FCCC29386254DE597AE4C6A8897F
9E44E1009BA6FFA0C2AEBFAC9216FB646FACC2ACCF7936399972EC0CB237608D
46B78A08419228C09E97A7C3CE8CEC1A02F506D3530B514ECF6ED4718BD0D7C2
1DB7A5F98D73244863A9A8F258EB327D06A4174074E85B38872C5EA7AAC07718
F1B7B4C6F79EB00673FD06DF882A07B4F53B9FAD611995AFBE87F3272FC62B4C
3F67DAA82817B51B6BAB7D11FCBD0EEAFDEFB55DD828D506FF53579D7BF7A3AB
35530215DA0CFCD51A64F23E239EB4C072D3196F99F8EA888F67901B52715557
491B4DED0A19A1E6464D99B0D446460A89B31933D20964588C89EC9E89534F6E
AD90F4BDE4CBA2C23501A34BB3758E4D8651DD73FBB8F7332ECD7898A09B242C
3F3CC345F5D65530820A096E7CA5B76448C91E15BAF7422BC9F19D52504B6C74
D1B1215AEE7660AC4E30788460D35A12C55FB9FE4D88797CA70109D94C735A6D
299309CBD73F3E3A61449B98BF5361FED23AB0810D3CBF73447F553B93789208
DED34537CE2D914FDD6D11251F0D8BD58651E901CCC6BD34A540CC0B84BCDF30
90968D3DEB35D08E2EAFBE908EFEEB4FCA3536DD9772902A5ED4494AF74C5E72
88E5A2E0AC2E9C79ED0D6E5B1D33C0D55003D922DD21AF508A0CA59A37844C7C
6D9D856A7B35498DCC9C4498EAD3B5ADABB830C68513A5DFAAB3ABC02D51276F
4BB7E88D9B2556169FE98FF9B3CFDF3E1229FB4A9B4DAFECDD6DF4D937C112E4
57BD9E801C012343E7A34C807915AF5345D2EAA25C37B964160989BCBA035416
7C4C3DA0C72212C10A3A614FD5AF5DC3D176E84589E8099FA1ADD559753C4222
344E2682F728CC9E9C051BF8D85907DFF2849E4C3C7B62E653903867AB4706F5
1DD1D68FAFF1AF62A48B92A023EC0FDA8B73C48964E2E2EB6D22E975678C98EC
8A6053ABADC5251D54A34E90C259489BFD7D46525D4C1883164AB8BC13980422
D4BC5A9A766164A81254647A755FFA1E5D7C62AEC563F40AF416C079AA82822A
920D8CC9EC66930E5533FF3A7328F0675312E88948F703D695F3947BC776B062
9660C4C1E2E81D9DACAF601B068A2C861A35DAF8E073C8931CE6B91A3DEA2697
26AE2B663D3A1D3EDE719DC8DDAA78F5EC0B998287D0CDC078F7C9D00162A91B
B785241C98FEEA8588C43C68049EB787181E75D8EEC99DE256698CF9EE123F0C
E1B55B2F5B035ED70817E8C999AEF82993A1248165DAF13D26C24BC276BC5F72
AC1343EE49D70ECFB7D0ADD3D4F7BD5C89F7E958B584298DC6830F31E287E364
D81A9AC387913FCA9209F9142F9CEB88DC7864AF1D2CE3528300002FEF053DFE
CF68261DC400897B7D2F95622000FCF17756073A09ABFA792C31C37AC9C62DC0
E1BD0318C6045977231D86C8BEB851B96CD7BF88F9A222FD6EED301E9D0A5EA9
44300E794BAF7859558C79820144B5EAFDCEE20C43F067B52E8DE7FED9ACAB8E
A4637880DDCFB0DB6B5B3086D9810015DC808DCCFA23CC9BD8001661692CFD35
BB7BE273B8B3E2FD54EB41C3F71977E90E49CBE74C82A940F6DCCEA1891DD865
6751732BF41A130E71D69709DF330DFCD7203EC5FD0397C7EDA10C34AC318F2F
DAF7C19A2999B738E31D9DBDC9C6E3A672DC6EF9083371CDC8C02D6B311C9D85
F4D5A6AA20333E94D17E48FC7CAF8C87BD99D78AE91755DCA52875B5E59A5E42
4507344921545DD99DB567D5486DF8C29864621BB2A5273F961492C973462254
BC1B15FDB7861C57C21D48AD2C23ACC0DD23426745575DD3D5B5F9687FCBA312
4A180F41C57FABDF2D50F3731DAD782BA8983CB07344EE376EC1AA447B376833
770EF2E07B6974D5AFECD19252843B5D9A3073EFCA93AB9C60B4696B15B2540E
5AB7CFFC1288DF89BE3A55A7A6C770D4F7E864F8944BEDED0796D1AB863C9518
62ABCF47AFD4AF608C719F5238C7A73A2AD54C5DE4EFAD59A0F5E7AFD710A7D3
96C344137F94F85CC284D64AD2C7DD8598FF5E6CA6953124C964B73BE7A0693F
75308FF5FF6352C8A5DC56896204376841CBB9A8523AB17FBF2C772291FCB6D7
122B339C04EC4D3234FF90A95D96B5F148080820F82B54B156921AABFB331A96
3D4E6B608D86B95CF836B9A7C34567161C301BDD58CEF11E62C1F29A863C750B
DB6981C04E08DAA0C28A978043137647933C3851D8749ECDC52F1DF191028D15
B69ABBFE5B26A1F268AC38426719885A5B710E22F1F98824AF010896D24390F3
D7D52A23E8641903878004F9CFD535E9D4A74EC3666FEE6832AA9060453F7656
942AFC552D3539DF5FCEA63EF71A54577E41DA572B2601547814657CFDB94695
D45D8582AE345AFD978844C404A5C7E0602C8FDEA1B0DB4E681C77F9494B0A27
DADA0582703DCE6F33A633D126CD63FDEE48033B8479DD777F3EC164E0B7216F
09BB5C9F978C0C7F6FA9E10603A918C0249E2566A7B2632B87C1E501CDD50B27
5589987A77968293EE9E6A94AC62BB8D3E0F0222830036A787239B753A94630A
97C3C1968198E700F9FFF8D2CBBCE3706BBE74FFAC432E05A7F728734C7EDFAD
6D04F8F648A3A9E64080158411AA2648AE4D4F7AE3710F113F70A98FAF1368CA
429FDB031830C2A5366F87832EC09BAC39B2B4A0ACA47C25A10F4F30410347AB
1664C6EF44A14E4080DE1BAED120C6F508CD7ED11B9514BCE0D7099378D2A442
BC856C8B7E685B0ECEF680A11EB7BB3775A6B8DC002315959B75ED0EBBCCB03E
09F7028BA7DF654F6B4BE7596D05CB792FFFE36168DAFFEC45349CD691EC5DE2
C1C56E6018805E2BE79EA1561DD2B692036C78C8D01D6B232F43A71C9E0244FE
096571F074F07CC1AAC1DF294CFB47753C78438E141CB19E762A9FBE87281D25
8697DF593AE4EB419C638761CD0AA12DD9031412AC87B96A71772E6186AFC924
E8517AEC114183C3838D9401260A74339B39683140701ABBD926BB41B1B531E4
91065D57658F128F282B1848527544E28F808A264D25B760D6D6D7E31A40C54C
FA58198236A7B9FD6EF7D430EA7B398912B270480ECED0B716DFEA7B548A33AA
A0193A3A5DAF539FAD73842F9905F0F6CFF798BDB0B3F0C9E22BFFDDC287D584
9A44D57C59225397084FF5016E4B5E8F6916C452D27DC78F03F5254090E70892
C3954B4DE3AF6920175044C8FB59B96435D5B04A9C1D9353A6932638DE190F01
0642CC96BF97C53A08B1D1CAE774656AF075B51DACD371FE8F1658AA70AE9037
BAF2779ED8034237F25540F71DFFFFBCD2CB9DEAA4C17D53E4CFC672E0BC5376
528C12B8CAF46ACC3790999A13F8C9A87D07A9D83EEAAD4AA8BE84FE4B443F45
DFA7804DE41D8E3B62906D58ABEC0C1485BA6FF04721CB74159EA405C55CF780
737A7B1408D4DA1B94248F47856731D2B3347F514E973975AE84586698329843
4D090C40B0624E52F21809FFFE5DD366181CD0C2DABB1404868736AE19F12F0D
70A4CBB53D17252BF827F535B8F12382D45E64C52F1B9D1D3039E0CE7EEB0A55
A7903743CE879EBFE2E5DC3E724E937EB7FD8728CF47A183D6B87E409FFA9640
30F18F52FEB2C12561314064871418E7230FEF4C95B52B98286B5693BE3B688E
7E181EEBB5678DD083FA1307097D7290777354D1453A96B5C6DAA74681BE30C4
E671CD96973F8D37C19E12AA0BBC1B27CA5A3BAD048442CCEF1B22453DC841B2
5DEF3DEA285F1112EA017AD38D7895189A977C3BA09D147BA9DC1AF4A7E7D221
A2E4C4E7A8CEEB85024449D162DDB5D13A00C702E7F8EE4224A614C89A9B394B
15F722CAC04FBCDB9A55427D0A015DA90438C4998EEF25619EAB1340719657BD
58BC53D145E742BA0A4A0EDF20E5332262C12D8255314897422139DD5CB79598
EFE59FA506F8812F8DA2BE72F0827246FCA44E4A767AEAE1388661F3F085EE06
63CFA4E5FA66CE2A3C5D2502D226935FC2CD31B15624AF237C11F0A7334F84ED
7CF8196C2C1396DF59C80D8D3C60AFC364CB0619A3539824DF0B4442B5D7900C
27726380FBD3293AF64ADF372A7E9C2EF8108E610F0AB72492447128950E7EA6
452555AEC3AC7008D4BC31CADD8E310675C7E62FAFECFE7C1FD1BA470D057CE8
CC71AA4BB84DAD5C8732A428500D51ED24B81207F1C72E9EF3DE510D05F0EB90
593AA7ADDDE34E3021C73970FD66F32EDA161DEDC5A3D1BC7E6CDB0683590F27
5E209DB465C20788CBAE0C036E4949D4AD6445D23839209C250B26C40B35AC82
623C99D9F3C0199AC14A1FC533EFF54ACAE66A052FB5C6C891C92D18FF37ED48
905A94095202938ED712454FB0CB6524F3C331BE364FCE652FA38CDFCDBC4230
AB510EDCC40844358B9CE135DEE0330C8F87EFD0C16B806C33974F0312ACD160
5720B548189D085A7DE62586A89C6DE90D57997B9538796607766AD28F7DC3C9
37D764D7D69A293533DE22B2993C662ED6ABF9694332DBB89C865BBCE5E358F5
FC2EF5F8F213E5E3CBF0145435840D9E4EE4EC9EB69187E84B2DA1F5CC19C950
29A9835743CF57CB95CCAA1A4E7DCA5107FB29282B72D09C66BB5ACD2F87BBC5
5FE863FF6218BB1FD33310831A85C7B8E70AFDAFA10DAAB8ED7935C83A9A6DE5
C947140AC48B22EFAE3EF8FE12D52CB7E31B4B94F0D92A7A8A44160BF79651F0
E264F81770C69FBDAEE932D20D9A5B4779DFFAD7B3E5D447023D643405CFF12E
CC6EA8BD938949438A3D3510D28B3A9C69810C0830590F0AB272E7123600B99F
8C2F7239B03D2D11FB3DDF16D6CA98017C7C118D8C67F71A4BC3C8794BDC35E3
3D79B7E604C912EA7DAC8E354F1CEA9C76D10F50BE9CEB567660970F66F20613
28F85AFC287E9C2421C6A45DAD8E75DFF208727DC428911CB820B9211D2A3C6E
08526B5C020ADCA1F99D1C5060337CFFCD39F92BCB76D577F35E0E6F37FC4E9E
EC8EDC1A4916452575C7B3F0757B447D968F75DC250C3954162F74C0EE7A0016
0C3F447D400B4E4B34F46433CAC90E3298D9D4D0C3D52D484363057478063F8E
730CA05F3B6D327398A75C7F50A090577E5E27E493C142AA9CBE59EB4D970D80
094BFD77579D3BA8BDE0813D641BD081EAC8AC5F70AB53A6C102F1713208C99A
B6CCB0BB3E50A70B6A3F1C06652D924259CE629A4C114C8032A9F3A9FE3660AE
56674DD0A6D87EE94E783D9B3A2F97C83025DD7225A1ECE44E1DCA47451CC891
9DFF187A589F11E89869BE3664C88777C1DB8F5B0DCBFB9C8A95985A0571E67A
52C135E714CB39164B65A06C6F602FF3A2A62E9567386DAFE200D445F8F69CA4
B90D34988C1C1AE72CE581E82E6DC4C2D7913EFAF442F2AF2286420A0770670A
A0B84EE653AA865047F3FE900978937F5C97252EECA5CA374B61B48E769D9E25
F7D20104D4A69C2E05352428D4C5BDF29CDB0817AEEC11C8E1544DA74B369425
D80E2A4707E476CD1BF4D8FB3CE2A36D9ED09CCD5A307783D0C4721D40D417E3
4282926B613BC43F66201F33ADB08AA4392A1FF1EA9F0ADAE03CF6EEB46D7BC3
B3B23E4EB6D65293A63A397B46FBB2368A315BBEACC8CF72DCC36E1C7A710277
9082F718B9B616E07B5DFC25F60929E4BC2435C8495AE3EC6EE9C4FA5AB294B6
C030E97476D9AAA501E7691200D256590F42739A831D241328F898AEDDC13A55
0C62EF92BC05F7CBBF38C5C21B373E22E765A00484AC956C6B3046DF6E23490F
D2D3D29651EDAC6DAEAD961AB8E35FFB17D8A892F36B4031A4A890861E0B5A5D
35C7EBE65ED2A268B68586898BB25A222EEA1BB79958F217CE80A9CA48358917
B8F16E83B9176D5E7C863C5B4A709AF9DA4AE1E87D71189EA6E8D0FAF5B2BB2F
C0429D8A050ABC9E413D1DC2AC8DBE2E4EA38E7D327F0F4C117F34AB17610F5D
7F76C2001AC4D9EEBC5F048B0811B8F3BF2BBA45C9A57E7B274DA927AA92744A
35840BEC3B48876DE9EF1C24AD166CB448F0AE7EEFF90937C6FB7A0C27C56B44
B37C97E610E07ACEE384947A14739733F9011788FF8C76EF12390D5A3A83D197
C0BC979A265C946FA370BEBE7E2EE5D605B07433F7592E211E36B1EF8F7E5410
F706E9023E69D42FAABCF85E436D5E204B021740CA764CCA28A466731CE185FE
1D05A6D946055548AFBF69A36136AA489F0BCDF75EB4FA7826FD436879844F46
CD684120F6AA54D137DB36E0BC5463D7EC135192132941F5766C4C52F04D2AAD
7D1332C49DC86BA2DF6EB8BE7DFA8AC611FE4933BEF80AB5B32D408A84C072D2
556828362D6B0DC629146F05CB3A84AE09FF5C7902A2BA12EA4B10EE9DC36A83
30EE1BC5369ED31DBCCABACA88C1C05AD2A6CB7DE287011E2C3F85F858DE3F53
F1CEA5DEE6E6ADB193AB118520A608A93582BE395775CDE9F5C1A41C748FC158
3DB69555DAB4262BBF34DD041470FAA6AF3F50DF969F3B5AC6F886F616F3E75C
36E9CAA4ADA4867A0176C7390F2735C8560B245A051F37AA4417B99EDDF5F70C
A8B5D77F4469A676906BA6A5861E757C41F9C5DCED967A06E7AD1E0508BA26F1
6A9F83BED5F3489F7652C66141595AA56BDD86DB936D479ECD890711E48D8272
96938139D9AFB275D369257E42AA6A913EF2D5FE30359E7B394A3C21C0D095F9
4F33159189054F2B300306CB5E11A1DF57C36C6E9EA13C0560C3C957516AC9BE
A869A5C6AF8470D26527E73BE19DD38D473C9EF9F8A854E4C5A61DBF3CCB017E
5E35F756077547A6553345AE867EC3032919647C526C614C58D6AD766AA32FA2
EF84CE95E719106E59C421D7534E48C018EF869FD970F2E2D71D2B5EE0C3F03A
603A161713216AF97E7C833E675C5C28DB99242A8330E9DDAED388DB7A0B4C19
6F8032F9A26C558DEA1C921FB40C10108AD5B484A46446DD89458DF1F326D4F2
3606C6B8FC607D92DA9CC572082B72E9E936BBC50D28B5C185399BC5C251127B
6FF6C1160CEBC4F8E80A54D110435B8D61DFBDBE592A170D4F4CE045D5A30D18
27179CF634C5619FDBD1DEAC9B18ACAC2D3631D03BF48B08E67C62A722181427
D0C65B19ACCF1A11407B364EC5961CCA9140BBA1CE8E49FEC7EA956EA62C1038
DC6D9C099BBBC65678CFC402A2AC1D7B804B75EC684F397CAFF417D6C412A8F0
B0A50A868AE11BA71D25CBA8D2559C85177C3178B132576C11E9C0E35AA4EC93
90FDA17D01EAFDD9AB59A86F4E21CCA9FCC3DFC8C66D40D84535447CE24E1954
BF641FE8BBECBD8F83F33779183066983F1AB76ED66D2B1C6378EBA79DF5CB0D
5BDDA62504A20E6C03DFDE649F4F521C20F6B6AF7E151F7AC33A81947FA899E5
60FB9CCAB97B709C0C4FED61A45A1926A85B2B51440243BE1E7156041165673A
710E34D20D20F65E909A3DB2AD3C3E9AE9B0D405E9DEBF3A79B33018FF34829A
69E2B42AED8B1AEDDC9255557090D7D503BDA085691C6A65301F67E8DDA5C75E
760F9CEDBDE7BBCD08C602DC075445138B79824F394010FDE34C570D7BE76A49
6A58242F51E7321386FD2D95810F7F31F7B91923F051E27A7E8C06D29FD375D5
54B76948E376329402930FFB601FD898304C6EAEF67EF6DDB7E68AF105D2AF9B
22A4875ACB9DE099EF4FE14D8520C2314D9F6E24E15D0F1F5487991B2B4E835F
0AF9712C6CCCDC8A87EC94DB4BBBC16F8DAB86A3A4A7BD84BC264CD73F1A43E6
0AB150B6E0274F5F26D2B4CD50903AE04590748E1094C69077BB034791B7D700
3597C4740A96A9278F5557258CB7D25BD0B8DB1CFBB22C420D71382C7E5047AD
F5FAC5409884F052D1DB422D245201FBD6463F31D5D5606C1228B9B2F2962813
50C23CEE1D869C4B895051F14BF62DC6AC474AC2F11808940D6E9AFAA51EF6C2
38E2635C88141DFAF08A68119DC67B5910CC0D564B31DB54F2CDC5C439001C14
24077C593A4796CDDCD5CEB4EC0A94C48F81D30A6EF16CA75D4D5D0A7358BEC9
A5E384E2E27B5E5CBD85DAD457C8351CA765BA358247310D2D65F7AA15260CB9
BA120D8DB54879A0463788B5F261ECCF04129142417E3381FE06E03BA9F1BC28
D527BFB50F1A7BFA3EEA9698B3D2AC24C035665DD98E26606CB1A3A8C57A8248
3A6F6AEB1AF7C0FB74BB319092C47E4E252129D50A70324621CC131F067BE82B
7A00167945245303572FCE365C842AF43D57F70718498FD85E7A99EAB7423DAA
53F8F7A9F1EAAD5C10BEAD7E583F9BC1DCB1EA3B8DA7CBC22B10CABA6E61E6A3
419D0ECE9ABF70F2AD36B7F2107527DB46A9FFE6D42B465D10C6658F234FA2E0
75B9F836929024A822946BF8F810235FFA7904418684810F196A27DB26F73677
2974FDE0F0389CB5AA31AF46279B26B6D91B50B9A16545A27E0FFA72D79C7D48
B5A11B07D68A517606AE4A6A86F7EECC222CA705C035DC49777BD37C68DD8689
4235D7DBFC11532518F8D8695AE74DFBB5F467295D186925971163B354E080D5
7C1365CF9E6F9E1E9C0884C5D9896F2BFD0D101F727D26940634614C69609508
82C0F1AFCD6F021CFD7AE6D821D91E06299F6375E5523F3D2AFF386B93420563
5379B9BB4962F2613D0DD81CCEB228F0B38E5F906E10A3F76B65763C33A249C2
3C8616B866CC56DD48531E18BF26D15411CD48CC6C3D7E0E41EAF61191F6343F
0D9EA5EF97AA88A1AF3326CC2E6231A9A1693A33308622BE77B254972132E578
B1E2018C5DCF048E713C0C6A1AEB21888B498E5182C0EC6A8F9AB6FE23F3EFCA
6104FCE170B5EA05F38E5492F48B320F03342CC316455276ED0FCD4F40D6FB0A
B6EC02401570B57094BC710A63410D8348500308021E3AFE578357F13DADCE78
2298E6B2E528F9898D921D9913C762A8487DC1C0C8748FBA28FA45B4890FC278
150582119E13EBFBD2F00AA73CADA961BD000C1F8359A11D1A55C336E74F03C8
A48D82765C637EED36F619E28DFF3DF5B583E2B3C570319E422B67034F7316B5
922CDA33478F8BB69EA1BE414984AEFE7DC16AC1E93981A46D1C6C13EFF7AF02
A722D5BC2ECA8CB077B8A351836209123853951075DD808C5B9DC5011408B69C
1EBC55A5AAF402D6CECA4A60E4285D17959F7696B2DBD18DC081E29A4DDBD91D
FF437FF751D79D325CB7D6586C5DD7E211ADD36C8D8A3CCAEBCAA35084F12C1A
ABBDED40933AECB51B376CEE2E5610EE5F4F46FBCE99C8E610006C5A8AAE834A
0587D990024BBE82D1892F1E5CF85A18C47CC16DA17EB0E6F223CEA5C7CB2E87
EB8A78789EFEA3EB8929EF655F1D5D2918BEB04A7298B0FD87620B527100738D
D02FB92820F84DC9A921B07353E56C03DB4F9975DBD607AA00EAC0104FAAB959
AA3CF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0A21470A04896A823C3529
050AA960B9D932833D83FCB20A40CEADEC709B67C6EADAD9672DA050118E236A
F7253F269B605A142D1C611E412EA0F18C3EA3AD9F8EC5EED6463863CAD9F80F
928ABEFA3D85BF7B6D1D23E0EE5038A81C4BA2028E998C1B76F6E9E1A73280C8
F0C9631188C53C16D34888A41FF2B03F5737A501227F66C2C8131B7FFF721642
7AD0CC81DD4DCD897CD6975BCC5E0F04FD27AA3F7CD256468388DD5E86C2FBA9
EF7268661F68D3C9DF649ACA894CA1FAB583CF9529F882FCD021BF6128067B09
64DAFA25FC3F94DC211CB2CB9422D87CA8944A81EB8FDF9ECFE3F2106ADF3EEB
E554A66748625B0206FDE94A7E31FF0D0C2DEEB6428CD87225C7FF285B8A184E
8D8A6A949A7181167F572BBF5166725ED6958D4CF8863A6F3D0BCABC3D7820F5
38857EDC40ECC65889A7AA9AC8B6930A582E5B406053BA9D5DC32E9B001CE579
C924FCC17B44C9AD65ABFC53C0B6E4202B44961E58F7DB462499AB14CD7F5FA7
D6BD8A16E33683A8AA5F16C7D67B3A1389D07FE57F829D9BC32405D853EE9CEE
FE03C0D3496A15391EA380FAB1FBF3FAEF687EF4A802478CACFAA505D74B91DE
0CDFEC48C95280C8FD65B4649E969F7B8A4635C58C96A9E3B7F3EEFF362FDFB7
E5A94F112AD926CF264BC864B2EF779A517C4D604062638E805F519DC2CF0722
31A71A3BBEFB26B3CF29D31A530DEC07494448417419D99C9B75C0F54DA1CEB4
276A73687BD83EBCB86D78E89DD66F9EEEF2F38B7D5F9FFDFDF208FBB926A498
559BC1076F522C3F0C9FACFC9ADF7EFD8094C440696F2D6360ACC5A036E6B26D
133F0CB7B552FFB89F11206107D84B6FE6C6794AFC00FD854B4717379EB54FA7
DFBC39DCFBB8B36B10B96198730261577D250D39FA6BE5BA2B77028BC11D06A6
07E0EF7E35A2A07B20BF381D7D84CEA9FF056AB0467ECBFC6090D63434B8A6C4
8AEC81985D2F7700C07FE0C0E9568464B73F5F5D88044A8E85CA38757B42E7A7
CEE819DAC55E540B192708FB12505ABD1ECF4D552233D45D037E3BB0BC329342
80E88E8800EFB3E244315118EA12F7A2256B7C90D6415E71B3595BAA1675FA9F
0200785044D8D5A05C7656F1FCD7F4AD7E89DD82B217D6579A5BAB683CB45CCA
DEFEACF8E0A67440638B0E809BFBF320FAE7571F9542FC069EDF3FB45ED53BD3
A8F2AAE8A3D64023C9FCAA0AD619D44B2F492E2C8D87450AD5506E02E6ED5A8B
160987BA4DB943B4C90D7C4149DD8D96193666B08988548F9A88C9BDD6165FFD
FF87D37A0DFD30ED6D6E0E2C5C0822AD4A6E4C1C852EF0A4917A8E69926C2FE7
09B88DD0530501F2B1DE7A04FCE7589493F837AE8D53E4AF5C97312C1E60709D
42C10CC22C599C161FE280E988052F025B4E1053DA54AC8E2B5D54AD25FE82C3
81BC9AFE30D72F699A2FCA90DFB3DDB9DE0BB266506328C8C1DFC5128D7DF41A
6DFE2B9B8249F8287729482A746E8F98E78227D0448E4B64D9791E49F229D564
E9F25E4333E3C9A1BBCA786C4D23D674AAEC7F274A1A297D5A683A7B597ECC82
A83589731D7710DAAFBF800277AF8F58BF9B5D29B25911F5E1EB643A27AF29E0
6FBD4EFE9634EC2A6EFB990534AA911D58BA457440502C409C5C0054C4DB077B
6C18F9A1CAD2BC6E8128B9A08E192BDA85C63334FE4637809325094262027D05
1E9EF84F29A363EEBACB8917A23AFE5354161B01F802557D1C43DC57EE3ED096
9E99A1E6C050E6729D555CE59C5A6C5E8CB90C85758046F0AC41A438F37CBF77
C861E442CF53E5942B494329E7F9345B2BDBB195512912E52258849A5F76D75E
1BC8D7F2D188C1F54E6807862D3090AC8A817622839D90E41B98A37E125DEFFD
A6B941CAF8BBDE909DB3C09863C5C19BFB9E2AAFA8048056C776AEE1555712F6
704B56FB50E27911EC4598DFA3065A3EE389E8C09D021E9B238AAA7DF42C4261
1663311AC13AC60B93B10D072B7D06C16D8EFA3B9F1FD1BE67D0D955FDE1A971
04255BFB2E9D78BC2CAC96AE2FE7EC674515A33CB1B2C5F1A89275B9BE31973B
E3907518FCD99740563C0485CCAA7CC2EC0AA0B9DBE400D322C4DEDBD1E9D18C
E9A18B8D9AC87926FEC30C4C99470ACB8CF9B9FD9E8332879C1112B7A734DFDE
224AE08F717C25EB43FEF76DB9900160B9E19BA668E7CB5CE8B7E59DF2FFEB97
E2A8A118C22744A8428492B44A6AF65B6DECDF37ABEBCC219351B8750FC3C29C
29883E393744D8C1AFEAB666559DD2519175726C4537F7F4997E1D935E73065B
73705F0BF986B3AF5EC5DAF49C1C14572A3D0B96004F6A6DF9674F3984B61978
BE165EC0C698BA9349606861BB208AD2FE7059575A8F19F15E2C6EF259E520A2
F340352A877F875BE5BF5793BCC6D1B6D03326953F8402717F37EE5D6BD192F0
4256ACF7397CFF0F35EC0C115EDC2E6DDDEA93FE62AA17E6AB7114FDFA64095E
AEA45B950F5B5628FD0E9202306ECD1BA69E3F90635C6028012240E755B659A4
203B2EEB01BD54E0BF341F309AD12568F8EBEE446E7F17182D26A5036E8C13B6
DB9AEB1614509CFBF8C29AF1EB16C0B303CF14B26666E8F75BC6E2F000C91885
55C70D34518C64BD6CE5C60BCB8B7BC0C4AF96827A402FD69EE5632111F37FFF
39D7A8D164A34A1284540462D093FB92A87C319B62B79083E6254FE77FEDB186
06EB2FF4D9FA9BFDD3422ED68C46B6DAC54B1FCB90ED4E10B9ECE5D31FDA529F
C2A5FA396336D913E9C07DC73BFDB6F2B59ABD54E8175621455AEA0BE04771F3
324841A15E8B3066DFCDA7C2F3C0F0BF3F9E9BB2258367980DCE36F7636A225D
BF43C7D37CBCEF26477F86742AD53550CFF43B4D0C9DFE568E12611E4B9C927C
A98D8B583814170CF6AD78313411EAA76284915F331A5CC5FF2C793CA4FB6BBB
C6149E8F1D6D67C1FE3AA5D0D1C00336908D8923413B47636F572BD2C0B68BBA
03E38DCB3639CF3131015954726AC8B0C3250E81B78AE3672FB13496A6B98D2B
75EAE1ECDC95BBD28A6A8120413945FDADF0B2844EC994D46EA649C2AA8AD1B1
401B2366917A57927B29F06CA32B3CE37288566F383CD06B63274CB392F073ED
01E6FED34118F147EEF72E3E31518F8C81E0D82045CA2B84ABD1EDD4B111963F
BD3EE3D1511A9411ACAD022DF744CE7F3A67AC063AD6B9DC056819590E0B8904
161084E46A06E16CF4C1337B09E685C1A00D8227A4C2DC2A5E3333974278D69E
E00676DDC605A005392064DF6F504F14DD921DC3D04C214D411FB155C4CA6B98
B2E032FAF0786C531FF116D0CA4F5844969CBF0DF91C42D857826F45A565CD1A
21DC64FC882372B8ABCE8F0D94A207ECBE3D91559D67A9EFEC61651614384D7F
83814EDD2FCCC106563353405F126DB3D0EA011BDC1DC38CBF3B3A6C331F091A
85796A3D5AA6F274D46C818E334B4BFCBDBC6BBE786E2B41C94A57BF70170168
26D63BA8031F3A75D14B3594C0778874BAAF8C5A8DD186B3B253AA53B513A289
FBBED7B3E8EDE5A5984C16B6E20B97F84569000A044B60688843497D1E90E7A0
F109FF132CE022AE2C70D3D1676E950AF2EC753568B7EFE39760EF194087E7CB
8D971D1DFB843D1F7F284CB618A9B0CCB4C54E588056B7ABEBFB29D7D0EEABED
9AC5C0EAFC10174622774067C7D53239432C587C2DFC749CB7B7F35C5EAC8F37
02851CAEDC61729DF9AA280B39818D5237B468AA275930F1FEFA06E2A0115AFF
6A3C612CFA4DF61A500F6EE2A7A0886E660022F539F808AED3857F6B655282B5
441A17131A215089D47D2624F8A3CF32670296D4F61ABA7E90963B8AC1A8F9E9
E0610E4AC7B1BF4CC975046B20DA63F2EAE50CE869AF0726C5E41F2BD4B4AE21
BE46DD9ABDD1D1131A1CD535D15890C210566EA4E7E490355BB743C8E3DF12E0
EA4480F1243B4B8AD9E10E5B059C7B80C513979036BB8F4051842853F18F9995
CAD1736A2811C8E36728BAB402E12AF28B33D02382C6D8098EF5D6B0C3676223
4DE77C6A81F86C800F01536C95CC454263C8C5105DCBA24601B04A41BBCFCA13
82CA8AED123B39BB2817C34EB4AEF4658F08831A14CBDC7CD85F1B6F95770B36
4CF174C9D87CF2FD65769961696DCD1B674CEAC94C8961C4863B198FAE6FE40D
BD21C85CCC6C44BB6BE2D99CA7AED1485DC46D6B9C2FA95E26866A926A71DB0F
A45CCB266DAAAD7811110B37B6D6CC775EB1C489ED79262EAAE2E2AF1E185F5C
6D5BCC01B304C13F7AD5D59A3DDC9DB6DE7E7596F78B33371CF2934AFAEF0ACC
14FCE951910FCECB9DC48521B92812279960949557FE13F9EA41362F762F05B9
2918B575F295968851BD9E6B9997C80EF5FAB2228889546573C5BED6514895FD
06AD4D04BD79EF425354BB25D5BDEAE71252D9D921C0674B08DD009A2C8F2EF7
0C2FFE95CCA98AF79425A6C5C6A09431A840C7A8BC8C57A25E9196FB53916BDA
C0C6CA77370BA3C9791B3BE6A5D1B2E211585E6707F1062356E1C9C7D8DAE4F7
4C2AC7B09C1FCC85A319676855FD8216C5A1F778BD0A59CB21C5CE40DE7EC3E9
0AFB235420B4FAADE4A260254753D71793E091346B07033644F49D7C190469C4
468EA1023BB1D963E0D27700F0721805652D0B023A4357D5CE27A4FF92203662
BD886D7661E6A5FB0383B49AAAE8553875F67AF92242152325E2E6A297094CCF
03E9CA9F6293EB4B8886F8D31C7139CC42A659829BCD60A999573999B078F912
CA92839471E68D62450265B1724FF37658ADBEF7570B77439B09480495C69177
9086378C8A0D81FB2F83AF0BC516AE5D6CC44D2985C119A5664AC9F8E2285F3A
CAEDF7A2C22E23EEE66423C0974EC6A975AD982E88D4DD68A4DB3E82B51D5111
091F5482F5FA59504F8AC286A033EF7C1C719C59D09EB64CA74A512741934F86
3E501F698389631A45F67330916E95B7B5C9546FFE9BF9E137DCAE7C072FF46E
C2F7A7F29875D4DC819140405293BF725C5AB79C3C8BF9873BF70CBC003855EB
C6AF8820DEC6050EBFFFD1188FD4E92D3FC1F5949C2F6FDEDAF00C501CE8D129
8474337249E8E18BFA2FB0D5C4EDFB1BF4E08994AF562BF9CAD195BF1F3312B4
ABDCB20534CE9E3D4FEF4A2512A13F138159D0E2EBA8B76ED9737BEE4188A429
8D6A7ECAE89A9F6F5CE53869C9B1DC7A4E1E8F9869A776E1908B152B13241E52
0F4AE86D46EEE6D2EE037E9B956BD542D9B875A1AD5304B355D3C024AB1114E2
234A7CB5AC380B1B20CC7B4A445DDB03596F5EFDC03C3EA891F67CADA971077F
4502F20EB1480AA7894D8E94639FC158BEA6D1BC8C330248D60CD5C593BE4886
B0B05046C51DCB4B66B65EACA8763C1DF87B65E9DA312EA82AC4369CD7708E9C
1D3E6522929391A447E929A286E178EB0177AA1CC10AB41A3D38EE1476A70150
57767BD78B47221AD50F75A8577F2000093F55EDC6F09F9AC9B2A2A7656D878F
6E397F8CEB70472E183457DFA97761330F066FEA4454AFEC81170F40C2ADF3E6
452BBBD2A21B8D10194975C35F913CBD381177202B89690EAFB0B45BBB099B6C
601170FEDACCE807BE113C5110D3054EC868F17F5AFFB74202F5ECCA73649EEC
906BD0C83EF0F62355CA275580AAC17361E68D79B52B6C9A21F27A13A55FA7CE
62917BA23EB6154768F808D5284354337A43C1B320A4770C575CB1327FA3A5F9
F95A4211EE6FBCA511F111917AF69AF06B021F85A111013D9D9254CA2A4A818A
A92D63E3982FB558B815AD718CC5E605CDFA4408D12C63178A54FA0A5F421A32
60A6144BD681A630BCA945EF5B3BDF02611A449A934C283908A1BFEA75452EB5
56CBC3A2C756793B5EC17F1277F1A297A5BC3BBD208E90A6D8E5C8D5EEF24E48
32F204BE6B0889D9AD18F01C7BDFEB553AFF6837D74BF554263DD18CCA60AA06
D5271FC545E9619F978A9B90DDC6E7AC41E9FF0E03F8E76EBC340FFD1ED39990
CBFADB12AA96D16B17F6F5682841F31CB5A961B6DC12AC22903B384B0767F7BF
EC63AF18D1C248585B74122CB97DD6D5C415CE7C48D1257F961909CE51AA482E
1BF5953E88771E7B725379BC76A035C799B090C6C6F0798AA3B209246A37FA8A
FAFBA4750A025280C5F551BAF949EDF6EEE46C0A156A92C5062DB40ABB99EF80
70489EAAC30F98A3D250E5F82A58A2F51627CFB21934CE02113E87D8C9C5A998
7E460C49ADA534798D0EC64FA88AF922E0DCFD79F22FEE7E422ED71AC9419D1F
52BCC900DA73C91942B8FC0B5D8575997D6B8AF54F1CF0993A5EA9A41D2AF1D9
E63B90F43B374D702B78ED4FBEC2B8D0CF76E8580CB687225D4AB604FF087810
0E338B5BC06D2FADB6371BF0AB2C732EF75D812AA48A3314C62781366567F59D
7061C343569CE15BE964E32BC42F61AED54C970F4A8CB57817FD46E1CB25BDFA
9FE51A58F853609063687DBA87C85A42A556F09E653BC57E1CF02F7CD123916E
E9EF8236EC73D653192E99A8CF35266360803A6405ED8AC00EBBB9E2489E1AE3
96F28C3C8156951BC116F58CC59577C35DD6FDA3134F386973145B016D30B202
DBB6BA0B3885AA17837CFEBAF796222D0C72AE259AD5470A47BD2A606708608D
A6F0E93EC7DEF508F204392A9066A44EBCC6D5E0CFA35FCDBBAE7A067E544EBD
58040901F03C5D62652557E531C02F7BF2BD2012DCD722DC1B092F916C4554AC
EF8F60827A1BA86981BCBFB84FA980E06FE47653EA56E7C1D6B3E2FC8ED9C2FF
4C36ABF02D0F1D0679538F697BAFD829244AF2BC96E2A58613221E0BF5421DF7
9279756FD3EFC84C338472F335D806C61FCB68BEF324FB5355B04A11D43408DD
6A04154914C00AC95A0CD7DFF736FA42B8B871EC1EA6A7C2E6C5ACB12FD2BB2C
A1F53E570CBC1DB046789902AE97475400E365353EF5AC3082F77C9EA6688D05
9FE7D89A0E70C51581E867D85758B9F31169F7A357F80674C521EDDAF57426DD
28DBE137E51F2C4627F6555B2D7C3AF72212F5C8A9DC9174A23DE370C6AE6975
F0CAC223E29641E6C87A1E45459DE0B892532CAC61303F3790635C6028012240
EC3E78BB480759B627C894B15A7A27673EB862C6338136BF221C1F7A3A4B2E4C
B3E154A885A72B3202BB5DC85E22A26459FC6E75CFEE106ED5AC16263C9B5316
55B15078A2719AED92972CE5BA5D44E09ABCD7D25F633B0D9018F21A1C2FFD39
338E92E60D9BE70DBE81268AD9808760B4C2495AE3EC6EE9C4FA7A84B6AD63C4
1D747DFEDA23D5BC9CD38171E328BC16F7ED666F7BE7B96D93BAFD455252DD5A
49EF71EE027299E23A7598F4F69747AC3F424C6DF42F01F6E4572F06760AC9C2
9EBE5D2D06A4A438A6C4ECEF843AE26259AFD31B18FE3A48959B8B99DF3860FC
815F98B9AD85
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB734
7FF6E9BE216CB5DE5D367EE01C808604D05C01882B8F9E809F175E7E2CACEFCE
F9F8A8DCD5A8D78D4FAE8C86058D76D7D87C9706B58EDBC0FF8688D409030699
A9400BD959FA926E4D0AAA99AD3494C08DB4EC5579BC2EA34038A1A6D39809B4
FAD09D001F9D8E8C75650D5793750F8D2CBFC7B1525EC6AA4CC82EFC3050975C
A531A5D3F7433D6923766B1A50FDEB0587BCA6D9CF6A1B1F79F9CE99DA1846EB
8213E9FA16AA4C2DAEC5EEBF36E46825D4B6A42039EB17086C45DCBCF2DC4AC5
DDF57413350467EAB2113B0263DF4CB6EAB7DC18EAD06300E8975FAF42C2CAB0
BB2665D2F48BFE234A4920B74A9DC82D26722B38D6BA636279A8B024751443DF
3F7ED9E2A31FC1F42329625FBA29E4CD5A322E361786EC222D516E05734DD1EC
682091ABA2571DD76274D1F3CCC433F896AE63DE924E16D4177B3957D992E01B
0E19D074858D2B3E85C11D773D173D941A27682078C4C393BCDA8B132C724D69
28D0AC7BA826D730CB7E1CC3AA24E3F2FAA6053B5AA7C1814D9EFE497CD26728
C1DDA686F92A8661CE6E429D67B6236D4D47BD0E771F751225A58E9C06ACF0F2
08EFBB8D15491CA03E068F5239BA259BFBC0831737C34C54DFA927021AC58EEE
FF10EF406FBFC6D554E586BCF89071C9EB5BEB228C5A1BDB415F80A4CEA159E3
E886BC531628CD9FDA87188135B3D6CE0F2CC7F129F51AC088F0FC67D0A29824
37AC8B4FE91B4E433B8C3D09B69F47578A21605382EDBBB8E07B86FE7E3A2D34
D9FCB15C7CC6521103333C696193FA77BF6B4ED6F01B37D2752C9A5F0C21F16E
C4A01E067DB113812FA3377508BAD0A7CFEAA913B935BA91F1682C8957F0892E
250E98F4380236E11AF484E2FD67C1EFF5F8CE1D9AA02D13551FC49C93440828
9362F2470B36B6DB7C2BC1286E03DA735F5DEF3918054BA61FBDB558255D32A1
9BD4FE1421C317E0A2FC46D31241E466A9E2BAB1B883758D6108617E2168696B
3330B1FAED84B115ECD8FB4DAC3560F452123516F2CB45258556F9DB9297D1A4
12FDBC6326DD132737B3C88D22F91A19C55CCA6ADE38B2200932D47297D6F208
ED739103FF9CCAFCD6B3EFF6272036D9AF39F2BCD594F2AE84A08F607994D4D4
09B391FB47A79CDC8074118B3BDB8E27358542F0AB85C8F79A994CBEDB6B3707
C715A26C0D1C1B2C82CDBB4346938F9796F131BBF58ACA3A3F82E8291701D66B
FD6CCE4E26DBFC8AE8AFD61EB7203481860C801F8773BAEE0C20DE365257D455
6DF56B66206D59D3823C5CADBB4947B0A8C2630C31E972105ACC22513068B98A
6E1366A732962ADAB6632B1ABB2CCA1B962A72E0F4755566AC04423CEDE0EDDD
1ECD7FD634CBA956CC36903B8876FE156618E50E2B9181E91451FF452F4E71A6
E35FE94B1F669885C2EBBD15E463358D70DE7BC66C8295E4EB4B9B82FC676F41
94B27EA5F07C198477332690E2A028A0657073CD67D2DAE0F11A64CF67E5257D
75946E61327C139595EAA656F016A26B5E61660EAAEC241ECF953E2917759F3A
1D4F524D164D33647D5874D76CB77FBD5CE59C6FB4EE200DEBD504EB46D7CC57
F9965D6C2F36AFF88F9FE9C8D354D1D4310B2C761525A78CF7BA24A5FC0AE005
1A50A4CA6C62CC09F19C278138493DB0B3AC862BA4BF22A6F378AE0122B74D68
318B65644AB92AF152BB5082F5751D0836C68507756AFE0FE8977691CAF007D4
56C440B94CF9F1765749C6E635CFB1806FCEC6D1C950555E66E8E515312AF139
0B8376FF9545EE95D812E13ECD7497B2A8A03CBE63C527B46272FA4F4D9CF0A3
278D98857F351945DAA01677BE89EA7CCA5BC726AF1BE29B1E0D30A26E5B1D2E
1A002B8B81AEDC748D195114A9B356341D3E6856BD157FC0A6BCECAE93632C7D
B07A0774A96DF242C1B22B7E517BE5ADB010795D62C4968D1DBAF3DEDF89FECE
C20EBAF948F66DA70B36CDCA72FF984F1F1B308A3C49C2BE9F11B50FDE68F827
CBE099F07A0C003399590D5E882105065F0E9A674C371B6E74094DA3BF8C58D1
08AF2EEC20308F219307C670A0EC3CB2CE2574F52DE948316F7881456C1027E8
1618327090916B7FCF7EB88CA03E44F9782701995CD73383B90D4C1A5BF8207A
11B597EFB19DA1EE7D125D7D9D89CDE19FF3045E7CB573BBFF391D59FEFC261D
FF93B08137A995C3E57DB78755EE81AA08E32E49C7DFF589A69D24BADEE82464
3A8F8A0DE0B69C89E5462BD416F0FB78BD2FF665005A0F3A6D0EF805BE57989D
023EF0E2E5178B9DE652391638299FE7AE363465D523522A120B84526A5C54B7
E630B030C87A1B4699D58D1CAFF1FC591FE55FB677046A1D3AECF66FB21E3797
42C9FC6664A788642DF57E049A929CCAEAE31DBE164858A973E88F32B72C9E36
CB824BD206BE4C6F7FA5C540D5BDED5C406C6820A57CE2C3F773DCBD429DC151
5A5DE25DE0DBD16D6DF0D65058E8F67904428C3FDED5C0FCE3AF659A5A3B90D2
506240DEAD0C4C1A7FBA8BD7434884D8D0E09369F0E9277C6E9C0C6D763E7FAE
80D70F8C60940A1A7B10FF68FE702A10DB6DFB3FB7EE6722B674161186247006
D2A18D5FDD62008709315DE8886885ABD4CCF8DCB6D9A0A73B5CFCB725B5F549
579779B5C9ED01C51873643285569E756E2742E7FA45B196761CD9BDC01B01C5
7E130C4D088DF14DE05D8CDBDD1667781734356A891ADB1C6177A3F653DC4C73
18D56AE62565B2AD1E4E226EACB14410AB80228674ACDB2A19F60D903020A92B
7D7D8F7FD76D0316E170941B27D16A259E7864E6C669D5D79A5310EB07B01ABC
7310CF1CF0AA5C922ECAB4AF6C4B421BE9492B1544968B4C4E3AB73946C4FBF6
A845E17D2C50F816DA28414732D6E0DAC9C7069453299D41FBF0D4A026730AB2
98C8C6BDE84998B1EF71D0073B783B56F0435363EED630B3B781213A433712D4
F6BA8517BD88D53CA69F3DC0BF2021DC70A4CFA793AAA76D27BC94FBDE0FC930
B72DE912621587CE992A6EC04AEDDD81496210B39DA9160557D43048D4CFF3CC
066530DE3EB49F69A9EE5D55199FB5F3509FEA678C601165B51BEEE5601617D8
E22E833313B88D8AE2A77CA805E486275C942B27656ED5F1212EC701A9734FA6
1EDC910546BC43D1292C5724C6A69F7AFF4E4590D847F2B43530CB8083A0D7A2
15DF1A56FE5CD82C854DAB57B08183E0157D320E179A4D2FA18CE5BC12F9983B
369EFEEDBCE7B3A208CE7F8DD2FAB32A547C8A1F3654A2BF19878D1FA7D7944B
08282EB9B5DCB2F592FC7ED0F0154B514DBF2E79A701445274673800E1EDAD59
E7C11EA17E0797544EFF99CC999C5841117752FCBC16BE42BC594EFEC4C0CBE4
1CAEB99077A7ADEEAEF0194A3DE9021425046064DA6A5012815BA775A95251D3
91F0D76740FCEADE8DCAA18C1D060AE814A65F825D28EAB7245EFA91868139FF
5B489C62695E66161D79F13C53C2AE63B2029622250F8511D7E5F9958D940024
AFE030D4AD56287F671B8A863F9F3F62E65BD76711808142402E53DC7C8BD0D0
5BCC4B827F0B7B0C07387107188A7649D8D143708184BB7491D89FE8BE20C7B2
424C61D29E7E442C50D057DD15DC526B66B3EAF6CB313D34945FBFB51F11A9FF
340D7848B88E9421DF792D54A990E7264D075CC921A13225DEE5022852517364
F986B7C31047C11675C01584DDEC08311092362DE47E085AAAEC44B42E363E78
9338F152C0357EFEB1902EC9D420221DF1D2214E0AAA2DC309D388ABD43F38A3
6CBA6C56604E6FCD38B98EBD6A587BB78C9B65F2D96DCCFF9C9464672F1B46F2
40C810E978222534366A968B7F38521992D6568CD4D3C1B6038B2CC775637F5F
56927CDBAD291F94875004414F2FC30E31FFCC8A111060A154331E158ED0332F
C04FDDC844603EBB4DF40E5C30CF5071D3609B043F41C3AE1FC7F75F615E19AC
8B415F72F24F27940FAF167997F0DFEAA4DBEC5465077B220DF312D335082705
2B1C0C007562D7AE147B7D1555AB179432B9851597822659D8F4FA5293B6837D
05DAB2C9CA1194D0F9D3642D0037496EBBE2E4436CB130591E93CD9B5FF4C3C7
5463B6D5C35FE162FC99B15AA76570470BFDF72A80E566161DA5C2C1F2B9CD53
8A5B5AECB86D69B42952AB53D41801BF67A0C77DB83F0D23828942946F5EFF27
52308B846E8C623FF98E9DE8A89A9ABB9D47D548121F800313648C0406BD5AFF
622AFDFB92669F537CF252D532D6F3CB7AFFA23D12B014E6B462DA3D6CFE830B
835270D144DDEC907CE0F42652F7147520B43682D92F4FA3D13CDBE46065EF1E
A3AF758980B6A46D2F307228BE2BE92DD3B3BB655BFEC86CB1795DAC74B70AC3
8730A7B27B89FDDD4FB9C27301680CC292A2535F30F2E1F1E30AA7A111D5172B
076C2F542633417442C207BB3F91C397596D862F0DBCAE6FFBFD7772A91F6451
F6CA0AF37CF8A3520E04ABA22DE34F6BAD54BB6D2EEC896931296C0A6CBA8D0A
2766FE329FB1BB0AB03B1C21B0795391F3544739EA4DDAE1C74E5CE10BD517D4
45839FDA8677ED4045A0E34A496FA7231648C214C61C22151849BB466E5C82AC
03174E8769B3C702C395E9AF1A21C2F5DDBCBF527B3F08C51FCB56263140869B
46D6D78B30840E15D818D535DF199AAAC19197EB7170903A25D97E73C42E8A8C
0343972D1C9F2CFC89E61EA1D61D924FFD9E94B76F6E136D5CF15071D44A37AD
917073AC89EB38847FC8FBCB779E431248A7F9DA257C61BDECEC4D208689B0C9
0FE81A4A90C36992E19BEBE8EC437C5AE18153223015EFBB1E5430B2E320BE94
7DEDB7C214FB086FC5FFD2B18841B85FB07BCBB250A0AEFFAC91FA3B640A44A8
38D84E636D86861F7393AD64F8B3E1636E84960C30CC1494D2BA6F1576F98991
6814FCD21CE9D404BE5C775F03DF6C58EC1E70DE806D4E50997A09BCF81910A5
77CF1FE62F8E6CD4D5B2F990FCC8A4095FAB2BE33F08A98E128D0635E86EB4E7
DD0763023B2BD38F1EDF979792D878446C3614C083F8FAA97B4317AC63FF9F84
1FF7A8023AEA483459B7A7051858F1861A623A19E3534FF12718C838CC60796C
2B3B5271FFFCB21E9C10887952F4C4C95ACBAEE589652330D5E9108C6445ABA8
72DD793349212E88354E3ADC5B13345EF960F33F61031812D848897EA60E2891
3CBF18B5D098057BB2FFC239317F0DA9B1796E5EA3253F731C7A53FDA9410FB5
BE995A7D550CD1A52EAAF32183B3E6B35457A07FDD3BAEFA255AD47CEE24C28E
F00C9A009701216557C35939C78DD56413E240D3F9C70A490DF91F49CD8EAA37
E7EE8168F68674EC02E17E4072FA271A70057EF69E1DD76CA60C1D87E0AC01B3
6B7DAF7EDB37E8047387690A62AFB02E60C257416AC19DC5BEB6BF3B4702F0EA
C3DC574744C1CA320C68F42C348220B6BC8BF0557C09CC71C59C6C9CDBD163A9
7677183550E09F80FA022F16C8028159E954108E8FC7D8FBA06085D3B54DC498
8819C6A968407E92E5EA7899624959FFCC706194CCFFD6CCFCA991B870A03B19
25E0A40EC73107545E8914791E6E56010C90689C332F4515D913A8433C33E6BD
59BD3560B38F9E4E366A8214B9F67E1BABB069504235A8FCA9F8012C76F0D656
A685815848FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBDF6B6D329ABCADAF9C19EAC5F36E1D210044B6EE67
81817CB502BE94904916531564BAB2A6BEE21B8195CA8C2C239AD3F5E6367118
DE229885DE2FF1F9AAEB59A728B7F0E9CD9B977E0FD77C2B28FD79C68B02B494
2C1BB525143CBC8BEF7F9831A0E0A137ECC98C66873C49DC522636D5B7FB6EF7
64097A17DA725C3AF90CF297872CFCE56CCE1582A3A05CBC51647CFF73CDB3B3
8CEDA174CA001B312141BA6CC5B99C850C4A730ED50DB3F2F775CFFA46A74C3A
092A7D5B7274DB52066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0E0AFD87C
47C937209B3DDB4F2FC6DDE67D9ECDCAEB8255FF96F06EA28A98D40DFF9A4EB0
9326163E0BE257546798FC4EF75EA4F294EA8496D032ABCB2D78109875A1E454
EF28C6D432330FEE56133F3C323F865B46D03457D17C81740DAFE000798A2787
814333C50AABB6966275AAE8D8CBE9ACD7740ECA4A47A985E2E16052A8C0A764
66650B00DCAF38B8C9332CA8DC2E6F45197653F5A7DB9D25F0BA34EA859BF991
D0354BCAB97DA3AD0210C33F871D66D40597E4F20CAD0CC21D2C3A11820AA663
1D8DAA61F415A48B0F77F4A231F76CF009FC101B4A0A95F9E4E435043FE03050
AC8844641B1DD28CF1325D3CDE7E16731A336535A8231320B310E52436CC4611
8131021402F19CF7286586D1DE7A371B537C1630B06C33F7273ADF8801A3A75A
21C5E44E033F2BF6960992A383636F6E73AA9410881AB9BEEE451A3871DE4536
ED469B863B655F084C94FC6DAAFFD6FC5D5B523FBF1058A8907ED4383E343147
A45701BB16F608B9148CA790F2B232A67E71C893B96FE305B9AAE0C5A246A6B1
8E275EB0CF680A06BB8AAA21828F98DA44728B485BE2CFB3AF841623A121D2D3
EA73BAB53FFD35C67AC9C3B91DF9A4D1BF35CA6A8CB8F15F9144E36E456648D7
54560459B7CEC323F8B488B6F5A8EF8D69FEF91E13323FAE6EAAC2E5ABF665AC
E1585E331A8F8B5AE06FF085C1F349215582AD71679D4266E65DE1A3A418E02A
8BE169C5D0B120623BDDDDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB723
ACE8B379456632E7FD1AA490E97EF1BD458DF08168DF0D73A1817FDF25DB83B2
72364E00602BE904C3104E28F1BC97F954526ED470061A1D580BF1F0BCC7FF3B
CFCDA3F50A2DCCE206FD51CD406098F09718B87F4D3D2A68B2366102ABAD3D8A
BE1CFB0A9DE45E663E52C1F8296D44549A5ACB293CCA55299C1B7FC3CF0FCB89
4D177FBBF1DA7D23111F9CE050A46D17DA14ACDBCBB6E7A547A5C29288C628E0
8F20AE2DDC41E023D259FAD30150CBBFEB1D3DC912991825B88393F92BA66563
61B8B298F5AD8541C707E88C117DCC0D93D513E3EF946D3FCA5B2C139389EA1E
17D5EFD54A58829D95A66680C9339C7F2D5A32252668776C2D25F4CA2B2F4469
CDC1D3648EF2F9569EEB91A95B06AF1B105524D0399B1BCE69A7FC64C0DD2326
B351F08CCB96F77FFF1961031A81A01220F86251A0A0C857CED149B20C1E9544
784DE4B5CA81DCBE03C2521964CA6D2D249929BA4C2D6643EE070F391890241D
7561153358E44F4754A1913957458FB78C6ECB6460A281A80F502523BC02292E
1D0EA9D8964E0ADE352E5C7E82DBAB63CA3B171E6A9AEE11257AB2DF361B2AF9
5849F3AF9E42B66361134916C8FC32E3D7CF21012FAAAB5E2837E315B5547BD1
FB64BE54A05ADE88FBF2D6B94F12E4EA3A9BDB285BED8323998156DAC28DD4FF
A619E7126B864943EF75ECEBCD0033111B4451A9ACC99D10B2322E42089693DA
081DC876A8168186169D71BB76457D1ACE41005A314344E385DA423BF8B104C4
3A87080E37D1D7305E7308D2A3984290DA1F431FE391C16E60AE53C9151DA7B7
2ABD919C5BE2F0FE186BD6043C9CF23B9B6C2A6176056CE5DB4AAFD345FB1CFF
4792BD162749C3142978CBDFA53DFCE348FE4827947CDD08A647D93504EA067D
21563F33124B63BC44D8E6C03B4E655BF2A7957D95FF01CAE1DC020E577AB8A4
EE680C5ED8C8CB4191E9505B336779DFD40DDF62F323A4622EBB2D09BEBAEE80
31B0CFF132F8AE3AC666C85D86A25E591E0531A442F63B6D86590198C5957330
A3FF5053D505D1698DB2175A63130FCDF172B811333896DC81CF23FABAC0975A
C960D4C07E4AB64B360AFFA4B589793BC051BBBF440365B4EACB0932EDB316D3
52B4D816D717AE899B9AF5487B7FEADFE2B7D651B09FADDB2CCB10424212EA90
16A34634CF88893EBF53D8D282F6D8847358A6856E3D6F3B11C1F343EA1AB3E5
96E20D67052F9107F2A18F70ADB7D0125C7326058030E2B5A9E5CDC20F9EF9B7
CB7F1D174B2E94953F541C3B84D43365C11B5470133F24B7EB6B0A4C88BD415F
F70F0BF5813D54D384CF892AF4BFEE6C45D4349305256ABFD5523A0CE70C4E6A
2E6A34DC95A52D4F1AF404E211AB3D3362FE2F81A38F80257890A6B6D9CDBF50
68CC6B6E5CE804B7463204E9EFDED7776124F9A2EC8C8C2E8D9D06EAD8954E85
D6A1E672DD1096784ED2206D80192C2787656B2A83D7D667D4808E9FC8F28213
E5C3BDE4B43501482B50DA21111B76580BC4A776DD86B46D526B0F88F5D96B30
B607DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CE200573B4F25EA15E67C07A
4AD81B3CC862A675AD5B46D2B03929758B9138A49391D6F9D2F7FDF792C5C06C
1E530E96FAA85824C39E398363346E7C2CED3A99469BCF9EBD0491F249787F44
18A4A802B852FC51099532780C8F8B7409E940831CD6D08A28C8C9F9EB2C09ED
1C38C34B695E681E57BFF5EF1088EC186353B9C4B21D7A86F61DC5FBDF3F5EFE
F44E17D7E788181EEDD08D432C97B7CF7BAF9833CBD71A5C9C8207965CF783EF
CD286C4A69B2D48512BA6F67ABA560FD903432A3A9A54A710D942F8A6C4128F6
5484A823D685E103F25E1F42FFDA16D4A3B4645ECC5F4CE312311B641EDE7B07
C21A7FD2CE803A205B482B03FB11F795AEE3DFC6405AD73520B4A78AEEB96AB6
B0BC37A1713625FC6FE892E4C2476717C6A77397FB210D86CCFEA3718EC6D982
C26C96439392577194BE04D971C721A76A3B09ADF83D6F3FB82AB1D7E7359826
4523AABF9FA7B177315FB05E8304A43319C50BC682088D57629592378E21B17D
D79045D0CB167BEB8857F344D54EEBF46A3C36A4C792D1685C8D2A2CC5EB8C06
D81593CDD9FA6B3A09E4B3F5007A5C4CD14DE469F38E0F06360EF0D8809502A1
6F712FDA4C681B2E850B2C6AF698EB8100A8847CEAAD3690C5D73FC232347B4A
3852F42E5B4D66ABE1553D2FAF26EF405C4D00E4DD9F83370A2A1FF8388F7B9F
AE2D16C78DB978CA99B7CD78F3DE751E5FDD77E6B768F35E7566E858B2CC4E9D
D3BFC7614951CFCCB0BAA5F85DA68AAFC85A7FA1C19E2004530E8F736DDC5BE4
E6F286D27D731EE30D4871387A7476DAE2FC80A38AF1A0B3BE75E98F6E712917
BE7D4DCC8E5F7C5531DC67B70C5D841AF76E112AFB947365B17DDB1A85B9328D
5BF14E72341790C7D753E73571F3FB1CBBF390680C8614AF3F36DF5FD7E36597
96103F5B013D89DC6BB39B51F230448C09073A73F51F7E4AE79246673B080001
7C60791293D5BEC043B961C52F408C0C4DDE1AA36C332BB784E7C159A8AD8558
F0498638015C78FFDC3100418BD1CE83E9D540C5C7F066FEF89D9F1096586FA8
8B76E645219321E41EA5FA846C05226796D86CF4415C5B7136945A7BAE80380D
6CFDBD82D34A78EBD78B3998FDC5D94CFF69DD34A0A93BE91F9745A63AFEC351
6B02EEC5BDE3E09C2C63CFEEEC12351C5B069D0B8C6A16A9C18890847FE92008
A5DEB59FF71B33DAAED2DEE10380BD051149AE056AA2B7755C4BCE15B185CBF6
F362C146A2D2AB50D6835705FEB79025C1CA73F8E589707FB215F7ECDC89049F
C5317E4517E94A9D3E5CC7DBFA30295A8763F1B4A5CCFFD4B7A508F64FF002C8
332CB1E5505E7640BB2ADDCE62E56BBF35D257EAE99D627535F8E5ACB4A77C4A
614096A284A278C9D194AA32E3C58F8D7F803B5ED3382290691DBA3D105FFA49
D59C844204CC485B2C6409258DD84A9A652307B7EF8B7DCBEDF2FF5011A06D5F
3FCF98C8CAE1F50A8D81F244A01498B59AAD06E09E5C8B06416326BC9E7E152B
DA1C4D030F5FBF77FF2B931C9FE64A9AA6DEFFBA6153C4A2E04748B104D2FD8D
54D9AD246C5D6B452AFF11328F28A30EF625446D346B346EA3350F75AD6D546A
A06A2D78641424814F2BCF083E0B5BCC7BFF6D08F61C9C35814B17D84CF28A39
38EDEE01BC88437393D604FB707B759DDC5C6C5A4AC9E21CE0ACF1C02A9B72F3
C264E79717A5EF8237CA9D177321F9F6B14AF21276B0F2BA263365534F40CFC7
F7F2350C62A192333E15418156EEEF92AADBDE4FF2094B444A1AF803E9EA9F97
4327FE718F7E50777BF90A75073302BBE80809A0E934D63F193DFDD2680C68B3
01F3F440B7ACF7F73486DA4826CBD2C1C82926FE472415598E1470196F65230F
7B80B54EBAE4893DB857935C81CF7CC61260CF2B227DED699ADDE69F0BB3A0C8
69D720DEE0FD278EF3FE724AB849B4CD288D6AB731BD094687B76E2D4E16BFBA
C62ECA4C3EF29948A14B133FAC7C61DA6E683693241EB0CBCB1EEAB6E939167E
7D5D4F2D6944A68175A656514425E96DD970D81D4DE19450956E25AC33EA5F2D
B7978E8581B39E56E5A0FD31A849D3AE53F560771D493F83C8EAD6D875F8B1D7
A0A1EE3766FB9637DD6898F678844E4A0ED167E25A2A51D8331A045A4349F7CC
8F1D5D180FA2C10BB2CA96A7BBAA2A7BE60CC0152340D9B5D918247CFE6240C8
2AAF61A7D3FB6C48487185D766D187F588A061153A631D123B037B74F7F7116D
10592A3BD69A4FE8FD49FC9C8914C4A02DCB27989E0752A84FDFC5ACE6774BCE
7CC77605F93ABFEBD803E01C35504FD6537C14C426F6F84DB84A549211C1570C
DDEFE0028E125A9E89D8AC1890E5580074E9FA4B87601FEC1A6E5807332A5B25
37EB96BE26E0342E4165D30208448C93177B6DA960ADE0663431603335A8DD49
D99E769BD73857E4B8A10A436108F0D6B87BFF46E7E197D8541D72B9E0A20459
3388E8E516647BA8DE567D174EC90945404C580A08E40DA2C7842FCAED2E3777
3813AEC6F95B1351635D8BEDC382E4E0A6FC3A0C6CD232E26BBD455BCFEC7EDE
FC2B2D6C7F0C18639A13E6F3845521A2C5536DAA1BC807A135D7AE5E37DADEF8
D6A3AA4917F2630E1A57771D1E94A269173938DC242F0812442BE5650ADACD7E
601A6BF46D57B576A3AB64998A45B8254494C5DC53690FAF7F415B3CCDE7AADB
CF72697BCC9D14678F555AD63F2CA0FF6BE3B8CC09301BEF5ACCDD50E32485C9
4F7D4291F449E017A00E84DD26D1356B116DF4425CBA9757564C25A956EBA242
C7786BA7372EF6C093D3EF9D9BFCA6138FEACD5E0E0D21CD6BEE84155870EA37
05D3D364B37D0610685B8577EFC6A7177E512A02E4681019A2F1C34069E2C1D8
881540047B466EDDA8610C578650E9B6EA14BD49F329D1C66EB4EDA345525FD4
FCBB4E5CB711DE81DB9C1537F4A4CD704E8EAFC757116FE3012E01AEBF58488C
4FC28682534E57DF995F87B37C537FD5D25484B3B0ABF3FB8D48D04F98492972
699B5667C0D2D206F4785EAB438B12590B6EEA0E1A19CD139622317F5DFD2EFB
D8A02F137E7C4FB2B5A8ADCA103826093F27AD276C7EBDD514AA351598EF607B
E11D603F92B2607D41C302903248475DEA4E75D61036020AEDB7754226F422E9
551CBEF1FCC8586AFE88F80719C82B41676A4AF3E762FFDD4796342A5AA48B22
8CF68EE0032B1968EB88119A375D4C1120BA73EC097E978C1A3277A9E33B6810
E923D716119A9AB7E35FD7E5081A85A41D0968025443782BD29EFB5EBADF7AC2
1D9B88457317ED0F6CF9FF5A2907997EB273FCABCD2E99512D7844262AACE40E
04F2BC627789E7F09E077963B5017C7EBB3D29226084B9ABE03EF7B5D9A3B9DC
9E20AE49D3FE7B47F0B4C5BE36297E9DA5DB6B8E6CCB0B93C351BCDB705B0820
E139D55D686C7E96E0A14DD999B464B9D996437C978A252CCC767AD09AA9E89B
F322B2AA7037F55F05E547ADB16F56669A201DA41ABE02C6370D566B96C5079D
12C9D4F0FEE8731D378814FD3BB8575A607D19E71AF5CD302837BA49E58F8E0B
FD099D6F0A724352B2DF600A2268B35A13531DCF1743D6557A102442574818D8
E2E330E2FE5102B7F4DF3E4FF34E340EFEAA6C8CE3B066A7C6A2626635CD202D
49907330FB4CA25B5CFE5D573FB3C2BF3D2905CFFAE9EAF0BD6A61595A23B2F3
2A46B578F76FE7027B3CFB43CFEB594F2B05D180DF588DF93B6925100D074E11
C6D288042020E9DFF165186D73C5275BC9638D8A733D3E5905EB602687F0D107
0B27D4919792C03CA93AFC986C34C0835E5EF6A1795816E7C3081360CCA52463
59EB0C066678A94075C9A48FDE4591DA17E070DC8FCED3EA489CCE98D6396E44
A5667B7AD3C4ABAC3316AB259322226EE6A4C6526AE5D9916DFEBC66B2DE12D3
184BD3E12FD234E7EEAB5F38DF634D6D13A5689E2FBF58CF0BD6F3B32A59FE9A
DEB63633F1C21E5441B02D336DEFAB4F12CCA2818D6019FC1622A804C1238FB9
A0A8C6E374C62D397C3D4B3BC97F1CC3EEFB3E577C48B5548AF3928EEE93592A
6CE609354C2D51A2321554AF2252858B32B8CB3397338DE5C961B3AA70DA22E2
4F5D5F7DF0EE62FCD97A409E3AA30836AF4FB165FE08F16214F6DAC9E34FA9C8
6D8E92256042E3E88F696D4EBFE58F65127073AFA078F29CA500BCCEFBC89C7C
7BF1CBD87891D43886C5F8A914D883F38EF4131EAD223717E66736B72EB976A6
8DB4D503F271A9E25CDBDE8F162EFFD0DC69628217D540F8673345263FB59BF0
D7FD22BB800A96B2722961A3FA39B2B4830DA2FFDD7B721978DD641CDF0C0459
1120FFA2F13C74F4AA95AB062740E852B137500A6F32DEFFE1F82195E1E684CD
9C7F7303D3D810D4914B8AF9A0E5BB2185833ED8F5A2349BBABAC94E9F1B99B3
92E7569FE39FC6E8DC70B433B74131B549571402F18650A1E588234FE582EC23
47A9D9D5378725934B35E2E80EB89F4782D8F34A5DC8CEDCEDEDDFFC23C11D46
982BC42D9DC23475C397D456E05B2BE7BD8925D153A515079CC4F3EC104592D3
D38E10A40C93CDE4E2ECECB2A955FFBE9EBF4BDA365A0F41C522044D80EF4616
335E5AF1AE9BA5C543F4A1B5C4BF78895E49CC6FF69C287D243D1823009C3E15
4D9B94338BC8126131A6A4306EB0CE8E5ED397746F08AAA990E81BE87FEA27BC
D1382A83DC20215D19C4ED3E81846A8D10F604E10AD60B635D2F72CDB12CB4E3
0E5BAE26B394E8356F6C295B3A746BF7C326962725ACD7CFFA37FF627F4756AF
F88FF10A172C60310C10FC10EDB86786C8552127572A7A00C9A6E8795A982063
AB978D87BD6305E84DBF237C074120E9A595ED91541B42E478B67C666E254938
BF6A44706AFC1CC092741BA7FAEC0CD09ABD9A75856C0485CD976FCC99FF82B4
A73B2444CB6DE10F277743C54C36FB1E6FB57DAFCED1D207DDDA075A4B8425E8
038116DCD604A412FF23A2FB117C47F69FAF6894363B2114294E66864446DAA5
CE25911215112F268C69FA557DD87D25E83CA0AF91A866DC636196BD21704D54
1B1DBC252F782DFC48D7726661BDF8AB0E5026FFB9B77297F69E0067FDCA793A
1E9E31266FDE21B199969A0D6C120A6621BD68991FD5593F3197223C9950D7B8
CA978D6AC89C5D7D115D20015326BBB45A5A150BD977E669FD770003EDEFB74B
9BCAC40C589C79ED8809DFE5BBE7CCC7F6D6093495DB0E6D60D62B0F2F6DC30E
50EB9DCC214E61E8D1E091AEEF1864ADC733AE203F763BA905BA1C18590A9C8C
A124D1175381EDFE59BD0C37E7F3DE2BD2DFA545A711B2BF58BAB1D382CEC272
0CDC153B1BD1720380BF14DE59470962F632C45DE55DA79BEE02B261721845AD
34384F239A820E20864EA84119DF0B68525AB3089C91D6A134411D948AA2F90E
D6A01996027251032597B9AFA1B3FF320C672715B6FCCE554C22B807A3B343C6
18E5D060218601080A9395F9FCF7BD8F3CF67B93BE909C4403FE3258790FF1B3
FF67F4C95F9336883E481BEAB54023EDD9BB94E7780DEEA577ADA8BBAD57945B
E9186686583FA8B733579DE8AAE808C895A4B1A8A9D5FA08DD485C3B1D952361
F75B6CA0D9B4B66EEE85839038CCCDC8A77458E3291269248EC5989049760592
FCFC8615892C4304686401B0AAE619F7F850A8B7BE0C5B4D1370DD12DEE8DFCE
EA352A32E88742A2D5D53532D66EB3AE461EDB7CC7A45957BC5C6B1992738971
50D990BBB61011C47808B516BED05C8D05C1DADAE8F6D3932E15D629638EDE89
741C64AB1DFFDAD7476498A2FDFCE63F70B669768CC7AB6E79DA32FEC9ED8B48
DEE46895FAEE9A9CAB9E821B14F1A8898DCCEC3F2CC8D87939E7BE15D539B138
BC5CAC9AB89EF4E9B8905961E7C6928B4A4802EE340B1BE67048A14A8654219F
5E55187DF09674F324FAB81E61751AE6213EF1DF926ACD273FE63A16FE984DD5
FFF5F83DD310DC7BCF471F939D0F143540CA685A536CD1FF4DE4FB36D11A978A
1EC3203062681DFB3A2BEBF5913DDD852CE7E52706E5DCF7155D293660ED7E91
867553D12CA559E3D625BBEFBBC4518671B8D6440A282859DB641ED9F940FE4B
6EAC391163D68C0C3A76CBB82A5CA959440D18A5F1861B289DBC399B8750B554
55FCDED45FD58E167824952C2D7A2268104AF92926C6A8E6EF20560845FF806E
502A9D68C8776DB8001F8685FC95EC7EDD60506506EDE0ADE2663981D4C77975
75C9D319B53086DD9F4FA1AFBE7168DA2A50F5F7063127FCDE7BF947CFF3565F
70BFFB86BB5DB06ECFAE2165378F8EC2FB09DB3CA8EE884B5342D4DF3EF412EE
A1488622F560512DD5FCFDBA9199FB43D0B78577C2A05B4D68FFA0100BF564B3
DB31B4D4445DFC46FED61F219538D8185042F86BB762F723CDA26983146996DD
709A239A40BEBAF05CA22C94624084DA4815D56199EC8BABECDF11FC1FFE6726
AE7DE624006CE68A0A5888BFE7F399175DE7D08904B7A508E489571C79B3503A
52AD7577C8EB4BCC88ACBC5A62EA1F054D8C429F0E4559E568C7465E6DCD933A
FC7C4F37904B6F5DFC712EB3C1C003F982B905BD7D67725C83EF7119C2C4ABAD
F13B462708DA8F5C29F60512FC389917ACF73444EF91E44AC1A2D5AAE1CCD2BB
E06270B5A50A2C749EAF88665E2DA3C3490B8B4529805E0E306E95001663F0EE
1568903E4AB57D15D6C78153E9C5533E181B368CA08340FBCC7C464AEAB154DF
C2C08F8C1098BF71196B775C4AB13C2EE4B13948F568CE739D1DBEA0F7EBBED6
B1E29CDAD681F0A0444016A191133F19542995636B1F993002C653D0E082162D
13926D3FBE136A04BC4FCA63B1271C7CD8AA642B13AF7C2E28DF5904959122E2
00ADEB44D45CFE3E723556073465C30981210962424D9BC090DA2B27AB2797DD
6FFE8D8B8EC081349683FC5E1C323236F7159B77E629F307A64B286C02409330
317B4FC830F5415762F6313B6F0D8AD8488BFA8F1FBA7A9E0ECB0CB937CC18F8
2087FC991638FFF960D0D38234AA1C9900C092C16A47FFCAF261538F608C93AD
F044C39BD2A560B752BE17F0E768E0601144B6E3AF224B6029ED2F2A0D5809C8
FAED3FE5F40AC5A42258DC11796E8F834E7FCC4C523B3F4AF3FE3594AFE83C60
5102C08CCB046B807975E69C127B630E8CD6A2E4D13A42A534EC7EC672D7560A
D5C0AB3F8E6F08BDF26AD5A9DF5CEB562F68C8689D5B67DD98A5E00AEF1C2E77
ED22D3BE479644CBE0FF57D5829745A76334B97295BFA4099D149EE93FBCC627
2AF549BDC92F2BEAD105A169AC099700E454C9B0FAAF6F2A73D5ECDB01F1DAB1
66058080D42F90499B415AD8AAFD99AAA7DDD91B1CBE1F8EAF96A1FB9419487B
C7A82E60F8B23313A4F5F3C628A3AFABC5D0922D917CDB0ADD125F3A09CC9568
468579E06CCBDFEDCFD18369F27ABB7F266E3C71144E5291FA4017E674E4E3F6
B8002890F8CC804495E9638B25282A209E9D8BBEA3ECFA3ED46C2DBA5CB468FD
29A4FA8C83E4AD433C084D0AD5E2164D50C910B8CFF5F16FFC043540E044AF93
86759E047307A965F5ED38334010FDE34C570D7BE76A496A58242F51E7321382
AFF6EACBDC8A87EC94DB4BBBB4DE6B4C3AEE41404924B3ACFD19DE22BAF340B6
2D5AC2E94108A856F807519A9E8D79AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B2165E5581F3B8F165270E90C727DB9E454670D51D7F88218D4E032AF808D30
E08C4AF6C4536D1C9FDBEE7B1B280A3260E9DC22081E65320BCF3099187ACC0F
680A66A818B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28EEB54292D44
D3A7CCBDBC747B40045F68CD1E40099D9BFEC73588593FD61E5A0DC97EA2E4AA
2D6C07BC2971529FA865E7B124F886D8AC8881CED68C7E9ECF4FE402381E958E
99FEDC664150D66C7614AAD9EA02AF73118B778DA4C7012428ECD18DDA85175E
3CE67FD4A6528AC359C73A371C859E3865644E0FC66933CE0D60F86764C1F529
293EF880D1B9147A7CAA0B6C48D3ABD53A40501212E2C906E04EBEE5F8CEC3FD
EA36B201E774592CC4056B2B704D541B1DBC252F782DFC48D7726661BDF8AB09
6903AB1256EBEB0D9B5DAB1C7D96028198DFD7488D9566644AAC54ACC206DC00
F5B58A70D546BDE99255756898830B30F96DE8440B8B6C0A4A50043A59F3B636
DFD4128A45D768BD28D6A2FE2A4184C7771A108CA7C1D254D8E288CC6626651E
D6388A1C711D875943A84DBBC24C1711CD31CCB7C0C7F7B5FBBFE76FF489DC22
9E9D659A24395BBF46B92CDE3C52068336290D74705098D4582DF3342E1E5D97
6C33A4C1B9D5384F70ABC8F9F74EC964592EA3CCC0066047253D42A7FCB3C178
0A0C4E8BD600D07D8A995E5405EB5449AD8CCDFE6615E39270C3A6F3AFEACB8C
621EAD3929CA3359322E25A5E9FF521C76D4AB10EC9C9749EF2864DAAFC2B488
6C6E9E9D214EF74C49E55CD3BA66EA1C024FC80466EBFBDB0F04B473097C19B2
17EE2B77300EFA79F5038C2F8C18609D8770C72525A5F5832E0D2619B8C1EC00
24EF9121CCE324DBD5304CCD9239790F6B0B3DD6FACF052D2E1C0EB34672AA78
A7075C6DB3F15DF83E0185CB1398EDC35E34404FCE1CC6F1EE5E5EC8E91FA2E4
FB940228C74017D2A82AB724012A9DBFF1CF4487E0A932F474ED91EFDF386E7D
B94943364A4BDCAD32202C7F74C30A4646D8726DD73FFCC34AADF0D5FF99461F
3A9DA8509E7EE6AB98B4BB88F6753A46EE901940795D0F15DE5A23420BC6DB59
314AE0FE5C57BA3BF562260792EC1857BCC050B841774BC20AA88592DE0C9EFE
0C9232665F5E893D8500CB57D81CFED36567F652DD43DAC6C32C9548A6F7607A
1F49CA66CB10279075B62842A62135305EE39948429FB62ADDDCA6F84624EB07
1D57E293719487CF5D51F3F8FA688FA1B9F5196B6CE08EBBC0C484315EE485A8
714EB6009A9C06DFAC8144FD672DF548C439A883086F14F419820F312F34B8DC
BDE30E5E1DC183CA471A63C5F45A0225ED905D98AF46BEE7C595B123A580A6D1
98644049DED12F4BC68666EF41ED4A22883CC403C4D9B3656E83BF407D06A0FF
2A0929546000672DD480C23948FBFFCEC3E9374E5D2A1653592268E393BFA046
05EAF9BC3D8611E3607832D6802A336C627BABC4737FC72F8F4F6BB7D73551EE
33D5AC67D413E79CDD37FDB07131FDC420EF525CC0B5377AAA95412BCB80AA73
07A1C978F414458F9A7EC07EB5F54E9ED3FAE75852C3BC7CBDBB5EF23FC98FFD
BECC7BF827A380F32B4934A768F89217A3DC055A807F57BCD3B6AC170C7C563C
C2D2EE272B0674040D7B82B7B40EAF78A6164289A675DFE39DF546A3BFF3244C
90733BA17E4346834B1361AC326E0471866927E3B6123D75DB1F5D1B6A2463EF
171CCD22DCB473B8173E8F9133A6D45FBB5E17CBD0C05E728F7ED87EA484A596
A6A62D6E8252305167A430D56CFE8FC26805B455CAA9BD0A2A3286810DC211BA
4A66717F5EF270A816607FD71EA26DE3B6A58A3A73407018AF73FA75BA8DC8C5
0A59E684259BC3089D9CC68152679D99FD6E52BA3B72784952D6F078BFDFAE49
D3FE7B47F0B4C5BE36297E9DA5DB6D604B29FEF6B211BD4356914FF31EF22D4E
33B72BD8E8261897A02EF8DBC323983FE3080CC0BE03329FB9B408DF64CDF685
AE08E368090C56CC9F59ED573A530FEAD783E1EBF094D3B7F6541DF57D2C3DD3
02EF1A8522595A839214DA56A83FC9AF59940CAB5680A26E061D2F6094584EEA
D08ADBFAD028161A01E97B0A9DFDF088978B97B923495490F7D4F3C059CECBFB
F7F20EC5431691AB86A4502EAC2159B49C1DB34B2567B50D0B0F2BAB32DD9843
C560E1F28340DF37AA75DB61EB4929AB62872DAFA2D4DBC37C2FFC1EF76FA2A6
9C9AC171C388750C9BB165F79AD01EE5ABEBC875173CC3CDE4C4D73E774173D2
127139BF2645040109A3D2D98CB563D4CEB5C030A7D2F1D18874F01B52945FC6
ABCF3ECD8410335AE6CAAA4F72AB17F8EDC3A3B494F3809BC20E03E4DA37DA7F
ABD00AA3330D317A2CE6B61F2E522FBDF3F7D10C8785024E6EDA735590E407C2
CA961F03D1762ABC486E717CE9A1DC45274DF89B6FB3948163350E034A3CFA56
8DD26363E81BAF2CE1E3192849C4397A469C12B20727A4CA38A6CD685E92E3A6
7CB21D5890C62CDA0789E408523360ED8356207629286D48D6529E15ADC93E62
1833FC3E90469BD13AA482E6B4F79EC50CD4ABC417F3BA55D92248B51067A9DD
415F312D653513ADE6EDE9E560BA16573295F14E3289E6301D04E91DD624D25C
17C01C6EB24F8BD764FCDA08167AD025F24591E5C2F51F98C01BF41ACD72DF8C
42C7EFE3A8D63D2276C4236933CA08C51C6CFF8FA8B33B7CCADBEE9CAC7E77D7
9BA760EF4C53A3C983853A5D32928CF1FDFE2CC8A3BCCEDCED8FAA3B94D43153
1499F49D26DB6321F2C415B3480FE85EEE4795AFF4DCBFFB2A2E27F48B2C67C6
CEFAE589ACAB962ADB405130B8BB127D41068712CEB8DC2E7D3A6A0C0C9B2355
CD7F4F40D5891465F222BF72A373F0079E75D9FB730FE225D6B87099B5ACBA5C
72A71670B10959B8E6CECC10F110B2ABC8A3C355001DF77ADDFA843E5BFD60BD
A597FA7CED48F3E449025F5201A3A7DBD3777D601CD43A6E7B2137E3E855BDD7
DDD0EDB2042202D2B861ABF69A14FED1809C269CBA36BA0C7627630A9B04301E
65E08B7BDE43B616967A0B57292667580D72B8B6C26077F84D4D40D8472BE995
EFF4A7D33AC0E31071AB77E3BFA05D65C71BFD6EB789B718FE5F389213133727
440714E9A35976C161A248BB30F0593A9E33050E59BE128B8315F1394A627CDE
24E04BF7B32FE6CEB6D3CBBB378822CF2D66C8E030A857021B85B30886959C47
547CE17DBE63505319323CBC4AD424E8FE128D846B0D835A7F3ECD7BDDFE60B5
1F80862C3E2766154067DDDA5E17650677FDC4BF017E780763E889B13FB2B9F5
6537E77E7BEC314607B404DDC863F27113B024BB2986AEA92215A8015252171C
713B12D8C3C12AC3E7A9252D8056A65A8445682D8FFBF8EC1BDC9F72CECCFA54
30369230078A8DFF6420249E00F57D0096EE45A7C742269CE4100CC195912732
E9E391372CF831B258963C4374298E4C7CB0CFD8C21BA8B556A7D3AB2BE31C36
2B36A6E479006A1615D90A73262337A8C03A60C48C64F23F85A0C92199CF745D
C7DC97E8213ACE2F3916D71C99C312BCE1CB7C2B0249F28C37C6EB3E34DE35A5
26038487F08ED263D8A822DCC53BC77DBAD2747952F08F4003FA6C57B313B26E
CA109A4DF5896256C9165AF12FB491A78EF81E7696532224131FE5987DDC5486
5462CE44C68602BC836D82E1624541FA4CC2935DD1D5B2D70B89855C374A5DB3
2A59EFAA7B39C7A80EA6CAE0F1EFE86776FA2C7C4EF2FEC06E8294A4893F704C
B146ECE076DFCE4FB2BD8B6FB04BDB8EA72D2C4CE24A06C2B3C58C77C005D243
60D365C263ED3040EF672E7B0281012C7935297F71EB9CA2CDBF2E30A8B683E9
49A747F2B0EB4B867F41F7079D801B8D685C8BD073C4451A79B93D434460958E
FBC1E0947155F737E8315268AFABFA3B9C4E205884B4ADF0C259AC744F13A90C
BC25E0728CF06F370412B02585CB54ABD44E9FAB394F22B25CA4CC8F4016F572
1AECD116ABCA49C239ACFBF2C2C7CD5903D20DA2D9ABAF9A8FEBA8AFCB76CFC0
9A5DC24CCE2F3295DD579450BA1EDD6D44314D39FEBDAD84B61CEFB8EB2D4EF4
9E380BC2370FF4CE0F71D8402CF292588D074C0ADFDBBA12D90812D32AEBA54F
E4AC07560BA0E091F80038B5D7034525B274EBDB10D0A51E73BE5F7373503EF0
3918FC4E00A688664BE9EC7E9E154132E1585E972E777A363586B066C17CF431
24F59A7C330236307128A0DC9DE650298EB0421C23B97862BA39E8E12300E4E6
27D8EC039D665A3C03D806D194542F49861CA93E84FF757C56B627F5080E7246
E08BDB454050FDF48AD8723FD22B79825BD2E58531BC8668AACDCFF70BF7700E
A80B1D3CC545DC9B357B8261662D75B0349F5689DDE80E782FE6D7979C72E10A
5D414AEE97DD6FD6F33AE6E8BF2C3DAB0BF069A854C870169EF056EA05AD5FEE
80D736244D75CE65F20AE5233BE0BEC782AE5B29D62ABA4BE9948E84025FA697
13B171273D0BF3A3C7921F473013C85B689D316D3D301618D67712EEDABEAB56
BC495DDF1DFC5E11C1C52C3442DAAC2A74884A8BE0FC32414EDFD92800D872AB
EE8F94B30C0305EFF39932E1EA1B35279C0057C006C6D3ED6A8DC9CB7F255E94
188D40DBEEC3E202025ED76F995663E6DBE16C857ECD78A453E3154191B0EEC6
8EEF75FA3372D65613483068A8AC12789E95C36D9D5AF376731C1840A4E587EC
DDC0F221C8B112BEEDF5C57DD314A8A1DB9CAA8A9D4BE1EFDA818AD83D74841E
C36154934B69027BF6AE2D1B1A5F43D8872B303EBC04AB9E878E6CC24829A51D
6C9CA26BA670D4EE30202D7176C9524D7CA2AB7B9C639CD9CC802AEDFADED506
AF5DA02EF49A73B433B74131B54958F34C2FFD6CD74F0CE104C538D269D470CC
D67273F294F8B839CB23CAADD91ED7C0ED9E885F882901D44FE1ABE31A9E1210
CC7DF6DDC6246536F4921CA93C48FD1C8719E0F2C08DBD5DA29C7215558832EF
15EBA0580CB9C21431AAC0B47FAA0059D6B5333BD9A3FEF6DC92C25FEB7B08C2
06BA0ED38DCFD161FBD84A490786C04073D13F69EFD9118E49241AFBBFB78BD0
35E2B2C6E6BA64E0EEFCB4BA684A5C5CCF4B818838FE48239EB6AD7C3D5CCB46
504A6C9A8E49DAF1908C6C49732839151308ABB320E3CE560CB82B4ACF4476F6
F69954ADB43242045D23FB46DCCFD43BB198F20A855AD6E1A5E60F249DA40D98
9506664C8439CFD68F4F6FF459278C3E398DB5ACD9F212CD70C95BA502C10A1F
9AA45213AD7FC4C8314FCC538984EDC709F20021DCC7556834DD3F66EFC7134F
543BF9748641D597B1B11ACA917354CD7B5811508053C9B5914FC368A5F98B86
5FBC10316F6EC4806316954E90817A74BFFE3D425177AB3C26FB93A62D5DFEA0
7A0C80C0A828A47BB27DDEF092DCC048BD67BEBCE6E128CCAF372CABC047784A
142B64008BD03B2079E1C25DC3E47CB41322DFABD09A2021C9FA9A46D2221F04
316A3D8A521448EB9EB4EB8D502EA24AEC9ECB75FF0351BDE474D421754AE622
D9E2280EF6B0E284DB6FE6E979DDF996047E714AE5788BFE0462515FAFD57F67
42559B30F03363CAE291438B326088D16A6A396ABEF4BDB422FADBA84E0ACCC5
040518BBF10BC140B6E229F6FAD115EB0ECE8AE791EDC71A47F2AB39A55A08F5
7761E450C65E13CE8D473552FCDA484F02F5366164F32488BE3A6176FCE2E406
CF47026FB404B663245AA59F44D421D5B1BEE13DA2881917460F4E48EC5422E4
FFF08462C8044A81EFAFE5ECE0BC3BF799563AD362EC282F7792FFAA2AA759AB
6176FD4BEA46968B458105BF6301D4BF9E344357260DAFD111F4EE15496C9575
7A8A128B63A9CB2CD0E7B44DDCBF29E92242668369DA38C61872763036B9DEB6
074F2B4E790CA66926C1D9E8F1B5C024FD826BD295191913B246B18F3429FB28
1637455B8E485E42682E9F4EC774F8A45C29401B7EBDF03039F113B2CF462660
0B1C7BA96DCABF4133E260320CB39E191970C0F0E81DBEF091E1578B354E369E
7AD534BDAE57A86ED294AB6E397DAFC95B48BE8104CDAEC5DD651A47873B9C3C
6D2A747A6B4FFB90522BA57F8C49E984886DE14AEF6EFE7C8ED00D85D56EC04D
A92E2DEFA9413BB22E11EFCDE22D12306A82DB526AD32CD7669E1D53934D3871
19079881B01E73C06AF09F4577F766FC08A546A1A92B6D298297E1223871343F
96AB693929302FCFCF265895B2FE3AA4CF03FC4D6FBA845117CBE2F0B59808DA
93083BE24D116B2C354852A9E349539EFCD0429FEE14F4BBDB60DCE73EEEAEAF
ADCE90A4A63861CBEBBC0462B0478B67105C4F8F59902237D04C317B48E18750
119C45B5E512B079773C86EAF2406DBD8800B5EA55C4E917CCFF0DCD56AD756F
EDB9507DE3F119C4DB397A0CEC7AA04CDFA8FC1CD8DB431321D1B0B9A3F387B0
4B4CE4FE8E6BEEBE0F664A3DE5BDF92A154A93924112A6C83883607A73CDC529
4875DD450385D563F967B092DC132DC4ACB1DD446887FD058ACA928F5F7B4DDF
C4CD1F76A0DCDED841D8208C206A15B236E9DC5E3625108A0B822A382FB7909F
B041DB194894288F5708CE5FDED76437C9C6CA81281501A420E20EDDF37C34A6
84036D1C222F1370A871B3D3C1BCD3E5933486BD0264B2EA879D91839CA49D29
195775A96DC682C841008292750A376D0398DA95DF8AA168A0A16C4B878A2B5D
561F97176033A7A3ABA468FA39B09233B0805CC77C5D7D66DFE431CD6826CAF9
72D2039D7B9ABA84E2136F039A42F68D7BCD3FDCAD4E5962E045CF496B585534
B010B5BC51EA294F3041A985B234167790DA7BAD41AABE5EDB5F5CC49064C22F
AE603525BEFA21F2E7E016D76E6608F3C1C257AABAC158994C350048F7D2CC30
631798A82EB2327B0037D6B1A206526DEA1137F1AF62FBA7C74CCDA67778C7A3
BDB81A3A4AEEB77AD3635F61F0C0713C04D8AFBB5C2F314FA17A67E0E5EF20E1
BC932CEAFC008701D70A2658568DA7386C52C6E096316C1FCC57968FF9A40693
F59D3C6659E22A17586EF8F2E420C43BA9D703C3B76D31F13C52BC6E1A34AA77
A07C3BBABDF85C2671ECF3347F3EEC9D2F174FA3FDC5CCF0E6593E898C565E17
F985256BE71FF1712563378BAB12E91BDD305C2EFDD261CBD32AA84D2D285C9F
E871F3931E1F52DA932EFFE03356E994553ADFEA35A75FD9E6BF4D76EE5B168F
047E59361DA4E827F89C24548D00E722021FD928BD64CD158132EB952BDCFDF5
A5B2B5CB9610F3CDC16CAC14FFC1696DF89AD374916F087916BBA233C6532A16
EEB52B421214F35558BA13EABF704A003AC64E996C17F730311C576564783A01
9FECD783FF05846837CDB77ED407B279F60AD0F301F633B66E6784FBB14554A8
5632E1AC0DE3FEAE5F1E092F8FCC721391EBB0F6CD9C50AC182A98736A2FA94F
C959CC14E18E553B4297FB8FEF43EC9F59F293550677ABADFCC8127CEAC8DDD4
5CE9782E78FD7DEB9DC4195AC5F9A029C36A957601E5C9B350A9469569B0C0CF
35A9D1A8321204496DF1316C3E8BBB6C5DD53745D8C1ADAD9FAFC2C080E45D8F
8F3665CA806FD274DABA6A35FF8D532C631D0BC9386207AA13176C104D527B03
9453CB1890F7D4370EB50164F07B9C73FA6E3A022986749142F92E2DC5B8DC0C
D3FE27522E90E147CD4238908072C47C3B4A2404A102FEBB173400073C25EA03
5D16F2C9056A5AE147101230E8B709068CE066910691FA028DF04128F86348FB
9A511FC9C5F2A4948ABF4AF1859D3B2A4E64D31D345CCA3E3C5E8D7AAFAF2CB2
2AA772A45276425D67311559EB5DE967CBD6A3980FB6B325FD65A4FC19F05308
361E61ABB904FF19FA7BEE117B62EF4547EBD4AAB18C19F0A661F2B8C325EDB3
B4C272E374A5544E673FB6FA54D5F0968F9F35F1345940E32813CFCB94B7C15A
CE3DC481F8111FFFEDDFD676CA6F5E63DE925CA00775E4744089EE8FCD44E10D
C506C91037C1D31075E73026DE84CA9635BA9045408BE27798576A28A21ED866
FA75CD39AD747A1FED8795D014358C945F31C26697A76D781BD8FB9412422B36
B46A15B9F6158D608F75F24E6B0929059366624148157F8631968CC32DF3E4B6
623400D947EA975FF039946EBD40E7D42FF8AE104B27663FF51528A58B6ACE36
2BBE57B16EA5CA20C991F6E0E0C2ABC7FECAE0CDD85F422BF5995D9097EB6150
0A872F31A131A36865FE021F77C2C3E2096C4DBE15B542B3138331B41167BB1D
7A18859EDE149FF3F07B59EDA5362CDECCBC03A0EE25A6DFEC779584F269C430
1CDAAF910BE6FDC259C4A93D47CD94548AC0CAB5C7ECFCA43C1BE555895067C0
FAEB23322F430B2AE9AAEFE66CD5AECA0E0843E3A709DA21FCA85CCA3B6896BB
E3B43D46F4C27C084979F193211E48D1B82FE0732BF0578D47483A34BE6673ED
CA086B263891050C8394D7FA84B0D433718D72F3B8AEFAC4424DF77E6BBB865D
8A621554B4F25655F71AD8A5D232BA3D60E166E732466CEE91414F1D8B86DB6A
0E5B4F2A091A948901D588531AFC86779A79F879A0E434641F98E644281E5FDC
602984B608427F170936A1EFD0D3EA73E9C9D55BD054E058D3E91BEFF26651E5
57683614521110DEC1CCAC426117DDA7D2F7240D9DED6864E161D3E736F84FAD
164EC205F00E1766053A2409D397541AB9F186D37653DB56BE29E5D8D24B19B9
CDB4B902BE2B0EE816882ECBA2C33FB1720B76230DC2B0874144115189535CA5
A6E89B27A9599C58BCAB596BE29FB3D1BED739A2F3BCB5247D57095C3384A8F8
A437EB52D9E071EA66BED98026AD677C6ED3FF2C0441C6D8ED04B4A6311588C0
5E79BCD6855DF116AAB2D1CEB39DD1B96620DABBFFF9D2054F952FD507D87EFD
BF29A605576AE16E2A02E147F177AAC2A987790A949D5FE1B3E69246DD744B15
A6D41BA2FC7652EBAC0B522CBC0563B84B7B45E72CF16D4ED8DD5EA97E0BCD34
A56DB05F8CEF9CA3E5DBCC3A7DC3983DFF64D35375A84DECBC0C52019F55265D
08041CA012094938952793C03F6195A204957D175AD4DBFEBE00DE3289A2A81E
A6B567EE615900297186C4269159CDAB1221D750142828C21657F5AFB7B8CFCC
07ABEC4482F6847BC51B92BF4F281DCF896548EAC198E02A29E04CCFAD710D27
C357B5FEE4468FCD79CDA5A316E55844FA95245D531C9C079DA7B04921F0B535
C66A9A2C16AE2E6722380B10AB2CAAA5BC72705FEE5F16EE1849C668F74E0080
EF32F8461FA6385C54137CB1A6429950B693B1F03AAD5B29920841D8A98856F4
8DA50A30088175088FBBDBB64A59D1031645C264E8473CFA17A9E2C7DD4611A4
A4C3C4769BF81A9CE5BA616498472CEB3039EF03CFE9C9E40C7AD9AC7A3EEAF1
A9EBEDBC0B373BF97CDA7EA9B68411E8B9CD0EE418F274BA87144994469B724E
BB65220D9BFAB685D3C7146235E1F75D2D02D9941A488F176F1EB6DF1DD36642
B5A8BA107BAEA2B7086DC2E4872A053965FA534DC09852F5B47B4F311E66FCE6
5B51245C24AF68745BDF6E8265B926C2A722FDB614D8A420C468D90AC6C01DD3
0B2BCC478AF7263831CAA4B7D4C830B5D68A4CECE034EAE1B74515B616FD4249
BB3A5A4D1D4F5089917FDECA5E81B425311C0A1D1F0AD4E4C0EAE8920F8E11AE
B42F3CD5F4E1162CE2BC01906D59FEA0253535C8A6DD2D07F4B95CA0B01B582E
C6C952E672A1A93BB6580DF70CFA754115D8E96E6C74811C864A8B34C216BFD7
E8CD2E35AA5CC65AE9B4A6EADA29C118811C25546D0A5B12EA2446C474F41613
91AF75AFE60D134857084BD974F6AC569E815FC0367AFBB76001E331CB50EB6D
FD108C7F3EAF8CFEF5ECC16EA3AAF24847D9B860797BADFF76AAB4F30120DAC7
B1814DA8D278D11FB486BA15A3150BF4FF18C4B77A9E49932BD755C15BA368EF
D65C699FD05F43879496424F97998065CF78BEB31930671A59F15BD1A88ACE52
4159B4902DAD7B8E6ABB9062310BE773D4073B0FC80A519FB5A109CA9D94877E
65B00DD91B1855998A8B2A629F6B46A26F0189167D472CA821FFEE5B734D8C10
A178D7E2C26C1EDB1AF8F060308A2C6AA66A28176B1C6DB0CD785E63C3C23CAC
6C785E33A4AFF5081E8FDCF159C87F7545271EC3C9E1282A2432E88FF45E1830
2961160C191D76693FBC62A5184C4BF062EC5F4C665F7822C8AC76A75523184F
81C4C0F71D83D3D90983D70D71EA0257BA794217BEEBECEE4009C7AC4225ABC8
DFEA3FC860BDAD1227326D81B58435781B42DE945895B45B7DF13E62CDC8F3E7
8563F9E1379F36DB5250CBB60CA69E2AFCCBB41E1272EECD29EDB3025F9B12B5
21586776A36E6529B303BA1340739846C649BBE1B4C581A33E3AA5E5BF7DA35E
2AD5E3933070C99B3DA4CAEAC8360459C79FB1D222007C5A1D004BA37043E008
8BE335E42DDA6F931A547550604E3F9EB8C48AFB1A02950354CA9B3CAE6BA63B
9C169D97C8BC9FD88AE40E7F5F783714FF592683714303B2D029B166D01B44F5
D15C09E8096C94A8FB5417486DF68737740C0B6DC0E30F39B87B9334FA066AA0
3C1CB54B46F491B6FCE850A2112C05C7754167DB8B931E7357C330EBC9C9722F
53D7E6EA50C8DF941B0AC849F36421202C2312A41853D467A8B6A8FB0D8C346D
679BF1C2BE406A060C5D13503F892E2AD7E0E942C55F38AA49D69F2E0D32ED2A
54DE77F3B89C9CE3714E37A14ABBF779E92DC1484D267FE45FD30D4B57486C8F
F456921A29C9C01263A30C5DDE6B08ABA724D826034603AF2106BF8B0DC2F2E6
DE8E4BE234F5CC16DC8850DE6284BF1940F241A22A09F10267CD6E21B599AC1C
55B507A6B130EE52B355A1550F8ACC4BE716ACF70EFE840959AEF3E34287BE6E
17CA0E265ADB2B2FDB9C6BEDD2A467C58639DC0E0728CAFFE3C5B6A3B5526085
4E8FCFD0A6A9BFAA49F87C37A036804E3FB5C7767271B908F858D1B1FD027AE6
7D9A7D9D558033B6B496FCF297EA3A0DAE8853A717F14755510169A99E16BD71
B34CF433D18D972897CA35DA9E978885E3537F3F1537B9ECCFBD3B256C989444
92BD1CFB2891B728BEA67651CA46370C0218FCB4DAFB01FC2176B964274E37B4
51B808734AE1084A4B117A591C1377E49CC779FA8BF6824B42F8B7979EB7D3C3
D29D6F404DC4332A5239870BA9464B02817E4269347FE324FFFABFC80455FA06
DD917CFA75F5092C26BF66D71AA533AE2C7D8A4881A5640331D50EF2E7C281D3
7BF287B326A629814BE883D2D4CF7479AB5CA9B63756395C0C34A114588560BB
55BEB24390BB13D97C1AFD83CD5CFC69B3A805B6AC2B50068F08AB857DF73ECF
5950AD78BBCE224EFEE24C9F4C1E3EE8243A8C74FCA10CA2750C8E75DC45ECB6
E2F0A64350FA54E6005626F2A23003E31557D3A4F79A8E5FDCF7E8733F52A53D
468179AC6BA242538EC564F080D8F578083C675E170E394C19242EA6A91BBA85
58C89D12E469E35367D30A7CA2F279276A9325FB1922E8E2BC4EFB4409CBBD8C
C9983FC00EDA6DA2414F34F3F8539D22D98621011DF3E1E327B8D18D6DB02923
C11A43A5E9E3BBFE4E4F1019BEEEF9DACF5F60C8D9DB5DFC8201ABE06CFE33A8
F36F17AEA7B3CF3B80E235C0C70C895EDF6B07533B66FAFB35D36EDA2160140D
2A5DDDF198275C12B927C13C0CE33E16D59F60B06D751039011DB94742CFACCA
E3155EBDF9AB2A053F432A3149B7BA168CA488A7CA6A28C806E16A8AB4FBBFDA
427F0F1101517B2DA3626698148A704F46F8D097D53AB04E673CA6A7499BDE06
054E11BB8964D3312AFB91898526FC628BD2AA4BE6827C9434847B83AFF2D456
61D8895227166F7AC9B7A2D6B11E647B69063847180B6DCA83EB97A55FFB2378
8271A541A3FD1990B6E8CF001E06ACD96AACC54D1CE78A7045C55437EABD8B2A
042FABFF483882103582209E9DB25EFA5C3EDD00A965E58A75759041EF377B9C
8FEE1DBFD47509232A65591D0EF3D501D9F1A88D8BB0EDE87EF9DE8183CC15BA
A041EF80C5BDC12EC1F5786BB41A5A210AB21A8125409C3FA734449C3B34DADF
947075BE99F21F793C32D7A24C782DDC093059E1F19DC7286BDE84468F4A8A8F
C81C7A93EC9FC3BB5BDA3619E904570286AF4D174157DF396B2470522A8AB97B
83426FAC81E5336F5B19C1C06267AA416492AE025B1CC7C9BB622E8C4F883708
A5F4B77D58B4C3FEB4FC1B47AEB4D7E905CC9D4186651F42A6BE36A8304D9402
95F0BBB95DA3CC1B0771645F46C6713343124F41C7D5E32C525FA970C30E8A5A
052F4D53D6124E3F3267EDBDAE35B33859E49346C6C89D2FB896653CB3AF6C94
66BF2240E2A7188030FA9FEB325D9B4567CE2EFECCADDC8A013BEBF5867C4E3A
BF9C6DE90D57997B9538D0DDA1039BA62AFBE1377EFECCD8D7011EA92D5AF4D1
A2B873A9AF886CF1352821A65BFE2A27A833555AD6327D55598B2724F3478369
BD0531C53C4911323F2C367FB6E9DBFF53E3718CF5AAD7E22765D7F753CD8A70
E43447EFC2E50A55B9D44FDA9466B5903E7A0F381DFD2751DBCA77EE9BD77EA5
4FC70B48155C1DB79FA0EBF9D6B9BF5C5FADCEBFEC7A9DF19ED7B52B92B00BCC
6A93C1C4277079D25627DCD5E40E3E202D7176934072800881DD1D4CEEE74CF6
C7345A1D58CBC3962BB5598C1FE58F712A7BBF3E039137E11AA20B0C21EDE41E
BC7BEFCB29EF7E1B8436828581523B4D3696275DD4BB32D03A21C0EA3BC6CD11
119603EE13A25D981B6802C7E63E7E682871A01D77C07385C9C27980E709E4D6
42D169A45434B57A96DA7C613DA219E8688EF2118F5C019999A83A229A3E6358
51E1B94FA0EF759C006D83B9020CC042D4EFA4675AD2A7432584FBEE461DF583
D049D68F7F48CE19E3B65BA9E30013A0C6F2804ABD8B60BDF036C8391E71A2EC
152170759EC05FD9870CFCEA878675DB7E0B3965F12FF94B2C409DBA1F0EB6FF
0144CDFEDDAFC5366E2E2285E5A98B7B32E9747F9959657C0B2D5E8667BB0F23
D7933FBA3760E08749C1DFB8C18737EC2FAABD1F03F76321A5D3A5906E2108DF
5E38FCD9C55FF41472406D372CC1993915FA62731A558BD50B46F924568EAE3C
47DFA07D507CA97CE92E3DAEBBE3858C8E8D7E1FD0469885218A398562E2E6E3
82E387E14D829E48084A5F6E50F67BED8E4D0A27D4DE5AB3F4BDF9C60AE77946
15F6C1A96F2E661D4A168F99B9E7907CADA58CE64FFA84B4BF4951919FB12165
673F0966AA180433C72E370E4AEB972F9E84370EBF7E918C63DA36A3577710E1
BF34F0A215736C4C7662558576ACD9152362D162698BC6F7535E14CF202C75FD
9B499FFF895843BA15221D9716ACBD2BEF90992D6ADB8992D07658FFACDB226B
103E3271BFB153ED10CF22AFD225FE83ACE6CBE3107D08D83D68B887B53995E6
36170D9BD4E62977E1755181847D31097C59932B16A2115827314A2CEB34D594
7C9F855D779E6DDFBF4CC6E06F7F4E221AA17F75D36F7194C6F86851968211FA
4DC6B27A1A5972C6325C9365D66B5FF19460078F57FE2596ADEA7B777D005852
4F4A025BE47EE1208146159696663F28BC2BC1F61B40C27CDA69822968706EB9
4D1720FB2879E596D3A7EF942D57E3F4637E52C0CE533016DDEEA851DE7E5567
C54996102DEAF39BDC40B3CE28A9BFF70E85FBE7E7CFB5E7683CA32D0B581F1B
DC06C89A7EF110930F52FD0ECDF59CB709ACA89ADF752175EB12F60E0BB084CC
1C0860F600D85F5797EB78D96796467100D8A971950C13B31CB7B479C38832E4
4F55442C4053B30A15AACBDCC8DB585D05EDE10F76335EC81AFDF3F629F7967B
89B09EFC1C0822DCDDADB7A93CEA61C710496DD8A4F02B697ECA65C52E8DA440
8C83C7D6E6687D7FC4391A430A694FAF7589770D166A0A77F0BA61F3599F5FFF
0264F1EC9818FC843B3D1E8D1024639AA7554AFE3DB1E2FC2A7300D155AEAE51
EDF6BEB23E109C629819BFF414AEAD77DC4137FF02AB2075168E57BC0E056FD6
F12A603AA2D8903CC73B35FDA9F1FA542076F2DD463993A71215BA783E8BF2ED
084C4E8B5387C1A59CA1B71F84C760B5FE75CAC3F9070D53BD9CDB611F879EC5
C324FE85100D372B0AF0CB78EDDBE0BDAE635E0983C5D93B16163FFBE337089B
533D2BEE7D6858FD8EB114AACBAE769A5115F7BFDEF56BFEBE73A41DF6748D48
720A0F63EDBED52E7A45C0743AD43F21DBC6904AEE4B01DF4F1005122C3B92BB
96036C5864DD3882413B67E1B8CB93CF465034D8100BB66ECAA42FDECE8F3A38
032E3CD9C2F39F5527C4C9DB44F388D519751DA362FB600FEB434F951064C8A0
3DA997C2CF4A142069393597F7CE2105F3FABE7C94EDB0AA8ECD6E8F1A8F8BE8
C663425D4B763AB59F6CEE050F3C329B8F6E001C3AFD30C3F87ABB51B0641E5A
9CD23994857296B5D6618C1E28F35CCCD180DC4AF572B09957F9CF8B20AAC012
605EE33312C1A0A5CF109FFDC24D88653589B431FB84E4DDB650C2F783594DE1
28F7024BC23065C4640FC87709086E4A434207F479BE7BB32B87A7B6BF4FEBD0
3132F9075C271F2054078398AF05616F748AA9E2269D0AF951E74FD19CD6902A
7FF26C1A5AEB1281B592A277DAE9BA61D9ED921D2F4AEBAEC7FD408990758FE7
062525852F47BC752EB0EFF7BE8B688A3622826EC83CC42DCE8524F274C73CDA
640D1971689CFD787015AF068607CA71AA4344EDF6DC4B493F6E259A8B367032
D570966EE6528337FC3018FE1D11E451D8111B25F62DC4A7E06A2754F345F464
2D12EA28AFB297DE661883CC13A06C32ECD887D9CF2FB4A626EA3E546717AE6E
2398133832791327B3AD2B5A7187A04AAF440DD8F00EC4DA4B4BFF093130855E
3BC495EBD55052F31B47841D36838D978E75B8D812E6C40FF0C0FA109631DB82
CE149A89C4155F31605AC5C277D22217312B08735B76A3672054A8A2DCF22199
936ABF6580C629A7592A909A4F89FBE2E3EEFC89D0CB702A7C5B5CFCFA418993
7F467571268088C01947EAF161E9DB07026560DB5FC2C270C0F297A27F4C1A27
4E465CF0CC2A5FDBD2127762FC7080DC7C4B1328C68ED6081502018D0F42D2C0
5275C5EE7AC03CDA298908B6F43F9DB3B67142BFA35136D3B24A42E1EAB415BD
232ED81A7089DD667324B69D4B293602B4B6E8AC9AB337DD98E2016A73BA0C0C
17501462F8C8669EB2DE84B74636DDAA6BCB481FECAE3E6194002528545CB469
948071DC0D85D594C72F7856524BA6F93C5217BD25477064172DF6FAC3B591FB
74909EE193C4392AFA8FE893C15645BF227A74465F310EB2A3470F443D734FA6
572323DB75F4D69DD97AD5E60EECD0A215B6909A72F38FEA8A11E0E9757F4384
18A09605DCA1C039D918A075AC7F08F65FA8D65B74900DE1EA95B981FBBCE8D8
46DAE64D9252DEF8F8A970305EEA103344ED8858C8FC0E664FA67A00926275AA
E8D8CBE9ACD7740ECA4A47A985E2E1605536E136BA2DC0FDCBA1C570AB49AF13
7953153675A677EBB68699295ED7AB77C3AF347CB22D97B8C6F9A4CBDC5AC66E
2815DBC1E0E941354EBCB65502EA026B1E0210240608BE9CDCDB83507C352E4D
83A16BF792582D55A655089910B4B7C4FFBEE8D95937061EBCB9EA64BE0532CA
2D8205BD6EAAF03A971F6814D3F9F90BC3A213AE2C764E0B6B984498FA0F1DBE
75C70CF8C16F4844739E8EDFC52F4AD3EE410DC18367AB431B42CEB3780C8C93
40CE1E6E92B2369202E78E7F66CB3CC2F58AE60449F48C2C8E9EE7A622F663F0
BD1E8600C20A6444E9607252810A703590EED9A9B020FF1A487B86FFB39DE3DA
4513B690D788D9F51236B9046AD8693B9120BCC420302FC53968133AC8D20F53
9085B932FDFEBB8A80ABD3372BF7B61D458BBC8CB551F4D5BF3E28B666F7D0CA
E721AC37CD7617690233682433089523A6C933683151661BB27664EC44367EFD
EDE982310E2B091DBE029CECB93447111807A857DC545E043E309F302BDBA57D
A671A26A6A2ABE9D3BB94C8169519D37F694CC96CF93B817463535EC7FE247A0
CB0AF5C80A6E7B9815E5C1D06AF1859F45140A382AD6E69933719EDD048C6E2D
1B0AC6224CFC85FA9DC019E9DD684658887A79FEBEBB6D10180E9B5F6CB91C8E
D4E24B5E8CEF8EE392946CD2BFEEF8BFD513B0C4AB277A55AFA05D36A6B14904
A7A4E280C355889DB744E336C205AB521963A3493E426B6C046E9A088FA5F835
76F553A88FD966801A249712B98F8F6684D73618BE00E71E41A2B854305924BB
D754AC15C7B0F3377F3BFCDDD54476DD446BEA201F714664CE83D20AD69E65CC
88F8EE54D9A2983028A46C6A50F06068ED2E93039E418FB1C23D9859E56869B2
5A2E25ECDA4A52CEB4E951EBE192AB59AF4963E1B73E5F026D4C49D6F39100C8
6650A81C81847C0A16ABBE6FEC03C5E792589DC8B9172A0752D4E0EF8B8C6329
988BD57BA5F55A6C5E200BE98607721925F0BC60BF16E2C3AF10E38EBA2D3B88
B585A260DC483EAF72E4A3209836161A329AB20B8A48A155EBD50A5DC1919F4F
11B8EC7B4605604D6B61E916B27ACC7B6562FB568CFE3D6FFB5672A03E247B70
D47FBDF082C0A57A2777B0CBA5B895A16760C06696BB9333FEA9280FC3B8AB50
243705F537BDFB36A7D076155155214A256768C846557A983C753838F0E3976B
8489770DB1E286F8FB8BCE2BBF6FC536BC104290CB61CB54B870B7C9C0705374
E0C8E16ECDAC50C22FCA8F6908BFBCD4CB3919066DCED0266395746893F7AB7B
5C5DD25C2852914D3225D07083B0BF8E4F1056792F4A1E1D04A56EF39F058FFC
D7E189206F6568173C382580D960765CC29F3A81304A92BE0788C6B0C64D6D54
BD746BDC1BA4A84F7B70846E33CE5F285F32FC4E57F2ADA1A2F363888E2C465A
D7B95E7641782E3298C0CF84C9A097C1FEB8776D7F800C040270B499862D6716
D99F9657CC675800A6994ED3977A07821F2D3360F7DF203CFB87EC7DF428ACC5
F6EC2C83636911CC92AEFC1AF420A9097AD89DB843535B0E35ABE92A93C34702
F93AE0F240836605EDAD3970BFDD1E7200FE6F7730D33F274B7963ACE221E3BB
F2A45CE39B80FB268D543A28FD458F75F96CA49D0F9A5A63AA4C9451B3B017C0
C2BACDA61A5D9E3B1C647F00D147F33C0A680456C5008EB66FCFC03F0055EBA9
1893597A866F289B75B6C623DDC0E219EF9FDD4AEDAF3DB3E40BE9E22DF31ACB
4C40CF5EC98BB11AC1BCD8E21CC5D5B9101565A3B608E24074079159F6EAE77E
C34562D4FB5DBC1103123F6B206E78E597B6C42ED14882C873F7D99BFB580F44
81CBC0E5EC84A3D9055FF80F477C6187B460050CB3F5B09BC76BFBE229561326
8FE953C21248A4D19B97CB47F87BB44B486BE4835A8BB9140A59E6F99021DFFB
B66ACDDAEDF48DF5462FC528DFDAFDDE54F3D710DFEBA7081967DDE35D22FA28
478ECA8504891ABEF320513D3154E07738220ACAB6B21B257723B4981E88C341
D1E69F09400FD471BDD24DCEA030A9549FF00F910ECD8C5D6D3D394304194538
BD8434FB07CCACFB90C37D73638049850AD019D2BFC45ADBA046313114D42609
A279E8E3D4698F925E037E82E12B021B0DD24B7795523C57B42DA5217645E38A
80C3CF9E0606529A730C4D49799E741C29CB9E3398F96337D21ACEAE6F4E4B0F
70D1E1E73D4934F65C216EB6C3A6207CF39EA825E6DD146ADC2E17F44D282817
5BF383AD06F224BB9C8438B78186F6B87DE5AC09FD05A1762B36FA02D42C15F4
55167B0DEEF2FA31E9C9379F2B3440AEB83539438BB83563DB883064AF5AA364
DDE7579E59AB8F63B4E0D1C4D5047BD33F5272C72BC399FAF5D8B6BB4D91CDCA
8525D00B9C44867B48C7D5F84C2BCD06B95540E3FB3EA320DD09E67DDE3CBCAA
81ACA57D41A106FF564CCE9A0514182B9D720C8B5B12D731D0DE9DB8BD45D414
4589C1E207BD5D0298DDD46F24A84DD7435CD9EDE39A7BE7E16E36EFEA8B871B
5A448F9B520EA55BFE8B8C6F7935BC4C0021571B3CC5B35D578FDF410441E5F7
ADCD8B7D74E3259CE9D2FA2A5EBB4100C08C13AA9F310AAF6D600734F5993923
4CF645C281C7140CC128F24D366E08106B6E18E6596B9C1995128C8B11A8B9D7
DC54F36AFA934E907162B395A9C2B0D93FD3EE22A88D9A1F1E0F7DD80F5BDBDE
AEC3577A0E1464138FA80172B2AC445D3087A55E15E6BB75DF4F26E8D5C45AC7
D42782421D7028420F0A116296B88711EE384073BEF515A459776DE5C16AAA95
E2A57AC09897100EE7846481881C07789536DBA2F7E8AE39E692B1DA3DD4803E
8E9BC44C6E0C8630BDFD0DED0F5A8673CC0C5AE89EF9CD8E94F4336D40A60E3B
12DFF54B3850227D2F6D538FEEBDD697C394F6F3B8B924DFE690AC43900237C3
8B326E0AADAA395EF316196F20427827EB635BFB6D5C8C66C3D184704C86343A
C38C4F503D140A3B9599A6FD7B8FF7AD0711E9D787E7D4B83B3E5327A5829685
48D1C5648CBE6BA93CEA0DE409FF409695DD704764914593BB144BBB0F0AE087
9CE486312D57707445E43F11298F2B2836FC9F145DC459ADFD7ECE7777D3140B
4AA22256DAACF1B9CFE374403C5DCEFA4E0D6F4166BE43785529DA66B4E92420
257742777F64F9A2F47E1867EC9CE37E9BFAA10B0D8A7279AC40D5EDB03EA078
16AFAD23482C4B5B829303BE97BA56FF7B5C51F5CB3A3B7622E5A704402F59B2
EFB224107BCE6BECF2C8312F29E35A5F0F81B80C9D50EF69D0786D7FAAFD3215
710FD18FFBA5DB6E5795EAEFF1235DF4BCEFC85437AD3F7C4729FA3F773B665A
DFF0135A65ACB5311765991CF8A5D96AE111FFA48845C0A7FF2E0CC929CDF944
7D83A66C2974A60AB7B789DAAEE741EB538E3AC7E38B333C794BA5A95347F2DB
16D3390FBDEFE059EC4B154FAC3E504F6618072A9CF3DEE42A9546DE5EAD908F
2FC9BABDF9017B1D390CC7B93D114349060759E600067CDDEEC944A6ABCDB617
8AC461616F166953D10731CBE99428301105FE980E078225BC8614D6C29F336C
5E9F60656D2F7A63E7BAEC876CC50FA0C3717E91F68E6E2C6DA9D1EB510357FB
D0721D1A90B7633CB21449E35BCDB4FB7E107863E7206A96B530E0992F3E91EA
FB51032C05E7D42511B0344EBEA72D599A27C0EED6598CEA99A13F6590894769
4AF1C15348ED483C51D41076FF66C464CC64E547E7C48121FB3BC58942FFF5DA
411068FCE3FC5ECB2ED4DF0D3F43D356D5334D7C4C5DF0298C5FCB53C08F90B0
462F454C866296804F5009D8146CF17231B66AB20D45D6A73677F3DE59AD5F03
765046AE4CCC913F08F4AA3052765280AD997C8F6F1FBACCF904BBE148E4702F
FDA9F2D369935F062BC321CEA04066309A638017555F0461853BF04A5D6D0071
AC66A907D3804557A4BD6FCA40A67EB1B498B11E403BB81EEDEF8A17F91D069F
C4A80CE9AAE79F064761AEBB2558EF18E946A492A4A06CC6D3429CB2E286B738
BE2719E23968D45FFD1BD4F7A808F1DD37AAA08EF4F57EA64B4B22737987833F
3504BDBFA2B4520DD6104F783317388D31B2DAD3115BCE088B3ACA4E03A3CF8C
5DFF4132151E1300915D6B8A4FE8FAA4A4E29ED940E9AB5A981D904C44E2AAB7
8678DBE603115CBA55BEEEBC718DF9816B69E19F7320CF4B5E9289E06D03AA72
F51E926AE304CFFBCD375018A108A2A4254B80C17134D2308CDFBC3BF32EBB01
BD6D066093ACAEB8F43BA217E6E3C8F19577F6E400F8E6B007BEDDFD557E154C
7D4931BAFE9A9136C3AAE071B008594F0EDCDAC45F92D194E89EAA9EFDB3AE11
D6EC22123F4872FA185E41F8C63625AACD0916A4648BF5BEBC546D425305B0CD
D5AE2CFCAF3AF145B9BFFE54694EEB72F6B3A2C97D222B4FD5C3A9B84B9A2646
A2689571883CFC0BC0F4E45FB6D1A0B2B781EA1714CBB8EF011768F1CF5D0BAC
E02F63CD69865AF20179F31FD7ACD488D220383864E9DDE659CEBE54828BC5BA
5F945E05D1A6D9165752A32589D03360B92ABD1BF4762108CC1B72CF4BE68D92
10B2050219D48D74707A3F5F841EBED46C86B648EBC71D0E210147AD6DFD9DC5
A1D10EE5436208F854602A47F891475C2652AB0EA213BA38DCFB2403CAA45CD1
CADEBEC5838B58331978769574D066CF54ED5E3235C4B3F170273E26F95CCCE9
57E1D6A2A9559819B4786D1B217BC99B501F212C04DDCF148251E92337D102BD
F46C57D1161A563418A13D5FEFE84F45AD559E5FB1691BF225D5405F13475FFA
748F1F456B65C6329DA22E64B4636F4C2B357C57195B410F7428C9B538574609
C27B61C0D89B7D93540E890C37971E766FCFF7D74C648A9DBDB4BD9284EF79AD
DF7FC21D7643EC0724B2284CCD6B34449FF0BBACA5055336EA2E3A55F05E65D8
26D0748FD49A3862842744B35B9C84FBE4B94E089766D67D9CF591A24B4C3B12
5846AE18C79267B34BB5398646BDFCDD1677714941F1BEE134388BB171D094B6
324620B6BDE1A2038CCC141FFEC68EBAD5BCB1C5821ABFA786FF39F733371C52
8578D79771B9D519C1D9AC4215941D58CD93D8A88C8DDDA4B7F00DC2D01B90DC
8725A42DD1A37A8CA1C96572AF5FE49FF25F522B3A9F1E34262911454901EEFC
795EE82FEC8FEAAB9D12EB328BDC54B69D754F3120E60CF5DE7D904720CB8F08
D47495667B31AAA4E2036B87DC7B63AF6F633AFAF1A62DF5B27EC1FAF69326A8
EFC91D73A360E0649975E6DE5C45BAC90DF812D8CF9F07F4E41F7F0AB200F7DC
A928389A6C68F096C011F520E7C4CFE2F16EE0A28AA5EB9BDB79292B2C3D11DA
99AE30ADDFEB2DCCD7C4B742DC9F638C813A0E12BE6913E871BF021BE7090B86
34E733828CF33774398B7D04D3D49F5F31B0194AF3E73FD53DA85CBA33656778
337D5C340C3663A24E5B0615F0D3D880CA412A5DA7129D6D1D904339148B6C3D
5E04AABD20E1CE36C9A6414AE153945364C97C3F7B403CB7A1BA4A74FAE3B1ED
7FDB44C329FAEFC92CC892D659DEF5A6A42DBB3162ECBAB4989A339551FCCA85
5C59CF9E782CFBCBA3F432C995FAE8C2DAA4F9D885C932566C394D6556315C14
69BE1B6F645F934D440D6E1E0DAB89B3DBA3D4E4A65F22F2BFB06CA814AD938E
E19EB8AF07638334219D356A1E62EEF63349EB85DEA38094FA7E0D033E3334FE
BB7DDED15A0EA10069836F861BD9BD0A502D5551FAE3CDD840E31A2B0D952362
BE9495A13475B59440A5E2FC8A1A219FF549E39B5246CDFED6F18ECF18BB6DF2
8A010FA65520C5B38F8E397A677D32DEED9BE9E2D3E865686493887420AF66D0
D1781C1F572FF3DC0596A7439223ED9B5088196A1227CB2BF44CB510AB15D2A9
52879DA100CB683D5545AF393C32042E6B45D0B3327DEC7C0C64734CEBD79226
82445A177D49B5B9B7655CF8128B44A94161C10BB9CCCC859D9BA8629ECEDEBA
C6DCDA207833E82EBDC25FE81BA2B8BBCE7D260C5E0BCDDAD0BDECA1F309A200
8DF88BFB3241BAB1F43BF32A825E878AB2C62629E7FBAE938FF040BFD4CD3B9F
C0D4BBD3C3EAFB88893A27D0E525931EADC3DD2119A0709834A75465756B3E3D
0005ADBA1771BF56F4BE46B2E942C5972DB3733FB0B7B16E876541B8B5724C52
4B18A2DD64410CEE6EE8FF8A0ED4400ED0205CFC4784747377F042F90A632323
B3201219B3BAC4E3EF006F49ACEA43F9307087E6CA9BE6043EC285A0C65B2088
98C0DA6DC519EC2EF4EEB8FDAD975197FDF79197417B92B049220AAB54CBC3ED
193C74B40D870EE3CAEFD190E9B88325AA14281AC2982A8D9D96F224626EE95C
97E07B889D21BB8CF260E9D5ABF8FD2FA31404A5ADD0E7D07550C8AA689AF8FB
46D0DEAEEB94A3FFC53B24AB05D60317785567C27293689D9E1929C02BC944C5
BBE1B5F51D222726C5C55E8433EC069DFA30B812AB7AF9961F0943FF5FA39DDD
6AFD3888C761FCA9DF17E98DDFD603E50EFE840959AEF3E34245ABB4BD9B13A7
AA659BE464CB5FB545B817D58410DE30F1BB4C5931B129B7F7CC7CC9BFA3DC24
345158573C4202F8C00C41D8E1CE3B73D4DF5C837FE8088C6E725088D0B6B74C
34461573268107CF6E74FB7DAEF62CCFB92F02F604252E783C160D5D7FE5CDBA
1F1F8F41E58435168E7DA3059F5FC4AD1CB66A04B8CAEA054DE19394BF5975F5
BF56E8861EA17A679ECC32EF071292BC9B4A3CF896CBC49A801858FDB07DAC35
CEB9671979D5B36C3AD33E1B319F8EC3778ECC7AC769B257506685DF58E3BECA
5D5ADBA455ED3C209CAA569781AD25B118A5B8E8A7B96A970A39F150893C46B4
8FFBF394C19C2A63FBEB8E7B5C9DE2F1CE8A6FA3D7E58A7D3D06321D6DB8A9BE
F6BE8C55DAF6C32E76D42E1835E49F8E303C38A780D179769A981B2E52EC6154
65F9DD969558045820DD77097D6F69AB0CD82E9DA67ED0EB224C865790E7B7C4
FA5C12EEDADB7D78307802104A0A956BBF13C06BDA9FD79087BE8D374A8D48A1
0B9B0710F9F9EEBBD452B31E82224D328BF9FAF7A6EF4FAB2499D7A8E54B4E5F
84D18147E60F72B3B284AA5F538711D1127CCBA446FF8A79BB85B2AFA9A96D35
18E5AD2079D7D2DB983346306E52C6CD2B5EEE672B8FFE81A0688A1C297ECF28
4CD31BF0A237CFF4EC3059C390776432DF3CCEE49193B77889563AF23092D31D
5D445153AFD3F9CA652F9B0550EBEA538CC45BBFE80585CBE2D3061495B7D791
B5803E4E32D24F60B73F959C2857C22E81DD86B4EA49B684F3E31C118C1F11E8
6D70C5FAC73234D0EB556526F5E5F2205D67B7D064B218F37F21A45B76C5FF03
41194CFAF86E1CE24D5BBDF1E54C9002F1F6B017AB3F7C800A430A2BE41B2B7C
5FA111B8D5E33CDCA656ECDCA419464C85B1EF68F2EAA7AFBB176276A6557CC4
76E1B208A6371DBE41ACA95E8CC286751550CC13B3B637DF6DE2895630AD3EF8
61C8EBE52148E11F5273FCA8DEB439C2060418CA9A9A943361684CF4959578D1
CE7E0F2389D206B264913054F9FABFDD9AAD99B9B75C4F5F3C24F2A70BFEF31B
8676CFE227924964EE8D6A45E5BE837BF0ED061726EEE6721A5335937C6583C5
5B227E293990F108C895CBB646BDDDA29E2D383E5CD38151D2C105ECEE3C7285
70E38AC3B0B0735977DEC90245EAB789581FFF779348D88846B2526FC828DC05
6560430046645EFC24B15F40DFF1A3C4A6E985EC01646EC21B542187E568CB66
816EDDB303EC28C3511A3A33A6B5A947AE1E837ADFCDA5E62DFB940A1AE68A5C
BD6F46C4119C65B235A5C153AC9B4C61BD9337429960E2D5C60D4D3A85EBC303
93193B2DB95711560A2511FB2B792D56C391A369F897DD1CFDB8AC2EEA1E434C
E164B683782AE81C1B63B67821EF81CAB5C7D0D9AF69A82EF06E384A13243E4E
2A5A3C38471D4219C45850535DA2F7A7B9EB1B4E6E9842D5A2E34899C409425C
C5BD92E10C520BF60548AF123FDEA9E8E3143AE66AC3654CC9377A27D144C37E
EFFF02616FF7BA265DEA44FF8BB1DDC065337FEE1E7B684030274431831BF276
F3B8F15DC68E73EA047345AA5EDCA1BFAEB0223A63BA100BB20BE498ADECD7F5
294181DB6A7636346414585B4F07E2FB32755B5CEED304E6A4879F9C37A7E43C
F3108E0566286646982C103D4DD20079D00D045D108121CB7610BEAD29527E54
CD4574177A612CA48168A8D3E83AEFD8F34EBEABAAF7B02453C9EF2DE33BFD6A
79E7F1CF2134662D72F032AEE5BDF71E90DA341DD289FA307E43B3AFFCB82047
96BB33F981B2C96507E89B97158EAD482F5CC688B01D9A6BABA18DDB7BACBF5D
911427CE2109E64C51E5ABBEAB68BA8894FC5FB2D764BB5903DBE0558C96A7E0
F31AE03123F4C29DC1482DDCCF934A3113CDF7B586C5EE7FCD484B3AD28EE437
4162756DF0ABC801FAA9DC1257DEF81358131E3A24769F29F62E20CE63C1096A
303D43BC9979FDB989B6A87AADA63C0DC9F47017A5A79CF64A8F05E3656B8AC3
EA4D231B25AD854FF24698D982F3118626F2F7B7C5D644435758C6A7D579611D
EBE79B3715AD94B8CAB7D4C9B9836D7B8CEE924E325F8BDBC35B750E7D987076
30177198C13CBCCD32989C0DD59F479FB96F684DF0E3EB046FD3272D307C0B70
BB39BC4DFDA77A85A02D512DDCC761F86D0DB33726D54FA2B462AD6FB1EF48A3
40D43C5C5499974D0B8A95713E2F772EF48B2C9271873EB9301076FBD4CD81A2
3F8970333D68C7090EECCDBE78CA213756394576A64A07FC130479EA331D2015
202A3062F218582C9B01189450015EA6F7283D5934D2E008679E2E5991D7DD55
0FAC4A619B83B02AEC078CCEEB60EA673C652F80D10AE5FC3111389800D0BF27
3AAAF0DE807DA148D9F20B53BA72DC87FE23CBAABF451788CF37F5524BBFBD40
190510310F0B5D9C45E56128FEB9AC66FDD84958829A220FD8F1BEEEACCC2FE2
A3828C1C7C8C8827854C01FF486F7E7660ECAB7587DC7D4030E3206654A78084
F3855B743158B66E586768850E1772701CC9D66CF6787A67B309DC93D020BD8C
2EC9DE3C685C35C5AAE9DA6EE626BEA809DC1D7DB4C98F6309DC5ECDE2573409
101EB386E2564D8E3F3DB6EB01ACD766998F0A08B72B883C7C4F3AF2B0EFA04F
F4A5827FF8FD0ED28ABF7C7D712C8DE23340C6202792F4D6A70C000FCF048B5D
4C54038928F5FACFB03651E3CB994FF8C4F39B6E2F2D0D6B0D7B112257A64E6A
283144C1709CB94937FAA07822C92E0535C02C95E4DBD0E81C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/A)
@start /Fa 145[523 784 3[261 1[470 1[418 1[418 1[470
12[680 36[470 5[366 366 40[{ enclmec ReEncodeFont }11
885.568 /LMRoman8-Regular rf /Fb 199[406 406 406 406
406 406 406 406 406 48[{ enclmrm ReEncodeFont }9 664.176
/LMRoman6-Regular rf /Fc 190[909 65[{ enclmmathit ReEncodeFont }1
1212.12 /LMMathItalic10-Regular rf /Fd 203[993 52[{}1
1328.35 /wasy10 rf /Fe 137[458 1[340 12[448 452 2[408
403 500 37[261 59[{ enclmmathit ReEncodeFont }8 885.568
/LMMathItalic8-Regular rf /Ff 173[959 82[{}1 1328.35
/MSBM10 rf /Fg 177[830 12[830 12[553 553 4[307 46[{
 enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular rf
/Fh 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fi 165[615 7[523 69[369
12[{ enclmmathex ReEncodeFont }3 1106.96 /LMMathExtension10-Regular
rf /Fj 254[261 732{ enclmmathsy ReEncodeFont }2 885.568
/LMMathSymbols8-Regular rf /Fk 198[470 470 470 470 470
470 470 470 470 470 6[366 366 40[{ enclmrm ReEncodeFont }12
885.568 /LMRoman8-Regular rf /Fl 143[1107 57[0 3[886
8[1328 7[1328 7[1033 23[369 1033{ enclmmathsy ReEncodeFont }8
1328.35 /LMMathSymbols10-Regular rf /Fm 155[723 6[361
1[361 29[1012 1[361 361 650 650 650 650 650 650 650 650
650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }19
1328.35 /LMRoman12-Regular rf /Fn 135[739 1[629 1[470
613 10[749 623 641 1[676 560 553 683 9[1228 12[719 3[842
1[1080 2[975 2[1012 1[1012 361 59[{ enclmmathit ReEncodeFont }19
1328.35 /LMMathItalic12-Regular rf /Fo 650 2[723 5[650
17[650 31[975 73[578 686 686 939 686 723 506 513 506
686 723 650 723 1084 361 686 397 361 723 650 397 578
723 578 723 650 6[795 2[1336 975 975 939 723 957 1[885
1[975 1192 813 1011 668 469 1[1021 849 885 993 939 921
975 1[614 1[1012 2[361 650 650 650 650 650 650 650 650
650 650 650 361 434 361 2[506 506 6[361 3[723 723 759
27[{ enclmec ReEncodeFont }75 1328.35 /LMRoman12-Regular
rf /Fp 3[1196 23[1046 105[956 2[1554 1136 1196 837 849
879 1[1196 1076 1196 1793 598 1136 1[598 1196 1076 658
982 1196 956 1196 1046 6[1315 3[1625 1[1497 1196 2[1470
1616 1682 2041 1[1685 1[801 1682 1691 1353 1412 1649
1554 1530 1625 7[1076 1076 1076 1076 1076 1076 1076 1076
1076 1076 1076 598 717 15[1196 29[{ enclmec ReEncodeFont }56
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fp(AN)718
b(4.3)f(-)h(1)f(Bestimm)-60 b(te)717 b(In)-60 b(tegrale)717
b(-)g(ZO)h(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fo(1.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108
b(unktion)433 b Fn(f)142 b Fm(\()p Fn(x)p Fm(\))369 b(=)f
Fl(\000)p Fn(x)21751 4318 y Fk(2)22572 4800 y Fm(+)295
b(2)p Fn(x)p Fo(.)921 7346 y(Die)326 b(nac)-36 b(hstehende)323
b(T)-108 b(ab)36 b(elle)326 b(zeigt)g(Graphen)e(der)h(F)-108
b(unktion)324 b(mit)h(un)-36 b(tersc)g(hiedlic)g(h)324
b(sc)-36 b(hraf-)921 9338 y(\034erten)385 b(Fl\344c)-36
b(henst\374c)g(k)g(en.)385 b(Beurteile,)i(ob)f(die)f(nac)-36
b(hstehend)385 b(angef\374hrten)g(In)-36 b(tegrale)386
b(den)921 11330 y(Fl\344c)-36 b(heninhalt)372 b(einer)f(der)h
(markierten)g(Fl\344c)-36 b(hen)371 b(ergeb)36 b(en)372
b(und)f(ordne)g(en)-36 b(tsprec)g(hend)370 b(zu!)p 0
TeXcolorgray 0 TeXcolorgray 6101 16652 8542 45 v 14642
16652 4523 45 v 6101 25614 45 8962 v 6810 24669 a
 currentpoint currentpoint translate 0.30807 0.30807 scale neg exch
neg exch translate
 6810
24669 a 6810 24669 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.8999 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 24669 a 15441 10955 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.92838 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.92838  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.92838  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.92838  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 8091 a Fk(1)14195 4941 y(2)13464 14344 y Fj(\000)p
Fk(1)13464 17493 y Fj(\000)p Fk(2)13464 20643 y Fj(\000)p
Fk(3)13464 23793 y Fj(\000)p Fk(4)18355 12300 y(1)2680
b(2)f(3)h(4)-16584 b Fj(\000)p Fk(1)-4352 b Fj(\000)p
Fk(2)15441 10955 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 10955 a 15441 10955 a
tx@Dict begin  { 130.92838 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
10955 a 15441 10955 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 10955 a 15098 11241 a Fo(x)15441
10955 y
tx@Dict begin  PutEnd  end
 15441 10955 a 15441 10955 a
tx@Dict begin  PutEnd  end
 15441 10955 a 15441
10955 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 10955 a 15441 10955 a
tx@Dict begin  { 0.0 0.0 pop 130.92838 83.4844 exch pop } PutCoor PutBegin
 end
 15441 10955 a 15441
10955 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 10955 a 15098 11112 a Fo(y)15441 10955
y
tx@Dict begin  PutEnd  end
 15441 10955 a 15441 10955 a
tx@Dict begin  PutEnd  end
 15441 10955 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 28.45274 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.601600654629923
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
29934 24669 a
currentpoint initclip moveto
 29934 24669 a 6810 24669 a
 currentpoint currentpoint translate 1 0.30807 div 1 0.30807 div scale
neg exch neg exch translate
 6810 24669 a
14598 25614 45 8962 v 0.9 TeXcolorgray 14642 25614 4478
8962 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16457 21590 a
Fo(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 25614 45 8962 v 6101 25658 8542 45 v 14642 25658
4523 45 v 6101 34619 45 8962 v 6810 33675 a
 currentpoint currentpoint translate 0.30807 0.30807 scale neg exch
neg exch translate
 6810 33675
a 6810 33675 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.8999 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 33675 a 15441 19961 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.92838 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.92838  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.92838  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.92838  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 17097 a Fk(1)14195 13947 y(2)13464 23350 y Fj(\000)p
Fk(1)13464 26499 y Fj(\000)p Fk(2)13464 29649 y Fj(\000)p
Fk(3)13464 32798 y Fj(\000)p Fk(4)18355 21306 y(1)2680
b(2)f(3)h(4)-16584 b Fj(\000)p Fk(1)-4352 b Fj(\000)p
Fk(2)15441 19961 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 19961 a 15441 19961 a
tx@Dict begin  { 130.92838 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
19961 a 15441 19961 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 19961 a 15098 20247 a Fo(x)15441
19961 y
tx@Dict begin  PutEnd  end
 15441 19961 a 15441 19961 a
tx@Dict begin  PutEnd  end
 15441 19961 a 15441
19961 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 19961 a 15441 19961 a
tx@Dict begin  { 0.0 0.0 pop 130.92838 83.4844 exch pop } PutCoor PutBegin
 end
 15441 19961 a 15441
19961 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 19961 a 15098 20118 a Fo(y)15441 19961
y
tx@Dict begin  PutEnd  end
 15441 19961 a 15441 19961 a
tx@Dict begin  PutEnd  end
 15441 19961 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 2. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 0.0
lineto 56.90549 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.601600654629923
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
29934 33675 a
currentpoint initclip moveto
 29934 33675 a 6810 33675 a
 currentpoint currentpoint translate 1 0.30807 div 1 0.30807 div scale
neg exch neg exch translate
 6810 33675 a
14598 34619 45 8962 v 0.9 TeXcolorgray 14642 34619 4478
8962 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16439 30596 a
Fo(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 34619 45 8962 v 6101 34664 8542 45 v 14642 34664
4523 45 v 6101 43643 45 8980 v 6810 42698 a
 currentpoint currentpoint translate 0.30884 0.30884 scale neg exch
neg exch translate
 6810 42698
a 6810 42698 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.3902 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 42698 a 15441 28984 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.41867 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.41867  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.41867  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.41867
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.41867  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.41867
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 26120 a Fk(1)14195 22970 y(2)13464 32373 y Fj(\000)p
Fk(1)13464 35523 y Fj(\000)p Fk(2)13464 38672 y Fj(\000)p
Fk(3)13464 41822 y Fj(\000)p Fk(4)18355 30330 y(1)2680
b(2)f(3)h(4)-16584 b Fj(\000)p Fk(1)-4352 b Fj(\000)p
Fk(2)15441 28984 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 28984 a 15441 28984 a
tx@Dict begin  { 130.41867 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
28984 a 15441 28984 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 28984 a 15098 29270 a Fo(x)15441
28984 y
tx@Dict begin  PutEnd  end
 15441 28984 a 15441 28984 a
tx@Dict begin  PutEnd  end
 15441 28984 a 15441
28984 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 28984 a 15441 28984 a
tx@Dict begin  { 0.0 0.0 pop 130.41867 83.4844 exch pop } PutCoor PutBegin
 end
 15441 28984 a 15441
28984 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 28984 a 15098 29141 a Fo(y)15441 28984
y
tx@Dict begin  PutEnd  end
 15441 28984 a 15441 28984 a
tx@Dict begin  PutEnd  end
 15441 28984 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 2. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 0.0
lineto 56.90549 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 28.45274 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.583693358673846
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 29878 42698 a
currentpoint initclip moveto

29878 42698 a 6810 42698 a
 currentpoint currentpoint translate 1 0.30884 div 1 0.30884 div scale
neg exch neg exch translate
 6810 42698 a 14598 43643 45
8980 v 0.9 TeXcolorgray 14642 43643 4478 8980 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16412 39611 a Fo(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 43643 45 8980
v 6101 43687 8542 45 v 14642 43687 4523 45 v 6101 52701
45 9014 v 6810 51756 a
 currentpoint currentpoint translate 0.31035 0.31035 scale neg exch
neg exch translate
 6810 51756 a 6810 51756 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.37125 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810
51756 a 15441 38042 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 129.39972 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 129.39972  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 129.39972  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.39972
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 129.39972  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.39972
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14196 35178 a
Fk(1)14195 32029 y(2)13464 41431 y Fj(\000)p Fk(1)13464
44581 y Fj(\000)p Fk(2)13464 47730 y Fj(\000)p Fk(3)13464
50880 y Fj(\000)p Fk(4)18355 39388 y(1)2680 b(2)f(3)h(4)-16584
b Fj(\000)p Fk(1)-4352 b Fj(\000)p Fk(2)15441 38042 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

15441 38042 a 15441 38042 a
tx@Dict begin  { 129.39972 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441 38042 a 15441 38042
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 38042 a 15098 38328 a Fo(x)15441 38042 y
tx@Dict begin  PutEnd  end
 15441
38042 a 15441 38042 a
tx@Dict begin  PutEnd  end
 15441 38042 a 15441 38042 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441
38042 a 15441 38042 a
tx@Dict begin  { 0.0 0.0 pop 129.39972 83.4844 exch pop } PutCoor PutBegin
 end
 15441 38042 a 15441 38042 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441
38042 a 15098 38199 a Fo(y)15441 38042 y
tx@Dict begin  PutEnd  end
 15441 38042
a 15441 38042 a
tx@Dict begin  PutEnd  end
 15441 38042 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 0.0 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.547878766761693
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 29765
51756 a
currentpoint initclip moveto
 29765 51756 a 6810 51756 a
 currentpoint currentpoint translate 1 0.31035 div 1 0.31035 div scale
neg exch neg exch translate
 6810 51756 a 14598
52701 45 9014 v 0.9 TeXcolorgray 14642 52701 4478 9014
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16370 48652 a Fo(A)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 19120
52701 45 9014 v 6101 52745 8542 45 v 14642 52745 4523
45 v 0 TeXcolorgray 0 TeXcolorgray 24451 16763 4567 45
v 29018 16763 12553 45 v 24451 23246 45 6484 v 0.92 TeXcolorgray
24495 23246 4478 6484 v 0 TeXcolorgray 26223 20461 a(A)p
28973 23246 45 6484 v 29682 21348 a Fm(2)295 b Fl(\001)31292
19786 y Fi(Z)32399 20136 y Fk(2)31907 22301 y(1)33146
21348 y Fm(\()p Fl(\000)p Fn(x)35424 20799 y Fk(2)36245
21348 y Fm(+)g(2)p Fn(x)p Fm(\))p Fn(dx)p 41526 23246
V 24451 23290 4567 45 v 29018 23290 12553 45 v 24451
29774 45 6484 v 0.92 TeXcolorgray 24495 29774 4478 6484
v 0 TeXcolorgray 26274 26989 a Fo(B)p 28973 29774 45
6484 v 29682 26313 a Fi(Z)30789 26664 y Fk(3)30297 28829
y(1)31536 27876 y Fm(\()p Fl(\000)p Fn(x)33814 27327
y Fk(2)34635 27876 y Fm(+)g(2)p Fn(x)p Fm(\))p Fn(dx)p
41526 29774 V 24451 29818 4567 45 v 29018 29818 12553
45 v 24451 35531 45 5714 v 0.92 TeXcolorgray 24495 35531
4478 5714 v 0 TeXcolorgray 26265 33132 a Fo(C)p 28973
35531 45 5714 v 29682 30983 a Fi(R)30420 31333 y Fk(2)30205
32268 y(1)31167 31930 y Fm(\()p Fl(\000)p Fn(x)33445
31448 y Fk(2)34266 31930 y Fm(+)g(2)p Fn(x)p Fm(\))p
Fn(dx)g Fm(+)29682 32594 y Fi(\014)29682 33258 y(\014)29682
33922 y(\014)30051 32975 y(R)30789 33325 y Fk(3)30574
34260 y(2)31536 33922 y Fm(\()p Fl(\000)p Fn(x)33814
33440 y Fk(2)34635 33922 y Fm(+)g(2)p Fn(x)p Fm(\))p
Fn(dx)39252 32594 y Fi(\014)39252 33258 y(\014)39252
33922 y(\014)p 41526 35531 V 24451 35575 4567 45 v 29018
35575 12553 45 v 24451 40962 45 5388 v 0.92 TeXcolorgray
24495 40962 4478 5388 v 0 TeXcolorgray 26238 38726 a
Fo(D)p 28973 40962 45 5388 v 29682 36740 a Fi(R)30420
37091 y Fk(1)30205 38026 y(0)31167 37687 y Fm(\()p Fl(\000)p
Fn(x)33445 37205 y Fk(2)34266 37687 y Fm(+)g(2)p Fn(x)p
Fm(\))p Fn(dx)g Fl(\000)29682 38732 y Fi(R)30420 39083
y Fk(2)30205 40018 y(1)31167 39679 y Fm(\()p Fl(\000)p
Fn(x)33445 39197 y Fk(2)34266 39679 y Fm(+)g(2)p Fn(x)p
Fm(\))p Fn(dx)p 41526 40962 V 24451 41007 4567 45 v 29018
41007 12553 45 v 24451 47533 45 6527 v 0.92 TeXcolorgray
24495 47533 4478 6527 v 0 TeXcolorgray 26292 44727 a
Fo(E)p 28973 47533 45 6527 v 29682 43932 a Fi(\014)29682
44596 y(\014)29682 45260 y(\014)29682 45924 y(\014)30051
44030 y(Z)31158 44380 y Fk(3)30666 46545 y(2)31905 45592
y Fm(\()p Fl(\000)p Fn(x)34183 45043 y Fk(2)35004 45592
y Fm(+)g(2)p Fn(x)p Fm(\))p Fn(dx)39621 43932 y Fi(\014)39621
44596 y(\014)39621 45260 y(\014)39621 45924 y(\014)p
41526 47533 V 24451 47577 4567 45 v 29018 47577 12553
45 v 24451 54061 45 6484 v 0.92 TeXcolorgray 24495 54061
4478 6484 v 0 TeXcolorgray 26310 51276 a Fo(F)p 28973
54061 45 6484 v 29682 50601 a Fi(Z)30789 50951 y Fk(2)30297
53116 y(1)31536 52163 y Fm(\()p Fl(\000)p Fn(x)33814
51614 y Fk(2)34635 52163 y Fm(+)g(2)p Fn(x)p Fm(\))p
Fn(dx)p 41526 54061 V 24451 54105 4567 45 v 29018 54105
12553 45 v 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 60472 54804 45 v 0 TeXcolorgray
24746 81281 a Fo(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fp(AN)718 b(4.3)f(-)h(2)f(Begrenzung)f(einer)
g(Fl\344c)-60 b(he)717 b(-)h(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fo(2.)p 0 TeXcolorgray 651
w(Der)359 b(Inhalt)h(derjenigen)f(Fl\344c)-36 b(he,)359
b(die)g(v)-36 b(om)360 b(Graphen)e(der)h(F)-108 b(unkiton)358
b Fn(f)511 b Fm(:)369 b Fn(x)g Fl(!)h Fn(x)40859 4318
y Fk(2)41385 4800 y Fo(,)359 b(der)g(p)36 b(o-)921 6792
y(sitiv)-36 b(en)338 b(x-A)-36 b(c)g(hse)337 b(und)f(der)h(Geraden)f
(mit)i(der)f(Gleic)-36 b(h)g(ung)336 b Fn(x)369 b Fm(=)g
Fn(a)221 b Fm(\()p Fn(a)369 b Fl(2)f Ff(R)p Fm(\))338
b Fo(eingesc)-36 b(hlossen)874 8784 y(wird,)434 b(b)36
b(etr\344gt)434 b(72)g(Fl\344c)-36 b(heneinheiten.)921
11330 y(Berec)g(hne)433 b(den)g(W)-108 b(ert)433 b(a!)p
1 0 0 TeXcolorrgb 9927 18019 a Fm(72)370 b(=)12977 16457
y Fi(Z)14084 16808 y Fe(a)13592 18973 y Fk(0)14861 18019
y Fn(x)15600 17471 y Fk(2)16126 18019 y Fn(dx)f Fm(=)19423
17121 y Fn(x)20162 16639 y Fk(3)p 19423 17709 1265 45
v 19714 18931 a Fn(a)21042 16470 y Fe(a)21108 16691 y
Fi(\014)21108 17355 y(\014)21108 18019 y(\014)21057 19439
y Fk(0)21911 18019 y Fm(=)23424 17121 y Fn(a)24107 16639
y Fk(3)p 23424 17709 1209 45 v 23704 18931 a Fm(3)25135
18019 y Fl(!)g Fn(a)27515 17471 y Fk(3)28410 18019 y
Fm(=)f(216)i Fl(!)g Fn(a)e Fm(=)h(6)921 22022 y Fo(Ein)362
b(Rec)-36 b(hen)g(w)g(eg)362 b(m)-36 b(uss)362 b(erk)-36
b(enn)g(bar)362 b(sein.)h(Die)g(A)-36 b(ufgab)36 b(e)363
b(ist)f(als)h(ric)-36 b(h)g(tig)363 b(zu)f(w)-36 b(erten,)362
b(w)-36 b(enn)921 24014 y(der)433 b(Ansatz)19602 26005
y Fm(72)369 b(=)22652 24443 y Fi(Z)23759 24794 y Fe(a)23267
26959 y Fk(0)24536 26005 y Fn(x)25275 25457 y Fk(2)25801
26005 y Fn(dx)921 28890 y Fo(k)-36 b(orrekt)434 b(ist)g(und)e(ric)-36
b(h)g(tig)434 b(in)-36 b(tegriert)433 b(wurde.)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fg(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 32624 54804 45 v 0 TeXcolorgray 24746 81281 a Fo(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fp(AN)724 b(4.3)g(-)g(3)g(A)-60
b(ussagen)722 b(\374b)60 b(er)723 b(b)60 b(estimm)-60
b(te)723 b(In)-60 b(tegrale)723 b(-)h(MC)g(-)g(BI-)-2331
4515 y(FIE)p 0 TeXcolorgray -741 7823 a Fo(3.)p 0 TeXcolorgray
651 w(Die)406 b(stetige)h(reelle)f(F)-108 b(unktion)405
b Fn(f)548 b Fo(mit)405 b(dem)h(abgebildeten)f(Graphen)g(hat)g
(Nullstellen)h(b)36 b(ei)921 9815 y Fn(x)1660 10014 y
Fk(1)2555 9815 y Fm(=)368 b(1)p Fn(;)221 b(x)5906 10014
y Fk(2)6802 9815 y Fm(=)369 b(3)434 b Fo(und)e Fn(x)12607
10014 y Fk(3)13502 9815 y Fm(=)369 b(6)p Fo(.)p 0 TeXcolorgray
0 TeXcolorgray 5417 38959 a
 currentpoint currentpoint translate 1.5118 1.5118 scale neg exch neg
exch translate
 5417 38959 a 5417 38959 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 215.01366 a add def
/d 0.0 a add neg def /h 162.02467 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5417 38959 a 7957 30039 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 192.06947 0.0 -22.94418 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 81.44649 0.0 -80.57819   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 192.06947  0 -22.94418  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -22.94418
 192.06947  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-80.57819  def /maxTickline 81.44649  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.44649
0.0 -80.57819   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.06947
0.0 -22.94418 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 81.44649  0 -80.57819  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -80.57819
 81.44649  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.94418  def /maxTickline 192.06947  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.44649
0.0 -80.57819   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.06947
0.0 -22.94418 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6712 27175 a Fk(1)6712
24025 y(2)5980 33428 y Fj(\000)p Fk(1)5980 36578 y Fj(\000)p
Fk(2)10872 31385 y(1)2679 b(2)h(3)f(4)h(5)g(6)7957 30039
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 192.06947 81.44649 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end

7957 30039 a 7614 30325 a Fo(x)7957 30039 y
tx@Dict begin  PutEnd  end
 7957 30039
a 7957 30039 a
tx@Dict begin  PutEnd  end
 7957 30039 a 7957 30039 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7957 30039 a
7957 30039 a
tx@Dict begin  { 0.0 0.0 pop 192.06947 81.44649 exch pop } PutCoor
PutBegin  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7957 30039 a 6909
30371 a Fo(f\(x\))7957 30039 y
tx@Dict begin  PutEnd  end
 7957 30039 a 7957 30039
a
tx@Dict begin  PutEnd  end
 7957 30039 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8064027241051648 def /x1 6.750476169359091
def /dx x1 x sub 199 div def /F@pstplot (0.2992347613554581*x^(3.0)-2.992347613554581*x^(2.0)+8.079338556597369*x-5.386225704398246)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
29219 38959 a
currentpoint initclip moveto
 29219 38959 a 5417 38959 a
 currentpoint currentpoint translate 1 1.5118 div 1 1.5118 div scale
neg exch neg exch translate
 5417 38959 a
855 42611 a Fo(W)-108 b(elc)-36 b(he)555 b(der)h(folgenden)g(A)-36
b(ussagen)556 b(ist/sind)g(zutre\033end?)f(Kreuze)h(die)g
(zutre\033ende\(n\))873 44603 y(A)-36 b(ussage\(n\))433
b(an!)p 13497 45644 19390 45 v 13497 50478 45 4835 v
14205 47018 a Fi(Z)15312 47369 y Fk(3)14820 49534 y(1)16060
48580 y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))o Fn(dx)369 b(<)g
Fm(2)p 30477 50478 V 1 0 0 TeXcolorrgb 31186 48393 a
Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32842 50478 V 13497 50523 19390 45 v 13497 55358 45 4835
v 14205 51898 a Fi(Z)15312 52248 y Fk(6)14820 54413 y(1)16060
53460 y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))o Fn(dx)369 b(<)g
Fm(0)p 30477 55358 V 1 0 0 TeXcolorrgb 31186 53272 a
Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32842 55358 V 13497 55402 19390 45 v 13497 60280 45 4878
v 14205 56678 a Fi(\014)14205 57342 y(\014)14205 58007
y(\014)14205 58671 y(\014)14574 56777 y(Z)15681 57127
y Fk(6)15189 59292 y(3)16429 58339 y Fn(f)142 b Fm(\()p
Fn(x)p Fm(\))o Fn(dx)20377 56678 y Fi(\014)20377 57342
y(\014)20377 58007 y(\014)20377 58671 y(\014)21115 58339
y Fn(<)369 b Fm(6)p 30477 60280 V 1 0 0 TeXcolorrgb 31186
58173 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 32842 60280 V 13497 60324 19390 45 v 13497
65159 45 4835 v 14205 61699 a Fi(Z)15312 62049 y Fk(3)14820
64214 y(1)16060 63261 y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))o
Fn(dx)295 b Fm(+)21610 61699 y Fi(Z)22717 62049 y Fk(6)22225
64214 y(3)23464 63261 y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))p
Fn(dx)369 b(>)g Fm(0)p 30477 65159 V 32842 65159 V 13497
65203 19390 45 v 13497 74915 45 9712 v 14205 66578 a
Fi(Z)15312 66929 y Fk(3)14820 69093 y(1)16060 68140 y
Fn(f)142 b Fm(\()p Fn(x)p Fm(\))o Fn(dx)369 b(>)g Fm(0)14205
71025 y Fo(und)14205 71455 y Fi(Z)15312 71805 y Fk(6)14820
73970 y(3)16060 73017 y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))o
Fn(dx)369 b(<)g Fm(0)p 30477 74915 V 1 0 0 TeXcolorrgb
31186 70391 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 32842 74915 V 13497 74959 19390 45 v 47992
7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fg(AN)g(4.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fo(3)p 0 TeXcolorgray eop
end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fp(AN)718
b(4.3)f(-)h(4)f(Stahlfeder)e(-)i(O)-60 b(A)718 b(-)g(BIFIE)p
0 TeXcolorgray -741 10102 a Fo(4.)p 0 TeXcolorgray 651
w(Um)421 b(eine)f(Stahlfeder)h(aus)g(der)f(R)-36 b(uhelage)421
b Fn(x)23105 10301 y Fk(0)24000 10102 y Fm(=)368 b(0)422
b Fo(um)e Fn(x)h Fo(cm)f(zu)h(drehnen,)e(ist)i(die)g(Kraft)921
12094 y Fn(F)181 b Fm(\()p Fn(x)p Fm(\))433 b Fo(erforderlic)-36
b(h.)921 14639 y(Gib)433 b(an,)h(w)-36 b(as)434 b(in)f(diesem)h(K)-36
b(on)g(text)434 b(mit)f(dem)g(A)-36 b(usdruc)g(k)20387
16877 y Fi(Z)21494 17227 y Fk(8)21002 19392 y(0)22242
18439 y Fn(F)181 b Fm(\()p Fn(x)p Fm(\))o Fn(dx)921 22079
y Fo(b)36 b(erec)-36 b(hnet)432 b(wird.)p 1 0 0 TeXcolorrgb
921 26617 a(die)298 b(Arb)36 b(eit,)299 b(die)f(v)-36
b(erric)g(h)g(tet)298 b(wird,)h(w)-36 b(enn)298 b(die)g(F)-108
b(eder)297 b(aus)i(der)f(R)-36 b(uhelage)298 b(um)g(8)h(cm)f(gedehn)-36
b(t)874 28609 y(wird)921 31154 y(Ein)452 b(Punkt)g(f\374r)g(eine)g
(sinngem\344\377e)h(ric)-36 b(h)g(tige)452 b(Deutung,)g(w)-36
b(ob)36 b(ei)453 b(der)e(Begri\033)i(Arb)36 b(eit)451
b(und)921 33146 y(die)433 b(A)-36 b(usdehn)g(ung)432
b(um)h(8)h(cm)f(angef\374hrt)h(sein)f(m)-36 b(\374ssen.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
10102 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 12094 a Fg(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 36879 V 0 TeXcolorgray 24746 81281 a Fo(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fp(AN)718 b(4.3)f(-)h(5)f(Fl\344c)-60
b(he)717 b(zwisc)-60 b(hen)717 b(zw)-60 b(ei)718 b(Kurv)-60
b(en)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741 4800
a Fo(5.)p 0 TeXcolorgray 651 w(Die)406 b(F)-108 b(unktionsgraphen)403
b(v)-36 b(on)406 b Fn(f)547 b Fo(und)403 b Fn(g)453 b
Fo(sc)-36 b(hlie\377en)405 b(ein)g(gemeinsames)h(Fl\344c)-36
b(henst\374c)g(k)404 b(ein.)p 0 TeXcolorgray 0 TeXcolorgray
9018 26057 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 259.99509 a add def
/d 0.0 a add neg def /h 170.69257 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9018 26057 a 16817 15398 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.54703 0.0 -70.44806 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.40494 0.0 -96.28763   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.54703  0 -70.44806  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -70.44806
 189.54703  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.28763  def /maxTickline 74.40494  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.40494
0.0 -96.28763   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.54703
0.0 -70.44806 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.40494  0 -96.28763  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.28763
 74.40494  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.44806  def /maxTickline 189.54703  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.40494
0.0 -96.28763   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.54703
0.0 -70.44806 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
15572 12534 a Fk(1)15571 9384 y(2)14840 18787 y Fj(\000)p
Fk(1)14840 21937 y Fj(\000)p Fk(2)14840 25086 y Fj(\000)p
Fk(3)19731 16744 y(1)2680 b(2)f(3)h(4)g(5)f(6)-22883
b Fj(\000)p Fk(1)-4352 b Fj(\000)p Fk(2)16817 15398 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

16817 15398 a 16817 15398 a
tx@Dict begin  { 189.54703 74.40494 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16817 15398 a 16817 15398
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16817 15398 a 16474 15684 a Fo(x)16817 15398 y
tx@Dict begin  PutEnd  end
 16817
15398 a 16817 15398 a
tx@Dict begin  PutEnd  end
 16817 15398 a 16817 15398 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16817
15398 a 16817 15398 a
tx@Dict begin  { 0.0 0.0 pop 189.54703 74.40494 exch pop } PutCoor
PutBegin  end
 16817 15398 a 16817 15398 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 16817
15398 a 16474 15555 a Fo(y)16817 15398 y
tx@Dict begin  PutEnd  end
 16817 15398
a 16817 15398 a
tx@Dict begin  PutEnd  end
 16817 15398 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25098 0.25098 0.25098  setrgbcolor
  0.8 SLW 0.25098 0.25098 0.25098  setrgbcolor  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def /ArrowInside { } def  
 /x -1. def /x1 6. def /dx x1 x sub 49 div def /F@pstplot (0.25*x^(2.0)-x-1.25)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  170.71646 50.08534 lineto  0.8 SLW 0.25098 0.25098
0.25098  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def /ArrowInside { } def    /x 6. def /x1 -1. def
/dx x1 x sub 49 div def /F@pstplot (0.015721239059366534*x^(3.0)-0.1853729697133834*x^(2.0)+0.6909772660112011*x+0.892071474783951)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  -28.45274 0.0 lineto closepath gsave 0.25098 0.25098
0.25098  setrgbcolor  0.25 .setopacityalpha  fill  grestore gsave 0.8
SLW 0.25098 0.25098 0.25098  setrgbcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4759718077494743 def /x1 6.6618232318926704
def /dx x1 x sub 199 div def /F@pstplot (0.25*x^(2.0)-x-1.25)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4759718077494743 def /x1 6.6618232318926704
def /dx x1 x sub 199 div def /F@pstplot (0.015721239059366534*x^(3.0)-0.1853729697133834*x^(2.0)+0.6909772660112011*x+0.892071474783951)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.45274 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
16817 15398 a
tx@Dict begin  { -67.05688 42.67911 } PutCoor PutBegin  end
 16817 15398 a -172 x Fe(g)16817 15398 y
tx@Dict begin  PutEnd  end

16817 15398 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.8758 50.1114
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
16817 15398 a
tx@Dict begin  { -65.36151 -39.83366 } PutCoor PutBegin  end
 16817 15398 a -172 x Fe(f)16817 15398 y
tx@Dict begin  PutEnd  end

16817 15398 a 37799 26057 a
currentpoint initclip moveto
 37799 26057 a 921 30041 a
Fo(Mit)340 b(w)-36 b(elc)g(hen)340 b(der)f(nac)-36 b(hstehenden)338
b(Berec)-36 b(hn)g(ungsv)g(orsc)g(hriften)338 b(kann)i(man)g(den)f
(Fl\344c)-36 b(hen-)921 32033 y(inhalt)434 b(des)f(gek)-36
b(ennzeic)g(hneten)432 b(Fl\344c)-36 b(henst\374c)g(ks)434
b(ermitteln?)921 36571 y(Kreuze)f(die)h(b)36 b(eiden)433
b(zutre\033enden)e(Berec)-36 b(hn)g(ungsv)g(orsc)g(hriften)433
b(an.)p 10487 37537 25409 45 v 10487 42465 45 4928 v
11196 38912 a Fi(Z)12303 39263 y Fk(6)11811 41427 y Fj(\000)p
Fk(1)13290 40474 y Fm([)8 b Fn(g)48 b Fm(\()p Fn(x)p
Fm(\))294 b Fl(\000)i Fn(f)142 b Fm(\()p Fn(x)p Fm(\)])p
Fn(dx)p 33487 42465 V 35852 42465 V 10487 42509 25409
45 v 10487 47436 45 4928 v 11196 43884 a Fi(Z)12303 44234
y Fk(6)11811 46399 y Fj(\000)p Fk(1)13290 45446 y Fm([)8
b Fn(f)142 b Fm(\()p Fn(x)p Fm(\))295 b Fl(\000)g Fn(g)48
b Fm(\()p Fn(x)p Fm(\)])p Fn(dx)p 33487 47436 V 1 0 0
TeXcolorrgb 34195 45304 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35852 47436 V 10487 47480
25409 45 v 10487 52407 45 4928 v 11196 48855 a Fi(Z)12303
49206 y Fk(6)11811 51370 y Fj(\000)p Fk(1)13290 50417
y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))p Fn(dx)295 b Fm(+)18841
48855 y Fi(Z)19948 49206 y Fk(6)19456 51370 y(5)20695
50417 y Fn(g)48 b Fm(\()p Fn(x)p Fm(\))p Fn(dx)294 b
Fl(\000)26154 48855 y Fi(Z)27261 49206 y Fk(5)26769 51370
y Fj(\000)p Fk(1)28248 50417 y Fn(g)48 b Fm(\()p Fn(x)p
Fm(\))p Fn(dx)p 33487 52407 V 35852 52407 V 10487 52452
25409 45 v 10487 57379 45 4928 v 11196 53826 a Fi(Z)12303
54177 y Fk(6)11811 56342 y Fj(\000)p Fk(1)13290 55388
y Fn(f)142 b Fm(\()p Fn(x)p Fm(\))p Fn(dx)295 b Fm(+)18841
53826 y Fi(Z)19948 54177 y Fk(6)19456 56342 y Fj(\000)p
Fk(1)20935 55388 y Fn(g)48 b Fm(\()p Fn(x)p Fm(\))p Fn(dx)p
33487 57379 V 35852 57379 V 10487 57423 25409 45 v 10487
62350 45 4928 v 11196 58798 a Fi(Z)12303 59148 y Fk(6)11811
61313 y Fj(\000)p Fk(1)13290 60360 y Fn(f)142 b Fm(\()p
Fn(x)p Fm(\))p Fn(dx)295 b Fl(\000)18862 58798 y Fi(Z)19969
59148 y Fk(6)19477 61313 y(5)20716 60360 y Fn(g)48 b
Fm(\()p Fn(x)p Fm(\))p Fn(dx)295 b Fm(+)26154 58699 y
Fi(\014)26154 59364 y(\014)26154 60028 y(\014)26154 60692
y(\014)26523 58798 y(Z)27630 59148 y Fk(5)27138 61313
y Fj(\000)p Fk(1)28617 60360 y Fn(g)48 b Fm(\()p Fn(x)p
Fm(\))p Fn(dx)32454 58699 y Fi(\014)32454 59364 y(\014)32454
60028 y(\014)32454 60692 y(\014)p 33487 62350 V 1 0 0
TeXcolorrgb 34195 60219 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35852 62350 V 10487 62395
25409 45 v 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 66423 54804 45 v 0 TeXcolorgray
24746 81281 a Fo(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fp(AN)718 b(4.3)f(-)h(6)f(Fl\344c)-60
b(hen)g(b)60 b(erec)-60 b(hn)g(ung)715 b(-)i(MC)h(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fo(6.)p 0 TeXcolorgray 651
w(Die)409 b(Summe)f(A)h(der)f(Inhalte)h(der)f(b)36 b(eiden)408
b(v)-36 b(on)409 b(den)f(Graphen)g(der)g(F)-108 b(unktionen)408
b Fn(f)550 b Fo(und)408 b Fn(g)921 6792 y Fo(eingesc)-36
b(hlossenen)434 b(Fl\344c)-36 b(hen)433 b(soll)h(b)36
b(erec)-36 b(hnet)433 b(w)-36 b(erden.)p 0 TeXcolorgray
0 TeXcolorgray 5417 40250 a
 currentpoint currentpoint translate 0.84097 0.84097 scale neg exch
neg exch translate
 5417 40250 a 5417 40250 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 386.52376 a add def
/d 0.0 a add neg def /h 337.60454 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5417 40250 a 11012 30996 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 335.98732 0.0 -50.53644 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 254.00073 0.0 -83.6038   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 335.98732  0 -50.53644  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -50.53644
 335.98732  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.6038  def /maxTickline 254.00073  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 254.00073
0.0 -83.6038   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 335.98732
0.0 -50.53644 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 254.00073  0 -83.6038  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.6038
 254.00073  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-50.53644  def /maxTickline 335.98732  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 254.00073
0.0 -83.6038   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 335.98732
0.0 -50.53644 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9767 28131 a Fk(1)9766
24982 y(2)9766 21832 y(3)9766 18683 y(4)9766 15533 y(5)9766
12383 y(6)9766 9234 y(7)9766 6084 y(8)9034 34384 y Fj(\000)p
Fk(1)9034 37534 y Fj(\000)p Fk(2)13926 32341 y(1)2680
b(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)2210 b(11)-38866
b Fj(\000)p Fk(1)11012 30996 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 11012 30996 a 11012 30996
a
tx@Dict begin  { 335.98732 254.00073 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11012 30996 a 11012 30996 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11012 30996 a 10669 31282
a Fo(x)11012 30996 y
tx@Dict begin  PutEnd  end
 11012 30996 a 11012 30996 a
tx@Dict begin  PutEnd  end
 11012
30996 a 11012 30996 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11012 30996 a 11012 30996 a
tx@Dict begin  { 0.0 0.0 pop 335.98732 254.00073 exch pop } PutCoor
PutBegin  end
 11012
30996 a 11012 30996 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 11012 30996 a 10669 31153 a Fo(y)11012
30996 y
tx@Dict begin  PutEnd  end
 11012 30996 a 11012 30996 a
tx@Dict begin  PutEnd  end
 11012 30996 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 8. def /dx x1 x sub 49 div def
/F@pstplot (-0.09690716815660791*x^(3.0)+0.9628860178792948*x^(2.0)-0.5917508854812766*x-2.2742279642414105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  227.62195 142.26372 lineto  0.8 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def /ArrowInside
{ } def    /x 8. def /x1 1. def /dx x1 x sub 49 div def /F@pstplot
(0.2*x^(3.0)-2.6*x^(2.0)+9.8*x-9.4)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  28.45274 -56.90549
lineto closepath gsave 0  setgray  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.7761488644641417 def /x1 11.80860741102746
def /dx x1 x sub 199 div def /F@pstplot (-0.09690716815660791*x^(3.0)+0.9628860178792948*x^(2.0)-0.5917508854812766*x-2.2742279642414105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.7761488644641417 def /x1 11.80860741102746
def /dx x1 x sub 199 div def /F@pstplot (0.2*x^(3.0)-2.6*x^(2.0)+9.8*x-9.4)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 11012 30996 a
tx@Dict begin  { 127.02315 188.17076 } PutCoor PutBegin  end

11012 30996 a 572 x Fo(g)11012 30996 y
tx@Dict begin  PutEnd  end
 11012 30996 a
11012 30996 a
tx@Dict begin  { 123.39926 35.97707 } PutCoor PutBegin  end
 11012 30996 a 915 x Fo(f)11012 30996 y
tx@Dict begin  PutEnd  end

11012 30996 a 48204 40250 a
currentpoint initclip moveto
 48204 40250 a 5417 40250
a
 currentpoint currentpoint translate 1 0.84097 div 1 0.84097 div scale
neg exch neg exch translate
 5417 40250 a 921 45894 a Fo(Kreuze)433 b(die)h(zutre\033ende\(n\))d
(F)-108 b(ormel\(n\))433 b(an!)p 7540 46935 31304 45
v 7540 51770 45 4835 v 8249 49872 a Fn(A)369 b Fm(=)10973
48310 y Fi(Z)12080 48660 y Fk(8)11588 50825 y(1)12828
49872 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294 b
Fl(\000)i Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)p
36434 51770 V 38799 51770 V 7540 51814 31304 45 v 7540
56649 45 4835 v 8249 54751 a(A)369 b Fm(=)10973 53189
y Fi(Z)12080 53539 y Fk(3)11588 55704 y(1)12828 54751
y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294 b Fl(\000)i
Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)295 b Fm(+)23435
53189 y Fi(Z)24542 53539 y Fk(8)24050 55704 y(3)25289
54751 y Fm(\()p Fn(g)48 b Fm(\()p Fn(x)p Fm(\))294 b
Fl(\000)h Fn(f)142 b Fm(\()p Fn(x)p Fm(\)\))p Fn(dx)p
36434 56649 V 1 0 0 TeXcolorrgb 37142 54564 a Fd(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 38799
56649 V 7540 56693 31304 45 v 7540 61571 45 4878 v 8249
59630 a Fn(A)369 b Fm(=)10973 57970 y Fi(\014)10973 58634
y(\014)10973 59298 y(\014)10973 59962 y(\014)11342 58068
y(Z)12449 58419 y Fk(8)11957 60583 y(1)13197 59630 y
Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294 b Fl(\000)i
Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)22202 57970
y Fi(\014)22202 58634 y(\014)22202 59298 y(\014)22202
59962 y(\014)p 36434 61571 V 38799 61571 V 7540 61616
31304 45 v 7540 66450 45 4835 v 8249 64552 a Fn(A)369
b Fm(=)10973 62990 y Fi(Z)12080 63341 y Fk(3)11588 65506
y(1)12828 64552 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294
b Fl(\000)i Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)295
b Fl(\000)23456 62990 y Fi(Z)24563 63341 y Fk(8)24071
65506 y(3)25310 64552 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p
Fm(\))295 b Fl(\000)g Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o
Fn(dx)p 36434 66450 V 1 0 0 TeXcolorrgb 37142 64365 a
Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
38799 66450 V 7540 66495 31304 45 v 7540 71373 45 4878
v 8249 69432 a Fn(A)369 b Fm(=)10973 67771 y Fi(\014)10973
68435 y(\014)10973 69099 y(\014)10973 69764 y(\014)11342
67870 y(Z)12449 68220 y Fk(3)11957 70385 y(1)13197 69432
y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294 b Fl(\000)i
Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)22202 67771
y Fi(\014)22202 68435 y(\014)22202 69099 y(\014)22202
69764 y(\014)22866 69432 y Fm(+)24173 67771 y Fi(\014)24173
68435 y(\014)24173 69099 y(\014)24173 69764 y(\014)24542
67870 y(Z)25649 68220 y Fk(8)25157 70385 y(3)26396 69432
y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))294 b Fl(\000)i
Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))o Fn(dx)35401 67771
y Fi(\014)35401 68435 y(\014)35401 69099 y(\014)35401
69764 y(\014)p 36434 71373 V 1 0 0 TeXcolorrgb 37142
69266 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 38799 71373 V 7540 71417 31304 45 v 47992
4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fg(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 75445 54804 45 v 0 TeXcolorgray 24746 81281 a Fo(6)p
0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fp(AN)933 b(4.3)g(-)g(7)g(Arb)60
b(eit)932 b(b)60 b(eim)932 b(V)-179 b(ersc)-60 b(hieb)60
b(en)930 b(eines)i(Massest\374c)-60 b(ks)933 b(-)-2331
4515 y(O)-60 b(A)718 b(-)g(Matura)f(2015/16)g(-)g(Haupttermin)p
0 TeXcolorgray -741 7823 a Fo(7.)p 0 TeXcolorgray 651
w(Ein)501 b(Massest\374c)-36 b(k)502 b(wird)f(durc)-36
b(h)500 b(die)h(Ein)-36 b(wirkung)502 b(einer)f(Kraft)h(geradlinig)g(b)
36 b(ew)-36 b(egt.)503 b(Die)921 9815 y(dazu)368 b(erforderlic)-36
b(he)368 b(Kraftk)-36 b(omp)36 b(onen)-36 b(te)369 b(in)g(W)-108
b(egric)-36 b(h)g(tung)367 b(ist)i(als)g(F)-108 b(unktion)367
b(des)h(zur\374c)-36 b(k-)921 11806 y(gelegten)420 b(W)-108
b(eges)421 b(in)e(der)h(nac)-36 b(hstehenden)417 b(Abbildung)i
(dargestellt.)i(Der)f(W)-108 b(eg)420 b Fn(s)f Fo(wird)h(in)921
13798 y(Metern)433 b(\(m\),)g(die)h(Kraft)g Fn(F)181
b Fm(\()p Fn(s)p Fm(\))432 b Fo(in)i(Newton)f(\(N\))h(gemessen.)921
18336 y(Im)440 b(ersten)f(W)-108 b(egabsc)-36 b(hnitt)439
b(wird)h Fn(F)181 b Fm(\()p Fn(s)p Fm(\))439 b Fo(durc)-36
b(h)438 b Fn(f)25251 18535 y Fk(1)26217 18336 y Fo(mit)i
Fn(f)29249 18535 y Fk(1)29775 18336 y Fm(\()p Fn(s)p
Fm(\))379 b(=)33538 17813 y Fk(5)p 33303 18026 941 45
v 33303 18794 a(16)34676 18336 y Fl(\001)300 b Fn(s)35958
17854 y Fk(2)36923 18336 y Fo(b)36 b(esc)-36 b(hrieb)36
b(en.)439 b(Im)921 20328 y(zw)-36 b(eiten)434 b(Absc)-36
b(hnitt)432 b(\()p Fn(f)12733 20527 y Fk(2)13259 20328
y Fo(\))h(nimm)-36 b(t)433 b(sie)h(linear)g(auf)g(den)f(W)-108
b(ert)433 b(n)-36 b(ull)433 b(ab.)921 24865 y(K)-36 b(o)36
b(ordinaten)402 b(der)g(herv)-36 b(orgehob)36 b(enen)402
b(Punkte)g(des)g(Graphen)e(der)i(F)-108 b(unktion)402
b(sind)g(ganz-)921 26857 y(zahlig.)p 0 TeXcolorgray 0
TeXcolorgray 921 48656 a
 currentpoint currentpoint translate 0.78653 0.78653 scale neg exch
neg exch translate
 921 48656 a 1355 48656 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 512.65994 a add def
/d 0.0 a add neg def /h 203.34271 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355
48656 a 3198 46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 496.00882 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 19 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.7065 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 496.00882  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 496.00882  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 185.7065  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.7065
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 496.00882
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.7065  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 185.7065  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 496.00882  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.7065
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 496.00882
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1953 46989 a Fk(0)1952
43840 y(1)1952 40690 y(2)1952 37540 y(3)1952 34391 y(4)1952
31241 y(5)1952 28092 y(6)2963 48049 y(0)2679 b(1)h(2)f(3)h(4)g(5)f(6)h
(7)f(8)h(9)2444 b(10)2210 b(11)g(12)f(13)h(14)f(15)h(16)g(17)3198
46704 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 496.00882 185.7065 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 3198 46704 a 3198 46704
a
tx@Dict begin  { 5.0 32.95189 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 3198 46704 a 1374 47122 a Fn(s)433 b Fo(in)h(m)3198
46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704 a
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 0.0 0.0 pop 496.00882 185.7065 exch pop } PutCoor
PutBegin  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 5.0 50.34468 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end

3198 46704 a 411 47036 a Fn(F)181 b Fm(\()p Fn(s)p Fm(\))433
b Fo(in)g(N)3198 46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704 a
tx@Dict begin  PutEnd  end
 3198
46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 4 def /dx x1 x sub 199
div def /F@pstplot (5.0/16.0*x^(2.0))  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 4 def /x1 15 def /dx x1 x sub 49
div def /F@pstplot ((--75.-5.*x)/11.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 3198 46704 a
tx@Dict begin  { 60.27452 81.88326 } PutCoor PutBegin  end
 3198 46704 a 922
x Fn(f)3839 47825 y Fk(1)3198 46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198
46704 a
tx@Dict begin  { 238.33383 105.015 } PutCoor PutBegin  end
 3198 46704 a 922 x Fn(f)3839 47825 y Fk(2)3198
46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 142.26372
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 426.79115 0.0   false
NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 58104 48656 a
currentpoint initclip moveto

58104 48656 a 921 48656 a
 currentpoint currentpoint translate 1 0.78653 div 1 0.78653 div scale
neg exch neg exch translate
 921 48656 a 3985 x Fo(Ermittle)313
b(die)g(Arb)36 b(eit)312 b Fn(W)494 b Fo(in)313 b(Joule)g(\(J\),)g(die)
g(diese)g(Kraft)h(an)f(dem)f(Massest\374c)-36 b(k)313
b(v)-36 b(erric)g(h)g(tet,)874 54633 y(w)g(enn)433 b(es)h(v)-36
b(on)434 b Fn(s)368 b Fm(=)h(0)217 b Fo(m)434 b(bis)f(zu)g
Fn(s)369 b Fm(=)g(15)217 b Fo(m)434 b(b)36 b(ew)-36 b(egt)433
b(wird.)921 59170 y Fn(W)550 b Fm(=)p 4079 59170 9449
34 v 10034 w Fo(J)p 1 0 0 TeXcolorrgb 921 61715 a Fn(W)g
Fm(=)4079 60768 y Fi(R)4817 61119 y Fk(4)4602 62053 y(0)5801
60817 y Fm(5)p 5476 61405 1301 45 v 5476 62626 a(16)7204
61715 y Fl(\001)296 b Fn(s)8482 61233 y Fk(2)9229 61715
y Fm(d)p Fn(s)e Fm(+)12299 60817 y(5)h Fl(\001)g Fm(11)p
12299 61405 2911 45 v 13429 62626 a(2)921 66253 y Fn(W)550
b Fl(\031)369 b Fm(34)p Fn(;)p Fm(17)221 b Fo(J)921 68798
y(L\366sungssc)-36 b(hl\374ssel:)921 71343 y(Ein)504
b(Punkt)f(f\374r)h(die)f(ric)-36 b(h)g(tige)504 b(L\366sung.)h(Andere)e
(Sc)-36 b(hreib)g(w)g(eisen)502 b(des)i(Ergebnisses)g(sind)921
73335 y(eb)36 b(enfalls)434 b(als)h(ric)-36 b(h)g(tig)433
b(zu)g(w)-36 b(erten.)874 75881 y(T)-108 b(oleranzin)-36
b(terv)-72 b(all:)435 b Fm([)8 b(34)221 b Fn(J)123 b
Fm(;)656 b(35)221 b Fn(J)123 b Fm(])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fg(AN)369 b(4.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24746 81281 a Fo(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6921 a Fp(AN)678
b(4.3)e(-)i(8)f(In)-60 b(tegral)677 b(-)g(O)-60 b(A)677
b(-)h(Matura)f(2015/16)f(-)i(Haupttermin)p 0 TeXcolorgray
-741 10229 a Fo(8.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(P)-36 b(otenzfunktion)434 b Fn(f)575 b
Fo(mit)434 b Fn(f)142 b Fm(\()p Fn(x)p Fm(\))368 b(=)h
Fn(x)27860 9747 y Fk(3)28386 10229 y Fo(.)921 14766 y(Gin)433
b(eine)h(Bedingung)f(f\374r)g(die)h(In)-36 b(tegrationsgrenzen)433
b Fn(b)h Fo(und)e Fn(c)h Fm(\()p Fn(b)369 b Fl(6)p Fm(=)g
Fn(c)p Fm(\))433 b Fo(so)h(an,)g(dass)17545 17741 y Fi(Z)18652
18092 y Fe(c)18160 20257 y(b)19115 19303 y Fn(f)142 b
Fm(\()p Fn(x)p Fm(\))221 b(d)p Fn(x)369 b Fm(=)f(0)1301
b Fo(gilt.)p 1 0 0 TeXcolorrgb 921 22742 a Fn(b)369 b
Fm(=)g Fl(\000)p Fn(c)921 27279 y Fo(L\366sungssc)-36
b(hl\374ssel:)921 29824 y(Ein)305 b(Punkt)g(f\374r)g(die)g(Angab)36
b(e)305 b(einer)g(k)-36 b(orrekten)305 b(Relation)i(zwisc)-36
b(hen)305 b Fn(b)g Fo(und)f Fn(c)p Fo(.)i(\304)-36 b(quiv)-72
b(alen)-36 b(te)921 31816 y(Relationen)390 b(sind)g(als)h(ric)-36
b(h)g(tig)389 b(zu)h(w)-36 b(erten,)390 b(eb)36 b(enso)390
b(k)-36 b(onkrete)390 b(Beispiele)h(wie)f Fn(b)369 b
Fm(=)g Fl(\000)p Fm(5)390 b Fo(und)921 33808 y Fn(c)369
b Fm(=)f(5)p Fo(.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 10229 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 12221 a Fg(AN)h(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 37283 V -2331 42712 a Fp(AN)632
b(4.3)e(-)h(9)g(Durc)-60 b(h\035ussrate)629 b(-)j(O)-60
b(A)631 b(-)g(Matura)g(2014/15)f(-)h(Neb)60 b(en-)-2331
45734 y(termin)717 b(1)p 0 TeXcolorgray -741 49041 a
Fo(9.)p 0 TeXcolorgray 651 w(In)413 b(einem)h(W)-108
b(asserrohr)413 b(wird)h(durc)-36 b(h)412 b(einen)h(Sensor)g(die)h
(Durc)-36 b(h\035ussrate)412 b(\(=)h(Durc)-36 b(h\035uss-)921
51033 y(menge)399 b(pro)g(Zeiteinheit\))g(gemessen.)h(Die)g(F)-108
b(unktion)398 b Fn(D)435 b Fo(ordnet)399 b(jedem)g(Zeitpunkt)f
Fn(t)h Fo(die)921 53025 y(Durc)-36 b(h\035ussrate)388
b Fn(D)36 b Fm(\()p Fn(t)p Fm(\))389 b Fo(zu.)h(Dab)36
b(ei)390 b(wird)g Fn(t)f Fo(in)h(Min)-36 b(uten)388 b(und)h
Fn(D)36 b Fm(\()p Fn(t)p Fm(\))388 b Fo(in)i(Litern)f(pro)g(Min)-36
b(ute)921 55017 y(angegeb)36 b(en.)921 59554 y(Gib)433
b(die)g(Bedeutung)g(der)g(Zahl)17315 58607 y Fi(R)18053
58958 y Fk(120)17837 59893 y(60)19741 59554 y Fn(D)36
b Fm(\()p Fn(t)p Fm(\))221 b Fn(dt)432 b Fo(im)i(v)-36
b(orliegenden)434 b(K)-36 b(on)g(text)434 b(an.)p 1 0 0
TeXcolorrgb 921 62100 a(Der)362 b(A)-36 b(usdruc)g(k)361
b(b)36 b(esc)-36 b(hreibt)361 b(die)h(durc)-36 b(h)361
b(das)h(Rohr)f(ge\035ossene)i(W)-108 b(assermenge)362
b(\(in)f(Litern\))887 64092 y(v)-36 b(om)434 b(Zeitpunkt)f
Fn(t)369 b Fm(=)f(60)435 b Fo(bis)e(zum)g(Zeitpunkt)g
Fn(t)369 b Fm(=)f(120)p Fo(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 49041 a Fh(___/1)p 1 0 0
TeXcolorrgb 47998 51033 a Fg(AN)h(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 67825 V 0 TeXcolorgray
24746 81281 a Fo(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fp(AN)737 b(4.3)f(-)g(10)g(Bremsw)-60
b(eg)736 b(-)h(O)-60 b(A)736 b(-)g(Matura)g(2014/15)g(-)h(K)-60
b(omp)60 b(en-)-2331 4622 y(sationspr\374fung)p 0 TeXcolorgray
-1391 7929 a Fo(10.)p 0 TeXcolorgray 651 w(Ein)433 b(PKW)h(b)36
b(eginn)-36 b(t)433 b(zum)h(Zeitpunkt)e Fn(t)369 b Fm(=)g(0)433
b Fo(gleic)-36 b(hm\344\377ig)436 b(zu)d(bremsen.)921
9921 y(Die)451 b(F)-108 b(unktion)449 b Fn(v)498 b Fo(b)36
b(esc)-36 b(hreibt)449 b(die)h(Gesc)-36 b(h)g(windigk)g(eit)451
b Fn(v)48 b Fm(\()p Fn(t)p Fm(\))449 b Fo(des)h(PKW)g(zum)g(Zeitpunkt)g
Fn(t)769 11913 y Fo(\()p Fn(v)48 b Fm(\()p Fn(t)p Fm(\))432
b Fo(in)h(Metern)g(pro)g(Sekunde,)g Fn(t)h Fo(in)f(Sekunden\).)f(Es)i
(gilt:)h Fn(v)48 b Fm(\()p Fn(t)p Fm(\))367 b(=)i(20)296
b Fl(\000)f Fm(8)p Fn(t)p Fo(.)921 16450 y(Berec)-36
b(hne)342 b(die)g(L\344nge)h(desjenigen)f(W)-108 b(eges,)343
b(den)f(der)g(PKW)h(w)-36 b(\344hrend)342 b(des)g(gleic)-36
b(hm\344\377igen)921 18442 y(Bremsv)g(organgs)435 b(bis)e(zum)g
(Stillstand)h(zur\374c)-36 b(klegt.)p 1 0 0 TeXcolorrgb
921 22979 a(M\366glic)g(he)434 b(Berec)-36 b(hn)g(ung:)921
24971 y Fn(v)48 b Fm(\()p Fn(t)p Fm(\))368 b(=)g(0)i
Fl(\))f Fn(t)g Fm(=)f(2)p Fn(;)p Fm(5)12599 27393 y Fi(Z)13706
27744 y Fk(2)p Fe(;)p Fk(5)13214 29908 y(0)15185 28955
y Fm(\(20)296 b Fl(\000)f Fm(8)p Fn(t)p Fm(\))221 b Fn(dt)369
b Fm(=)501 b(\(20)p Fn(t)295 b Fl(\000)h Fm(4)p Fn(t)28510
28407 y Fk(2)29036 28955 y Fm(\))29542 27627 y Fi(\014)29542
28291 y(\014)29542 28955 y(\014)29910 27977 y Fk(2)p
Fe(;)p Fk(5)29910 29675 y(0)31537 28955 y Fm(=)369 b(25)921
33832 y Fo(Die)434 b(L\344nge)g(des)f(Bremsw)-36 b(eges)434
b(b)36 b(etr\344gt)434 b(25m.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fh(___/1)p 1 0 0
TeXcolorrgb 47998 9921 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 37565 54804 45
v 0 TeXcolorgray 24746 81281 a Fo(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fp(AN)508 b(4.3)g(-)g(11)f(Halbierung)f
(einer)h(Fl\344c)-60 b(he)507 b(-)h(O)-60 b(A)508 b(-)g(Matura)f
(2015/16)-2617 4622 y(-)718 b(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7929 a Fo(11.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(die)f(reelle)h(F)-108
b(unktion)433 b Fn(f)576 b Fo(mit)433 b Fn(f)142 b Fm(\()p
Fn(x)p Fm(\))369 b(=)f Fn(x)27715 7447 y Fk(2)28241 7929
y Fo(.)921 12466 y(Berec)-36 b(hne)346 b(die)h(Stelle)g
Fn(b)g Fo(so,)h(dass)f(die)g(Fl\344c)-36 b(he)347 b(zwisc)-36
b(hen)347 b(der)f Fn(x)p Fo(-A)-36 b(c)g(hse)346 b(und)g(dem)h(Graphen)
921 14458 y(der)375 b(F)-108 b(unktion)374 b Fn(f)517
b Fo(im)375 b(In)-36 b(terv)-72 b(all)376 b Fm([)8 b(2;)597
b(4])376 b Fo(in)f(zw)-36 b(ei)376 b(gleic)-36 b(h)375
b(gro\377e)h(Fl\344c)-36 b(hen)375 b Fn(A)37071 14657
y Fk(1)37972 14458 y Fo(und)f Fn(A)41490 14657 y Fk(2)42391
14458 y Fo(geteilt)874 16450 y(wird)434 b(\(siehe)f(Abbildung\).)p
0 TeXcolorgray 0 TeXcolorgray 9915 40857 a
 currentpoint currentpoint translate 1.24446 1.24446 scale neg exch
neg exch translate
 9915 40857
a 10783 40857 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 188.06491 a add def
/d 0.0 a add neg def /h 145.03801 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 10783 40857 a 11807 39611 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray   0.8 SLW 0.25  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0.4 def /x1 0.66 def /dx x1 x sub 49 div
def /F@pstplot (x^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 142.26378 mul F@pstplot 142.26378 mul } def  /ps@Exit false def
xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy
 dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  93.8946 0.0
lineto 56.90463 0.0 lineto closepath gsave 0.25  setgray  0.2 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray   0.8 SLW 0.25  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0.66 def /x1 0.8 def /dx x1 x sub 49 div
def /F@pstplot (x^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 142.26378 mul F@pstplot 142.26378 mul } def  /ps@Exit false def
xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy
 dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  113.81145
0.0 lineto 93.8946 0.0 lineto closepath gsave 0.25  setgray  0.2 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 178.80656  0 -9.25835  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -9.25835
 178.80656  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.25761  def /maxTickline 133.7804  def /dT 1864651 abs 65536 div
viceversa { neg } if def /DT 0.2 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 142.26378  mul cntTick add def x abs MaxValue abs le { false {
x minTickline  moveto x maxTickline  lineto } { x tickstart STsize
mul  moveto x tickend STsize mul  lineto } ifelse } if } for } for
subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0 def }
if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul  moveto cntsubTick maxTickline STsize mul  lineto } { cntsubTick
tickstart STsize mul  moveto cntsubTick tickend STsize mul  lineto
} ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat
subTwidth SLW subTColor subLSstroke grestore } if showOrigin { gsave
false { cntTick minTickline  moveto cntTick maxTickline  lineto } {
cntTick tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 142.26378
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7804
0.0 -11.25761   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.80656
0.0 -9.25835 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 133.7804  0 -11.25761  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -11.25761
 133.7804  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-9.25835  def /maxTickline 178.80656  def /dT 1864651 abs 65536 div
viceversa { neg } if def /DT 0.2 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 142.26378  mul cntTick add def x abs MaxValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet
exch def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add {
/dx exch def /x dx log OffSet add 142.26378  mul cntTick add def x
abs MinValue abs le { false { x minTickline exch moveto x maxTickline
exch lineto } { x tickstart STsize mul exch moveto x tickend STsize
mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth SLW
subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7804
0.0 -11.25761   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.80656
0.0 -9.25835 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11807 39611 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 178.80656 133.7804 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11807 39611
a 11807 39611 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11807 39611 a 11464 39897 a Fo(x)11807
39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  PutEnd  end
 11807 39611 a 11807
39611 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 0.0 0.0 pop 178.80656 133.7804 exch pop } PutCoor
PutBegin  end
 11807 39611 a 11807
39611 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 11807 39611 a 10759 39943 a Fo(f\(x\))11807 39611
y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  PutEnd  end
 11807 39611 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.06508503852943727 def /x1 1.256863485653584
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 142.26378 mul F@pstplot 142.26378 mul }
def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy 
dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 11807 39611 a
tx@Dict begin  { 54.77077 -3.55573 } PutCoor PutBegin  end
 11807 39611 a
571 x Fk(2)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 111.67758 -3.55573 } PutCoor PutBegin  end

11807 39611 a 571 x Fk(4)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a
11807 39611 a
tx@Dict begin  { 71.13188 25.60643 } PutCoor PutBegin  end
 11807 39611 a 828 x Fc(A)12716 40621 y
Fk(1)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 98.16235 25.60643 } PutCoor PutBegin  end
 11807
39611 a 828 x Fc(A)12716 40621 y Fk(2)11807 39611 y
tx@Dict begin  PutEnd  end
 11807
39611 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90463 0.0 56.90463 22.76271   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 93.8946 -0.15411 93.8946 61.96906 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81145 0.0 113.81145 91.04872  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11807 39611 a
tx@Dict begin  { 91.76074 -3.55573 } PutCoor PutBegin  end
 11807 39611 a 615 x Fe(b)11807 39611 y
tx@Dict begin  PutEnd  end

11807 39611 a 11807 39611 a
tx@Dict begin  { 109.40912 109.83893 } PutCoor PutBegin  end
 11807 39611 a 923 x Fn(f)11807
39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 31601 40857 a
currentpoint initclip moveto
 31601 40857 a 9915
40857 a
 currentpoint currentpoint translate 1 1.24446 div 1 1.24446 div scale
neg exch neg exch translate
 9915 40857 a 1 0 0 TeXcolorrgb 921 44842 a Fo(M\366glic)-36
b(he)434 b(Berec)-36 b(hn)g(ung:)921 48432 y Fi(R)1659
48782 y Fe(b)1444 49717 y Fk(2)2338 49379 y Fn(x)3077
48897 y Fk(2)3824 49379 y Fn(dx)369 b Fm(=)6989 48432
y Fi(R)7727 48782 y Fk(4)7512 49717 y Fe(b)8474 49379
y Fn(x)9213 48897 y Fk(2)9961 49379 y Fn(dx)g Fl(\))13575
48856 y Fe(b)13978 48543 y Fb(3)p 13575 49069 864 45
v 13771 49837 a Fk(3)14866 49379 y Fl(\000)16328 48856
y Fk(2)16798 48543 y Fb(3)p 16328 49069 932 45 v 16558
49837 a Fk(3)17761 49379 y Fm(=)19275 48856 y Fk(4)19745
48543 y Fb(3)p 19275 49069 V 19505 49837 a Fk(3)20634
49379 y Fl(\000)22096 48856 y Fe(b)22499 48543 y Fb(3)p
22096 49069 864 45 v 22292 49837 a Fk(3)921 51371 y Fn(b)g
Fm(=)3593 50772 y Fb(3)3260 50287 y Fl(p)p 4367 50287
1301 54 v 1084 x Fm(36)921 55908 y Fo(L\366sungssc)-36
b(hl\374ssel:)921 58454 y(Ein)504 b(Punkt)f(f\374r)h(die)f(ric)-36
b(h)g(tige)504 b(L\366sung.)h(Andere)e(Sc)-36 b(hreib)g(w)g(eisen)502
b(des)i(Ergebnisses)g(sind)921 60446 y(eb)36 b(enfalls)434
b(als)h(ric)-36 b(h)g(tig)433 b(zu)g(w)-36 b(erten.)874
62991 y(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435
b Fm([)8 b(3)p Fn(;)p Fm(29;)657 b(3)p Fn(;)p Fm(31])921
65536 y Fo(Die)608 b(A)-36 b(ufgab)36 b(e)608 b(ist)f(auc)-36
b(h)607 b(dann)g(als)h(ric)-36 b(h)g(tig)607 b(gel\366st)i(zu)e(w)-36
b(erten,)607 b(w)-36 b(enn)607 b(b)36 b(ei)608 b(k)-36
b(orrektem)873 67528 y(Ansatz)433 b(das)h(Ergebnis)f(aufgrund)g(eines)h
(Rec)-36 b(henfehlers)433 b(nic)-36 b(h)g(t)433 b(ric)-36
b(h)g(tig)433 b(ist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 71262 54804 45 v 0 TeXcolorgray
24421 81281 a Fo(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fp(AN)718 b(4.3)f(-)h(12)f(T)-179
b(ac)-60 b(hograph)716 b(-)h(O)-60 b(A)718 b(-)g(Matura)f(NT)g(2)g
(15/16)p 0 TeXcolorgray -1391 4907 a Fo(12.)p 0 TeXcolorgray
651 w(Mithilfe)528 b(eines)f(T)-108 b(ac)-36 b(hographen)527
b(kann)g(die)g(Gesc)-36 b(h)g(windigk)g(eit)528 b(eines)f(F)-108
b(ahrzeugs)526 b(in)h(Ab-)921 6899 y(h\344ngigk)-36 b(eit)528
b(v)-36 b(on)526 b(der)g(Zeit)h(aufgezeic)-36 b(hnet)527
b(w)-36 b(erden.)526 b(Es)h(sei)g Fn(v)48 b Fm(\()p Fn(t)p
Fm(\))525 b Fo(die)h(Gesc)-36 b(h)g(windigk)g(eit)921
8891 y(zum)442 b(Zeitpunkt)h Fn(t)p Fo(.)g(Die)g(Zeit)g(wird)g(in)g
(Stunden)e(\(h\))h(angegeb)36 b(en,)443 b(die)g(Gesc)-36
b(h)g(windigk)g(eit)921 10882 y(in)433 b(Kilometern)h(pro)g(Stunde)e
(\(km/h\).)921 13428 y(Ein)h(F)-108 b(ahrzeug)433 b(startet)g(zum)h
(Zeitpunkt)e Fn(t)369 b Fm(=)g(0)p Fo(.)921 15973 y(Gib)433
b(die)g(Bedeutung)g(der)g(Gleic)-36 b(h)g(ung)18939 18211
y Fi(Z)20046 18561 y Fk(0)p Fe(;)p Fk(5)19554 20726 y(0)21525
19773 y Fn(v)48 b Fm(\()p Fn(t)p Fm(\))o Fn(dt)368 b
Fm(=)h(40)921 23413 y Fo(un)-36 b(ter)432 b(V)-108 b(erw)-36
b(endung)432 b(der)h(k)-36 b(orrekten)434 b(Einheiten)f(im)h(gegeb)36
b(enen)433 b(K)-36 b(on)g(text)434 b(an!)p 1 0 0 TeXcolorrgb
921 27951 a(Diese)450 b(Gleic)-36 b(h)g(ung)448 b(sagt)i(aus,)f(dass)h
(das)f(F)-108 b(ahrzeug)448 b(in)h(der)g(ersten)f(halb)36
b(en)449 b(Stunde)f(\(bzw.)921 29943 y(im)434 b(Zeitin)-36
b(terv)-72 b(all)434 b Fm([)8 b(0)221 b Fn(h)p Fm(;)g(0)p
Fn(;)p Fm(5)g Fn(h)p Fm(])p Fo(\))436 b(40)e(km)g(zur\374c)-36
b(kgelegt)434 b(hat.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4907 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 6899 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 33750 54804 45 v 0 TeXcolorgray
24421 81281 a Fo(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fp(AN)1053 b(4.3)f(-)h(13)f(P\035anzen)-60
b(w)g(ac)g(hstum)1052 b(-)h(O)-60 b(A)1052 b(-)h(Matura)f(2013/14)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -1391 7929 a Fo(13.)p
0 TeXcolorgray 651 w(Die)483 b(un)-36 b(ten)481 b(stehende)h(Abbildung)
f(b)36 b(esc)-36 b(hreibt)482 b(n\344herungsw)-36 b(eise)482
b(das)g(W)-108 b(ac)-36 b(hstum)482 b(einer)921 9921
y(Sc)-36 b(hnellw\374c)g(hsigen)455 b(P\035anze.)g(Sie)h(zeigt)g(die)f
(W)-108 b(ac)-36 b(hstumsgesc)g(h)g(windigk)g(eit)456
b Fn(v)502 b Fo(in)456 b(Abh\344n-)921 11913 y(gigk)-36
b(eit)435 b(v)-36 b(on)434 b(der)f(Zeit)g Fn(t)h Fo(w)-36
b(\344hrend)433 b(eines)g(Zeitraums)h(v)-36 b(on)433
b(60)i(T)-108 b(agen.)p 0 TeXcolorgray 0 TeXcolorgray
921 38126 a
 currentpoint currentpoint translate 0.96008 0.96008 scale neg exch
neg exch translate
 921 38126 a 921 38126 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 423.20209 a add def
/d 0.0 a add neg def /h 208.11896 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 38126 a 3014
35498 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45273 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 404.29427 0.0 -18.90782 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45273 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.4523 0.0 T 15 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 184.37376 0.0 -23.7452   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.4523 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 404.29427  0 -18.90782  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -18.90782
 404.29427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.7452  def /maxTickline 184.37376  def /dT 1864650 abs 65536 div
viceversa { neg } if def /DT 5. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 5.69046
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 184.37376
0.0 -23.7452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 404.29427
0.0 -18.90782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 184.37376  0 -23.7452  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.7452
 184.37376  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.90782  def /maxTickline 404.29427  def /dT 1864678 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 184.37376
0.0 -23.7452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 404.29427
0.0 -18.90782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1833 32562 a Fb(2)1833 29413
y(4)1833 26263 y(6)1833 23113 y(8)1427 19964 y(10)1427
16814 y(12)5961 36701 y(5)2540 b(10)2338 b(15)f(20)h(25)f(30)h(35)g(40)
f(45)h(50)f(55)h(60)f(65)h(70)3014 35498 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3014 35498
a 3014 35498 a
tx@Dict begin  { 404.29427 184.37376 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 5.0 44.86206 6.0 2.0 140.  Uput UUput } PutCoor PutBegin
 end
 3014 35498 a
531 35719 a Fe(t)313 b Fa(\(in)h(T)-78 b(agen\))3014
35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a 3014 35498 a
tx@Dict begin  PutEnd  end
 3014 35498 a 3014 35498
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 0.0 0.0 pop 404.29427 184.37376 exch pop } PutCoor
PutBegin  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 5.0 62.51053 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end

3014 35498 a -446 35719 a Fe(v)32 b Fk(\()p Fe(t)p Fk(\))313
b Fa(\(in)h(cm/T)-78 b(ag\))3014 35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a
3014 35498 a
tx@Dict begin  PutEnd  end
 3014 35498 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 227.61841 56.90546 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52301 56.90546 227.61841 56.90546
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 341.42761 0.0 284.52301 56.90546  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3014 35498 a
tx@Dict begin  { 117.896 35.61757 } PutCoor PutBegin  end
 3014 35498 a Fe(v)3014
35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a 47768 38126 a
currentpoint initclip moveto
 47768 38126 a 921
38126 a
 currentpoint currentpoint translate 1 0.96008 div 1 0.96008 div scale
neg exch neg exch translate
 921 38126 a 5977 x Fo(Gib)366 b(an,)i(um)f(wie)g(viel)i(cm)e
(die)g(P\035anze)g(in)g(diesem)g(Zeitraum)g(insgesam)-36
b(t)367 b(gew)-36 b(ac)g(hsen)367 b(ist!)p 1 0 0 TeXcolorrgb
1054 46125 a Fk(40)p Fj(\001)p Fk(4)p 1054 46338 1673
45 v 1655 47106 a(2)3155 46648 y Fm(+)294 b(10)i Fl(\001)f
Fm(4)h(+)9107 46125 y Fk(10)p Fj(\001)p Fk(4)p 9107 46338
V 9708 47106 a(2)11281 46648 y Fm(=)369 b(140)921 49193
y Fo(Die)434 b(P\035anze)f(w)-36 b(\344c)g(hst)434 b(in)f(diesen)h(60)g
(T)-108 b(agen)434 b(140)g(cm.)921 51739 y(Ein)551 b(w)-36
b(eiterer)551 b(\(sehr)f(aufw)-36 b(endiger\))552 b(L\366sungsw)-36
b(eg)551 b(w)-36 b(\344re)551 b(die)h(Berec)-36 b(hn)g(ung)549
b(der)i(F)-108 b(unkti-)921 53731 y(onsgleic)-36 b(h)g(ung)425
b(in)f(den)g(einzelnen)g(W)-108 b(ac)-36 b(hstumsabsc)g(hnitten)423
b(so)-36 b(wie)426 b(die)e(Berec)-36 b(hn)g(ung)424 b(der)921
55723 y(en)-36 b(tsprec)g(henden)431 b(b)36 b(estimm)-36
b(ten)433 b(In)-36 b(tegrale.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fh(___/1)p 1 0 0
TeXcolorrgb 47998 9921 a Fg(AN)369 b(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 59456 54804 45
v 0 TeXcolorgray 24421 81281 a Fo(12)p 0 TeXcolorgray
eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fp(AN)479 b(4.3)f(-)g(14)g(Gesc)-60
b(h)g(windigk)g(eitsfunktion)474 b(-)479 b(O)-60 b(A)478
b(-)h(Matura)f(2013/14)-2438 4622 y(1.)717 b(Neb)60 b(en)-60
b(termin)p 0 TeXcolorgray -1391 7929 a Fo(14.)p 0 TeXcolorgray
651 w(Die)534 b(nac)-36 b(hstehende)532 b(Abbildung)h(zeigt)h(den)f
(Graphen)f(einer)h(F)-108 b(unktion)533 b Fn(v)48 b Fo(,)533
b(die)h(die)f(Ge-)921 9921 y(sc)-36 b(h)g(windigk)g(eit)434
b Fn(v)48 b Fm(\()p Fn(t)p Fm(\))432 b Fo(in)i(Abh\344ngigk)-36
b(eit)434 b(v)-36 b(on)434 b(der)f(Zeit)h Fn(t)f Fo(\()p
Fn(t)g Fo(in)g(Sekunden\))f(mo)36 b(delliert.)p 0 TeXcolorgray
0 TeXcolorgray 7667 28497 a
 currentpoint currentpoint translate 0.78598 0.78598 scale neg exch
neg exch translate
 7667 28497 a 8101 28497 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 357.93555 a add def
/d 0.0 a add neg def /h 185.52191 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

8101 28497 a 12384 26419 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 319.2398  0 -38.69574  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -38.69574
 319.2398  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.77982  def /maxTickline 166.7421  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 166.7421
0.0 -18.77982   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 319.2398
0.0 -38.69574 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 166.7421  0 -18.77982  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -18.77982
 166.7421  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-38.69574  def /maxTickline 319.2398  def /dT 1864780 abs 65536 div
viceversa { neg } if def /DT 20. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 166.7421
0.0 -18.77982   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 319.2398
0.0 -38.69574 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 10668 23554 a Fk(20)10668 20404
y(40)10668 17255 y(60)10668 14105 y(80)10198 10955 y(100)15299
27764 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445 b(10)2209
b(11)-38866 b Fj(\000)p Fk(1)12384 26419 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12384 26419
a 12384 26419 a
tx@Dict begin  { 319.2398 166.7421 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 12384 26419 a 12384 26419 a
tx@Dict begin  { 5.0 4.56934 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12384 26419
a 12131 26837 a Fo(t)12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a 12384
26419 a
tx@Dict begin  PutEnd  end
 12384 26419 a 12384 26419 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12384 26419 a 12384
26419 a
tx@Dict begin  { 0.0 0.0 pop 319.2398 166.7421 exch pop } PutCoor PutBegin
 end
 12384 26419 a 12384 26419 a
tx@Dict begin  { 5.0 19.90952 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 12384 26419 a 11282
26751 a Fo(v\(t\))12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a 12384 26419
a
tx@Dict begin  PutEnd  end
 12384 26419 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0. def /x1 10. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+100.0)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271
mul lt { moveto } { L } ifelse } ifelse  } if  284.52744 0.0 lineto
0.0 0.0 lineto closepath gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10 def /dx x1 x sub 199
div def /F@pstplot (-x^(2.0)+100.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271 mul
gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse }
ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup
1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 12384 26419 a
tx@Dict begin  { 176.40692 105.28085 } PutCoor PutBegin  end

12384 26419 a 572 x Fo(v)12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ -284.52744
0.0   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 47723 28497 a
currentpoint initclip moveto

47723 28497 a 7667 28497 a
 currentpoint currentpoint translate 1 0.78598 div 1 0.78598 div scale
neg exch neg exch translate
 7667 28497 a 921 34474 a Fo(Gib)433
b(an,)h(w)-36 b(as)434 b(die)f(A)-36 b(ussage)17094 36711
y Fi(Z)18201 37062 y Fk(5)17709 39227 y(0)18949 38274
y Fn(v)48 b Fm(\()p Fn(t)p Fm(\))n Fo(d)p Fn(t)369 b(>)24048
36711 y Fi(Z)25155 37062 y Fk(10)24663 39227 y(5)26373
38274 y Fn(v)48 b Fm(\()p Fn(t)p Fm(\))o Fo(d)o Fn(t)921
41914 y Fo(im)434 b(v)-36 b(orliegenden)434 b(K)-36 b(on)g(text)433
b(b)36 b(edeutet!)p 1 0 0 TeXcolorrgb 921 46451 a(Die)574
b(zur\374c)-36 b(kgelegte)575 b(W)-108 b(egstrec)-36
b(k)g(e)574 b(ist)f(in)h(den)f(ersten)g(5)h(Sekunden)f(gr\366\377er)h
(als)g(in)g(den)921 48443 y(zw)-36 b(eiten)434 b(5)g(Sekunden.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7929 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fg(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 51918 54804 45 v 0 TeXcolorgray 24421 81281 a Fo(13)p
0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fp(AN)703 b(4.3)f(-)h(15)f(Fl\344c)-60
b(heninhaltsb)60 b(erec)-60 b(hn)g(ung)698 b(-)k(MC)h(-)g(Matura)f(NT)
-2438 4515 y(1)717 b(16/17)p 0 TeXcolorgray -1391 7823
a Fo(15.)p 0 TeXcolorgray 651 w(In)300 b(der)f(nac)-36
b(hstehenden)298 b(Abbildung)h(sind)h(die)g(Graphen)e(der)i(P)-36
b(olynomfunktionen)301 b Fn(f)441 b Fo(und)921 9815 y
Fn(g)389 b Fo(dargestellt.)344 b(Diese)e(sc)-36 b(hneiden)341
b(einander)g(an)h(den)f(Stellen)h Fl(\000)p Fm(3)p Fn(;)p
Fm(0)h Fo(und)e Fm(3)h Fo(und)f(b)36 b(egrenzen)921 11806
y(die)433 b(b)36 b(eiden)433 b(grau)h(markierten)g(Fl\344c)-36
b(henst\374c)g(k)g(e.)p 0 TeXcolorgray 0 TeXcolorgray
9916 33518 a
 currentpoint currentpoint translate 0.75958 0.75958 scale neg exch
neg exch translate
 9916 33518 a 9916 33518 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 320.94604 a add def
/d 0.0 a add neg def /h 230.12495 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9916 33518 a 26923
22557 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -68.28644 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 167.30156 0.0 -153.64449 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 34.14322 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -136.57288 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 131.10983 0.0 -99.01512   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 34.14322 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 167.30156  0 -153.64449  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -153.64449
 167.30156  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.01512  def /maxTickline 131.10983  def /dT 2237610 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 34.14322  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 34.14322
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.10983
0.0 -99.01512   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.30156
0.0 -153.64449 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 131.10983  0 -99.01512  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.01512
 131.10983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-153.64449  def /maxTickline 167.30156  def /dT 2237610 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 34.14322  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 34.14322  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.10983
0.0 -99.01512   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.30156
0.0 -153.64449 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25678 19063 a Fk(1)25678 15283
y(2)25678 11504 y(3)24946 26576 y Fj(\000)p Fk(1)24946
30355 y Fj(\000)p Fk(2)30468 23903 y(1)3309 b(2)h(3)f(4)-19733
b Fj(\000)p Fk(1)-4982 b Fj(\000)p Fk(2)h Fj(\000)p Fk(3)f
Fj(\000)p Fk(4)26923 22557 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26923 22557 a 26923 22557
a
tx@Dict begin  { 167.30156 131.10983 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26923 22557 a 26923 22557 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26923 22557 a 26580 22843
a Fo(x)26923 22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 26923 22557 a
tx@Dict begin  PutEnd  end
 26923
22557 a 26923 22557 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26923 22557 a 26923 22557 a
tx@Dict begin  { 0.0 0.0 pop 167.30156 131.10983 exch pop } PutCoor
PutBegin  end
 26923
22557 a 26923 22557 a
tx@Dict begin  { 5.0 43.40958 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26923 22557 a 24521 22889 a Fo(f\(x\),g\(x\))
26923 22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 26923 22557 a
tx@Dict begin  PutEnd  end
 26923 22557
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x -3. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (0.2*(x+3.0)*x*(x-3.0))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 34.14322 mul F@pstplot 34.14322 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30
34.14322 mul lt { moveto } { L } ifelse } ifelse  } if  102.42966 0.0
lineto  0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def    /x 3. def /x1 -3.
def /dx x1 x sub 49 div def /F@pstplot (-0.06*(x+3.0)*(x-3.0)*x*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot
34.14322 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 34.14322 mul gt { moveto
} { dup -1.e30 34.14322 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 34.14322
mul gt { moveto } { dup -1.e30 34.14322 mul lt { moveto } { L } ifelse
} ifelse  } if  -102.42966 0.0 lineto closepath gsave 0  setgray  0.1
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.500000000000003 def /x1 4.900000000000003
def /dx x1 x sub 199 div def /F@pstplot (0.2*(x+3.0)*x*(x-3.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot 34.14322 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30
34.14322 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.500000000000003 def /x1 4.900000000000003
def /dx x1 x sub 199 div def /F@pstplot (-0.06*(x+3.0)*(x-3.0)*x*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot
34.14322 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } {
dup -1.e30 34.14322 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26923 22557 a
tx@Dict begin  { 74.43196 57.36035 } PutCoor PutBegin  end
 26923 22557 a 572 x Fn(g)26923 22557 y
tx@Dict begin  PutEnd  end

26923 22557 a 26923 22557 a
tx@Dict begin  { -52.58032 83.99254 } PutCoor PutBegin  end
 26923 22557 a 922 x Fn(f)26923
22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 45443 33518 a
currentpoint initclip moveto
 45443 33518 a 9916
33518 a
 currentpoint currentpoint translate 1 0.75958 div 1 0.75958 div scale
neg exch neg exch translate
 9916 33518 a 855 37502 a Fo(W)-108 b(elc)-36
b(he)368 b(der)g(nac)-36 b(hstehenden)367 b(Gleic)-36
b(h)g(ungen)368 b(geb)36 b(en)368 b(den)g(Inhalt)h Fn(A)g
Fo(der)f(\(gesam)-36 b(ten\))368 b(grau)921 39494 y(markierten)434
b(Fl\344c)-36 b(he)433 b(an?)h(Kreuze)f(die)h(b)36 b(eiden)433
b(zutre\033enden)e(Gleic)-36 b(h)g(ungen)433 b(an!)p
7632 40461 31120 45 v 7632 45388 45 4928 v 8340 43397
a Fn(A)369 b Fm(=)11065 41737 y Fi(\014)11065 42401 y(\014)11065
43065 y(\014)11065 43730 y(\014)11434 41835 y(Z)12541
42186 y Fk(3)12049 44351 y Fj(\000)p Fk(3)13528 43397
y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))295 b Fl(\000)g
Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))220 b Fo(d)p Fn(x)22801
41737 y Fi(\014)22801 42401 y(\014)22801 43065 y(\014)22801
43730 y(\014)p 36342 45388 V 38708 45388 V 7632 45432
31120 45 v 7632 50267 45 4835 v 8340 48369 a Fn(A)369
b Fm(=)g(2)296 b Fl(\001)12675 46807 y Fi(Z)13782 47157
y Fk(3)13290 49322 y(0)14529 48369 y Fm(\()p Fn(g)48
b Fm(\()p Fn(x)p Fm(\))294 b Fl(\000)h Fn(f)142 b Fm(\()p
Fn(x)p Fm(\)\))221 b Fo(d)p Fn(x)p 36342 50267 V 38708
50267 V 7632 50311 31120 45 v 7632 55238 45 4928 v 8340
53248 a(A)369 b Fm(=)11065 51686 y Fi(Z)12172 52037 y
Fk(0)11680 54201 y Fj(\000)p Fk(3)13159 53248 y Fm(\()p
Fn(f)142 b Fm(\()p Fn(x)p Fm(\))295 b Fl(\000)g Fn(g)48
b Fm(\()p Fn(x)p Fm(\)\))220 b Fo(d)p Fn(x)295 b Fm(+)24034
51686 y Fi(Z)25141 52037 y Fk(3)24649 54201 y(0)25888
53248 y Fm(\()p Fn(g)48 b Fm(\()p Fn(x)p Fm(\))295 b
Fl(\000)g Fn(f)142 b Fm(\()p Fn(x)p Fm(\)\))p Fo(d)o
Fn(x)p 36342 55238 V 1 0 0 TeXcolorrgb 37051 53107 a
Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
38708 55238 V 7632 55283 31120 45 v 7632 60210 45 4928
v 8340 58219 a Fn(A)369 b Fm(=)11065 56559 y Fi(\014)11065
57223 y(\014)11065 57887 y(\014)11065 58552 y(\014)11434
56657 y(Z)12541 57008 y Fk(0)12049 59173 y Fj(\000)p
Fk(3)13528 58219 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p
Fm(\))295 b Fl(\000)g Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))220
b Fo(d)p Fn(x)22801 56559 y Fi(\014)22801 57223 y(\014)22801
57887 y(\014)22801 58552 y(\014)23465 58219 y Fm(+)24772
56657 y Fi(Z)25879 57008 y Fk(3)25387 59173 y(0)26626
58219 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))295 b
Fl(\000)g Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))p Fo(d)o Fn(x)p
36342 60210 V 38708 60210 V 7632 60254 31120 45 v 7632
65181 45 4928 v 8340 63191 a(A)369 b Fm(=)11065 61629
y Fi(Z)12172 61979 y Fk(0)11680 64144 y Fj(\000)p Fk(3)13159
63191 y Fm(\()p Fn(f)142 b Fm(\()p Fn(x)p Fm(\))295 b
Fl(\000)g Fn(g)48 b Fm(\()p Fn(x)p Fm(\)\))220 b Fo(d)p
Fn(x)295 b Fm(+)24034 61530 y Fi(\014)24034 62195 y(\014)24034
62859 y(\014)24034 63523 y(\014)24403 61629 y(Z)25510
61979 y Fk(3)25018 64144 y(0)26257 63191 y Fm(\()p Fn(f)142
b Fm(\()p Fn(x)p Fm(\))295 b Fl(\000)g Fn(g)48 b Fm(\()p
Fn(x)p Fm(\)\))p Fo(d)o Fn(x)35309 61530 y Fi(\014)35309
62195 y(\014)35309 62859 y(\014)35309 63523 y(\014)p
36342 65181 V 1 0 0 TeXcolorrgb 37051 63050 a Fd(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 38708
65181 V 7632 65226 31120 45 v 47992 7823 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fg(AN)369 b(4.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69254
54804 45 v 0 TeXcolorgray 24421 81281 a Fo(14)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

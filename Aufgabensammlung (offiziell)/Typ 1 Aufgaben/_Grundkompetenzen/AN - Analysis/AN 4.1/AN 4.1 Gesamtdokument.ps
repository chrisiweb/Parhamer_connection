%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 4.1/AN 4.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:43:41 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular
%%+ LMMathSymbols10-Regular wasy10 LMRoman10-Regular
%%+ LMMathItalic12-Regular LMRoman8-Regular LMMathItalic8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 4.1/AN 4.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0843
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A55A5F1266927F5FDE691BCDEA8298E5FE1C77D175A
EDAB8978A6AF90E1B7B966A35A2B4C50E902A0BF6DE9CC6DA50A8198D68D7B41
96E30CCA79C8C240CF751AC2AD65E979A3F448112F88CAFFA1CAEB0485384AD7
652C5F7CC632FCA58FD07106982317E50D73673FAE359D2A94F1DBF3AF6483D1
059435173B5538EBE18CA17391CAC6705CE4CA8FF7ECE554F889B33AA2211FCC
B53A858FD88168BC3CC856CAAB940A30D3EFC19D6DEEACE320B2C448490A1856
58A73D21915C3C4DB4CD331C934C1480AB728E15192049F518878BAFDB76C475
04994D4B9216A13276F18CDAE5DC896C9797565F0DC305672CB7D47D3284C732
25290F2C9C528F868E67467EF1D4B61D1BF203AB8CCE5164EB3859F62AEB1FD8
6EBC2E3C2E7B39750E8F9A55F4537371E66C2A6B4D94F09ABF15DCD13AA10A3A
910EE030D07494AC31ACB5338C72A6C5579C8797D43CD9F9DC299E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BA22C873A42C13AFF73AACC425448
8A571F1CF7A9B7009077815F2D3488996A754F0D89465BD9F32B061E78C54C77
BC1DF51167138A612BAFE409CBEF302E61421FC31A29D22A5C46B2E75557BFA0
C123C0DBC44BC7BA77E553FA3B4CE88FE87326511247518E629A2B70B0577881
BA6D9347F9A8303DAD8BDEEE87084A06B962B7E28A73BE0B2713DFD32DEABA29
3EEA5ABD85A37B1F3D63ECFC9C885D638355D76EA0130CCE173653E1733940CD
BEC9B476678A7BCD0C6AACB39F1863ECE4DDE11AA3604E2022AFC909284A4D43
B90779468E29838365121EAD77DB71CBA6FAE1532A4AB7095F9B0A6F329CF352
2C813AFD3714B9A4A8A22C26D9970DF9F48A4C3A801E35A650279607C8CCD738
1713A93E5F02E55EF58E729E06BA415230C0578017DC87B4B835C7DE472E783C
F2984139C440B1826E3D41A3E8AADCDB4D18753287AF757E77D486D15908302B
0425976C12C80E4D9A88629DE47E52E3669AB62A75EB16BCD26BD752DE5BB21D
C9C7FCBF815D3F994BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3FD13EEEB24
95BE6DDF7C7106C66F3EF6A89F9D6EE68EEE45A1E9807DE85363DF1E37946025
9D44CE016453B2D233667BE25173D9C0204E159D8118F38CC7E8D94F702D9143
ED9E898E52F2294018E293B4D500F009C2ED820B75D4FACAEFA4489F2CEDCDAA
EBE72E55AB10A4980F44CC84F8DD351882D0FCBBAD99AAAD749454CDC40CBD7F
0339D4128C54EB3CC09A62F2A89E84964B2B68602D92E9EFF00404D754001050
958C69140F1F2C1AA25026527B2EF907DFBA55256CECAE9184C1E3851FCE2BA9
A86A1DEAE130B5530C1917A4F87FF7F363B07C255B5668BCC4131C4B68F931B3
8C1B6DE01DCE214039661FEFE4192FD100809C134A2832CD7CC85B9E09A7E4A3
E6E6A2A78B067639910B6935A8E302D671DF62BBA5AF20A2AAAA97D4662A0852
631CCF8BEF92621606CE2CFA8C707E2BD307DCFE31154FD33D8E79B4C628C92A
F3A011B67DDB6DCD3851E1A88153CFCBB70E29B7073AB33F7BE2B6BD070ED972
739DDB5E76905BDA40053AC0682B3DA7C3FE91CE873318EAFBC59BF0404A36DB
4A079CF92AFED25998FA64BE8C6EB7FBCCCA5B71D3926A5888D4EE45DEBA1EEA
B80C419DC8C616BA9F1AA22C72790A97CE703AAA6CC20E3D27A37D4D89E34BD8
A09FC863DBD2D14764D82C2AD22BBFE55282BB6318921169C7F112991FDA6318
1543D422A62B3EA98F5ADA485A644A34CD0F70B5ADA7DCC9E1BC9550AAD0D3F4
DE56356F862D6764FD9EA134359F4325E47A8EB324726265816EDBA8EF142D29
40FCF6BAF56E06CE4F88864914D7D81C5657BA7B9731022F6162690200A28AB4
B66CBDAA6FAF5FE860DE4F130A0B512508C2C20415E9373CC6C277134E2D1F4F
68497AC29C25BB37EF93A77D572B38C926513148B56545824357824C0DDE6173
BBF3709EC3E06DA87B352C112826B536E97BD80A864C4B86F081C13CC7F054CC
DD5814AD3F55788ACD7BDB711D176644423FC14B3B6A521FDAF9659437755CAA
6C23D8D3709555171027D0D8FF71335393155D5C4F6C2842EC99D61E3C89A3CA
8622749CD748167B9B8C3B8974A281B8F074459F198B873D8966D47877D7DE7C
0F59C4C2E2B803F299EC1C19CF2417E6CE8288EB6581FD0F0738902FA33771DD
1F4C5BEF5A58984745B628FB90A37E236FBDD1263A9AEDB29E4E4BB676DDFF2B
9DAB14A41206C3350B9DFC1DEC1CA575453DCF00A0FFECC8A7D0D58259E53A4B
20129777C73D93EB834B271794C994A3F9821E4E9B9023B08C7CE8D31D2A5267
D426490071462F24E9823DD5AC2A249D44E4C356F4B84AF763EECCA28D26DCDD
EBA956D677C9E906BE2DB825932C2779C3B008AF46AFF74781F045E3D3F22855
82AC13268CA45E353D5F4E3378154FD0C9971F4185BC72EFB20DAF8A28FF1410
DDFDFFCC9BAFDC23595C362AE27EFE633C28A2F142B8069EA0BA7A8CE3B177F1
0B0604B3C16CEB0953DC37D84551822035499D4D963D707AEF431E09602E47C6
5C1BDD1347412F127F53BD645BE24281BDC1FD61013AB7602079B3C763CEF768
ED28E1E6CCC05F61819E9D2C464D0E3D7358A6A00DAAF084A753B513A289FBBE
D75E3EE8C1117912BAF8575ABB279490402EBA1C517C4D39F288709F39BF4475
3446E7C82ED6B9ADD6CAF63EB65E0288B9FBF074392D462BE1D16E320913DE0F
6F5038EC5FBFE0A25EC67059960046A1D065E1C970503369C085E43BF6C2E3F2
57F4649984D3AD1625E1E2E27C86275428DDACCF52A8DD6A877DE6AEA9C31716
B90E12DED216DA70951F397CFB0152D3DB9960299762C614569978F12A7A34A9
12BC2CE3D2B8F62307FF377AFF3E08DCA18B76F49F9D6AB129F905F7F25D0B86
F81C2D98511AC43F3A71CB424C72AF75C1818F6A1D31936CDB2035BA06E80AA6
BE0A001415F381236D5875F91343190C4D60994B9841785A373BCE4C0A125D46
6AFCF396F6DA5F25B7F09726EA135FCB1195C608C43B81106ECDF281A3C0B28B
692C979B4525E8416562C7BC68E80163A53996AFE9580C5338EC127B9D910ED5
9D59AAF9D1D918A30005C31F177816336B74AF8B9931BEC0C36D91E186CC4C1D
1A0777414CA0B3EC93B33505DF47884AA0A1DB2E4C4AE4356CE80939AFF6ABE7
2FF971C3640E37544A0768AF6483293056805F5D584C42B434EAE978CB24FA02
785FC4D548C25F5724F829D372D558AD603C5E040A1E996245BF51EB4895D435
8CB69DCD788070743D0E2E7FFE9382A570237B4D891245EB3074E0D4D0EDA5DD
40DE855B47289C449B6AD8D5F1D557102050EDA0F73764E81E3594AC3AF5771B
AC834A3CF62FF78338CF581EE96BC106975A61A8C6A1AC0878EC2EB7C1B7E2FC
A9089A8A29528E45C47F09C56AD5389C3EE8DFE85E64B2F53EE9AC0EDD494087
DBEDF3E9C4678E6952E324200EA11D6366AF685F88D99F32705FFB5C31909190
4FA8531D232D35EC5F35D5AD07347B69DBC55E6DD283F3B17DF4B50BA78292EC
4A87C2AFD19F1F2B77AECBBC38AF8EBAE45C678123B4BDFF5BC6A4897682B3C9
EC9D8048CD9239790F6B0B3DD6FACF052D2E1C0EB34672AA7DA83076F41FEC04
B5C12B40DD1B386D89AD8616B4153C01975AAA6FC10413A373A9E0DDCE6E0CB2
0084673727A2E7BED36EB2C52BA18EF531DE09B52B7093D785F43D7EFBF4C903
F54E22E2B141D5417FC4E56B370A532047D92A947F2328348B3A1D3B71F26F2F
83281B0E9F6BDD348DC91FB8489CDEE8BC223C4281DDCA5F7DA80BD5C2D49C62
DB73373C3843AC9611EE9F5C09B646D3235BC30D4E9BF6B5FA6D56A8B182BA09
4D5712E7D033481A51D2F6B2320F6AD8E6CFB0D2666679C13A65E1D6872B1D7C
251769E060E6EB754F8E89B075418D032D7BD972EEA424F03CB596517EF1FC46
5570CE0EE6B820385CA362A33BAC1ACD31713A7D8FEA52AE1C01905E075CD64C
D576B635554C9B7F8041AAC5EFE5279BBF86B6202987549707DB4325410E297D
9CB2CE808E380D41EBEA85F76EBB37D2B0D8A303AD186A5DDB0595138C0E3D75
7E8DBDF8DB662D44654351CE8F69FF905AAEF9CAE80C6547E8935DB67B666B84
BC164518713BBBD20E129189FB1A1752C8CC0C922AEF593F091226BD53504A41
4099BA8E0F093A487C130D8C59F8E6BC0A3D6A21AA60543F3470B82918D15A0E
BF2C8F288214125072AE15C467502382EFE4E780B54AA85ADF6C9108935595DA
856256A5356184297668260F9660B2CDB579997221C2C67CE3734D2953D9A0A1
B9125089C81E44D816B21F76617F02A6A47EB1F349BF6C97AEB8FC5D08D236FB
614E30E108FAFE34394358212CB5E6BEB03195FD884DD681F71BF2430F208782
A53B7D888417DC58B0A0269A1FD38BAB95AA31DF4BE8804458E1BC721376F31F
E8955F98B6EB4F83AD59AAFFCECC01B36F9A00C6661BD18215AF41660910B4BD
E9E7492FC44758D679C99C0DC18B9323EE4C860FF71AA6F0A94B8FC522D0C214
11649FD176AD20552DD3CD9831BE0D734495E8F1DDB4A363C64AADBB2C264DAC
2683292C09C46072BE137E86DD236CE646A80DA4763ACDFBAEC50F70C8AE9FDC
2329F354FC6CEB056DA13FA2E26DF994B2C56465DA23F79C2751E13EF7681E84
8E94E05FD7AA1B738870536B18D3082F4AF64EC932495BA9CA2E2B7D736DB0F3
2541B8D32B5C20AEBCF90394AF9050332212CD062A6B96FB18552EDB51B99187
09B6EE9015FD53827C84050FACE29DC5A593B40E732D3FB28E01305AED22847F
855960CC952649426FBD46FBB445EAD19252843B5D9A3073EFCA93AB9C60B469
6B15B6AF32771EC35651395E03113FFC2CED08DE4689EFEAABF87E071F2636D7
287B209D2A7FB3F8FE3FF0191A1BBE22E1AA0F68375EA6894B275D26BBEC215C
81BDA1A9E006AB94FA7AEE0D09A156F4D660BB7762608BF6F493CB13BA981A6E
A85C135F60246D47ECC90571044E7021EF83B1D32C3D557ED2F6F284CBCF8856
B2A22E72C0C523F84FAAF4FC705F328AAD4BFBB6446E31DBCB71346111EAFD32
BF0920CB5BCC1E59D9628533AE56E6573FA379A0819A4B1ACFEA93279C0F0359
B111EB0D421D19FCC95E04A90E6EE828C6B850A1088114534F6D36E4D6B56F63
7E15B7DAA42865754BD16974B378E6027C5BBA2D1762B4761C19ABD091B4EDE2
91A7B3E3C3EB2EE0147F8F52BED696A77FA249F7FB42C3AD725A2D8C939362D7
875DB967E0EB8A83CFE7D02946CD6843B8FAA2BA68EBD246365AF506D88E3237
9E2C8F02E1379F36DB5250CBB1018136EFF66ED148DEDE278AD1B30ADCA9387F
CAB269D72AD21B60115A395877B1E42F8AAEEB135141C89D8593815ACD94C2BD
0401740C0E41DBEFE21209DD13BB4B0C8E797FB00B7026D3CAE5BCD397BA1FDC
A43DFE85DC72B972ECAD6962C317C1306D4ADE0B26B643227743416382BEBAC1
F28D2011FC1FFE6726AE7DE624006CE68B3FFFA58D8467322EB65A2F8BC60506
05CB87F380D797700DE689787EDD1CAA6A64AF8E34D611F2A805FB9724346788
FADC94A77124E291CB27BF10E4EFC417FDB11EDC2AA37261E130910A5DE1AF58
CAC3F06DD1F83FA50C829476A84492BF9B8D010255944700567530AACDF0713A
134D1360C711A40FE7FE508CDB795A3BFDCC677892BF3493E0EDAB19EF160337
3D80117733976840A4D7ACF575B5B7D6EE6C93965F91E2AF1B7A0E4211442CC1
A368FC203590D105D3EE27FC276277140155EAAE420BED212F8540A9FF11ADA2
9B5A795C29AF1758A378BBED7FC085A00116FAFDD66C3DBFE6419612225D642C
EBA1A8A241EA0CDCB1659C7C1D4462EE897EB2BBA0A8746AEE82E325B39CD927
968771EDC9EF952A81E23ADECDE18F290CC1EC2FB01B6A5F8ADB04BA524DECE3
4673BD7630352AFA530EDC774B5CF4BB6A1F73F9FA72DABD6F0BE022942F11B7
020A2D36E903F851A54EFE91D6C9987BD2CA809CA8A382972E086F827FF93742
EB700043207D04B401EBD0893FF0CE4557E2E105DABE212A040FCA30A6697D85
B5ABB47ADDAB87D355144772679F16F5ACEDFF94D07FFE29F185C0181148D2DA
6731ADAB9E7CC273451A1629E9AE80A4D4971F19056E47E2D9DE4419ABF61B57
863F0A872855BC00ECEA5BA15FF061F873DA9220FF3CA685CCE2E85FC82381BD
968678CB38F74D127CB43F1FF37D834FA994A5E00AEF1C2E77ED22D3BE479644
CBE0FF57D582969AB71235E05FB023A6E44AEC660E02AD5C0E438F96448C49D3
8999FE0F739A93A9708BAFEFB588BCE8A7472FE7931B7D738B10F304E9175289
9F9A3C1AA557285C8F85B364F4B77C153EF24C817D33A96AD5D4759E5B655B91
03F32551D90FBDB73C5F1A1555AEA91394ED682BD3794311BF6D56A1F0B72D20
3A7C5FF3017508DF9821E614FB50903546BE455D07E984809CAF607B7B16433C
94E34FDEE3BD2B2A21BA498A484C1C8F298CA1902F491BDEB292A7F0B0E0E7B8
BE31067CC1BAE1C8E075529DB5B9E475A14E5D6F3AD091677CC2E4762AC78660
0CF0EAFF748CD790989027AB9043E20F807BC9C2A57259E74D6DA1A59C6F1257
E5E0A4FB5A8D08B96311C845ECA7BEE8A75ECB115DF97CF787A7573C23EADD24
CBAE9832ED3E4088B3B7230CD6EF0D4D69D8A56566C0FA3EAC58EA3DF253CD99
3A736EB7D20FB5673360B664F6130809F138B7A7E688F8C4C154F21631B04F5C
C1E0C6E328D7F1C92E5FC498CC9E2C9F57EF881D478600C807DDC7F0A789715F
372F14E95B0822D8FDE1D15B9F63FA5C12788A133B05B21F528999160D492DEE
2ECC40657518624A1CBED75EF13EF95252B3DACC2D14B70D0AE365DDE57671A6
DA1130F5D1E2FB148F3A728A2C3E6CD33E727B2932C4ECA6E92F12617F4FA5B2
075A3B462340E32C791A8C3314F76C2E17E865AE9A1583A636B4C0EEF805F7A0
2459B246E2F49FC971F94007E7CCFE301062DB793BF0C98E23AF48FEDAC339FC
1A9DD20075D7CA01CB56E4A80518559A1250CC5A3B60478C7CD7C2D18483F808
522BEC558A330BF9F0BE9D277B1F1AB4D071D33132E00EEEF6FF19B200BC1A7A
9D57AEF1E1DCCEEBAAE87CF5DEBCE73E8F89E24919FD9C0F36018BDE9C7D0ED3
6ABE19A3BBC56BC0107F0C02C44EA6960180786F9261D70E7EE6B32383D57B05
1AE1826675A5F7CC5523D27FB37B08E03DB3C1FC3542ACACCB9988570F9F6985
A350165B9432DC712BAAE13FD1EB9CFB72156B8106016E3D49C2D5D9A5CDFEBB
317B507875E601E6C0BC1BEE8EC0B014E2B65B5F59BC23DD3A0469D988EA0122
1F330746FB913FA421FBE1C5B70A4C412C426AA66336CC565BF624D326317DE8
7BFE79C79EC2E13B44602369AB74EF77341BF5205533EC95D0EB4CF1F136C8C4
43D98A6A159358C7A5B25E22B97AB12DDAAB34F2A1CD801690B3EBB50219173B
C1AC61864D273367D2DD76C2F4C648D2916424A972C9D335CC3A9661AF0969D7
F44664C00B6ED737572D6AD0F142653DA546D27C470377E95C9B1336AE16FE3C
970E08B9BE213DB82D09D29D7D0447C4F5C8A89C24F1433C35669C2640A60C37
BF6F50E4720F72167FF648D0CA9E865D7C3B977284E5F84B725038AAC6952E40
49B3F7EA0F868E0B1E18FA0B629E8327A68EA20601A856075EA22E950DDB3815
0538211C9A29D2F2162BC2B11FF1D57E380425B2B8B6A57808AFFB23F671D11C
60C1A0C99F8BE96CCAFB9BDD35DE010A9DCE489B2DAB236D183C46DCD920BFDC
0E43AEE3EE3CAE1232DE698ECBE3210D354EE0C9414A490786C04073D139401B
C05004B25B3433DB6921D7696DB969049031B0C869FA97E596363AB8F026A562
E25D24081C0B5B747F90BF7A201D4AD7D2CAF1775097357A4275DC394324393B
D9EBD4CEC2DB8F0E70853D17814C9C0B8D4D3415222AE4E955B1236A7E230F3F
2F59283A035DD6FF0C002B656FD64BB1847473B650C674E740A1D13FE57614EF
CABC715A9CB14B412D5D905F953E390DD7354E2A5A6A5292AD03FE19492C4C54
4F441AD84A46139E7CEB1E0614708AAEE0D9AE34F1063C0BEF938FE848AD295B
7FDFC5BE6BB9EE623A526A7E394170A5BF25824F7DF5737E970BF81334F2F843
EB703B00BE97F434F30C3D95CC5D507108EC02D50C0D87C31A11E0231DDCFD8B
1C704788B0FF585B561BD3EEEAC3E8BB95BD1C6596BC5FBA3035B345805D1835
F05F2AE1C20C0743864A50D37B7EDA3372563DAB6D3481A92A83B4687F352DBA
807E1D9B91810E3E8A6F2D62624F8FE4885E026B5748C0D34F11055D4005049C
9BF95FF0FA981A8AF789E1DA1A7855C34A46BB83E4728E1CF8E4497211DAE158
F2DDB6A86B916E422A49EF8453EABC2064828A2254F5568A8D9E0FC1DB738C40
58BC14A458F48494769116E197A2535593513D35B07F29BA5EDDF0C968D7AAE3
90CF09972B8FE86EBA773553E69D68E57589A437A6CFF712A5A5B77504454617
1B8AF167A7725902F93ACDDBFFE23852708838EE194239B2702AAA0A8F27EC86
192E30A5239A449B6F5CCCD3712A88590E36B304030ADA0D2ACD2B57ABD9E232
530C3DA98D5F395ABF21E83E25944BF6B17546BACFBB31EBE17799381128AAAE
1918D55FD463E2B69CE5B8450AF1B2592E1FC306899AF4EE52EF7C1F4F8E7782
F41402FE1D485308E0C75646145FA22FB2C8F17F0895E0D52A9B9245DA7EEB85
1DBA2D895DAF932C488BF286988313FE49600B28E6DE6DD5630777328F56CEAD
97662921B7CD1339FB5894E7A3752963AA6043403EF01422554E2DD45316EA9E
34A9EA03A6C950682BD7E72A81DC48EEF0FADA219D372F01CC90343FE1258E92
C87FF22466BC2BC2763D38121FE0F961527C3BD065D70CF3B60075C3181A3651
7CDB9A1FFAB816CE911091C1E8512ADFD8A491DC518CB551334B31801C22BAC7
13DE7CEEF020D4E8E775A3D3261F152EBA489EC9E5BB44ADFB7558DD97913C3C
777CEF27E631A9252EEA25BC4B0F86A034F5C321493567EF0BAAFA416C0AD7D6
AB86E6337264858162832562582BF4A17E92DFB106520F5C74630741BC6EB8C8
DE84C04787B612DD3A2FA850EC3326710040E77E8A128BEF1FB0A24A449B1D1D
0B47D0C8F0B3F8CFBD1E7EDC29BC4BE1575EFBC3F9FB951EBF6F21B811DA9985
F2F2022B4EA3105EEE9257AC0586316614FA32317445B8B17258BFEC3F9566DE
3A93DD88DA901CF49CB3C8DDA06F58DBB99B72224350C95D741C5892B2E24B4F
C8353951C0A335B53F68A8F8286A92F8D73A92F67E852DB3FA36EEA39B8FF07C
EC6D1BB14B775DB068931AEF4835DF3F21ECFFC2897C2391CAC0AA61BAD7EDBA
8A10A7639C03B6A576CBC040E6B64CF1B425FAD61D9E03581F22C0D366590BE5
F0147D68C3AF69AE33097DDAE8237E4A34D9C413290538C5E297121D50C9C2FE
8E49CE8378C8581DE74B89104356DE0C04E6482F7656440F5AD9F1B976100846
9ECF365D32C6CAEF198ED451129C48C83F18B685A34C3C85CEDAABD9BCE6C38C
90C22134974E27D9D89CBC802B4A9D803BD635C05FC038B133911F9592B816C7
261AF3D9F5E1728F408B8EC0143333A9B31EC7C2C99EDC7BBDFA0CE085C7CFD4
C0A049E1642416405BCCE8D41818D663AFDC9CD1C81B91DA90052DDC7F055DDF
6A6EAB9E62CBD50ABE89F5DA4597BBAC9F95B142AF31B68D3AF480BF49C4C5B4
1E4E6EE039069110D2452AACF63BFC4A5D0243083FF2EAE5F768F0935D54BC20
ED3F90905788CEA450619E78AB817A6190FA0C776B5F6027EA3FD56E6B640D8A
37438527422661DA5312AE94EF917D9DB15696E17035899FDB03ECA2C32FD2B9
99DE15BB9EC58DEAC2DCBA40925D29B391569098B3D2AC24C035665DD98E2660
6CB1A3A8C57A86833D634E3BF6070DADA68DD529E4249050E74F451CD47C3A85
23FD07CA410186F4CBBD66C3960BCB0E709B7EFFFAB0E7A983AF06FCF09E37E9
D83826C781804806854626F7F43703D558AFD6CF63FF28A98B64837C4A9607FB
5854945D6DC2C09A0F32C2954C689BB04A12A787BF57E198DD6EC3B2310F954E
38346A81A9B5737450A51F24CD6EAE85CBA7D0FCFEE888CC7FFDEFCBD5737257
12794FB447CBC5C99131B436E3695F522B3A9F1E34262D54D18915100EF59438
A73C41D92F04183451EFCAE6D76430AB508D50D30E8EE99A4A68AACF07094AF4
CA2CB8B931426DF9562D021B182BA2924AA1DD4DAFE4CA472B48FD16ED2887C5
7FDBAB63E602D113C81A461ED958FB3432C2D3995C6C5A645EF436498CFC3ED5
156D12DE4DFC5E6C01077017D8F2FF9F6F88AD245098A9CFAE5B45FE8CE2EF30
182C021C7CCCBF1968BFF32DF5977ED67263A0997CDAEBC1CE52CC8015865AA4
6773CFDEA40370841AC8EB9E6A94AC62BB8D3E85006332DC7EA4CBCF5F7820E6
6C5852C838BC3BDB4D669E857C7280605EDB2F5D4EC5311F7BB5FC9649393299
82758E8D65F2566D0288EEFE8684D472BD8D065D836983265DE8EC9081A4826A
301784C3DF7D7F7354C807C6BCAE0E89082ED18574A407B6A736712541A117E6
90134A5915D13634B978BA6B1B0412854F4BC16A4CA2BE0C84BF4624522F116E
8EB533F6AE59D579D8C717B8A44255CC7FBBB882B2C3D4ECDE1F2BA3A42EC1FD
F11EC8385B3F737BA6157B5E19CB02136037D124481DF8E5CA7D5F3F84929BA4
716C51E164093880A3C18EC4503D3F55A3374474F1D4BE72753A8FCCFE3E5EBA
9218379428AAAE8017F3F246E5094987ED09D03C8E716505830E4391AA5074CD
BC73175C2A6C5ABC0A492177451C915FD543B77DBFBB4559C6AC58055F12CFF2
65C212EFD14EC183298277594958908F5042BDEA74FD3B43A178C86F9A974238
15F5FA2C09BA5BF71C28D97F1EE6A630FEAA7E220886B3A57BA549FBB64FEA19
10586DCEE2DAA656D1A9845954314F142A4E62D6C44C98B028B708C01494CFB3
6F5239D236E560C663A59E7FE85F6072058BE81ADADF5A3B4F927CABF282C33D
780625170F3F9DECEC62F2E7186C23BFD0F22C7793909BC7AEF418EF47ACD125
5068A21969742C55D97F1C107BE623B3B8E9274798F32EB5455A608A96984858
78D673643246468572F84A6C7DFD02A58EB57540F4BD805B8D521AC56BD90E5D
14B07E2D70F084A5A74282463A115DF7EF3B47566788D4D5312707E5F2A9026B
F35850540235701E2B0F63F82670E3F91BF29C0C9F23043250A2697AA0CAB0E8
D157F6BED3C1D0FE8A4F802753BFFC05E7C543DB648AB544E8212B3B2F97B584
4022274F5B1570374D96BDAF0BD36479D9E9468E90DBC4237103629603701A5D
90094EB79BF159A65B012A2EACFC2FD63C9D4478F607F6E5FF01DEB3DDC4F788
80AB187431B6D823247C9814C9F50119CE994EB691FA38948F3C1F7E3CFB59E5
86BCF89071C9EB5BEB228C5A1BDB415F80A4CB1D0C4BCE2FCAD37FC498AD7D88
1491C1D06444915B1307483C88C97818E42CBDCF311CDFF05C37F2EB54F2D39A
56AC6463C5143F5BA873027BC094E52312E0FC17B2CE734EC0867AE2471C9341
2D93033DFB7D2B2F19E5805120CCA4F4B970A594F67A09C43611AC9EEAE94F2C
9B435DAB02B7FB07FD785518D695E1B816FEC3D358A9A1FB90745CF02D737846
6CDB231C7A899431DA79EF5370240F9523A6C933683151661BB27664EC44367E
FDEDEB60FB273D6EC46136E789DFBB55E9C6D9A2325469F8255FC7FE06DD21A7
C173D5BC34F07410248F9338A58F8A83C0D8481C4B7FB4BD0946A5FF563F9326
DFA9ED12F08B91B7E0983965E2CAFA437E5CC55A532BAAEBC8A228B58284599E
EBB4250B3B4DEE4C7063DF2BD3F3C6CBB52E5D75AB74E830939CEF9EFE410232
C78385EFCA29AAAF9A225424A889FDB971BDBAA76049F82AFF3FF151EDC1EF95
339F55314E30DDEE85D28C45EA45C6DBF90FA21640F539A00DCE547EA714CACF
C5EB1FB311A759FE260C1E6EACFA52E8B820C806E846E25BF9B8A4311888AFCB
930B8C2583C45D88054B8C2E0616C380B52EA55549ADDE54055B8F3752C3BD61
08163544D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AD794447CBFB95D27536
CFD0723A39C93D6B5D08E759E327ED1ADA05D335E2D21DDD09E0454A11CDF507
22BE8A9856AC6463C5143F5BA873027BC094E52312E0FC17B2CC9761B0E0B120
0150409F711CB397EC8C5425C61F6B0C7AA082E96BDC5D82872E30CA63DC5D4F
C31B8B2714E0822DCC46E5D1FF75F727D4D0BAD12793CC7A3BCF95469D0C17AC
6B6DD86F6CAA313DABB7CE3A054BB979C6C3FFCA979043CC0A9796E0080E45D3
3C5A4B75DA31602781B29955219AD39F5F7C909C4DDA3D067979B37697F8D441
E21EFE2B0B8A550B4264FBEB14FF75816A9555A5DBECACB63331266D46E6D7F7
EA561AB9F7EB0330180CBF2F2E8840F8D2AEC81319FFECEFF0B5C6F44577081D
7C79FAC7524EE55393019EEE61EF4B3796F6F20F56EE3ED46E2F5AA2BC7C5343
57A65C25929B54898BA9B648CF9A07C2C56AA0A1132E7923DAA394E7EF44C3BB
75784D66ACE0BC38C60FC53EA71D91AB4A3446BE332D4FE8D9901FFA923157FB
455E128DC8BB985C3F3E02C1DCD75FD2C3154FD5480E88E9BEEB2499BF34A46C
864A41AE3E9EAC1935F8964877EA22D9E5D4256F3134B7F3A44BCE47E44D3355
621E4291E8B19372375C5DA4CF8BC68322EFABB5A7A66796AC5B925B8021ED15
5E58FA101F355791F73DC3A126EBEE67B036D93D18AB91F771A4384CB2CC8ABB
A0705095755901A3D44237AD2BB08713308F7CA14B75E2B41B3109A19FC26394
6B01086F8190D6BBB0A0FCC5C70B67BB5867F4407BA287161444B807727C458C
2826A13D38F8908CBB9349B15D098F76D3C4B030A8D0BDACA089EF377C78487E
281BF387E700EED9D0956AE651C28A61DEDA9859E0173F52820EF03EB99A23AE
97938041F7541CCD2694F09C2F3EC5B326D850A5DED9EC17E11FCFDC544B2885
995EECD6629B123116687E138490CF2F1B900886A20B66AE9F6950B0F25BD659
CA9E620276D9F763A6A9B4BF512AF04DF7000A93E26823F80BD469AD6C685EB8
A77528DC7DB55B57E3D3D80C06EFA0CB7B6606ED644BCDB9A4793775761F38D9
CD9E638FBB645F4D4EF62EBF6CDFD1716E92549E59B06AC529DA1F868CC63ED9
6EF6CF5119DBC2FE208584D5DB0E5C30E5A42DB22DD8E13A29F907AC8B02D12A
CB834856A2A46D83CC900DFF2B519493C9E9E563624940CE5E663A6F3DE8EE5E
C67149EAA00EC8608767DCA8D0D1EA25C291CCED6B43B67052CD04D314DB73C3
DC1FD13D5DE9B840FDD96372799EBF4C9FC600A9441B3991F38E8A011FDBCE92
2A16CB785948643D0591FAFEA0A4270372FCFF69A5BE0D06021F932030C47C0E
2CEBC374C5172C527988DEDEDC52B091AD4296CEC91D984BC04A62DCC8BBCCB2
D9FC04EAF0AE36B55033A11156D38CF495BE97E6FC940B9B2F00EF3607EF9D22
EBAAFE118C4B47FB762975E14C6FEAB7BBE41FD692FBC238AB5B488F03691368
0E3EAFC874AFE60AB11BDC4CE969086C2DB4498C0EDAA9F293E7264A221A21C1
5AE0743B8D263FA546C81C680DDA1973B115AA85779C962E6F13E2D32E447E55
1D1193D670F151AA96F678ACEA700030D7BA37A5987C43E34B7A21AA7D151A5A
E07F302102362BE8DD09F60C7E4966B4FAEB0406B72F8FF605BD06D346719469
5F352429CFBAD19DF81D9B47C3727B2BBBB5C7ED9030DD3594C9BB97176EB0AD
731182A819451D7EEB10B679164C2123266B8F91F9925D1960A6DC63691A6E92
9D669FCA49D74A4445E1F888B8AC09B8680F2301EE93A692FE74E2DD9AA031B0
3B005BBA6E0761AF4591399953F17AB7609535F5FE48116193C04F07072E73CB
004A0C73B904CAD3CE9D4078943C3D6578615C4FECDE1FDF595F0182A681247D
0AA9311FF627256CAABEDABE972BE3D6DC8A00E76BE3D7883BEB51E510D5E92F
CF3B5A91B7FC0ACAD54CD4E91AED7FE13BE59B60E3B5872C79685B50CC82ECA7
58FE32A72DEEE11D41BFB2B1B4605A00D65EEBA914A515BE7F74FF21BD3F405E
0A07E1C86B3EC28D85BB53EE04E1DB8705E541D7E21CBE4E25C271EC7B148C5F
292E03DE307271059F1BCC5F8CC64E163B2DFBA731C6465C268D988F82578004
D217D959FB4C9CDFB933AFD8699B432EE48A6CE3D630409A024A78E910AFB49D
D394393F6DFDEEFB50217CFF7E4475F07AE25BEFCC7DE23744295CDD2BD82C38
721A541CFE283AFD4552680B3D703C3511F9C637E680F03DB118C612F694D091
29E2021AB9C94A69D40816FEDD2C8AAE8783EA525074788D54B63BC9B7556B0C
760FFA34C56526C3FBE6C34308271F962FF3625A92C0DB862B8DD939BAFBB928
7CB60FF5643176A51F41660EFB1354875455EC82488E0BD98D323514557ED366
7C569A46FAB2E4AC7EE1B27D319341CCD234E6981552E49D9C608E9610414CD5
4E19AB9717574D2AFFCF5BFB7622306E9768C741DFEF36A05E319934344C6F0D
08EDC42147E3538F18BA5061E1E63644B12A5F77AFE63142F172262DB09B9C8A
4135C6281DAC78AEBCA3EEF53BC22D8EC10EC4D2D132A8204CE22B0906EDEDFF
C684F2CCE516A901673DE5649DA8392D699E63A013EBB169B5462FB62E8F6F8A
E004E4D9D04C6178B82F9FF4CDFC7AEFB6FD84077BBC20C5EDBD85CB396789AB
3B037397D0CA5E63161D334C40144F4846F037EBBB708CF4F7DFACAE8AA1458C
3EBBD4E91F48079A48CA06F524F56429BA696A524E140F79662E788A3F20712D
ACCF974F5C9F430E5569E6A448BA35F8732E720EEF24C69AB48B7A1C1DE05DCB
D2119BDC55067700DCAED3323214C5BAB8B2D899C771DB979E86ED92013D8DF8
458E7FE8184335335414E627395673D56B7EDED3258B2C0637F299A053213ED6
67A77755F81B3E69FE843FEEF0899DD0F8C2F957399C0C4EAAF708581D372AD5
85BB4189F92CC956C4BA5D2536F8C0E58E69A39DD38180DA0FA39588173FE3A1
D6FFE1575A948492DEFFE60043F038B33123A5AF09CFFDBA377657B5E67B6215
DB53A558E1CB775F7683D6B6D5511F49B79E40A5B7E01978DB472359F772FCB1
E3F7B334CB6E8BD304337AA28C3CFA6C23002A7D58999C7E9305CFD185DAFD24
CD3CD20D9A4008EA01A33BCD9E107701DE9DB60CAD2D559221F24FD6492337B0
960786B875C43C4908F043B23DE6A10FAF1450C49003010B5477DA6D29495B6E
BD93CD45F52228D859215CEF2212F546509125F5388A31B311F7E665C5BA68D0
588A84EA2CEB36C0544D26D2A71866303FA21D1ABD3F6F4F2E0EE004B013D0C8
6AF5D2C985E81D0F9689BA525D566B844DA91A17256A253BE1B3957525EA04B7
E3AEECF1945550C320BC7306B6305A7D499A66FFAF82F8BBE14764E942530CC5
60BDDE883D0A9A8816072B532A5CCE96ED940B3ED7CFA73F14E31BDDC0FB4807
7B4425BF9CFD3E5640AAA9635A1EF4A2F22B289C3CAB6E2FC94DD92BD96A015B
218CA7FACE7998D9F0717403EDE66E6557E7BD3DF16841C98A0BADF1994DE9E7
D6619FE5E2AE7CFEE8EF2928C240EE3ADA5D144F5CA9B1EBF3E63AB1D202A6AA
741CAF6251651CFD433C2AAC426D25AEBE3A855187E6F959FF894E6ADF8EAFAC
A8FFC379751CC27F9885A5447C120C012050099E485EB19131FD2ED85B822AE1
F7B33CB61756C3274A04F3AA9B54382F2DD776D4D8F7F73323760670D1E7EC4A
42C6CD98A11CF250DEA9ED3B44B090C731EBB8E4C903AC30059F04637FEB95AC
212EC141B06172198B32F91DDAB9E614F3304CC7E63C9A24EA8AD69E73782CFD
4A59249C49850ECBBE70271D0CF83B5F6435796CED1482D7B13562D326ACF23B
9B1AE77613C956EA8008CD88BB13FA2293F40609608B512498BF2F6C66842B09
4ADEBC248F11D68A1527FA4E9C5EFB3D4EE304765B0216A1E3786D60CD3C3783
637588991714D5A5640E77625EE51B9E4DAFECDD6DF4D93778E6972E6C807D7A
BFF484093C66DDEB73E854FAA7A181A9132B96220FC2B93E86BA8FDA29E2BFE0
3965204975851AC08BCC4A2477580B992E6259C96D0279FD5951DD392B7C1FFC
E624405E0DD9F5E833CF31AA7C198E6D0F91FEECA99B1C717E4198C737325A8F
12923E483D6189B0D1FCAEC961DE8C96B8DAD26D4A784E9DEB0A2E60A5E65A4B
4870700E52713C9428855CFCD45304AC42240873EF6E2913BFE80555BB60210F
1930AF79D7347ABACE30DABE92F9EA6560F9DD2BBE26EF3E465C3927317440E3
4D425850AF9EFFB5200DCFCEA611675BB1FB962B3C6F5D2619D655C3A35DB660
7087F7EB1F04869533518AF8E1893FB5D5532244B7B8751E6CBBE05322318080
47B19C9DCF01EB04239FB2CCC59C46B8674845503A010163157634536AFAF1F9
0804E97CBE9996382D26AC8F9020E354CBB9E842D977CC1A79F77DE46BC85814
225498E7472388D33D237560B4616A5ED91F46DD5686B302877CA665FCF325A4
DDEA7E5BCD46FFAC1019EEBEF540640ADF732D0F3522AEFAC5B35AAB7F447015
70D9563168F0EC0FA7D4788704EA5F7CE786D51CC2CD3BC373E1FF7EC395B845
B50359BD97888BE3D002941EB11EBFB7F00FB73F3EC924E976884C9D23306EE8
A0D78FE7A3A59D3CCA0CB5AFF63FECE50B44A0BFA41D28F45144A22B1B6BE977
E071291EE17881ED68A98AF4CD881CC8AEF6E6AC56361E981C733C04023E6FE0
DC6C08C92FD33A050C1CE35780907C8F73D5EC0B69DC22B5BCA3C3E3B76BC36D
165A70DA847EFF92F3A4DA04A638F43E28D6824049DEA9416A450BE02DCB5590
8E37FAF3F899F0DD777666B14EB7C80CEE58DB653AF6DEBC59D00031771F450D
9C48289DC7F17674418D5DE5277152AD650913869795A7234CF01F9C6D90FAE6
D5EFF289A9B626D6373D11EEA2A32700D13B25BC43FCCBC12AD7B5C5C69AE6BB
E6D10EF49349387EA298200DE19882B5A301D73E816F31D19C0DDFF09EAFAA8D
E791FCED60E6002DE9C51723D6742EEF8EA742A1606548F49BF53098882C6E41
EC2C490688852650DF14084456DE4BE9CAB441B0BFC80A4FEDB28DCA29AECEC0
2DC7C75F87BFDC01790C94DC7680A8E5B2E1D45219A4F18798013650FBADA534
C28620EC9AB6E00FD61C9769E2E502AD181BA6DBFCD3D67140F16A312024C03F
1B26BDBB6E6BBAB0E40AADAA33DA1A0B8AF245E9172184FAE38ED49A95ADA39D
ED50DB68D6146B5D3131B0216EB5CE7B945204B92192106077A8D382EE898B24
84EE1BA2698C8F5E5518A835188151DB723DA6249EA1DE2E90C3E58981F647B8
575652544E5925B18B05C51918B97CE8AF45BCAE8E07214E0F3FC3F358675EEA
F84F33556B29DEA4C8566992DC91FD97AF23454F662F81F89990FD59C3C10107
3FABF64A5E19EDBFCB2E622836009D507B52A9B907039AEC30660CE7E4B14FB3
11E6A8E25324D77A38C94273E44A9C24853969722C696B698351AD26A06CCECB
61D853FE1156FF4480E3F248B864D40CCC1EA2DD87AF0D0DEDC185C7AC94C71D
BA7314F49A18E204A367E04BA5222AADDF9AF2F597A0F043F08BB8EC4936A459
83041115DB80EE611AE48CE6F5704930A5D3A6EAA9B0F0D608B7A4B741D9001D
C6D262D69DA64C1EC361757B456170DAC2B160D65A7FEA4E762279BB4CF0236D
D7FE8C5EE320EBA54FA1559ED7855399C6DF92D58155D4F494F83BA2DB0A02B4
A06A4AF0364797FB6F31E36769174D956D3E6962FB890CA538AA8224FF0FD4BC
21385E5E74172137D2E696E0303B1628D6B7D026180B51783788EC882458CA7B
91D53D79A0B25222FBAFD4DBB7D69EA58A3DD7165FFB1F29C44B38F711F194F0
0E25F56A75D2C0BE3836C80B59611710C5F8C5190EFF18004A999541539B50E8
9406B9B84577938DBDF4BEC28660208EA618163D2268734FC6F7A532F194C524
458044D3C80CB40D65BF919B7FAFB08591E16FF3F53DF9BD09735AF52FF87780
6442197CE55B2F5B4204BBBB46765347944ECD59B2AB41F3D90B2F0D742D9598
D1C97B59DA3D596E99F6A468EBB045F1FBEAF30C9067A4149DC1439CCEF5CD29
7C5AB4C97B065CC7169E3E0476AF66AA0C3E8619F534D19B6228AF4FB8B023F3
C5197834FAD08F34075CF580024B8F10241F034F25662FF0B6783E357B725D6A
CFDE17C4F82EA160AD3E720FA6819898AA7CEA301938B2193B4EB8C670CD268A
5013F2AC3EA48CB832CDE4C9841006495F8D9D91FA0B1803AD7B1318660A6332
DD26220DE347F4454A9387E7F4058368C90BB3E0CD4A7ACD55DA5CF45FEDE20A
593D6F88861882EF3B6D4004B609971C26FFB4F1F8F1850FFDFE8EECB76E4170
672545618882C233355671AC35DC5B2B886C4663E7400C36D18E559DAB50A977
CF474EE1410D7097785D120851F962934E4EA330B8A48154D410482DA1202736
A20BD16940ACE8349123EFE3513D141C31DD7109BCA7E9DA95EBBF687C2500E3
DAA62B3FF0C184955E04FC32A6C8EB7298205E85BC528D1A33F8B0F76A1EC601
1368DCD5C669AA45285638D00BD50C2BDA08AC7EB34404BF8A04FDD91A7208C4
6AEE9AE963718BAECBCD412C2BC6BC6FFC0D66048E0FE25682354479A8615C2F
353A540FEE6755ABD178199924DE9EDDB672E540BAF3461E2CF85D691A138C61
B349ED3B76C995A98E203C5B2F1B0686B5B4DDDAB0FAAE37634C5DADD8513F44
701BADBD6D347C03B56CFA388D6C3BBFB5BB96EF295AF5ADB5A55DEC48579C7A
294395C004039FCBFE2EEDCFB12B2B476966D43D0564F54833BEB338671E1CA8
5DF3D44F4C14BC09084530495676CD84F5EA6A7A76B73C216901FC231F84F3CF
2B8061A7B38C9F8D72901EC8FBD563765368C3DAE639A56F11E169D93EFBBF2C
FCEEDD9766112D8CF1B6FA9E07D6A860501712AFFB193FF0C08D134E8397D0D0
B8579239597BD592A865F81614B5AF2FC11A1EF5BA8990633918F522639E6A7E
EDF06FC7553BE20FF83AA7FBCC98DE3BF4CBC8527A27721DD644BC6EEC11A840
9590E4082E833C55488F2BCCAC1A0C348F191064F4391C0C408D65B4DF51AB6E
955FBFF933115A4CFCC16736ACC6A61503EF4A6E29DDBA61DA1E50699E9F9ABF
6EACC6FECDB53775A35F4C4F798D40BA4CBD2C66AB8E247F23D629FB7E51AAEA
E9FA151C8BC47A70FA6EC1BA2DCA22C9C1E6F21D8CFD7FD278E9BFFE4E74AA91
E64E2364653F62A6306192F763F4C7B38F78CDBD71341FF6CBC8543D48B38566
7CBD94365DC8BF00B746840469FD4723155B0E9FDE42539D9D5562831E02CF5B
B04BE5AD02A78B50FA879AD2FE472A3FEB57E35599FAD0B8A1EA6FF746F29909
A6399C1AC4D013CFB269A47FDFB23E35E574FE175808C68F8637314BEC58FF3E
AA59222AB126372D66BC958E15D2A004E88DF5973133D4FEFA499B732E30C030
CFAA57086459A20606DC9F1FC911E36D344DD9886E0F61EB25B9FD9BCCE8301D
3B194CE8A149EF9121880DA9C89FECEC969068C498FDB647BD0B993D5A426CCA
A11CD55B67739B2771CBE3B6B74CB9E98555507F9422DF4A6D7F0A40502010C2
D0668F74AAF41544C031E0D5376649F8C390489B043B8891D1C59D585EAFED63
C97B80F18BF6A635B9A733E6D0563AF7F00F625ED72A455EDF8AD83BE3827E8E
57462BB4D986B0316CD2180E4304BB80E650D85EFD6E89E70322C72CB26CEC6A
A0A9196E604BAD94A31BA50A48051A8AA4DE3EBF334615901462CFE689D9423E
B9882ADA9A226EA0229FB74EA364A975FE884CB7F1BB31C44473F2472E0404A1
7F6829E975EC7F8CD8B465949AA67EC77E997E1642FBDE7EC54C1CB8CE80F29F
F13A86273E7CD929283CE90F6426C589F3D37D34429519EACABAAEE6384883F2
1D51527BD4DDC73D0DCE7E8E80C3C81CE7B8BC112A3A353E356DE3D9BE992891
66F145C0223FD96BB2EE86BE63890064A5F7ADC662533110A8A15174988693E6
24F69BCBED9A1C0D61A960AF639553DC02985B91C5B58BC50FABF8C4D6BE5794
6FF3F3A544426A80EB4067D3E3E5B138AC5779AEF638A38026626F054008FC5C
FE66D480BEB86E63DED098A028B1DAF4450F5762B8ACF0734FB97FDCA298C41A
6F6798C5361119B81C6191E2B824B2C7DE71B4368D643CB7D82B248C6A505E2E
CC5949E2FBC3E4443ADC91DC45C5AA486EC4C6FDC79AD1BB32C12B052960FF0D
1CF06E57E1BBF583FB95E1CF1874B6A9BE632939893D33C9DC594852DE978131
7F786F94A83D49425DA6061D05C2A592D1E80050D55BD94597FA6BB673052692
5E87CEDAC3F2F69E73F811BD31462119C3AF991B3613B485BA2B63E25767C311
C216976389A23EA3F80EBDC8BE3EE5686F6ADA07160EBBA3C720F71385693E6B
75BFC0436205231264EAB0C838D05385B9FAB32BCDC051BE4025B6839664B8AC
B442D8672FE96D8A5737F03BCE6C4646734B007435751050B0E718C9CFE2972D
3847BAAA59D9C2303C215E939B216BD99E88B8E864785262E658325DB82D2B10
ABEDB2DCA5782F7A50AB30AA45062748554C82BEE103B8025B3A54CA341AE7F6
10116FA1002A7726233872E11C13D38EFB1B772673FB04486F7CAD4242AE6C63
35FB34DC9BCF1DFC78E01C5BC3540D1A4CCF8315F36763953D30D136BCC783AE
3B450B830E44E345799A954BE3940219FB32BCC5162EB3BA3C0D2B73A779539C
7FB80E0701E9FB8CB1F2B597146D14BAC758B30905B56CCEDE37F37167FBCFA2
CC9AF2EAB2F643BFDF588DF93B6925100D074E11C6D28804278988E541BC38F8
BAB09E1C98BD48616772A99EEDD0A346F89636ED02A587D145FFEBF8216083A6
2DAF04039A24F74343E287818DDF16DD56B42E15F669829DAFF35D7F01BA3FAA
8765698B02798AE6367A9B04E0DC12A6B93C23CF4B37F033783A44232196B3AD
B654E3827BB71922BC9474D03BC93FED60C902156E1CAD94A55784AD90847051
F7D56B3F726632F177668C59135C3A2E737A9DC43C228782BC17554B290734AC
875F37BEFC881C427F44F58809796496CB75580E1E1B67325CA31ED60A1CA284
B6A0D62E8C0D7668A7D0900B3DB552062FAB4F8E95B650492E261365D5B2B78F
070196A617D2F569070C62EB041AD757CB6EDB44AE4BF87D2B397F2CAE339091
42C6DCE55CD63D144DE465DD11AA26F59E2B12CA1CD88BDD92A3BF7268900465
D114CAFF0FCF67585A6BCBE22DA53A4745F3BBCBC0EF7AC86FED4C7CA29BF669
B44C0046D9571D56F322DF0BBEAA28E83B5C94175DFB9E11A2CD54496C083DE9
7C76C16514FEC7F8AF666913C95B1392E8D14C652E1387BD302832DA3B044A85
3EB94D553D50D7C38AA680463BCC001CB36929605008F4EBF2D95DD9EF1C229E
DC0D4302F9400975DE4D96BE28E1F9CE055ABD5B89C739B9C2EE943566F917B7
97B3114B9D0FB4ECA3801CEB7149F6F421584E13CC64AC80683CFB01017C2E6D
F2550BA277DF45DF36C69F0F277B61FD01A92C58B533FFD458DEDB60138D108E
0D79DAB55B24B0F376ABF2B7F0D44C8545907F5C9D87FD393F3F4CD2D88C5091
7A4C2D46EDD4183B5106346EC0D1CDD66E18BB6301ABB5AC71737C1B1B488C4B
435841F6357AC813A31E124222E5DE4AE81A1E16AF3354F24886A6C7D1D61926
474C6ACA7EDE43667FCC74ED0D3BE8A2312A9E4813636710D9ED94A70C0FB7BE
007E12DBE00E96AEFA80B78186D7F391CD91B6222E88C0BCFF6620881499D6D9
B5FF090261A42EDE529B033686C1F39A8CDAC5216EFD8A921F94B67E7E100D6E
C81280D8B96348FC94ACF6EBF2CC7849276A1AAA5F1598EC7A9A573A79CCD72A
912608A582A5CE8765E2681E980D66B356B035F8FF989FA988CAA6985642AE7B
4CF49C4B30DF0432FD6812803123190CCC92A85AE3073BBA11BAC19B5DBC1B2B
1E1514C90851CAA4D29535570C2A3A2F245613C16E4206293F09EA311F492955
F99620787DD65949AE1B082E3F5B20BF645BD2A7E6A8DA42DA29C26DE2508F95
949634071E3405B3E415E94614E81B6D0787C187D5370B60DA2F07494E52C4BB
7A8AB623970F7C91F092B209AE35C91CA49AE879DDEB69969848978E98C38155
6B32D9C378B348CE8743825823F0F9F0284E7EE1686F079F72EEEE0C0E225B9E
736C6771F746D2C24EA786C824114BD6BC4F5579F856374A15929425243DE7CB
F57A08718E134592CD6F5937A734C094197418E8A2F7D4A044C28C39C39EE197
086E6731CF09B9BF3E9C8C30BFC3C5B14835724DD729AB3659F62327FEA224A8
D66EB31CDAA48CCBF30A718CEA46416E3D775A655B2D590CCD524BAE63A47ED9
C6DB085ECBDD1FA681EF0D9FB4FA6E8624298C18A29967199ED62CC812B1A690
15E59FB59718AA5429ED39CDE4F9CD1F92837B1EDAC16C473B68934A0D917468
88A9DCD2A0FD2567829B3566B950D102B72CEFBEC908EF7DE25B3584F43F0A59
E910D7C605FF0BEDCBE994BAC14807B5627650B53273D5A218650149439DFBF4
169164D85D29DDE3DA316426D873C972DE998FBCB8DC46F0BD3A5958527F0F6C
694070CDCC3A4B6C9BD0EFEEB22A5887821956ED42980E3B48DF220F6695D3B2
81923E9663294967F9A9D98A37E2DA191CC3774FC257C16DE3AC1F8D85467B51
46B72FD47EC0C3B8FF9F7B1152D73D83655895D3210994D9B23DD6881532435A
0844997C663FA1A7F985E6EDA28C0753A178349A546E315401BF7ADA7EC1AD4D
BC08E18F6D8F9460259D44CE01645F14F309ED8BA8CE852E3CAE46D3F482355E
947D18B664D677DB1261AFD0FE88F2DC4358905CADECFF5045C4F98C3FD90583
DFFCF55AEA0E7CBE9A5580E44D5BA50E34EFC53CB28C2C6DB306B0D998CC473E
535B14095E6F510AAF81A68F0BDAD4207CE7851B9B7DA81E4B2BD3FB8E0F8E35
39FF267843A33AC4FF3EB7DED7E9AAE85B0FD9FAD7F21A7676678D879ED994F9
220B23631D60DD4F072EE27A2F623C81E17B3CCEE92C80310F76CB845EB469DD
631B04657150619C0C7A674C58084C81CC438487BFF808881D4BBD90105070EC
2FEC96FE9B846F146B131D50E309DF99CCD0F223A53872C429086E5F212524D9
E03E2570951103F0F4C14969F073BEE1699F55E90CB69B74A7E9FD538C4D2C17
92592AD968CB3E74C7CE0C692A00E53F59B1F52E854EC5368C977D4BEBCE7AAD
6ABCEB874D8071ABD4CC9BA52607DAE2B6EC8603B6D89B8AFF8A4EAD2E627D4C
DB1FC33160B2617450B1B61F32572C4946A32BADCDAAD35DF32A144AFFD8EF0F
4FEE2DF1F839B2A5D900EC890CB07E6B882EFEDDC7E7567F116654EF98052AFA
608373A953A7428F28CA6FC859BBB8440376547482A1BB7023BD09589611DC0A
84475089DD2C1469769932A190460C490C80EDA4C7B9E7AA036C519879BD2073
F6457532BA4E4AC975ABA0286FC31EBB7B819AE455CB993EFA42A8D67875DBEE
928D24ADD7FF8D33737ACDBBD4048E3092F4D4B0D3ECA0295142E0CE2CFBED75
8D67BD3C85DB8739C745E1601B926E844E74EB783AD4EAD754E4E32F7A550E50
AF70AAB831F5C44DE0F82603E21287761A738634A25D56C898E1E40F8D524756
B69E963C1BF9B8CE006B701C9523B5B9B145B964428B138DC7662E3EC0039B8F
D2ED53A9B2D2762E11FD6FFFC3FC67719A505F093E0BE8952AA32CA53FD08CBD
28C116D193A3BC7B6EC649B9923A92343BFEB7CC1CEF536439FA5A60BC371965
3E525E49FF6F778D8BACE3B65BD4FB774296419D91D7204424848A5FA04B9DC7
610EBED2CB3ECAAA6EE2B3632EEBD807853E52BDD8CBD59A1821D6CCEB9DBAD4
F4B09A9A70C14699403EFE551EFF3700613B082CE208D823C0D02DCD209EC01F
28EC7B1CB253ABB33BEB823434BFCFE218A41FEA2A9131042C3E9C10F6CB7C19
EF214AC0337B052E72D0ADD294C026391551F235E5C0DF392EBCCD0BD5711F11
B40F30AA23FB317E5FC4260FD4D90BC30B163834B0C8C0889ABA961FC49DBA66
73C7F53DE8173DE7C13ECEB2D947259399812669625D465D7D1E80FFFF4A11D0
1228A09A98465927DCD68929DDB251FB70402487C814B8E7DCE194E095090958
F9C5A742DBB2FBC9AA65EA4FC141E32326604C59CA016120ADA937D8197EA627
089D71EAA4E103C8BF03E66F3D808C6426FD5A37D9CEF904EDEC7E5E3D3F5805
6948774E5F2D7979476E5032E87B38B12B44B237637A80C58A3EF8CB8D8306FD
9C290CC7F89C798D7D98EC3B918B62032F05BEEB57CFF22C7CBAA2AE9B9FABC3
04B912E21F4DA43025175BB34B5256BCBC1408DA565F61F8D84530577EE93C32
F0A1D2222122B1AA695D183B63FAEA058AAA672C89E288479664226DBB6F1171
F9EEBC7E1273D7934B017DAC9E49E29C51F8D2A527DE3A01B7799AD54AFA0611
5BBD039456DA0D0E94ABDF9E50E25BEFCBD7B0117B34B02FF5CC0B1B81C8748E
8D2AEFB2509050478F74F609DDBB9635FA05510DDEE9C650C13A3278362E5A2F
8AC52BF30B0DB3B29E1A3CC98E1AF521B146B699C4CE1AF752E3A7B6DDE7BDFF
D0954AD15D9D2083E510F509042EA71759231F73BD40C1489ABC33EFC478C10E
12D220EB71B17AB6126C06A3713F75408E29138D20A678F29CA500BCCEFBC89C
7C7BF1CBD87891D43882F0254230B9826E6322C4D6231EFE10719E907FECF47F
5FF1E51E1FA87B4E08CAE59E83892CDE71CCE7A39D6ECB2F8C01400F3B044DC9
730236C9A87AAA05FA38C53AFA66F4B65E152B443C10D5130EC28DEB6E75C260
5EBE857F61F183B5F501E3CFB2542257BACF38AD210E155E83ECB2BF32522D24
0BD86BC980AF1364E4F9B1B29FAFFA51E74B3D6929613D41B4C00D52B5ABE3CF
1FAA628821E2AF39B00C543AFDC9BA2AE22FD333793041E83EF250DACD795AEC
1EF988F9221374D8509B9985D992DBC6439A0197CB304C0755B802DD31E89545
84CC933FC342E5C25FC63DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC56992
513E88E545EAABCCED3515E2A2CC45D37C587DE43AF7321C6361D12879D78AC6
396BC3936BD40FF1476FF49088AFBB6A2D10D335B76934CAEC6AB8785BFB6A86
BFF24209889A98A0FA33D9C337F0D03AC1AD45D28C639960D4102FA9828E503D
2F5760E144A976F44BAB926274239ECC32ECA3A2B2AD548B7E9B69C832539655
83B7616832978860CA45E96C71ED42AC76B9E40C056EB692CE5AFC0EC3E3A8FD
72CBB746750A99EEDF80BF399AE37F3F10203F5066E2D80EF7C7866BAD12B3F8
C880C41EEF179A9E95A7B2A70E3A9170C482366E18F2DCF43283BCA59F109E97
40BCDE6BC5813EA8E97F8B0D09C8BB076A5AAE81B5E315CA901E262B77314CE1
73755477CF92FEA77C09E60D39A89CBC3CBBBDB7BACBBF9FB9A6164A287A8C8C
869C10E1B597FD43FC5CCCD407ADB8B60F0147942F692DF141B2A85638760936
92779D288E30112416D3F6277746F857CCC3C4E567B4DC63A29B0CDB94E4333A
A70551FF9C8A68CE060FC6A341F12FF6AE126318EA8132C4F5DE8295F0D3AE76
A14B528B50849CD30E2552C023E0D34A0DE5F400F5B35BA0CEC0EE5428010D56
58FE6880E580359DB44661981E8B79C0C2475D3DB3B9FC8AD26FB7EE9A331182
363D4F8F7A54AA4A650EA37E1CEAED62F37627781BE21F5991128ECE3B49B0AB
1EBB323ECF08AC86548A8FD6D3424F7E8131E6FCA51EA4FEC2A4EAAEEEB2E1C9
A5B9886BFDEC0560C33BF255C2452BE87D3B207453D690A55B4BB72C0B985ADE
2E99E9F00AA57E4BBA66DD68363B9EB7E244E86E45F8C8DBE3831273356F29BA
8D18341BEED641D1DB07D0DD69386DFB3D8144988AFE87CDD07FCC210033B031
6FC13A50F6D110323B8E210E728A6F58ADDB87DD0D883AF60455753850A63756
59B571293AB0DE636A8E4EB10E5077BE194BFE6174825D1A1541C984F256978B
107E7FF5A726014ED145CD59392FF0A70C0701E9E138889951B4294E3DCE916D
F175762F9B4046B602E7940BADE0284103F9CBE3C16578DA7A770F6A7C9984EA
6DA8A4BC74331F4C862852FCE00887F65AC686507AB035C835C8A08C2A55C1F6
110A42D0F70DAB4D6B7E2187A3BF218A61CFD93B451CF6BC41F06633E6CA268D
547FA3B451C7F112CA822C836EC1E6C6901D8EC247701DB2DF7D29FD89D58F6D
2348A62293E5275CCC13243DF7B68E47AC5056984936FE13D6FFE686B1CFD0EE
0B6B7F873F7E4A94CABFC694D77ED6947610216EBE1E9B0B09749ADB136A36AE
9F5907563769751AF1D8076E19266EBAAAAF50F333F96A3FC9AA1D2E76F12926
4A99875D3CC1A3F0416B6EA94E561AC3E73728A55039E4A7EA63CDDCB2C2AA2F
D7B2DDE1FA2439F3AF1B989BD9CBB3BEF08265F3D767FF4FB8E3D06A8573ED0B
BCF641FDA888EB1B9654C0CD0ACBEC1241AED66A54F208BB999F009BA80F4AF5
4C4614E9EB8C256BE3860D1254AA78436EC5AECA30BBA028988DB8B796322A3B
AF5034F4B57BA9CC5D49A7430855B9B1A17F66C3329E3D04F5DE5D8C5C9D05A6
B82070C60DF4B6A87B879E66D5E87D245B9BCB8894EE09293A0032D6CF19AD21
811FD0A4E11C873E88DFFF69BAAD4418C925FADD7DF27A7AAEAE52FCE3DA1801
C6A08CDB96F62E89B545CC8CE8B786D388BFB00807370E5381AF3FC198A13102
3228625D17C0CA52B7166BBE875433369479139F23EB1F9D299353CDC99BA9CE
2DA27E04D7474C6A051E35ECA99C22F4BBFA0E2B0BAC8739A0F349B97FDCA298
C41A6F6798C5361119B81C6191E2BB436627D7F75790571F65D0A1684C94BC96
A0F39C297F15D4161A563418A13D5FEFE84F45AD559E5FB1691BF3D3FA46617A
C1DA9EDB3A2ED55D49DDDEFA61EA1F01DD6BC5E0570C5916F2EA99E13818D23C
61043B5881BEAAF5993AAC2141BA163EF16835BF3FC428D7F6FBBA84271EB56D
DC1ED01EC51B444F884A41BF31909830F5D60A5341889E506279379BB5FE9437
9B638B8165948D286AB6C95B7237281204479EFE366D93F2BD858F6DEE08D56A
D4741F99ED5FA1982196402619D4801754FF674E4DD4DAF84CFE502230AD06B8
EE9EE222CD5E401CDDB1BAB26D2F0BFB9EC1C610E8F28FB638C01834FB8E1688
3C6E7B959E63A2DF0854ABDADAE9CFC48A4186630DA766AE8A57D650A226E068
F16147B2EB5CD6F0A4C535708D4AF7A08C723C249E2405110BBB8981A6612CDD
70EFCC77248DAC4E0D14CBF511921C268AA3E68A7D3D06321D6DB80CD676DACA
B1311AAA2B385B78207B139DEC9EAC296B7C4D043DAC22ACE46B4F96015D16F2
C9056A5AE147101230E8B709068CE066923BCC822EFBD2780E3A78CC0F9EEFFF
109D3B8A2E27B9DA5B4796329FE749AB039FA2911D4CA8AD2680243792EE7D0B
C989635D5F97A4EC2F41B044E60E09372FEEE5A806881618F41E651CD137625A
00674AA342E00623ED43E9A19DF3DE86B975605D286CDD3FAB8FD8D5711B8B8E
AC01CA1E0C4F2554BD6F1F4C69E46C9C220B8A6643064A171E0DE7C86D12C9F0
1E971A6FC020C061322B73808AC86A8C6A322C7FB4E132582BFB1566DDCCBD1F
5E5253C656C4EDFCAABE8E6BE1F24C3F6F9937E823AFD9AFC3044F6360621A27
0A3D167BD1A1AB7556F509AFC7C75C2E346BC8B711EB3764AFCD6663718F996C
6D5FEB58174FCF1B2FA644C7A80C9ED9439BC56F6653D78692B1D19A1D63FD3E
991BD76C0ED62736D6CC78FA7B8C42F84452AD21C8971E6222F3A86D1E81944C
5799AA78626137F8D985DDAE015D197A7DB16730051EDAFC10D2A983B5A2CE05
05CD2519CD543B7DBDA4351CB31A8006452979E48AAD6DA7B17233887A30CB98
00A890813A2F36AA7254E72150CE7459B110E356887E252E8CA463340490CA66
34BFA6F5B74531C2FCB101A40DC768D5535EEB54678E70AFD52D5B66B73C6B91
C37DC02088BCC1F9A10BDF85BD44CA1B3C8575E402E2F1348B2F930C2F482F17
D107B1AA4C389131FB143692F8E31D4C0B2BBAC3A56A1F64F2453376BFF545C9
2118C48004CEC93F33A41E97C719CD5A7576A3DA959D9CC407E449AAE706D13F
6186F857B2FB2F403BEE5B138796310B1E33D5B6A764A8BF95474A18AA51CBF8
F89F1C5619BAA0FCD33A038BDFF903201270F904FF94E21BAC044837A876B9D9
95FE4879C61198648A941C64D12FBB322338CDFCE1F3CB0E7863E79AA792B335
CB8D72929FC3B70A4C412C426AA66336CC565BF624D326317DED66EFE67EAE73
CB4E02BF60F5463B41824A7602820141FC0E5E08A6023F692249430BFCCE05A6
FF5C45AB0C5C8756279A65074B6C0C743230B7E1B6A3C3415463F1CB6E1FB5B0
51B7D6BAF0B9C0E42B2CFE1B1C5A0BEEC5A1AD2C208BAC8E95550698DE7AF606
694CDDFE9C6DD15D99ED151912F966FCDBA86AC4D4978813067D64E0DF705418
91615BDCBF3B5D1F90D89200DDB63772D73C36E0280F8ACDDBDE5CD4F65E59A9
CBAF21DC1BFC18242EEBA6A5AE45421B52AA352F8CA312E8BBC82EED3C039908
D0061602996C1570088747FB93FB14CC14ED33F79B2F5B341CF89E42D842CD89
32B0923A1FAA993E2779E041F2CCF1DDC6FF153BADF4F59F7E0D39884C8625CB
19AC00356E030FFD1FEABFA053B1FE7D0D6EE6721F4F33BA41B670AF286F4322
3FF749CB712FE0BF7EC9416F02C2C3116926FBA26021B2C37847AC5664BCB5A7
1663B8B0644BF7E5B57B4024B9D62545627E1FF938AC1A373333B68E810458E2
756AECF4D616D59251F4F6CAF977301DA14F4A4F3537BF6AFAC3531808E50151
C166892AA2415303D2ABD61EAD6A40CE6307ED8C313841A757C5FC51166D8E74
E342451F0DA706150B807B733BB64AF5591B470712D643ED330F121F46CB942A
97134FFFCFC04EC1F54E3B51CF867408666C11C1BA8230115B4AF2D9DF46E1E5
B36E223885BB7E1E8B28BEFA9A469401FCF086AC64AB0039C2838DE14670B744
159A50B336C6A17C42787F97BF93CD6E0DDE7BF692895843FC1B9920AE84C085
461C1F5C08F4251173001AC87E9D52A0F474722C2C0261EBADEF3B9CC4DA476F
A01467AB8F5D72653D9A62EF76D4422E27F4227102CF7D56860EEBF248413B9A
B45604C2037E471BD24485A77247B7CF0369E4951510732711716E70D2B2CCA0
BB9CE60BC9FB76093637EFBE8110087320F134579D9E18D1E0A10BC84C7F14B5
49B1E8C80D263159FB18C27A41CE503CAD4D11C8EB9E6A94AC62BB8D3E850063
32DC7EA4CBCF5B232F87922CD209224DD5987EC19F5BEFE9E93C8DF81F6315CC
A936D0011C53E7B33D5B50ED7BF3F41289F48BAA88AB78C203C6D210C1629429
11B3230B8D462CB20F3B873F59AB6528318A5DC7648A46AFE9EAA17E79A2B578
0153F60EE0BB86C4FEE17290D7535F0BAD8499A55B72DEA797AEB6B3D26C3BE8
1355AF112486CDF5154ECA58943C475363EED630B3B78199AD5E1B2A9E803274
71F3D338145A944F02F7C57E3591C33DA1DF09481F939566E94AF46A23750F8B
09959CF714F36997CDAE9CEE28AF2C067A6706066B75A8CD6572EA0E0036FC3C
D9E2F9ACD11243A6DA864C0C87F694ED92119A4F09F3EF2C1FF9A8C20FA03856
1B4D714B0BC4AA6630C96F5A17D0A887B5BE92C2D57C932885383107D0F7EABE
E25C45396910E9820E7F6D6A2A88B057773FFB718872F8024926EA450CA2E00F
1358E60842FDAE556E100EBD51B1038FA70A11EEB30C1DFB8646A5C8C563B8FA
A96001197CF4D60EA6BB57A6AE3E00085D24ED6C4682EFF62C2E06F7D55F47E5
F2C22DD6547AA2632550F328F4B348C317B057AB00EADD9BC2CBD0D070EE364E
D353750387C9F9444DE41B5C85825B7FA03AE2B2BF8873C5EFEB20112CF9181F
F3D2F637A0229A852C8EA274290FC8C8A8A9F799FACB6315A2110148ACF5E1BC
35CAB95FED3F94C7AC6FB71C40F8EECDA336259BA0D0151DCB3F2DACC3D5F930
F3B3F5C994D3214A2D0851F039E95FCB1BC0E51F232CACF2867E6F462C044BC2
0DA885EDCD4805485D157E7B53ABA05461DA40B675F081053377364DEA4E266D
E21294B59BE135A88195FA65AB63641336AE136CB73F6F857EF419616A0D2E3D
646143431C318824F8E59200BA27005CD6FDE60CC49B767DD3BF6BA86CC36C2F
6C1FDB76EAD40D9798E28E803BBDDE19EB95FB14040B05983F64CAE1E93C61D3
4AA87253D3A1247C8C227F05FF01272C1C621C9B8187683A02831A901309F779
0E2BD55D6247A5892CF4A1D997AA303861016F2C3610395E68E87EE8D1F5022B
E5B15E1D9E2C450C3FE1CAB41E14AEEB5FD188D59C767873400FCAEA0ECBCB77
68953FA6EF2D5EF27D5C5F00CDF593131BEF874D46EAE06E39CD0C5AA4682715
8D2576376EAD0382D13E9D2C127A4C914B4C11AEA7B2B918F698F09F67B3569C
99545DBBA396FF13CC82CF8FAEC96BB06E006F3D0AE4C14F0F59AB1459DFB59E
53117FB9610B4C1A58A29AE661AD4C62377043ED60395FFBC427E49C38AC6C84
4BA9B69D7AF8036F471739144A48E08DCFD3C6662F5AEC5B3E47BEC2D70CCFDC
521B66B83BCF3CA8E07D5143B4D72DF9413626B15C9DC64CD5D2372DDA76BEFB
B77A5BDBF53DA40245887879B21FDC78BAB3651035868BD9112109A79AE45A00
AF94E33B82346C3C4B4DB6A492D01BE10EEEC60D719D138EE28DEC62316C242B
1CE92C4A28671896C58C29456BD86D3E59C44D5E36A1B6BF3BA299EE3D2B8AA8
CA36F2F280A6DB94D8CE2010B9D584F6B6C8762884F05ECBB866F3148AE22A3D
C8350ACD85968D726B95CE9CB04EDE631893D65A824854FAD75BFCDE9656AA7A
D0B4E4E042590B0A638C679A07F3FDD1C47E7574A41C9AE494AA747E993DF9D0
1462B25702913E704FB0CBC8DD5AC40722C79B7D69621EF6A94697081F1DCF3C
7E7BE9006352792356F083A55E58F59C374DC6086F5023716F6FE6AAEBBAEC7B
62D67A0521D7CC86AA8F3AE893219BF57D4634F96E28280B9290F77DA6D1CFEC
E11DA8FFC9BD666296D26C1324DD9FA70DC7224754FBDAD8470607B40B0F6060
BCFB8BB89E9A22AD88301A7E37815D8BF8DD34D6C8EDCE0C1B6BE651579A2C00
98576499B4123676F25F3A639B886B606CC19287478BF3FCCD3F2AE32450DB72
28D9E5155B199CB0A54DD1443E8981DB670CF5CBD03B55B3C47F21B6FF624EC5
FB1B3F618D88E55E6C311839D3A66A67DBFD6F051594B4BB5A61C61A6D74811E
CAB8CEC7242CD9848955489B4A055214DF69D093700EC07913D6AF71BD13F050
9534643C377BBB9B9A24A71A03B8C0311CE2B05A22F2F087DDEADED12D231535
DEB26EFA816C5B04E6FF6FDEDF4D6F753ED92DF0DD5ABA9D979CF458C3EC2C94
DB5156B12C3AB7BCC0D676A5C7D279A59E33DDD269E32DEA34974DAB8A9A0833
EE80D5F5C839C376A5A9F85CFC8327FF7042B80B0E772F3388724F52C39BCA36
2332244B994AC8278B2AC226C9BB8310ED4F9F1CB41937609C25E8DC250FEA26
AAA16688C8DB10188B234C03F993795D0C24BBB13E20B3973287C794778B0F48
6C4A54EF7C0B17ED4B5180AE6B70CCFF692580FDF695BDF1878861C12BAB2FC8
BEFD0FDB9CDC1BDF5F845A993747C3B4116A41750753F6CB3DAB01528C75262E
F6C5094204F14ECFCDD853152BD505FE356ECAB4CBA60B9BC62B2801ECA2FB24
1F3531EB3E71D2D81A8450E7C6F621E064CEF6F60A16911AFFC38CF8C5C5D5B2
730143BEBAB118552352415AA0A4D8A192C5AE459622F5E1014B04BAE181AF2D
75D860252ACFC5659C1E63F7CF958FC6EB4C846FECBC47EFA2BD924A52E6F23D
A10DD12E90D1BBBB4BD8EF673522EE765E26A8C973DD73BDE2DD1BE418E1B508
48D0E572A1A5FC665E9BC4ABC76237126EB33FB95031408800ADFD99A3EF0384
BFD6E724434F9E52192600756635226E17C3F3FF7912CD0F154BAE9E8F99116F
6AAFCECA75A4F5B80D4E545248287722479296ABE1051326A284A9C281CB37FF
5F3CE3B02CBFBAB28E5235EA9F0D32E9DC998B9FC2B939F658EFE666CA7C221B
902412DA9A5042494F6F8C0DBCAFA3C1A59910FF6B2D21A74B187B0932C8A88A
B1CAC06D44A94C797937D1F5C322C96143FC33C4A887DE3D6E4AC5A57FCDA5A1
01EBA304823B1269B8EE0BD11143F794D2B572581C7C05E499C5A4E7E5B04A41
65BB8E8A11A3D068E6572857D30D257A6FC424E3CA37B6CF35DFA31A89349669
36C40AC0DB23F66A0F953A7E3555C747171304500EEDA0ED437636B548C2F83C
FF106376D93EAA1B5136893ED35D4C9425082A6476330DB6E8188C4DEA0FF9C5
D669D0DA1F16B944E19FA0FB17A49D9BE64B650D6A61A5E68C32A7768B96C4FC
D6237BE293885B6547EB57AFD1C72928442167602E828B6C5F8DEEEA58656A6B
1EE8367D05EF4857DDC60278C1A12AD6972600A3BFD9DE4545BF8B0CFB0B1CB3
CA8B05FA8712F1B62E744ACA8539E7BE61C5B8307C8F6B83A812677372B3BFA4
C378E0EE96405CA92AB1E898386C78F2534621772ED4317983E82B37291DAB60
11D7242CECCC69AFC19BCDB0162BDAEE9CAFA3DC452A1FF9A5E6E14E773150C1
F1341E02C9E22CE4602ED96C5227060CD8DC5CA7A03E77584FF6CCF78619C0BB
5F292DE736479E59B06AC529DA1F862006406869659AC72E4C4BB914C5081D3F
8AA3018448EB8DBA7B26FF60F7ED18B816F850268CEA7A5BB1584F9690830639
B067A2B9D182E7A406F1D62E55A7689A824B564BCEB3B9D94F129592E01C7936
AA3C4A8BBF81928CC8DF301AB7AC7E65D5A5D8C55C427AE007D4F659153CDEB3
912B6A6E7459CE74ECAF59D1C8CEF49AA6D6E0994D47BCD912F490A673050D5A
84E0A69FCC925C5D2504899CF0631E699364D810627679992E5E571086A1EF88
11098583CD6D012C80A0463F7C5C9EA37781E7CF9B49C5BD4731A1095FA1135C
B76E825C7E1640656EBF90815AB2EDC8BA1BAEB1660CA92E5B0B82892C8314CE
C9BDEDD524CFCDEBB2DC9D1C999E3283CFB6E7222F6DE406B785BFD7FBE82357
8A7A63391459F5488B7E306BFC43410EA77A3CD72B99BE36019D6E645EA2B73C
63C411D6F28E279840F10930AC66353000519F6004E3BF5790BB0CB1EAB1502A
8D0BFA9CE6A7D199D695090982587DBA73FE430A421DC603884903B63884B4FF
F93D2931C13F6D9076F2385F93A42FE049F8A540228E57652AD4E14D41046679
EE40367DA575ED8DE372CA45812261A5FF65AF8EDF8203CEB4E2157A7DCC4EAD
6921F9B603D04E041686F0EB8CF08F6B3E9ECD8785940F94E40B805E460A8544
51D5E971E8E665DBC98E586A3C7B973D3A9DCCC2D5B588FE24115724E7907BD3
1611B1931F4F1228018E96F140B6024FA4EF6C70DA6F0DE776875938BE310D00
331DFBF40DA0E06A9EBD16ABD2D727DD6A307F24AE72546D534CCCF449A94514
A5CEBC0361A387038DBDF5C998D1F95EE41DDABFC2285762EF85C8E2BF9FAA77
61FAB6B46FF0F1C4648E12351174660D03BAE79532066D15108533819ABE7FA8
97F6F0F40D68C3A1DE4275E5F3290B15E920E02CFEB860FBA147510E8E072E21
6943B7CEB838954591F106A5930C723261FCBD1DBC442035908D828B797DE81F
9E65B25658B7B7AC18730E997BF08E8E3ABCC02669745C7F0EEBBFEEE34AD8FD
37E75C9B1028983B31F3A011D1966D01C30496228C51BFF3F6899FE4697211B5
F20B599D16A244039D284251FA314E48DEADBAD50CACE527AF379476B79F6804
50A17179B8878E644CAD5A6211A1F95F132CC9D92F5D74A1A397A64430F76A72
C584EB9B8211DBB372D314206D6D599CCDF562361132B1D069AA8F5E5A1243B8
E6AE89AD31A7214EA8656054D4C88F6FA8FDBD6C39B57E3AD531D217FD5CC326
D791CACB61BAB0094996AD9C4BB1AC9E3EA0FBB1AB789380087C08C75F86B67A
0D76942349E43A5D938D0391E0B5C3952E34A38B760A45F97600024FE97537A2
D2A6C19C842EAE2249186207A66D7EA3164CD7040F85AA7DC42A7CC60430A9AE
2DCF9B5FFFBA41CD25B86E6B4C0907C5884D64B595FF1C68F75746585625E5C0
B400C865498D4E92B2D67CD0D3DD20A20D12C5F1AB74B1522217EFC98B4B37F8
6BAE2919D5FECA0738E6FDE01AB7C2C9F989ED6AD5083CD8C1DCF16AADC4DE66
319E5D69F1E91056870F12BA83C7D65A0819A643A594F2323043C694143A53E4
9AF18EB94A14AA155A86DBCA8B53F3E0B6710984B403EC7435703EDB0D708269
000ECD04D70AACF30603ED6735B625BB07CA6A1187A075E0F09CB3F56DCEFA49
9A8419D07875351D9EDB0918E2E3E5993B4B89955AFD04B104961168B9AC4358
A475803232002ED66B299C85BB3801EE12E02C4D2D1E68E5BAE72275F0855571
9AB65D5663B1F5247E31692670C193B6E9B693F86FD9F644C0D80272623C47C8
B43A561D16697BE8F6115F00C69E8D3D4B4F975E143ABBA8E6D505F3F1CE4DED
0803B3AEFED793988E9FC00BF459A2976CFD0D9A4CE03B139BF1AD85BA3A0F3F
4B0999FF243446F0877FAA019B17C1A13D7C9D53126432B616559A33E13FBFFD
37266DAA1706F34D9A7F3BF8056B07AB247E9FD612C776B8335836DADA024478
6EA5AC25147AAD9FB3C25523CED7D1C290ED392674E2311C3ABA0970DD975B46
1594B0E9AFB0134E6D6083277D8A7894A23B3144FFBCD1A3F22D0FF0FF5A862E
4D8CF119D7549293239AC75143B5EA52C15F5AEFCF1C8D252A35081E54013BA3
6ACFDAB010CFAE093B74A454F11A6F9DC4E64AEE26B309A8D37880EFDF20A014
9AA33C1B61D3BB570586129466A7B2BE59750C0AF8034EB9575CA280C8F9CB4C
A78B540C2B12C84D5E30D4A2AF8A7B18FE42ABE9781F796DE62AEBFA800DDA58
5DD97F458501A1E16D7B65920C8B453E1D4FF610983AE7F568A0456F9ACB7CFA
E7ACED2C4A91EFAD20DA2A3064CA173783EA9D04A5983EF710561715F1E2DB83
6CB4A4CEB8BFB37FD570907E03314917894EE0FD0E84AC2D0F07FD69861A9B2F
02D2AFB3A50ADA17E6A10495871EEA4E899EB540748EACDCB00E1F98023EAAF5
83F11ACB334A4F9D330861D3B0CF979AC5892ACAB03BC7D46BD54330A60689B2
0222F00F8D8D2C424A631A20FBDE46D58B7AC1D297701E8F07E513EB68E8AE47
EF0CEFF0334AB583836311C636EBA49350025F131D697C56CC45F5D9FF17EB96
2CC5704EDA4B96AB172FA7AC29F9C7F7FF2FC245360AFE2F671D955600F3B30E
4B9945B2C651A17ECBDB7D10C212D730596513AEB3C8EF49CB3572E351AEA34E
D5DD7572C17AA4AB5E34475AAB0C02672E92C0A36B8D48A8E44EBE0151B7B62C
5B41E9B7D1D42A3C64E735C6D777C1B1310DEBAA13FA1A8031C84D65CB64A928
A117A5F575F69F5650386207C61C863BB95CD616E7C6BB364343AB44B13D2B76
58E1A47DB254989BF385C3699691B9B21F847D9C361B54F833FC8660B93AFB2E
E6A39734D8F51AFC57B99CDE23448377908E3E856CCBF88EDE5B8EFD93119B96
0D796E3838FBD595D45A0FE0E138F8A57C55DE7BC0710161190B59A7FC157C37
4D1AC00D28A53517B8C462A60C5A2F3D12DF91713338EDC66E14A05FCBDF44AD
D8560248F609FC1186E072D119A25B963696E48FE09CC08E327ED080C156130D
E54AE56B5215E2327EF6F9F7A6AFD58540C613A6551A32CF8ED0B8AD0B7089E5
CCD4368BEF377F687F8B5D07261AE34AF24509B8ABA9BB79FBACF4D4C3CCA402
366C81CC12CC729ADB75C32492D81EBFB38B4749BDD417AADF6283098D198960
4FA5CAFD23A552C106D93BF4040C7021165EABFECF2A5DE493245D4B6066563D
2C8401C18FE45C157ED417F480E195171593E9A7CB443BBE19C6BB4537600A99
874C784D75E2F9D07C87956CD8B6A34A67F50D9B2A7AD22048502202C7DA4FC7
6A3C642662EA3C74D71D996F488F107361AFE716491775830AD500AB4A610A81
A62F14213D8E1065A73A14070087527FF8D8EE2BE0E4C429CD0E11B9595A29A8
8689F254FEE278745C49B0F13198C432E60412262A4139E3AFC3300068ACFB1A
B527EB92A64AE49E152AB92059DB0C1958C4FFDF6623DF7AD7095CC1D1812D2D
7E75D42FAA05A654326145F3CC4368F6E5768BA2F8403CB6964016714046B534
686C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3695D634CA0684474DF6319B365E4A64C90F206C9482
B87592ABCED68E71CF21347EC1299AD5C3E089B07B4D82789221081D1C75F39C
BF89BE5BA6C53DBF61FB3614B78F4A8FCD6AA69212F7C45D50561C28368FC5C8
7A4507A5A16BD33271BB572126735E72BE44078D1F71342A97678A63DBD2B69B
E0D1124BDF8EFE3FF6FF5A943CE835E6FE57C59ED52DF91DF9A97F17108D4EA3
AADA25B85BFD07F9BCA9D7C412F535755FFA6B31BCE8F6DAFDE2CD6CAD4FFFB6
9A018EAF4E1ADEC4489276D46A89226F820B309E311279955EBEA24DADEF30D4
B53885899BDAA0254B708B440525163FD5EC1B97E073026515F10BE924CF9FA5
9FE0FA8765619363B21655F6F293D14230591A731D24C72D595CBA1C1DA945C9
A23B5CB2D2456970CFE1D8A1FE004BE8A0E7FCA182860C639094E35D8E97E518
127E38AA43238FC881601B9EECD1EFE20D24963EC3605A3BF457CC351709A1F6
E690F24E203C48E484B04AF3895C2DFB7F28CA3306FD8CCFE894907FE80D4F5F
3B0BC688C97933EA251CD6752251BDE605E060A613197BC9B3DF2624B3BE9383
38B330CD5A72D1106BBFB8387C813BE4AF71D231840C2C054128F21A69862083
296400A3E0908340F28B422EA11A4990A2522A8B6826A9338BD531C2990C838D
E052B38EC7D2F946E84AA859DCF2F9CBC297B835B5728DCFAA05A92C10594C7B
0F67BB0757EB0AC94825253E40F69629D301AF66863015D32A3B4D01EED786D3
60FB36A2C8A908CF52260BDF828D6CA1D40F32548D6351CC2D6C69577D9732B5
2722A4C3AD1D45D23ACFDB6EB98C108747A95BAA4EC333E6768781957359421B
7EBDB671E2BDE64351F6F48B17CF83C09BF38CDAECBB159B1923C5018140DB37
3D75FD85B719A6AD559ED266FAB09F5A744A4F97793C9381B7C54EB0BCD7CA7D
0FA6F3399AFA7FC87790BEA0BAA176A7000DA871A5FBF91639613AC738DCD4A1
2FE686AA67C36FBE46E907CD14EBC178557477755FFBF9E686BF0E9C1F8C0EE3
FA0F04B44B4ECE716EC1DB8237F1FB7C43EECCD5232F881B5308E156CB5701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75FB8D5B00DB7BA78FBFC5B95E167C6
CFB9A2275128DDCE62E56BBF35D257EAE99D627535F8E5ACB4A4D3E1E6D9D24F
9CDD9F80028D37C9CB4067A28D41E879AF98739929DDADA413EE35894A6A5B14
CBB136548C4B00E47FA77732DBEA89E10E98CAED50DEC8AB2536A447F7D46D4C
63A99114EFD23133E2FB8243221A2E8AB1CB892DE716CA34CE544502ABC9526D
F48B0762B57F8AAF2E120D5DCD70D140B498BA43863C45D94E6642DD04CBDC31
0087B2FC75CAD18883113AAADF162B023352069DD1BDEF229E16DE8D008A4CCC
BC317B47BE42354627EC77B91564A034FF2F3B60508154B08981B62A2E9974E0
E9A46A3AAC7F87B1FD8620A5A695852F2FF71CD16FA34635B526265F1A635254
75398013F04B49F67164F03610FAAC41229306EA37B9DF6E8DEB1C6C2BDEC9E6
EADDEF6E99BC482289181D89CF74F9995B40E5C55FBC81DC7686AE740022F764
C49FE9B49A108931E3CB077A9C53C764DBB47C789C795E97A537F013BC2BC786
BDA32DCD5A856714ACD5D2BB98B011650B2A5D8B881D6854DA373B002BA279C6
0649618BE2D9B1E10DECA9090F66F089E4D7C6D8087016FCB998B95F194BC9B6
E95BA14850E251A4EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB34F65F327
D58731A241E11468BBA16BA3494A4E80FF16410385FF17A1444B2D1596343B25
64124D648B1E0955CDCCE027BC9F127F79622FEB3A6781181EAD3F02101364EC
FB540C0B2473F20BF05A8315BBC31178398C4DF5CA482F899FBE7654F08D93E0
29994A566CDDC866CD6A1CF5DA076F94B31AE4EDE8237218A12D5E9DEEB9EB26
7CE99EEF40ED1A5A247FA60A89A2EF6AB95CAE1FB119500650FAD0C18B03564E
B61A0D261812A3EDE5BF402542BD215541E3A478F0933EB129EAE44484E084BD
DE7D2CEEF5E54E2CBE14A20F56A27B70B9C7DCBE9300AA2826EF2D6E38C9EE32
60EAFD1C1B7E9CAE9EE810B4C7934D08C44E8A3EDCADDF8FCD6E289C19A7056D
A716700F391FBA6480099E8276173D443884AC0600329C607B7521B1C1C0F575
F4A979FF04F1B3C17864FBC8B92B77DFD068E53CC9111E290624DC39FB79FEFA
C07D2DA7DEC9642694ACAD9C980FC6F26BBC4B98AA0F9624D8678DDD10596E3F
55CAF2F4419B78FF39B929627428C3A6736D8777332C017A9411BF924DE0E40A
24B0E1B797094DDD8EA17A7A281D007F1F6EE3CB17E0FDB167D05506A96F7296
047E208835176F3154E8757A1C21857556EE412F4434E8062A9F9101ADD125A3
2195B8CB98C9B19235FE35E0DB6F1FBF31ABF448C9261B75BF1EB61260DEF86E
BD69F26D77A20B25BE10094D4C196E26034F2577471EF7CDEFD087BAFFC6C93A
F8FE338E70387B4F1BA2119F24E0AC14D6C89D60DBE2E17850FEEDA72C8A882C
F268AA853D036C7633EF1DA737CF40C5F170EDDCB3B5518E28C971EBFB43D842
99D336736B15B05591122AE51D1486E1F2FA31E9C9379F2B3440AEB83539438B
B83563DD61FA39B66B4DDCE39F3E590823590CD7C75BBE8B58EDC2F2ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFA7619F27D165264869A4D5EC574FFF640
76FD6BE210178957E86D8B7303BF3EBF660879783E563E5FD42AFA2E2C523957
8183B066D5A65BAE4AB038087E40257C1FE6F484941D7387A2F92A69CAD3FFA9
AE559D3043D7128482D9ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A60FC
7025B92E55DD5D5897F13EDBB3356F9E2B9DE1FE09288B3217E226202117CFBE
3DE2C6DBFB0BB25BB13A128CECEF9D4D51001EF6E00C9CBA158724AC4352EBBD
4085CC2897C588A09FDB14647F570BBEE55DC7F2AED102A1134FD48A8C8480D9
137F359E6287C5369650A06422FB0B3B29ACF32F3DDCB4DF8B5AC385B0E99329
08C1050CB6DB39BB10C1F4D149305E6D442E7D8B58020A01C8A417B670A41F2E
B01A30F2AE8C73D83360E849EC83AABD17E084BFD0A3606D42EFBDAD44BB98A7
440207EC9597D409FBD1E6B2429DCC30846293BF3060E9CAE54A81D21AAF3BFA
BAFE773F095BA4D5A0F9607E25DC3137296CE1D8E2B8FB0DF6B5FB6D5C415495
635BDFF798B08041C566CF1D783EC7B15B4330A37FC9C1BF23CE45EF19471FC7
2472E528053EC041E396333C90480C82F2B80E740D5ACBCB0882F35AE8A3E3B1
FE3903A941EA20902C10B0C3E73DF25106052700653849C02805E1C56026FA71
302E87A45A22ED99B04853D66E5A22B56F79FEF73918B7CBCC65CA7DB3E410DB
1AB7AAF9B483A4DB3B333B158517971542915D70737B3F22C6A831A9821624AD
61DC8A0DE77A1F4BA087E7E54F4602592AEB49D4AEA40B81B7B653D90E146B6A
AA318E165C8353C9CC1F0927D73E21ECE52D9C3EA6DE3CE70352D2ABEC8E3DD4
CCF226A6829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7553CCA3725FB707ED9
526ED054C471B82AA52B6C090D4C6C776B5610954A6E5471F8D8344C07DB8E45
BE34098668A5FB9DB4D49F3FC041809ACDA455C62A76B51D730D8B124BC6B76D
049B17736CD9E28DA73506142B6AA54FDFAC9050332212CD062A6B96FB18552E
DB51B991870A6E579DC68B52DF7F950CE1BDB15548CAD879752198F3A2141F1B
77DCD2B7DC83E662C19DDE6A5207ACEA1E0C78CBAA7A47C5F3D0C745262B88DD
F05E7E3C1682E8E90674B781EF298DBA6CB1758D22EE8A7680B01DAC100D3748
CA1BC047117E5E9AFBA7839CAE44964C974F08DB4C947F074F5B3644BB3F93D7
F96770C73499AC0AFC3E20F0BBDFA01502C9A1C30E9DF357529D99BD156464C5
D64ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE63D6763E8225E9ACAEE7
9D813C62B96A7CD2247A269F53AC59E3E886BC531628CD9FDA87188135B3D6CE
0F2CC637A8F2EEEA4C05990EB23142620576551DC347BCB2302D5D5FCBBB04D7
7DC4955E84168F9AC6EA2E25C8C38B8A36B337C6925E0CB5BD963CB791E28CB5
4B37655D9DC3BCF1F660E8262CD10AA45C67562303483314B5B71B07C7F8C598
D226227FA8C178C10D90A2F26A639CF016B843ACE6B352A0B859AAEB15A52403
FBD562D284EFBCAF3553CC5A757FA50D53E6AF18AF09A1B9C4792EEAB445547F
698E0DC00CC722B65CBD277C5DF3B4B1275090B71A4D4B3B7961171D67F8F6B2
6EBA8AB37B5C35DB16D8B776255132DE99F3F4B7530A72C49503FC4D5C84291E
0740415B51E89FC1E4887D1912C7FFB218D23A08172BC11116C8028E77D0FE5A
DDEF0931C9EFBA2B76B78F6A90C0E44F8236F55938C3CE5A9EEAA8379EE7D879
D13C3E2D204512584029A7E941946AB7D45710ED4396C6C9816137832A56C48F
C89066B9FF63B80A84B36F75AD6D455B580A4BBE440839A54B385C9E4571C466
AF1C084F04AF31AB83EAEDA618C70F735DF746994341A37D17E8AE636315CE9D
47B1A020296D23FD0A59D6AD28E34849187D767EDE855B520ADFA07DACBEC45B
BF0C25F00DD94C798C8CF098F26C8AF48B458803BB26487C1391BD9A5B51F33D
505FE3ED168109F1F39AC5C3357E48CB38906275AAE8D8CBE9ACD7740ECA4A47
A985E2E16051FA4178F6557DFC8FEF287CB787EFF59E86B4A72A199F16F2C24D
D5A6AD833A4BA6F96FE67FE603F3DE0BC536C9A2A04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F44E679E8518074632F6BB0639E2AA1DBBF34708FDB8092FE9
343274DA68CD751A72052D4FD983EB8C149E081333B2F0E0A54134F91D7B4ACA
E954658CFEB3FF04F3F9F42C57124BF3FC0BA485E050DF883E4B2767E236BE21
9FEC94EF94D9F2096E76F1C558F40812444C6F0F4DA995C8C03162375AEF5BBD
6BC3B250625E4B5C2B2BF9879F853460339AEFAF4FCC58EA396431BD4F95BD5F
6DA31DDC13D860842BAEC5EB5C217FC685C06C5AE447C991137584534EFDDE0F
7BBB3FAEB89D737F9FDD69B4EDADB476A1E588A8C8499A8917CAB23F00BC124F
D93096D1B365B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E665EF36DBD3B8
9455CA9BFE2FE8ED26203A2B353C3C9C7AFCAA09793C8A74DA25396CBC1484DB
565607911498AE56FF61F2AAB48F1B954211AF0A38D6CAB3BCD6697C7E56C29D
62A325714D3FE8C3DC019CC01E8738CCA2596AB05857E4B8F9D6695EF332BD3B
AA9EE551A4B142DDC13600318F45CBE1BB1A6E0CCF1CD79182D3B235B457CA9F
B713822F634A96C5D1923710DB4B98B063FA07A5FFE26234C70FF6EF6CA2A853
FE0F76AB1ED5B97A1060D13911F4AC44FA5358837F7CC6ED863F0FCCE5F79065
D7AF0839F444CFE8AC2F2FF46DB2B95247BD8261F39BA12AD5E50433EF517BD0
FD04C73FBF1058A8907ED43B4C144BDAA3C4E6BE9637FC8BD3E94D6257BE1B7B
FB179A4479EBA92EF2EE4E7B73DD295274E1D416F7AD7338FB3116A3CFEB9E33
8EF0D7B0FA721D7D11990750232AB90B60DEF84924B838AE79C6689275697225
1698C73A825EAF77F8C38CA8468E616771E6C9093D7E3479B0DF3F3160EA2059
B5F7BFD55E90340B4244BADD57DA5902E2C08D00E814009234E2A36EFBD854F8
68BC9301D33D0203F8D1F59EBCE526B06B610DB1B028D29F838A52AEC3BAA982
56BFC6A306ACDD86AEFA6F4F2AFCE55BF27AFC96D93AE476AB15324149043E71
3261671835DDF163EA8D3DA7CB1F0514DEECC225301813E4ECE6D689B0A04229
04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDD3A059F2F3421FF99BCAC2D54
03D67B0DD5ADFC6174D559534155A42F6626A6E7CFC849FBFFBB17679ABA8C34
B1296EAACD7DA7010ADED0D6A83F04F396CE83F0549B1168EB7DA7468011420D
BE034D5AB67817DA21F12130B85DF957C636987F2ED81971E9FC729AFC1E778A
3C062A85C2282BC39C571BD45057FD09085730695ADEFF892B4307BB163A248F
9A2052CB8980119F3F2EFECCCF2C04B55F44FC0D155C1E04055D6F81AE5E20A9
E98ADD7649142C6CC2FCBD09F82ECF0716F5378A8C51C139D72816DA8B61E413
EDA36A71E7B6110CAFAC612E3E67F979E774BA9C7A580D605929D6D790A34084
7DD751CF51F14D89B269A940060FB0B603D3A2A6839C1C36A3CB55707A0663E4
D7346CE1DD000B51AB4A815FECF291D3E8F573EEBB83E6F9DECA82BEB3F58558
67B2B884E4A9A334BC95558E4C1A9D0B93E9A8C0D83CB8354B69357920BEE4A0
4E464B774D6CB4588DE10B3DAF9F7E546F6AFE62D85E8D25FC1A0039346F9156
82672DE85AE82551277388BDC62DE6FD1A3DB14805DB66731CE5CE34765A6E35
825C99CB7AFE5A873340B50AEE34371B1D7C90AFB517178C9DFE59CE8B036E3B
067B364E0F77D36DC299ABF128FE2511732602A5885A6CD283AD3C1C87F360F7
BFF771183B302FF55667390AF2E314BC8E0EF10504B5612395461652E3B2D6B3
BCCE3F5D699B3E2227DEF786D7BBDAA2A35EB13FD17790793B2B4A9E06AFC15B
8B1E7C3534BF816D19A02789F1E1BE623EDD5DAF54733EB1AD965E8A5A3ECEEB
F44790D57FFB857764A8EC459BFF61D9A893DA0177CAB77BB183F54581052B66
D6CB569F8C51F03E409DCE0717779DEA582740E49F088BEAD6E482EB87350926
910860A95DE4100D2A9BA91424DAD1802F2EC862FB85A143D7B299223ED85252
02C31B687F2C19136157C6D83B33313266F1BA8B9E065A0E64509902D75FF0EB
AF919567B7A1CDA5E14FEDA66F60059ACA0ECA3D597FBAD8C7EC31F3C1C46E5A
E79F74B3589EA1C34BC2A4827253F72CEBA7495FFD2989718F2A54E5D0EA1719
ACDE43012A2AAA1F71550220B035B6AE978341404C817414D0579308612AD113
219204CA43994CAA4671A6A97BD8C6807C21360D0C3F7742F47CBC2D74EF214C
0B15C50A9B5A26205F096D63762A9B14F267CE0337485EF58E37EEF30EAB487B
6E7AB230EBC988C382F594B4D4D4B92E6AEC4A9F07841FF93433615B89BA1272
6F5B01CD5715C6432452ECEC048DCD14814E47DC1226F723CE25814E30876470
F16C5E8F87F74CFB89CA99219C25478E0A63F78F3460EDD4F64B4D2A5B3E660A
B83C0CD1BB032CF0DDA97FD7C35218928C48545178CCAA9646C6C89D2FB89665
3CB3AF6C9466BF2240E2A71EBEA84FE2BA8B2BAD7C2F670BD9087F7531490409
D02F3D87BE05852F9C004219582D45949B8C3A7907A725B1DBB3F1A92E0A0456
D103AD819382A9EB1E201AD6F522AF0386A30A2693B607A67E0AEAA7E969E420
86DC576CE06532479E48E7E905FB5E8F9FC3DC5F258FE3C18E7464AFBB0B0757
2E4E438A2F1A4E37E0909724BDD52F4D4B98C4AD8E1A1528BD444DD1B0EFDA76
FCA43DA6DFF11E72D5BAA35CCDDAB44EBBC0C71C3FD43F21DBC6904AEE4B01DF
4F1005122C3B92BB93F4E9CA79A797C3A4F27AA9924D6616FC860CCAA3402216
64068B6E7C7CF2E2432A65BA21DBEB0A83FC660BEB3F1A3357D218276A5D0FA4
EADB3616CBBE98428D5D811FF6FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0
1148C302E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AAC7C04E9646515EB8F
EF55DBF964A5C2AA9623B8674C8259A681E27E2C4AE26093689327A256571CE9
457E795AB6B63D78163F227F1385113B9D2A2F0C56DB55B7317231C2B2F371B1
559D8BEB245FFAA7955250F08E8F5B149E8F97D25635B98E9B51FE570826C75E
64296714597A74010F59376FB1AEB72D08E929E1630A7750DE134C6BC13E5AAF
A36ED9F7A8E5D9BECFBE4384E04B0D6FECCB0244DB29A8B801321969CD052FD6
1493FDA211564478C68C592E158DACD4D9005B983760C79C08C12658303A3F51
1EBE5F047EE68288BF3DE1225D981C287FA9BE1B690BA0F8059823BD2AB80BC9
DC78BD724DEDA7987A6DD44876D3FD2B0A21E719D5677DB0E64C7650DF6FDDAF
6038DA9D24DC1978AFD87934AF5BFEAC00EDE5DBDE3D585DB595D29361F8253C
26C37E09B4F87056EDD8C90917EEEB978E51957475B5717AC1BB4AEDD87AD40D
D35C3449819CCC9366AFE79A48A3BCA95DB66E5D14FE0A8C3FFFD51B5492DB49
BF8810AF0BDC54BB1D08740818CF45A63A694C8F8DC44FBA5607435A619684F5
02CF60F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84F67D932B8062860
39E75042D590F24D8FE9F50D35EC6FF30384385CF7C56DB4A483D83D7CDB2BA2
48A366D5E0651560A4BA2299074E853FEFDCE9480F0E55E126E1DE7E700FC3D2
2EC26F9B2761469B0EDEE8BA22F029985C6F5C6E52567706CB28468A9A6AD9F9
B873F1845718FCF81B2A15BF986954219C2577014CE55CEE9E4D5B2FC43C7447
A9605D5D86CC06E8029D4F57A392D2738F846305E8F3AE5B5E2BBC2F802F00B3
A75DE53FEBE1B7B9272A951A047119B40830A39909494E86AEE21694223DF5E4
A7198F31E2B8282BED7392C7BE2B61691EA52F310E0367BD918A9DB9077118A0
42EB52EB7800276E7502D8CB8A68A46889B0D2DAC7CE9E40D84F17B6ACCD8743
2BF87A6B87D3297452BA7EA1CA9EACEC454312EC1DCE09A40896B78BD1D5A73E
157AECB9F3F59C0D736946734C6DF70888665716037A35F574BB08A82641F363
6C82E2BB16E686C92C60EA329075C30D3F97A3214A478933678E9C5B2267C747
BAFD5934D95FBD2640BFF7E94C4C260BFD0FFF9D966F224AA72C22207BCA2267
52B21D21999E31A3DA1E51A3282038BBA7F7FC70987A57EC73E5A6B9508B48DD
49577EF2E015E8D9C0F64025C76E0550BC5D75F5C40F7C7768A67B861D5FC288
7F1635AACF2782022D039A8D49085ACB83B160C466909F562BD4C26A26BEE741
ECC847467858898AD528633F477B739EAAF07A516D86CC678FF6D5A199877F04
81B1BFA806A353E3270334E0880843F700FC1F6065FA37F248AE52A1FBA985A3
1F28AC72D636AE969256DC91944150153C99FBFF35539B5E3CEE76DF3204AEC1
961F654E12385D1EC21D1831C177FAC71FD55A5490C89142F2844CB7E6352B01
A07303DE29B299AF582319835E23408E414CE2299CD46784E6A7AE912C213D0F
380112FEBD737CFF6C1483C4520BA4A4B904A4031C519E155A116C14F576AEF6
6E86BF55B83AB07C8875DE7D96261C02AF3B27E36352F8DC981EF838587C80FD
855F1733F50F636A4C7426584812DA63B5F0B1E400E9F96CC34E7E2C3CCF88A5
17FE6F9C5FB51F8737E0EC21F7CD596D42A88458B89786C2F6D96AD2D415402B
06C2CBB2CB91B45D00DF27E5A47692A30A7D13527A7F3FDF0C07D30FB6436D58
753F6AE969F7207578FA40B7457C36BF9A0846A0C5007E8D72ACF2D32F854BE1
642416405BCCE8D41818D663AFDC9CD1C81B91D658B398D4C89F58C854451014
68001F40721E8DADDCBFCD8BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A66190C
689A73A26C5E0137C208DCF1A7143359F8EE27AB1F3639B4C997B3FE3D863BD1
FE2D56BD513E5BE907EDBB61A117B7F1BDB61AE87F1906CFADE3EFCF095AA187
EE498BC5455C976C40C6E24D239FCFE9CAA763CD150D404C418B12590B6EEA0E
1A19CD139622317F5DFD2EFBD95A7589BAAD70364C33665F90E24D35581DA77D
776D1EEB96F837A3A2F5C501AF422A313B47DCEC7A019705E05AC514331F7A91
B4F74898E2FAD14576F81B1D688DD8F61B1E4450C0C994D2FA8F4EA0B31BC626
75775A139B54949665078867B4A024FC24B16AB6474F370F7F61C7A430AB2303
FC215B5B353C8B1D386CED0321AA1103F5F4CC57F15121A5265A4B316901E61D
0B6A13CBC0EB3B038B56DEB99AC4C60BB469AC2C2CDC1E415746055916E409D0
85688DEBC02A6E020EF5101E41C289C854F7452F28FFBCEDB0E2DEF7ACE89539
7DFAF366B982B1E79ADC6523109832853C664B53C4ECDF81B0004DBE82B86F5B
A36A3B2DE83040B16BFFBBEB73850E2199B8D101C85CBAF179EC5881CEBF7EBC
3B30AC8AEB18B09AC7183771066ECCF26590A7894CA6F91AC2CF4A1420693935
9518C6B25D2C97192E8E1F0AE8D3882052CD47181C522E1F417F28A12064034A
7290750EBC897F11987CE12AC4C09643CB0B9D921B4A6980F6B22FE3C7B7CF63
57CCAE079ED34837B5A08E55E6319BE14383542B9F6500CD29B4760D5B4C77D2
5AE31C4A75BD8C7EB02722DA8D894241446F05FD5DB3815F144E1EFB2D400AD0
25F1AD7295D531787D2C5D4E00A09F155BFDF971B5A4D0AC102C2CE8A28E1A82
794BABD4D8814B53865E03C0C0D6DE7B16FE54A2CD42AEA5FAB6694A64B334CB
750BB6A4D0230ADC13EBBF5AC7571B0778C0E9D25358DA06B20DDF35F409AF15
997127DFFA9ABFF8C858A51C83CCCC572024A6243D6BC209B8D579F6A057A27A
EF243C4B389CCF9382BA5143D6359D3BA2ED407299B5C9E361C08AA256350ECD
82F3B38BD30286E0A8B3E42F7CBEC366E60C18416B956C6377E02A43FDBC78E4
627ED79B16862D939F3A3000659AC050E7001000B2C6848457D632AF0F1DCFFB
6E5F5F586F3A72BC1E72A5F984E7235607EC39E49ECCE85A8E75B8B18D8D9B9D
2227C7649133EC6A81002AE7A4E697857358F58A400549BAA570F95B97AE0BC5
7BB244A80105AEAF034D50D17F2A2913B639720FF4675597704DB7721A0FB87B
BE7530ED3C037A517E7F4D92C7AB7A2B373039EBD068D131C7F302A2F9FB65EC
CCAD4616927004178B7B2CE55A8F36653841CD79FD3514557D69140D6E7E9813
2DE2FD992965837E604A8B2C51E4FA23D38F0387351BEFEAE26D641D49B7A349
0F09BF16B8D179FC176D0735CAD73632F8EE970DC0EBA43D2C700A1D58F29F7E
F1487F54EB23A1CE0AB8CB768EDF04DBF511A3BEB1869F9D5F0086E13F8C3349
8D55FB08ED70950200C50B7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88ED2C
49C1700E8AC2E1EE384B0F6907DA0232BF5153AD600D17DE2777D5CC84335A77
6EC13A25F0B85F0EA2FB526C4A6975188599D789CE1B95719560247100F68FEC
756F7AA110B22AE36B9518755C2FAC2135E89AF71192E8CC3776F553A88FD966
801A249712B98F8F6684D7361A1286AF3E4083CC9E64F40A500F045A27CDFAEF
A66D28B966E7D491B5803E4E32D24FDE0B7C56732957AC35E7CEA2C1AA00C6C7
57576EA0E4C8F0F14614231A275836A622235EADEE4F56A388398B1E3B8EF7D9
F110CEE189C26CAAF7990882F149552ACBF1101C0CC34540AFE14778BB219B59
B3BB99066BCDDBD6A90DADFDC11833C934EC4E446C77F005D897D944251600E7
A6B304DD76E088EF97077EDE26FD1456F4EA599CF4C4B22F65104F6D0D96CEB9
463A89A504AB57C377BB062C02225DCA03E6485C035C6247166107D6C1A4FAF9
AE46BCF6A6475B4197423EF9DE9959CC5CDE05CA9B914F8749608248E964F913
5155384A2C0EF7347C378B111AD792A90E38E1552BA4D6E36C5AD7B56F4A5D0C
F8FE219670A817942121C56A6E64555EBD682B2A587F38458944A0E355F989A6
D77EA1E24367EB14A7D28DAC9A22E2DF55C42D244D9DB91ADAB25927B9001E6A
DAAB86BA6B2B4E28F3C65566E2DF0AB84140F348449C01E851C4736321D6DFCE
20133ADC7C1C76B14667721A220ED3DAAF96F20E29D2F08BB07743827690BF7B
6E45B4F8674A6FA270F14B4944F276428753AFF93D541651CD027D5B23BE4FC8
6005E73CF2508994E2244B800EA15AF8C16B9B8329E91644DB1EACF0C0C781C4
F4C411F79B1D23A87ADA31D3A48C7190B618659D7D0B64A40FC4773482AF8C73
85F80E163B9463C38F611AF4987F7203DDCE93170428CB54EFDA16BCA724284A
ECC3A2904C546D6F2ED297BD3D3A359F69CD6D9D92F5265392E03264AE22D81E
75A04AE68344A9F152859C697E93BC968A3F78C8604FB03A0AF394E19A0E50D8
A50838734E691BC16C50353B2441985488F0E70612603E3F0722046046DC94B5
017D456E865FB2E416C4E91494CB6FB74220158EBAAD27211EB43A348E7E1F83
87334F443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA068799547812B285C06
A7820642245A91B895E018395581C536C3CA5680F622117252D1D72A6D9D057A
413F73C7FEA1993B5020F8574CE0C8B6FCE43E382AA3BBE0CAF9620ED0ECBE98
14BD19184B2C0F3B04B2D3ADE2358EEB27274D7B30DD69E1B2C3CA70F2F79FA2
9543F526BE2A04C6309DD3E47CF1FA44EFBAA756B02E839A6105021CA9B728D2
7C8018BECD829ACB6C3D9129E976A2427E1611066E0025917D1BDB7E9E37AD93
5833B94133FD5C6E5F76EBABE1C94999A54BC260661FD4DCE55956FA246836DD
DB17F52681C14DE689A8C6F2576DB779DA5064C8743100C8DA1A4DF6C8B7B019
CC31279CD27DDA52E1DA4CB052C16E049D2E6645239263D0B6E6419174661478
75F99B35930AAA74A477AFE29B1DAD0E6BD33735C477FB9BBFF2EB908D91B245
11AC525E15EA2EB389640906449D7A0A2979BBD6460F393365098CA717F915EC
27ACD59D2F35DDD0320956D2148DC7C2D7EFE859F41ED2661FFEFE5493FBEA5F
B1D26743416B6D20BA817AB49C66552CF7FEF8C99C29BD310590E1B613AAB89F
20B39C67B801932612BE59E8C4EA4B47A39D9D73EA96FEF2811F36BB337D4E9D
38D33E46E3F79F2BC92D811CC6DAB392EA379D23BED8DCA6132D76C53B78A28B
C434AF4C963E047E7CA794F2C7E845FC08034E600A9A20EDAEE67F65EBA7C2C6
1AFE1C7FD58404CCF6E173D56F8D3D3CCEC06A27BB12FF9B399DB1AF4BA9A570
5502F55E4CCF7160C54F7BC202236296A9052306639F4672E90E3B9DDE5FB364
F7BD728B86D3BBE1E37BC2104E79747402361416DDB4C1AD10889CB7851699BF
FD28D02FF638853114464CF170F3EAFC1572D2E56F2F0F692831903D20979257
C35CA8E92DCD33C7DD73FBAFAD2A3EC3AD445193BEC19A3ADD031C747FA67225
34BA34991AF3F1BF309ADE33C2780E971D3952648BE3ACB42BEC6D5B5DA0CAF1
9B5792A3F832853CB465BB8B66C50948800458912B40D3D1C93BFF447255A99C
CE4EC0E8B418284452650AC9F595D065353A0D84229C2226465DBD27291A7AAD
14E946490AEED2FF28FF48234265B4759B50D24BD711DAC55620DCFDC63493D8
B9EF33711947B65B0C07BB7FE129E074482B62CA26EA8970DCA4F35C139CBABD
4FFCF1E22865F11E640D484E5F57C00B1336A8F61DE8919B9F5A5D3533D903B8
948753E873822FF2E1C8DE9834854FF2955EDC15456438FED1B333FC882FEA17
CE5ECA50FE1EA7907A9A79564DBFFF9566BEA8DFAD1CD13FE4F4BD5FE272043A
59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D03ADE5D6DC0252CA2E3EFEDE150
916661FEF85C14B05424C0C51BC3E784E53A157C5192135A7055198A66789574
CA9DE18D9CD69BDDB4707F7B2C827516C1A6B49353FB7457EE57EF5908241374
2A4CD1BB78156D5809A689085E5EABA02F60389E94F86AAAF2B7E9E315B157F8
BE66C4AE3F0F649948253EC51D98A20B1C4150AECE1B644EF4F9B15154D3FF75
4428AE15D0D7F8837386F411D0FB2C1CEA22C286B7F058E8F48EBFC36AAD3511
F899A93419E74B4EEADDE0FE0B5D86C9538B9E3260EB814969E2E48645E1F5AC
047A8204F464CF29A60BA4DEAE3FFB984843DAA8E9420BDA882054B68A169C3E
54FF994669E0E0A4CD33F1B71EA3C7C787E612AFFBFDBB75E53941B46165FF34
0CEC0051A4EEF6A495823192E78065FD6060A0F7D8ECB4EBAE515878A31F197F
D069F443133F6271A817B670A41F2EB01A30F2AE8C73D83360E849EC87FE9711
CE71D9034EE8704CED9534746FB31E330BE53B043CBB36B38CE86196A8838829
AA72E7DAB35155314A35C56475A9CC8CC6267A6C8B55512546ACE6437740E677
EE22A40C38BB1F69F691122BFE48E6FE4003BED0D4270A59532C46091584E9CF
7759EF3E2FBBC0EE740CD2622E599A513A5A5F8F39BBA8D08AEB6465A1FB1258
980913106DE9470F037FDD15E6113A181DCB5104577F6303D8AFFF0D1623C49F
3A52C4EDA18B7B6BE5C494D3BE6EED741DC2B9D578DAF502D940AEA08876BE07
1C01DBADD0EBFBC4FF52507C34739FC6E798467FB71DAC5EFFE0D7BBC8114201
E03961015596BFDCD08FBB40B1153AB6626767FF1A48838221A3FAB6E8027A10
873C04482CAC5129F1D102860A54D8E656ECEA88768396EFEC282DC3DA70208D
6884BBFA2D4ADA174645BF47E448B703ADBAAB9F0DF2A0805C9B140D8CEB4474
0442AC4891051195B0B6624F3DB00520FF4657F7D127A24EB69B4ADCA04C25DD
A90364C4462F8DF7B588398EA6C9D82EC5A2888F03FD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5A0752A8DC4E816B78B9EE734118C991282B1240D3E46337
C1FB2DB53C79D16B085D8400FFC9324014BE2A1D5CF3A0CC22E480CD066D1019
6C05A0EFD97EE57F50C5A59D1EC020C2C04DFC9F36C8253C4346DBC11A9D851D
A3A8E0D478DFDC64095D442198D9D530581F1C40D357CB03A7FBC28AB07B83B1
800E41C9104A62A074B44B977A4E4A9974A30FD61E80F89DE77282D37856765A
2E3980461481535061B2CC994D41EF6AC07B567DA70D25CD23C25C7D0B103312
B17D16087D670D7F854D5740F601C12493300841AF0F3A67E1E6093BE6DCB400
BDF8C5B29940B3CD12C56C7856D4B0ECD4E415CC9290C79FE24F1ED92BA45398
9EB7CE1FEC9D31E66BB00C09B952A829C5F56AE313967A0B57292667588D0A60
A045AE5775EFA566735F30BF915A60F7C027C153000E975E7513D0156C73F7F1
6C034A24BA4FA16E84B73917E43FF456B5C435C17071907E4739469EFE5675C0
FE6A19FEC026975039D81B532DE5BF0DA704808D7B0878A09BF1DCA721854AB3
AD69C48B50DDF960297D39DF2B708BEF605075EE12D7754830200D0EF7CB139D
07454666A9757CAF11889CBE919842FE4D30A9DF8ABD4B79FF6BFA7B048F1F20
3BF39512086211B6ED4A0CFB76CF072638DC21405F5C12971456BA64A3519849
2E0C81D7EC5306E4ED168682A02519583C8A4D3449A80F06DD05E185FC24E756
14597763D2683A5DA582CD0C910FE12D8CD6A6C6A3E4A1518E2BCDF099DA7A65
D2DA2A30960687F2DCF03E8EC3B3355440F8790D36B3FC528CCA877F264F9CD0
A9842A9410A0895DF75E1D19AFEEA0B92BC6D1851F9133071CFF77F6B7BB47F5
FA2D280B99D60757CB814F513009C4F8EA0E7C610D9815F6C9E2E43707530FF4
46F58B37C73CF2857A7ABB31EFD03F4B11BB195452F6D1A1689A2BBAE0007448
F08E8852AA459B4B19F3D15F6C7215840AB673F35C1710F16152A964659C8624
1FE188A2B151D9D4FBA51E499C40A5F15786F4013542378934CE6745950AC10A
8C4A87987B83CE610E61CF5F7C8B1546B7A57002CB5631ACEA320C6437B07E0D
6E591ABD90B6D1A3EC389BD83EE4E88353D85D994B25A9E343F133B43FBA30C5
2CA8A503F3FE224D15738C62BBA2C6AD31A0D44B1E9FD3E9E8CFBC32E32A32DA
E19CD9401354E70E1ED37284DDD65E8228E905026C46238C6F9CDB39DD032031
29FBC6B353DA5799579598B01A786024211AB36761C70E58AD2500BD0372EAE8
348C863EDE31E97ADF14D9F180343DA29EB6D49764B29141484BDCE75BEBD9D6
B46ABBBA618BBA0BB81B21C9AE3E8EF86BD5CBD90AAA608A3F65C0FB12D24CD2
86BDA10A436108F0D6B87BFF46E7E197D8541D72B9E70E255A281B2437BBC429
5CCDAA8DE64137227F139DC666BC06F880D67F16B316CBB5CDF1977988257A0A
CAEE781ABC1DDCDBC1B006CFE5A032B95CA40F19FE0EEEAA2ADC08162D9718D2
8BF9E906D959137073313978F2D5E7E701893AA6D9E4B7582ACD74AC46BE3E81
61DEF94EC7C83D65D86376FE392900FA19FEFED037760D1B21CC82451626B5EC
47DDE14A666942B10E15F853CC86DAC167AB448B9CAFFA4BC15B304C7446A71A
59F056B37F038E68455B580A4BBE440839A54B385C9E4571C466AF1B55CC04F6
46FB7704DFDF783B55A6821F7861B12877C5B1CBD6D3328DB47A624C0296A8AC
D7D8A62118514F9B7FBDCC8BB0867DE7CA55C54DB2D6B2CA2FFE02B6E5138C47
FB94BB66248014CCC738BF6E4D58E1E10A9648D4EBEA307F56725A45128EE8ED
27C7E7BA5EA1A04E90C7D88600D2E83D1E720D03106898433420031B98C0E76F
EF91C951381D9B54AE9092381AD48085761D7AC6A2F33FE7BF1189B74F71D864
956D63E797EB97023ECBAC73653FA3F8FF2205525F1BD257B57C0D292469C015
D85942E1C24C48466ADB7CE834363B8150FD58BE2A16804A4997ADFEE6E00F84
F822BF828C4636E80170B3D870EEB5E235C61E8556A2D58B28357C8A57EAE9EF
8D735BFB4715B7E2454D0F598F0BF61BA4085C37E9B93E79D1D9B0E845355120
13C74769E497F5FAD065CAD27B9EB2020C908E91E81B07A92AD544D201D7322C
9156B30A6056497FD3351D7C0F6F281460A76377D15113D005A1B66901FCCBC6
9829663359171CE6F8F94F8270E1C017E33650E24F353E423A9254DC034E6F5F
37A3D8279178B99FD3875BCED31F207E1DB47B8009A96BB72521D78213984E0E
177E9C7360E93C5A09A5977245779264257FFA0AFA05C2842C534A411593D10A
747F88319A809EAE7BCE9A7AB5B1E77B1B8CD7F56186183BB1EF5CD9063DF88E
60ECE319AC80193A8EDB7A58018CE9051284534C1F36D962ABF33DE5A6612AE1
2C94846951749EE3C9A2EE605514EC228BB66A22545962DDACC28AF52ECAEA85
FFD7C022053AB5E774464120A2090199B8A322D4E4B9F225EEF68B8281688882
693085432C07EC72C6FCD6B3EFF627203630AF2BD897DB3C7DD9D71FE2402759
53E222C1AB7FD8AFB2C629CD2B0512E17CC64DA35D43C4A831D03FCB1124534E
05AD6F4C749DF90AF06D25C8878E0AE2CD2CB6A8F5D480878EA65EAFB3C60AE2
36D848BF0FCAB713EDBFE54E4BA5BA08543D85A37CDB16D9BEB4252D67C718C2
A4595075C1818F6A1AA8F9BC84226287AFA57C086503BAC3DBAB76EC3D8BF52C
1ED0608B2273DCF4CB3A1CB631AFA51A23677CF06FBD07C632D409DADF45FD19
3E6EF5F8491B730E6F3509F43D146B66C6AC37133B518FE14EABFFBA280CD826
087D821A0DDCB63267A9A7701DD5EB7677649A26D94F03F5EA9956DD46B5F299
87154433CDDF37C40FBE2DFD467CCC73F5E1E9809CE9BEF643C2568A3365B3C1
540A2FA5E1DB9DDD2FDE4C295151BE1F1C9C1A407E38BAF13CD2B3CC3A3A5AD5
7EAD62A642F7BC52D0064D626BA54AAA0562F00EE394976F0A2F4870DB0C0FCB
EB6D169903ED4724723A954072436EDF60F30CD8AFF952E9BAC603C235A9D7DC
4D9416C47C0CA011F85308F5CE10B99E1B023E824D1B64CCFDC1111183811EC7
8038D8521F88E1E46C231350953FACECFD82FBD821919E3542B33690DA59D859
C51EE7A31E4510F5196DF93DC22D53B21CC59EF5E3DA0AAE2511A0731F4CFBEA
451BD48C15D194B7A0925481FA6EDB08674679A39EC0A7F739BC533CF7684AEA
10F0516B499942E56EFB6139518D822DC063095DB8763961CD892B5DE3777908
625E1A91DDE6077E98045C38450ED9E422045F45A358A7A162679E52850A292A
04B8BAA71A1D06D2FA9ED0B02168B32F6CC0FE765F2AF96425EEE41EAC3D35A3
AAF9348E13F1671DB099C4BA12DEB2C7D2C704581BD389D4C24C460375FF69B3
4D18EFC59636E9C7F8A9A62866F4E857F4EA7D25CC8749B07AD56F952B9069C9
1EF0CDF28573B5A46E82845D720CDEAC7E9079E9EA4FE64EA87FD6E64BBA672C
3E6A26B4F69ABD5228ADF4F9AC7621009AA271E0B41B6C1C6DA424F4E69290A0
78C85A84003435A91198648A941C64D12E8E1451D41BEA93204E6AD3AADA6F24
15A8BCD5C987B17D5F570A966383AA9F7CE59375525369CA6A559BEF0D5763C1
D7512AB6E16FAB0A633BD4BC90EBEBBBAAEA60A61E4B94F0D92A7A8A44160BF7
9651F0E264F81770C69C2A178F33BA78DF24F7346872E84795059D0A12F0E79D
D00A9FB4D7BD59E92911ECD5FC0D9343070BC392C6FF76BA32CC1704A1B7852C
077028B02958F0BAF81A04C5CACCF74BEA322B4845273B067CE1A9B7933BF8AA
212A5A80071AE2173470B43971818878DEB47C542509A9066C03C51A1A194CA7
1FF4DDDF5FB31C974FC3B57BCC10CF0A0F1770DABFA09730FEC742F9287F2792
B92D69DFB3B31F1C72FE37AE784561BFBBFF0182B969C8B466D474E73962888F
4872924DCFEF1D58B9118A1924AD8823E9CEA0F386D14195BEEFB3B9A269A587
593874C38B96EE3094BC95AEE6F1BE238B28F879C77F4A5C066EDD265C940ADD
DBFCAF37BA2500213239F12DC7E00B6615C66879D91DADEAA25F850083BE6CC2
6AE7437664AC6A98EE85B34A9A5F22879FB0BD63A2938F9981B2C52892697497
5F2499F50FA04347CAB53A5AAA7A2C22B671497C9AAE53C60DE5EE3A1E09CE2A
3246B9B5EA106E3D12338EC81D16316F21015487644B55DDA2E1146AA3CE0787
4FD5500C5FD4773525A9E12912D6B2A265DE09B43DD5272067C545347BF5F362
D403F91BA1E5BF9897E0FD98394A944BEBBE20D5795B41C85D883A7B825C2C63
2A45A8A619393CE6696FE4CF5165DCEEFA72DC1B32802595FC8A458C082BE1ED
19871BC4F4EE0CFB5116452A0583C7CDA275AEEF2B2CF35C073278159853E3F9
C4721801295766162B7BA50B9C4156A24084CECDF954E6508FB2866CE2EB3DD8
8426FB22EA87B5F38C119934FFA997C487C43CD58E4190656F7B352E24890560
FD20035A6FB8530E9EF89383C06A6EFE56864309B5EC0B1550029198E9E9F0A8
79549CA69DF4EE05AA2A5F075D57D8FBC08387EF2A58C54D8AB7580EE3ED58AE
B83B72CB902F538B6D5153870BDF50F61ECB986B27E37FD67F41027A5A2F1CEA
6F1F25312B41B125B4A46DA4550DB20C261D39AC844B996C9EC9203DF2ED2DF2
9C2AF195DBC923700981C5F5D55CA10F93D53C35497F93A5550CD9DE284722F8
FCE549F4133677FF06C973F989BB2DC8F8D2F0BC870CA2D0B0D46E0A05899D4D
1DA41A4FE88655F94A91F7A876708AFEAB29E9A7CBE0BC90D0E45B0149324F52
CEEEF248413B9AB45604C2037E471BD24485A77247B614E056C02723505DACC7
92086E18039526155ABFD0D65D612E0AC6E2DE0E5F9094E55F65DD77E8263B96
7745D99494FCFACFE9D03B9851FC8FEEBF287171660B9696015A69BA4A04B118
AF10776110E318873BED624E3B00DB455D1B321583B42DE5E0F9AD77BC7E6B1A
6CFBD3FF8AE2F0786C7F4EF8C2A5A242E84CFD4DC50ADFEA0C2E12FED1CA0C65
0C18287C6E4392ACEE9A1C8FB7FD9390F4072F37B10826AA7F8D15F5A74F536B
4F63EE567921FA7B005AAEDAD9D7CEBA399B3FDFF494D78EEF9EC6AC0826E99F
51EBF66192E45DF1F3899D636D518807D029E0FC354D9874CB4B618C65A2D08E
2F14862E3A62922390E1889F9CA029306E7E1E4568AD6F06729E1FB63B8B3886
CF88A7DD5419F12E32DE866604580CDC0B07E9FAFAA67755F81B3E69FE843FEE
F0899DD0F8C2F957399FAF825FFBEDACBF098A54372F2BC0BE39C9E243742CC5
3B20B2FA8508290E2C6D80A6AE0478021E111AC732FA0120B1877C6951F86EBE
AFE1C5725C894669FF44C8BFA89CF9FBAEAAC3B3A5CC1C9744253567A7830362
372E5EF5212EDE3106862F54A3D148BD88425747EBD84BF01DD06B761A5E4734
0C37814FE1FB817C7C68A5AFCE814BA03EA9F973E3F4E5F1A14EBF827DCA38CB
F9A44C73E3054BC981ADF1AA24A40520A6C06816598772E12C1F54F5186A550F
AC789DC46BAEA1D028891BCE072BC40599E587E8B93EABBD24983CAA7C21FD1E
44B7C3DB34900CFF47462A68A28CAFC810C1F1A3A51DAE21CA6F5EB4FF329646
3F528D5160C7E9F656D93EB214E1FA04F01DC2C6F15BD9566477F456E5395426
72B0D2AF645AAFB04077D440BE21B75A75962A0675857389A433E787DE991A19
617A6DC6D266439974A234EFCD5B6E0E955587621DA810E08997786BA72E91BA
1D2759753E96A327B6C114A5B6872C8C9C6213593ED56FEC6D5E9E8C3F5912BA
4BD3ED625CEF5EDBD37618D207AC9D2AF1C72C5852CBDE88CF595927081BC530
6B48BC1B97A9612FC1D0DEDCE26DD38CD0DB6335FC4A6B27E683A4B83116D297
C76128AA0CF27C1433A5B21C85C42294C5C5DA468B5307F0F0F9155EBDF9AB2A
053F432A3149B7BA168CA488A7C8F2A630D1B50C8AD964B732576A4881AE9CEE
27DEB4026FDD86F859C51A3605626B70FCD6DAA30568C75286BE9EE9B1A2C060
1C57F5B7B1717C456ED996C6B9DE9E1159AFDC804DFBA4D875BCD1C5A160EB35
A8EB174221DAFF096246849EDF70EF99B1C95A296106DE15CF1B4D743634DB5E
B2C1EE447A160AE2CF655A2941F1E48A71BC01CA5CACA1C98CC87E8404F41256
B3DF22C3C0E1650CF2AF1DE1F40487D51DC24E7D4347285682450EBB6D47DA23
67A369A11ED316CF1AC2294E853433340952C7F1E54D5EC0212C697D91FA63D6
E5955CAA4FFE0F06DD5A0C90BFABA39D0F2725E0DBA7C8CE305DE7C1B59DC219
7B35BE60C5CC7E02E8BA2137CAD04FC9B35F0225CE06E6F5F211FB7FC8593B44
6AF4B63916C86B2A9DE768BD8E3A1B5FA03C76B92004AD4FF5E2A0B60B0152DD
E9ED15EB68C155DFFD1BB283F3C5592858EB2D297AA93C055CFCB2813F3E8130
E33961FE59835F21DC12BA218780A5A6A0FAB8F42D90434A48E3F4993DDF5FDF
93C9E21EFE746214FDE117584140381D43F8F39618E4F57281998D97BF97B72A
12C91CBBDB13FF3DE31109B39281A3A2DE349F32AF7261E19E0B78B3EB858A93
2B26CE562FCDB42767D27812497EF6A45BADB374BD1C3CC6D8482BAF155701DE
02B1C3A9A93CF961399ECE1A897788B2B23EF0ECF516B4E2977709EDBD3DB7AE
516C55E742F598B4B9140A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EF8D5B
4FFDD23B55D05BBAE7F649385C4CDDA9A382634433CBC9D2C6BF444FE9559A1C
D46A71E1847119E030D30776ED4DBD5A2DF213D85A56B1CA85DEA53ED0299C1C
2C1EFB1C157CA626EC056A68B66C652833CDCF08803A5D0344DAA7CD767C726E
7BF288414284CCC3E6FB3DB31EC1858B0891E10C66EF859E5866B19808EBF054
38B9C5A297F739879F1507A6001113B11FCC641D676CD124BBE66287672778A3
BE351E58E961E816262EABE2E3D7E768B8F9BD9F4C10B1CA1196BC062E04A4E5
BDC05841A723BDDD67D0110B8331410F1DCF9E65E7338B42FFA5A5F8CB3945F5
86BFB542B229FECFCD917788FCB6F16EF60D1B1EFE2961140479458987FFE44E
8010F5D4D89FDFEEFB258BF9752463E3291529C0420927FF4C547AA776CD861C
6F7525577AD946263CABBD7656A1F5BF1E103CF93C0DD6CE244DD9B337968A02
FCA01585BABE4E6127C9DC4AD6EF6EE0D15AE4C65321DD0ADB8700E6F49D4494
A93081D9EDC3E6F33C0CBDFA4AAB10EFD2763ECF666139E66CF7D277ABA5AAEA
55AA79008640B603498A3906733A92966C2F11E260A5524656A9A0A0CB214AD8
10A3E22CBBCDCC9538BB8AA51657E0899F1723A90CB01EF65416294CAF223673
F451FC750AAE04876050E92E971F6A42046019E11D040BB87BBB7ECA6D7070EC
6A87416143682C4FE94904E5F5FC71490ADD5CC34BDFDA94B1438B4AEB72DD36
80CDFCE4008A7DC068555E6BFD1F3E8D1F7B13351D44FB1513CBB22AC8F22E33
AAA89275D3947828C6A9675B8FBB5ACFB75A80A168C6AAE8217A7459651CC8DD
6791A341BF41A595EB76C6C567A0539A035AE3749991DEA439FBF139A16A5534
2834F92738BD6BC724446933E8927F3AACE64BE6623CC75E74878FFEAF3702A7
C45E4B09188CFB4AC98BD8AEA47D89D629C49699BE537834825AE7B8A4467748
8AADC68ADAEF0E112CC860A42D5FB50529EA6CE284EDCD95D88ADDF46A74AC94
A09D60E190C548172D2E1D8F21295E6C0563A5EC278081506796D4A5CE91258B
1C760B7B24934B6B4671E42BF7C669EB92D9D974D5E29D6F1DE7DEFD01BE337B
CAEB58D4B2EE599A6F6A9747787AB8FF415A4BBB4AF81F71E37E6A0C5A09FDEC
8D3678C1FE53DDB897B389B6445A99DE978B0D81E4BAA92E8B121A1E1A04E893
2A5E64E2E417C6B64D84B19F7C2D7C143E2878CAF2F210793730C8E519720441
6FD5342DB3EFE5D9826106E5679AAAAC1804C8AB2084CBBB299ED351CDCCFC0A
735927A1468C4192AE8D8799A91A9EB19EA03D4883631BFC7012142611205589
FA4C2263FAF831B150E9615BA43E7E710108A7D53A4021CFFA25B6D7FBB581F1
58E22E137E896DDFEC3016130BE8F3E7C2E2C0DD5267771AA827C9A1EEEAE389
0F6E58D8C19D6F90AFD127A50E098A590E4D63BF187D8A93FE9F8CD6208492E7
A448BF4B4C63CF0C68AC833BAF4B22B26EFC197D4A893A5AEB6EB247627DB6DD
020C5B28A5F5867F1D07E70480CDC1A5036247F8F1C697A6FDA6211191D8856D
A7689FFA345D31BB30841E4EFC9ED1858353AC4063789B6A407EA26388F912AC
640B01F85B3B1CA9C3242781610A7D9AB6519B473F5D5D911F077A97BC333DBF
DF76A4A160238518C50D908A4EE7AFEF5FFA49D59C844204CC485B2C6E795EB0
3850ECDAF201BBABA430326604E56F26766AB54A6BDC7BC2DAA299201D951426
6A731C48B879BAF823745D6D43EF0BA7FDC43804D1B4235D8A4C02D3F7CB6F4A
358631F1AFD8CCF42255F33A0F71F5C59075B9BDCEFC4B659E93BACF45D1A498
4579F501A6AB5BEEBB25F619D67246632A04A14A7EA94BE0AAC62FDEE87E5394
5816B7A1E4B6764A0F87848033CD51F116ED75C3B58C7B93A5357D715FFA30FE
BAC7155B1E4FE28B0DC8DE04B043643319E48BC58438C6183E00F67077D2939F
24A13BE4C74F78384E7FD399CC47BB2F48CA5FDFE743D4CF1A918C5F58DF1D36
4E29610F516FB436F78E4E2174E4CA868698A7B0FF83E348376C235FE8985512
4C58E6471FC04A203EBD502D6C566B04255A82BB27AAF2426421F0093C603BD6
3827E28F17D57CE60091FC5A0371FAF14E7D7542B1B42D692328847E728A6BDD
31F576F64475E62FBF30074B701B39665F4BF41F69D56ED71F2662826D9A1865
668783704E8026D233E705AB5C4F2DDA808D365A7468BFCFBF7E680446F888A9
F1CC3A8642C108D34C4CED6F7DBE80F25D75116BBDADE2A54CBC728EB209FB5A
0BF3C85656D645C92FFDC31E79C6432D4A78712F4606601ACD7D328B95ABEE16
B14337A179D18E171F04F6E164C2CA9F56BC5D4E3E633D60C6EB6CCB0172E299
B1F6353CA60FB57A0FEF4F937EE9FA9C4CD65561E2E5608200B86DDC18C5C81A
4E75F8EEF896582C61017A720161EA2CE5BC374CFFC9EDDE8F98142B0E13F3E6
B825F861467649D10B4872EFC2B256A1C1D84D2CB53F1FA77EA74787017E92DD
E4CA70E9A40308B61A11D9B9DF27ED6A8E4E5C370542ED6B9BD96F7860B5FAD4
2B86273D30CE80C424CB288CBB7155E850CEDC95D7B9804A7F49654F2B9CC5E6
F2006EB0C32DF29D81A0FD4BE5ED75D83C8174AB99A32FB1ADEB641E165EB322
1FE1F3BFE28ADE72E1F7E45D55CA2034552666DFE7D5D94966CBFB46E98286E8
AB5BBCC5A8C431D8D7B220B033126AC26EA984A4660F22D390595911A900FEDD
4D3ABB86A7B1E2DDDCB2BC12801C4A8ECD0B107CB61341CEF6C18B52DF7F950C
E1BDB15548CAD879752198F95BB659F845681D61D02D28B185C9F052844D9A5F
91C6D8AFF0EA14F929D5598F4437AB944A06B5EEC3343EBDBBC872CFA84BDF47
71ABB21235F26ACF6B9807513FD4540AFEE246506B981C4C25D9FB5C08D065EB
272EEEA43D654F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA4959D605D6577
A03DE99BB78A0AA1139DF5414824E7D98D824B12E020C9DECF71C7CB5B1C295D
E9C0DE56949CA6905DC5CE4093E2F1A817C538EA4F64E96C20699C861C0558A8
3970B2B20819C87E06075DC32A70F10CBCA5201CAFB22E52F8C57F195F6E6524
13F527B2581AA0561DB3F64D6A0AEB2C3DDAB25909FEF00778D7003A85E904DE
41B35C4ED46D104E5A8928286996E80992529537DBE75F0705BE16EE2E8CA3CB
7BD913A9FF9C2E549536B3875FFBEDACBF098A54372F2BC0BE39C9E243742CCA
261A60A772848CD279AFD9FA3FFC6A1B269DF1B24692E01205A76CC4A6F6FABD
063ACE8A01DC45383306CEDF6B1DD84E223D306718D250574E4602EC0964E1E2
8AFA12B688D61276F94706B29796358956C55E2AFF9E1DD0699F84EC735F63CC
8A90417E80E396349CCE3D47F084C95E8971D17B6C14D5B2A021154D274B753A
A96964CC6355528E6E2C07E9AD472351050F942D4323A5ED11D5E0B35A7B1204
741A6C9845338FB9046C95CD41718836E7FF97C27619BB4DE3C72336A0079B6E
8D1359A7450C8F0045D6FBA477667651DABD08368A6487792F13685C59BE24D6
F350C447D7E64A7670BA35F435403F4EDB445B75C893FA3788B37E4CDBA2A5E4
342791D3BB7FB78376B78655F278DC7DE38A568EA347CD4BB1F5B760138E005F
FA7134D15B8097A9E4D7C9B95069644487B786A62AF609849C684D1D8B5EB7BF
6C237D040229406853D8A5D641364774C3558E5C217DE9D190CCFC43044AD203
2CB63DBFB8E2F70A777E892F5B7B3356C458A75A8A669BE5EF5E47FEA5F815F8
BB34053893A30AEF68D9ABFA4E344BAA350695605D1CC27874F3A6AC6F98C5CC
CE2449D5946139CFF840D7178D7F1A78DC089A3769E800C31AB4CEB7429779C0
646655FF65654219A7EE3C6FC754E7662455513BA6CC0A8390F6CB3FE2C4EF66
B96A59CF03DF84249910564C2EA938D98EAED0F515A064481F053A5284EBADDA
AED1A55A48480F808989CC62D10A3ECC613913835C8B7D0D787977FE8ED7727A
643CD7ACE57AD9C26AA2888265CA8294E9D0381BDC95BB17ECC394304B3BC586
8CA6472A452B6D1404BE30F89E4B972816AA12340D96C5578D689A8522D84C26
79748AB15280AD80C0315320C1044908F5DBBD68527B297EEC7383722D5F5329
F9A8E1FDFC65773A6BA86C814BD2353F423E4C985BA2B11E92FC5E6E11AD8A02
6AF02B8082E79B41E819439C584F23A55D5D60E75443E29CE91EA1937E177513
D286AFF4A32D5049F6640D7CE5F7D2B2EEADA603C5E2F3FB60CB5048E195D831
77ABF401ADA6B06B718C5EABFB9B5572A0D8C841130D3DB8034729B4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE6FC52EE0805D9F354B2CDD077C8F00A7D7613AA7C519
BCE19D5A55A70F7A65CDD0BD751604FD41C754EA8685929B0B0E4652883F7872
98B13FBDA10A021CF322EA5989B8019C8D3DEB35D08E2EAFCE88DA6D60708211
0264E4B82391C1CF9D87F2628BB1CA12BF28EF0DA654779148D18551C9E415D2
E09184C78217653E011F5CDE11CFF2B15590E4E80363ED652CEA14D0CD2FAF8C
D0C2A13A6CED42FC81FFD714DDFB628CF9E54476B4CF2B1EEC07707515C98EBD
C2768107C74AB503E5582F826B7F13CB803E2B1D3E833B9F86AB3787C9D19284
2C7EC50271156B4E7C01BBD70995DF003B77EF97EE11094A13E0258AB61BF232
59381FAF2AC65827882003FDC5DA687CFA43C0D1856C461F97C7AEDE11B3A109
9A46ADFC9FD09C33F30F499CF5DBE572B6BF8B1AD14D60862AAB2F2AA9A9B7F0
3F530456D6A60EF7FC61D97D8DB121DF70CF32BB8E6121744435A6C4E1F935CE
3F946D7D804C186231A54874A34F37BE5638BD5C8E5BE4D2362357981DEFC22F
2A4C38E9C10353639C6EEBF742E74944023F7B9310F9F55ADED24DC20C8C6932
5CF4FD7051AD918D22738F37BF6D9C80CA2B78F654EB01D24474BA592350D925
4F77AE5663E2D5F1C570E5ADCDEFC06E0F9B0C2E3D9AC0E89EEAA233EC00B6C4
D950AC65A89A450125B745F5E19C45091E27A261B867A3E86EBEF5F0E627D9A9
FEDB254FBAE5B49C96A2F03012FD7544BFDAE872CD909FC0E6CEEBF7774F30FD
B373E1E632EF7D6076813F88301A5AE9486B8433423B5D88489F1B59EECE5627
F1BDEB819C4255506E341D1A62B928E6D4BD4FAE8842F42EF75A0FCAA5EE4CF9
5E692A168D44D51CB4D2D60C75A87811B6FBAE25BFB3CC13BB7A44F9346C0658
2F2B0DCF47566E7A20D9CEE334F45A638FC841CAB3B3540FE72436B7BD7CB482
4A3776E97DD764152070888CC3791D4A194F6080A9E9410E75E401CCC53089AD
905F4232EB9FA2164D3490E079DCE5B2BABE23056AA2E46EF3E709FB78DC7A6B
EB8D09CEDF32C449A90155AD1CE06980A0FD2B6328C958A7D45C0409994598A9
BEB91E4A797E542A8B4DE83EFC2C8C15C8677A52176D349CA750FEBD17473882
224CCB5C86CA23E79CE317C0FC73554D094638E7E5F312E16D2B49D9F48CC41C
D6F30911FC9821EC8BE0B777E60F497930383B07BCB46A2E80099DDCF12CCC34
3C8BC39A919E9000950A583F987A7B5FCF21CDC8132175B2362991F763A498EB
1EBCFDE6BF0A0042EA965EB7A6E6E989228CFA80D2F80B8B05E4B51EA73E0195
D74D53CED5390959B98EBC45C508CCAAA3AEB6564895FC9CB559DC69F5C1D5EF
6810F4A0AEE31849B34A1A547CD6D76361BFDF4447DB101B080EB2D5546D3CA6
D20D7200C8F24C1681D6391A1827C666557BB00BDBDD23D1D3172AD2292A0D80
4AA4B6C269305EDD7F2BF0E2A4E9DFEA5845C08A50A8C8A5678D620765875311
E2A42B8C12DA7AB4C171D6F22C22F86BF3BAB0C00CED770278E4E3FE5484D89F
3E60677AF9EF4D2387A2011349E83BCC5AC2821162D8C366794AA652F67A316F
F218E5D3F309088E9D1D4D3EE835B483ABA12FDB53343F3EABF89B4010C54FEF
74749FE5DFC802CDAB30D47EB91D7757B38647694D16A96B9629C32A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81A
9AC387913FCA9209F9142F9CEB88DC7864ACE2139716A8B8BCE22870B2A8AE03
61A40FACAAD0F82B44B4D6E4ECBEF48C6E2F39CBB2B53B18DF7F144E9FD272CE
6A23BADEFC0FC80B646A2FC08C8AA1C44A2A00554667CFAFF8A417D246F28CEE
905824D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC640686BC6FEEB9C1DE214972
4C015A2D62C7ACB01966717F9C4AAE6203DBC7E60275D3E38C7F66058EB798DF
3A42628DF4378C539BAE628054B5C31D23B50C2B33943C5AB05E8304A43319C5
8B569F751361768EF816F30DA12ABDF5C63C5B1602823BBFC0C03B7A421A836A
CD4083FDE377A8E800BF093CC74B3F067CC1DF9F37F37B225D1A63E440A719CD
8CC6D148F1442F1386DBC7309C37D13848552D03C07E06969315884369E30CFB
BD715C131435EE885780EC50DFD4D90B568153D7F09788C8877FF9D119C062EC
9DB71DDBB40357DF31989908E4FB3FDA3303E6BC7EBC8C3F90ECE5DAE3E02206
E93022A0609D842ACA6AA03E96F8C117951E672EC54FCF9A8273B7989D201B16
1E870432822FD897B71CEC0427D5FA06B29F527B6A236CE267095F2193898745
610FFAD3AC143DC9CA8CB1C3931E36AA844248234F51BCA6F444C2905A4E241A
269ED51FF329D5C0C86D9C66ED01B85534A1E39BD5C20DE216B33240C40D188F
4E304C4610FA7CCCF0512FDD24CB36B40AACA15B0FA0098083597E359F090380
51C4BC551BACA6F728980ECFB1E999F4E0E329B15FE526F0C6285E5D05CFB53B
F7212E2933DD050FB0820AFA1B2ABFB2AED5544B06AD48DAD5E377C2F375CAD1
3A904419D9E7F6D38731EF1E8CB0917657EB749149E1D61A1EF50C19E72FC8AE
9D835BE39DF765ADAAA523C72A653D19D310CC10E9080C619F102E6C0EE4F80F
05C1AA36C2027A88763A7F0AF2DD0CCE40F2CEFD4D785A43264BAD874D4FB758
1C7082EA167108BEF6F7E34D958D6105130AE25923E7EB77C0FDF5286780C376
3D9D24E27F7FECB251C07A0CBF632410D7D948427FF6782B8850466A1FE66362
4FC26E88758AC01C1C98B568253442AD48691C2A47DF05F6A7466E87D3020FB2
D824E71394F6605CBE638D9A6B5A0DF28C4D81535BA76F76B16C6815E977CA50
513DA81445E93555250A43815E80B39AC00F7086BCB4B36C35CF2E4A42B114C0
7AC99ED39EF436CBA30F8EB1A6E543782DABE3FF805D54945D6DC2C09A0F32C2
954C689BB04A12A787B88A966DBE3F4C2EC9888B56E96241D345CBE471FFB513
9002DD5225DAD211F5C72F3127A60A33D311387E6DBB2951640D74E59891DDBB
4526022E00B54489023B0FBCB6540E7EB3B2ED0460F81AB38B9240BAE8424443
749F272CA43BE6C9B5CD3E674BCF858A46BB2D1898684401E25CC37C0FF9DB9C
5064E2E468F5906C1338EBF0AB1F2B5C97A5E4D6127212AB225F2857D0014DE7
F40568FC538A0EA2E76E1F62790DA67887A81FED8BABAFE9416AA5E06C7C4C60
0BF38B70C87E5ACE2C713203A64DACD5FD072694C71A3AF841F9E3D07C7B3788
5856BBA23EFEA2AB1902F879F1361AF8C0421A296FEED926836406E96C49A48D
AE1DA613DD54D9C840D4896A183FF4E395EB7A69DCE16AF779DB5DE506A534F2
9DCF33411B194DEE2EC1B99F36FA1A11D14A28C0E938F608AF10E3B31B98C36E
5AAA15FF94A95B38469000FBF31BAE9CE8703754A099D21B3329E0471463D457
0D4E89F4CD31A93C312EA4674730466C3EBE9F8964D358AA76DE110300CC7B89
8FBD8BAA1FEEEF4E78760F8A25C60981E6372E49D71614BB4E6EC7B1ED60BBA0
8F874D9E1B1661393BD85DEB50C29E3DBFD4613BD0DB2A70E57CB73CEEE6A51B
72B52020AB471FA444491570EBF12F70F2863F9CBC2CE3E571F5D8ED5009FB80
9985FBD9A3E99D1D6124A3B4DE50749E55267744E046627E381FF09727EFEBB5
2E59282E0199771B95DB671D4B2AD846EBC0109861075A936D6F2508D429C625
85777EB9E6E9DFCA889F03CBE5A9FB59C55523ACF1E394505886FBE4D6F739C6
6BA65248D16465F0743C602C6E12438E7E9CF6405EEAE7CDC599E8BF2CE72DE9
FEDF547B68A41FC346A14D58EABC55ED2D98DA057A876FB35F46EFA6A949A75C
F1DAD4E176B50DB98341C8D442F31C7CA70CA4411B4511BE399A1EFFE6AA02EB
E529146BB9E0D14D16625D3C830ACB43B26371195013F74FC07E862198AB570F
44DAA7CD767C726E7BF288414284CCC3E6FB3DBC5D11E9807F8B247CB591852F
EC9392079A91D02F4954FF97236F55AF6FBCD9AF0E167742D0BD0E131BE7AA98
E955D662DC9AD78F82C29C3DDC08B6A551B0CE96E180903891204F4EBE911581
EA3BE89E4CDAA342B9E52F30E55B902ACC35DE87E70DE8EDFE7D803CB0770A2B
0B8180E5389A54B85BC69FF37B8CE078CBFF5CC6F11D65E7B61ECADC94491C5F
F034CEA604CDF5412886758D49CE07427C96AEECF83C52A4555178C7AB4DC1FB
491ACDD3A0CE09DF3D2AA01AFC9DDFC002A9863D9382764DC241811B3912F36A
B2CB1440EAF4C36D14A899C877A1F71CF5F205C8FF35460B37921BABF917E5CB
A23CCBA7C46C157E3088F4D1C99603A5AE29019C97D03FA54726D906264C82E8
AED7E4AC8F66E56EDDE14DB1462E4F9859384B15882C6B0E2219186DD528D0DF
17F15FF78FCEB2CA616D526C530E1BF18C3FC7EFAC5BC5F623465E81758FA863
78485C3F65040DD351580824450D62A12078BC053A65AE1FFA91D645A9E26C29
A8311282A2DFA57985CEEF4463E64E0B7DD8D11FB10DC168A704C2C70DAEC483
F6942ACFB86DB9C4EF5E16FD6E2A4523B99D267AA808751385186A779C73E575
948744853BCF5547A7870E7F6196444513F4AA8D5FECEAC8EE88C8830B526ED9
264D4F56562FF445F348D19317A058A4FCC154CEEC13E60A53EE79C07932518C
BCF295C49DD58CF10B322634A4B9ACF5325B842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFF57627DD17FCDC5BFFCC5CE9C78BFA2B830328F9A6D45FEEC239A
D76BEED158DB3BE2DC4BA1DC216B2D085F251E56B085F80C7C11DD39ACDF31FF
8D01256B7CED1EDFEEE0376E57B6E45D2F375499F8118EAF5C7F6607DAFC48AC
6FD2258F0314DA293F61D30028BB0FB43F50BFFB3005B677A74AC48E341259FC
DD1E8D932840FCA3727301C942C987A026992772DC2A0B06D5E4AB1186D81001
AE4288BC2EADC60BB6225D9CB6CA887922B117EB0E7F81000CCC4A20522124F8
B7DEACA9E6FB322B9B66DE572DA955FF06BBF51728AE6724360C97CE27BF0DDC
551716E8E06DDDE418B6E3E407307088DF1BF21C09F61DFBD19C30D92CBBEDE0
59D026A5A2D9B65246D93E36A7276E70D11DE1DFC7E967F6DECA7277FCA73E84
1737D9AE81C25EFAB95DC9FD91A124F9F5AE28E844C6C3EAF7DAB0FEED7AF2A9
13FB2CE66241C5102CAEC3992BEEF1999CE2A5574EAC934945ADEA6DB4E4DCB6
4BB074C6094FFB7D2AE0633C33C8E4823681C0A61ED898C571006202CEAFB5C3
E352E7F66C743DEB4EC14A3AE0EF469A2CDB23445830D0F304FD7A9EB6B8AEE7
919322D2FDF6C7D7906EDC7EBCD9E9B6AAF63DB3AFB9D9B87CC743CD66342BC3
BABA111186A0F38F642261843011FB3389DD944969E83C1B8315BF63C3BA9B84
9EDD5F620C7E451943A4E3868D2F9A6B78E6AC615258E663C9D255FBECA07BE6
FB4B14EBF66B06D640012D108ECD3329117185F2DCCD3CFCECB7224FC5E7E437
7C6E1F717DD65F6A274994CC40546439FA5A60BC3719653E525E49FF6F778D8B
ACE4664D86C8FDAD35CA3EA60BE1E28418837CFC7209F4A7357804EDDB05D506
686757C79C2ADE54B913F1ED476E3D86BEEA512B1FC55E137D23FE61B7D69D1E
E48363146DB3EB9914CE42558ABC90B623AFF1FA2CB3EE64202B74F76E195C0E
3F2B12B433D7DA1F634865DA6E5ED7511E1D930D074D76A35F19891E3842733F
8AC91FDEBDF9F8A426019EAF34A2B13634F55E964F8B7C21D937310590871C58
2F30C6DF5FA2097A078ADFACAE547DA592695486DEDA95AD49D2958D1F43A3CC
E7B7B9DB269FBAD050E6082D8DB99454AEF0AD0088753DEB92924B8AACE496E7
45ACE597058C23D84C0FB8BAE6E8B396D944701FDF7FD723D145E93B12A799B9
D0210E411564EF88E75FB2380977263E4EB261F6718EBF15ABA15B45CE0008CB
D8D2B7A1FADD93BD3CC207D8623EB59F6B3FDF302406C8F16686E31B66D8C1D7
E8DAA6804AAE5DE138E8A311A4A1330604D0E557EE03662BD31AF90587A45AE7
42E8CF9E4697F94F59B8AD259D2DDF433930B270C63EEEBF992ADB20C9F233D8
85BD42C04DC9300D4CFA004F89A55999A93B5A3EC2D3098ED38FC4CBC6BE50F1
4FFF4452CB1B96ED0E58AC65EE13077831824210531E56CCF19CDD93E462A12F
35E45673FB121E1AD75F20A8F4E8B29789DD95CA5047CDB13FCDE826D3AAE15B
CC039B1C6A9C21674AD3ADB75770688524E0B4D3151C5E51D640C741C6A05E85
EC79363ACC8A5F234575C256306A3E2B5F6A6ED4C48F6D4440488AE7C9B57B85
DE61CE78FD299609DE1D6795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD1983D
695AD1DE3E935E231AB657C704B4FAADE3CCBBDC7C31C1FE52D8A57D79602D65
BBA312E072096DC25768434E7B56ABD8AE83CD6836A2A624A32128393B9D463D
FF8B865FBC10316F6EC4806316954E90817A74BFFE390FE7B5348DB0B4782BA6
D48AEE80D379CFEE11E4F1CD9A521023438259A1AFAA427959EE4927606F08F4
255EF756643EB591366950DCA06596B169C9665511507959228D5480C7AA0DC6
1F197A9CB5C80A00332184637C6FD2198C1D859D45F35E20C5554B0D72C262A2
3CCB48B112D5ADD2E056258AA295803C60070F8E89217F14F953CC4015C38151
4C1E1BDF36283AAFF8AD785A49E091119556FED39BC1843053FB2909D78D0CC5
BD0202C8FB9DFE45DC35209300AE63A15A7D983219EB991B300213F2BFD5B477
A7342D64AC059315DDAD1A2FA1F4E8CC6969A0E25CD23969EF9E387BB3BE62A3
51C14DAC4BEA7FB4C8F38C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3992A7
7ACADC778ED2784B3423154B7FC03D43F47C6F505869EC5039310EF1F4ACEA1A
40014BA27BD58490D243E14831C19698C0C0C9683827A13C1735D2C649C0D4A6
BE354B0E303F96F1A7DA6410CC5D3F84EC5C9F615650160747A724AF9C66AE82
CB864AB947E3582308319FF3BA95FAA268D83B462FC0BD10BBBB8DB7B12BB101
1EEA4891546F4AC7FCA094F32499C0F8AA33D2C7D00283804FD75276BF2C4F9B
E9BD77A75D5A1E7BEC988F06F62D50278904F0928D97C2A77894DADB216105AC
441F7544C3EEC8F09A260BFCE7C040D10575084BC081821FB759B9016DBA3AB3
9FC05FA6C191F7A83C324AF0629A269BCC414DDA1570B980F3596906BE0D23A7
1396BA0A0F3335B74FE5BC3367497C95A462341C8707177AF767B83F28AF4C0C
F952EA0D9C4176D5ACFBC48D8A48074357B1B8E5B17C698F2052A9C6410435FF
3D114F67EACD436BEEC8ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A6FDD
7D52F256FFCDF706B456B6886F5FF5F416C079AD248559BBDD2767549450C680
3B603B312979604965F7E8298F454E098DC4EE83D9EE5A229DA5B97FF0861841
31743AFD0DC1CF828D0993C56493FBD38744296B82E3908A1A0CE811E0CA2E52
A0EBB9F4998D40FD7B001C660CCA6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4
A868BA0A41CE90D7BB6633CB481DC110FC14AAB8E9264F5EE49798BC49D9D9D4
9B9CB9429CA197321B545625093FAB4BE53BC96D108520D9CE9193DA216221F8
42FD0F3CB18D4D9C66FE5891B484C4F3ECCE8A8CDF069387E4FF4967E9F11717
A630BB0422421290360984C499D5C2F4750008B8107BD17C259B723F956B5B14
7E7C0D6AACEB4C9F0ADEEF68329D5CAE9EFC75DC15A9494E876104FF7675D11D
E1DFC7E967F6DECA7277FCA73E841737D9ADD1D1BAB1961E212D20880069F0F3
B5536CDE53D4A4D5012B54B227A0C18DA8A43ADB7593E98E5E0C75197138FE3F
BB31F876BEE000302935A55EBFE1CE914272A8F50A983AADC0604FD17B2A2F43
06AC9C0E2C687D1D9ACDBB674244037384B36372980DE4F1819DC2B4F825D7F6
AF5769BA3C34DE43B531F84B485EF8F360082659FFD797F6E37B87EAE0447EDA
DEB00764A38DAB429277B77869A70AD62AEA3CFD663916700C95E0023599AD8B
F5E4383BF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0F2F8C4E44A16A51FB
C10F2F4BD0EB7475E396C85116A9D3FDF82014EB00C07DCD76514565D3E6DCBA
5BBF1E7E65EE55B3A8CC8D2229A01DD3EE09EEFA659502F90DEA0CEE99851BA7
2A097446FE8D54CEE9CBC3B88AF70F6D0234ACB6350CB1C56BB44AA5D7005841
0088780E87F8A0D2F6D2FA07D508BF3F6314B934962984C7FE400CC9AB1E5F79
2699F15AE7E181FE3ABC4B4C70E21F3AD9AC49685171C47A257EBC1FA6B40E10
B77C81889061E668B9444D08F3EC366CF071C473CEAF7FA64B863164AA97F309
B76EBD1D860A54D8E656ECEA88768396EFEC282AB93B7CCADBEE9CAC7E77D79B
A760EF4C53A3C983853C30DFA6B0093FC96F298AD1B5807C33A89AB14673D370
619267FFE6A05DCE65C7B986CF466B6A832F1921A6949469ACC2B5EAB9F109C3
6C9122359A60190E6C42C713A9BC911105DDAB231758BD41BEE389B057A1F7D2
5215EB9D0F26C738D1E8782D670AFDCFCBEF6BD68AA64D6CE1D7C82A1E46EF79
FDC5CF1DF72D2275F3857BFBB4FF234B2192EEE72D2CD5E415EA5C1C28F4B537
D15C66B6CA739B8D92F22E3DDFDA20460C55C375A40A34BF6BDB012F333DA135
67389FF89C666BAF1696FEE4BDC1B32589E1427C1749969DAF3B72CFD1F579F4
A62E705B6DD2AEF3D166BA507A1EDB131616EFCF91246FC75DE3D8A915DBC82A
1E46EF79FDC5CF1DF72D2275F3857BFBB4FF2296C19E66F93DBC8E9CA5E86793
FA37889936F823DA9CBA746BDC1BA4A84F7B70846E33CE5F285F32FC4E53A284
1E737ABB84A750A16A4999D5A59AEB5FAE6FA51F6C8CCF447A19D91B8CC30481
B5C49B6ACB4DC451F9C524349EAD4DF1F0DBB3869B74C2373223236E809ABE92
C2630C9A877AE16BC30D56A0B208DA546903B801BE445518F14E701BE121A6E3
C832FDC31C1546BF0855A6767030D9B6B47266B4A1084BE171D03696A026FA7A
544E4D106B9A315700669D9D8A3D985F44DE6070E8E4AF6424F3048173F52CB3
EECA756C4D24FC6054D922F59B105DBB74686310F635AE6153D9E18A0514882D
4CCFE9D44B8952190FB9EC8360698A45EC064FF735101C9B16BC27110FDAE792
2D97BF0BCEDAEBBDA6BE7764CAC582CDFB785921653201A8230C66DEBA105E89
909D76D034C9A5C6A216EE8C2D9C96FF0A04F2EBCCA2467174529C592950326D
E46CC1E57DD4B2A8821A8506BEF79EC524565788A28F5870230E9DA69ABC8078
8F2F72CEE5F5594F71A24092D1CA9BE1635F769E2AC1459B0B3AC1DC117B6296
C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6A0BB569A91BCF947E682976A4
A993A413FC97F6F1331B12604C28FE4D8F7FF429F96D0DCE41EEC1EA29EA44F3
F8493AB33413FB84F35B3C0016089A6C4D67EA0050A0381699FE2E38BEFB071B
9FFE3D7574FBB32CA8ABAF8CDE383085DFFD5EBEEF83D696C0FA27B86904477A
22C09610E936D310AF8455122F4C6B61307071FBEB6E8DA8C43C5E1C317DD3AF
44E46800FED97CA40252808F6AED21A9D6F3EF87869378858BA7E6E918D5E464
49525A4A5A2932DB6208081585CD9A312B09793B1C1FA05637430A13E5AE3E1A
3D5B471CAD468007C4A6BFEF07D313E1ED2F47BDF624179D8827CA4664F96F70
03D7D0BD14633673BF1A66D0126713294E13C1A4571B8A9E6D98EE5C2084E767
98939F0AEF7E64F621BE09010CB6F43790AC69F122BD9618E23C7FD95CDB02DC
661ACA0D9FA5DA0CEB0D82EC823434BFCFE218A4B5FF0264F1EC9818FC80F9E3
E06FA21B47A2C431ED3DEFC7267AD9DE87E23C2411D06FCABEAAA6D87458CCF2
5F198AA55DBC4F8AFB25E33D6830FF6333593140C974A8B13E94CF0E77EFE6EF
C2F0C2FE513C93C7EB2528CC8B0472B5A579EC88E8BBC1480D4976695D2851AD
FE75F0E8AAEAF174FD8B2D5264FDA6E40432CB09DCCF5C286D5EB04E5A7D952E
716DDE9DD17F51C40339BBD717BA9555F70DBFCE390F10FFC62821D7082423D4
6EB801F8502449684418493C3E014D603933A576C6B0758D49F3155D448D505F
73A5206D1647639FBCAEA8108A2649D23FC552CAD67A60480964C6CB0783A8AF
EBB8E005813FC0D89420F1930E18323460DB56C9DF95B90D45EA22620C2FA7D7
521D7D4B3FC1FDA5061C6F4B994301864942F3C18428C06EF16DAA37D7CAE4F8
5E3CC5AEF1EAA75C658E90F0246C18C21CF073CC1D7732019B86C11D799B79F3
3BB09CB6771F637D534DE9FE49A53A3812D7DBF47D9E8A2D353B48627891CB99
B8C759187CF9112E3619F9ACCAD376725BFF2760B9ED7576B9D9EADFA0D51077
ACDE9DA732031E629834097D62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAC
16F85A63CA278DCC38682E1BC6D134930242730DFD14B49376780164C5A1F030
379CC9E763CF518CF9E2DD410B31012ADDA5B9ABA7F5EB2EAC54DB67BF9CD44C
49474B134D42210504E4254BC7510C4BDFDF53EB3D5F54D0C6A53862B4ED64CD
18471A49B62240FEF22F4D82468E075498FE2FD44122E511E5FB2FDC8CBDF6A6
9012CF9846CE3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB3A260C7E0FC2D
A6ED47D61F83DBF89585DAB88E81AE9FD0426205126E4CDCC23EB4C431FC6C1D
BBF79938BA64859723C4637574DAA16916B8CC6DC32495D5247D877E4B863070
61E7A19A3AF4137889983657F78257CE77F03D0E9DA4E29707C31DCF1707AA65
83AFB9A309EB1599591812BBB5C8F3CE43DCDA76D261E3F7734DE2DB7D9BFF35
01E5A6D23CF1541ABF3B301F226510EBF89944E4E9C5376A9F2841845CB62FDF
58F84CEF83450F3CF96A040F4C2047DEB00A172677774217ABBFEDC33DF60D1B
D15D023EC0FCBE6548410923051F875718FAC168E4E2720E8D959D339DA26151
5C42555EF75A03385FDF6C7DFA8FD7D02B80E1A845766CDB597CACBFE0700303
409164B5CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FD03763D20BE507F7E
56122CF46DFFFDB6FDF9361520D2E388DBC639CAD5B2E83C049DA71FA49785EC
5565D2B3A261A66C9F2C8501A2E9324D5E6F0F1294E1C0AC67EBF4A840618B23
172EE2D3E6538CD9B1E12B834A6D01EB50C781646E30ABD086CF9C09A6B0FEE7
416646141CCA188014A29CCA5AFD1215D847550DC0F06DD1F83FA50D4F154867
B579F69E34040E2AFF508CE7AF4B0D544E70294FCD49BCCFB65347FD1767DFDB
6F85337F7B399827B860FB08BF9D15DA7739FAB5D8E03BD8F283FB6832C3E10D
341F8D147A88D61C5990E609001B853B273DB140A7DC69895E465C1ABABD4CDC
88310748221F5BDFDC2306912DAE1934E475C3AEB56C96D1978FC7659ABBE845
A08BC6EC9EDABFDB1CAFF5FB8203CE3B25721168DC1E382A5267627FEF41D963
44A05EEE4C43E2AE24657176B6C8D3A0EB5A8C229616709EDD4096C1D4D817E3
96C6A55FFA4D67E59B58C6D9BAD063D247787282EC4820B3C3A8D7EAC66D120A
3911D284DCAE2018F883AA804CCEC457CC6213EEDC75C8890DBECB670000924D
3BAE8E7A8066D804B89BD943B49ABF548E5D92C1D6151D1ED96241CF76510076
26E9D2EFFD007A8E985FEC263E6C90BAE36C27D704E88F1F7BE09A971CABE15B
724B62BB0C1A5263449707BC0ABED19F4F1ABEA27322584D473A1A888AA4DAE7
7864042EF587A6D6C04DCE664BF83492D166B205011A3E283257FA60C5AFAD3B
71CF6D6772E5E77FC5742D4D77F4B9576213835AE7E32A2B401C36C3D58214F6
DEAB86E06EACF7F5DA3BC32030E4E23C5E0E7E82C4D1F9BD7278685C4CC54FE1
C1C4332F05F5AF14E70FADCA465393A7DEB7DA08B3012A99FB2FC7F6FF7AE570
BDBA718AC1E0ACEF9AEAE22E5FA653C2698E05E0E072A7DBA0702C0CBE5EDF6B
D0A5B47D7929F5C9317680A392DE0CD7AAC72A99F351D824F86D33CC89BD70DD
41F435624F598030F2E7121F6A610D640FC7E512A28BF6C12496361A53953D75
312631D6F07794B1D853251462B4D522B6EF8FE6D2DC18EB4C02C6BFCEC3E71E
20E6D98720013BBF6307EAD2720BD9674E2AED09E56CC6D3BF927657BE2D0749
3302A5492BEA01CB223FEA3B6CA4D0A35D6F2C5D17804371F9AEBC100D7A6D14
14C37CBD273EF593B596973EB054344F62115963E3F61A1A2774E6837D2DB796
482A00E2BEFBD6E3758A5A1CE621ACE547811799B1D7893DF52D57BD6C1A6B74
4024CFC65AAF320264BA65EA8FE3B2E77F515CF05968797241B5BA06E190C023
55C664139419373923D5BE1FDD292F80E973E271248B2E3AF05887FD5142811C
2572A1D4B9F9539CC6D9F441AEB22F4E871755911D8FAEA73E35EB7835FA1C6D
A4635171C47A257EBC1FA6B40E10B77C81889061E6696F50954EB8B347918C49
20C7142A2AC68231DD2AF574910705DEF2893D8D4BD1C3ACFA2BC75EB9471489
0422528F5121B7A7D7A973F2EF67F2795E6DD8CF55B98238D6654F8B47476E40
98ED693455F82F098F49FF48762D1C9622E0B64CD190A4AF3020654123563C5D
6ED62F1387AA1BC5F00137C6AF5840026DA68D8DF87CD5567644A09B52124E10
51A715399BBD1A6D3704BCBBE1FFF89BCF8129B98D35736FD2CCBB0E36AEB664
3C283A61B6E8613BC8134939CD28AF21976B42B06A63719C44432BDB419B04C9
19DA628C6A5B0F4F626E8935AE2943365C505CF5C7955AF2EFFD964AB8EECB15
C33CFF111F801E31FA0889D1561CB28638D1D24AA9F358AAFF93B9564AB4CED5
632C12606449ACD326A76B011D9FDD66C24C5342A5575E940A10EF9A7C4E0857
59F390036755C4BFE971F6DFB9FFAC965ED71736140A0D41AD571329C7FE5460
ADECF79C3543E3592283C6770B4087ED9EB76ABFB56774C4A21133E594461685
A92D372D4ED3F9DB786D7E7245B9B5DE70958048F037C56C14FDBCE691048469
BC488E501EB5DBB042B02CFE90432FA7D98B533F89DB0F21A61657E268166431
92F6AB4C4265A5C2599F55E134AC2DF346CD7C05F0C4B63DC1C10E03B9D34C67
27AACF1040ADBF7713E3898334BD99CFBE66C4FDBDD9B9180626E338FA32B67C
16195DE9D59A0F447B8DB69CE8FD6E2ECA90C6B424F1D39D11670BA89B298DE4
0E91D1CBAEDF3D811318D493DC71793E84BBF3E2BEE2EB813B03690C774E6DCC
F2D7221490784231EA6CF28982A4470A7156F1C7312FFAE07D32B62AEA32B58B
8D127C00F3B953C795C84E1A158E799D50610BA45F2003568AF44E2EE4DE711B
A128C91C36EEE43CB41592BD13837B9EC9735996A1376BC209B8D579F6A057A2
7AEF243C4B389CCF9385CE645C882CDB6A03A7921BB9F85B93AC64F9C82C455C
AC60CC9896FD453CF3AF2307B191F79C5C6F070D7E814EFF05F881CD7EF43871
21F72EEB3A9ABF13F7A9C46AABD4D0D976EBE8AE53D3AFDDBB926B54EF0C41B9
8D10342A2BA4F9908402DEF9AACE7BD76B3D4A244E3AC7442DB6A705BCD7E2F9
DD7C73DE15B222ABDF7DC3B76EEF17AE4CBDF387FB03FAA5AD122CB4A90F479A
EB32B0CA993ECF07D050F04D4CA153663EFF8A63016F79C7D0E464A57671FED1
E50936B0CE6E364B62411E6DF77D4A4DDF74455394437C3A7B477AC27F75850C
FED5BDB2F07349EFC5134BBD646BED8080D44243E74485FB82236249FF6726F2
D6775F15948A9D4DC82D6F60D7DC6F714656E89DC882B95552C5215183E5FB51
605BAA7948D6E5102CCC8E7AEE127E914C372C6E2DD84989E78792EC3F50C186
322A81E6A8368780A2E815A7EC49B29EA2F4594EFA2C1C079B0C777ACD0210BD
A4F06EF57BFEFA0FBA572A16A81DD123F8434BE971D9EC8149468CC0F2C45ACC
D61E6DEA7CCE2D711A218FC3953EA7B36F464567F208953F9AEEC1EA50C522B5
A42C4A99B079ED011928C2C8CFA17D95D50A7C1599E62D4FCAB001D5F9DA84FA
530D65FD2738BD6BC724446933E8927F3AACE64BE6623CC4CDCA1DC0B686ACA4
41E316ED0CB3CCB6ECBBD05FB823FD79EEBAD2F9F0891F553381C5E352B4D7C4
C1678904B22D75C8E8D4ADF7A319E9EAC6238093C798878E5D5087FC5390338E
CC499C043E346A4DBA66B7EDE932FFD9780C75301CDA60558F65241DEE49409C
10DB07153317E1A13947E293CC426E38653A16E2A7EDF6D500E9237793DBAF2C
6AB5E2DB571739092A476FF45FA1A1CF898E3FF479C1EF67CE435AD93677B705
BC81144F2E45854E93CA8D00E814009234E2A36EFBD854F868BC9301D33BA670
0EEC06C030DC43B2245F9D24D31A31F06EBC65712C870E62BFDB244441198618
3617BF19EFB5DAF155F0957D038B6FC5BF776DB24668F0F4594572EAE33CFF78
6BFADE79FFCBAA6606E892B2E41A173AA590B6C92E254AE642A2EEF5D51BE02A
C50855B9158840F97FA94CC03CF388C8AF7468EB28FD5E0CBDF9E23D1FF320EB
F19E60F85CB9568AA9C68C085E87B32EDCAFFCED2FA9A1619C3D1065724C6F56
79589C83053D4C8C9B53912E217B51E90F13A589F452936A798BADF461C448C5
480CA1D7A929044CC07FCD6CF9DD7FCE413A0B2CF777529685854F63EC8FB112
3A12157DE158671515E8FA0324852EF95789F16A8421B4FA121305A1AE54DD69
30796B192862AD337BAD6CC06279077389A26E7EF7030CB43C182223AFAAEE62
0EB7E7F02C11C1B52C95B6B66A2DF1FBE1991088128B8B12C2B28A050B50BD46
CC83DDD732C8EA609E2857FE8377112784FC50B3E2940B0D30B506FB4732B2E8
8F32140F3893EFF849FE4E17A69F02E7B4C69CA806A1A347B174992DB8D542BE
C631C8069D0DF3B6F3A5A80891684979154D98437D6BBE4C8EEC74B6D9BB7D6B
C5924BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F09B9350C42F6BF7A4521B
21554098DCD8F7DA254922301AC847E5CE09E60F0839874318C8389E298F5546
71CFE508839634A81ECF5A229D2B16EF77A39178507E41DE72C0B30162242B3E
F7756A035C0529533E59108C550FB89650C5B0600791191AE0D2C2D576DBD6A7
3FB4C0722AACB08ABBB932D5E6A03F957B7C64E89BB59C4ADF019950C6276EA6
1AA9465BBB3A56AAC8D14E62B83EF68CDE87804FE10153467FC0AFC951B645E3
0ECCABC655E635DB463BE72AF1223D0690DDB88C7DA9D59148324E7CA0701024
42574818D8E2E330E2FE5102B7F4DF3E4FF521CA5741D8C57CCF85B7887E6A7F
6B6E4F61160966AF27B74B21C9F3D6882E3E909D80E0762C58ECC4E243CCE91A
946487E546C6E433A5C5B9FB7D5B97F2B4B202F94545C8C3A9D70992C1F31DC6
753222850ECF459A7BEA8D8482342AEEC5762713C43E7E94884C06329D340EEC
ED08ED58B05FA74B94FD084CB58F31EBFD5EBC6440498768C234573DAA11A489
B87A3C6A208E9CB0B30F7AC129D5E7217B10FF89AD4A78408DF8ECB0A02D9EED
19239FB927915A02D3D85B0C237669DC17FE1A48D20EA8C5D2A68A4127CA7332
E5039A2A7E32F2389255B0491050D86369ED418F2926916FB309B314347EE3FB
1EA13799ACEB62CB55BE2301E115BF38D18AE8461F466E207613B6C091C7A10F
D77A10F08ADDB19E494C72ED471DF04820F4F3A6713E67E7C08467C617E31DFA
524A30DB697FB4139002DD5225DAD211F5C72F3127A60A33D311387E6018F5BF
F946CE8D7834A3410F5E6EC14CC8E47337898E5E8367724E6A7662499EA3FCC2
78B616531C0CB5BAD1940ECE80B6479023DA0394E3CCA13502D03B122C2218B8
7DC1A0A15DCD491B2BA40939A647E01CA6143950A0D13DCCE128401BAB4E3322
2A22ABB177C6607F014F0310C1E7BD29FDC20E11094E2852779FC5C0D5DB9D39
648317DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DD74D4FB3A9FE077F2E6D4
384BE6BC394E71C5DB81E42B90ADB935FE3468186ECD90E2F15FDBB395191E6C
465F4AA552F9CB59DC4B0FEE8C937A0920796C09CB74B3EA1DA5B74EB358437D
0CEBB9E03109C593BAC09CA9962533B3AB0EE6EF76418EDA7CC6B8795043E5FB
6F899C3CD8486A6DA3E670E6D13BC51C01FAFED3D47621376F2A271728AB7439
3AB3183B6CFFE1D0E2948B24D2A7E6A98712527A7F3FDF0C07D30FB6436D5875
3F6AE969F727C534CE5C9001F9E7A0149021BE5A65DB754E14D890F42F4D23B8
5DB5F2BD66726A544C10942C271713B28F9F33282D2063886DA7006EB5C0F757
82A3C48BD6B7D4DA8C112653B00D7E484A88A248FD17FF0E7A075A554F98C451
C7059F491D1C8BE038ADD1FA4019E1C78B8C7656766444617C98548A8EC0CC14
829F7C67999234D302FD1E40C28703DFB713F881EA0F4B81A8F1FDE4B3C92CED
078A98A433D6F3C4B442E014E3E5A5E82E52DB5332A895046FF12D01742E9AAF
ACF2CFCAF0517858C28A24FAED300D643F1880D27C0F7D73029F171028FDDF8B
55080BBC908D26B5CD10691FB92BC2FA54A04EB649B111671B43973E31253DAD
08488B1C71AA6F08A5FE3F6222ABC942F7B152702F7E48B93155A7DE83B3A6DC
7FAF8C2561841226C56160914266B1D28D74185B0E0FAC89BEC8ADC3FC027EC4
7FB0EDE4D2906CF1B55597831D98B643B81D2FCEBC963155762A1019FE6A9467
DB7E5464F6CEA824787BF86ED78492C31CE4E8AD0913637E245B375AAA5B76D5
95F18A4289312E74FA9C289A53647EB6D776E3BBBC735D9E7226D2B353CC752E
FEC2E91DF8E2DC63650E22804A5B31B13418130BA661F22AFB71F8026DC8F788
188647382BE1B7891A84B9697E22FC61EE575564D48A537CB190E26707CDE0E1
B29B2BB9C4F4716519A4A62A05A7B901F7AB8E77C6FB72D7CB3D6953F1416C40
FE153C7E73D86FD65663DA0E08018ACF34CF9BA5D7A937AEBEEC84B992D45A26
80BAC63497C593C90728B12A42833DA3C710044C03A37A680D1F806296BBF942
428E9FADC28CB5AF48F8947D9BFAF2F57F0F6C4AD7C698D46568068F98C3564F
42D2F7F26014DE37C4DCCB6B3082CD71C69A1E1A3AB1C1298DF12BB54B3EAC9C
3325FDF74E1B6222A84D10CF5EE66EC13A71302C6786D05D419441162EEAD0BC
CA6315D5D70AC07AC571FE97F03509863B9CF7A0E4A8D5214D07B149EABF51C8
5F0C8A7B7BA0AC8B5A90540E5FD5922F512C0A83999C07CEB7A37F71BB8C4C08
F359CB4473250995CB6F5DA6838536F3FE0B38EC7BB696C8285F78C66D154289
455C5FF2D23C1A59A2944DC972F44474CB35738074BCB9FEE4077CC0C49D7185
B623A143311EC892D1BB9554D34547816955434DFF68BFBC34A074CB3BC8C175
4662B5D3FC0462AC4967765A50D653FC3FA379FB4FA0AD9F83269A99D550366F
C8714B92BD48CCF7CFA30A7E92FA628D056602E7EADE6F2B3E168EE1B0AEBB2A
BAC2B90A514D97941B12553B13AE64F9F960EE62E049E6D9BC9858A3ED3CAA1D
77CFB4A424858251438F05B3EA1F686B35F0072DCABF52B26423E8BA630090AF
D344BB225F08F47868D6C4D857CF0A3C6CF4B205301FE5A2F54624315981DB9E
59213A134B651EB7A024989A6D910914C0224A700E1245ADAD0C701A6F5E771B
E54B09E2D6EBFD77645845B7C08389FFD5AA6D6AED2DC26C28A403BBCA3435C3
FB7971E9A56226D46A1174136F0A04A5CEB915B8E21F640745A0AB62F15FA8D6
5B74900DE1EA95B981FBBCE8D846DAE64D91AA7BFBD49CADFF1DC7AD838B897A
D728B35D869CF7874A1F48CA79E025C3D54743A3B0CFA14625FBF274F3794F04
4EDB9552BE2C55747D7AF3101C5F1A2A1BF6C0E2572AA0624592BEBF74CDD683
40D52E137B1DB6FF17B6629B871F0D3AF01E55645C56BFB97243ADC4813F842D
E44CD9352178217879909DFE3C012CF2809984881E57668BFAA1644FA922FC56
B0B93D32362BA966DDE41AE6A21FD20EB82747C47F18DC85145900305F388143
6FF377B1500EE02F9B9B8774237EF1899A326BEAF8EDE7CF319D42D7B7B61296
2A9DC4B8DD8DD87504652967C679E5629FE5449DD1BA7DE9ABEA28C4E2496F87
61C0638E0F7508D281F5762ADE506C2DA47286A8A2312B11DE4B488136EDBEC1
4C5256B9940F0800E6DD26001BE1FD4BF642AF9525279536814044F4AE7DAABC
43A230FDAC3D9FF0B8CCCB4C1E7696D16531A5EED36C30AA15C66D5398C145AE
DCE5826302220B185F12F8DC154E4B79B163C08F53AE78243C52D4E02E82A4A4
310980801A463964F3A0BBB90D85756EBB96B5021481EA4E845488B79682BD09
F8D07481630EC3129072AEA5778A135D164A571B22D1D619980E73841F84F59E
0500496E84FD5E9A7E4A28D9EFBDD34A443F263B41A3B2076595CE2A7DAAA94A
4B95D7E9C281194A84A9ECEFEA5023317F88FB64830A2CDD5277003D6F1D46A6
DDD51B3C62188C66D7D12CE54F29D09DBF020D89506CD1270C0B3EA235BDEFE3
E24373517FF148B2CDA2B90CB5884440F464CD57295728A8AFB1A5C97B6B8F47
63D21E005D89FAEBBD7D8B06F3FCA5D7107E8B918D946E250F561E5E394ACA6E
AD2890CD407F38C53B3E51C9FD432F22202E89A91B046BA4CDDA6E23B0AFB2F7
9CA39D61350D26435EB900ECE26C5AFC283144EA933E003739EA80DD65A63FD2
020938E02C1C72FD8A4A14DB003C5D21197F835B183FDC1269D70A0B14D4F9BE
76C4CAED815AF7DEF664098CF1A167444F32FDE1796595709294CCAA488C37CA
EF08DFEF5DFA13FE0CCA32024C378A87CFE7506B67F7A6FBF8635703C7EFF67B
9F15A7315285D2565D7434FF3C75A20CB3C1B57AF37CA806711890C1AC5997F2
1A14E7523CEDB295474F36E7AB3493706076D62F4C407BE252B5F31039CFF52F
2855C8AF27ACFD99EAD434BCC277A4805E6F068CF203053B151CD82DDFA79D31
F0B4A0485F51334BDF5CD5E855A60000B2D49835C34DE75CAF4932693BCE009A
5801BF822C193040C8E053C3F1EE0BB0AAAB446819939C850C76B37EEC59A516
F15F22949AC658037300F1E113F3BD1B4F3ED7F9F55C21A04F1A6DF8168FA228
6D8C7EB944B03F3907EC73E5B4F9B71156B357F62608909B7E4BA8223446F5AA
B34189E5C5ABCFEC51A249DEDC76E04CEABF371BFE2347C17AB8C17FDCBFD6F9
553E8BCDA3094DC141B331BB999963089C9E8131AC54F43D9D7AB95C97BD691A
D8934FBF8FDC7B97C76DF5FDC62765D55AD993DB7F0907EA177C36ED9FAC7854
AC865B2BFEBAE6EFF4DDEB727B4321E24A2D8C7D3358EE391B31E80FA5998089
7F9471F36AF42899E7278ED6D5DB95FD665B591E12E4DF06B3CEC7D015551B07
AAD8C85C6196DC28076CF4C4A1C62A4647AC1D5FB8AEBC6481A94C6ED5EAD255
0500073598D17F51C40339BBD717BA9555F70DBFCE390F10F87B5A4D7682D1A0
AE125DF60CFF05C7454B82F991CDAF3344A10115DEA01BA7890B3A1123170D99
3F727ACDC8C0F00E871C90A6175956C54E9E368CA67F79A9DD91ED489EAAE76F
173FBB4663DE44D9F0B3A184AFE75609B62AAB76074CAA13A2355873BAF0F0D1
B5262B824ECCA9A0C7F74A4D13C03D0948B6F864DCD1251D26551CB2337693A4
3B080FD17A292531B5F5E64B876C58A4CE3CA66EC2EB0A098A5D9D4D41C9E55A
7E4EC94240107FE7909AFFA25FBE1041A54E0C8A79511ACBBD91ADB807ABEEAA
542EDAC9B6ED8F254F6BB7D73551EE33D4FD3CC697DF01C1F094DECCDD9F43AA
B88640D0E9347881AB1F62D9A8E4A799A0706A34C9C8A243A6890CE854E3EFA3
B883E515D1C4E5829166B8DBBB1DD948462957711B3A26FC69AA03ED308F28A2
3FE7A7DF7F4EE6D26CBB6620076B0AEAD03AB485F43DD669E9F6D78F7F3A3D17
9B8597267B24C5A0B90A66F0FF40B7A8BBFF59DF5DFCA78C2EABC4E6596C241E
26D1DAC6FD9EEB3E49BA2F9C8A1F81321917173BA912ACDC3DEA3227495785C3
F2294F7B39280205AFF45CB3FC3BAEB6236FA30D74F880C2B7F9F332869613A4
51A1BECF05EBB5F9A6AB29480451E1F04B10F526DE12D88C310BE18640A8C3F7
D97DC5E94894E1E63A7D80600B945DF961A051A3404D96334DAFF3A84B4AA0E7
8957C95F4AEB860E63F394C4C8430BBD1F3153BB1E66022BCB537FAF75BCEA52
B0C480AA4A7B456EED703C27AECEDCFF899632154D9B94338BC8126131A6A430
6EB0CE8E5ED39155F7935D54BC20ED3F90905788CEA450619E78AB817CC98441
4283FC7AE67D07BFD4AD7D7C4574F0F05157100BBDFF6D94E602481654E5378C
8D137E3A872753CCDF7FB7936D800446E46A852229C5B4F6A84675CD614591D2
CE4A17D968CF0EE334272D0C07FAB282082DED26D59937662A90683655A66893
1A02B1E2F133686110E9F6CBF529A003DA8B574FD56BF4A9CBAFDF2B1BBDC28F
654075946FF72DA1DA89CF6F9FBFACA3A735ED0119A05A899EBBA6B2A5A6D96F
9F2221E85020131163F32645F474831ABDE24AABF7BF07C8C599F051F8181FA2
DA8EB2FCCE6ED8D9799646156E1491E5521FC8B9CD9158D751961A994238F3B6
03EA8489EF99E770EED78A968F1DC0708455FB4E2D527FBF80D86BDC60DB268E
AE4450B7679E7B3BD358D6931EEA4A860E1A17079A59DEB9C7A4C5E1B646D86F
FB6D567AEF67B112126E2ACF3642047B538A5ACC31CD5366FDA28662B8B1E5B0
D69E77228C39700B0D924194E8BB270EAAA64FE96AC960F649C3503F0C3E2DE2
C9375CDE80642BCE84D2C73C8376BA18203DF1015DCAB4224C27161748515EED
8C9C455107A2D2C947255EC7EAABE035F2A19ADAE898B7F06CE566B5620FD22A
897330AA18015EF8E9F24C2853EC5DAAAA0A3CF68F9385394FCC328B413F11A3
968D9FCAC28875B34AB843A708428E61B06606BC5EB52813C4291A716631BA51
59B67DC9CA5E9E71CAAF5A17D5598D8E8BB772EF73E44F16935F4004BFFFC328
F44E8D61C0AA41A67D2613F71AE1C9D16A7AA32EC49EA31641D1739B576500AD
BDD6E367A5FC24C9A2C7BDA35775E82F7A255D99F0E55E529D9D84E737091B05
A3BAA49FCAE6E32DC9D1AED22C2EA982CA04F4C1E2AE758EB7547FCF4ED34903
DC094F76FA3181CC2B509E9D70AA5F53D932C71EA76AC75EE6B6869201F2CB8D
ADD035545E90949354146146EC313CAAD0714F46FEB731944E4BC8904F2378CA
3894EBDA6458CE2C1C7C63FB94A146F8B198581C154A82DCC9485E11904138C6
CEDF412909C924E8493747E723EEF55EC3FA5F63F82BDD7EF5018BA0B9143D16
4B56881B07218CA48BC688FB299CEB1030A8A9959F374A4E9D79539ECE65CAAD
81B406E0401285D6645237F7DE0A89026F9112209530A35FC6145232C379D553
9538424447C802D85ECCE0C0F2EFF20DFEC6942E2E9BF901A0305633D7AE561E
A78C8C5CF8BC3CEB46314C6D52679533CB2C9CEC2CBDBDC9CD49C47C8E31E70F
F75FC4E6D7789CB482A3C065CE71C64A50CEB925808E57CB966FBA3A8D0AE464
4AEDA86E3FBFC275FD432A8A3B1ED1EC859DC0B8E8E937971E94C01CB172F3A0
D8F7D7A4E37D3CEDF8F56A233A629F16DFDC16B6687D0DE3C875DDD9D57AD111
B10FAAF8DC17EFFB7A46733C277C6506C04B1A1F3E4A90F8699D221982DDB791
FBD3D0C08B8C765496CC34F527E214FA6357E9754F125FA40C3BB93408AE6A4B
9A6E729BC52112E16D2DA72BB391A2F176F0F1C7AE2A8462EBC9D7E87A768516
600ED3FCFF8565C6A56B40B5E185C99C45010F8767C9B877A8D7AD7FAE19BEFE
E18D0461CF1C65AB7C2EE42288BD17DB983600580BB6438B938379CAB93ABE05
747491570EDB80902B818F3DA69F908BF3B1FA3743AB1774489E6AC37064B511
3F90A8A759EE56F352334ACD0AF4601369783A83EE1F040911392D595F3A3E6D
B94D42D2EF8BFB8514BF6888BF5035D47808E8A177AB68481BCB9DA87822AFA2
C2BD60161D040C93443F0FB9FC74E637DF7A7C47091724D0FDEC98F16A44ED8B
88CB1B2544153A1AA8D2DAAD95397886DCB4A57E4F424403B407AAF88101D7E9
CC89CBAD30CA9B2554EFDA69E253507A388DE74333F6462EE1DB7FD6D73FAE53
445277C899FE86E54B8BDB1490AC76FF84E7A0FCF7C8CE3CBB1DE5A1A15C14A6
76EF40F0B1FD936FBFCBAF101CDED67042D64FF3624B53DB291BB2F67548B250
6B2CC0585A7AC24DE6DB33473D460C71EDBC4D84093CDDAA06862E0BFB5C0D78
8E57D2FAB457DAD3CF20BFD9DD09A881AD81B6A8871661902B6EB87D3A7155DD
FFD4C7304FFA804319305B7CBFB2AEE28CE031D2246E033969456FD365BAE24F
737E9FA5DBC1CBFBCFBB27380DAA42BF7E5D940928D79AE4C033417461CA5BCE
21881ACF28B2A6342E7FD23E1BFE1487D82689119BB85671238A2737C3066683
F968834E025CD641E85C4F6D5103F131F6AB633326189C155E3D6F77101C59F6
2AEB10B08140C56020D4EDBF4044F0E247D957956045B161311057C8E03B1AAC
8C7642DA07EF2F28988112405F80F2BC8B1704434961BF1742DEDF34244D43CB
96CBDDBE2087BB84B10A9E09D504E360902F0680AC09575B8AD8AD4103F9D642
F4B65616E2A22223B0E9F7715EE1E8617FC91D62F1EB94DB2F0F49AFBC11E920
52F10FD3856029CB2A53387FF65A63CF2A927E5F2D7313EA2C5610209DAF93D1
59945ACDCC8DA70D5339C919D9954FE91E079DC802ECD246AFF35AAA4298F411
E56C523B561890369540074D2B31841F621DB7AC11B51FFC94E7A4C6AC77CD36
1313F8EC42A55A21F2525A8CDD9D762EDD8A41EE4E585BBD9A83284D3F6E0192
DD8E788CEED141266BBFC3A7A5FD605A64384C2F529685F965F25D9E0B3809BD
A31947472B8626B86EDDB355D66FC9A90DADFDC11833C93643517AAB3A6F5F1E
07791446F9E9D18741DD7643D81D93FA0FFC24EFE5C7FD42DBC5FD7EC83D687F
CB4D1D8619B481B011C5B308DE4B15BA978CDA8A87F21359CB4BE3EFBF6B348F
E702D99EC976714B5FE29DEAEF0BAA410F66BD660253A72E63479DBFE0FB8041
A873898332BC1C3DF78D4A55409F16111EAC8BFB0D946E34E5623D6F6DF24E2B
B54EDCE5D6E365450F5CD528BDCB140E3F69A89D2D7ED74ABA7D7F6D429C04CD
1D5D807ECC4DAD9F507AEBDB07EA3A7D588CC01789095BDF3B457065184310E8
80B78186D7F391CD91B6222E88C0BCFF662088172DA0DF932280BC552ECD04E2
C33B76A0F6172098AA72836D3D449AFDF559CE627D14BDF05616FC958B62CA3D
3DAE2E3C709E9102C9FC4C68FCDF6949852B16E2BA59D1E712FD1674F3535DAB
490E8F051B47608C92E95FFF0FFD6FC77F1AA11A8AFA6B6EBA8FCA6750CB48A9
5CA332557B3EBEF1809376BD5027E2C7593EF5658A9CA1980C12204619E77C87
BFE6FE50DE547A4CD3C7D183BC20FD7FE34C9DAEE69D70D010C705403B359BDA
A5B9ADD67B442648506E87CD85E84C54E47C448AB0EECCCBC6EF119E6442CB14
BD2C5658C938BC685FADEC8C6514A72D3DC3E4F9DF3A174028CBB2A2717C97FF
0F700841CB1C12E63DA907A0788B783320EB9EA8A9E4B2BDB0B3CE870DC57681
43FC961DF131B7BA764E5CC20F3FF194C0CAA484F18430B571D1DE58FC6F22A3
C5D499DB9FE842BD65CEBB6C36374EB7584F372B9A40089708F461991A7C544B
6753DCA4A6667BB22C841A91A8AC118812C9BB0B69037BC2A4FFE2D0208EDA33
3AA5F4CAB0ABD7E1CB7B84F6324E9DAE1176C7724CEE2C70F3A203377F7D1E8C
9A61DEE775B1D22F68706617693ED26521FE539E4BD4E059163D152A7105F942
DC1CB22923131131AE570FD8E443F0EC948B805403A784DE9193BDEDA3D74190
7D5DA8DD4712304723A557C4C0F1191116F1C8B82758E41BA20ED6AA571F5701
69FBE88604B96CB32927A36FF5BD0CF7F778DA38E54F972D6A17B932EFECCDDE
3DE2B357001C372B3F691D60B533FCDBE7BC65101A046A23D4111A78534BD65E
DDA5B466A2B687F0998FC59BE4B93F412C421AFB91DC4E6728A1CA7BA4ACB868
F9CC431C92BFBB158C4ECBA4CC50F8131D570FF2C9540CDE769503AAC132989F
371A8F30B1B39DA9B1F203A2814A200FFD12925D127FFE601E8ED0AD98E9E8AA
E92BBF0645F4CE741B19617A6DC6D266439974A234EFCD5B6E0E955587621E57
5AD4C8278F0385DA62ACDF1DE9348FBDC32A12A9285D36442C20E14598F0BFA3
B6C2011B842784111021F7F2A53C5CA6FA9E91D8A28C719F9348509C0E17D634
5BB465EE94D92CFB878BB725B0E81E119B3C1DC388C3045E230464AF01944BA2
D55B6E014C8A068F6391E1132CCBE27058FA600C8EE798C5B24F5EC4370F3F71
E5D4AB281E2074B7116C3845EEA16B5282A7375B3C445C617DB85E34777FF1CA
8846EF23C38EF2AB975F04A6CB5D2ADABAB1961E212D20880069F0F3B5536CDE
53D4A4D0189EFFF5D998AA85011B3174065A5F5E31B386BA7D571121B94EB181
D2943267C158AC94F834EB78FBA80799BD96AAEDEDF87704921CCFA16F0DCD60
F522EE900DAB2DA0D8A953C6B82258000B6D88AFEC97220365FC4125E9AFB1BD
18A3F032DFB948D077AC495C5D85F5543B1966973AD999EFCC929EB4E58DA543
765A3B2F82FEFEAB3B82BD40FB1344156DE7712A41673F44DA2E1E7D41DCC07A
70037BA5661166F3898963472CEE9BE4D233792A139EEB54F16863203613AAAD
505CCA785EE521B5D53CD01765536AAF054BB9154531EBEECD5C8A5BC1850FE9
B8D85CA5AA9DBDFFC35B8399330235BF13206A3DA1E62291D1A9E5969D76BDE4
FC976074F2D623721D38E3F0DDF77B1EB40C8A664FE68BFEDB98E14E3073ABF3
9EF34651AA5BFEB4F8FEBEF49AAC62C0ADB175C4E5A961D1BEA92AAB25258A6F
B58A9FB1545F9A501ECBA1C6E90D2ADD9ED6A97910BAA4B9435F706D1C44139C
B79AAEC9DC673C9F180BFB8D66CA8CE71CE3E84D7B77D65D423D0263A4E45306
E0646863CAEFE1DD07EFAFB9C0229B562017C979A8B2C95DF751A861565EF6F1
EF22E1DE92C4515C8A5673B23AE113B27C840C2A5C22FB0CAAB9C88D9FC47262
724BC9A9A578B3BC9DB5CB1B44B1BD592D434C6A40ACE8349123EFE3513D141C
31DD7109BCA7E9D83EB2967864508357A1401A456A310532D16EAA27D66C10D2
1AA88BD8E49C55BC1B68C60B75E2F3010CC15E819B9D6F09BC62E0B00A93FCF8
7163199C3E19E8142BCDB7579DC67E8DFE3EEFA96E8ABB5CFD28CA18CD9013B8
425CA573546B97FE15F640911E342A125982936B54E14F2D87C33D002B9869CB
C177BD7D99E0ABA1EBF44D7C496CD9CDAE093B74A454F11AF9AB265445B1B28D
923E4EFBC52BE2AE157BA062086CAF2EA14B0C75E8E5D87BFAD63D91F1056A41
B007AF081136D50948561FF5E7C65A4BE490FA6577D5C87A08B6F333E1C2EEAB
C20A070A604794599CD605D3A0B3369005E3FE2921D32022B8FC8E22DCB5AF19
19C4F3EE314D0F09A5DC24D41FDD14AC7B7034E207FD3BEBEFF03973685DD97F
036BD60D4E316A865DACED6F47059CEEBBB988E953AC22110E3366B93603B2B0
A8CDA0B452409C8C765E4F4CC0F2544D7E72C14127A27B4B7E6C306F51B9F6DE
F9B5D3F20879DF13EDCC1F4943BD62EB9AE82FB51E7BAF5E238FBA0F27720497
CC1439AB311604C7573677EB149C38DB0E2BFEED19396B72A26F7C5BFB146E5B
38643081A91DA1D968D3C7C68165EF09AFDA587B09E521D96E58A9E2F58E923F
CD2EF1FA3284186CC6BA6A41105AF4BE60E0FE5C1E463A3BA3AB5D13CB050010
6B9ED5D16E0B45FDCB6775C886406DCE772F4B24C9343E42C3D897DE532796B4
2E8B6BB4C4A2D4DD9AD8A3E4F85B69429085C453279987D169D535E487C20BB5
3D87CEF1C564E90FEA605DC6AEC7D3FE1B8542C6AB92BD3F909E6D8E33EE92C3
F5C3905C1C3257153F687ADDBEBECDCE5D5144613798CBF687F2ABA3FCF75F7E
BA48FB20B41C838045FCC8E3D582A3A35DCB72CCEFB6270BE052F658087D5C67
D702AEBF0B8AD51121D5D0686F0EC0E5329D621ACC21AA586257CB49B3ABDAB5
FE6DED172EBBCAC68218092F4480C7CEABCA44AF2E62C8A2C7CBB362ED6571E7
BE314685A1B6CAC416821BC06936B979A3C1B854317B64E8D558F15D8B89B0B7
C62F58C1E729F224EC05FB4EC009EF48E7E56CA369F9C0C632D8FB9D752C15D7
DCE35C0616D2AB62148C73AC7C079EAFF922CB7CDD5F4A783115A6438E26C04E
25D310D9E3553DE260FFD590BEDC71CA9AD4AC12B098EADC4339B1552C248BEC
00A15EA0644E6EA0B2D2FC4729CEE3874CDD4ED921463C0A12389EC9A25555EF
5E6B4F5F7905A91173BC23B3D1657C9E8DCBDAB522E1F4A99F194E744ADF4A63
3D9A257753C55B22E5A7D1DABF78ED1ABC113A4110B17E7A2D7E4D7B9F3C55F1
9F4663A78EB081B3C938D07FC7C596429076AF0E8834E0A9D16C4DD8309085AA
D4C782B78A35CE8DBE0A290BAD0885D35B2CC9AB6FC6D10AF305373E1B87A5E4
62AD7A71280FB152DE49D65F468A51513C6C0C4E7C73BD8E43A845AE2C108D72
84E514F58BFEF59AC638DAA66BDBAF071B000BAA41F4BD73AFCE72BB50260661
0206D020115CAD36A50DBB526053ACC5C0FF6206B2953C9350E57657B3728CB2
8412EC053B76295C62743C6E640BF62620A76D2C40B75214CF6CAC749486C2EB
98B5C918F0139932876C65DE0CEB089401871C26C7DDFC5D5CBEEAE249871AC3
8F1658C756F9CFD8FDE80E495150D14546AD2314D025295172435BF4F490AAEF
2FBA46A4A07CD5622A67C4F09D8C07C2E3E0745ECDCE77D328B1D96A0CACA7DC
161769068A94AA7B4D9FA64FE24E480F8CAEE64A02890FEB06AB59B3A519F57A
A785B3391F9355F74CD2351AF9690C9469C84B6C55AE734229625C964C5B35F1
41AB733C6DAD3C20BF4C061D7029C0F8C58566D6FD1DED9D5E4B2B6DAD6A19F8
F0894C659A61F005C6FCE1A0E970036F5F642DE1E3AC0A662937874153DA92EA
F57D6D9CAACC8FF6B31609AC2AF79ABC77A6717A1AECF7A8190680364C8EC229
ACD941918B6554DFF02340FDD61392BE9B0452796DA3D81E94B79A2965D63753
EA5B10491A203C94C3D07BD7BCE91BB83992C45710ED1D59C50642A0CC1CF140
FC696BE86B702102D7FD9E0BA2EA50B07C5DA1221A96218CBA86DC8B9DFDD6E4
0CC6D9AEDD701FF0D0F2E44D4469F390804B9039E21F1AFC9380F26571E3B2CF
8FFB2066D6F8D2701298CC9FDA7928F99CA135B6980455638B441CF1E7447E0D
79362FB4D7D3DEE02F5A89B11E1963015A8035A9BF1DA3F832114E67896323A3
64B37798D531BABE8865E8D3B7640F59B5C07D2CCA6C0BEC68A85AC51DCB5719
82706F101B216B4AF3523974378454CCAE6ED037138B3294CD515DB323465DEA
95A929C8EF90C2F356C40059012FA7ED8D85A93D8FE2BCAFD3B62E325E493D7A
642A63F8C286FC69F1DE5A80C4C8B981AC887CACEBEB622B2E1CA5CF16CF357C
BAA6B894DAA2D41877D1902E2C12EB0C7BBAD9D0E9CA6A557359E8A213276496
D02DA951336995D2DE6BE506F7CADABDB3E88987AEDACA045F663A3C778D20B6
52D4C20EC662F2781858A1BF355FFE11B5C1EED745EC9843DE6274B66B04A5E7
4CC3409440737FCCF58A9899769EBE684B749A17A621440E42355BC95CCC2164
85429D48A4A0586058DFD60DF2C7C96B0A969C6ECB58F8CCA98524AE18876BA2
C8C875CD212E6BC289D87F1E08E6EA810D7009159F1163623ED58922C2D185B8
0B478DA643F3EBED3ABC74F322606A94470FC8ABFD342B6906A5399825EC884C
FCA6DBCFA3711FC47CD0A0B1342AB1D8CD714C4A4D49D97B1C1A63025D2261A9
87048B8DAC71B17769AAB13BF63F27AF18CEDF9A16487327DC3CAC470BC33A67
3DDC4423BD1946FF5CD5A93E1EF62EEA51B201D3B14BF47757260996B103E77B
80A9643541BFA570DFD8F4C41F743CAB40A76A25CB7A543B33ADFBBBEC29E29C
F2347AA6E819890634496E91133C49BB85A6ACCD867561C9675B8A9C00B5BD80
6A94BE6EFB28733CE39CF390D8ABDE4AB15F3CD7A544AA4A74BE19F45CD466FC
F191E7EA641EA38659F905FF7E29BBBA2C52EE0385F33690BDADA2B0D5367265
A0F6F9D726CB2CD81B49A9F47C12FF76284D3B0E4AA5403149E46F78BB6AC81D
E809BFBCF8A569CFE3CB562F9FF563441C51E317A1C20944C84C955F1A89A134
74CD0B2B0BD44F9515593C1E7C135233EFBDACB6C76BC2B8CAB15E072F4D80E6
FA1492BDE59F46CA026F44DD608069997CDED15C68243F7EAE1026C16AE0AB3F
B9D1DEFC6D8A110710DDA85C1C163C513D25B9264E3890A559355E4AF324E6C8
18F612F8B4655058AF93C2AE5D96AEFE024E4521C755D34B49654CA7AC01EC05
50084F4A904DF4D734347F11DCA2502FBCBF32161D54A462A9B39BA191F804E2
4C582927E6F48151E720E33CA846C5DF85D00483F7A3D5741EB51E3EBC641AE2
0B324996DD00246CE562A162AE5CFF0CDDA4763AAFF2692126B4FAD56A6D7DD5
435CF699EFFC1E7C2FF53F19060E6B43DFBF32E30E6933244B839FA71A9FCF98
F4F9501DCF69FCD2451835DC1F3DA652834955472F18F480491EB93BA36FA490
10B5BFBE8D380ABE4CDD74110BD6BA8C25ECCF8DBEDA19EF89C36481229891A6
896896EABA373495457EA4409116426E8103DDAFD22E571B4CB13CCB6CACEE03
99915306DA25FAAD0615A216362437636B18E83E6FD6CD003FCEE108DFE5B296
64487F6DAFA63CF029261D0202650EB370F940BAE239D44DFC4ACDEAAE35EFAD
BB58ED706A189D0C954FF3EEA9C631135686B061B09C4BC213B13A8AC0F22CDB
3F7E9F8BE834F74ACDB59493C8EC4122BA1FB8EF956CB9B99E3F22458F76ED92
6229F613C2D20AB3ED46752A98B508FBCDC00E3F6E1658C134D080C5EEAA1B81
BA9256C1F2D9E2EC0AACA3347D0AA62394F8417DE903CEA643F806269105CFB6
EB420AF315F0C61BC0C63EFF738E0CD0C5C96AB24902E1D23DBF7538D7A2D646
078C22F4E1DE5F12CE65244FB26443481FFA84E5A580C214699B3D4A639656F1
2C7EEC2E99E92B32F1D88FD23CF092C5A60A6F7ED44EECD87A1BFF2600398BED
517392F9B8A458D5DC490172B4F2301019FD6B3FC418EE9E2906B9336A904D50
6C85470436B32F8323AEF18BB2725747DDE0708149B3C59E6975DA9A4814A573
2C3F837EFAD7995C65B47D6C81C08D6FDD3204DD656436AD6194408AD11DDE03
C45631E47113261BE95F2EEBED6C9DDC1D2D26EFB54FC4DCE037ABA4029604FE
656B2E96BC17352EEDB150632276BC39BD69D7047E9DAD1E8BE9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
99974BE93A89999F153727432CFA9D0FEB17D073C904F5426F7148BB8FA709AF
1344271173529372ACDD21882003FDC5DA687CFA43C0D1856C461F97C7AEDE13
08C661A0312C0A930453867D1BDA0D5AE27DE83943B84072FB99578B80935885
6E4E99B28E138E2DB585CAA3CC5056C324BAA2C7919C7E116629E963F00FB88D
12C7B187FC10B4C71E24BCFED96E689908E9D864BE3DDF19BB3922F86224D004
E35AB8A8F503F391632AB92FE41DB9E794630D674AC5510E1A233D02A00DAF51
B816178B4A639FCABFF4EC3BCC994CE1FD48E705F80B009ACC13C7DF2EDF2C3F
52D34947E0964D0E8E89F6043C0D2C9A4ADF9422879682A8D0D249CDBAB31345
F45FCE242025991536E174784D21CA938B31D8127B9B6462C898A3A3E77B061E
721B992A9FC9C9E460A62C80FC2A395F302DF32395A029F7CFAEC61194397D4F
36743FDA257F5BC8DC009E94281EE90448387DC65F1B6E5D964834D39F64F6D8
69729A22714A5F0E7DB43CE31215A0DEACBB95D7D86174295CB49AC66E224B32
478EEF14B427BAEE583F82C3B8E6D1DCB67230EFF3F206ECA7D35A79B6D617CD
92A1702B10B0E40E16407433FC9A216DC7AFCE1C5C7B2113AFDD907A17868AAC
F3226F7700A65F3469CF89213BDFFC5F1C26E1774F200A5CB8D7EDBF8D085F08
A490121616E6A89F524CF7E9EC16ABA1805BFFEB4DE8100A966F457050E356F2
216D58A02D0343E76D0552827DA03147024D605E2D021855769031EA15C1CAF1
A47E569A48CB4193904CD450286613C9A925DD73C4C95C7973EEBF1E197FD5A4
3EF0BB732AC06C381F7B842AFC59DFEB9F2CD9452CF89BA16E5EC1E16F206873
F9817505C2E449112DC5C3C2C8FD7D537F9884A1B726C7481CB54DFEC01D96FB
D7D076357FD85F26EEF6C10AAC0E89A61DD3FADFBC43552E075CF52E6F149345
C500DADAC14A4271358133833A505F8549AFE87D9E1FB63B8D9682C2144D7877
6B1A1D36B43A7DFCF5FB138400165597F7E064724F0DB92AD6442393E4D67B47
58249035E05E21EFA8AF51BF06EA53C4CA7EA1C1D0DF8B24B993243BD5A6ECBB
A19755C85371FC39C88EC838D41D58EEEA33957679755C4CBD2D05F9A170FC26
9B792E8CF7A042EB1E1A331B3E883E490A8B71BAD600D899D91052FD830EEED0
090BD9A658969B3BA995F1D6868BFE9F953BF0CEB4FF3FD6C2207B1A429577D5
D9D66A0F8268D4AAEB2CFAE48987D716DCFB6FAFBEAA28B0A27F096F99C841C6
747DBD57A449D7BA28B98BF4F729BD36137E834E03EA621BB4E92AF0B9183F25
0A60A7950B3939DD770974B74EA711E2AAD16B3B24C608A5AD2E75440B4FAD19
E015D656659A14AC21316C183F9C1A3AC7F42D1767C2A15B10005DAF108ED84B
38AE432E26D07AEA271F903D7956DC1AAEBA4E0C1139E3F29A74CCF7D97749A9
25E0B59636E8A685B991F9CFD68586B37C24BFB42BB7DDD62F63483C3A5A4C99
3290AE8C069E0217311606744A28C6CDECBAB299B856C408D28D6E9C0927AF99
8EF72647740B1538B976C4056DFB27F053921193C59DB289A4188A919DD01F66
D7743E3C1CB6D013DE4A201A150213ABBBB26A1D57BC83E8E043427C28A2C0F3
5944FC6DDD919708DF5D93FD74122FBE17C022F4A4A7B04F4036B0208B8639C3
FA5869C72C13AC5E8C97D029EC39EF3B0356C7D6AB6BE4CC712DE34D904A4937
142CAC4E1A66E8E5F7CD48415DDB8B9B0D8D847664C29F8BB65B115E46DCD4C1
6C9C1BA0E3A080CB1E4463CB90DC8A841CD8A6797EA54E421638DD01C76A507B
F7B12C4126F62D11AB45A7BE864399444976F34F301F29BA4C8D85C255A2E1DA
E2DC10C08D45B0926739D960D4614B51D997DA5811CD45687A6F2FF214F2CBB5
8922F050B2116E28E36C4EB109A128CC5606A8A5EDBA41A62E7E74D859493AF9
F83295BD84714488E548F642CAEE34B742B052ECF5E8BB058C036D0517074988
DFA995563B8E9FD2378EC78AE71D0A4EC6220EE0D9436BDFDD49FDAE75FCDEFF
3F08E2A73F0204CBD6CA0D8040C3287761E54228CC345D7C5AD72C7EB3C42AA3
540C1CD4250600581E061573D68D729FEF72720840A205589809B75542EAF6CA
2CAEE117313C66EF1C56CD1A07BDC2EA398F97AE8DC81463B6EB76250CDBE461
FEC4C2E0BEF643BFDF588DF93B6925100D074E11C6D2880423B430ED3BC56480
C6961D4C4C4FD241EB727D31A47273D575C8D6CB46D3A904810C8A2370F4DB0B
95DE9F7CC68AE064ED9168357A5B6AB898B25FFC0ABEF43FC3D0EBDE2CFA57C6
450A6EA03F60DCE93729098B15814D6B8741CBF12A4E818A46C98482D55F7C99
AB2826331340347A9523F719A36BC457EBDDCEC1B3C150D80C8F17A6BA4CD7BF
56A6A10D6C8CA00FBEFDD7F70AC8B02D34669FDB22C41B0DE90F56634C83478A
9101671F4637AE61246DF5E024406C0132D296352E5524AAF53671ED0D841106
70483EFE13BCB89E89FC8688D988C68A2F65C6E8D8541274CDC40D332113F621
02BFE91D7D802FB65F4066B638056F697BA89C4DBFFEB0480B72EC09A99E8463
84818A44E541E4E108DFE5E1E1E70468C51E3313D057DEE8E8AB8DDCC0064FF0
FE0E3668867D0207BD48FE8067168C4412FC80CDBA62F8B19A7F63D287B55C07
0BC7250F889152DB29A99B4DBC1EB940A743A9FE7D4393C65279014BDE76C221
06CA436D6334D0960B0EF0C116A96A4D934D0D15FA88CD2ECD441297EF5AE62D
CFB82C50EC9EFD3DB2AFCF4C308C9E0CEBA0DC32DE58928B59A875DAD61C76F5
CDD4EC5A43193CB175499A088196A877CFF424F99584BFB274C4D22103873FFE
C15DB13D437C2923BF8C7EC3D3B49DCC34333F190CAF9FBB9BF6FBD49BB67E0D
942F8A6C4128F6548B04DE5F31C9B8DD5270A72725DB46EA6B672C3C04BB8F91
448917C5B7C0486172439C132B32E829D10EA96B023AE7FCC667A5B810B66551
9E7E1450E00BB9D0279C938A7693E6DE5304D99F1DD333991B18E0EDDA172586
E0CA03915F269B7B231F5D9B1F61DF7CB03421C5F463E52BE71493D9F365FDD0
9268906EF9FD12D949C7221DA7B7286A4364A8CE71574F2DEA72E061762B22C9
602406636A67B0061808B1AA8A9F4E87C682601AB378DCE3244F4822CE24ED64
38F2103F4EEAECD38BB01B2C6F44A95769D762FDC1622DF8D7621812685D7D15
3D0960692F216E76CB6598DFD42AA22CFB939A914FB803C324817FE1B3F9CE0F
253FB6800D5D6BB753CFB933FB9303AC193DD5102E8DB6FFC8039417A0D61750
E1EE624DDF01F20F74ADBE880B8E044E4662EF0AF221544DE5DDC61DFC0CDB4F
148BDAFA2B81DFADD8E946FA4ACA6F2440D85B2F21076B58A9D69B6A72F68743
A3C4DC4D7CD5BAFAD896B5C11F9C826DD1B4D5A1763C560F54AB4521EAB14A38
B3D504EE78BE77AB036D3DF8249C4B1B0A47FD386222462A476A1F590B805B34
FF465AB2A6DD504A9B6AD381DF9BE7062DCA91768C2C9CB6EE2741F28F26C0F4
A25C9FE3110CEABF5CE69F5813A5220097640011752A93E4D914E347D87F9428
15288234D8A66AC0A17AFEF782500AE15B9882BDC14A6567C19ABE55F8186365
B30A348A5CE99930FA1EE2C24693E3CC7275ED0C46468A6220EB4F768148C131
B26525D173F07ADFE2C2AAF32AA66F95FC45A1D4C5B764583A99748056B896A2
7FF97F4A54B9279511CC1700DA348283522B5AEC490A066D109936494B8E802A
47C2278F2BD50DE2A806B0D7FAF791412B2932A59B9D4E948DAFC6D574A33B9C
E67A5639E34BDC1F36369D82D571ABF7BDD14C79D796556DEFD53B3460FFD306
4DD668D016CD47C8D086A4C9BA264829CBBC7A5231DAE2BB997196CD7EE878F9
29BB0ED1195074A3E588B7B102BF86D1B7DDE8B8CF9BA862B647A3EA8CD18BDA
92EAF57D6D9CAAC6DB5A1326B7A7A5FE7216BCE081EF42F0846374B50FFEE469
6F43EA64F9E1ADF4363E6DF22BA29E867F335A49E0EF3E8050A97238F88827E7
5E2F51339FAD5776CBFBF9564ECA75A4130B81E97C2A9BC215A2E2A34BEB5AC2
E03F378F895969C0737C423361DBA528C6A3F1C26410DDBE0B9749C1033BF3AF
51455B475EC9692E9E99F6AA38068B592F31D9B197F8CEAD85820F5853DF9144
7D1D75AA9EF8EFD1BC7FE7E72CCF3A8D3A429D9AC37D5804BDD0272DD876BA28
29A4D55D365AFCFBEEB35AD055FA0517F2D2FC8B6C4CACD47A917B8CD1827922
BF5BB090A4EC89F79D44C61496065334A06143D6FA33885C9B9C1F407E314A83
705E9D91A2FBE40D45B43CE00941BF17DC81E6D392AD188FCA5ED5CC9D1A8CF9
027A5F84AE6F94A7A9860D694705C9FF3140A3CFB2BC5B409DF1132C941B1CB8
A8CB6EA47F3B1F8BB5B13D7B90A4F95E5402E4F3BA1BEBB828671CC95C76A862
35A3B3D49A74847FBBD8C379F90BDE98CB15B4BA24624E146098A7CC2A61AE64
01D1CF9D5D199E5F7FE96792D64F46123FDD5E8AEC6C81142096A7719209AD32
26D3C07F56A4A43758955263E315DE98F222CD610262EFFADDBBE389FC860F83
93272BA0082132345D6A3A253C967BD0C31C81544F49D54A45AE6D370441DE97
11BA3E39071E140D6246849EDF70EF99B1C95A296106DE15CF1B4D71AECC1602
F35D0F54F815D0B0AD37CA58CE08B25D36363F9D608C27E76C984E054CE25800
DD25631C8F220590FC0B3326C12523D372BEA69688A21D6EAF601ED4810E5F23
82E6421B44C297B1935A3A5DE94E8681FC68428090B031C784A1C4DBF2811D2A
5440E30E79AEA3845BB352B48CA98954123ECF3A49397E241F49FB97F33B3BA1
51BDAF9223BFFC63A514AF6BF4AE2B867B9CF1B3A1795C43485D8916D491301D
6F8F9E8864D2E7440A64DACB0B2451EC633967352C75105A1222751EDFBB3E8B
7294D1F09CCD005B187D8321A0A21D2271C7FAD646EC17D3541F568D68DF1CCA
64E069D10DE577C4E43F0E4BBC02BD21A8155A2B4C4BFBEF1E1A860AC2A2F2D2
5C1BCBDBF41C7F6C7A104D3408735BB8ABADFD4F58075F2E4A779D2FA9092D9F
909889BB5F3286E69430D36A5D1279E6A34F12312900526B412117FA7BC81CA4
B50CBAD741F9A7BB165EBD0FDE48DB7E771B5D8C1AD361B5F0E0EA0FDF3DA763
B492483C51D41076C0FE99D988D612DEBF7EF2EE08F27E984ADFC4099E1610A8
F1ACBC0DFE56DEF39B8B02FA0753A44EC9E581AE3691C027FB01BEDE9F707388
DF38CF6194AF036EB3090451311D2E0315E7E1395E30C203AE45CFE7B03662E0
43AC2782BED875914A2FB34F00055D90094EB79BF159A65B012A2EACFC2FD63A
267649FA6204D5078361834AC6C0217AC49887C1D629A1DCB56890F59FF4143E
D2E3259641AF153D7D485F9524F380E2D981F02DE8123781C31E557D56A54FD3
546FA8CB381E57D7B00FCF5F246C5AFD97D7F7DAEBF8092CCC6996DCEE3CBFD5
DB2D469ECBDD4D11C29B962A65FB081E5579799B6BD986A2913E3B917EDF3D43
F47C6F53ED6507127625D2616C2571B6413523BE590AF5861B23087D24A5279A
DB5D3E324BD82032C26CB397130A14BAAF83C2654FF93DA635A7D396C260CF35
2978C9A212A715FD9FEF3D177FAAFB09A394030891BE348CD673DC3B1859B9B6
88634C2FE683703F6DB868C99D999B7A43FF4664419C551FE21D2AF6FD54B8C1
63882EC4A5F0B9477E6F64C0AA0C5F1ED2BC24B77548F1E510C8107FFFC9AF46
1DF6E344FB6FFA16DC77B781EF0554E909D03C8E716505830E4391AA5074CDBC
73175C2B1B8835590CEA6A16E993261B6B73BC61EC9CC7B9F5F4DFC8345A1023
33C67F1ADE0BF892F79B30340EAD8536B5221769E060E6EB754F8E89B075418D
032D7BD972EDFD0F731A0FCE134A886C645E9E28195FB50BC27AF8E0736F27A4
FC47E0F66B1018EB89CA320F74C91902C5659B3282FD226B1369975F6276B34A
7453D932AE04BA8AA9F9AA09793C8A74DA25396CBC1484DB565607911498A3BF
C7D348B097477DF8C6C324CCCF965C397AF1B7F3E4F5EE5D5BAE73131662CFFF
5E427A5F5DBB56FE1FC9CBE32B420D2DEE2C6D4ABF100A811C890C3C91643A8A
53788A9C22D0A826B9354EC870F36CF092940706707E96E484D91E56CE2440A5
8D277753A4D9D6A7E2A9CF11AA607229781D1E47E62384F43D892585597CB66F
5CCC388350CE9E6CCDD4233EC7D5B8DFADB5303CD0D839FFDEEF5697146F66B9
C5BFA5415ED1D6DC627CB8D85DDFC4881196B77BF70874462D6D951BC54D61D6
DEF2B38ADAF10609835D1B428F0698672E74AD08ED8280668AEBDEEC0B3691FD
A05AF2A4A5208DDE862922A8F80A0DD8B36675E83371DDD080429EC0C757B0FD
0A10AC1127B4E7D18ADDEF5FFE63A9B90839DA788E47008109D48C9B54C23D6F
7DE57D9852BC5A0C2F3175F55ED104E4DD2E5737B6583580231B6C010F91CB9D
8204F0C5D2E96F447E8CD23B3F1329E1F01CC38E2E3B71C5E962B170365409C1
8D0019453B405172FC71D2A71C5E47E6EE3B813136F26CF1BECF1D09D623B86D
1EE6616AEC4DEEAF2899107FD5EFB2533C4974AAB0514B3BE35B72E214974B2B
275CDC9CAE7B507C0A23A81B120B3C03CA447409D52B998AFCEC2BF71E56683E
D07FC2972286F2B152BE1F52E47D6BDD0DCD828F689B472DD3A862C1D10BEF7F
E76CCC335F6DDBADAA9B42ACD27B08A12DDDA2501C6655411A4DF2DF658F42D3
55F5A25C9FE3110CEABF5CE69F5813A5220097640011752B40B126EC55D57B5D
C09C95C9AE4B4EF735A5414D985A62E94E1F4E6D6FFE6BE23910E7F181D048F2
38829D4659F9F94A66186C177501453CD3FE3582073DD86F0444B48E889765C4
A31A899598D22EA55DE76735D3C2DABA09BCFDE53B3B31226325A27C50FC5068
5C434D4EF1B629D27EB716ECD75C6A6CAF0F0FB5F6A73A47FFFB9D65C024FFBD
6E3C668B0368241FB6E2148252F67A3160AF55FA2C0DCA22B640D87E79D24C2B
8F38438B6E4F142F1B11498ECE0255C8C4126287BD22FEB768221AD59991FAA7
880EECE2D624A0A5EEF780CEABD8C958BE3A49E2FDF8D4AA59D7B64AD40E0E8B
0D19951515A6EF4DF74A19A285D91DBAA8F8DE600D7A0506B431F2E6897F39AC
F8A272B27279036B72C900F6DCE1C04FAA4D893D3A456BD7CACC91A2805DE4D0
637913EE6EF6D06F8E219B516A58424304BEE4FDCAFE4E203DC7EC6CE32D227A
9535336BBCD370455A98A239D58B788D47EF32CCEA3A2705ED87D9FE5B4FE8DC
01D8F622ECFE3FA7C32B54A527889BB7F4D8EE4C10D079E09DD0A803251DC175
E7ACB31F8F7E44C211331156DC39DACA22420A2B9ED27C588AC0481EEC679572
9C8D6F0483F604EE345E522AFD19F8C5F8942F156ECC4E82D4CF8E6F87B2A2DA
FC69673E1FBC69A9DBA9510E58CAA7D129FF4957E6012DA8F7EEA4D82CEDB95B
1A738E62B64B42242C18F5BCEF3BBC0BBCD814B6D595F7C8662B9D0DCEDCB3D6
B3E6F306EC12F62263C8465320B2FCC6CA510D1697AC1FF0A19C372A973580B7
3318307CADDC2C3309492ACE6391AAA927CEE7302BC04F829462FD9FA614F46F
ED6BEA7123ACBEAC04EDAE551CBE68E84519D138C233FED4D1C715EEB9CF08C2
BAD47CA484F64080B76D7947EFF8304CEC542EE86C72A3EF8A138E760F424157
4033C78F3378218FF74CCFA54911ACD0FF16FEF122729B6E985FA28CB2282797
BEC19164512C80D1C6E8822B8F54C5E4837E04E871870BCEE93570EF9F95FA36
EB42FD653E61511A0914283F6EEB26FD0ADA6AF173221076CFDCEC914EB62BCE
11C180060557B45DC9615555BC5CA5FE986AE6E0D12D3286D03DCB55AA7896A2
7400FC27E0BADD73CAD08A5909DF66C49523AB41242F1D916ED69D1B7FB6EFA3
FF86FD92A9101B9377C16A41AD9D29D5AB7DC23CFEFEF554F55883D5717EE627
8FB49F6EAD48DBA338B09BA48867117694133A3248571E032FA87046115B7083
074679F9696E5F3C75320B4A2FB4C322929A703A21EE0DA25A70DA5CBE51E28C
EF57925D0526B51B63AC5634E23EF8DF5C2BFBFBE1AC5D6FC9C26BF9FF97477F
8C211E8F809577AB8678D40C3B58D8A7F65D9BA49E0247C2743765D2C4C8834B
E9EC41F48EE50AF6797489236880AFE04015C23F84FD75CB36F23C0BEA5C55AD
278CA8D557E10FE7EF2DF8E4523812293ACACFD6DE95DCD9B3C55884C9F15BD9
566477F456E539542672B0D2AF645AAFB49EBC1DFF4721707ACC1E45E4D50FA5
D878A7BD6CAB5CCFC38F89BC0440F5934ABBD4AE34AC857443E951A14347DA90
1FFA923157FB455E128DC8BB985C3F3E02C1DB22ED2A8FDF0E16BA13E4A36F92
147E38CD27171877780F729FF7E73259966B461435FF38987CDD4CD5F214B58E
8BEDDA84A6665F8C59C1A2F11A4F507FADCC056E26B322D378208A379C221931
72318686ED9E447F8E185F5FA7482BB98AE62920864D9D3FDDCC52D8891C13C1
0C46463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4D7BC9435C59250E09A0
722970B560097CA8B45C55E1BD82C91514A006458A52B68E702ED7D3CFD31F6D
7E24EA10DF01F1DAB166058080D42F90499B415AD8AAFD99AAA8871ABDE24AAB
F7BF07C8C599F051F8181FA2DA8EB455B18A52BB24A71B15D09CB758C1B414B0
3D92674B7560396BC1061EA7062E1616C58AD50B99310A0DAF0C0770E9D7AC8A
23E53D9E640BA6D2C2D5C7681ABEC649ACA69D0E99761E066F7FCA3E57C46F3F
924AD3D83219C2845714E47D092A699F1B16C8ED115437A8EA8CD328F5F117F1
FBB3826AACF4489BE80CB7BF3C1C1ECC1076061E7F691E1AE571B2C372FD96C8
B7E21FB1441A82533965BEDF79FF1E8C00E7541B2DB7C9E5641428336BB88D5F
5FDEEFEDFB47D236F1DF488EA9100D499A87C0AD162C6FEAD5C3BEA1E7044636
F7D3BAD00C9938DA2463A68F7DC63E035056CDBBB9F4DB89659D42B100853BCB
D6BC9E4E22BC98381243A4DA9CD095F34269A0B2804359636AFC66AFB8F4EE72
F16F4A83FD3B6F7C02C8ED058A88C1659CC291CD5DF9CCDE6DA0FD3C77D56D06
3AD44B8A89A25C0FF5F0D840032F95D39F257C5FFEFDF1E30B0BA6FAEB418BF5
FC0965BF7B274782C8D608698A04F0B7111FE96A25738A5FE7D15D283886D8B4
550D5216A8FE037832517908F58E5E195CE4291709DDECF28AD24A0B808CCAE3
3228E1E6E2034652553A03E1341025B4F3A89DDD4F132248742876953526D119
551A8B29CCFE9D96CA2A3A3F8D082AC5C1C0427AD24E2C9976490B46BC865176
06AE4A6A86F7EECC222CA705C035DC49777BD7BAF02030586958C707F0205C3F
9872476833B252DE228DC16311866856D9CE093F651CCB5D86A162EB80205547
24E50B6D68148DE8830830C374D6FD6BC149DE1D1DCF655BC753054E1A5ECE20
913D3B458713583686ED9CEBFE67B5886008F1F2634C3706C594349F1E95F04A
C983CF03C2E5656DD9F88D7E5B9F1E6134534A315CF6372F7E1801EED5F0D5A1
66C0D6545888308B44C75D9E7AECF5EACA5A433EAA684798E24F49EE47885176
2DBCD2B287C854F77FCADE8149571FEFBC840BD375490CA2CB1F4257D8894876
F46A2A4BAC73AD3C0FD804C49181CC7B07919B918511D079AE85F0F152088362
E431D578E1183534590D81873D531DF4FB838434FC4B7205820506D3ACCC2365
0C429AF024EF5EC2592A32E90CF70EF4A7E154488B4CBF91F7B8E3AC3C742EB2
F38C4CACFF62DD11C4A09589514739523752C2764531F3545D0A6C5266169D0B
6EF07098D4E97FEBA8C650810E23D6351C7E634F1986DF0C8DB362171EE6945F
7B3B383BD93111D717FB17BE687DC0C5D496402627FB963A90B3C438EFB1B28E
1B41C74CAECABF8616AD95FD9ED3B11C918BB38D13CBDFF82F3B9D3F19A09784
794753076928F9867BDE8EB447AFDB4A9588B2A62F130235C0BAE2D41513B3EB
2F3D856FDB91167A89F2C736DE82F77A6D8F10A45FDA866F6CD50908B89BA754
66127A0DB5F4A5A1D91B228142F2C51E8635EC99CF31C670AC326493BFE78A4B
3D18007C9ED89200DDB63772D73C36E0280F8ACDDBDE5CD4F5AF1DE686C92C60
EA329075C30D3F97A3214A4789336021A13BCE67DCCD4E73F9288693726BB1E0
D39DC3EE5407927B4356D3C2DD059D73A1F8086340A0CD4248B15C0C9868D62F
DDDC616ADC7E9F13E6B8A5628C9C3332663141B4F38D76A281E581B4391D0FCA
41838CEB488F12EE7EB8E5DF3744C86A1FE55F5369B12A05851331961B2C9C5E
3D6FE3C16131FF2A0FE6279AD6383238F60ABC7E58984FEAB4F519600668E48B
E0C7A590D6C817424F936A8BE5790068FFF31F92595FE56D439417455C5DF15F
0235701E2B0F63F82670E3F91BF29C0C9F2304325772ED5FB05B53E1B9BDC776
BFBE74BBC7DD92D941DD65BC57CAFA473DD7934595BD999C3A31DA2377FC5BF6
6519A32FFDA24456666C28476F9C08001CA1508B0EDD5C3F25C679F654F27464
C3E04E4B15FA6FE9D0EF916A1C5B601EE32B2425551E7F03D504F27BF98F90DB
C75FB4D500197D7542BC10E7F9CF2FDDFE83B006FE1A6D13CA78F12FED8382CD
07F6B122872E6A35F12379B1113D1575C738F9573334D07FEEE0594095712FAA
FDF0A13E3C6DB63AB1FD8647270B7E6AB646A70F51417FC07D5966E78E81A32B
EE7006163F27C153000E975E7513D0156D204A5E7D9E558D3F664D554AD0EC18
66268A8C63765FE029DBF1679DCB876202622263FC8D03B9E94241A3360ADFFE
8A45C3BBD11D72BA01798903DFFA60F6AC17790D90019B108DE3495306C998EE
B3A70D1E4575718CF2D37E0BD03AF71BAE6A930CD02B6C4D07D6D0998EA18FF2
7712A01938185F1DEE52D5F739D1CFDD9459D56F76A912F026E3EB3CFC4B3FEA
9A6F16870BD097080BF269D863393D1001A05D4C79BF703F773E575A74386DEB
BB24B26C0CF51784DA23C2D29311C4F82514DCF27C6B9104EAF182B0746F03A8
29573C79648B3F5FDC321715AF8D71EEA43D61A73E72A9B12E19EB6F94A50C01
C3739357138C4ECBA4CC50F8131D570FF2C9540CDE769503A916B913F8DD6257
49018A1EC19C7B47A86BDA04DD10EB46B197832A05A92D139A80ECA6D61BE7D2
0CA2217589437951A38B8E2EF94ED05EFF8A627F8F4947E30E0D1A1AFDF374AA
EBFE99BCDFD32EB647D987E1423804454CCA81CD0C910FE12D8CD6A6C6A3E4A1
518E2BCDF099DB2E92810943D04AC52679ED7C3B66FBE5CEC1281F96765BF340
836605EDAD3970BFDD1E7200FE6F7730D33F25E0079C16AC6B98DEB87EA38223
83813E9284A50ECBC165AD4CBF2A115403A2E98751715251D4CF99D8DB478851
1738B976C4056DFB27F053921193C59DB289A4188F9BF2927EA35B8E19688E34
7F3F9356111575D04F9AABBC9C3B8186EE2454E318F5CC571A951409B0E69BB7
A5E8EE10C4838A45A08EA3FEC1B88AE0F6576384D456A060B2222EDD152AD19C
307118AC0086653521EA59D673BA0338DD5210568759D8B715E4E8722259218D
7B8DBAC62186EB73EEDFD49DE426BAE93C7065B09977A242A3AB0CA4FFA1AB01
96CF0B21F0851081A26969E75BF024C760B363D2BF1952AEEEAB9AD39C857EBA
17FEA216B107BE6A86E0A700BDE9F57448C205D6CB67FC2F45D3667CF37FDC2B
9D64684E50A322FE625BC7D1AFB7A7ED9F8B0D76FAC83B213333DAE658B40320
7D2824F6E97E8C4605DBFCD5E9907E38EB02257D7F32DDC1190AF61B71450ACB
BE9055293B5878339F2AC0A1EA53C1373763DF6FC859C21C7ED769E57608B34E
65A38D5E0D698D57462F56001050958C69140F1F2C1AA25026527B2EF907D230
614B355E9E71CAAF5A17D5598D8E8BB772EF73E44DBD2025DA44D48E34BC3857
80B837367A712F7A57D062A130FD9E69AC60D04886D1063742D723EB1C06B948
E8E87BFAFC1FEBE6722104D834D413E8CCEC1D4BA23F1743B682957E3442485C
F2E497BE8AE40E7F5F783714FEA6A1260363C23854E958D05EC0626BD6F367FD
211F74338A7CDF33AB3D45654D54C837EDB06438F453324581610CBB2716A0A1
5521CFBCF3BDA6B5BD673BE8DC07AECBCB8CFD41D054B08B9AD11A4F25CE3652
A01C703364F32767D000AE87A0F2AB99689F12B25A7E3E92666F39EB0ED97653
4DB8F4AA0999D7052483C3BDD1D4A10454C25ED80C2F016A43350F0034B1CFEC
671B7F820C3865AEEC07CB4E8CBD1B1EF055DBB7929E9666F539079840AD26AC
B978FA258589761269DE4ECE20439A36701FABA44C1B305B1F5E9A50B663197B
240EB0C8F8015652CFED3635316BE978283483A75CC2A9B9DC6FE5EADD862D04
8648F1023A144FC9A92EF64316C17490D211BA00D51F1A8763A2BA6393F883A3
706676889F27D014343426798FC96E84910E5B6A592D6436394E6DC8B70AA9BC
BD30ECB9F26968CFFE7BE7AA6CD61869B6296E0B94895A2BD4CE3558843E3C91
6D4B5C43BD60F9878296C744289B531198BF429B46221987A70CB299A24DC07A
7026EBE9E2D290B1EEDFE0322838AAD2F71A4293AA2DBC0254FBF5D937372278
CD89425AC6A92C397293BA19E9B52F29C4A4A908677E909606528BCB29BFF3C7
91E3BF0F9F31D79095F8A0D322C981E3B2E06519C7BB9CE2EA09B49109257898
F10E3984F41B0E12B0671C56A9954133742897C4222189BDBA157084C01DF850
82BFBA76B75940225CC49F8ADC9719B7A49FA1F2289DD87226613E47B8BFB72F
BFF8F8732569D27F2EF6155340BF25F1078274AD4EF78A38BD1A4A651B99B5BF
6C19F7433025C2F680A514EE489ADED2FEBB929B25B03C86E28AA7DC6442283D
AC449E42E412A262B63142B00AC3CAF64C6081792D0E25D6E50BDB237B68F22A
E46401C7BCC66D07D1031C842CB235FDA04B7516AC1982CA70926B67D1F01D57
92A583F927973A4E418D1EA445A5651759AC87FACBE49C158A1BA9348C2EDFB1
6653FBC453A358288526015A039C007328672EE557B3BDE09E22E74C6EA8DE72
F9B70C7A7BFA1D374B946AB8F5E0116E8003AABF952A7009726483D1A0CD2914
3BF2F4BA8A2334AC6721A7BF786737346D90FCF80298BE914F2870FB5C366301
810A1BA5590BE394DD7E4CB544D0FE53AA49EDEBFF11FE2B7375A65977755895
4E2E9FDF2B08721C9073FBFB6DB15CEEE083F7C218D5F9645D2BF1C1AABA9EC7
EDF7FDBF0275744CB3345E21E50EF6BE6A922AC4D848C6F462710BF6CE399F39
289E8E9B07B1CC42F2A1E8A00279CA0B423548B37C4202975EF0842D48F5509B
549F87E5E03541216095AD9A211CCC5EA0627BDFAC00E4D6A4BA3BBF195632DD
232BA1F2F74D390544D821B6A6B845CB855A61ABCDE73627D0C3A81A6644B7C1
2D5AC3CA8DC607E618B3E5E929B78680C7C229F5140D0B98341339A5470B4C89
E24C9D75381B434F729F7934CBA23B5A181AA5B60EDCF5B16D2457F2696182C2
DB0937949A564D4487EB05297392A1373DC709DEA299D4A6039BBF02B59DA790
3EB695333742BA9F19475976933B742305066D1656493996A2A6290B88B275FB
979CB5494CD195A1DB0345D5822CB94B4252B18B2E8AE45DAB0A4848457A4215
2F9BCF7C4A5E7EA9A3ECD9E35FAFD646078C22F4E1DEE3DC9EA6EEA8664DE4DF
51310CE5872572413E3E1E9AB063D79F4AA8297588956BB26BDDE39F7FB8626A
3F07788055DAA16825730886CB3C82C4B7E7970C5137E4C289500EA8867E5721
7F9533EF1C7A352753BDDD42F7E084A11E1631794721EFA8B6111A91C27B5CC6
216334CEF8A65431DDE58EAE47F2970DF2CD3B5C524D39A666A68D672998D349
D4B7BF503602C21AC370204B8504FB88BA15B7DFF3BD741E3FF0F0543D1067A9
AA939ADE975C80C4626D6BFE9FDA94629BD5C21F48C2302AD7DDC579F682066F
685F9C0A123D141A762B948DED6C44828FBFBF98843FD61AAC4452EE1993D1C0
7EB52F3849F14FD66B8A34A64B53A37CF300EE30BE1C6AC04A223C4F40C139AB
899A11677D2AD87703FD1ED23A51E8C687101F5E8CC0196782A3830F8B8EA235
7ECDE00DE6568B1EF1068CBC29B57D60379231D097416D90BA4D11F7A27D1BF2
B0DA47BF43D8054BF06ADF8C7AED8653E29BE2F38D6B49F23587575D9167E1B3
81D57E0566341D225723A96091CF9A2758D145119526B2C3D294FA26FF1D3965
B4AF656419C47FC2A27A04448B7C4E0655C8FA2515B03811844776157BAAB8C7
8E9ECFDDDE7F42128EAE3004F46894726393E9EAA689EBC39EA345CDF83CACD2
D870186012B054DD503C52AA8A07127BE1AA3359A90834F4A5C6383BCCD082F7
2F8BAFF44F6397A65272902A535CC136845E2DA2BB0901057993FCC20F752A75
5B688EA1EAFB24CB6F6B21ADBFA71306309AF098A7F4D1C7812DB76A6F85C692
1052A5231A8463A87F6CCD8D292429E77967362176B3FEC966A93ACD70379095
429620F48A23EBCEBE33CB4D75004E655C3E149CB917BD2FEFAC03FC04968C98
4D2F3C870E40BFE9EE15D5F17FD8FC44EA7FF95725B8ECDD921EB803C8B73C47
6FF45FA1A1CF898FED9400082942A5C533BBC5342091744EB5AF7CF0ED017EC5
D9EDB93D121B912F50AB9ED5D4D7857FA703F285716388E7B23653E0063E0C15
FDB7D763FCFC95483BB2A0279ECDF1387960FB843E1A31E4F20296F2B4608AAB
D0519DC68B52DF7F950CE1BDB15548CAD879752198F4520F1336E30CA4C05B15
32C6D15624A83CB86FC4DABD3AA57CB3A0749412DBBE8555BCC1C9301918B98C
B305CB7ADE4619505809407145D7148F40B8FA1D9F0DF6228880CAA283448C7F
F5400BFA745C859192C2623460AFF8DEAF29347797F3FE7F4D056A5EB03C786F
5F9808102C7305CC9754FF0F25A13DAD43A3C03E19EB41B5DA8803B1F6A6AB34
58B5F6AAFC52236076B33FDA0CEDD4748F0B4E53446BCBA20A54145B1D18878E
CCBA371E58E5AB8B09939B106C80C72356E9EEE3C0574F8BB8E45C87FEC12B05
6671150AFD9FA614F46FED6BECEC4EC257B44CD3C84C2A44189A2A90426C07F6
703B4E5955455F1027A249EEAD5580BB3D24651664E84B70E96446690B051BD5
EAFFC3CBC07187392D22FFE55A492E2F5C0DE5FC59B74C19F6098ABC5B76A93C
AAA010C0DB4A7BDF84E9BE1AEE698E29A0CEEC14AE195F079D65F4243C1EB639
0F18E35C273970D6225B3B7FFBCDE780C1A10E87A0997CFFE8041C647F6D238E
1E2B91399AC0742D661C8D6BA1F46086F30D0BDFE5F57243AB565E65DC5CD6FF
B3B06D271356EEAC673FD6B94354DAAA29F26C04F9CA7779F5065BC9AB5CFD9F
86253ADB37FA874126F2328BB5C862797939508F61B7F8AF8007B3F27A59BCB4
96D250F462BC4D5D7FFB0E0BF61CD3E498473FE31D550423A55371863FF8F8EF
DA998B2496C56B3EBFB0D44338E878A0CCC7E485B0815063C21CB9E201B0B656
0118DDC0E3977B1B9ACDDB8B8DD810F1BECEA343AA35361E183DAD9BF77B432E
3603391B9D3F8EC639145274CAC1DC808E54FA8D521F842A9410A0895DF75E18
20109BF9296C681BB34DFC847994B0639D860F9B40A030596193BA5C06EFAEA6
313E62E70EC9BEF8C45609358A6AF6EB49474FE6289109FB4B754EB4CB28BE15
8C9C2102A3C381186F39ABF5F90E52A284053108EEA8926153A9612F5FFA5A47
4ED0ABB961F6629B9FAEC2285AB1919AF5B321D1550C15C0E4AD2245D110C248
5C08BA815A5229BCF5EDF3C8D421F534BAC0DF1314A938570312AF59EF11C8D8
B762D1D7E7B41D01DD738F63D427AC072C83C23FA7DC593B5BF0F8FC037654D5
58120D81B2C762F43837CFDEF3AC2B5EFBBCC69D29BCA0CF6D3F2EC2BB96D821
5E6CD6743DE962C65DF23C51C111D3847FCFA48857C0C613DF501477E2C7E822
493A637E055EFB165093E904545A26E9C5B2E7983696709BAF0F79B6FFD29420
D0F578D9AC9A67822050EF0ED3670733331432ED8C17CBCD4D36A0C9AA083823
1127DA909629BF4B6E62BA85793DD6BC24CB0DB2E867943C9BFABAB5FE62EF13
E78F6E18E6B4B602B90DB896D63580EAF9399B7638C44BCE93EEFF072CC8BC84
0BD375490CA2CA54ABFD0532153D5C6216D9C9385A18202E78D9E7ABAD9F9430
D37CFA2641D68424F6116358289E55798A5E5B01052586C2EEB7A7EE29E05B81
2486844D2EA853F66589C91256B11E15A27F6E3235C0F550556BB685C2C15E14
CD6EF05104109AF261CED6E33BFFDECF8AE2857BC2A864120F4E37C4812EB625
9E2A96C0238912226D571DA22135D42CAE4159CCFE773D9ADE8A25C3C962840D
A5731F1555A56F4C8FA2D0D7F069B10D869A415C8CD6AEE8A4EDFF8A9D221F96
0AF6873D8046AED36A8B2DBE4CE8693298DD28FCC65476A821FB9F157911E60B
FC3989F3AF813902BAA1E989E1BDDAE154F44D5D6057E1F2EB413797B60D3956
7D61B9FE6689E9B549CA6290F7EA7727CA70F0B5BB2937C004F4691EB43B42EE
F7DCD71EBCE91F5979A5F45D3C39C797CAF268CC072F36EF1232392C62591F15
9EB60B490854F94FB62D0B2C30C2F83A3AFC4A258159C424B359AFA87BDF0101
B9EB1A015ABB9A4F973F9BD2E324E8B75BAFA9E7D3CECC314DCC97DB7D26DE5A
FFF0B103E3C59BEAB947D42DA31107BC3625A830D855D778A8D07D4CAFAFCF11
281B9CB832EDB4C52A31E6C102236AA2514D461923B25CE6500A60AAD8F7A0F1
40AD2EA3AA6C50684EA6FBE357678D1B3EB2A32E2D9096FDEF370B4C22E3952C
DCB610F56E7FE04375081EB10F924C43A2BFEC536592EA879CDE6B7972F4C158
F799BF6209D2B777C13DEFAB9BBFFCB3FE9740C6D9FF8BD0743CCFE73E0B0F42
BEB8396D03C6ABD18F70784AFA77C88137E42846577F66B459169FE19DCF73C5
380BDDFD630F60A9558D53F1A8ED1232C425BB594E4362B73FA650EF4FF8665F
D677FFBB2243B8B8C9F484E25924DFD1086FD8903D08F32E72BD8AAC7C4B3586
34E404744FC5763A71B4525A4ACC84285AB2A9CC81CCF57216DF08C98EE86C72
DEA5214DB8B6CFEB267933C11865E2BC11307483441D2963D63961CF4DA91E37
A8D5922C9E5A8378A02AC76BD481F38DD868CD2BB26C911C37C0FBF3E566388A
D1F432E145223B1609F7BA76ACEED169DCF8D30800242461F6B4F277FF655817
D6502F270092C7EA469C1E8B537DD0F33582C9C29F8CD6E5FA33ED0BF51C31DD
7109BCA7E9DA91968B0D59E6CC257CB5621933DC5929F623CC2170D3B0AE37D8
197EA627089D71EAA4E103C8BF03E66F3D831F0E851DD736AE1E1636174399D9
E9174DD406F8353BC9520BDAE91726125C32B8BEB0D3107CA1AEE073345F2D7A
21C12DE00DEAC5AE04523538572DBD3AEF1A6D7B1B5EF35BD79F3811FA7BF788
D1C1CF4A6165B8EEBC64A83BDF4322929D8632C4BD136C89169D45718A88BABA
D33CF5041056A43F90D0E6A47C2521C1058E8C66894B819E3949DD3BF9F14F61
C0D2C711322A8F87BF7A118ED55DAA2C6DD59F4CB5511FBAE3C48B1B02C98798
499A21DE314735566203199DD5580E703CF30ABAE4631843F6A67CB0E7A37299
C66DA33C1B881AD5FA3CF92EABEF669C608F9FBFDF25D67799711048DD8CCE33
9CB2A61649727DE2ADDB423B67AFA3772B4B9303B1B444BFD0A63EF4E2BD69C5
BB80849B85FCC583ED6BC743C7AB0E8E057D5280C8337FA283BB4340DDEBC4D2
56E13F78F42DD090E3DFC435B3374F45AF41AA09126CC46D6C604DFA073D917D
ED24E2115D16B2E47E3DC85288B93BB635FF8D17B3A6B79CCC2CD8440BFCEBB8
5F434EEC721B16801477CD58675E2578A9CD6E1CECC57FEACEC6454D27EC4CCB
3B2FA7E676945E56923350BBAC0CF7CE13F17B3B50580475F3E95AB26CDE6158
3C22C615534E88BB52BF8174A36876D66694E3DFCCDD4A5F9EE70883FDE70497
56E9640390C353F464EAFB984ED9535EEF0550084F4700BA08876048521F937A
458A63396A578F021315479418D55BE75E39A579BDE6E17AD45505D3B4E64A8D
0B284AE4BF6B348FE702D99EC976714B5FE29DEAEF0BAA423EE5BBC09AD7EF03
CF8A2EFF52CAA34C7B703E7A2A5F565C7856FA2C8C10F6B6CF80898FAB4BADFE
E9ED0303C293A3FA9B9798C718E4EC9439CBE8DF6F9831B4A8E10DB5813FE24A
DAB4476AC74AB787434A9C2B2D6DEE5D2DA76EB2C3BC562E47D92CC7E2B9534D
519DA0B6E5B00FCBD0B09B0DFA58C4FEB4CEE6402C93F96C97232C6A1DC39AC4
52609BF24502548AA33E45BC27D76528CEBA5BB0E57C0077DEC8170187CDF780
CAF45A8E0C2D394A26B50F8BE6376F6B890F72473F24F37CDE6ED8050A9C99E9
CEA17B029DBF7A5233853C39BA13D032A7A28FD0AEDDF8F56FB5B0E0A11D7422
E36FAD0CE9BDB18838F2559DAF8AB831C68F5DE4CBA318052DEFF17F648F76D3
347EFE165DA0F18705723A5D49D049F420266F034B72EE3B707AFB2A58ABB230
D76693C8E5802D2FBD34ADBC0D48CE7D34DE62424577ABA7335BD2FACD8E7E4D
33D71E8F20CE02E1C0B25D9E59C14863D38148F0F7F963A4AFDAA2C9B47FF105
15793A51CC50822E4C68A807C1A3FBC4EB6399D26D2003B45B60BB1B6D62DA73
5DA6689C2C03F196ADC49384EEF820A7ABA051E8F097B3E33D1E180BCB0A7FD3
95927DA0EB4A84E947B055CF58D72D9AC8286E61664AC6793DCA0CD61D64CD73
965546EE3604093C37D11EBF858C691A46E94A4BBB826E41AB00E9A4C4D7424D
B242023290848EF811B4AA5D159A2C5B87CFA09CE0CB78AE44E64ED200494B8A
E9CB3B6F78899482D13780ADA4CF471D5A66BD297F621C92AA4FF0DBA776F5D2
EDEE607525D378208A379C22193172318686ED9E447F8E185A5046D5719BE51E
A4DED86D7A4B06AE62A2771727EDE4E84DB5A5B214C02A57BB9900E406B2FC13
BE715ECE49E188F16B462F43BDDD82AE26C15514D9F737AAA983AC3CD79CD4D9
DC24016F24F83BC35B20A3830596416B12F33EF1A6135906E470A79D2D91C6B8
5DE5CE7F9445ED474F10D0A7A3E62BFA12665ADC33831D41389DEEBE735CE28E
E4ABC81450157CB7DDACCB72A0FB511A3D7593E7F5A0D4B7460BFEB0A6E596B3
2BB3D9CB6078A6246FDCB066462F565ACA8F04A64B3291120EA337B9DBD15602
7AFFF2CC6E569080EB4A4B067974DA0F2E607E94CE2B91AF20265921411E2608
1ADC30B47F91282ED81532B19D0EFE83937474321B7E4C63295997DD487BC38A
3538ED70E86F742C3B5D9421E2AF8F2412E78CA82F8884F6E22B464FE65352F5
6E7855F2F7BC4465E4E326CAAB10E5D87BF544A251D3DD4624EAF581EA956649
BE501E6439DF0F29069DB93EEA16716151F6E7C6101A21B9ADD7B363AAEF5CA4
DAFFE8A664640167C5CCA67411B1268371424254D4C9A08B1281718B43FF2976
FB3D148D0E8DA1449E581DC27BEA9D73FB41CD594E9FDECA7817AE2B293114B0
7A729355B1CA0918D0D1149D298C63AC26EEF70CFE84B3BFFA10EA4B6F450108
90C45CB9FB0D893F79F3230443D11313D6EBB9369F515EABA02F60389E94F86A
AAF2B7E9E315B157F8BDBA26B43457DE2C383BB4B4EFDCD3ECF2CDF5279948B8
2AF9065569C883B2E36700C8349ED535233EF0D6C6994A706CAE1612F0923AE2
E5112A3981352080812070738B14999869877BDE311C5E00E0AF68D568CDA22B
8B3B5D84B2FEE1227963A10A9779482295E688FD30061BB530145F2262E6CFD9
06727C4D3B371C1129D876D837E25A5B909DF458512013C74769E497F5F92813
7A8437C97401626DF593F477A0F179C4069C064B109161520C5D9CAED67D9869
D7CC5684BE0ADB2842C95420D5D1048DC87D9F8BBF3A28847AFE8A99CC3199B7
D64576D44A44F108ACDA4E402DBB7F245AA757A20C03DC8C8D45926594AD9E19
14F083F5590540D0F0913C17AA7AD7AFA44AA82E79C80D5B79E38D0551EFB1A6
9F82A8E56D439417455C5DF33AAC7202F91D76B565BC0A760A0DE668232978D1
FC46AE74E93F0E25F67D484BEC4772FE0C3A034DB693BC8269103850CB1607E0
BE0021FADC3A3B78EB77D57F2542783DC7BF04A22D3834C9B6F6E99D660D8269
5536609FB8CEDA2DE760A98868ACB45CCC8CC2370FE267830B7F1CC44793F22D
21EA39CC104695A06D169F15B92FB1556BF040CB1A2E88CBF064796261654AAD
FFC21A7377FB9CBCCE3FD4E9C75A824F521C69F2786AD0B68F19B1489F0ADEEF
68329D5CAE9EFC75DC15A9494E876104FB399F31303F61A695B20B65DB5CC404
B62D98C1FA9752250CA140F5535D6AF761F437E074AC111838A2837E1A914E82
7690BF7B6E45B4F8674A6FA270F14B4944F274E36083CD370CE208AAC25A0E32
F30EADF2050B71A79AD2EB52D196EEFFF2D9E6B8CE8CF9F32866ADCA85FAC933
FC1B9A96FDF0798A4397FC6B28F7DFB72F5895A6BC923EC73E8E36D4F76E939E
A1AD6F863FB2BD7313C8EAEA632391A5468FAF34DD5BA7BE8FB6006E84F279BF
31306C49F3798B6EF587D4C7BEAD90EC607C7859E3BB9796D0AE2F3A12590ABD
F99E5E63A8FB317626ED6085BA9295B443108356B2C941307933945F052757D0
4AC12050093B5BC70574DCD9B6A0297ADE74569C15471B56DA4425317A8D8DDE
3450CC30F037242EA8FCBFA18974700FAB750E41B77997BB57C3923321C9D354
EDF48D537DA47285A073A8183732577DE94ADB70CEB5E6744F7BFBBB3ECF535E
C546A8CD9E1D5DCDC5F03905A1032A6357D249AFBCF651BE1ED1687A01278F81
AED807AA94182D44236D8BE271D65F3C02E04F1E0A0BBCC08B4F97C39BF203B6
CD2358EDC2B117E3046FDBF67CBA4B3F228231F02D812A9B494EBA7C40428092
43B8C0B13F5F5D88044A8E852381042B9A9E06D1DBA11B2169FE6393EAE0E90E
7FF7BC2333D4E0215D5201E38D80F3D2B6E1F9E731B65CE2E494105CEF4DB198
311C3818FFA9AEE2D5698AAB06BA7D020D07A55CD7712D6990B2278A56D6FF7B
81E0138892EA81F60586C124C0DEA24FF992C9EC6817CD828E6DB40B763C95A5
B1362AA0FF7F75C323BBCB449331623D15EADA75A1B75432FA207701239E2875
AD434486947FDA956E5DE161B8DECC065CAE2939F99BDF7D2DAEB9186B9F6438
AB8FAA7956D34CCBAD35DBB4AEF2054421E951E7EBB86605F30BCF8E570B4341
C3751A10FE6C3304EB18FECFFDEB4AD90CD971AE3E3A107949E0133671E9A9A0
6607EDD972B07CB644B4E1CA766F19FDDAD7999D4C6D2155C07518C027E39913
25D0F2D8DA38371B463A5BF3CB44044625B5863BB09F2D2E49EC313FAE1D5F0A
F243C01C1EFD3262B711994EE7815D92C1D6151D1ED9674D90D614E5C88C16C9
2401CBEA5732C69BAB87EE22128CD933CC42A9C8492C628F50E3885C00D662DA
E00DB129315B1F5EF4D847CE7B282DDE82B7A8680B90D545372F636791A76A1C
BB4158F4C98E3DBE31795D5CC4E2A3F21E2D336F7CE5C383F28BB5CAF7497D46
D286CEEFBB71E57F70E9EDD479DE21D36FC0DABE94C0C332A009D7C51513610F
B670A220DE6576603ABC28CFDC81E41B8AB1123729DF3D047F8C04BFB925DB62
69B62522E8E26E48E8AF9234275859828FCE45BFE060CEEB80167DB7A7983B0C
3D72F8F8B9E9AF0AA08867F04D4049A6FC4941091666241125457C9223404D30
D6C17BEB76A166263EA996610253A72E63479DBFE0FB8041A873898332BC1C31
0A5557C1E0913B055F591F8F2E8A74B365795F7141B961444D6D9A1149B1BE96
3A3237C7A488381A17E7FF53CD4740BD31A9BDA29B8D036473E7C5FF6EB74EE7
BFC4BB9903C3A52BC4DD75B203A7B04921F0B535C669D8B24B56C64477D22818
1C863A4D48BCF4A4D901C8CE3AC152DAC431CC1EF45E7241D4FAF394D14F4872
A43D0B4A4E8DBB6F049C331EA174787ABA8C3EBCA6A4A7AFAF624E66E374AAEB
6D371130CBE4C5A0CB74BF1B5AE9D770F8BABF1AE471DA2362995EA9F3E0902D
375208067EEB68C6101A90C235679195FB197996371F4CF2448E33DCE4F756CB
95EA4C2F9F4541B4ACFE9CA666C46C7DAD33C3370FDBD15FDBA7AB5C630936D5
5C95571926E78F8ECDD33756619AF59ACB9D17A3ABEAA6C652186D66E1819807
118332CDDC0D88E7CC1CA9CD67F3BF4F3FC78DC2B0D19BC1490311150931AED3
497ABAA74303D3F702146B997B7696988A9F2B3AC897A10789DA53D2DF651102
0A41A1067BAD45E3F4249A2C47AEF01C7BDF629D99291A68D9297DA94D1A852C
F306101C7D563C43EBA24F31765CE08C1F7C77D61A9DE10664F4BF13E2B8014A
047C572BA8BE7D6136C56B289D8E66A4AD0D7458BF23919A885A0A4AA26F19F8
348EC62189B42297868AD55BF4F5F1B4DE109C3E06915E3461C79E71BD7FE5E5
237F9DB4BC957F62A653018E98A03B7268517394AEC07A73FE5B2E565CFA592C
54A42801A142883EBF015FA81FBE65D8D2152B6DF94E62408E2495277F7D130E
194FD1311E237AD9D33C3502C91CE960963E31DE70A24F1B774730AB14A11811
116C45649029E8664B1EF5856534B80E1124A8B509559F8D4DFEF81A9B1FA762
109D5886BF9CE95E9AB686C2455D7C0DD3BB0AB14C9FC65A584CBD3C65762BC2
7DCC65C774E5244912470606D852A39CBBE5E41177FCA249DF9D95D5D24C4B6B
2795D94BDEB015C731EDFF8318226D4929EE7C9DC63EA8F9780763E889B13FB2
BAAC283C0D9B15E42D787630EAE357FB446F74859507590586CB0E015C09C0B8
0658940279ECFDE314BC8E0B6DCF92380606C967D2C7AEF96871F5A379CAA95E
1C0E27A79F0C71AB70C258B7DE3E72A9F81F10F370328FE5C14938666C7B0A7B
10F10DA7017B72F57DC4971A485BBE3978C61612C29069BEA6501185A68F72F1
33ECA0374D72CBAFD975D0DC807CC8F99277423F13EF485DCBAC1D41B43A8F01
2AB51A2839A6AA5109885F46BFF8F4C77C6C64C6A977F2AB65B7BDC9F704E15D
8F7E4DE009307129C0401F6573B2715D375CD401A944BC1D1015FD6A95C3F464
74D3ADD3D4F7BD5C89F7E958B584298DC6830F31E286355D0346CD9F59A3E701
96ED37E6BE3262D1AFBA823DAF06C1EC2FB01B6A5F8ADB04BA524DECE34673BD
76353E66F8A268857C7C013561FCE2D5CC58CFB186696DB034E3379E270AD661
DCC7CF1FBCDA4786F5B6A729F0134B20AF4A0E1A6665AC061224F46C8EE81AEF
ECB5313980D24F7702F478B38C812123B3EFE57CCBA8C540B2E1016C422FCFC2
2D86B42FF91FCE7E06435BB294023285AA900C42B6FF44225684B50FC56691BB
3A1D226C2E053906562580E279574CA2D0D6853BF7855ACD326D3405D97CDE79
C1EF39456D89187358C5A1E7B2B36E46818A3C6EC2C9ED0CC9861ADD632F10FA
1AC51B5B4094EBE618DD463BE72AF1223D0690DDB88C7DA9D59148324E7F3267
6B5F479D1E570285A7EBEBCA8B41DA51BB13197DA88941EB3AEF357FFD458071
7C0F7D1EF847F353BE43C8CB65EF220B912149A342974F5591D22BACEBB94FF5
664A8B29A07AF0C8BA954FF5FAD579FEEA94BED0241E39A771747F79A79D9BFE
199645598181DDF46A74AC94A09D60E190C548172D2E1D8F21295E671DB9068B
E9FE976507B85F26B9252AD7B574C8411044B0C62F58C1E729F224EC05FB4EC0
09EF48E7E56CA36D32F3CB897AE1DEF890B7294168C39592C74D17AC945E31E6
85C67F73B1786DF4ED7FDD5B2A6C5097EC50C4C4664163C2AC415BCB83023D23
3714C8195F99F5CC3C06275D8BE44233E4E54C8C0255CA77AAA035608BB2F0ED
9D300841AF0F3A67E1E6093BE6DCB400BDF8C5B29B2183DF69931B83B3329DDD
D044BD3C3C36FABC9898C627775ED237569345F676ECF81AC3D3C4CBF9F6CD7D
353EBEC92ABE626E27CE9E77ADEC0E7269A77424650CDD34146A426F99C9ED0F
F1BCA5AACA56B620A894351D75B4E7686EA3F3B79124A9E47F4F5A8A15D697DF
7E5483790A57205CA02817E893DF04072B5D76AFE97A87CF71BFAF23D8DA2E2B
5202ADE986B4B00DFF04207C0D5E50634A4D508D1C8B788F491C937843051E66
26CB05F32CBBB7ECA41BF11E2EDC39FF4DBC037FDEEC19CFB7C2081551676F33
296704D41973F487D4C1B50A848F2E8C0A77E7FEE479B45D9EEC232E5A1E7030
1EA5201EEFAAEE178CD13A271817C9199521DA6B008853A9233AB0689882BAE8
E3D7B474EFAD513CFE9712A378B73A598E2E26B11AD0247997CC824F55F98CE5
C578A52FF470E124B6A09DF7D5B607DC6C0B52D99ECCF89764E3718CF5AAD7E2
2767BEE398AEE276B5FF364A289222E6D4251DF41E0518AFB7C79C38D887CA82
AC039F77FE328DEBD99FBB5F38002808AD770E69AAA5573E583DC4723879A056
B8D446EE178BCCABFC182D6EE4DC748DAF271377FA7A0BCB4347558B30CD028F
66EA4B989C3C4AD7B0390C75E1D7F4D8AEF12216376F866938CF2D23227DD5C8
FCABD5318914F8894306C36B4AD3CE5337D93C16F16320058C27D0736321D6DF
CE2013392F1D2C64B72A178A1E5DB96501794C672DEF027067018D4C3B2BB18D
19BE86BAB8F5ED008E18C99D5B7394BF1FC7D06D3917BF9D6CEC3A003AD97E76
99B0D9D02F1B51F3C6DF69AFF6382387ABBCF9845D7927EA76255F12BBC3799D
494419DB2AB83D1377E1D5BCA57EA9F738912EDF4315EDC61FE8A2CDD3F5477B
7C100C82E82FAEC0BBEA7AEF08EAF99A45ECED9B0651A8A70127A7B6D6928D63
93D854FB49DEB37BEC0234C59554B5FBA3A1C5FA644F2EE53EB07B1806A9137D
B417D7AB84F57D855A697253686196617974C72FB893305D4CB1D936D0DD331B
54A02B253B3CA8C7DA7F18748E4D1AA785D33B93DBBCFA351166A58494F3E95C
C117E21AA4E3A42C7E69DA6CEBD01779B45F75E26EDFB90DA95B5899C9FE409D
491DB422E2CF3EDEDDFD719276D25B1F67A774D6DE23B4AE10F280D6BE439132
F1712CB1BC050DE2A0E17C4310523B30CCA643C7EF85361F25C8B259B082B92D
137F81811DBECAF88A2C7656440F5AD9F1B9761008469ECF365D32C6CAEF1DC3
3E471E1EEDED7DBAD6C2DC672BF913ED44A41A2D1A1CD0ED67AA944C09B40371
89A20F648D0C3B410F7B04357BAD96655142D4181F030A25DB943E49C2269703
789BC034F527E214FA6357E9754F125FA40C3BB93408AF10B507D856F8C42261
7BE29C1DBF22EC4DBB721AB78CCD6AC6F5459953D1D7D1872FF1F99DC1251FA8
EDFCF7D35ECE088B3ACA4E03A3CF8C5DFF4132151E1300915D6AD3929A0F9117
F420C72F0B98FFEA8975977FEDD0B47CEDFDDC127244ECE3A3762DFF4EC57C01
38AE5277D577417F17BB5F05E7989CBBC604FFCA18F18485B0DDB14A9CE52B2B
C3CFD181277D371765E3F5FE73B7D1E30B5FAAAC860B567466240E3A598E0D31
B4BBA740CAD47361466817B10C94D1EBF9CA1FBE120BD59E708A364F23BB90F4
C2DD17352573C90177484F7E742B00B7C92F1B93B5E8689F2965CCFBCA090FDC
33F885179DAE71D90171C17C909C106FFC54EFC06F76C5128203F99E12BDC973
8BECBAE100F273E0DD044A7D9951C17D92F939DC46C3FED2CD47C10B2AA23F61
C474BFE99F10CBCA243AAFDC47B12781A0613CFF9805301B654DCA1E56599A8E
ED5E1C0CBD1FAD8197990742748E618CF2578AFD525EEC0459B60B417DF52C33
1B842800436425689AF57EA283EE09BB7136CE91766404A8A40E22DC5D7C9411
13A26CE046907BA5E6C2CD6063225001812692DA5D82D7085C540614DD882127
7A971E57E272B6EBC2F52F5B62AE93D1B5D2F7D5CB0FFBAEF319A2D7629E430B
05E92825FE5DE22AFDF257B630C07C1A0FF02AA3493184CB852D6F4E8E109B3B
6A75C62A6ED2B7CCEFD1F8DD43E4D83E0E2150253A1766099FB8D7C2B026B313
98E815141B932A672AF411FC2DA2B5C32311CECBB3E0F96E31F2BD408CEE64D4
57FFCBE41CAEA21568A13EFC32CB13701EB058F897232907DB5B12DB8888FFDD
12367E0B650D73C9ECAFD58B3ECE71BA4413B7974B2D74203407E3E47AE09B08
B7BD688F21AE393E787199ACBAEA8FF64EA1D0314C24318B643DF4D4E6DC8DB3
1A72E7FD6FB3C32521E31CED06207AD64554E3E3B250C3207F709593A5EB2FAD
F3CE925F8AE5C8343F9F706EE55D037312DAF4D8AB318866E1BF08478982A5EF
B9C8975A110B20AA2CFEA18BCA3654FC7423BAA5B49F6EA481B8CC68B5D4F0F1
A64B0BDD0229A2B37F52018C67EDDB6AA754B77CB48D54BFB0203470CBD4809D
B89232EB3C8810909D3C042FFB9F870174F4D1BF70926A846660E2C0BD6D736F
B447AED8F424ABD606FD4510AFF88622ECBD88141D1AFAE885A29AF4167BB372
BF0ABD0F8BE986F07045EEAB9529206D98D0DAD65505F12E1FCC629409506ED5
AECD859D9A22AFB02E05DFAD519D0D149734DB8B842975C6EFE286B6BAC51935
CBF64925CD1CDFAD45A714FBD79D0D3C436D1B3F05CE93B6A9FD835918220BBA
E9B11B05A624D2BE3686858F65EB42748157477B2357B18C5916E42D2BB93884
0A70ECE682F6804EE58D956296C04E4EE90DDB840C9B59311C8BDC38688A1211
C53A86C222EB641515DC3E1E04680F8CC4B6C6ED237568D5D7EC2423D057D4E1
25C1AEA79D6BACC0A4E23C0F133241F0FA7769D1BD117CE846712EF16760F8B8
D710B9EC7590C31F3D853E14F28FE0BDA8554DFED8FC5B2C3E8CB7611FE90415
75ADBAA5BB95AB1451234F4859B941A5B54DA70F4B89C46F48C03C2E972FCD6D
93097074CE206F5E2ADC10F837E67A2697283376F93C96BC32755411DE1B3CD9
B8F39C68EC3A2910848B0B3FF9E45A9552728241662C117FA1446F808942B3B1
2A017B1A07131759D6A9CF94AA713F1A13CC9D47B9AAB2B83C332A05A6CC5310
ECA24348D92F21BA48CF2B98A25BA780B5DF84602579BB139030D272851781A9
4A759A52DABC55A7ADEE75F64D7424CB8175A7D98B780464EC3ED213765DC893
CDE2DCB46CC25FCF5A5CA21B34EED420F638EBC01AF351FEF45E27D296807F22
E2EAC786C7F4751D15D11F80C12323C183D49509A0702570F53AD494842130EE
1BA48C38EDB3AC3447D27D9EAD7AA90C4EA84EC1B66FB0209278A49BA809B11C
63C5010DA3AAF548B09B475D3AF367496E3460437F58C5DF6847EAC579D67B66
53CD0FFAB5B672D83E8117420D9EBFBE2F454A9796B11A254E7A00CC47D70584
A6EF2FA2D4E0AFB598BDECF642BD63C7D3CF3C83410D8E0FA0FBB31A16F65C87
61C637DD2665AC9AB4FC66B684E83FCD540417FEE01D6E3E6DF0D2F3E7581073
6251BEF530F62B67C3FF9836CE2364B6A07C7E22EF163B5F4F713CD3CD70216F
CDA30F57234D64498C41C3C10D800C883C6CAB149FFEC8CBFCAEA29684DB541D
8D299C5CE09437E0B0B5917C5D293AEE7794B02126E8D0D3189A7C4F9354DC90
0685CED8BD3888154551437E188A44B9239ADBBC9FAFF31B9D394A95C33B3337
C6A6CAD180902058693A7036D710B3551C0D52B4E443E7D820A26065FBB9A796
AD2042FF336908AF7B578288527D894A7BE889AF60E00D7AE33B2C7D757C046F
8ACDBDEEF3A97B6B95599FD0CCA2DE8B00E8228A034C171AEFC48F7E755210FC
751CC7384A872E8A9E9AA52BB0080172FB96FBB2034CECF9C3AD2A530499CD3D
AF865B15DECA7A7430A5EADA85C8CD43EA53ED6DCDA75A3A18CE5D92C85F2A9F
4D6B320B1DD7D20FF3427943E38CC770055673AF0D63DC5B265AC748ECC1238B
1F036D8825AEC4A825BE52EC4A91B3A68D54A31B0DF271562B45616F007683FF
F45D0B415012D71DE48471F68993F979EBAE10F9DA2A81F542E87A46BE6E154B
A679839EF2F332331C92E4F50BB2C5FE083C760134FEA9891F8C6319BDDB8CC3
19BC879CA2E63F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/A)
@start /Fa 254[369 1[{ enclmmathsy ReEncodeFont }1 1328.35
/LMMathSymbols10-Regular rf /Fb 162[361 1[361 31[361
10[650 4[1012 1[506 506 38[1084 1[{ enclmrm ReEncodeFont }8
1328.35 /LMRoman12-Regular rf /Fc 150[320 2[452 102[{
 enclmmathit ReEncodeFont }2 885.568 /LMMathItalic8-Regular
rf /Fd 203[470 470 470 470 5[732 43[{ enclmrm ReEncodeFont }5
885.568 /LMRoman8-Regular rf /Fe 135[739 17[641 4[683
97[{ enclmmathit ReEncodeFont }3 1328.35 /LMMathItalic12-Regular
rf /Ff 177[830 12[830 12[553 2[553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fg 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fh 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fi 242[1594
13[{ enclmmathsy ReEncodeFont }1 1594.02 /LMMathSymbols10-Regular
rf /Fj 650 2[723 5[650 17[650 105[578 1[686 939 686 723
506 513 506 1[723 650 723 1084 361 686 397 361 723 650
397 578 723 578 723 650 10[975 1[939 723 957 1012 885
1[975 1[813 2[469 1[1021 849 885 993 1[921 975 14[650
650 1[650 361 434 361 2[506 506 6[361 3[723 1[759 27[{
 enclmec ReEncodeFont }54 1328.35 /LMRoman12-Regular
rf /Fk 27[1046 110[1196 837 849 879 3[1196 1793 598 1136
1[598 1[1076 1[982 1196 1[1196 1046 11[1654 1497 4[1616
1682 1[1293 2[801 2[1353 1412 2[1530 1625 12[1076 1[1076
1076 2[598 717 45[{ enclmec ReEncodeFont }30 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fk(AN)482
b(4.1)g(-)h(1)e(Erkl\344rung)g(des)h(b)60 b(estimm)-60
b(ten)480 b(In)-60 b(tegrals)482 b(-)g(L)-179 b(T)481
b(-)i(BIFIE)p 0 TeXcolorgray -741 4800 a Fj(1.)p 0 TeXcolorgray
651 w(Der)434 b(Begri\033)g(des)f(b)36 b(estimm)-36 b(ten)433
b(In)-36 b(tegrals)434 b(soll)g(erkl\344rt)g(w)-36 b(erden.)921
7346 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
9338 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 12828 y(Ein)504 b(b)36 b(estimm)-36
b(tes)504 b(In)-36 b(tegral)504 b(kann)g(als)p 20787
12828 3150 45 v 24408 12780 a(1)23936 12828 y Fi(\015)p
25530 12828 V 3654 w Fj(einer/eines)p 36054 12828 V 39676
12780 a(2)39204 12828 y Fi(\015)p 40798 12828 V 3654
w Fj(ge-)921 14820 y(deutet)432 b(w)-36 b(erden.)p 0
TeXcolorgray 0 TeXcolorgray 11046 16192 10114 45 v 11046
19277 45 3085 v 15778 17974 a(1)15306 18022 y Fi(\015)p
21115 19277 V 11046 19321 10114 45 v 11046 22580 45 3260
v 11755 21377 a Fj(Summe)p 18750 22580 V 19459 21283
a Fh(2)p 21115 22580 V 11046 22624 10114 45 v 11046 25884
45 3260 v 11755 24680 a Fj(Pro)36 b(dukt)p 18750 25884
V 19459 24586 a Fh(2)p 21115 25884 V 11046 25928 10114
45 v 11046 29187 45 3260 v 11755 27984 a Fj(Grenzw)-36
b(ert)p 18750 29187 V 1 0 0 TeXcolorrgb 19459 27889 a
Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 29187 V 11046 29231 10114 45 v 0 TeXcolorgray 0
TeXcolorgray 25658 16303 19678 45 v 25658 19387 45 3085
v 35171 18084 a Fj(2)34699 18132 y Fi(\015)p 45290 19387
V 25658 19432 19678 45 v 25658 22691 45 3260 v 26366
21488 a Fj(Grenzw)g(ertes)433 b(v)-36 b(on)433 b(Summen)p
42925 22691 V 43634 21393 a Fh(2)p 45290 22691 V 25658
22735 19678 45 v 25658 25994 45 3260 v 26366 24791 a
Fj(Summe)g(v)-36 b(on)434 b(Pro)36 b(dukten)p 42925 25994
V 1 0 0 TeXcolorrgb 43634 24697 a Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45290 25994 V 25658
26038 19678 45 v 25658 29298 45 3260 v 26366 28095 a
Fj(Pro)g(duktes)433 b(v)-36 b(on)434 b(Grenzw)-36 b(erten)p
42925 29298 V 43634 28000 a Fh(2)p 45290 29298 V 25658
29342 19678 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 33370 54804 45 v 0 TeXcolorgray
24746 81281 a Fj(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(AN)718 b(4.1)f(-)h(2)f(Un)-60
b(tersumme)716 b(-)i(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fj(2.)p 0 TeXcolorgray 651 w(Der)301 b(Graph)f(der)g(in)h
(der)g(nac)-36 b(hstehenden)299 b(Abbildung)h(dargestellten)h(F)-108
b(unktion)300 b Fe(f)443 b Fj(sc)-36 b(hlie\377t)921
6792 y(mit)434 b(der)f(x-A)-36 b(c)g(hse)433 b(im)h(1.)g(Quadran)-36
b(ten)432 b(ein)h(Fl\344c)-36 b(henst\374c)g(k.)p 0 TeXcolorgray
0 TeXcolorgray 5417 42967 a
 currentpoint currentpoint translate 1.491 1.491 scale neg exch neg
exch translate
 5417 42967 a 5851 42967 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.09673 a add def
/d 0.0 a add neg def /h 192.79927 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5851 42967 a 8549 40872 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.7259  0 -24.37082  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -24.37082
 189.7259  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.92738  def /maxTickline 173.87189  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 173.87189
0.0 -18.92738   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.7259
0.0 -24.37082 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 173.87189  0 -18.92738  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -18.92738
 173.87189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.37082  def /maxTickline 189.7259  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 173.87189
0.0 -18.92738   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.7259
0.0 -24.37082 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8549 40872 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 189.7259 173.87189 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8549 40872 a 8206 41158
a Fj(x)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  PutEnd  end
 8549 40872
a 8549 40872 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 0.0 0.0 pop 189.7259 173.87189 exch pop } PutCoor
PutBegin  end
 8549 40872 a
8549 40872 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 8549 40872 a 7501 41204 a Fj(f\(x\))8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  PutEnd  end
 8549 40872 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 0.0
0.0 28.45274 137.45935 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 28.45274
0.0 56.90549 120.83081 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 56.90549
0.0 85.35823 92.37807 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 85.35823
0.0 113.81097 52.10112 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8565431527821796 def /x1 6.668102607961151
def /dx x1 x sub 199 div def /F@pstplot (-0.207785768444865*x^(2.0)+0.03892884222432488*x+5.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8549 40872 a
tx@Dict begin  { 25.51004 -3.23444 } PutCoor PutBegin  end
 8549 40872 a 572 x Fe(x)9288 41643 y Fd(1)8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 54.0939 -3.79494 } PutCoor PutBegin  end
 8549 40872 a 572 x
Fe(x)9288 41643 y Fd(2)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 81.55634 -3.79494 } PutCoor PutBegin  end
 8549 40872 a 572 x Fe(x)9288 41643 y Fd(3)8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 110.1402 -2.11345 } PutCoor PutBegin  end
 8549 40872 a 572 x
Fe(x)9288 41643 y Fd(4)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 136.48164 -4.91592 } PutCoor PutBegin  end
 8549 40872 a 572 x Fj(a)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872
a 8549 40872 a
tx@Dict begin  { -10.35934 148.65099 } PutCoor PutBegin  end
 8549 40872 a -172 x Fc(f)8549 40872 y
tx@Dict begin  PutEnd  end

8549 40872 a 29551 42967 a
currentpoint initclip moveto
 29551 42967 a 5417 42967 a
 currentpoint currentpoint translate 1 1.491 div 1 1.491 div scale
neg exch neg exch translate

5417 42967 a 921 46951 a Fj(Der)1901 b(Inhalt)f(a)h(dieses)f(Fl\344c)
-36 b(henst\374c)g(ks)1900 b(kann)h(mit)f(dem)g(A)-36
b(usdruc)g(k)921 48943 y Fe(f)142 b Fb(\()p Fe(x)2949
49142 y Fd(1)3475 48943 y Fb(\))295 b Fa(\001)g Fb(\001)p
Fe(x)g Fb(+)g Fe(f)142 b Fb(\()p Fe(x)10393 49142 y Fd(2)10919
48943 y Fb(\))295 b Fa(\001)g Fb(\001)p Fe(x)g Fb(+)g
Fe(f)142 b Fb(\()p Fe(x)17837 49142 y Fd(3)18362 48943
y Fb(\))295 b Fa(\001)h Fb(\001)p Fe(x)f Fb(+)g Fe(f)142
b Fb(\()p Fe(x)25281 49142 y Fd(4)25806 48943 y Fb(\))295
b Fa(\001)h Fb(\001)p Fe(x)921 51489 y Fj(n\344herungsw)-36
b(eise)433 b(b)36 b(erec)-36 b(hnet)432 b(w)-36 b(erden.)921
54034 y(Gib)465 b(die)h(geometrisc)-36 b(he)465 b(Bedeutung)g(der)g(V)
-108 b(ariablen)466 b Fb(\001)p Fe(x)f Fj(an)h(und)e(b)36
b(esc)-36 b(hreib)36 b(e)465 b(den)g(Ein-)921 56026 y(\035uss)552
b(der)h(Anzahl)g(der)g(T)-108 b(eilin)-36 b(terv)-72
b(alle)554 b Fb([)8 b Fe(x)22223 56225 y Fc(i)22599 56026
y Fb(;)221 b Fe(x)23920 56225 y Fc(i)p Fd(+1)25499 56026
y Fb(])554 b Fj(v)-36 b(on)553 b Fb([)8 b(0;)221 b Fe(a)p
Fb(])554 b Fj(auf)g(die)f(Genauigk)-36 b(eit)554 b(des)921
58018 y(N\344herungsw)-36 b(ertes)433 b(f\374r)g(den)g(Fl\344c)-36
b(heninhalt)433 b(A!)p 1 0 0 TeXcolorrgb 813 62555 a
Fb(\001)p Fe(x)378 b Fj(ist)g(die)g(Breite)f(\(bzw.)i(L\344nge\))e(der)
h(dargestellten)g(Rec)-36 b(h)g(tec)g(k)g(e.)378 b(je)g(gr\366\377er)h
(die)e(Anzahl)921 64547 y(der)433 b(T)-108 b(eilin)-36
b(terv)-72 b(alle)435 b(v)-36 b(on)434 b Fb([)8 b(0;)221
b Fe(a)p Fb(])434 b Fj(ist,)g(desto)g(genauer)f(ist)h(der)f
(N\344herungsw)-36 b(ert.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 68354 54804 45 v 0 TeXcolorgray
24746 81281 a Fj(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

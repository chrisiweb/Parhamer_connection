%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 1.2/AN 1.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:35:50 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathItalic8-Regular LMMathSymbols10-Regular LMRoman8-Regular
%%+ LMRoman10-Regular LMRoman6-Regular LMMathSymbols8-Regular wasy10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 1.2/AN 1.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0835
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A9194DB7D3777D4901301AF6DCED2A2582A84CCDE87EC3D05D90
115BC39699CB7519F3F5F0804F97F09DBC446660D41870421604A0C358B2A020
18ED03A898F2EF954BD52CFFBA974BF4F328367BFFB792B5D9C892E36023DBC6
1AAC4B0C4575435F2D1F805151CD6B4F4DBF909B2858AD23DC09FD78F9F30C3F
CE412F9950B76D767FC78C7D03EDB704B1E2EDC615A72DD6C19F2B72D5554592
5A4A6F9A16630E5ECA67DE21E9D31863081E99EEF225C383E6B58BC879DC734D
25CB47BB662A643F310534FF1A4EEDF3C939CF08848DCEAAF5BAE280FD0C90BE
E164AEC2E1022FC0B6F2CFF6BA2BD51736D3F5ED546B71AFF328D862D8E91895
6B255BA5812119F9E786C22843E378D45D2993FBC62332FBB752E9099DC46A03
48DB4F5ADB06E1A813BBCC33830D9B170464867787EA021A8F9C69F0AE054ECC
3E11B4D70E6C1C7A7C606F671ECF70ADDE441B719ADCB47C3955E4C5084FE3D1
E14ECC04A684FEAA383463497BED743B022107E57D4C56E5716CA0BEFCD11D48
3A4940F6BD72D786263AF3D9BDEB9266D95B4F7C5DB457A41B5BB9DB7D1153B3
69D322D4634DE08DA250C5A0E9C30BA59AF38584921405FD0A00C97BDFF6C0FC
59348728C7796AF0D3C83E6F61AE876BF61829529CB62F64A9B1DA1731FDD676
DCA3F6EB9DF55AF334CD2A7E6B2A29466010CED36162D602E20FA1954A0522BE
41BED705E49969ADB5C897BB8335A889F12E717C3574CC7D3D5813059BA04DBF
2715BADD03810CEEA92386EB19A8F2824F9FA4F824E903466DF01513683B332C
D4196D6E89869D747FB6859C63314A82DA26966B96C8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614768323AA8C00DBB95A351BA9BBC6F0B6715C3AAB9D7A99123
B1639F952E330644A650816C4C6B34EEA836994EEAAFEDDE56E0099D0E09EB88
EB093544B9BF4871200746A0409C475FC4232A38D8F3105B0FF44E4F132378DD
12D9E796412FD0F9478322215E9F59E69396C35AC4097C4995B60BF4D8B3AFD0
A002B3A6E4FA114131410D5658999B86DFDD3005F3AED1FA8F077AD1F27EA249
221585703F20FB70E37A26C6C3F2E101693C94612B65BF89F37AA3C10A40EE8E
49915F1A1B95D2193D8003DECEF9D76FDAA33B1AA9CEDCB21C2A3B05747FB3AB
DBD904B66EEC60CED2867442F5FE445587EB8BAC342210D5B0ED5550C4B54109
A1B5D3696111A1457BE695A3CF1A5C16878D44BE38107E327EC40A072AD969B0
353ACDECB582C109585F829065A21C707F26F67B7ED3B19BBC746D18319CD4D8
32E33C36461904A78A9060F82C61B7E0A286AE5A038A15A5B7405B057BE0796F
417ABEE10B8D34B4B70D5EE47F2256B265E4BA5270EE4239F92C6A4C8DE84181
3C30F45D0AD1FDAF194F7DCD648D8F14A5264B6277B6BC2B6A429FDCDC16A22E
F6E1D59F1CC4D51744A45891F00F44CD3A74129B0234BEEFB556B3D8DA07F98D
DC45C491103B6C2D4C14393B95D12FC9F4D36F563A537CE6665D8C4432AFFCBF
37F6900013D0DD0D4B5408BF106AC063E2B8EEA19EC3ADE5245DD627628FF3A7
68BF76B742AFC3A23E150839A9654E8B6B79FB414C0AE8E5F3B97181AEDC88F1
71136E7E9AA227A3ECE30C3E31934A06AD76C78E25AE7BC65295D28C82EF6E64
6CAFAE116B4BF26A666F28C3998D7F565D6B98E4DD7C81A973AE20D8066DB1E4
CD544B8BD796E6F46363F1F37B0FF58BF02832A9E9EE0BD2381E5808B2BCDD57
4A9A0544CD1D4C637E2C538C1EB86E4C4FD0F9C6FC7076BB850D77C2DE545C99
C920EFE70F8151B989164386B1B3444DCFA46DD8D89C6948B7460D62A6783083
26D1761CB155CEE0637F3B9B8FA1023CCEE9BF9EF65F85A300D8181927A4870A
635311D4B6D23EE8EFE76F9AE355A2410AFA37A8AD2A30119A8E6564460CBE4D
5E2D847DB4438B1437BE24D1DAADA29A091059604B7B28F295684586C86023F5
9E7B15C64B0681F662F42B3AD3BEF21AE3C1183FCA1A56945630EFFC74B49E03
AF8964C617A629F57078C2C24266A9337E8B09E28941E176049681B62FC775C1
85850CD081B063D4433CC6FC5F50018C8A2125D9EDA419486F2A927D2B1A0F22
E306B95D9EA80302175C0CEDD0B03AD2D74465A36614A95B6A2F83FEE8841DCF
661770AF44D0AC7F9CDB280939FC5D953D525E0B41B7BE188D5C794687330CD7
70D24D9CD53B895A253004E18A31BE4E82B384
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F636D647F334B648E11C3
659BA4FA71AB8342608C30E42BA95277382833BB9C14C6EEF11BFCEAE9139B89
256D5E8FE9B80F6DB3179657983AF5CC8F3C7EAEE084A74558304627D0C03A01
2B6CB42DBC8EEF10FC8E83696D58F0CAFCCAFABB836E9C1C7887C42265DD4193
C8618501A7FFCE13919D15CF5F00684B37087F633AB4C7B25FF2D7D54B31D2D6
96DC1E52C828A7A1155E6471DA39E1D47F152AF583CAE41F7F7FE0AA3F1F7DD9
175A2945C257765C4801FB768C6188F02FF2328F7D5B493D274CFA840BDE34CA
C6B57A04D9EAE9B90595D133E0CA2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F
9E367C4D358692A287F5074A8C01BA5518911789F7767BD01F00D086DF326D7C
A50C1EFBB3AD48F21DC7670F524682E7CE6FB4EF66525E8F15F63E8A9F64DB78
90533FDF90C51ACDDB5CD7B1CBFAF76EE833E519C3715CFF2AC7C25F0EB8FFEA
273601D1E82984B8AE31AE343F37D03920CFB83E2DEE7642AA85B1615F9CBA1C
3C3197223C9F0D4AC9F585ACD311E1BA537EE424CCE1F22EBA8031443AC094A0
7EE8CC94D559627274D5026EA0DFDE5F67ABF5E84CC6B6717E8B794AB2DBFDDF
3A89648C906439A91CFB1AA195D9F12E03463930D05A3D71E1E9830AC1A31C2E
35BA7B396815CECCA18146C96709CFF862E8552E4FDEB7767292AAD81E5B4186
180C7D70697B73BFADE926163A5780E71276C60EAB7E25C124964778296D06C9
02559B89DA648B919EB362176B83298EE2D8B405DC67F2F888ABC36137C2137D
E0D7EBBF2323C750C674154FC6CA853B13A2D88CB67CECA9A1D3498D569DE012
062C1B959357A2A5903A5BA40F8E6CA80916037DB040BCE705D91E61D6FBF089
4C659A61F005C6FCE1A0E9700362C58C9FABCC46D24DB46E33983DE9AAEAA7DA
FD44C991F74087597F21C39DB6A2CA7C80E5410BFF7EA073A18DC2F6999DB161
EF7DB88DA4B0C592385D35F705BC2A9B1075F1B1568CE34A4F7FC812BF766372
E6F0277D8604E72E2594DF545E359F2932DB2764780688C794121E4A50AA7CD6
479A34E1B75657B41FFDB8AF1C9E3D3CE95EB410E74A1A29DC16D7FC12AA69BB
C23F9C6C4B24E6F0331C3747E378ED0C634370C3BAFFA2F1F9A03CCD801C4E1C
6911750F761F9907A438DDF4506C6ADBAE868F8E3D97C83E366A89B60E01C8D8
AAABC217C07193F92A25135331AAC542A41BAA9D9B246CDCDE58236DC29CD0BD
4C7842713E95F5CBAF73AB6456DF36FF580B2F42E21C6902705307EB16D94092
A85D8BF6BD657788322EA6A7F874F53F5EC3D5A4DFBE35B5911AC6E218ED62EA
FE23AC78C1FD52C0591102D74D3C6FDD1935694B7002E61FC34AA828BDB14CF6
B81946BBAE9D2B044B3F72DD84699E5735D7A8A57091D3709FA9D5314AD7FEBF
0797C5693895A99F6E03BF0F19D8246951FA87CA9FE08235526B59964E529D71
4203D3849619EB4D842660AEDFC5430F81C552C6AEA6BB170154C777A63D6404
15B9729D98238DF0E36467F8AE46C4A0A633D4B3F8CFBD1194BA8E3B5F981868
3EA2F04EE0AFC3AE4DFA747A1706F7FB6FCB5378D992B8498043D00CFC47D2AC
1081F1A0B01B07A92A8282B3EC6B7AB485F98415
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE27995D78FD99C5784B2B7C7C509E9B93BCC29
35CD2714C50B246A7DC70C99B7DBFADA1E01B81749EE49A70853CD45FC323019
A45BCA3DE39C3E7618C6322D264556FD657D9270933D8B167D2575CF146336BB
1C76735F3B09470E40B0624E52F21809704749F6D81E3B829D163D9F61E070EE
D8CA803E56CF227F71EB8061B83E035C7138A7CFB6D6CBAFB766754C0E8934F9
AB738930EB75A2713CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BBFBC61D7D
25524B08C70599D58E7521F58D26AFECE212309BD7BCF62735379ACF3309DDC5
C3F30DD7D3A37804BB23274D7B30DD69E1B2C3CA70F2F79FA29543F526BB808F
04609B43776382C4389362AEA7FE4E03637B4599D176F103143DC04D5B5E53D8
568E7911839EB05C8F4A9E9C911D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D4
7450B1FD87B119E547047F43E9CCDE1C1F8645DA03EEB02B27E36BB6C87F39D0
505579B2D0FF4DA9D4AA971DB4C82693DEB59FAEB3A14C1547C6C46C24FF3513
EBC97357AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8330499FB4803EAF74
920BAFB89889071729076D755021515BD8DE5177013854B10911605F872456B8
F504547AE968C323B85DCAD9AAD5FC33F29A921D427EEE0E098E8591EA7F2D7B
A5CD8A91C01AE80B672831C286C900AD20776B50D4D2004F7295D860A2974B73
A9E8B594BC8BCA8356DB43399E6A6918A887A64B2EEE98060E47C0F371681713
13F92A306D1A7DD5FCA29CE223138B98E6C6BE9F3B305E2E4ECE098AEC270F11
2CADA74CFF4BD78C5DEF4354211E3953CD7AD90239C1FFCA061A21652104F54D
4CE1C6B388B901F937A299F65C3217180D4BBDA87A96F4C31014265EFD9206DD
DDD45DD3F56823BF8236F0E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0B
1D76EFC8D22A8E991888FC44FF9ED2954B7A9DF5CF6F256C8A86C3D98CADF1E9
24E6C6725EDE1262199758B2B070504BD81147F35D8989D2CA44BEDE6B8BA09F
511388851B9D9865887D4EF8AA7AE6AB234B252A506EA2EB59B1AD40A04BA972
EC6DC7C9E4ADEB7E40045F10F38E0C8D50CD28D96A028BE7C67D1CD148404CE3
0DE9213AC26B82EB823194818E6DE249207343C37BE9B926EEDF21E1D52251D4
37D555CB1FEF227CD15A08CA2A245C3C6508DD3592E809E0C72380B92F4B946A
7BAF34835CAC375077A843F61978AB4876871FBF42DF8EB5F877033452F08D41
970883CD836D1668B85BD642F7F50AE117B3ACD1A1372D5D4D2555A2E8E23E29
D8C8C5F39807B5A01188DBAA07A27A116C80E837DC740E86068952F0A57E9027
C39A603A4886213EC782000DEABF71EAE1B8944E2EEF19E1F7FBF442840845EE
D13FA9B4C5CB1FDE6F0DE20AAD69160BFBDA23C2D29311C4F82514DCF27C6B94
A8E727522E182DAB2869CD2C2B0F39016EB778060F35A6FE085A1BDB04A65CBB
6605D4D72E11338D87D5B0283A4B81EC83D03F502E7DBF202BA558B4EB271C57
922F0CF3980A02A40CEB2FEE42B631C999B71EC234FED7B269E5D91564F0AC54
D70F8EFC63B94F73ACBB4CD279716F68783C493794BF12502E04FC52064E63D0
05F2034A1E7E4192D1193BD94E99C0CCF702D9EC100066E1490894F5ABC92A92
C3F42F4101AC88024884C018C7D0DF65F7CEBDD46FADABA26B5433D34C2AEB07
6031841EA02F1C9622E0B64CD190A4AF3020654123563C5D6ED62F112077A1E5
88A8C8499A8917CAB23F00BC124FD93096D2603BC6C1734124CA3176AB14F488
26ED2E56C67571DB18177A07E082CB873440C4648D3FFF06A1499A5C7EDBE172
1759C1BEA3DE43B426C5E175B059005BF2911E685D076FF12D01742E9AAFACF2
CFCAF0517858C28A24FFEB5A26E46BB5B788713FB8009CCFE62C17E001C96636
A8DC58B71D4BC720F615D2873CD11E06DDB3A7788888A8E713D0E82FC861C0D9
ED98E873821095C6BE6CA909BCEB6C9BB1B0730BCBCB20E22D06AD1AAE225D51
25AAA901A78E86386D29A7CCEFBAA8F35B4813CC9D289E5244483DFEC10FF237
E38BC8E19B81502A19E0BD113AFF02F4E365A4708189A7BDEAB2D32A6E464AAE
B3505AF669EC3FE5A7C9320D907438DB23A82D8CB9777BECA40890C137564EAC
CE768714D7430BE1825C90D88DF40E753607A06AFC0046335F97A2FF20EA44F7
94C1DFD6B105FDFC6EBC6D5745C10D2C3BD560C939B80707B471D13D7A910F23
91FA6B63F2E6A01890368EA8F0D42E7A93B343C664BBCEBDBC0C99138A50E5C0
F57977D929DC9CC159568FBF5523D79229E9BA352E4193A44EE745F76035DBC9
34588B2B8FF44C8368C9C69AD17E91BD78559AD4BE219C8B110472F95FD5CEE1
A7EC2A78941AFD0B102C6CEF9D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF
9FC06879D91DADEAA25F850083BE6CC26AE7437664ABB66CCEEA19D0BDE898CF
328861C3CB4423FD2C0C1AFA95A6195FEF30511D5C87876C863364CE4B089A97
6F9C29A14A61785C42D2C746A98194782D9A504B2A0A92D4E4B5062855A33404
2E14145F4684AD22D461E740FA8DD232D18E559DAB50A977CF474EE1410D7097
785D120CA5C6E051D096CC40E931BEB074AA9E32BBFA361593C78D0D2EDCB1CD
D560A14E93017099D24663633B06BBE3C20A2718C044731B6DB8007749D1B605
F397413DF968722DC03BD138B0559D3E5887B7EA9C9C54F8335F55CC3F1B9135
C70CD0214CF04A4EC5AD120D492F25CD6E1E80CE87C5709112938ACF9BB2E011
87FC035CEA0FD5C1147D41630F1CC9B82B395BDCE1885A1D5F3441B03AC321C1
5CDE681DBB192993B553048C58C55F0E420DCEA46CD16B75173C5D37047E511D
C980EBD803E01C35504C4092D93AE476AB15324149043E713261671835DDF160
4B8DA000941FC5F85C754D5132402A0A94EA3D0E37D6B9890461CF1C65AB7C2E
E42288BD17DB983600580BB1513D30983C4FCDD1836FEDC80308316401D8B181
EE2A3B114F68DED3488EB9ABDBCE6E73EC5A0AD42D7735045D594C43A33EA29C
BE2AB98CD0305DD935D8F0F5EE3205A7576650887883B3C9AC23E217F48154FD
6CE1454F09486B47A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF8B10F578B9F
F66D78D738FA85FC454C23236FF4B665EA0E6210060F6439E9CCA612DC7ACE7A
D12F478F25D40CDF7D23E3E543B75A97A7BC960A7F742A2C89212832C36801A4
C384B89A91D53E0CD886C7BE0692CEB0CF29D9B4BD53E08D9FC1A863599BCF9A
717F4DC319B4B59AF009C11A91ACB087542F94750DC53232E62ACC3C660965F4
5849011BD76FF8489964A7848FC6F3CFA44B7F502649EAD20FD32FA1999CB88E
A646C764BD2088A3EF00A4F1862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57C
EC6D4CFCE0ADFD99BDC3BE161F4C1FBA9B854899BDB7E9D09A1E25A95E9789BA
DC6967F96E550903DF9B81969E38FA3DE2A058EE2076C77C33A93F2FBAECA0A0
EA98FA4C3D1F8700B04CEAEA603A0833E91FB4A44AC83C4E86308B6E89C99A84
8AAAF1BD143560B559176CAF28B1D8B2C8370CBAD5873329B24AD4A743F2CFD1
8B26B1128AA48F72767FF2268BED8317FAFDB532191FA35C2984AE7C50481FF3
126BAE5309893814BA28263EB863D5E6F01C423E6C5D3289B152CE19FDB55A11
282FEEFFF3E262F26041CB1AF30804A3CC34C06C6FBA8AED582215711B0A17F4
1B505FA0B5F906C537EFCDEE4C69AFFEF89B74C5B83E2DEE7642AA85B1615F9C
BA1C3C3197223C98A1ACAA495A6B8B8F1919AC158DC63FF4600FDF993CE8D2E6
3DAB7E352BE200322BBAF6DDD2628694612A7790EA8E1836533738405E9B7AB6
9DC77FE9A283B3A8C6A3651DE8AF71499D39CE0567AEA286091BEA9D6A443A5C
D35747785C433D4E18A02ABA38F55742DC36E4FF07A656AFDC3D0A32CFC097B0
5F9D90CC4B614AE7F58F3BFAF22EE6821291164B14DA11FB16C0E671A6104082
94D05830E44ED3E9908B59DB3B3506C60D3F766ECE69AE23369AAC3B5951B557
D62C7728D6E3F13BE05939C2A6FAA336EFA57001DE299223DDBB333D71003681
B4A816B378AFE37543607554F1F1B427784EFB366CBFF1CD7CD5FE3CB61842EF
56F134AB25DCAD2BD08AE61E233FE6FA79017D1883C61EF0334681CCACC5D024
F39309DDAE717CDDEBF80C88974D717C4539732DAD1226FE504620FDEEEC6266
41060E55159270B4794F9C0945FEAC295D17B4E252D015910B847534A519CFC3
2D52169510940A9E9AD636AE141331BE35D1D5308C927BA3940B773F20E5B3C7
813663D33205454A1A4B2D9173D593615C4459845E1AEEEE1ABCE3E5328D3F81
11610DB32C86FF6F9DBA1B8D6BBA3C4AF64523F37F176F3256E298D22DC5F1CC
F1A67A355219E2EE13D5D6369F656836EE0A77206E8236649E81A1F0E02D8D3A
3C8FAAECF7839D20329CBC5ACB43482D3A3A1E9C3A426BC7FE406E89FF25FEB2
34CCD7F3FB3C608FF37988C7DE6A41FB1020DBBCC762F2BF24BF424BBB2D3207
9DD408226AEAA0C4DCB8DF16CC6767B0BC73EBA052FAA5311407ADDD4BDB1061
3A860B10D2C219E96E61050B98FB04425912F484F5B79B9C0735F92C1B4353B0
76358780D1547206329F302AF6853E5DCFBFE199A76734AEC487BBB103A8547A
0090F0342D48DFF9EA9821454CB759B3D82921AB4B9278E652C2F30A8A121781
8CFD111E32142FFB160DB6422A5884151A4671D631260FB1758BAC67E14234D2
5747F1E68E0C36FEFBD535FA5C64B046AA8835817140B76DC22B5453AE8F3F76
C69B9F10988BE7D061F539CC8711030D2483F752706E27D43E3102CEC57B8A58
6D3FF862999D20CD6BBDB23762249BA7031D4D97DE2280C10756DAC422F0B747
E427E5DB0B265FDD57193B8E7F00C2162FB111DC4972B51E59320793EC60AA3A
F4A3F68AA5E11F657F898F59F67E0D285167231B9F444D42F17CB182EE584117
FC81DDB5BEF8EB957F817C5699C7293E47DAA4EAD6D47F00FC6443EFCDCCACE4
627CFE80E82179579BFE305B9AA1770E8E8970E70524F9F7AE081E64AD1F71D6
CC6FF054661866B68CCC383E5403F0A734ECAD86937D32FACAB6B04F3F9ADD79
94C11CE94999A3F38C88115D6082DECDC2125A4643102DFD0AFCD8682BE5CA11
AABA54285DEB171209CC4CF8879A65088C7381B9029B67CE9029093EEBBAEDD4
403C382D29751340F63D14C45D0C8ACE829FC3034643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256D29AE0E789DBA81CB4DDE7D4A970A3162D903EDE2880C20DD
FCB205309DA145A55A2C6763E0D8BC8A0BF42461DCA1CB7E613647A93FAEC756
3535886E28292A422264BAEA373D5F1AD84FC79DE23E2BA52D8EE1B1D3F80318
8614D6ACD81856288366086F50154919E5C99CF62A7700E896F5B69456110B9A
8BBCDA8551C3C14F979F3CBB597AAE41210AA7A444428DD055DD35D91A1DD465
3800988005F542BD304D2D1798BABD827BC8A689C3C35078CC3502DEF40DE082
B544B4AF7127EA6D5B8FF5A0735257BE29E36A29B707A51A697A4D8A360D4017
19C5FDD791A1C640D47AF86948448DD00039DB41E9C5BE1A7E6BB48920932280
BC552ECD04E2C33B76A0F6172098AA76CD4660980EFA1C84D5348740B8A4885A
BE1FC79E81913524DB238155870C6B9819E5842664A4049499CAFA7351D3D3BF
FEB9A51236038D4452E44A34F25718B7158C40F12ACA152F1EE78072533F8900
CC3A1869BE48305DA62447B28A45D6F516078C72A4B155A2715B713EC359F680
FCF2663644C985191135F0156722F0BF1DFACDE42BEFD5278ACEC4A55F1A082D
537B3C1EE890A6FD2ECE0EF3999DB161EF7DB88DA4B0C592385D35F705BC2A9C
CD7351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0AA69918932E563C8827CC
340AC4350DD2FF1A3EA9F8F3711A16CCE9A37170F0C02A9C7143D722CFC08677
6227901157114767FEC20D2DBA71C87061EE8BF523D591180D29A8F8E14A7959
731A74DC4B215D7EC095EBE86A3CB7C28C2EA7E6A19A68B64EAF236A3468C0F9
453189A1DFA55A9459D1C5B8CDC769D992269E6EC4631B1B75F7E6A511DBD978
F3032D2FC6BD54FD7664FAF472BBF13AC7F619FDC4AD5B38CE04E4C555757F69
C669C5EC403770F681C400FAEA98F62F02633E0F85A780A61DF255239F9BC3EA
AD652E6D5E754B9ADE46841E52DF90C3F0D7CE5DD684566DCF0B43A0B0F975DE
AE2F7601EB63C39D6EE8C54611D9D515EEBB7192C63D22D02BB2A5A27270225E
C95173C09068553725ABA9423F4B268C58072241D2DC5C080E7881848222220A
63605F00205C205B35DA93F4D000126B2CE72AC322B4D962537889CF225B3381
6EB449BF2C28599EB66F071FFCE3410C547A9B74D216032B72854A0B8A6ADE15
EBBFD5CD2BA9FAB7E75099FF1B68329B68A2CE587608555325EF062CFF465B6F
184FB4C37A50F08B2F1CF6E09E92D6215A5C9BE511CF326505FC5EF2B72DC40E
3350D5D5358B49CD7A1713DE7AD5B63F462A77B6268B7AFB245DE6EE02BF2A97
B0542A5CFD6CAF309B7E10ECA06B51C2717DB5BDE8E80D6F29B33E9FE12AC804
AA0C6670967F6C3C2A7310CCC64AB48219EF140A1D9A942543FDE90924C9DB3A
5D667E0AF18066F4318101305AED22847F855960CC952649426FBD46FBB5728A
CA73B436527795BAA59086831567FDD5B3BA6931468115577ABD8222985FAED7
B6A1CC891D07185666E6E74DE886BB13021AADC9950E2EF1FB69E5350B281CA8
F05E2830521A7BE2EF1D993F75619EAC1B3A7A437612AB0E8513DF8F0F44E933
75553EA81965C83F6CA655BBD1410B7E8F600CA820DF8B4BAFE515BCC974BCC2
8E06AC06B07BB7E08BFA5CA8C5EEF8386971DE077781A9E67359AD8E75DFF208
727DC428911CB820B9211D2A3C6BE6A3ED0A5A2C1C623A6D6615F24FED298A68
097564A8429CB235119311B9888D0BE96AC4BFD340BCABB8EE589A69F749B180
3E3C1EF42D935EFB4AEBC656854ADB4AED11740BA3FFE21D9099979EBD752E36
A8EA33F541256C368B3217E226202117CFBE3DE2C6DBFB0BB25BB138BBF69BBB
484DDA6371DFFA6222F88F0886C7F8848E932CF0D89BEC7E504189315DE0E931
69236EEC7E3C7AD630E43CB5B3540FE72436B7BDC9E33F6D4B2E9C167ADE4932
2A5AA48B228CF68EE0032B1968EB88119A375D4DC1AF6E4FDBB4862DB295672C
BEF8C0780AD1CED1352575A76E2FB6DA0EA3472267A89135EB528CFD0877E8D6
E31A02A87587DC7D4030E320C514539B504A31AF3D7A4DD413750FA4B723142B
B074DCC9B55E3A49B384006A6320B55B1CF4B2482D465B5835341350E215B0D5
5DDC1F173119E073DB7DEED7DC4A04968B69F792644FA8B0757303F40F4E3D39
ACE81E6816449AA859A9754CAD99EAB3F59EBBC14ED7BC71D669091521BF6739
131AAC92DD77A116EE7E81836676237F88C519F8DBF39EC35FE36E3D2577738F
553F81135829F9118F4BFE20CD51190F2806A37A4B011776C7A572D2FCF18871
BB569C2DB5B9A3347F911C34150B85ACF4262B137D9E0FAF538F8838EBF6E79A
1ADFB94FEAEC654AE20E3A693C2D57AF9597BDE85CA476C09617B1CEE6A2B48C
DEB0450B99E5E00DD9825D72B3A9D95383171187CD0E33C8CD308C436B64C763
C407654A8C311D3B3C8F5901B2AC785B222E5DE6A3FC2A9B0662335A2DB9C80E
B7BF67101B1F500FEBCC23AE484F2222BFD38455BA078A1A500CB006AA6A7D46
70530EA460E36E1FCC24D0148C458B745876A5FE5919C3C624E46C02C72E1368
8BC50A383020829462604E0B5B2CDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942
D6C7B09C6F75C799F437E74F0E185AD518B7E446C30415CA18B5F59F3C4DC209
7CCF7B2FC2F789BC49E4AB223FCEEAA22FF3F71E5E5E966DFB605D18E4B1CA2F
59697989C41141C74CAECABF8616AD95FD9ED3B11C918BB38D14FDE1FB20C560
4C70DC9E98857AA358B5F754BC18087F2F7BC99B501F212C04DDCF148251E923
37D102BDF468038B07C256081F5B8F3636CCE0A293F905974A0B37050C2ABC49
F5FDFCA8BE38549AE53F72B85A6F03B58AE18FC178D906B9BF3D12A818C8EBD9
90E7A12A38A89BDAD7E6A192877F8F9B9C3E5BDF412BF0E8C92A234BC8049091
778F36D558DE72E0CF1737994854EABAF8C2D221E0081D853369B8ADE0B18E8D
FDE785893B5EFD6019A709D99989DBCD244F0C11087A077D2103E494406B1DC8
1032B618349FC6ED24879F02A9B2C2924CD9E921B84C4E6C0ED0396E44A5667B
7AD3375595524D22C358B73374B5E7C4F285F9BD614A00DE6825572189A19315
AD3E7E3EE742E2EC53C778F677810DAD0C8F97E6FC8724E306E2E37B799A57B8
009493929890EBB3F0C168479B6999AD5B3C3DFE28AC43FD186B6BABA7FFA776
83212C8FAF6DC682C841008292750A376D0398DA95DF8AA168A651403C2477DA
990FC58E46BB65AB0676A40A8130F05A6CD8D0A2713820D615BA8AE46DCDCD93
BF182F0D752C9EFA34692B1E9877D715480B2CBC1181E6A95B05E9285F173BEF
A5424D243AA8BC7E87176773002363255E70443F86B6EF38C81511BA8FF4887F
3EE4357A421575258AAEDA4B5DD9ED6E3482283ACB506A2D6812D4676F3F6464
94832C8EC9EDCF022E141A5DE5496F54EF7A0050C0D1D2166C4A311A0C52ED00
D2305C70A416567F5EE877F0D165C4D4E6B00BF84FBE6428597412531988959F
3897745D7159FCDBB10B6459273EFD03520F2483A9E7FA0938D162FC5890998A
99BFE2406581D64F49F46B2D453844BEFB1931DD7E2CE0E540A398AA83F57164
3D64D9D9B4DAB92AE722C326065E48F4EC7FBF2E1158F0535DFFB59313804D69
60AA6F0C136BBED6E020CA50ECC4A6C90A628121B6317FB8E40E11E48E61DC6D
B3FD911235DC5A823A176D8387CA420A441980D3E8666043259B63FD3CE13E54
945B0A6BCB5633B1D580346D913BACD9742B308D575A409EFBAAE5D96D65773E
BE8D69A606A70A06E230290370856A89FA8D56529F252E7CC538FD5673744947
AA98663DA46206E7A75B1E7AC0247834B4558985AF6894363B2114294E668644
46DAA5CE2591121519A4117747BF9CCB78F9F8A3F5D44459BF81997F9E7A34F8
122CF87CF933F558E4660C9FE5D440B33AE6DD4220A093310E3E65B053A2EAB9
C183BD44FCF0C480796469C934250A5CE240A1171441D03FD75811F371B3895F
AA14A75448ED483C51D41076C0FE99D988D612DEBF78DD7EE23922F1A25B3421
F4AB7F9881955BDB0AD3FDECF4CC3BFC8CE815CF8DC0CF6D4C15FC110A14C6B1
7D87AB69D8E840ECB176762EE87EB04071EB8061B83E0359E6BCF317360AAAFB
7C198CD8DBE03A3CE7728D8819BF7826CFD7EE20738DE07BF2CB6AB91D17C579
3A8F9EDA9EEE6F64F51F736877EF6935ECA18A5F86EDFFDAB7E32A239E731333
107A831FBE6A6CAF1BB6D934295DDA357EB9FD1661523AE5AF8DDD8B198AC29B
D3B8DD91D49CFEA23E7D6EE63090EEC569D8FBEAF4E5CA52AF81F8FE49557D75
B147C85088703C68C018951631F2EA80DF28F24FD71D502A040CB4DACDAE1FC4
F892A2F092A3E45C31A6DF9C59631C5811D0CC79DCC5C2D73915AB87E8E31B37
12EFFC2E3FE1428B2DAA1853FEE27EF30CB0A494BA6ACDF6788877A3104070C2
23170140A7516D83EA6A99D1E4F756CB95EA4C2F9F4541B4ACFE9CA666C46C7F
031C67944AE235F4F872E636F24BA68ECAFED13668242C92CCF7FABDDB6C50DF
2485AB8138E3D841A9D8F9F80AC1BABB452DF2ECC9744C9C500556EF9EB6764B
4F8134DC429709776F04C4D5E4D04DAEBF5C475C7C3EB2EF7E035707E5A69C6B
F3D0C6660E636D6AD25B03A443509DE32694DEB838C8B360EBFFB8D45798018A
310214EB1672483CE4272074EBD88C9DCBDD1E51AC1353F7C1C6F691546B9315
12AA015585BF3EE444A7F201B20F79ED641D0EE7473C6E028D62D173D45A6D17
B4A1D1D916165B0BFB018964439FA7B3877858BBA8A26697C5929DF8B06BE1AE
01528C75262EF6C5B60BD81D2770945D3D6BB88DA9FDDAC13FEAF57217EC230C
CA301F89A1016CD564EF2EFDF0BDB775895C4746ECF87F40A23A8418AC968F2F
B30D5073CE2A53F750B082C4A6590AD501BDF6EBCDC02B48008D082AC5C1C042
7AD24E2C9976490B46BBC2187317D00BE0D30EB7BD4463F7A542C9A7373C3A43
39301CE2F890851EB3E99946DCD9A40E25DD883D396E1B7292137CEA7B60FAA0
52E4E631CD7AD08606E816F3E54E20DE4C1F23B16A9440AD00F6BA5601CEB6D0
79BB75886BE988058F4C5A79047AF8C75EEF3919EB6C5639046C6371F2024871
88A7BAFAAD7699E573E26B49D2D3520CE7EC27EA837EDAF9DBBF7EAD3B2858BC
FE820B4633E69F61EF0A9659847F8BDCD4238F576E09B591DD088900D4590818
6740C9412068CEBAB515DF56E83B52503F2A044FB87D284384D6AD0810B5407E
1085B1D5104BEC91C4AEF5E1E1F02AC9FCD1D87929953EE6CFB6C2FD8FD23C18
CA4063BCC8EE90AC1756B426A936BAED123DB1E3297770D868CC596E737A5234
E91EA9C52A86F396EC334621CC131F067BE82B7A00167945245303572FCD07DF
901E78AA828FB9ABAC42443EFEBDA80787A0F0A9682632A59B9D4E948DAFC6D5
74A33B9CE67A5639E34DBF36BE9F30BE03B0B8FE5F8EA006251B9E33FFEBB1BD
B2FDE76B58AF101A0AD64320E0217F90916924BEAA08BF7FF02DCAE8484C13F7
C5DEDB4EDC72B4042D30D14E8F4D415C5AB2A72BC3F9A63FC847DC244530BB6D
83D8451BC66D90AA787A9A653A4F75C63447142226B4AD05ADD80A9D7DF9C7A1
817250E78AD0204C9DCF16C79410605D4D744BFBA60FC22E964CE10AF512C228
F4CFC3DD85AEE7C9E61D62CE0FCACB72E14C2FDB87A97F47425D7D53DBEE6D4A
863D81138795F521C6A95DEC14BBB3E5A8BB3613EA73BA2AAE3FCA5D2E78ABF5
0BCFF51317165C88BAE59023144D99A71EDBB90FB84380ACDDA68AD46AC7AE3C
09162E8A4FC6CD4741B38836CB599DF98A21C5245BD1435E23F7395871AD1115
8CFCA33C04ACFDA3F0707836091A6260F217D91D4EA2F2B6FB87E2E004C0C5AD
DD2AB665537FEBACD5BC7C774D53CC63B57F7C9A28A5F0EA14F929D5598F4437
AB944A06B5EEC3343EB1EC04DCD09A2A4F2CB04C74B200EE87D92C452F79B850
8B5A3F364A4DD82BA880A7A5CD59F8F6000E1978A9EBD18D33DDE269A3E70362
6A0F204E36BEB8606041ED5927BF69A367EEAB44967489A34B460172AB269789
DDA62F516CB7FCE827E8B6C453F843B10EC212D258C3CAD385E8512B667AC78A
09A780813B1FF02AA967B12AAFAD9ECE68CFFB45E6E44703FC7AD68DBAA09BF4
E38DCE8FA46EF5CDFAAF3113D089D7C85E5859F27B8DC4C5D864F41B8B3B0F66
D6FBE907224496686847529F68DEA6FE86CDFE2FEB8DC3AB2D124146E08DA532
B277C8A73DAF87129F39235E00862E70D7E93430EFEEF4CA1441C63290D48E72
84386F6082C2362E4CCF3E66ECC33C744621B1FDDBC9F587FA9AD60FF1DD01D8
20488450336225C64FDBE7F75433FB87932A162CCCA0114944A1AC1E57C446C1
533D84AFF286AB0086008147E26E133E012707E204F21F5EDCA106FA0636B029
F12E6809CD8308A1512A4F3BBA0E02AA42C71D9E27302A88E52BB8B1924F057C
43DB0A92111ECBF02129EE8DF16E063B7BB9D34606831C82F4954E3E9F458653
B6CA43CE1F9164BB0FE39FBCF2876FDF951D8F9ECEF97273B7554C01E0528548
562040B9FEDE9638C09DB8EABA360ABADCD32C16E9F72E34B4CCD3A3F1A87879
31F61A705F34B65A7D17B8BE932648CE9E0B7240BCC29C59A4D84770FD34E97E
0E6CE2C95CBCD1A7AAD2312A280F0C0753434F33D438BD8EED69053BE9CBDC74
E87B613542F58DBCA1007FF58CD1A3F9D87400FB8A600F088414D8992ECDA0AC
C39AB210921E327FD8B10856C476FBFA10D11E87A61DFE3103AF0DA9F627E710
DB3D3C578C86CDBBDC0A2BE5F6D17EDD30DE14918A2AF0E1ED9254513D2002A9
CCD73361CC952A8238AF64FF352BAC31D36B071C4B68DF8BA0FE38D3A0188439
4AF829C39DB36BFA67124053D79DB19F848987C0F2E57CC79D75EC3262338CD1
3F13C659D762DB6199447516E1A5D4B3326832B50B45C50D8F3B912D34199D95
8BC7C6ACBDEF8BA575387DD0D73162CDDD96166F795C46B8AD5A7ACB5C30A9E7
9E85CB8BF53846F45871E08B42AF72B3F3760F5FA35BCD767FEE4E9808EBF054
38BA865AC5CE19DB05CF529A5DB0DFA4F1AE311FF2EE1311CEECDC45A5A65A71
E268231C07EC0F3AAC2337536495DDF6085A1BDB04A65CBB6605D4D72E11338D
87D5B02C7980703D1DF07EF2E12C9802AAB56426BFD7E71A8056C4D40E53D42D
AF400AA41C55881CED39A6EAD01854DB545A7D0E46716D81039491DB446916FA
5F10B5FF1AE36BAAB8A07828702857EDDDC1030D19928F2E260434DD44D61B33
1A026E3D72A9FC0E15EE51F97141125A74C5BBC35D82385C083D07AF133BB1BC
941AFDD9F34D5E0FDB49915C613B9E6CA03E2FAB053421BDE071AA7232D3FB8F
2F4E2C4C544F441AD84AB5DE68AE07093F707C67DB1DC2AF85CBA7D0FCFEE888
CC7FFDEFCBD573725714DAD9F6D32D04C681C42D15D8B8DCDEF77987C808BF0A
56664166455D888CA8A3B820DB6BE101296BDF05D296180E1F0068E431EB425F
A04DD315AE10FD3A72CBDDE3AF4825F7C3B591FB74909EE16F53AB0F444AEC23
3ED419193715DC8998AC0E556F16DB74C13D05E062FF908D37AACBCC9086AB4D
09E359B41CF74AED5B75C01085EEE6959AF5B321D1550C15C0E4AD2245D110C2
485C08BA84E13D79C4875E249580B771CDADB22DBBC1715016A91EB885A51BA3
F73CDCAD65BE718C0072A840C5D661E2BAD9236D480D9250A1EEDEC54A0D75E0
C853808E0E457AC644B40C5D496DCB96A463116389EAFF5982413681C556258C
6A96EBFA86A669F671B2056B5206CB2889A999E7573B012EA2371452E23091C6
5D76AAB3B0B47745CB8CBF9EFB538C274E3C64685888A61CD2FE2A3912714563
19C9B1F9D62740A6C1E4ACA130DD76A67920DBB1EBF803737388C01B84BAC1F8
C5D2AA3A3E6BCD63BDDD75FB5390E6DE2159D712C43EC39112935BA5FBC2D1C3
048DD4A16B2BECF9DC186E0B3479EC564EB9E63BE5C92779434A3938E1970D8E
A3CD40C7B8FB442058996268D90BEC85B51D5111091F54823FDAAC9DDFDDFCC6
DD12C114B7373759BE4A62F1370FEDE056CEE265838696FCEA5BF7EF4865F3EE
0054B00A9EF36E06722397867DF4DE78492BB8EF96B9D0B8AD794FC37229A534
DDDB4A69FCB5E94DCD2FB69D65D8D970C3C755E6F464E23802978FFD29A0F681
BB7C42AB16F3DC305839233A6D79FF1A8152419BC99C0B233ADAE39DC533F1D1
0843067264DF39491C34CB4BF88039971CBF0B811DA5D0453701393BCF3D6251
E80A93FEA61864BCFA907DA7513A5D5AB90346D805E2A2205BB410B3E1317CF2
47224ECF9FFD37BA6DB7283B75010E5542A389EA2F787A4693E254921B8DED4B
654A34C1C67C390186CE712378CC6217567E4233AB90D231BB07679EB2ABDE89
5E12261315A776E2579686DB956486C96942AD652B9188F2FFA1495493978225
54956039FCDFCEF8BB4382003153E604C23D313121A31905074446B1B55348E1
E2CEB827C74133EF89CC4C0E3BC93691F53282A0F0627B5C2BF0D24FF6B79AC8
74474B73FEB6FBCFE8F5D07B521EB0F086704D2F749380E92B97B1D4D15A6A6B
4A8E7F107E2E4ED3AF0A323F4ADF5BA2DBAE0C452EB77B9EB60BC8E8DBAC5E44
24AAD00B852219A60384F37D44F4096D8AE632FB2EBC0DDDFE6674552253C086
45F0BE1E25404BF8131379A057266485F454D5AE1081304809DF523EFE64D400
BA4D22773664235629410B1866D7A52B5AF7B22EDF4D13C1A0F81659D7C22C7D
D495DAEDFC651D4A939CCBFF875032E159EE437A2F68FBB9A796AD2042FF89AC
01843A0B408603CDC4D27FAA68D7A5407E0BA263CECAF34FF58FCCAD408B8B07
D84E95D6D79E0FDB6BA53C1C524097F7E1070005FE0374ADBE880B8E044E4662
EF0AF221544DE5DDC61A54CA0504D9C77E08FCF101D33E908A71B94B57A71E99
C8E97C95D6264824385F1E9C6AD73172B8777A6A9C884E2131126C9A2EA19A80
074BCB3432256BFE41FBDA108B3363B7102FEF09C25D849D7DAE91025A4C6D38
DB16CFE8E67900498C2F9834799128DF2B034852C673ECC4B4C9D77AC775F945
CF1F96E80E3B5528D4D09E1B5E78B3E352007805470CF8FD960389A736A651C8
E9877DF4A9DE3457D17C81740DAFE000798A2787814333C50AAFF69C863E0A44
8CA25084B8F3F8F2E1057421744C063FDC483737D18DA220D239EC30F2A4A83A
7E833552D0A83643478A3A066E2265E93BDBB105C2D5C2068521B1D65F4055C3
38C3101D43BC8F4B50E4D18E37D86325B248378A1DCD06600ED4C433F802A055
BC642DA69CB9C0C3C86327BDD6C8B68C6C14DBA851306CFD37C3BCE8AA1DABD7
95C477FB0CE298C342355B81E752AF4D91AEDB312FAD24E279B120EC195D43DD
298F750556198C024A0849365795E0D4CEB53AC09FCFDE40EC0A2F76154EFC83
56EC90BFD09D2EB451EFDFA251E9C4B888392C07F151CABAE683193992F71A1B
3D33AE7ACA07B528365AE5233ACEB384A165B2D50284860A8999BEF98BE52924
33CCDCC16C0517F50F406270CF873290E99A3BD506A8578376F78C0039EB05BB
1BCFB9788F34E0A1E89410480FBF4F9B7273BF9C21DB56697EA83892E675B312
9DC52A00D34F00D2B4433E55D01F120C19F0659221256914071E40F91E422175
B0B92FFBE2C5A9839BFD9A7C3AE5D2B7E74C9164FC764C168B3F14196D870F88
2916467E89A6BE6E65CB9EECE72625F9302F42336C8325B4972E875507636B1A
4CB0913C12A8AB542901AD5E7B28EA43908F716CF825DB774EFD3AE4D7F6B695
E7A7A4ED77EE109EFFBA1A6971678EA3492A1641851FF8280D2C1BDD3A42C2D2
49B9AEAA95107DE25BC5A014E43E107F0611BCA32216D81DBADAA3DF3C2ED508
A5547C4B8B182CBE28D968BE8AD8FD28A9EF8EEB25F6A230DC6AB0708EA90668
8B5BF77DE0552ADA3E14BC0B82F2CC37AE635B8764722887CDE8DB8724D14D4D
A223CDD16E6515EF06936511E033C53F89D5DD6407BB98B211697941A927BC72
A148E05BFE73E22391AD1D0DEC1DD4E91AED7FE13BE59AB0F6CB6B0C091A7A2F
6B6EAC7A5B4D39DAA5C0E94FEF733D60E8E89DF07C2A11C0E1F89B02D061B7C9
EE6270690689B0FEBD0B26DA3B909CE9A4FB204D7735ADC8F0822E69FE6393EA
E0E90E7FF7BC2333D4E0215D5201E075A8C4C7B1AD1EBF980096EC4AF841E416
430F8B44048BF93E98E66BA3E83FC00043F27F1E73B67016A5054CE6B4AB0A2F
50FD97666B5D8929A96E6D27DD8B231EE3322A5102B01F5FB9CA6867E652C67E
CEFA041D118A875D72F4E29A9CAB9E821B14F15B5E14E666526031CFC139BFF6
46F51DC5F7F319DB8265CFFB6ECCA09D6157FF1DEE444EF1A6724AF2022FE7AC
5F10AEC634DB5A4EC72E15DCEE6D998B0F691FE4DEE7BABDE53BB0D3F91FCACF
76618DA8FCC16348F20358F4183719B34248238B44052F75CA6D2D249929BA4C
2DED2BAA764A41DCB7D007C9378D0B6590CA0EE1B91FA23D9FD4292B4C730C54
CCBDEDBC27C886EA396C89FB414CAEBEA0EBC4C4EBD6F256BF0A00D19CB9FBD8
55ABBC9553CC600A72701A3C85A2F647F772C8099CDDB5F3D586B9B5A9D9CD9D
7AC974D14233FB6C00C5A8FE4A6821D4B1F212C29ABDFC67268BF1D3E3D29473
53648C62BCFD951918E3C38FC1840F33335BEFD663C5F21C125165A6507983B4
F3E713B1FC438AC303AE9B7A5F45D61E02D0AB82AFBE793D708AB98D5B730A70
DEAF9D6A80EA0E6F4883E39FF433F5331050894E44A16A51FBC10F2F4BD0EB74
75E396C85116AD2BF91C5E6B4441A41ADF3961D7FD5E439843D2BE6EBF356B8E
F15E932F1B9CE429F3850ED936A4BEF78AD52C58E87D8DF23E84FE05778A4195
76683C1339E7B6FCEE29EF790A51910B0238E0AC09431CC195677796930442C3
D5ED499C93EA6DA7C4680276A02541AFC56DDF37F6F60ED189A8C53FEEE7DF42
2104F1CEC21087B663C3DACC2AA029909FA5E5C57A79CE2385E38BFFC236639A
83D72BBA5A644DB6C7D10B8DCA687FB2321C2CF442724552A03DDF0BBEAA28E8
3B5C94175DFB9E11A2CE006C37053E7E9FD8A52CDD6E8F228ECF8742A92AB81A
520C6820937C4EF7A7AB76DFFD907C8B8C50EDF382D945688D606142E4B244E6
6A85437E20B97683C69DA60ED3CEA82C6FECAC5AAAFCF75083F65741B1017E96
CC181789DED779BCDE46F1D9E6E73B9BB7ECCED466FE1ABE97BF56C05BBFB53B
B1612446BF7C0E7CDB50FAFF50203F08B85E74C4DD08B8024F29C956C342A719
1D93FD67579BAAF4C5B29EC7AF97E7C8402B2C7BD06653BAED8B77D26BEB7B8A
F90D0682E89F0E9162A056D041B5F2C74A612BD655B38DF603DB446FF3C6B593
9318FB977CE1D9A30D98FD23B10F40A4179A6694A017D695064BCED8FC5E0BD1
993772BCABD0A455BC7E5C77CE23E3FF07B8CD35DF6320A1EE1E270FC43E35AF
72E7B36E3DCF1C4DC905B343BB72416574240E31C205E1AB60AC1B2610D72BF5
C0832AA63EE771FA86C42730D9E81805BDFC625C5717D4CE3E694D4062097920
58DF95E309EA2AF7D1E5EC95BA6DDBA393DBFA8C3C93D85460068EA4A2F4EAB6
C4248C541C5DCEE10C45F01235C74B135B483BC8155E7DAD9D85DD27CC7D9729
CA797FC7AF37DBD29CB89F48CA3794406CB57F20E678DF666D3A08C021434CC2
FDC35A4FDC88E365F40B9D576708B316F5C9B323648D1111EBFF81835631AD6C
6FB88D8E7B311834E5096AE4D664B57F8BA938A19734389E8677F8CE267895D8
AAE708196E122DAA1E98C127199A84F066CF42393BDCD349EA093EDF3861D805
5DD7605F9D205E690584682B19C3799784C1394A7F95FA260EA13D49E65DD0CA
CD122E040A0F8D3ECD1B056A35C37842C492D9FC86B65C1BDFB873D1B8AA2084
BE9D840DA0D79520311E80391F8AF7A536FC4BED6E915ED2082C744D44027C24
E460FAFF76ED5DFCAD3B0F3C59A4D52A0E0346357E438B0E62BFDB2444411986
183617BF19EFB5DAF155F2727DA03D6E1ACFF8BB118DFA9CD64A24137F2DA6C2
1230EE10C504360FCB236B33EA5BA6233B2973A1A4A64B80772D4D77F4B95762
13835AE7E32A2B401C36C3D5871B5C1930A3BC84A4B0A07BE87C6830D19D19CB
2F973484B4412028C2FABE2E9DC3B57F412A5CC05FA759994F4866F2CF41C075
C4DF19A0F0AD8A46F5BCC2BA12C4D68D87E0C3057C9007EE185EEC0DE8940EDE
7A1DD87E2238CC21181170BB05CC2CAF62830C2C50EFD34C4EF05C71E675A3D3
261F152EBA489EC9E5BB44ADFB7558DD92AF0083C684F7A17F8ED87A4177E110
3949CD12715E48DDE7A3BC7AF35466DBE6B6F7FAB390C83DE369C48C9987244F
31E5C64B7A397FDD41932F2A16CBB052084E3FEBF0ABCEE5B559AA42CBBA8CDE
9FF407C8A7E5FE9FBA572FF7F66E79D3B2B7687683D34954230DC6E93A7770C3
C89DE00C87705C1928CBC84B7F92DCD8A43E34700A28F9E12DFB9D84EDB11E86
C86C3FFB00BC4BA7BB30972041F6288DBA2E17C19C9270E74064381314CE4895
2F2E31146860F07C6E49ABE4594E37BDC0C07689341A893FC4F8FC60222DD0D1
59923519E3E7D441978E38D6C938040933C19F36D5557E8CDE9B86BB0D7806B0
3A4DBB30C263E61EAE3FBA7645AB573A5E5EBF40C14681BAD696AA123F9C30FF
7F2B77E767A4C9492E72CFD9691204C6C0DC4E926352B57E7DAE80060272B7ED
C9492C1FDADB7085E30966A059B1636E4B1AEC751061030E9698C4F25B5F8DD5
FC1640FCB2723544574BE6FE1505687BC4649BFB849DE95191E6BDA41016ECD6
767F1F3004976C5F02C272453796044F1B27681F825F22F82E55D7088F5C0B60
D93E9099CD8C0CE8B3BF58E971F0775CE085DA3AD22032DCD75308954C0E694A
20B6E17926BA32815E00C1CB2B9EF7A89A36FD278695F6F2FB9A6F974915BF86
C067A5EAA288D5AAD329AD7D1352E00181C4C75D7F9E1FDBFBD6864F5F56DCBC
56050C7418E90552DF6EE5F9C4238049BF932E05C2EED82EA1183B102B4387AB
3FA10C2A1EED234C2B96E993343C29D9E4A9A44C9B04517292EE334C06B1A622
591040A4D13176649B1A4C7958554F81EC83D03F502E7DBF202BA558B4EB271C
579228A37EEBDA867E2657828356256B69B89D275EFFE5BE1FD28FDE74BE3631
2504D8F7F6AC051CE1ED882DB34E176B64EC8CAB1C44FF9287F2F4E623565955
106A2FFAF9C7A6627071F647D5D73708274E5718EF450F84B5A7C65E7555360E
3E2A83100A7477F0591A23CFC73EFC3F8CD4709E6FA3E08747D5705F441A3E2D
EFF36B8FF289C810DE72CE2772DB7D5B3A765D09AEE0F0178E20124CFEFAED62
CB55BE2301E115BF38D18AE8461F466E207611DE32F73FDB3AE7876D6AA879FC
83AD23F0BE39AE8EA0C499FF89405ABE997772CEC245586F1B71D0BF879D12A7
15A3C091A04B5E38B50709CA21A207D8D609336544531B4BA89C1547A41B7672
59CF565ADA5011FEA13A7A8CD5E1161B20F3AB5E3A7507F25CBDE0504C023A84
5E0C337BA0BCF7739D813518451BBF41F9D9F03F1466726908B438012F457ADC
722F8255E3A60313010889FE5D327CD5D5650291D816D3012B80AE7A74DBA512
27EA04EBAEDED992FCACF11FF1A9C5C71DFEF4DDC4709FF159CF395686F4F22F
A5546410F5575B56D3A484AF5D02AA9CE5E6A8C24AB041F3C6E2B44AA95479E4
E98133504991401AE5AEA575249E6D4963C88AEE9FE7537C3F8E2218318EC99E
6FE3FB13AB6FB9F66BECF95B625F9BE81A4DBAB715F5D846F2220FBF861CC716
6BBF91AE735D571EF65CEF880B78EA68DB2D9BE7768741F927B1B78AE77AC4C8
49CC0D1B54E47D44B807D264B8FFF9E4D785C08A0DD202966794ADCB2AADFCCA
798F2E57C0566EA3C1FC4A3ABCAB6E38DD0C8EA24C39F3AC38F48E25EBF47D2C
24F84BE80DBD34ADAE1D899DD64BC02EB64DB7060FBE9DC77FE5AF2F8A4F9307
5F35E31F0F60669F73F908B859E0E90286281DD2A688183420FC63F44C24F764
45B76AD023D6BD1C2CA79CAD7F0FE9BAF8F71089C3F94FA71B3996AEC4092C1B
220F544989112CBD3BC340616AB8179161520C5D9CAED67D9869D7CC5684BE0A
DB2843F98268BA3DD3558B16E94DD6CBC32B1D1632368D09AF16343A3F464014
69C834216DF6E346AA93E4203538733D5857A77F77AFCCCD82CFC289D4655256
3B36DA5DA900070BEE8D7D335B48B374BA8969C0F653FD1F267F5E29EEF6DE29
1BCFAAC2BB1DEC703A7CFAE5AA32CE2A3373286773276A7C5E9B160FF10E3274
DE717BB73FB3C116FF8950454EC3670308AD326BD06AF33D57AF303627487984
534EFDDE0F7BBB3FAEB89D737F9FDD69B4EDA846AD72B03B0237C8E67D174E8E
1735173936712A6900BE7CC4E23576F354A66710A4674F99EDFA00C510884BFE
E203C130570142D6849BC5B3D0445B30D984FBAF9EA911CCAC6C165A39EB148B
25F23459D2996A7896CB25508A2453B19A9664C864AE888FBD4734ADD05ED338
822359676EF647EC262E4C15BA42E855E249A638240236B30C458D1BF0CC8B22
F37E95C27F2C40B30C552FF9846A07D690CB0BE3B497473473197739E55C66E4
B7C859541C05D8C31B9C3178133782ACD3465C5CA2D45C688CAE39BC2B88918F
1967AA6877ED67D971958F3D80A9E1B44DA27B1BD42213757E16CEFFB075813D
F7B7BA6C628ED59C851ADEA52E64DE64132CC1F25A0DB6F5B889507FE46D5E78
373124E8BF78ABA7C50551A09B5971E03BAD03D337AA1E47A08C5A40B108AC66
9CDE8F23699C46D51F37442B04957F823E28172CB109A3F2D17B5AB13B731D86
D2E91844C22A3CDE0856BD8640D2B9B1844E051DA6675B53D3C3462AE5E27D87
180B64478D3ED7AAEF59BA49B93DD14AC40A4E4226F5ECD3DAEA01CB26040198
D4354A23DB779C68B730D263835BE9FA02403821733073C9CB925A84ABECFC00
B4212CDF4E88876C2DD4E53F0655CE9BCFB29BFE08071774366804FA232E4AE9
69BEF18F9D12E6298288601F1EC2134C63CC7C4BDF775189AC03B11D99302788
4012CDC35C4B36242F8D77D18CEBB63868A8696DD77372304300B93CECBFA91B
DD117F776107E069320688672BCCCD7EA068860F1C5275ECD83CCE036D3FAB60
D3E81A470BDDC46AA93CB8B89B768ECFC2FFE245B4D5889C9730D6ACFB73B7EC
F503EA4B2A48ED084D3117388A7BC517A62B79D15B613C7179F4202A62F9637A
C3E4977E95A4B4BF0A8078677867DA3E932BC4DB554403EC5566D6D4B270A06B
A454296EC17A80F39A1AB8AA828AE35FDF411CDB247C03750FC0A519E18BB374
56FD4CB9D0E370FC13F87C4AC4EA7673552C9FC1D2D7CDFD1D6BEFB5B196144E
026FD76EF7A00B67824476F96D2509BD44228EDB076F9A2CD31FC5A9A0E5E5CE
AB5156B5D49E23EC0368E3F06BE8A2F5BCB0063535973656360E4DA56184BE96
77D3547C4F2765665237431186B013D4409759831BE693C4C5DB5105D2463C9E
329DC526611795F807B89A0FDB65A794A20569BBC5DE74B344D38BD0D40991A5
C7C5B0545F6FA98F6E6E37B1F320E8ECB91EC67FB176F2ED906086FB7518C716
796583904AA57A98904F052A50EF84D1C46CFE09C77254D06F998E0546CCE3F5
5865F40BD116188D97D419AC2486AEF82CBF2F7D2702DB352D0874442B207485
9EB49313BA4D088B883EE21D9BD24B48E4D1E03E7378C05B62DC060765F6545D
D7B4C68A3F79464C1D64E30219493B2269AF048903F0EFD56598F4761FA6C4AF
B18AB8418651E70103F11D2A73FC722BD5C566036CFAC5397F2A5132DD6BA093
63889DBA63C13F646A21F005F985B4BAB5F16D091CE02AFA30376221ACC298E2
3BCF88F60EB7177E9F8DBA6CD3A85C53DC3E9A25C9DAB9C9167F560F297B6938
984B43F116B0E2F68451E738E564D8EA0383B804844760F29F3EF6B7AAFFB00F
D028B380A731A931CCA7A7E50E661B72E46589CC08EA87EECFDF36B819B07306
C2EA8AC0D98D851C9629B978FA10CE2AC0425C783999188799D4090954392AF6
E9F4038CE1ED6F82BB418528EDEBF76EE979AC3BC155D6E552A5E95D70A7F43A
0B52F4A5BC198903BEE40A9F1FEE2CE3375D67D77D11B92C036083EAC627EDAD
B51EC95DF8E053F2DBB854C4BF36A564E94E1F4E6D6FFE6BE23910E7F181D048
F238829D4219FC98D8361B713301CE67079CBE840AB7599E300326954D1B0371
A976F0AF6125EF2A39AC82D44CEEAB043BF643DA2E708ACC998C1BB5EDE3A45A
B78996EB94C76FC8565E940A10EF9A7C4E085759F390036755C4BFE975CE298A
A809245DE5FC9388B2DE22E4845C63809DD183D74E0A1867F2DF1CA821C65995
B9EFC114DA73DD33BDC0A4478659C278A9FE1825AFF2BAD4443927443CE0E02A
21D2B10C931C8D48A357518AE4B9309B6B5FE9CAD70E8E0CF86E8A78841C25F3
AA946FCDB5C0B35D25F8DC25A91F6F7C9417F1CD89DDDB2D5CA8BE744B66F291
4168ECAE916E7598848CF32F6904205FB31C974FC3B57A136D3AE100F0C64B05
1D830DEEE49F6B27DD39AA60FD429ED3FAE75852C3BC7CBDBB5EF23FC98FFDBE
CC7BFB465503F057E05D147A27AAA2684BF08AE584333C38C58E9EE8F6D2EB9C
AEB51D021C4A341B3FDDF6431296AF65CCD9EDB93D121B912F50AB9ED5D4D785
7FA703F287D953D5DFD4043ED3AC4DB1DA120971ABC83477E84B2840B2A298B9
084BBC0CB1E5DE954EE5ED85BF929E901E486070D31963A81F3099074342B9F9
954221EF653D3DF116F14841E48E53B6BA78A8448A960D67BA679F0E23F33D94
DE74D0F6A2AF779C4C3EB248CFA39F91D15850028637C0C3A49EEFF019DACE6F
F4D5BD4090843BCAFD8F26A73DDC800C45740A543AB3F5D165D628AF8BF48D98
28A6A396F42A330D1B6C3619E2C081F4DE7D2AD9CE93EE974EB6F862421F6F37
283AFD0F95C4B889F3E300835F05CF54722827FBC24AEF08F6DD0BC6A79A2DB1
F62F0F694B66190041E8CDFD55B70A87E0F22F9EEC3DE6F4CBEA398F97AE8DC8
1463B6EB76250CDBE461FEC4CB28A426D048C4DFAF41B77E0C77F98BF02C1CFA
6831ED5D752894DCE14E8D9FC821612206DF767057302A95F6E2087833D3A1D2
4A140CC6F17626CAFD038E882F05C7E1D1FA914585B4DA54EA8929314A5BAB55
73E4A2C493284AED0D0F1B79AA194C275E02F4F59BE1AD93667011E287C00F2C
E00EC61E35AE94632F3BCE064A0E572C61863C9EDE9399E5B127D646FAB0A861
2DCA1CC8DA7A31B9FCD612653E3CE63C5F1C17D7739FEE56260D0D7ACED47514
FF9A71AA3A1506BB97D6D835DCBA805476190CCB780C65819636683431C0AB62
C1B0DDA82429A2F79291B7A93D8EFEA9A41172D1D82E14B0037ADC38D7A957C3
EF29D8FDF6C33B5F6934EBF08B455B33BF56AE6BAA58657D002082B89E2DD088
5CA956529EA49D7B913374D2B0BC7CD495156D56EC5DA36213685C51D23EE8A5
60F444B113866881201429FDA949FE1F364C2F744079FB4D4566D86BBC45F71A
9A9CDE4364CD69D506E7D3C91B968595DABC4ACF593CA80F3E58961CB4947776
D74FBB26179943BA3BD8048F7A4B4A79C9F2E7FC0A2EEF1BA2AD402B62CA26EA
8970DCA4F35C139CBABD4FFCF1E225DB2E57124BF3FC0BA485E050DF883E4B27
67E236BE2B8910495850B3DBD091C7D41B7859835D08CF0AE8B3370849EC2B99
49EDF0284D9893D32EC0B93813D97A5A57A4FD83412B07E613C4798B2BB2DB9D
168701DEC9254534134F6B96B585D142F943EC5C1B040C1139273FE875008B7E
2B1A0BF9568C867B2214CB8FE1B9D5293F54DEF92E8309347BCB3C08C522B570
5D78441901F4B7ADD9CEEE5E294C0DC2B645CD0FB207639CA85E0B9CBB39BA0A
9230DEE742311FE4BE262660F33321AECF7862664465B500ECEA5BA15FF061F8
73DA9220FF3CA685CCE2E2A6A8BC940EAF782A3DD97E9D9C38B45594AD68EE45
E30C46D4E9C574E71C7668BCD2E7CE3FCF7D9686A1CB82FF1A1D6D06E838F724
5B1347921D8D93659EC8BF539B3957B2D3841A0B5BE40198A48B0D8111B2390B
732BEFC678918082AD45111EE91BAEBEDD15FB65955F91EC045C075D418602EE
DBE78843300158908F77C0AC75956F921FB6D14A48816915A6E62D71C1BCE41C
8561C0B0405592F53A317A31B5CF413C5A6BC7DFE8BA9D7BE47AC7A2A8BBBEC8
AC451239E34711ADD347782194D0FA7B84B6BCB024F120A3F47243D609E4F31A
B7E5EF972F4B58A844437560CEF500FE67D124ADB60BF52E4E9BC0FD0D96C88B
9AA1A0B9AF369144E649055A26A1870924A2A3E1A00B7B58072B9652D8E95CFE
FCC11141B290CA0CF6CB723D524549A09EF7E53CEC2BBB0B04FF7A6B6B14502B
01E63A95E4064CD4DC5903FA1BF5CC34C891A8CB5031556671A309651590C702
791FD93386C254CEBCF4910CCDC4F70DC503EB508567C7F34ACED55A535E0B2C
265885668D17B5DE1B8D5A413287D9E221BF6768D98EB041A646C0D98A81B0C0
C4F5D74DA957171B12AF2E7523D08F4805C5B9CB8D7554C988C0146E29A3F34F
31755AFDA4827CD0583D9F91D8744ED7D04A96240A6E17F355E692230B9C7606
CB953B09ACE65910521533282982B5DAD8CD73B2B2A80AB7B924F1BEAB9F601C
DA2C40EF9D814DC28703DFB713F881EA0F4B81A8F1FDE4B3C92CE1A7B41F639D
D64D65594D5BB7300B2A77A5CF0158D31439C030C0B76180F42BFBF941CC362A
11E0956B59E8BFC7BCF02E84F082177FF2C45E0D7B853BBE00421E537ED904C6
E76149A201DD6E42DEEAB81B139D1A8F8A8DEAE7A60C951A08B01323277C4426
916D44618D89153072E52BB8924E2A7A8B42B08CF5B76BACE00311EF3330FB49
3AD8A60B3FA72C8A70DC76B51485537824864F036FCBA79DC23A649C211F1121
C368BA40F4B9E6AA475AF346544B32F2CE1242E8219C6E50F7F4641292BD3B09
8CCE53DF66598E15608C6EB42B2B040E1DD70250CD8055A3C472569BC4F12A63
53A625EAEEFE4EF72DFCB88273A36FA3EB0E7D7F996B4FA104E4D7C01371CA43
26FE5021EB4EB487C94CFA3302F6869D4B03DCDC844F3B471DD776C04B99899F
5C9FAF83549E6D40EDE1FA13B33C667FE3AAA02E40BC8D87E864C1660AC53765
9D4AC03A53C7D8E3C246E62EC681DD24CEE43ED6C0722F0DA8BB4173E5204AE3
B8BB5EE5FFF2A6FF08F613EFBC3F5F3110CF6F950BA7DF83F236B159210B5C33
262C6DFA8EBD7A1288AB728430EBC19B99FB9A447363332B9A5FD5A6E869C1E2
1937D1E5D012D098A9FAFEC534D84301584278B532F4BFE667A028549A0BDB50
C53E3271232848F3F8EF7F077EFC95F24BF3B4E0FA5555C1AC17D47B5BC99D86
0D0253AD96C2238978F2FDA1765E1ABD32FC0618AF2E58226730CDC15034CD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29650B98ECF391A95DC4C962DF3F79C7E16FA46
3D1F514335FCE76315CA77389A431B2238DB083AAC5E39450EF20451EA02E057
2FA58CEACD61235271A975B0C11E533ACF0668F3288A152CF5343F52865C1827
BBD06810473DD85A580AE391C17BE4638F1B649958338E69CB56B870CDD727F0
B655F71017568EF083865FAFBB85EB69A6E26A45CE2C98622A6A385B447E164D
B7299AD6D1BAADEDE43E477FDB504AC6B808540C553DFF75F3A00495714800B3
06BD5DC235EDBFFDEE3E46DD584F04936B53C3C81CD9E76D9B6CCF78220F28E4
5A84B0FF35C585C18B19C61B51CA3E6C3AE72F666D681A4FA8B2477893175F30
08EEF551C2574B69A17F5C62AD9CA923E685213D53BFACB55EF49BE17964147B
02C4CA4F0806BA52F8A891A88B2F519575FD86F61DD7C7EE5F015B1BAE83E79E
3BB86BC0CFF599A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBC754DE4C1
BE1E185A26488ED6138CF334D63A75CDA61370B656188C88BD1E7273E1A42F36
C0C6E0FB68F94CEBDA1CEB0CDCC489BCA1DBEA94AF6F37027434E22EC932CA5B
E3B470A5800B4FEDC4A99823CAFF87E567B96572BE6D9DA262C5151B948E529F
0C7A21052F1A28CE343530C96B7E92807415CC510ADEC7AFAEE3E54A00B1CF2E
9D4E9F057BA99AE776E482E332FC6F4EBD5E2952106E4600ED59E41847A2C431
ED3DEFC7267AD9DE87E23C236E70E1A6D7602606094B0C91DCA122F0BB3D4FA3
AA0CA96DA71466748187222315252264773FDAD954D114082DB6BC7FDAEB7C85
3A4B7B464A26A459F4A2593310245B1B9E7B8A0B7FF55338A74D2023B34333ED
B0DEE3ACD02BF724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA3C544CFCA0D01
A294276F86BA1443F753A7BC8B7A60E9C5DC48A3DFFABC322A2A3F62BF60D6F2
439E2D50DCB82C026ADAA0169B6A38F6E8D65D483940C97544F888E9316A1381
F8185C146C3B2548A3817DB684926C2123318D4F634AEFAE03E5D4BE6B04697F
F3ED2A83E6E7875D6C2D53D4216E11F852EABDD845959D6C4CBC644B29781604
7EB63717E2C06056A800155E42E6B63290DABB71D4D1B394D7AE82EAE4C82760
C5849F6FC5FB394169622625F2493AD95E1A2BFFD0BB023BB23B95A95C52C138
94C9156315E5AFF47E4041A45DA7B0CABD8DE5F42B0018F834D058A09E910DF1
314D1B5A2E3CA886E10296CE26A4E176415F55FF32E4308FE22F0D0A45B8D17C
B74BDAA4BFF6DAB5380CBF6172F37B84598335AB3A61FB3C873145863BEC1B5E
8CAB530411E7B006480769434E9BF13F872380603A47CE5A30AE40FD497F4586
00B1A87AE31E65B7EFE7B1CB025613E53343001CDEFCD8F5E62795B990DB5F01
7A12825C0D642263A70EAA178D11BE7F34711A204432DA217576D9871A8E8784
028006F3F3248B5454ED6DC729CC5070524D1F1367E7D491B5803E4E32D24FDE
0B7C56732957AC35E56C635F6B316C147E4148F43F68B433E736D2E15CBE3A2C
9D93556A1DF4CEB57A1882F307F0EE099AF080659A1C90D89200DDB63772D73C
36E0280F8ACDDBDE5CD4F70A7A98F5267847CA1EA003CAAC24B337D6B2A8AA99
A53780AEAC7931FBA708E4052579960B3291B0BCB3D6138198E70881E7FA290C
6A3B164722FB8BD5CDC14E7E20CB3586C815A75E1C0585250D9F6F52025D82AD
E11AFF1EFF8F6FA46187E0BED9DB2F1525FF742755D9200C3C1FC2E172E0DCE6
76DAC7827316D2F90B3326C12523D372BEA69688A21D6EAF601ED4810A03B876
02F6FCDFB887A83C42C50F08E66B611F543149B7E31EC9602D4654DEB38E8E94
225D8F864E791EA6689395C19ED992688C38D5AB822DB77434BDC79A29F57E30
98ABC7EE49F007589A2A08E976226EA7F091A006D3E457F0FA404657430F1CEC
53881DF1B3457BD811E6152E7A6DA01FF8F441690E196B19402154F4AD4A1522
5015497AC2A59B07C199F94E3D08301AF343C837324B9EA595BAFFABFA38EAF5
3F517136457774C464F3D84202CD343788CC991B61ACB6AD7863E30EF2DEECFC
D5E0AF64571044339C2037CF6834EB429617C33666A20F94506F7AA03CEDE934
367F083F6561C939669E28B55BC3323D71FC7B4221C1A677B413EC24C29DA1F2
D33041FFA5D3B62F29CD0570748C3BBE64AC88813A2339892CF290B7D9CD73B2
B2A80AB7B924F1BEAB9F601CDA2C40EF93971D344A24F67D9508E4AC3D5068AA
B174E0965F73E7B3A5F532B99D116357AF029CBD77D99A1656CDB76C9282269F
570C0B57ED78FE33164934EAB70ED3852DB084C16B6097540C5C81A8CF53AD64
448E9130C01AB94B0657A5490D7BA7606326881C5A6CCAAC22D5454B2C1EB503
764C5B0691B761FE3254E951B3259B2EEB4FE37392533D3695FA6890A620DD86
3BD5364A28DE4283D9697AF2F4D165B73683B97280E3F8CE4547F56244DC6838
06DF7DE0E28FE4D056969AB8C04466F6B2323849E5A87116F694B78DE928155B
9D611E085902458C96E9107074347E144EBD38FF9C114D75E7B867C216989AFA
4EF66975C7C64CE5EC2AB958361D31BD648E1C0291A57F6AA25FF78D0E59C262
230123C5668C34A7178C9284E340D18BFB0BA4BEFE101D5BEA3B3CC5C384E1FF
F89E502CBB5561E9AF3C9B374D73F52611F17AAA550E93C8B39DEFE59FA506F8
812F8DA2BE72F0827246FCA44E4A772C5FDAAEFC70EA6D36AE941E3291793B66
598F7718C18CF6B0D1B1310C75AC850FB4C642FA3710C2C99051FDAA642A91F1
947AAB4A780D034BC00B16D7C4D77CA697B044812DAAEBBB8006F056F294A4A5
B77983DF1D1B3EBC3640262FBE15DEED450E81E397D0ABD05A9CB3E301CBB6E4
5FDA05D04DE260D94722956833588CADED91C5625989AFE8DD9E0B1844B116CE
5CE8DCF4C788F037BD3783D1E73023BB66A4AE15DC7959BB36A10B51E9638794
BEBDB65521D0010402575DAFFF833C4D59C1941E14E0BAECD4A9FBA8B9100A31
AD1DF7CE7CEDF45D8D75B8008CB234A10836AB34663A141DA69B46D41A04EDBD
E8A440911B183955048D808915D7BA588590785C36322BFE321C6361D12879D7
8AC6396BC3936BD40FF1476FF54922F2FD14A340951A0130FAB6CF0B56BB38CE
81015FEDF0CC3F7275F567D40E28BE131B0E4314D86EF0D6A8F840F462D9B2E8
C1F2B51F6DA60AD71029BDA0BE43A26E6F18EC0E9085AEA66291B62D69D698EE
B767B641BCC569A1EEF8A12E6263CE2C073CA42993FD8CECB8E7948261EFEC90
FFF20B1FE3119DA2CB9F6DAD1D6382F999E9F0692CB34C1344C7B86466716272
82A8947668FDF9CE6C611CD1BE1A3FF133DA6279F25F80B39F4A584B970D6156
292B8DB08399673F0DC75F1BDBE806E51B2946873E90D509B25853AB0F25FCA6
BB860E709684EA675A3C3C4F60A604BEF0EFF30EFE00E05C08AA50EABE80B564
D7AA72D05EAEE83D45EA12B8C2EBA316F10AFE920ABABE1FCB5723D66953BD9D
0A313F39A6A3DAAD30374F96FCEFB063F4E02A5A1B8F12733514B688408CA41A
769DABD9518E4DFEAB5DA339847235425AC5056E7AD9D54E4DD1BD7BEF204EEE
7DE594518B78765EE60502B5D4D8FC36D030FB2B0EFDD9A57200A82974EAF0D3
6C036B66FE05FF7E29BBBA2C52EE0385F33690BDADA2B0D538EA64AC7CB9682C
E60E17947E7E675D19901C7E8272CF0D458A8B0CF51077748D1F0A95AB030712
E24D053E101C9FD35AFEA96E669B1101E8644A4FA79BF0E2BE0D5D63D4C494AC
CCF815B9A464B3C0D47AECF229AA1EBC2E208024F3703B6B0716899B18263C29
2E1E8332654022615883F3B3D95ED3FBB8E563C2CC64E2DA3631AB809AE0FF99
F0DD777666B14EB7C80CEE58DB653AF6DEBC59D3AB82A2891C3C5224977B9464
55E674261A0932ECB029CC6CF4EB93729D362EF1C610E85FBBFC6151D81BE225
7C3E7C876E836A1E6009BE548E105149EB6052FA14D106E242C213CB237B187A
7B54F41B54433526B5BCF13ED43C4C3DD6C02669F517D7458EAA898572455534
CD8DCF13B125739FAB9FBEF8523676B7509EA7AD0D2111E3585BD961ACC52E50
F44E54C91326E481093C909067BED686BA113C18825686F9ED9588F06261AF3E
8D1343D17A35A511312DB573060A7E73001ABA76E395D789B19B969F25140187
92CA5E16B365ED83C24C44A68CC2E0C0821FA6C1C3A5B210E9C2146C0797AE35
5583D824B2BC3C6BBA9B877B857DA39049F5887F6C75EA22E2C1A23B0A23E741
9FD67B5E29F807987F3637173FA779ECF224B222F7278597CF205683610586A8
BEA497E867582A17B16335CEB85520A70B252F935F7CDFB69A1F8A67E1041C48
2B300306CB5E11A1DF57C36C6E9EA13C0560C3C8A14BF98C1530A3598F35E26F
2E8ED5D8A0B0A4EF950112B2A40681ED8E00E63D89CA32AE0687DC232178A07A
BFE12694DEB838C8B360EBFFB8D45798018A310214E9BEB7C62F58C1E729F224
EC05FB4EC009EF48E7E56CA2A9F84FDC460E352F0263ECE4B0148610E480FB16
13536FBB8EB7DE66C5F0C41B72060988FE907F39B32311E32A9B1946D8CACA5F
0DCD4EDF3A72A9A4A949376BC805CA2A372CF172D46B6B94412E7CF8B2C54489
E6D6A897790D5623EB7D6A90860842964426D9E506537B3F8B4366976D3F56E6
CF780B37CE39F605793D904FA4650A8AD23254FB4E9E9E4CE34660A7B6C08496
7A50FB5E53F0EA8ADEC17CF4BD5B6DCC5F7E835C3CE7D4454AAB910F223E3FD4
0709EACEB5AC116266894AFBA1C099D37DCC25C54AF0B2552C97BFBD1C6C0062
488763FDB07939C7885FD686DBF6C8D2BCA099078135FDF722D4C99AB28D06A0
A4080A732B877EA2DED6026CFA1807B087EAB33A3B2BFA56928987EB0BBAF4DC
72DA6B4EBF8B9D022DEDBC3DE44DD04F6367E04C3CBB3400BA3C1943B874CFB1
254F9A99F998AE7D06DE000B4293F4FCF1D78EFDE074FA6A057A6822533E61A4
C1E2E7B3AB456D19D9769EAB62AD01CA1E0C4F2554BD6F1F4C69E46C9C220B8A
6643077B74C1E100F1D9DD0E0ACD8468C5EEAB6B8AE5324CC077A3B24AEF2951
4FE023DB03883EB57564AEC4B94B42E8849A76945AE033F5D1C37EC63530A2EA
90F559625C437D4AB2016C4670C92D7236CD1D199C612555168BCFE359EEEA98
E07DFCAE1DA5FBE871D8035F777CF210384EFC671842C40D188F4E304C4610FA
7CCCF0512FDD24CB36B1F63F732A2D472C414FAC37B3A34E1E9C8CEF668572CF
91AC3CF6986C9F252363A207D88AB66A7C0DA4A116B14F03AB13D7E149FA176E
E68606F0B35312506C02F1A2826BBA36B4A8C4D61A96C406DF4CF3A843159D3B
AA527954C016D28FAA91548361B38A729CF1E6DF63A016E3F17980CE3D505216
E026DEA02B7D154B2882A031A276522741ACE718440F9AC620FFF89CFB7FCB19
55C7DC8933C690E226CCB41B71BF28FE6AA68AEFC449D6F2C5850581D95905FB
83958C19FE475DCA7075938672E207A41ED8B17A35CF2E4C380E50E1797F8558
26EAB926A054616AB45BAA486A85DBC2F45566226D9EA08B48360A2C205DED1E
30409EA873F16CF157EABB93758D7B49B76DB0ABB2C2646D3F2500142328D8D3
B40136F3CF6DB796FC6949F82AFF3FF151EDC1EF95339F55314E30DDEE869CFD
0E6BB75FD52D81EEB6FC227022120BEF4803811BEC75CB029A6DB10FCE7B5992
5A3F5FB7DB35B3D7944B49B6283A0129D49E7E9AFCA904B37EDB25A80BF2A041
0C67EDE128761D164A9843955BBFEC7213307B78378D8CAF1E08E1C53C079B8B
EAA3E0F907086AA23BCD6FAFB826793EBFED8F1CDA2D49D7672E195B09727629
C1A422D0405FB9B60B749DF353AFF70433732530AB1063F98984CC6C46F3E412
CAE11A023ED7D360444EDD72A0CC432E23DF81945A0E9729DF3EE2000E417BCD
E241F0C257CAB8981A6EA85C135F60246D47ECC90571044E7021EA984A40DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5E185E4FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CA51C950537F9643D44B6981772E8546A6D79EFC00389188E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA40374D87CAB4A5DD8C92695818BA435
6E9666091CAEAC8D1832F2AD07EFF1919E9BA90194E24A69649F0DFD0046D39C
47645DD6E78973BF5EB3A43922976B876293A1ADECD08D35588B794EF9FE03CD
D26508432F9ACEEC0C86CA4D7F8BF0DECC07116A05B5D6D42730459DD44EB860
468A7C643142F5804346C1264135E15756B43D90E252FBBC1F618530BACF4716
5362C1E0F6B93CCEBD0545DD362FF49B08C9033A1E95F5F8A1717DBBA7AAA1EA
72855EB4ECF4832F29721F2965759EDA7ACC778D03F409DEB008EB2142A1B4DC
97D164780529938A4FA7BA0BACA855B706CFAD5EFC9D6CA122FB2077E554C9C8
4A1760A73FAC61EF6C050296ECF0188950E744AB53050CE216C0166D14BAC758
B30905B56CCEDE37F37167FBCFA2CC9AF077A23862B4ED64CD18471A49B62240
FEF22F4D82468BE65F424F267E9713229F7B3ABA30559D9E4B6B06AAF0053FF6
A81D815ABB1F31A89E1F1F3F3712315F712F719E2104FC38B591366950DCA065
662CFBC9594DDA8A2D0B424F25A1A8E0DC96E47F52F335D4EF5B45ED1A9CE37E
2A2A6FA2C2D8A082FB786FE87094992733E0E8E7B556BB4DD1B0EFDAF667A918
171169D8669AF155525E2C91A8525079B97D9FA6FE5B7DA4A263813F972B036B
CC08CCB25B2BADFDB659F305315BE273E5D52D4A69DAA10D9AC7B96C817AD352
B5C4397872ED1E0BA765B0309FE98988CAFF8DCCEB5A97352B6F2DC523CFE336
6996B02D210D844B1FA28AAAB93DC7557045787E987A0B316211C89EC7A8EC3A
02D70409252A8D4FA50EF1BEBA5095045ABA7952457E62E4081D591C36369479
139F23EB1F9D299353CDC99BA9CE2DA27F3D413173D9F296B3DD186F8C3F8658
C91B59C58B51B79E9588AFBB6A2D10D335B76934CAEC6AB8785BFB6A876FE189
F7500B393E531E77C5D38E2FA764893C50807D386C31A52984269355B641D8A0
414D327EB4BC88FA87B910008EA8FEC3E81B8D3532498E7875E1593E1DF8C371
9500A4C4A0951F09F5CDA85FDD822B626F0B4DF1B16AC3C8E46642D95E4D5E8D
E9927E16E5582217693A50FD1F5B7569629AF50EBCF7152E3715510FBF60F167
5356A9FECDA71F649EB3C250BFF809D81E427E3BF24E83613E8242308FE26F51
C5F52B538A85716A62F327A107BD87346338B9DB6F83FE557134C14144A554C6
2461266E19E262F020AC43AC01DB8BD67102E1322FD08D6A1AD08B87EDF29D57
6787EF5896E8747BD177565DB814951BE7CFE6591438894018072909D00732D7
1F63668F46B20EDCA647E66B811F82F08DFAE1979E9ADB992C57D4BC9FF7769E
0A6E389AD0B2A5D10CD4C41A40097EF750675B8D8743FC64B26BF9E44921A707
C2CF3EDBA686132F333DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC4B62BB8
8965B8D22AB04A724DED273BA060E797C1BB765049E61C0B63D478DBD9D1F904
EB6959B1D3A39766501356651F2B690A9445963F346D0667986C994880FE8971
FC86F06FAA5E98124881CD477B308B5B7341714EB80B6C57DDB50EC74C20E497
DF8C5D90DF2EB6F0AC1521FBFD1538DDCF25F9748E9C7C49CDC758CA99C4B063
212655C879F6EB96BB55BF5157FD09085730695ADEFF8C47E610779597A25E67
8DB4EE7B616DD99080BF793667DE800E6DEB1FCFA76FEA448A60401A3B11DCA3
E9524EAAFAA83DDCD78D676E71B6C51A64A87FD82AC7FD782D6126DD787FEEBC
4A63D583CE7227EC10365966AF2C08726F27A20D095709F949F404909374B2CC
B0B57BA8F2F422BFF55CE7D534A2E4DC1BF74D5A454BF4485E2B7DC8C9A39E76
8F162336CEB7BE8A5C27AE952F4946D01DD1D65C1D50D6E1D486FB5FDBEE9826
DA01DD8FA5EC384E9B78FA5A7F6720D207815F79EEF626A126E8005FCA77ECB3
172F5199E5C54611D9D515EEBB7192C63D22D02BB2A5A2727BC0458997642898
4A7DFACBD3FE28A8903CB42EB0ECBEECE10F4D9FD0C5B9E9F3A14F9BFBA60CA6
556B0473D5BBC4C67C2D25384D8E7B9EB31D79E2C460742138982CEEB80F3AA6
BF99216652ACBD7F2F5349E857177D94A431C46347867CCB8E4EDFC64B532A24
C570498BBC81C4FBEB957EBC6BE93183DE178479FA333A00B88F0BA650AB274E
35E9F7715EE1E8617FC7BEC56879D91DADEAA25F850083BE6CC26AE7437664A2
7C1C6EC83AFCFCF697DCC8808A931CB62997E29B6877A1BD00BC1A7A9D57AEF1
E1DCCEEBAAE87CF5DEBCE7349981D834A1E8AB45FFE334532FFF6EE351252820
E234CA2EEEB4DBB360CA7518709F74BCB9FEE4077CC0C490F7C2A4855B442011
F240BB7390D79EB357A06CD67E2C5BD39E004F55F754A8E2469082BBCCC3E63B
027A4C3DF0C328E89C5355F29E7EE697BFFECCAE75C27AEA6C7B73B4B4E4A0DE
B874CDB1570739B1A1A213262E4D4AB784EDEA3CC6F0872C28108F7EBBF5BF77
0C0BA6C712287CC741D17C19DF574028247317FB22442B6DAAD517B60D75302E
7A8703A70517C9FE24A6930AC314870AC4D133C60D9CFAB56CE8F8D14472BA88
3831DE798AD51B71C2CEE666A5693C95962D6AC49F31A5D39135CC8D762C5E53
C23CCF67CA8BF1B1274494E363BF0890FF5C1FB5FC75FD528B2FC34AB914C268
C8874E34F01A8F3E17F33925DFE5F0CF45E34F3E676F57892E7B84E9F1842147
0D2F0274738CB7DB4E9A14291AF15CE3BBD6B3B90E59C99B4085E7065FB50E28
631D2A286B9862B0C69172A7B286134925909155C60AD3A77AEC843DC75C97EA
CBC20908E329F5DE8442FF13EBBD0D06D7E62CE534576EC62AE892310FD56056
AB112633DC84FB7743B5F73E9DD0B021F9ACD205A00D5C6228AA1D43F1C6F0E9
EA338B2E8A829D5D4EFFD8613B50B2DF38EEF34AD0B05A9F13D36244225B77A8
8166768942CF7E11D8AC59AE55F0F7DBAA322E1E5D976C33A4C1B9D5384F70AB
C8F9F74EC9689248EE97D7DC3783A048D871AC6F3464517ED20118D09F22813E
9A8F6B24CC94A37ED7FE37D7D03026506C2132A9A68ACF4E48AEA4E44DD23AD5
437110523A774873BFDB9AE479901957507D4B848A373D2FE906518513D56A96
586FFF4CDCB491617876DC12D9D703BBF1E814059F231CACE3B876EACEA2B463
B4F24C1D3D7510A603C11F295FAC3B649D8BEEE2DBF85283D1B3DD65CB510702
758F21F8DB9FABFFCDE8B4D3BF99190383F85FB9B692A0A29241EE13B4F6714D
41A2DE46FC28194AD2063A1D0C54EF86D11A29D25C36591746DD9783CE80D770
7A404B5B7F34AD778608F4CF9EDD7501A2AEE2F85AAF60771CDB854398BA98AF
AEC951690051A2662DBE19109D42CF3575A4130B81E97C2A9BC215A2E2A34BEB
5AC89CE072710DEF408694402960947DA3B6BF54DA82FFE0222F7AB0E97B3290
EDAED775EAB0D7D553F222A3B014EB44EE9624B0C96706BB7AE92041B78426E4
C7EDA2A77A7C129EE67D6D67C2BC96C880A6B435F850206D0AB69B74A7E9FD53
8C4338F8DE787EF2B604061C0118BEA317D3620FD9DDBF75FB63DB4ADBB1652A
3583ABE38CE55C584D2618007F4825DFDAA3116D2B7E450C8F7B16278DE567FB
37E8F702A228AEF49047078B06C8A968F278BA7BCA00EA900B2FCF2FC9ABBC03
23617AFE301047C9646BA848529E3D9DFFBC86682BAC2D53944F47E4D257CB17
98520F27F65D75B2E795E40A62C9EAC215ED0EEB650262CCC5BAD1744FCB6DB4
032EA0C0ECB7BBC044D8B0C662A0B19CE448D189FB99AF0D7FA4DA1316C3C527
9767142D132F62E0029C751A0D375757D95AE364394FC25E6E0D02C6840ECAA5
EB3D39A3B9FDEF15DA1F1505CDD37755796CD5F76FEA4D8AC7A08A586B816A9F
BE78FF96BF1E3CD52791A35F612F1A0E540B3911A7D28491883B928672AF8E70
6194412994A5A0298BEF561152F82FF64CD3298D11287B46482FBEAD4031D9AB
6265FB6BB647FD9FD95E0A2BC79B11AF3FD1E8FE988132C26317BF8119C2B534
65DABEDF733F2C517D970B01BF2FD7C2020471CDA35DFDD2FA7A020E5B8B0F4C
98521838E9ADF7C3C36287440EF39417ACBBED2D94330DDD281BB30948DBD034
3D9ADA66016E6C568B9C0A0C4A73C9437FCF888AA207280ABF9C548DDAE35A68
2EAD10C1D8CD9DA077C6209CCF307F3CA7B27899569CF61C338637D6896C31B2
203ED9BF9F14DA0167919579AA0DB95C45EABDF480EA3CF4B3A2AED3A09112BC
30BAB3D39F3608DB614280F6C00FCB393A369DDC92C9F8C178381F8BC15D246D
AAFDF3D7A2DC3A686D42207DA8A4F11E9D2AE3FBC6D0D1E0B4A700E7CD54858D
4AADF5C4AD4F784EF7605B82852DF95EA04D7C052E85A95DB1A473D30286534B
C2879AEAA61AF7D4884A8EB089EC41D8282ADCEAED0ADD77CB46CC6535A81DF4
CFD34F44655FD8CB912E65E2C3DF6220D2CCF6C8DDBA6D106C6FDABBDF29BEAD
4031D9AB6265479B709F15C9FE0861B1EFA7553244799B6553BD3B17B9A4CA37
B0496ED69AF5A09A5441B998187DB5CD833C7720D85BF1D4CE33AE1F7FA543F7
E088C36B043481739C76BDED6913EE9012B09C8B0EAD879FDB6F210C8CC2FACD
5CCB89BA3C73F2199506D6C29DB39FC95FD8A9A627C9C029E2944A52FC0DE7FB
BED8EBABF5518939411D5E6363F5428EAA78FC43CDC0F87B4D2D3AFD7A3C9EBE
B01B039CF7D910EED2B0EAE03E5362E6605134C32A5C52D3F2675D503AEFCFF4
E247E57921BE32FD3E6F50FA8DB2858F907F68C5B0E5E882FD196514752862F6
32253C51B9E6E27EAF1E8931C8AD6D89DACAA8B7D2E10D5A652FC71F054EC8F2
5C6A329F3FCAED87304E7D033B140450B59A4CE883C56B160A8E522A32D03D91
276D281625075F5A74D31A40C6A5FE6298C7F21A4B68811A62D513D7686C2711
10A7F493E1C414E2EE4227588F31A72151C624A1891BE4F17A3DB9D2AB93A46E
A480468889080FB68E55C2462B7A99E3D713A42306C23DBAD3B8C888856651B4
3D6E1883F3AFFC4CA1F11B8FE226AE94AE667EC86D0CD991E2B8FFC78AE1A98F
8F46AADAF22AABA4D5AC84E686E3C5DD0DD39308587DA7A93B760B81A3775878
9159100F7448EBD3C7E60F8757A1704211AB51C7E9FF2D4FDAB1459C1B30CEC0
B9FD482C14BABEB0508DEBEEC310687B0C336ADEE279901E23F04616CA5BDADE
FAFBEA1101594E7AFE32EFF87E6CF9D7512C86E020FD5EBEEF83D6960BE81EBD
E86831AD29174B37E924A0BD818E68725223941526BBD9CFD75BDB2ACA1701F4
0C4B04A804AF3900FF4E5ABFAEC78DCAD7DC25F38D9A56D1DA64767DE9D40452
76B3DC275C95EE5F100B010E63E89B313C61542EF9B643F4A16393C36A34AD93
ECCDAA8236DF8935D14A1401C88891D11C3F97676042C67CF23885C68BD5B7A5
052AF5ABEBC5F60BEEFDF2389077F689260C4C5ABF6603D54D05652F18E49C52
6B2EBCB52BB0102825D355BD46880947881571
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAED089845046259EA79899713DD1E567F28
531DB889CA3267B2BE5B8178E6B7889A33771F86276E66C88613DE9300FB2099
A0299A8F743D418E1D967FA5973B33A45B38CD6A223B219D9978D3B9FA37E805
85EC0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D20D2FC1957B5D7BC7DD0F4
37F141CAF83DB0823CD6137CFABA19629F9D4EDF961613E545DBF5CC635D3B34
FD5F89F09B25F78633F8D269EB8BF7FB2277CC85D95A094415358CA9BAFB89AF
BEF2079EE97EAD72E34963B05614804C9235E28F5D93FD74122FBE17C96E57D1
934E148831AE7C815BDCFDCECD662966EBD98F467990C8FADD97AA854076AD6C
685EB8A77528D0A206E2A1040FAF2DE1FD6AFD5FD97EAAB6149568991416783E
6083A9639E040D0976F90B757C56EA7762B2EAA7055CB375591EC4D3F37E7B7E
75DCDC8A7A26B0F7D23D2A4E5099310672F0813810DD9E7F6F481796A1CFD9F1
FB69E5350B281CA2D855D54CF0086FDEE6B7CB2EADC49766F44593DF86D497EF
920655B93EBBAE2BBD038F21047D0019EC29C9C067E081B140D7E73D6F6FD77E
A8CF1DFDBBD7C82821D7082423D46EB801F8502449684418493C3E0A8BE37645
E63963E93778DFFB58C420EFE7799210D7F82D96C36248BA8AD72B6782887B17
C171AECAA00C5BB42BDB21F7619180B8C7E0F275BF550881FEFF34CBB540CE91
F39076EE06BFD3C04FF933CE48AE61ED583E1E6C447D0E650388639A4C63245A
ED99989E5A0DECA423EA8BF7AE91239BC60BB0C77205435589588FBDE4187016
C112F687597341C49573618C5E2AC9BDBFED4F5F0D7AA5FA755F333D4E8E1C20
5588BDD025DD2E10D12737EA6DA8147E2745383500B602B33FD1E81B3491354B
B29A368A19347B4201FACE04375BE70371FEE910CCA9A8D8632CCD70A854E1D2
3E8A0FEE3F1C0A670719D248927BC493C2941650887333632DF0689F1A97B9D3
262AC9D1AED22C2EAE8B73BA9310637B99935074B5B5A3470CA5F34361AE5250
42F9594F94E973E95CD7826754E0C9F973B650EA4342168CEC6E67F64B36C58C
36A88F60969A764BC3650C994CCBC31AA72B65C3BBEF8EDD9B4EEC32CD7D3C7C
2D0FCF928E284E50261CB50149B5DE3DA8E9FD9A8AE3801C672DE1E3AC0A6629
37874153DA92EAF57D6D9CAAC52BDBF370F21DC09778880C3CE4E08BC8EB4F99
5A09C80357D630388563FEDB8468CAA3E1D293B7697284F9D5F00EA75877AB87
E1A511A616435624DC4A219673FC52B73455FD33D8F30E271D7552C0B48F6ABA
7456AF84581F7E1943EAC99BCEC941D4BBFED8796A812BF8FE7979E25B21E2E5
9185EB73DC7AB27D18E8F9AA8DE19087A4A1E246241581344C344A2B98C47743
50E07171A622308DFF25DA176CB79D6018AFF7308E78F05DB8433EF9C095630E
F8783BFABF571DF08F619AC9DF3BC40DFEC6942E2E9BF906ABDDE75397617A90
0BAAC5DEBBCD081C1F79870938A0B6FCCFBDA7018895B617ED93853DF77EF34F
B8BE949FCC4B047D4127B69EEEA74A36B3873BC99F98F7D176DF120FA59E4782
031E19E46D2B0B053A592E36D0A04A7D459489F94CCA4DAB06CBFE5786DDE67A
8DED5B4A18222CBB5F8410A77BB788B0712445052550944E73B03D45C39AB7DF
C251A781C3CF923FB543C420F7ACBDE3E03F7063896D3B578B21E1137F3FF009
AF8CAC6860527DBD2B62750C163DCCCE853802D04DE8A06DD65D6909629F782F
F974AFFC81025F300CD03A0ADA22C6863683473B13FECAED39B92390F4E10907
8F78DACE5A54C0701E385140447CB399037C7E89D53571680A9561417015FB33
4C602DACFDE349DBB764EAB4DE668AC382B53765C19B4218DA3D841B0C37F833
CC012322BF86C75D542DF2E2EC862783E843F960132F4B70FE0F289533E1BFAA
D203EFD9CE7624FF12E82CB300BD97F7C3542352CF2BFBC4B1D57993B3F286F4
673638EC5DFD9187CD9469DEEEFA077D9497E9C7B434701FC7128048CE8F2291
AE97EF2C4B2446425BCB89963E32C1C000CA13E1A1CF2080943CA932CF055E44
ABA5617E1CA933E7FF893E32E154B890317737F63864BF389BF0BA95B2A29E90
BB4820B6AEF318B1F51BA2DBC6D85F3505DDBEC9D461A404C48EB8D3F16196B9
285C45A8C015EFA716E85BEBAB99B8881902E500984ABBF068A6820EC574E9EA
34D55A9EEB4CD83B46200016F5279CC754F3D1BAB40098F2F691682750CEB44F
764CBAD8D78B073C566768BA33610DA9AFCC96BB51D59C946E05361A8CEEA0FB
CC751A7D639E32C569B568F112736EC85AE9325837BDB90C3C2A75D382C7F736
1ADE33183B5F1001732BFAFB8025D2DBEE17991FF93E7C09B55135397A77E864
8A0F2C9FC94D3224E75B5764395093023620227395D278BF19143B1B0CC12B46
E209935CAB6B0B33BF674B2684EA90A9EC1CDB6E0A5C04E2CD440B4CFBAB7901
FCE9FA0372F21C2C3F4462F60F5E9AF39131695A11CC6911C648AB5753EC8D7D
DD4250FBD6AC4DEA821CC5FE7FAE61CBBAD8CFF61BB6F90617233EFBCECF6149
6F8796731A9588EA033D08B6531EE79BBDB311C102F70F1D2D0F4DCD4FF8024C
28F61A2AEF37E4F659E4B3AE3CDBE2DF0DBE502673FF855FE49B1B3DCEB358E5
9045747E08C0ABFD19DE22BAF340B62D5AC2E94108A856F80751983FDC6700D6
A10203D03263B1C28B26EADB953ED292A4ACBC45E5D0C0F7D8416730AF4BE4FC
931E965594E0364E69310840B300B10370B58E49634684C21B738351E2228B2A
66828C4CAB067E6F73AC20C8ACF206EF6A61621D08C381C6793D5574AF08AE5A
4FC89880D4A8DB59D352913E906F101A72D8A82F7CD70D2B36956329630A3D3A
D9073DFA597ACB9868737617F9A60D1F58E74D093454EC4A58025B1F47E53E0B
124A48CB687FEC13BC7E4B2AB8BD549F79515DABE3C74E9CFF1AC27B24ECDD66
6CE26A18A785B966F2F872151505BA71296A18E04AA75B9DCA5660A12C174AF7
5DF1CDE0A18C94817F54639ABBD0ED1F20265E06C2E2E8DF9532840F5737838D
E90770FE986FDA5D5AF706F0A30AB0EF438151C7D39682CE210B2E003906F074
03A54AAA87A7CC1465CB48ABFD9A840A0577DC8B0627D7319885FB2AE0E2E2C9
FBCDE4B5A7AFCA11514EE22BFB83C77161145FC0E4FC155733F1048226D12254
88A9B780043DFE114D2536479E7D64EEB2CE4CDF95A39C74183F41E46F2C56BC
B59CE6AEF7E9165C65587A2D7443368FD6795C2ABC2ED198C21C8B2AF158B34F
2A3355CA6B6DDDFF3E2CA981E3997BBFB6AB9BFD7D0345CA2E6113E992D2BE44
DD9B12DA394FF35F4095DDD7C24466E5410DD289DF78C335D2BE90B5C581D535
A7B728D27C8018BECD829ACB6C3D9129E976A2427B81972798501C0392329905
8BB1F5EEB4BE7298EF4FB8FE2D74D05E250335E05CDD95E3BEFC41E38347AED4
C6DB99906ACD908F1A8355BD40273AB986F80E6021E31684F0A9F1EAAD5C10BE
AD7E583F9BC1DCB1EA3B8DA7CDAB8DF0717532E4799F0DCF5D2FAB1DBBA602BE
DD835C5F9A8D58ACCDA547DA19D30B5CA65024D9B041E66331D94B79E8F147BD
DB1DC607885E12FBFA7343990A15C4ECACD6F3EF87869378858BA7E6E918D5E4
6449525A49A6FCF0DBF6C62D83149B03B5B9161C5B5E1FE556DB10032FD0CBEC
14F929D5598F443721AB39551202BEBB4A2963B2335F47FE93AC02B61A28962C
501FD7FDC3650BA4F76CF415B773153D96E6BDBEB282C75459C49E086802377E
FC920F16A5B5C3E352E7F66C743DEB4EC14A3AE0EF469A2CDB297717FEC986E9
DD69621D48CAB56919F96605E9739136F9C3A05017A993D91DABC265A39EE4A4
94BCDEE07752CC7AFAC6B628B895011B8D2DD6CD203D4094F98FDC9BD516E83C
7C6381716EA9FDA8379DAFA5415D1C2836DAEF8D4ECA89C65758520C434F65A0
EF3B575960E66A4FE2DC41ED854A7CBFFE2CC5EDA0E749B9ABD3AA4631AC16FA
235350B6B6FC28EF779DA6FAADD5973C6AACDEBB66A10C4B283502A41B07CAA6
214B93CAFC08386B24BDEF8257F9D67C0361198A29891AEAB0DA742769B31A49
049F48790B9A77DDAE9552AA941ECA5B886982D5C52AB385EA99E84065DC131A
3CB5477840F1FC1BA26DDE200CAB31058AC27B6BF81C8077E1C40444E5891308
703A1A557D6AEC33EBC7046BFFDF7E1B7B1B1505B3F1266FB8568E4BFF0410C0
775773E761DDF52FAD0AB9815F70E9FD168C02851FCE51F6FAD7BC8C59DE0A5C
01FE0E5F3EC7EE6E6540D5A2602F113FDCB7341656791C3D210014D0D6DD89AF
38C49D88737A92E526BD45A921C4D6D0F443215273F91C3DC871217A1CDB8543
98BA98AFAEC951690051A2662DBE191A8E5C1960E5FB11FDD2174E1F9269DF8A
84A1E7B30B6DB37EA97E009D6F40978896B8F7A0B472D1F9FFC68F7C2DD95EF2
022EA1DB12DE17BED15E6180B4FD4920794B2FFE8BD9CC8E67B2697EB1E957F3
C6B5CD79D72A07B4BCEB3513C9CDF3CBB46E284416557EBA1DC1052CF20D8111
B2390B732BE5D4BE162AE52CC19143732487FBD476716288072D6B82F9F53EA1
19D72F24F7BC44E3DF3DA483DAD551D0ECDC163CEAD83A7B901741578486B340
1A2BA6C4DBF7F71098086A5C34185A184FF8283F703AB2148573DDB07F5E27A4
0BBE00964DB325318C01CC788CEB212797BBE778DCDB2D0F6726BCF115DA1534
3D9062C614569978F12A7A34A912BC2CE3D2B8F6230451DF08473EC5AF48825E
4C875F9484343056C8FE000BC275B51B3B89D7A218954721CABDD00A51A9D83D
24A69E88B57AE69AA5EA146A5F40DEA2745C6DE790840426E4462B33FCC33D67
A75F80431D059BF7D7804181BAA10F1B04E06BB7EC873DFABFAAA713F9F7D269
7844E0FC66B2BA20E774AFCBD2BA61C60BB9397196E1C263CB14DB4C1F669136
8AD5A88A8B57805EB9A7940908D65F17B4BAABDED1E6453952696AA1F098E9DD
27E4F23DBFEFA39F92762B1119C8FC5EC152984A0D172D7B3F99DAA47F04D725
04493CDFB35659392681091E8BA271A63DAE1D843DDD0144B44736C20B14C1A3
B36903D8020CD2604472ED1EFC14D9AC7341D5049FE377FD3BCA13CDE23412FD
61FD7B0C82E0D544CBE2D7C6FCEFB2EDB1DEF64DD6E50186F11C5AEC3E20075C
BF83EAE3970CAAD43AA7079C93171B82F4BA66A837B8F5F5E1E550B7E5742657
2795B0826CA7C36238430CE635F185EF89D90AFD9DDD69985B146BB4A22548F3
F933AC9F2C8A6E1ED0C4A9FEC3934C4287B17F5613AF6A0821CF81AA3BD93F1B
E1BB343F0722046046DC94B5017D456E865FB2E416C4EFC902E954F32340FC82
E3A2ED3AD8E3DDD108A573F2D6D22FE96F0FAC59B411CA72663A044A853EB94D
553D57B5FCE76E8EED63F5281ED9CE60832DC567F8D7F2C6FFEBAD7C03B3A39A
6D5A637A28A15AC6BD845371E230FE8332104D64DF8D25F7BDCDE782497DF99A
28330F5052B43E42A85375C7789DE4EEFB414AE600908DA5FECB35E69BE23802
902471D36C9CBD4BE29E699D9E444B315CC0967B38EED3AE9EAF2B6439FA9B89
9BB56C4C6B34EEA836994DCF06223478048A63FDBFD917BB0C94F62E311A760E
7EAC34725B94F3309A6790E005D50DD54B6E65F492FF36A3C8198B0E1ED1E4FC
6CAFCAF8B179D88092E01559F5EA0BA75A1E827CF41845BE0BF8D26E055340E8
E062FD83E83A49AC57D38A894A4AE4C0AF1AFD33CB08A071A6A76E9134A5866B
9C07C959F6A13415FF25D97BAC106F5FF943AFB3C5EE92636BFD30E26E916179
0F05A495246FBFDAB3ED718CC8AFFDE2BAAB56D5937DAAC57B83CC2897C588A0
9FDB14647F570BBEE55DC7F2AED23D898B757A68BFC53ADF8F88D7F4844A8FA4
414EF33892D8C8F68939B28C0A8D519A948A5E54879DD21E4600F198EB53F373
EF24A82EDCEDCE509D926BD5E3C4F6E511BAC8CA5FBA4E4E99A88103935A91A9
10B6AC680A8EB76A2C5D17804371F9AEBC100D7A6D1414C37CBD273FBA9FC886
BEB2D27D8ED7FB312FC415A0BA6147E66505D2CEF2005BBF75779BFA8022F236
006FCE1DFC3ADD6B5CF89DF7E89BEA4ED9866C07EA2D27A88E8BFF0D46BC47DA
118698B1F3280F90A2FAF82D4125EA3FA457A2B5292E3E168EE1B0AEBB2ABAC2
B90A514D97941B12553CC4D9CF4E75722C9F37E4C9B4E010E3CA56EAA8868DB1
F73255AD74EEDEF9323418456C69BA9FB90C04471361C82EECC9E3FD1923C327
89B45410AEC18605C490A58D6D03F276E1C1F837B105D9B6BB9AD2454756638C
8C24913B901A80A18BB3DF60DF1D9C1F0526611190E892DB34F262CF0D04C2C9
7A7301BCA92687198B725EB5B235AC9334C9A6EDC2F0821009F568661D201D46
5E49701837E000EAE6F4EF89E182ECDBFBB341E745F20E64783507BDCFB30566
D330813BE00F185D8EC22BF69C7F3C7B33E2D37C7F601B0E36197BFA431548DC
233902D54DA503AC35E5D798A70D15F48C2F617CE0AD7A4007088A67BDE1B5E4
94649AF8F9C74E36A9420418AA68FBE3D77454117A532A31D12091AF98A3614A
80845BC772803943ED168738894C69341DD02AA491637E24F116AA297732D1CE
90ECE5E198A6C53257207EF1D6DF448C97CD7C7C9D13F20C4EE4A1724BED4905
EDAA8A46A337EA53E08716B66FDC7C4415C9BCE7795FA44C3BFEBFD041FFFB50
AB62B6D04FA90E615D06A805EF2EA704243FB382621C0054BF8A20F4919B04AD
A061CDB72C457D44795F8589FA7371F101DD501B215E0C207067F1E695951C72
6032A26727F1107AD33B99E0CF10C6196037A77C28CEF5AEED03C125D941674F
CE08A60064CB42F4B5DD688729F3F1A1ED635B5686764B5DD934BF229A852C8E
A274290FCD31D87998A32A0F6414BFC5E4AB5E0BCDD5E76534B21D3FBAC23998
0A38968FF9B815E5DC93846CCC8A07CED40A9E6389A23EA3F80EBDC8BE3EE568
6F6ADA07160EBC5D155C994CC1BC277FE4513DC2102D4A6D49F02052524B578F
BDD02A5D564D59B23FDF9AD9CECB2D86E473917CE72CA630B01A0EF0761F1388
8A4306667786F69679136F719BAE108F344E5F0CF9DB294762537A84DE04CB99
6D5BAD892C8B7EB292D0E4EC6B9254403433430D4DD907EB2F1315E79ABA1D5B
F00773410D200C8E8970E70524F9F7AE081E64AD1F71D6CC6FF05468F3321734
911F9592B816C726E60275D275BC41D47037023BD77C5AC2AE49D09892044D80
826B2C67C697A6319D72897DF137863174548413D1EBB0AB672BD01647BBE39D
9799DBB9A1D9170D9D3339AC4B28F0B9184D76A8CD38F84C68CB64B378A98BA5
F41910CF0B915E39263AA9F03B21C1F45C87C2CCB12B590B616B38272829C49B
77DA56D8C3459AEF9356949ED5D641A8A79A363F9834B3B51D6F2E1265B5B05C
531CBF144FB2DB490C29FF12165AE2B197B7E3A33037F0AC98670C0F7C072B05
B4A5CD9F0DE3EE7FE13BB25E2856F80AC01760E7B2BD1AB594E30D797581F5A0
E81AB0F7ACFAFD714B437E551D1193D670F1A2B4DF79BA744382ACB29B5D11AF
2E820E5327D8118DCF4F6CF643E5EAF54E6B3B4732D110F742DF73CBA7DE3518
75F5130CCBEED2908CBA3FD3A288E01E2B9173557BD09FD6130694CA5162CB37
51D1DAC1B14EB9CCA7DD509D233BB9F71BCA667137A76761CBA2FBFFCEAFE3E9
8D5590DB346867CAD0A3DEBA0D947D0AA1F03FCAAAFB2470787ADE5E3C858A28
BF72B6F0779DFCCA2EC7F97C2795CC1C9DE8DB602A670CA6E94C8BCCF83DB0AC
7B39632F0D44024566DB71B23B0A9CF1F1FB873365EA1FCACDD36E46D9C119BE
E7F28684F2C4E0FC0D4D59A75FE8DFEEC839FD96FC45EF437AC7DCBB01FB056C
2B3A50DBAA4E7CF3B4ECEDCF91BD788D8F261962B43870D5928D160218A9760E
080E8616D61609F020AEC64C5DFFC9C560604F67EFF611657150619C0C7A674C
A870A8DC75BFF945955A6420FB149EF13F0515DA2ED0E3A18FB2EF64FAEFDDE3
B34B15C3734157442A161BD5A9818A95AFBD19A496521BB9E83FBF92FCC32B21
2DD9568D55A983BB46DFD95CF700A335F5D403518871BFDEFAD857968CB89756
E1BE047E7B34D0F1CF6AA03DADF006837A2C5E235B9EEB4EB844F536716B5BA9
F96F91476AE3DD52279FCECD3C4B2733BF240DFF74A2F754FED1D9ADED600804
B7786C237D4B7827EB635BFB6D5C8C66C3D184704C86343AC388733975C377D3
C5C7267BEFE151C52A60427176D702F5FF11D6AF912DC4ED243A0C650136B8EE
C999DA93F9BAB0948986C4F5D8B2B4889CCBC5955812365F3AC660259AAB3478
96DE4EDB781EC82EA0697653DFA3919067E6E7140BB5CFFCE72F32F4443E985E
A02D5E2266FC409A7F0B02C3678DF44F20E718545C2F6F7E7EA4526FBC44CF17
59690B138CE1794020155BE6C09E7216168904F7B0550174737903DE67E77566
3B85B3BEDF0AD31AD80BC1FA0C12725A14BDB45D92379CACEA43CE73C4B7BE0A
CCAF09F27DFD7BB38B6AAF0D464E6A2F905C553DA0865A316BC0D22E976972C7
1EBE2C8F4B253EDE6068C6788823202EDF2C3F52D34947E0964D0E8E89F6043C
0D2E7B8071150BF795DD3CD508B40534ECDCA0912128BE7D209EA745921B1DCB
E64808E61F4D1960A32F463C6F1E62512F8610BF093851B8B4BDF9A2BAD7CC6B
9222D3D13C1BE618D41CE5ADDCE021A7C84541082A2FE66D68524816961D2796
FA78D778FEC5D66460D04955DFEA71460082A4EBEEB958A1D5AED112BD7193A3
047D23C8AEEAC26C7FFEED4CC7382C721D12721DAC380E4F048050E3FB3B7F8F
3358BC8FBF04874D48127F3226BDD342BE1666E639F9B926EF5B2BFEDF4CEFCB
3FAB423EE2021A2D8761AD9C4A8B12590B6EEA0E1A19CD139622317F5DFD2EFB
D957EB206E4D672D1306407D69F633E5C7B79CE97EFA34D2605E73E63BF4D510
C4E7701979B23EF39FD99184AB22838C847E21917F8043CBFAD9A3BADDFC68DC
CF67E1AD20FFEEB4C75EB7B3A707A6D447DAEFB6250ABAC16EAAC8B552B128B7
FB0CC33F27ACE5E765832AEC7925768DE7CCE0AB011371A1F3477648500238C4
0EDAC04F03C2E383E40A01AC8CAEB19EAB84022ACF111E1D1826E119A8C86215
121DCF5B0716611CCEFD11F5C5F00FCEA747017B9D4E483227880E1DA7644832
6A47FCD6200A498ACE73F12A52FB18A1FBD42B544011323E059BCD0C4C9F6927
A7B42E2503D6725E71D264033F2369A0D6D4D8DFA4784F874870B8D6F7096E25
1C6B88360835226121D98C31559C8B61790857547C6FCBB35A79610367CE4570
53C174C6FCB236E69C3851B68CC160A319BF4831B80A3B8FF6CA1079FC8DCC15
8108BE01B14747369E03799E23F9ACD205A00D5C6228AA1D43F1C6F0E9EA338B
25433A99463EC5DA4EABBFEBE23FAAC12BA68C2622BA3088D68221883665C31B
5361DD832C513510C5F90752F623D9A22BCE7616FA610E4B920460316C88FF71
B1043637DDC6DA409998114BF92E9A4D8796FB9DBBA8CDF19F307CD97AC659AC
B1B0C3D46B8C6B8C53ADF57D33E98ECF389EAFD25B0D6175D567B8BE86A1AC1F
7D05D239E23128F6C30F8FEE5DFC7A7593A18047327A70393F396A971CB469C4
63637218A766F14B803332E19DBF11EB74CE47791B7EBBF98AC811FE95EDB29E
93C684E4623C0ED44C54CE9CEB8E517F95A53659AA649A966ACF3A2EA15AE092
9121E532C6604C059CBABE2C9A512F7954BFF442BAC474C4781B457EDB416CEF
F6B6CB9AD4F9A371EA08D5A071AD0580BC14CA70AEA97FF4B704F7641BC26613
D0CD7231B5ACFE00F965ADB89E171134E3BFE65433B856EEA33D7D06B717D9AD
0AD9090339E339375D60A349201E8DA94598691F774407905226AC4AA63AFB21
52749584EF79ADDF7FC21D7643EC0724B2284CCD6B34405A8AEA95E281B0649D
CFCEFD969C7AD4DAACB1EC98EA3810E932CE3B50F0179B013150BD57032052DF
AA4448CD7B477FCC1C2B27F947178FA27C8B9483B4550C5B663015F6637DB6A2
15655EF488D040C63ACB5FA24E41CFFCEB3E5238AB3271A5B75ECE9721E484AE
A8DEFA2A709D750E0DBF8060AEAD5106824D748D9C085BAC95E035682C96F801
5D26518F63510488252D55642E3F3B8CEC52EE6F35E6521018F245F33A42CF22
4F327CCEB361EE6923C3C9EC10C2B121966B68A93EACD1BC5BB43C6150954506
45C8AABF5A037944087CB2D5D260D28129A5D826866662873464594EBF58A0B3
8A156331EEAA0D0BC428A4CEDA2DE760A98868ACB45CCC8CC2370FE267830E8F
EF45A2ED6C77763127B0725900DD92FEAB15171D205577F66E2A63C856C853C3
754756D2FBD0636C61A84354A0FE7C406DC55C0F4705EBE271BDCBEBBFD886BC
F44FC9E6912DCFF9FF07EBE821AAFF09597BDEA4E71E73C8D236AD1087A1504A
5BB67CB2C5BC34973C66955EF64D5D040A1E996245BF51EB4895D4358CB69DCD
788072E7C83A858CE09E4587B808417B54E603A6E083BDDB9F25A0678B23A7EB
CAF98097861710D733B5510790EB12FFEDD3BB07C7092D37CE9C08BDFB7EA28F
38734EE1A564411D5AB3FEA20864A490BF977C9C50690DB088FC0746B5950692
98C245C2EEC225EE3317550502994505DAC74FB805D6A4A2AF0C0E3214D24634
6E0029234B1666D5D960E0718A7EC0D09DFB5692C21BFBB52A2C14CF9AB8E833
0AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE5784DB72D0B7798D38091A3CEDB
E91B068D1E432A2C5DB4219BC0503A5AECE79BE575FF8B14999869877BDE33FB
5D6C047D2DFF37B269FAFD98CB727609ABC99E6E7457E61F22AB20883A8D5D96
20DEA594A44CAACB562DF63F8C408C9DE54FE6BB1E52CAFE32DB3305BC555ACB
1B1C047AEA2735E8E862CCF28496AEC62C6D2A911734091D9D7B468C11A86C1A
517F86D2C6190AFE9B31BC892C8737A0AB5F2ADFF816D65619DB7368927E5B23
E1025A0F68A6372A3C4235274C47E121DC3A8BF80246F4CC8AF19B00A4C4A095
1F09F5CDA85FDD822B626F0B4DF1B21C9F316DE508679B11650697901D5FCF5F
ADC38FFCD6C2E75971B27D34B280B335AD80453B44C4C1C9FBEDD422A6606A50
65F649FE81E6B3B1E8D0ECC21206BB80B1317EC71D425F9409954DF168966159
B2A302B801CBA3411835DC1F3DA652834955472F18F480491EB93BA363D5DEEB
FC53A47EBE4DD5C1A4A7B3C3DA4BA90341EBE7AE299FBD8DB58EF1E81CA38B3C
89E18B0DB5AA7D03B116F7188C5E525F5352E91953DC0D3A29B98BF9BC188EB6
535481A757C2255E5832ADB102717CFCA94799D64135F1155E3D4F93573CF9ED
D67BE48018E16ECE31415E2010323BF7B94C460C35EB756C1CAC0DE34D55F775
F2EC2F97FEA85F4B53BAE6049789943AD94B63B8C04254AE7698444D303624FE
B31003C0836417B4E3AB988FFBBA9B64E0A2CD60D97715676AE3C390138AA7A9
BE8E9EA76D1DED1866D5010782042205BB0837B9806C9E41A58AEFA75636CBBD
065BD7A4D16F2815B6727F4289C6C81A102A7E38178ED36221E238D4DE3781D6
9EEA4B6603E0887ED037B1BA381D130F9FEC2888F61C3849543D3C75088DD2EA
623324F8A44CC39CAC59B22403C1F1B08901EBE7607A0A86C523C36EE42A465B
3387CC896ADF7ABA61FC71A4841BC9EA8A8E7BD8FAC19A61D653564D8C789BCB
DFC935E0EA158B8AA75C9775B4F086E1A60D9FC3B616BDCCC2891EF3A2A64A00
2DADC1B1AC7AAE6732DAC6E6E6F989D279899F037DAB67FBBFF50AC517CA096F
28C106FB1CC2CF016E6BCB5C47004A8F13DB333E91412BCBEA8587A63FB77C9B
CC61C77EEA977B58FB6FA47D6FFBD7B0C78E1B9C0308C3A351FE0C75E666E589
115090897416063D0E0A5D8F4F5952DAF45E4333E3C9A1BBCA924112AB70B4B0
B833777956B69718F95AC98AC233A6E65D542FE7142C6AA82981323A3E128481
FFD5458C1D5B06CB9D685A9561E9CE01FCA0D5387124656831862FF01CCB867F
027E95F0C17D0870EBFC7E2B72320948A9C1DE54F4AC61F328BC02903BDF16D6
CA98017C7C118D8C67F71A4BC3C8794BDE949849749BEB8FADCFBBBBC2B889DC
7CB30AEAFDDFCF3B7638A4164B91CBA8363E448B71F9FBEB52E57A53543B5017
17CA3493A7590E27B34C2E2E1BE2ED884CAFD5F571D9DB197ED12D51B0342A02
16A769BB5F0967CA8E4ECCA0DAADC0D6DFBAFA59CBE6E358CF0EF99B5C327D09
0C333B2039FDA78228FF7FFF7767895FB02F823B2A353ABF239B1992A2A1A278
B2E954B029A57D850CBFC8A4BC7A7517F7F2F574F03B3BD41D38ECC699EB8815
ABFD76B252DA958829F3C7D61F30D058EAB91FAFD236C47F453B38DB0067907A
28EB5E9FC660FA4727C8709EECEDE5688308EB0C4B651E83B1CBBE89BC3CF3A9
129FDD04F9A09482ABEE624C540143A43483273DF6CFEB55341D3FCD1B53E152
38A93F53D2E9B5ECBF9AF6881F745EC71298D454AD31AB998F5821BA80DBF061
57BA1886575C8115796C7219F735AF881480D5EC7D8E64D01390E9E92FB6FA21
943BA9C3AA45E95594460DE511FD6F899938CEE7A965807EA75DE120EE0B7D3C
D13EA134FED3383AA3F221807E655408807DC6949926B52E5D383DC3DE34556B
64F1B8F1585F2DA9A2456C7F30F3F663394D8D17FD43129065C91645DBBB7C77
5582AF3851887FDA4D03F83EDC6F2618FCC7298239D3F03ADE3CD408714E8E7C
016ED719D6A4D045FA24AD879AC9051938DBCF63442E4E1621C7B4A3EAE77A96
BC8D7EC83E5FE8541E6DE3FD3419F9F90F982B5A01ED2CE7C993706867E39C0E
1A56B6CC0B676141CE02A627B76B82E8B1C669375D4A39A4B9A2CE5EC5D739DA
2B40EC305E609FF922648E6D6191BFA132B8B8B2F95468CD1EC601A282CCB7BF
73F7DACE0B76B84E063E1ADB66C6A31169A272B67756D65C6A9F553C365E20F0
BA59F8537C8DEBF4DC2FF0E40D5A3A2E5B7AF64A3304B9E86E1BAFC72E361DC5
A10DD5F4FBD3184047F8F52B0787EB4B70BAFC3DF03FBABA548EB67ED18D437A
2AFB114183DA45B1743D8FF110BB19E18B570DC8E76669D1D95412A61ECE9919
19A81DD3F431A4B0997305F7476CCDB05DAF33B146BA9D9923A3A1B5BB443CC6
492FB465728A51774FBAA06A6B0C19D7D14B84A745DED61CC134BE4C4A7DBC65
DD1FAA0F8B9F04C62BF1B233EFD1FF420FC86D6A3814A94160A75D90C5B89D21
D04649F4EC88876479FCE683569E9545D1845D1A6D6E6A2A231C4C717966FDED
E9B56E1828A2D6E62E97D0825D22DABDE0AACC091BB8A7478425997D0BCA30DF
5BF8BA1D35AAC042D4DD6386F531239F9BA947B71A42524F4665F07AB827BB2F
CD1E51A743146106BA16C42008E18377AAB2DF1A89C279FA739E7CFDE4E81E15
2F9E171222DF315EB614E0715E0A35EF89F5548E5E8722307268676EF7DAB4F0
2C3AE400987D348D6AF88EFFAEF5F2588A8D8CAA4B1CAC9706B24B9556790FBF
3F5C14CCC8E9E555CF494A9FB840CEA67A9F82B355C952C6945C827895F1E26E
BEAC5A64F15CEB17C0CD80081A08DD110041ECD758443946CFD041BDCA76AD56
D3FB26289C2E0903EE96B0F7A2DAC0DCAC359AD1348769FC028D1D2B922FEB5F
A6E917B448366C7D30051FD73CF9A8828890FE458FF7E963CF36116F6AAC050E
40AEC56D341F7720B161236859BF58E195FD07A9137DB417D7AB847560E1E424
869708542E0B4837377C166416E58DBD8CC96057DFD45EE46324EA9054E6B6C0
AFA5E3FA25333C6A9BC0CAD88D64C9D8458D0529C14069B4FD7D0B539A360577
6B5839DC4C81A7F055E8F74A6114CFE5B8A0B760584846C3E9C85CAD2C2C067A
363F30410F3A52EE60BBA92C92197DBD07F5945AAE2FE593BFE796510187ECC1
9BDFBEB381E2D896A9B1F9F665835CE5387645DCCCA73EE88A36CA9E709552A1
8231E1F194706D2D4212FFC2D65DC19D15810BF1585B999B3D396ABAC607A779
B39965669817DAF597E40C9E71528747ECC774D5CCF63B6952516E6A640C43F5
923329E4DD2A54601009A03E8863D5A17E35052997FD358560A6B2C16774FA13
B765403A6D9698EAE5D5F2DF6D1BFF545362DE04BAEB4E69D6CE77BBD9EFC478
649BDB77B61750B37634D27C4A83216564D8B4F023D1D382BEEA8D8A1301B56D
618E6E2B9CAE80D172C2AD55E7AB4C38DAF1E8B14991137818A4F5A1532384C1
9D5BB9640AB57B466A9646DEC03B3F0C8E5988C3277F5C9AABF7D4F2F9F681E3
35F0FC3C34CCFA5F9BBA307AB5E2C7DD27806F0D1513416DC808D735B0E5DC83
1A171B731115586A9ADC136D94FC50BC7621C7DE55DC385B2E2E3B2B5CC33DE5
CE03DF9A2A74A0CECCAC565C16B53C7C5E1A202F5363892C7243DCB3E5B7786C
29B69E80D205661EE431A3306B6F3B8EA4ADBACD27DC299A934B6838DEDFD203
B9A92FF4966B52FCC56D738EB4D0E3BAF35E98DA57E630CCBC9EA6D6B6199455
3470F95A1B5E09297936ACC7246422690248F646B3B796F0953B148E2B33ECD2
9F336719DFDB9AB7725454FCAD97E2FB44A49E11025DDC6F9F001576493891BD
A4B22E7A04969DC6E78825737DE5211979D2090F75D849BF6FB5C8C1B20D1AAD
0301D55F99CD7A2222109CBF0F48F279DB84FDA2813CD147F2BE1ACBC99F7815
EE96DFA2E311E436B9F69FA25D7933F2D4E9C465112CC7BCA656891AEC05DA9D
5962CABB7A331B3C1950347714FA6AAD7B73570697FF280F19EE5B1E309AE6AD
70803835A545C74FFC1E9F68CAB94089F09CE0A654FCDC2286B5DA5EDC26C27C
C3F5C3C1ABA57CA752F44EB659350560D6E11E6D23A3861C083467ED704340AE
F1BA86D233861D6566F543728FF30F23235FCBD1CC901DC4F28AA134CE05EEF7
750221487FD3FB6C48487185D760357AF5D8ED5009FB809985FBD9A3E99D1D61
24A3B4DCF4691EB37F45BE24D02AFF56B18DF37BBB4111E0137A2AFC19217AB3
17F4B9470D46C41F0F6AF2A82E3B2FDA2EDC67BCE64A2FAE79E006CA8B5B49F1
95FAE30FCF099872CA469DC068A476015FFEEAD110C191831A8562FA37F38167
4513A1EE3077993200CAD11720021AC074FF01696A229A6820643F1A284622B4
70F66988681475935D70F6212C32334E58A4046782088E41A8A18E855EDA1258
8220E3330A55A6A1A614ED2E49F0C1D802246D56C4BC975346CC681F6C956D76
9FF73C41CA9E07A4F5CE02CF9A79424D828001B0EE826F6408B2C833F452DE7F
0441EB7A91FC1AC004B8A6D183AE185C45EC1C4289AB23C63A895FE66E14E4F7
BCE9EDA576E619FCB325106498371F5BD1859BCB2FF3B2321D255C7A841675EF
8AFFDD08BFC3CD9A321E9DFA8F17F407D9A30AC1EB99AE6E114F28CF12A63CF5
9C50B816523E5AA339CC3D689D6D85A9521ED8F3B12B861836F389A2D54C10D4
2DC100DD3AC2075CD85E01A51C6750BD83636509A1A38688D64C1A4EC7894E2A
0D724A4A37EA8DB92F3AE7C4ADD622E4C0512704A874FB5220E65FA4CAC97EC8
28D0D7188BAD3775A9C214103DAA3C1CE1ED8F40BEB4E15AA197C71513B0E432
B12DA1F7B1A4E85CFC437B2014BB2311F40344F03A082B5DA17226268420C5FB
46B7FC871C4C9FC9C7F19DE808FF488BA5D2169E9542807D59476F5DD7C98864
8025340A723373EDC450691F80081395A96FC4E401780985FEACEDB75266B96C
ECB12C166846F1129DC00B21704B001AC3F7837DAA0421EBA206AF5CA51D51FF
67E1BDD3F5A6455087145759F387B2E8551B441CA1C0D1A36A573708C2EC0100
28C55D9D6688C530AC5F406DC83B98128FCE221AB56BE701148A9A15B7F77F3D
8C3AC57B3643900232407BD79EC806716061A6D87D069E5BC1B517AD8FF99CC4
35D03A49EBCB31FACB7C1E54D9542799CCC609E92DC0E3AC4B89154894E30646
A34D4C50845AE2C341D62E77BDCCF6CCB519C661126BFBD8C47EE93BBC5FD7F0
1F09C524E86B266F05853DA1D9E01D7CA3F08C69EF1D9A675D8B9725E42DA14F
1B91CDCF4A946FE681A03C13944438E6B3EE7B8A36D0BDC9A60627DC40CB9AB1
6537B05C2A9EF695080C2C3A5459F52DF5237EE2205F8489FA60415AD89398C1
6988D529AE943DA251820B78E753FCC4AFDF42588FCFEC50D57C840052619E10
F53919B5546F8480E5DDC5177B5D3F222AEC75624D086966A988509E01888AEB
71A3A2285FDCE2B18C9945A2EA720EFB31477BB7C05157142FD496EEF549CB1E
39F02C04ACB9A6B298FE5BD2C83BA006B8DAAE8BD1A130B1CF1DD2A78D98C3C0
A0E56DCC537E4228CD3F734C6F09BC60B67F1268D2C877ED5AFAC1C562506FE3
45B5E929CB01DFC6E4AE406203A42C91FF4A9143D292DB211D029F7F2F3CAFC7
5D8454990BE0DD72CE76A6970CC59C6F4183BAB8D751095A27107F38F9D8815A
FA40D656D38F3E78CDE47A4377863A3B9D35476223D740DFAB29B8C92BFADEB1
2A7B3C4ABF498D8A3535DE6CAD416D3882CA45358A7CAC81B6BE84CAFE4320FB
4E1730574F0FFA68E00BB8FDA7DE5308BC427E951371382E128A64A34FD44572
5A65689A0FD2446EE14E2C3C9E69D1B3A6E102054C5CF811080BF6B3F9E7688E
31593A54ACF96E590EB500B6FB9263591F45AD67FE37CF7382D3255FEAEF856B
E4F026ABB2B72756D1A3903E0613889DB170BE5EF73045AC8C2A1069349EB38E
22ED27278170A983A8D8670632A57E1910D3B9965081403CAF52F09CCF97B742
4740BA1FE8001883C9820D6F06DE80E314DD317520F1D1BEAC1EA5E74F851017
43E741F6C568BE5344D4972D5E44E7E1E59CC4462856DFA0E47C8ADA6F2AA5FA
67289DAAF80C0F5EA7D9E67929CF4142CD54B6D8C840407C7EF78DDD239111BC
8C4501247C9311828E5D04EC19FA05756B00857B9D4A35CF5100A9F10E1B4D9B
7232D173AB158027EA072130E66CBB0AB34801570BAEA6B6E625C683AD82A1E1
E384C7C1BFF8597ADE0A0B305E4CBDD799F4D1A0D1E19DBF0805D7E1601A0375
3E6320BA73952D5887FC7C8FABE46841D4DEBE1A7E46E3F2ADACDB603A2D0A8C
DD8A31A0090A7C0FD608C35EBBBC89F56754CBC5ED50A7E4C844A0E1323D2B6F
8A863E0B65CB2F13B09153F7E06BC4FCC1B27EBCAE55FA37EADA506837B45018
8AB716C9EA74704501272BAD646A4A7253D48565084E17B03687DE6AFDDBA4D3
839CA9734503E531B9151BD3B725462D5E68034DBA42B42FF72F76ACDB8199BF
F96A4F51076B53AF9F34FFD9CB4FEF897355BFF6E213E8B7FBA1F6CF98CFC60E
C5371D0CF08E9FBE3BA7C43423D25E4E26AF9E5B79B6895CA4075D464158B385
AEDF0D40EF0FDD4E398BB6CC8ED49960FEE879AFD9523A5B47463EC3AA91AA60
CE1A230474D4E20B70DF4239E2A7CEBBDAD3B6049A2CB2B6AC2669EF2CA4ABB8
F6729C0EB1FBE8C013A0A5AD5CB45786E455A66EF4194FFDDD3322A2B0FA8CE8
B47F58F4BEDE475E122A72D856CE6A0B3665E089F0702D3340BA6781FA8827AE
A8987E3AA7D1096CF8DA3275527BC25664632DDEA8539B6116F116A615C558D9
7D5A8293FC6C40244E9835E120C94AB9357DFE8F9A9395D174285170DB506252
A5630784683C8CC890608570A3E6A4D02B9C98E813E0B142027E7ED6D210BE92
974F2D0A93D2E6522A584408ED0430437A9DFC886E8168237C6D8B4A3114AFFA
E9F0265DC825031FBA305A8265C793872CAC71EEAB124FAE3A41C0450306F3F7
926CAFA45EA4033F4448B48E3350D1F08E9F5B2726439EB238AF11013AC7EC23
117C07E2351607360BD89F37098F3D2A068A7F375DA4B1A57E90263494A85018
A22C3F7E4B3A8A591752780921B922A77B2CFF703D23E3990FE0D08046F353B9
4143E4B6F307DF99443183523B73D585C6CF44BF6A3C278E875A1B31AC64A615
F7BD285AFF699C6838CC22A120128D9770FDD9A427FDFA8ED6E411E604BA2DA6
7C21B39968E3191B4F9D1B1831022DAF03C3110B3212AD03E1E0B238248251C7
68115917B01EB784FC91583A9BEA684A3269EE3FF46B759A3AEE64025D7176A1
DA12C5F127C127C759CE5E87C06061F83AAFA92ED820081E3821F22655D2E09E
7ABB5366F398E805C938C5352888ED06238F537766B3E839B935D3E46DCAB1E5
2E14DCA2F1BD548964C0CA9B50E12DED4F39604ED5C87C2AB79E25E7CD5D19C2
4D984FD9F9519054C5F160CD906F5DF4DFFB1C53C774B911FE5C22E1B69E10BF
EA5B73C0028330F91062E2B6567240C129F4703CB5993D7F0CF2E66E94A9B5D5
3B776BDFE0A36EBE93521AF899932FBBE039ED0F544DF7CE0273B9E77214C69D
3AA80DE65A8E9E9736C4BE005BFB2961D508E1D18DFCC95C2C620BD601B66693
FC3AB3DDD861D4D5BC8F53B2BFC052BADA835F45B43FEF982C1BB525143CBC8B
EF7F9831A0E0A137ECC98C6AC04DA68E87D470463759F200DAA04B33D16DB6B3
1C5F4E35527225504830F03AEA815E51F3EAD29783BA4E2CA879427FBB0F29C1
BDBBC3E4FCBD34D815DC9F3472C0BFE5EC0314E6CA3D37F6E4DB9BB36DEDE1F5
09823F22CE41AF130855568314BB3495145A91244E07FFE0BF4288092BD90F91
2EB91122BC43FCCBC12AD7B5C5C749301F4F20056677D71FBF9138A9108605B0
CB90E95856D8D8D552BEBF50F682A29C4E509BA650980E86FE0DF7F7D7D05C9E
E2E61F6AF89D07BAEA7F2250B3FCEAA76EE66695F31A818BC64F0AFFF42E6500
9E3933E30B3D17953DA9C51AA59E40F3FA0E76D77A9B39F7AED3D5C190EFAD3F
26B9C704744A75815546B2D9C437BD3011216F3F8AF6256511CF4FE9B3F49FC8
9C8F162E7A48480D0F5E55A0973254A9DEF9CE75F688832C75AC8BD1ECDD9992
E9F8CF3DB923D549EA4F112AB2F84DE3CEAB2B97B606A0BFC6874869A86E3A51
56B66B280866A0E6E912344837868A257173ED0D30EC130AD2D1AF397F0E3B5C
98F740F969E30382B8E87C01B01A60BA9D54EA09C0E2FCE8507F619CDA4BACFA
4A932D0877DC7D364D5CE4021B8DD85F1E8A29F10E88312B11913ADE06BE1592
DF2A0F06B94E07DA110B5F7919D3026C59596C63BCB936321589906AB24214F3
C046A1F212429A6E729BC52112E16D2DA72BB391A2F176F0F1C402AA4677C7BA
A2A906A8911876929E4B06A286C9913F5F5EBFBB6FCC566F45D9A1F64BE94D4F
5FAD6CC4ACF9742B3FFDF7A277482AC8E1D6103B89626693CB2D60C4D000B015
3FFBB34667E843EB1A32467025DB709E036F0E42D18444E1F8E5ED1FA435164F
2D4AD4818A34088E8EFB925541EB8AA0AE1A2E9ACFC032BA9DE880A311A17B49
7CE7CA888BA8F116BE1A3EA4E536BB374525DA094F31F98222B8654E50F8478D
FEFD5D723C115CF537907F6382D56BE9049ED62EC883F38CC1CBC9C0B6ABC046
33D5F54C7F8A36635F146B582B5589A2454430777732B64D6E1CFBEB0880B4B0
5B7E1FDD63579EE3AA4A4DC3BE7E9DA169118ED72F0D07C727A4E5503B028EDC
1BD8AC6A7454E38757015027EE319C2520A34046795A104B7689C0150A5639EA
D26F5CB155418AB9FEBB143EF6E6F5FFAFF8280FDB0953F4790A1EF859F5037C
994CE3E3289F417D7BE40392DFBAA454706633D9743BAC54FD855A5D48026F1D
A52ACCEA7607610BA1B9117D93B5454BAAF3214DC47D57754E55CE6588CD0FDD
9D151FAC21559B853E883A9959E2377C1BE6CD8EBD2F47CFAAF4C36B2F36DBA4
34B874361C953553906317BB9299AE0B521B8B4CF285EDC6DC478CB5C3631FA4
9D93B92657C24BCF1C2944C9D7C679F048306B7614C57F6B892EF1F1E25227FE
09F4774CB9E46474D3051C8A93AC42FCD811F7C7966D2112DB9A3120411A862B
A3CAD73E31BD3229C5F8931981B7F9C278F0853C022ADCAA7AA135EBC938BBD7
45F7F1E765891FBB632E2368FC0F4875093E5CC5DED7EDB35063F92C01344969
D535DDE58AA995B6A40A265BA936784D5D81BAA6719148D3602BCC917F7FD418
4F9300A4A24F80A010D8677166A3D84D9FBAE2211D48DFB521FD15358C8F9295
99A0F81B43C52F5C88CA3242F20984B44BB56F965FEB807862C3BFF8017A844A
03BB266B5F037B4694ECF6DF906F648B9BE29C5E30C346B09081ACE49E2788DA
438F9EEE557A44C2FE7CFE83EF0467A1A74CB74D7E919B93FD8E0BBBB8691538
5C080786C58124BB2BE54E8B5CCB42696DFEAFF11DE3850A326B03A33474DEAC
4ADB7FF6B751D3816531ECDD6CF5B9DF4050AAE52302597BFF0F12D72F6DBE0C
F06D58A300154B45E467F9C6C7FF225C4B833414EC5ECBDFDE4DC81D819AD245
761A6D212144EDD6C1611D7863986354FBEB65C0E3572CC25244315734224022
30B07800F36A82ABE17BD7109E6329EBE4A424C61E71E1E222012E69BB0D43A1
842C41D9535EEF0550084F470C098B5CB3E290207065992B084D567645EE4D2F
C29ECCC31159CEE8DAEC14FC13ECF37532D0FBB90B79F0329CDDD1E0080CE103
2E8D68ACE55095E324D2E00E617C3A5225FCEA7775C21488F0E59D0B615D6E77
DD6C3DB29B7225D0E622078B57E75F3B4EBB0A3AE48420650B9EDCD88A8A8ED3
7198B1EDB1CF471B02B6C8B6C21600E68B1EFDF083A5E8E432125110C0F6D015
B780CC59D1D1ACA574400FF17AA1B65BDAA30F93C965C5864E0E85F18E0ED93B
221E1F5E2312B32FEA23811C6137B7B8B69622D52E3F898958BD7859CE828EAB
0C61C2C188E352FD8920536D1C9FDBEE7B1B2E3EA1ABAD8BDF3E922245BAA2CF
9289D68DEF6706FF9AA4FC2E5F4D113BDE26715C0C6A0C24C1552C1CA778060B
50EB9DCC214E61E8D1E091AEEF1864ADC733AE2039442B2EB34AFB74F13954B8
82D400597DA6B584E6F9473D95207B36E865797879DD5D854A04EB3F5AF5E709
F268F1C791E3BF0F9F31D79095F8A0D322C981E3B2E064670C8078E616D62808
ECCF4F42BCED2B6A5717163352F9AE43EC44EDE1845E3EA72F7477B4B35E0012
6BCBDE89AB6DD4BAC3307FB266AA4DB743F4C0BE378E15D0143A0871937296AE
5D7C949C823E3C8F5E17D6020D27DC30DE4FEA817F8A09C2B9B8511D354D48CB
BBB631C2728EC8086164852E31AF8787CC19DD310EE1C9F89F88C9ECED0DEFAB
3618499582A93468F235A8495ED6FE28B419FC85D2D2573CAFD236FDD824E7C7
4F621BB57A3B0FCBF1045C0664043DC2942F3A5E9A37B99C4A13F55C6C18F11B
D1BD3E4051203591E98D9C4776766EA0668CFF5785FBB83960B2039C9DEB58AA
D9E861865966CA170327BF986A8790BAC713DE7CEEF020D208CA7D5A69DD11F6
760850FD686F798015231BA851FEC1740BD3F3154883CFE4EF0460ABD63DB61E
3186ECA1AFB6D7B737B63982514CE4041249E3088A321630BC1826313F03735B
16749209C7243BEE8FCAB7281D126EEE4F5B57D29D09A171871E684E170A577C
9309A9D8E78689F019EF8271CF27A9AACCA51DD1C9ABB8539A2F3CCCB1B61E60
3799AF4259822D2631E01F44EC9827715D8D755A09BA38A0C320169BBE8D7970
88751474B22D25F771643C1617A0D951FCA270510BC50881826A306E1DFD7A92
90CDCA4A16FFE88CED20B825216A78E7C80CA7211010D2C00C5BFF35F8A5CBC4
B3B1285D1EDA04B7D11568CC271208DE70870D9355E303772A7BA6764A304F98
143B209C374E832ABFBDA35F7AAB3A6F5F1E07791446F9E9D18741DD7643D81E
448988C044D049E9EDA646051AF86E03D22C944CF66BE26189A98BD9FFE2CA84
84122405699CDF6369ABDDB8FA6BD2ADCE62785C42D2C746A981E08C994C13AD
5DFB47EEF8CE7C985D028A872256190DB55AB328CFA17F105BCAFE8B42A2B797
0B81D641321EBFEF7D3D68E9B035EE2002B55631F7799FC83E0ABD998BA651A3
1F6547B1A3F489EB1AEED31BB654C3DB30D42109F558355FB7046230681C33AD
7E18E7DD9DCA76378F9ECBE4F9DF3A174028CBB2A2717C97FF0F700841CB1FA1
C666F0FEFB1A03D99E9A095445785C633F2214D0F1DEF4AD1B4D86C188F1E2EB
C7191F8CF6627BC3064CE696BE6A51567AD17C93C29A9C4516327A2627A5EF96
66EA446DC9BC9164CB93BFFF5C5133C354BF8C753220198428B3D0CAA5E0F1B4
4EC9D73D7DFF931F6A90B74052B4F21771072FF46EC2F7A7F271B49E919F88E7
581062676B33238AC886D639207031A9A1CFA77B04FBE05791723683B878794C
9D38659647EF47F45CABDEB13D70A644B315112A1D4F99B12C17E57D566ACB30
62EB417CD42D0A1BBFC11A814388E7D0A57CE1448E33D2D2CE747102A5F049D6
97B51607088DC3D84038C354CFA8C18E4CBF845CE38E33893E59E1852E559E42
8C90D30E716DD99709F634C2D6DDD257049126A4FC31C9828CF2AC80B73CE276
8B06545FE26369B95A7DE111B268EB02E852A17B101AC4D7EF91B7D151419395
4B4833509E1FD137D8B823953AA248937D5DC6E6A7AFC5E8194110F5C510EA23
F4925336C274C5E22CA0A1DE64B26607D758E07D79A9450664751BBAF49C5CF3
215B8CCA14BE086F8D4E32A33AA58CE036E1059C699F3E85ACDADBA6FC03A120
139321C44584656B732FA3F8EFFC8EFB1EAE28B29F5A3131A3D3A00017D826C1
A062740F1EDA0CED4C3D2F1D53684A06291B992A4F794D9232AAA08023A66252
B8C61B11AF475EA3F30E8C5F0D56D520D19C7DB1C51FFA10F331EA5F6FFBE9E7
FE4D6CAAF3B2EC863A10870C552750C8F177222863EDA09E64E8A59A9FF8849E
760494BBF70003BA53516615023DBDE20199208A7EF6E8F024A221794B75C8B0
6B4A4BD034E3FFD7DED91E1C5CA9D7185F637ADC68DC60065A962F46548B8CCC
ED1C2399D7A20C814600BFCC73E98B50F36618D9EFB95CC3D5D2F8C6E8B4E42E
02B4E17B21C52C9BF5AB8302101B3793087399AE2CD44B883AE5553E18C276E5
10EFFFBDF0EC43FB82B6178E018D8C2DF446999C6AA566F579F1F9448DA60D7E
1E54D2B4EB8C14B2A4EE6C748CB6E58E3450F2830A3A049BDFC6E9BDFF298B48
00F6514349B19556C1E1ED8B2C03344E13CB523B579BEEB764B1FA99C0FE6148
4D576627BB1CC4524D468F4FD88626D8175FC3353B5F40C737B0A767B0B4EBF6
085A247E4D927532D1AAD1993A2B670C19B19D222051E7E89D6F7CBAAFCFE7C3
81D0EF03A3EEA97D43741F54987AD65FA54A1BD686C24AE770072ED026236425
D096E84DD009F55A48C448827AB1464DA2E3E3FA4916BC5A352D4237219BC63D
D0876228984F609F872CF41ECABC321E0A4F6F62668E60792463BD459C662760
414C0140B0750E475B9ECF3369D50D7A3441A9CAC33DA5BC9DC4D7F0AE5E86C4
AC589B456F0654ACCCA8A309BCE2EC2AF23C12FE2ACECDAD50724816D76FE681
2693055C9EEFC1BEDE9E9906F6A6A27D431B5958314B0AA70611E06932068867
2BCCCDD0F7F56C31DDB62FD910D8DD70F14BDDBE87F0D8087BC73BB5FB5BFA48
F1DB86E20136F2C42999C96D608E12B2C1694637EBE1FB390D04F40E09C47BAF
D02FFFD3B21DFE7CBEC916B5FE7A5EFD43BAA7D48BCB87B1BBECEB0B630D681D
6DC8ABBD3F4D0954D767BA87EE1CBD3BF7B3620B1E7ED1BDE0558439D9709486
4E520391D337A6EA74FCE9202610CABA6E61E6A3419D0ECE9ABF70F2AD36B7F2
112018FA885DAA68993A4094F490EF2DA767DA69B10DAE387885B4B88F3D8CE2
F5A68FDC19A564D2F5B92469BEDD8775BF20C63B321F0584F9623A71F05B694C
7382FFDC36C14F0D2FE83F60403C598F8E360AFD7C3A3F37E20C1A756C8DF7D5
1C4905B01ABC6B2D707F1BF8FE2E98892A8B505D09E56307D4F90DAB5273567E
7AD9B60158F0FC2192B2B8E8AFB92E49F8228D22BBE4C4798A6AA74A9039B059
3393AD053081BD95A010378AF89055BC441B04094030E2F0216F900C731A3D56
3D72EDA0CB54435883A32775F148EEA9BF99365D8335AB3A61FB3C873145863B
EC1B5E8CAB530411E68E0182782F84277397DAE62595E8913877434B12D14EE9
971C2805B3C3A9161F68FCCCD207579C1DFCA2B159E912818CA8C44A0F964A97
49C4F5593F0C446D1D429E2C2FEB334F9C1727F0D1ABE1377B675819E183ADDD
A8FFEB270D9D26ABF61B57863F0A872C91679ACC80B728B77A07EF96201F5BC9
187B8716270B2E0A876BE2E74E8B47BE08F29D5C260BBD9280E2EDB9141151A6
00D14D60862AAB2F2A045169200FE4604CE32389F62D31573EF4C26B4B097058
39FB8A97A9E5AD1AA6BCD1FF4B969923EE93703D3043D9E4AA5A61C2716FC807
99EBEBF1050657D8244CF19E387F93AA47F0B365F2023AA3E4548EDF62032151
2A22C8BFBB430970C034A9E3356F823569229C3D74EFB4A33AFF60214FA4A1DA
FF1C0953C5ACFF57A71D77C07385C9C2792A6F6A8C83C3C034E075F40DFEF9A9
8F4F5623E4283398A7513F0E9D7F6A0F2398CCECC9C5FBAAC707922516D4EB06
CCC062E2ABFD7A053A193499D24663633B06BBE4FBF2980B9A5BEB1AEB597276
E413730A56429E0E4CF87E927500BF94CD2EBD3D8C6067539885ECE44BC11AC7
72FE379AAD2187BB75815289B7C6EAF32E8F5F56E3E6FA2D144A602FAE78B968
D1BAA3C56E468BEAE99C6135BB2A0DBC9C1EFBBB97B92ECA1BF2A2BA4CD7BF56
A6A10DEC60C98145A281C544FF0383EF4DDC33AB828E9D80023B4DAA496D057F
E3147D47414E2F0381ED0FE65DA0771AF1B2B3493CC917F1F1E74D1E94931CCB
EDC589F056A9D38B3AEFB10F987EF68FC08222CF1C4DC905B3C9507B22DBBB94
22CD79A10603C9F24EC3793D30B47AF94BEC500E572F34BFF92CB2B4B4B62E1B
F27C8B7A9E21A576FAA4EB347390DD0A96A69D3332B13D2D991742FAB22D66F5
1581C9885CAF0B2A4B7752E461D1634D57CE39D8E1DB5CFB4C451D34B7C0B7DB
389F3BF0C66490127D2A094F8C35DB59728FFE62DEFA434F27E4916B43DE8011
A5B5C08D89E79771B67B1734DB00B3268A879BA271CCF031F7A484B0C378CAC3
87103B80ED63A4A4C79AEEB9B75B54D836A5923D3E6DA399E9C4394A2D22182D
25E20AD4D48E139ECE3C73DDC7CD7BC267E0D478FDAADC38FDE58C8251C5D0FA
F6B63E140ED4284550397AE68035EF3FC6CB42AEE39CA3E37AC3BE67F76E7EA9
7E2041E5D0F837F04614F0175F0EB7B9BF7CBCD7D4B885AB7F5DD10679FCA5F7
EFF91D63A86B999803EEAE014C26BF75ADEAA3A61FADC398EF985D2B8CCD65FB
178E5860FB46A42FF1EB9F0F7B4EB380EEE1701A568490ED451B3ADD7357CFDA
90EA906E6EBA709328EC6DC0BD8008943710FC6496D18EC3EC1406810B1D9FFF
19AE1DCC2AA5081B915BC649C3FE03C7D9738E03D9B5DE922234C3AB8B2DCC9E
5CC7BC417DBBF9D784583F562C0537A0625C655CE74B1347D639F3D23EF60AF9
131A1E80B5F29E0DB123F0A7CFAAE60876C196F909D88490533AF7D8A4D18AC3
CDFF5945D105A2915343EB560F9F999A46A3DDC57409B25DE98299F525EEDB5A
9E09F469071BB0F203F5D8ACB7A81602D895D92482747C5247FC949EBCF49A26
35076A749645653BCCD481DFFCBAADFE1AF835E434EB9267DD48039AA9905FDC
183D8F9DAFD136CCFC8FE72E76992B5FE85B737B05E4A106D5F07413A91F20D2
94B88BE9F64F51116597B7B21693AA67B0569BC9A98FECBC4171E466E55C00DA
099DB60DF3E68822AC66F2B6820C0773F88E8ABAE7E86EA9FACBEAA3B4EB4695
A585C36103B18CAD0E878D8E422F92AFDCA9C76F5991AA3CEA5E4E5408FB9B96
9AFFE938F608AF10E3B31B98C36E5AAA15FF94ACD380B83F92313C397F0A208E
3D436F80962AEE1879362AEADCD9B40884BC4F1EEDCF8BCCA190E471D63D90A2
078C21777251D981A08AA153E57D3AC77963147793EDE88033181EC9C3F188DE
5EEF09429BA7170374C92379C003C65EBA2A94485105D53078356E2770E345CB
8027706AD0A4C81D4BA9759243F24517C8838896E369A28BB4800C8A74DB71B8
0A9F2FD46686BB8D00AC7B458D5A131A130D6F49A7ABF47833791F104100A73E
CDBF4133E260320CB36D21AD9A8DBDE3BB5BC119FA42CDC152077C70A2B0096D
1EA9FA6691BFF7044A2C2939DDB6F8273B97A12199690B96218264836889EB98
763FE3CE58BAD52FDDA174C3E0F92DCEFB6BDABEDC7E8CDD8FF33C568914CF0A
C5B7D04B934882C5C2F0496FC788C2C45F5C3314250BDCB32BE66D92D0956BF3
21AD820BC08DB0AE8D8FD27767696A71E401C3D7EFA3F6906E45CC1A920E6F22
569A9BD942A1CCA3F46CCC9E52B39C0D34FEEEB91C576B9F59418D3D7DF6A83D
A2347C6D21A33808AE3E5AE546FCCE22E495799D91332A59A03E715AC1329D70
87AE7FA7566551A6F3DA2B8B254F1CC2C8C582E13D3963BBD8EB1840551D538C
D3820D03AC87CE87697C65FD6411D8971B2F755E189AF0F81546A322D1D1C2B6
99867EB1007F021B2FC3CE928A3B7A62E15F0374625739FCE99B64D61C0A3A5A
FF533CD7695E440F19A0A6B88002637CA12EC52263E327E881F994B1C0C4B384
265CCCD74CFE69707A26F4415F1E7FE952C244D78BB6CC9C598A82DAFFF312E5
F0761F1D8C9086F1A1437EE86BD02943B747F5BFFA34236948E1651CAE5284F7
C7AF437B8AD4F2F65CDBA3D3B50E94D207123A5B05FCAB7FD90E2A9A4EB3BAC3
67D7B1F6342DCC35BEB2EB86AE5AB1D2CE23F32395F0497C1211854463046528
202A452C3420F1AB3ACF18E4427F1D5F591DEA4A35A333EAB50618D08F7EDFE2
D138C6955BE9ED8D0F033FB488ECF0ADD93E7E4BF05AA67DDFA5428CD87225C7
FF28FDCD4FB898A052A0B1A16920846CE370754666B2F8658541F956961AFC37
7DBE731D71DB8F5FDE80D25256FEA5B741AB69DE52013285D3631A232FCDFDB6
073730B912C0E56A55E18E0B8D3BA3C178D8850D009A8B3868F4A84AA68FD6EC
424403537F6385043FC6C757576EA0E4C8F0F14614231A275834C24763C89CE5
1D484F7E49765600A125D6DD423540B8BE90156D594FEA136F2ED0C853EF819F
0A9796DFC3ED4186A7D0C0CCD9314923F532E20ABAB52F22C753E11860FFD0F4
364CABE1975211D2BE934D26503F36246ED596356A5399F027831A861DD69023
15A60996D40EB66C62B4BE8E235D1819CC22B64E687E93492424D76F615F8936
F163FAF95D90410021306E10589994153B05EEDB36ABF690B6551DE830F76DD4
5C1F88BC6C9B218DEE4267826FE2892409609AC243FBFB8DD3A50EB5F282AF59
619638A93EC62A029471B6078CFFD8AB9380F77651C95BD71456BA087709827B
05A80FF78741C9F779C6AABD932DBC998B0E182044E46737AB82D1862E55026C
CBDC51BE128255220DDDDB5AA80C637A69591A52D8BE2DC7029117D29FF0A396
A4A4AB4BB2CEC3DFA2EC797BAA3658B8AD58435B34B1D7D501B561D3E1807361
81417A1B16610253CF9AB210F04E9C256FA52B4129E464BE0532CA2D8205BD6E
AAF03A971F6814D3F9F906C53B2A32B7C995E8353CA6CE618E314AC47DBCA42B
28A24DF677227331E1D0C3A6C10B1C2BA2BD6D435C951D8DD88EBA31D78517AB
BFEDC33DF60D1E74027F572991AA890A8B6CB720A8FF751E0626BAED78A3FEA8
3F13A0A38DCA8F99A217EA2C8E331E185FF9973EB52AA7EC42A1264B4F007545
E23B73F0A10120031886958FAAFA066B661554FF93D3FC82A30E925E85F78EA8
33D2C9E67E1A17BA1824982D97D74DC9BEB73B65C99374A4F388507EB1AD77C3
47D5FFF16F2834D756F67C979D83BDA3E8C8566C6341D65B89505F99AE5A5EAF
BA943EDC346DDEA4558E608DE8F38C15B44107090BF34F0F5ECA4B5E18BB4FA9
CDA30DB6025A1F426A2EF8CB39001B12BF20FB7328A3DD57F68209FD3DC1401F
F96C16481B7042DCDCBF51C85F0C8A7B7BA33EE984A9DCE4EFC789DC62ADB82B
0A55BD56905DEEBDE5EF45A36E98F797D7A457513939987BB10812E2B8DC5DCA
89125BC27FB4A991C45634B477D3BB3732E514A4B3F46D25C8878E0AE2CD2CB6
A8F5D480878EA65EAFB3CDE9EC0864080FACFA56E1FDE940835580087C603274
ABB261E483C1E6E2CB48355AAB92FC86835EA0797339E1FBB2B123640B01D268
71313943747C9177DB7DB090E3D3992B7142535511B214F4DF4208284A8F508D
04F7A3CC48C4421CD919741ECA9308D44A93D148900E639D7D918D8CC21B3345
749C0F33962CF4FAB7D531C73CB3F0722AA5EF22AB5A34A0EF45851A313A0622
09AFD19C449E201F29170DF5CDA1BD5C661A4788A758181C6C213A2A51EF5CE0
98BCFDB5F81E5D42A27D3BC70BB815896C3C727D60EDAB38143EE7B9EC45589B
444FC767A2001C8B829F5BEF08D0B4A994DE1AE7C09A562A736CEB92E1307F4A
A732A188E6A57C459061EA2D68CC8DD6A189304A5B5B5945A4D8076B03F73119
1A10B5F96AD36E63C00F783B2193A6C8815A66967B7595D1D51AA88BD8E49C55
BC1B68C60B75E2F3010CC15E819FDE037BEA807C8DB15485BE5285E83600D555
08E00EDDC03ACAB012882ABEE02433DF7CF95A00E8E775BB300F78654682C61F
CB9E7659E2B0A319D5E77A57BA9C9F1D4E62D4FB5DBC1103123F6B206E78E597
B6C42ED14883F950612695EFAFBC424FC5CFDA2EA2EE5BA19AC909294F4F14D0
F503064F1C78C7A6DE3181A839528F7AF9FB52C8A8B729F90B73639521BC63A2
252638E44CE1AF392EB4348EAF26373E93142523E57CB61535E56121B3433D1F
13C03AD805AA74F65566957680618C923BABB61FC9C51CC2CF1FB9573924D861
3BE48CC4826515D026A0780BD1BC3F4E65A4FE2BC28F1495C6BE640BAFFAC2F2
2D072F126379A165479BE72057F0D6D0311BF204A0F55830E11E1DF5557EF428
76F7EE52FF099FBCB3CEC69C87C6B4B20CE85BFA018D68CD2DEB8CA1A8533BE7
D472D5AE9FAC6822EA8E529B40F6458AEF4157279C6E9CA88A34D1940F8B3BB3
E8C7295B779748273C485A5F88DC1D35FB3F40210AD2AA6E54311C5D8B76218D
E43DA4233779A357901C56EA0246914D3E20F2A2A81CCD457F446432953BBFB5
765568AF0D54C7AD011FE05CF6C215C896FBA0BF4D5EE4F6B4E62F90481FE070
C5563D8B869B07D3DC15B26A068ABABA7BFED6E3D0DC8157A389BBB3C8C2D91E
42A8F3E97D785801FF71915A858725501E38FC7E760B5202739AD91AE1E9441F
3E2FA271BEA800890660242B3E632B7B081ABCFE616C12B14559326763892C15
3A3479A9CC68B510A6C08B16A4541667735D8E666815E4C55EDA4488B1DD2B54
5FF4B993EB86379499224879503746AB3F104B02B7A313BC68E5E3E490158AF7
36A6E9060443FBCA375D67D77D11B92C03658112F764626BEBF9362E25D22A9C
6ACE18C3988C890BBAA93AA6FD2DA591F742DF01A5C28A10824DBEA64965783B
E9523E9BEDAE749D7480D15B9F63FA5C12788F1D2F900F8EEE4A82642D30067D
42CE88A5A5C7792D8AEE4B63CF0C68AC833BAF4B22B26EFC197D4A893A5AEB64
46690B051BD5EAFFC3CBC07187392D22FFE55A492CB399A176DA59B0240FC0E7
C02D0BF476D768D438A2C7BB8B9C7F438CDF8944DD5A06583A75079194054F8C
0307C0BCFD26A7241379C2955D9BA1921169B16ABD7E4E09212D2C52F35DFA76
D8BD28B2DD16C22B540BD2E3D9BCA46A244932BCD87E29AAA354ABBEA2124308
4ECD3A01EAF0A8C3AABD932DBC998B0EFF73874B54B90F73A2664F7CEEA7B173
072F29F6D87C175D67B4D59389340D67B1EE8BC33202D285318AD6C4B6C3CD25
3993DCDBBA44091626CF59CF938729214C68FFEFCAC997EC286F30AD0245F049
B5CB965BEB1AEB597276E4E1BF52614076A37EB8566B957DCC0DF6D98F56CB1C
9658C5F82408AE2CFDC476B575419CC980B4DDF530330D2690839DC0AAE1F2A9
3E237F5251FA2C8C10F6B6CF80898FAB4BADFEE9ED03016A4285D06552386049
D59AE3294A5EC7D40F53AC32B7B0D6B6FC0229068FC2081EF93FFD0E0C654D9E
9772790B5888BFE7F399175DE7D08904B7A508E489571C79B7ABF464E9DABEAB
56BC495DDF93CACEFCE5A95981BF8F7C94CFF7F8EA237FD355ACA0F21EF5CBDF
CDEF457F841BE35BFE73E22391AD1D0DEC1DD4E91AED7FE13BE598D9AD6FD71E
0A16BC974D8F0867DD9FAAD38A467B4BAC3BE6EA6FC1C0132B5FC4AEF8D13649
C25047D5A37CC69496DD4ADA95093D064B0E699C59892B661E5A0CF7037D915F
4640F348449C01E851C4736321D6DFCE2013392F1F89BC2DB1381ADB11431C97
A8DBC052426E3C9546B3BC866A100E7045B930267F0E9B3917ED97485FDC9D80
C100576A54277EA4241DCC9CDB92F1FF880DC7ABB06CF7AA892FC8E6E9E79907
CB1E35BBE7ECDDDA6E7FC363C345F8B3ACB722B0D83CEBB2EAC247BD9D5A2469
FB68EB42502E847F9B9F4ED4009F15549E0A5D45A0357FA8A5AC12E289CF2D93
F38BD64B7DD5B36C3AD33E1B31B872F141C94BAB7698D0F13F0E4242739C4749
DDC8DBAD2139B87C8B46BB47E63CEDE5883F7BDF6DBCB63558E853D873CEA3DD
A1A31CD278919153635ECA89C32EC8E7C53EBFAE8F75F7213D30B583E220F8A6
AF2F86F63DE946E6A6E369D4A9A4F61BF90CEFAACB0E054B70E3F30CBA529084
EB8BAC342210D5B0ED5550C4B54109A1B5D36967C13E115F6001B1902F233736
798964C41105B1C9969541FE9DAE88609144A4D69DE5A76569D2E42BA1351FA2
B6B885DAD457C8351CA765BA358247310D2D65F7AA1524968B0E5D725D21F531
072180C1D863F24617C2FD03C1650D2C08D1FE8B52B6439032D4D1BCD52F450A
8089ED2985F3282828E93178613843527E859F2116964295BA9328F7C1302B33
DFB91A93FA995AF792FA4ECB9EE6B7FBB7E91283B52C20CF7246DBF6D513B429
B9C6142ABB607954029B73409C15C9BCF3FBFD73C8507B79B21B36E1CE7F909B
8B374E4975E93D9FD32DFA0AE84699D1811C58ED1E30409EA873F16CF157EABB
93758D7B49B76DB5AFF0BB53B8EEFB121487E9963A653812307AF69D6E5FDECF
4BF25C74D22A61BA69857F80B88995F6F36A3418FF9DF1AC47CB3022D3751E6B
7123FB71403E1541569774E8976867475731BFCBF77993B27F23C4B9C008519F
8131869511DD652656AAE94C7E3F4E753906B3088819D9AB87400E86A84A52A6
FD66F25EE411B6FE3380C97D08C634763ED73B49F038447BC4D8898DB8A639DC
E83DABB9EFF0ADAD4F0B7A4FE6FDEFE5BF3213DCFC00C1313C220BFDD7A30DED
E201C51E84D9573C7FD4F24CDA2E2E666E4453B5C148F1F0A547C318E5A67EF4
19756D79E02BEE2A9C8164FCE9553CB268992587AB644324CEA4D7CE88830C48
AFE9F1D7ADE37FF6EEBD9727C866EB24AAD9E402147BCE84E1F75F5B3232C240
2C89AF2B6D67FFC77F7B26310683787FF1BD66A511B076DD020308D68ACE92B6
D6EAAFE0604FABA742C9E773D8A92368FAD185E2623D2698C091E97744842A45
7D7D25D5240D6C7A49035FE0108EB0595C50629FA588F80A89EC4E200D1949AB
7C9E8FE72D6C0757AC2796DEB5902E2DC7BFE47C868308F390D699E46495CA2B
C1C43B213C3D89DE92E7EF4BDE9D7A2147B050E422BBC9877DDD12C5D9E475D6
4E0D436B1C23DF480AB13B1DDA74A819B97A936E4E84B325CF3608724E884B5C
FE0D5F3EE35B3A59D274DEE77067959A0076C04A66DBB5933F0E707E14624908
D9F89F27FD873F1E5BB04CF978F5B1E65D105FF5AF5BAEC0656C359EF56902C6
99443C9973015247CB18A33CC7A30BBD9E1FB50FA27E3D533213DB6F6E61D73F
1A9A9F4A5546C5E9EEF3EAEB73DF9090A0EE8017EED64343455DA73621731968
BA942BC448D4AF55C97CAC9429A8A8F3A98DDCC96839397CAA9C237B00EB1B72
77B07406FFAD07DD3D76B6388057076495E6E6E221288B5AFD5BA203F4281686
55B462E607D489E9850FBC037FB0997B36748377B640E2E074A9A8D98BD5F5A4
57BF4D594EC829027F09E0591810247C5A2E208983DFC2C5C8CD5BC81BDDBDCC
32C06CF977200F6C63D9736556C4D3FB78E52DAABD046F4CF1131C48FDAF5135
B23328D6FD116711C22CD8D1C95A324A18129ED1B57F1B750CBD7EC94CB0507A
24B8A38C0E62C4F556197A697A3DA7C31F4EB4BF0C8855B30AB3944586A17D08
CE1DFDB84223611E7E0AC30BC23B9CEB9C8B852A3264E8F322EE47AA271DDEC0
F7D5FD2E5622F16DFF0E39208050E4E36AEBC8A91563BCFC4A9F7A5B2306053A
B76C31D00808418279F0CB8FABEAA1D408191A753501892D9F0E3709EE103F83
74F3BCA898097A70B330517E67C3FB90D1D26B6090AA787A9A653A4FCA9F1B2B
A838FA0B1A3EE38A58887E35E82A333D9C19CF5036261617FB6D265895028B02
EE58C2A35464F450B4F813BEB6ABEB62E092329D3D9C31135A173B30BEA5C898
6EF4AB4C5D24BE8B5625A01001B46217AD38E689B8B156842C258E829E160772
4FB6539B742DE2B3BE779E173B4A06CDC027612E33837F6B0D94D0CFCDF23250
EFB35C9E757B88F793CA0BA222950651D0C2DE445EBE0151123052108F9C502B
C6C60A7437EACFEE138DDDB4820D264970595886DEC231AD87D87213F676D138
6A008806A8AD3DEF563C4ADD067CC1219806B39BF76F39DF76E88A6D39E72F86
77D8CCA0CFA4255BDCEC54B06D74E678E3D33F357F98D23D195C04FA5019C3B2
8A090AD53059538BE67159063CBB2CF2A128231FE44842E1D3BE4EA8EE473CA4
DB8D855CDE42AFF6B87B2A18201E04619864471F94056E59430B18E132344691
2402BBAA2BEEECAF3621A5AD610A60B07F54083BD8747D93149F1B5C4112E4A4
AA9EEED46E887113A3CC2308DC7C9520B5D1938BFFF78ACE62F76808383B12F9
C5D92507022E5104EBB01C946F8598553C4DC3310B3C9DFE57BCBBFDC774C14C
5D7D57CFCE26B21B519A6340CDF9825F830585831C691BF0926CCD49E6CED842
9A72CA97F114497F621F41817DC1D2663CEC41B04D178965436324675D0B1776
222791E6E451A0683A3A2EC167BC09FACA73885D94696EC05B0554E6A6066EB2
626F6E0E44DB9C9540284F49681E8F95FBD8ADC72FD3DC88C7D46E1339E870A5
2661C4E4CEA5A99A2920977A8127339414B4837A55E02EF737BDED48BB1DC692
7ECFEC2E702443175841D7D136B512E86C4693D6D696CE9F5D6704DAE22397C9
1EB01CFFACE99A63219954064CE548C93B33A62BAE015DFC84C1F36006E4DD60
0D522B8D60AC59357814812944869DE4F3432BCE9754C3A158E99E37E4773B9C
EFFD955E2F3B600573BCDFD91077254AD6B5E79F1CA02ACCAA6366E6F24ACD5A
07E56C986A7BBEEE6A7948F57A40302C92CAB2D296E2BA00A5194E5361332EB9
0847DAFB600AD4968FDC7B6ECA020CDB3C10C03C39BF4BEFFF935B48F52ED960
B7F4D630E3B0BEE6DDADAA0CD6A92B603901126344AC0F486930922FE22D7CB8
388EA9694FCA64C07EC6CE0D55FA9D11EDDB9E8B3A4F04A6EA373005911F7CC5
A6F7CBD6D9C25A895159D64232043A60A5C58756836C163A651310EC79A84ED8
EE2B6373A10634B88A879235FB15D35C16DC65ADE10FAB296A33D5E4A4891976
F6D44642365883CF71C12B7E031910FD574133098D393A0CE0D06EB59CD7CFB5
B6B506891EF56ADD24BC8368D84566836D501A9B8D50A97238F88827E7FAB92D
15FD747A6470E61FC86575A10838A368DCADE122D31E9717FE5EC1A5EFEB2AFA
5E342D710575FB021D66A122E40EB344063BBE4870FBCDF58BAD19659B9D16DB
8758F0EE0E20CC965EC0B6E1431970DFDDE46788BCB6EB191AD968CF0EE33427
2DB33FC1F73FE77723059563FBF849F68BABCE4CF41AB22C3D58C90DC6F1E8D3
5A0B588F8F2E283D586005A70612E7683B4A82E1CEADF40B35C57A4F765901F6
60ACC645435A3E184AE360A8C2779A355BFE6D8AB92C6B785B2C9568E570A849
EE738979C0C67F732A8F84A6C6DE95AC4ADB662179A734BE2E9EC087499B2226
78B495DC8D120AE727AFC47BBB23010FE335A955795795EF9D8700BFD3B4DBA1
D63A4777CEF9B01526D9D71A743866D7916E1FA23CD80BAEDA04AE5F7768DD5A
FF4F1CD2A539CBA73FACC5D0E30333131C4C306CD50BB2C4CF62B69CF9E490F9
750A7CE0B00A6B4CDE190387316AD8BFCD4479E6AE54FBBA0B739F783C158216
F12B567DA0E87927C9843246DF1737BFF801E682044D73DA6436C9DBF6843BE4
29B12E9C3CAB6E2FC94DD987F9F648D7A90A19D31C2F4597EECDB4C432040B33
F2109038395A28C099DACA9E09D967F483BB4007E7606F4343C3A14D4EC77581
1F1A0218F83F53B73288A9027437F5DDE6BE26B103FC0926A3D1F09062690A5A
88D5512AB6E16FAB0A63DDF426AB62040819BFB68BF628107FE5F281B657647D
34E6D34436F1EF63EE91ED3BBBC55264BB9E27E07DAF2CE6FC175BCE510B6FA2
8B6908795D8539D0FD102C44C29B85FB0F15755F1611FD7F75F49495D78717FC
FAC1D3458BCA1A0AF0D77E9A537812485D230934E324AD460A6E653B3E36767E
115CDA82E83C08AD158AE3ACCF86A469C67BF87D7BC81930A155A11CF7A00937
2C3B199AD01D267F8EDD1942D1CF5C6B8194177349680EED0E5F9C54189D2A7F
73E8F88567F48BCC4161A1D3C7F726FAC39F20918B51415D282F6FC644C535FB
AF56563CDF7DD49EF07DDABA1123E9017CC39DDDD2F49B03D8151776263DA6A3
603D9D5BE24670C9B44536F7CD6C20683A66D78A358C51D615878E063A50D82D
5F26DFDC21D53B9386E40207B269ABE5C9804F37E215C1ED762B1E1505BCA2F4
1E86E594887F515A773BF650903353FD806AD996A0BDE49BB0A2C1DEB02FD213
81CD46DE8D6ABEF2C93EEDF6CF03F89EAA12761285E5742614BCB11CAEF9F590
8FA01441ABE9A054CC427F994D896ECFAA52DBB7CE96BD23324B420C47C7A2B3
216B53000FBA2BAEE86BF6D6D4C25960C0391EB5D313622BBF4CBD26D4EA2A4E
4D86A196F095875F273E0E9B9485F15C77DAB0D2F77CAAD671DDA25B17B5E7CA
BEC6567E13D42007677F26BABB18C846D8724BB12F1BFA00B931D05AF2648AD5
96A71BF51A561E003BA8207E14A09C01B67CE227DFBC393B066A2C1433836778
766EED13D5B1D975524DC8C6D5E67B0B8EBD57AEAB12665193FDA587F522281C
9C2C6D643350CB0CF685B0EEE828F731F3458EB8DE3198BF3BA4AD1CA08CF40E
57270408B9C4F2166D7AB717464E7DC2E8F4F4B8904DDD2E80B0D09350074FC0
BC182D68D2BD2C3A4B6C50A71D9A8B7F0C81538002EFB10B1E58C4B1BA303439
80D51CDD35243A892E4260369E8300A83F9AD5BFDB9DF4CE0F253FB6800D5DCC
5A9F35A27183E457C4FB1892AE277745A89371EADBF2FBF195E295ED683119B4
74AE0A92A80E3BD9F8FF78968F03996B66A476E7A68C8484234F57B8CAEE1558
D849E59BE36E17CA07B9FA668A8749D6A50813DFFF6DECB3F7516FA35431DB9A
F646C66DD158D5D5E7C7EFF27A1C288098A54ABFBBA5EAB76296C370914CF1D5
22123EDD640185C974581E084956E1E0BCEC7287DAE059D6436C4682E20EDB00
64BA015108E50D04B136815C51DF4F870878629551AB32959A2BB23EED6E4886
878404BE7530ED3CC943A1D0C5A376B0B7440DB71D730325A94DEFF18F220FE6
7184E0086DC8D85932D989F7C300EC9F792C5DFDFE694A4740F4C0CDD88CEC89
829DAF8331EB101D7CDB588BF7D322CED57ABDA47D7960466A2D13EF9F9A8C07
3A1C110CCB01A3A583B92290A9019314D6BED97B10260010C3DA1BC2B1D4D4B9
2E6AEC4A9F9135F14323A2B7F0EA06DCB6CB7F74D81961F16262DDFFE64F5EA8
E3B253879859E867A31AB9C9DE1FDD29DF083DA383545B1CB68B11C0E04C3D85
8964D0189E620191074C9A5760A025DD42EAEF4C8428C5249190E9E43529377D
314B113EB6B04D1843007ABFEE949A5A454690CB7E97B34F8A4692E1CBE0EDF0
BDF8FD8610CC56199C0475DE941AD281F5762ADE506C2D131D69BA35796C2E69
8D74FD5013D7A7A1467B4EDEEAF4F167B0BD48EC54DAED7A0061A540F28C9AFA
30377578BB7134A140698289F8C6902459E5DEFA0B5F0B462E2A91B9053FEA8C
6F8A0D1EFFDB2C24E7E65F25356571CA9AF5A9F8FA0A75F1A0C71F9EF66C806D
4F4B51D235A6AD33C142FD3FDC47B2DBBB82551B266CCDC354442D30899233FA
4FC2D76C207FA86A402E6A1C1DBD1097669D767DB8787CE54E56F6BECDB3C33B
AE1892AB946EC182951ABE861BEB164C495708D1F7B738A5CB441804210D65F8
E640433640B24F4ABE833E3724FAD4571716EBFC2309B18958637F4BAF61516F
52BC30F043A1EBC7C8F83D7F807DBB502D98C4499D7BAE8B7E871E14FB8153C7
49EF93804227E119BE149EFDA38C4E32486EEE101213EFCA3BFBE94C50873BD7
30AA5E36BF0EF21F4EB9FF0BA1DB3D8B2F2BD6013AE92F741DCD1B2379D14958
8338CD9D75406CE6971DEC7ABC55CB768B186C0AB55C135CFE8E35CEF1FB957E
0D1F9356E7EC6F7933B6E8A20D931E76533CE71A8D29DFE0A92AF1EED2FC1634
C1ADDE4B84445C2611AA195DEDF128503DD2964AF629BD91310BEA074A7821B8
81ED19E6AE66C6529BF0EFBD06937D855F029282744DCBDCD29CCC85AD10A1BB
B5F15A20CB2BD121E3076CCD04CD2B80A2FD2C88705C9FAE55ECC89F4D210AD2
AA6E54311CCB81AA3FA915C94B4AEE9BA7B3CCDC542AE860EDED393FD1B3935B
A41B6B3698B2354469D2503770DA3D3A0E8BFB91C1B8F3EF2D81E28E3035136C
1564E70661D4ED46D1AD52AA4156D5D08DE0E0BD201807B3D70196DD4B0E8AEB
23DEA44CC15F023E78C1F12F7069442E8DF58F8DB73A83F687E098FC23F52CCE
AF524948C0F7200DF26FA8954977B5B3453D267344E6972E48D045A1578D2C46
89438165BCB59977BBF1EBD2BD2B5FD4F62AF50B92654BD048322FB4A5EC5FEC
0CC4EBF6354845CB093C082BBD9EA4CECEAB130C1646B1520CEECC7A434762BF
A364BC4D4FEE42061BCE224E56ABE6875978730C96C89E4337A87CEB3AB4453E
A886BECA1167A400427F13AA936B264AE1EA62F5EBB39049F9CDBC80448EB6D0
B6A868E584AABA4955999C1EB59F29677DACB508B9DB7EAAAF8AA6C1E0222446
7AAA2CDF3E608FC7F70BCD0AEE3C4C68C83AE126A280CD80CD71208D33E4C7A6
8102B68AF336405A3D623A944EDE1100C7781B1713AB5A8A2A71BDE65C1945CA
42A9789AF90EFCD8E9DE8C5026DDB061E82530D793EE61C0E5414FC1942C148C
A29E0EAF2C3409E3682E086A38478995E80D2EF200B612AA818981C9362D8A85
5B9B3D4F8C6205B89164E790CC324C2499F2C440A1EE71DDB540A5ED9B23B08D
E4954641848D5B66B7D5C1CD4EB5DA50D3884900DBEDD28082EFCFBF2166DE57
7DA95D4B2889FF6466607D7FA499F1C01A5650632293EAB619956B54348B41BB
6DF2B4E2A1F6E6817F268C515D08B6B5386F6F3C39
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CBDB664E4350A97E8B5C55D9F5A6E86C7101BABC80F
C6726313E043F4D443348B27CE9DF53BC22D8EC10EC4D7D13CE866859BF0F236
8FDDA874433E71EB2229A1B1EED0B0E4985E0960424D64188C7F7AF7FE006B59
DFE804795EBB844C0BF9AF326F201D889F40D7AB654F3C24E9BC95DC86890FB3
4B80E5A62A8232106093EA39091D582F20D5864807AE86831051F55FD1C3B0A0
9767B5FDE0C27786E8D91344CEE59EE871F14A55D1C83E1A7A723E9192487494
B2E54ED83A61AD78BA44185EB7CC5F12ECA7099BAFC5493B94C8F4D2EECAB69F
BE6E3E609D282666D71108683107EA60C6A28D45C892E53DF3AD9691D4223557
2F67AC5C0B20E59D8EAEA803647789279AF0D74E1F11FC8D595F89376F4891FC
FC707E8C95768AA8C3A484036B56546D498F9695D2F750BDCFCAF1E66E95CD51
FD3CA7793F8CECB6AFC92869148DBAC1EA48921CE9E2CD6ABA43C9944F50B9EB
097FF31C13D0010E4A3B947F6998826D1331C200F6E27BB35E591601EBFF9580
F378E3BF2E5999DBC0FD00F170165DF48825F719AE145A0224A50AE65CA72F9A
EA4E0604D3A33EE2CBFBDA1D46AE862E344C36A1EAB57E3D94961A53267319F6
515B36EF9D63E4740E8895169607D57C89956B526A664B28A2AAA3FBCC751A7D
639E32C569B568F112736EC85AE931AC058C6D311CA89BE960392CF963A9E9FC
A6174B6EBA7A6697F6664AC6B6C1F5650255776305892A6E3D9CA866EAD30EF5
8F42E5D1E417F4D4AC65FE25D9CEEAB59CFF41825ABD849980EBCC2FCA919BA8
6052E66D6CCE1319E2BD32665021C706CD9043D5E6DE199F70BB91EC2312E8CD
0B0543C398EC159669A16702641351178B9ED96970CD80D89A58CA1BD2ADD0A7
E39690B5CC4878E49312AAA94E1EB3CFA78A6265C463637218A766F1CB1145A3
88885C14F6CB298FB6CD1A3D4073AA4A21E208E7B2F7674D1E30DF4F27AF8328
88FC95A901297830FF4A6506FF6A0811AA9DB9715087EF03A4BA6821A08FC559
ED3C0F8C2E59CF182C9587930AD5A79266CBB87BE18FA430BB2181B862E48188
1BB07230970E3C1778442F83A5B69626BD10B4333CFE39F18DE24E66E0B052B4
2DC4DAB78E3157EAFCDABA6A0812BA67234B949600C1EA9C8EC42AF27901C788
FC7FB98005BF25C772835A3BF870E45CF58B095A3417861803787AA9787A99CA
B70E757E616BEE4CC54EC76904F8605FA447EAE76075B3D282CD421B79E2EBFF
5C97BF9E3F14B6966EA241C1B2A1F95EB6C10FCBC78ACF0470BA7BEB205CAD5D
ECD21514A6B2F2C8D52AA8A23C0EE361B7189D914C070ECA144E52033FCF44C3
5E00B7DB949DDF5699A4DC16CE9E7BB29B95DF803B00EA79F37E1E7F7EA972B6
A33B03DFE139CE52A5339AEEE824D92F5B60C7F9518B3F8F36C45AA2B5ED5598
4A3535F74A5B1006DAE1B0EFBDC383815CE6CD2F6F498E45226D8488CE4EC4CA
40FC86BA90B18BCED9471743A94CCA65026FF027105C6D97B76237F49A3CE4EB
947B89C687B3E64BB4F74DE6726FFBF048EB50CBB728D831808509A6C826345A
CCE910D3621D32594D3E939489F23A5E1B2E5F64FA1617CEE019CDA9FD247A6B
F28F20378359135D0A9C430942B84A409F34A83FA1336E4F9683F04B646CFFAA
289E62CE1A2E1BA0788E049D32EE65140EB08E2B0AACEB4CF9D4625D95747B6C
185E9E9588453CBB1BF0B82B98C5E6A647FC7BF1D53B4869B8C2A97D29571467
D1B3B6EEB54C8C79CEF7AA54A87203C28692882C8C5800FFECD591E46E5928C9
CFA83B5B8434C8DA4286
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE692E8F384116B0DD62758A3E5CD7FF4AC806958EFC69
D56106729DB6332062ADFAE490F3AF690E1AD2E1C89CD25B567BF58497ECE9A3
1193EEAE01BCA557CDB6667F5042684AAC1CBBA7BDD35F63FDCAC50A8F3B8EF7
D9F110CEE18EDEC4B23A97D080C2641931E59633708BABA1C0C460E1F28340DF
37AA75DB61EB4929AB62872DAFA39086B2FF0BBA147BFF00785663883D258292
F858A984890C62B75E5C6F1B03315347A11607EC857D2AE3DC264C9B58E9057C
7C31ECCF837941C0D9579DA8A2E671C13C58C0200A66881FC91A4FF6F1A6F836
6FE6622ECEB154CE3857FB4314F2EFAC60F81594C5A31761AF688C996E2512C6
1E6654661EC5FE361BA322AA27139373733442D5EC943B0B1FA5B565982423E4
CF66BDC42CED9712CDF80917027A907CBACD63D8762F2475970A311C6C9A32DE
16A919E23A1B405A632ABF7B461EA5BE84BF3FACDABF048423FD26FC8D4540B4
91831E003E1D2375A21DF54FE13B99EF2654691B93E1B151B38C3C1F779F5276
6D80E77B1270813358CF0F894980DE12626DD24ACC349E0374CB58797BD98C9E
5E231D7E15C367F1EE4A8905E673BC5E48F726CD4EF46215A2E3AA5AD0C896AA
D91B9EA2D4E1F0430F01580477EAC7D92EA05B320D5EA5E6271FCABF4B7DB9B0
88E5A9E1DC202A0EEC44D48138E394C3897F44DF33EDEF16091E575575B48AE0
AE82444A8879B3E25D0F1CD42374C040BC726E46B8F61A28F41286E5DF477A3A
9229DE7C9E26B0894C3BD7534DBC17ECE29B6D1B7411EBAC2F208C5F46DC3DCE
7CF32E83B7A0A32D4947FD71F9552B44B2F0B0059012D11CB50CA72B1BD2CCA5
6BE10D4A1A953F1A4DEDC628C5A938EE557F3C967F281474309D0CE474CE752F
2D3CF766AF59C733A0E3A8A15E7F2532E20EBCD7800477F30C790149BE30C6F1
8568A418E62393D412F860FB268E932F5802E0C7D5C3D9BD96E8AA7B9E9CB6B4
53DE929CB5D06476C70B7F00C58542A2A16E553DD7DE2B0B4283A30A9B8C6FE0
543CCB9EC5EC493C14EFE487B01C591DC80946873EDDD6D5EE79530BBDA65745
104FD0B79FE75C5514104188E55C0B2C117C6E05C822ED7D2291AEAD17242811
4B268F4040A300E3D33BB54E52F87D930C904A96E9C5CB25FB822F1936B19248
9EAB3D1AD7906774BEB8129641B06D0361D76427C14EC56BBC057B118CC10917
FED209349F53B957B410107200198FA6D7F9980F83C9FA03C74E783B1D137879
C5D26784684447D02E874CD8411275C386856A921A0429E0A27CD572E3DAA91A
E75D20F5F8BFBFE0BE4FB5FB9B1AF2A2A2055CD35D520B4054D5926BFC89A126
C784BF500BF176C1771C6E9EC21F1A4EF3CB0D3CD798A4439BB48530E2761F9A
0D81F572B0BF59590133496CEFBE6F0292AC264B31C326A002CB4B27CFEA62D1
E9E7F41EF3342449ABBF15B72FE3ABDDFD7A7898376C1F64965FC95C52E04F14
587AADCBD2BFDD9A6A1F254D3D2766DBFA5C9846A57CE2F2C1CF97B539D7A5E6
70407F7E44BB572574D5AE091CAC99152BE2851B524B1395C9CD78BA696A5E87
85CE2AC35E874D95E069176F3DFB08BA6C91644E745CE6C3090F5AA6AF7C1D1C
827B721008A65E4127F53C311B7904C5BCC31272D515E9261315E4A09413316C
FF5618610B8D707FE4C6C55A0B2F2B83EFAB4DC5F07BEE22658D3E724B1E7E71
D162F9BB9EE0B087342926319B40D68A89369C48E278A361CB9B5259E59A978F
FE7F489ACE09435DCBCD6BEB9B1B59F35522428D935558F44DF6171FB327582C
E57EDFA7A135BC63A5257A96C63CE00B2C2316C31B6945BFDAAD0B734ACA9970
2724E11E702A34C6A7ED4B69E23BE7AE4F79ABE542F7B51517A35815BE230390
73692359BAC0B0E791F77A7BA9482952B9D4702E1BB6E81C4CD7D28CF52AC2DD
669D1B4A9F1779B70F14E34BDEBCD79854ABE8A21096CF62327F18906D96A5A8
A3926A2539113A34693CD3CFE1546987A4C1E8301626C3F8958F89EDB2F21D39
6F97FAF6D798748092434E643E152AD60BD626E141150DE0B0338E64FDAE31F9
F41EAC61E72D29BE20EFFE94F4D3566574579DCE45F43E7C6B24F1542A7F0C7D
0DDF692A95C26ED26590C7B9B87E80355165FED36AF9A669C781D7149D87D03C
C9BEF03D2CA4040ABCE9AD88A75ED65DE8F971762EF15E5CEEDC7D5A0E2546C6
FF577323574A0017D093B2A128451845B80F1BCD6E75E76D3B53DC126041E31E
D96E5627CA41484E45C413CED5555A2130D4050A47C9AB7EB30CBBA7917E0D10
2E5DFB216F58983382EC208E6B8E638E20C003DA5D76D38166B52EF839425AE8
849A4C0ADBC8203BA76AA602D1D41150FB6EC5372453E86D5AD6503F044CED8E
2E085BD5A6F9A03647E92197750E3403EF077649072693EA2F45C1C8CA153C8E
C9BE44DD1B78AAE6A89E3FA57AA3910223FD4B6584B1C44C7F0EA0223A6C34AF
DF85BFA0C06335D8DAEB33B620C021344136152DEBBA4D6BF6B19D9E384903ED
96B6C1455369615B63FADAC2499791C02CFD6AB71A335776D6436408DE16DD23
0BF0EAA56F8DF4DC18ADC013AA03EE888D386F0528044614E73234D1D11B4E21
9FA340A744C0F01463512094F4CE6BDA6E7687EF05F8ACA61BCAFCD5940E3B35
1322274972C913FF6CAED346045432F6C0CA5305EBE7AE97AA84865C8D7765D0
6BE9A337D26260DCCC5D93CF4EBA3616346053DD5A93C768A561B2A591E745A3
72F0E5A322485ED24D3B4152971C1E48B4CD7628C30F1C9B46C71BD0F49B3D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB601A5205AF33E1C34B285CDF947005615DD22A9FC1613A051DB8558
F2E61CB9E2FFC65BCA52B690F4D37B2D133D36D963BF8667C8DC3E83CA195EF6
ED3B6830A926EA62E36D03175564995F2A07393255D7C3450305468FD152C0CF
D0662D318787C108CF6922C96AD6DAB12F4ED31D68B15F2B74914BF86548D873
16170A909C07EBBEA2ABCA49F3BCA51F5A6CBD8E9D15F2EC5327E0258F5DC219
8B09579780B48BE9C0136E0E1F0FB0A3B5D2F78D1155CD9CF416060DD63C0ABB
648ECF22AE7B058941E6491779055E2894626E6C1FE4DF68E66F83EA2063294E
A25AA159168EBB2C3776B64C0436F1F67FCEF9D5D09562C477839F178CC1B15E
B3F3FC1AC6D8EF13EFFD7A41639E03C463B9D538F59C2C09D9C77E08FCF101D3
B8A9AFF2A4E54487C65650CD39A193C7AC2DB13218F2B69738A18C5FDB992385
1677980F42821A0BC9D23CFEE3864766CD821AF3AAE8945D037F78D6C568F714
07BA29FA30319B8C68F8F7DCF39E5FF7ECDAE3884DD8E69253CE090D90C29776
BF27FADED563AF292C8F30EC9CDDE8C7989902475E6CE9C732AAA49CE107C713
A3CCE5702F4BC10A55DC4DB309601C4181DBC8C580ADD685C6E19294FC93545E
8653E95751A2AD9153777F195B349B3B264DF1EE2C19E988BD4F24204A6BEC3C
2668B7E3840DA5AF83878A4A44931955CB6414033DA24A82858192F432180950
A082F14F89C0C1457A017C38E2A83A91D93A331F9B154377E72DC90F8BAA20A4
9AD863023AE1DDD067F152B4802D5DB384757CDC3F750A55BBBAC8AAEE632092
CF95DF3F33AF14D447E9492F907BD5AD2F14BA35BB6E9431F461C88E7EF2198C
005568E9DB85B2A0D87AA2DC2639360B54A8A32224F0C87186BD352E33A39C6E
994BD8680045425F24579852564EF01DC4AD98F15D522BD15FB90245D0469A37
176FFBCBE1C6CB58A383EAAEA0F49A0200F618D424859429DCB4ECEC7DD28263
6A3D07044AF419F80BFD3C1E5807203C5389F960C2262A263D11F3C1C4381886
DC53F8FA85EF54E973862BFDABFAB60376DE3B447C643458A03D0AE482ECB5F7
2AEF37B4CFC3B241CF20A2D9E9AF9010D50B99310A0DAF0C059C1793B8FCD926
4ED3E1F628D703A105CE990529B56777CE41740C3DFE1A1BDB292EADD055C979
6574913FB67F661E0251CD156190FC3B3561C0C632FFB0E9DFF71385693E6B75
BFC0436205231264EAB0C83C286D1A2CA6C84ACED9E02D9E46CB2FE2A6C3F956
DD94E57D946E83F574F370790FF713D5F12B0141EE5B103938F9A7D897D7E9C7
88459B39B30321C6ECAE276B63B88D5C54A849C5F2F57D79D880E13273F7A423
D64D1693B638AACCAE08206EABF5E61E8EB6B71AA4B19F803780CADE7CCC0E92
7EF7D853D4E937E83A49AC57D38A8949880F6851E4CE7E0420FEC748DCD88046
CD4A643BCD58FCC62B4973BAB1985E2650F843FEB3FD3E1D20E735860CE2D6B7
457368EEC9C3C172E6FE5357807A77F869A6387CDD3E0DE35AC5CE15B3640136
0DD1D3A7ECF49D996D35683140701ABBD926BB41B1B531E491065D57658844EB
974B33799F8C044D724E8463B767DFB1E92A0B73F5904B2F6FECDFD361063AF9
A6CA6F98607BC14EDA3F0BD3DFF58FFF4C5A60CCF5DD51CC3DCE518DD210DB1D
D6BD34947AF82D8D10AB50C26895953E493CD5E3519EC430FF06342E7FA9FE4B
EB970EC45F7A56748D8DE39EFA109002DD5225DAD211F5C72F3127A60A33D311
387BD33E014BC32FD730F22927CBA09B8CD2167352E6BA2E96F53C12D7E0B65E
32A8EEA690C33C850A8BC6988EC47440DB00FE7A2187D2562E08382F94973EE4
F7F6CB934CBD6BE5C83A0D92C36E2531163563E652BCF2B244439881DEC17CF4
BD5B6DCC5F7E835C3CE7D4454AAB910A3A53788245B1B6AFD86D04C4F84FB9CB
9BAF821700E77085B3FD8695CC7E4D624573A635B65951DC366F76FBAAA7DBD8
13BEBF3CF60F4757F6503E5FC28B8115CAE3463D9EA2612902D77900C11D9D52
F70E14CA100965B20E64C0FFD4CDF61A9BFFDB50D7183314985C5064F395E8FF
66503AB5921DE8EAC56ADBA8EB93E63930688912FE21FE993207AB092EBE1132
B3E2024B31F85CCFD89046C1AD90FC3D85580E60350CC90F31F0B236929E347F
D364CA8C1F272323156B5017E6B39EC952DF96091851A33211F931022D46B886
59EF807AE7A911A5ED5DA44F01487230A3702428CCB6407433D52A8CA1EBC4E8
7387ACE2F4D31C0D4E1EF9EC09CBBE9055293B5878339F2AC0A1EA53C1373763
D9B0F679C61DC5E6BD7A0BA4E864DA31832CE3B416648FC397B264D2A274CD73
9F6A9A8920C2DF579A8C1E5ABDD71FA12E05C70B6412C4E4378D0EA7DB19BAE8
A38B788036702BB017E760AD9AA7BD2198D8808551147686B1F63E4C31E6AF2E
AFE4760B0C7A7823081E4058437BCAA3C8F12D16BCB3BE5B4EB51671AE935717
6D5AC14506066CFEB9B8699653B19211BCBB496DBD14540A1F3ED551EAC377BD
150F134E5BB4F8D8247CF10521AE6964C6B191530BA73A637F4671122F21CC9C
D151557CD0E213D56EBA556285CDF549243B2365325A3A4F028F88CB2D9A7742
2757988D43159FD814DAF574818FC2CBB2043687F2582B61029C9FB50CE54BE9
BAD9B7508388DD936EC2296E93A32AF269313CF93D624D3B9683018DB1C7A699
D366CC01BEDD930B24B3A13C21005D27AD1EAAB824262042E2ED8FC597B47332
CB2997949E07B104540071442DEB0538F7B02AAE4FAE64CBD438712465683186
2FF01CCB867F027E95F0C72D63FC923AB87182C9D634BE8B5E06993230B0D079
73A3F35E882A0052DE76A475D72276E2C6A8C482236248C5CD2D87A629277C36
A190BCE3C3128378B8FF538B6D9A7D82D72497EBF96AFA6691D4E5B6A4F40A7C
7E885566CDA374550A55B6CB4A316825AD743AF24B4870DF45DE0149FD6342DA
C7FF8A4BC90C6D9D5DBBBD6D42C75C2D010C7D8AF83A20F9F5DB0FF74793F3C5
263756C50DDD74D66432AE5DBA545ACD75938E834CB091FF098A8961B1BC7F8D
AEBE2F8813556E1640562B8A6FF2A3744837716C4C225633352C6262FD838DAA
701AE79BBFF5E823A36E64EB3DDF8DD1978FC7659ABBE844F77F565A241B9F91
FB0604DD8A6746D4B6E7DC9B82F22C4F945E576DCE2F0AB9A32B63A95CC91EF4
1B8178DF79D2AA7708B467D1D15A151E76DB702FABD13F17C5CA230D44A8E0BE
7578B7A682581FDD7668540F756B0FA345359006220706DC806409EF7E5BFD96
6C2815E1A1DCBBF7BDE45B9E7C914E0074C4F6D3A398A33A4BBBB1A93C0A3BB4
D2D68DAD6C1C9A9D92B7C5241667D3C0C8AC86E1B01840E7CDC3B210F7C0C721
81F6EF685EC0B7A1C11402138F3DCB20762A5D4B798154ABB6A0AAD6624CDFDD
F1175E32751BAA16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED29AC2432F82
81B538DCAAE19E5F27E7F18378BEE4CF88679EFC2B423322A0AE12786688C1D5
C8740F766D91968906B8463A7B79F436F6198CFE5D5F5C097192DC61B47337F5
0544122F3662354376F998E255DECD92AEAF5DF071E285C8E0D2DD61A7164355
5DD007B6477A05334C61810FF765CB849F8CECD243BB1A43DBC273DB1BE1C53B
751270D61C8ACB19DD62AEA40B0E23678322EBA231B6720572F045B32289A2AE
66CC44A1C13FB8BBD4E18797DAD55B8CC6FE268840400BDEC78CB30A2F939E91
7692DE8A0D5A826235FDAE0F2269E6CCA5E6E543778DA248C34D20462258D5DF
BFD7DAF32CEEA2096AFE70E8058B9F0B6D3A86FB04163ED36491F24D7C3D634B
25C2CC15CBF438AD191B3BFC1B7DD6D9AA4D9519F85B14ACC01C0694990B5B4C
CDEFBA8FA1D34686001ADF08CCB347176838A8D691D00141839F0032560881EE
58F4131635112F94C35A36853AE144AC5AEA6395A2CBA52FE80E62DECDCBF8C2
255DE4C035D2303AA66DF56526A41CB14516DD1C4A4896F091965DAFAAFEE8AB
73E68516B5714FD6DCC3ACBFA7059E492DCA4AA0C2B50FAFDEE715E865DCCD12
49255D1F4329FE92C8C5247752B2945D2D707601983B3415981AF9A4CC1FEFD1
3FD4BAF26C1556CA24236C08DAEB2F796C0F267E8D7F4E2B82093323981CE217
F3203590D105D3EE27FC276277140155EAAE420BED2569F3231D1EA86607CC7E
E79F2BB60C5EF4AF15C347DECFA798B6E803A0A99CABA87DA35B532BCA16C510
BFB41B1FE9DDDE60530ACBFD53EE23242B4CC75114C011DD8A797FB00B7026D3
CAE5BCD397BA1FDCA43DFE85DC74189494C920B4FA5FD6B15306114179484431
F2E22EE904B0AA79104E10420C3F67E491EA298A68097564A9097BF1D2426871
35708C6BE0713BE061555B37C7AFA46D087FE2C63DFF9106B397E2D6F3E1134B
5A5E07010C188A7649D8D14370CADC96D77BEF8984E337EE0055EB8288CCBA77
B800093FF1254822B3585BBEE5EBA03DC4A4CAAFEDC3F8B76AA2205EFF87FE0E
C3E16F77C42793B52B6C655084B441198134DFA827D69AD52F664F6DFB6EFF87
8D0A68604565D0BF75FD8BE022C1B58EE172A61824E037AD5F12DF23C63FEF39
B8BA4FC1622EC78714CB01B1D8CA5599BCAD944BB557C31F5059380976A5B2CA
C668D4D0759AC9F82277403C5DCEFFBDF3C8F586487194107C63BF5C6AF68FC0
4C371C2F5153E5191311268DCD5414100311461396FA7530D5778BB74957ACF1
AB49D651BA461A600C56EAB620D9380D5F603FF4229BF696B159AF031D2926ED
0C9A92315083D8EE14D6AD5984693F8721BE6B48E82184EDC509992BB0F406D4
2E81E47337DCAA2F7C8594264A6EA23E30B3A8D26B86AFC924E8517AEC114183
C3838D9401260A7437D897F24481280A0242E823E22A4E32669BC829EF1B7FF9
CE75C377D3C5C7267BEFE151C52A60427176D702F4C6A2641530351D74405DEF
39A01E9C18183C34B5BC84E88E7972FFCF18AE6B2A4853A868208FF51A82EDC3
B3015E21CC28D856E1923E8FDEEC710B6CCFF25048A507303DF5018DA05556BF
F71ECC844B2B718598F0825CD97936190D6AB9269E1FFD3D6432231D47B3729F
7F9F80F3D0B28DE4C4FEE96C8D4DF87F035A7286033532E61F90472601B17B0E
BC48E92A63C8D807EBDEFBB74E9894BF0EC793699F0E6826388F44017D6C2F27
7AFF0E93C8C4A3E3425FF62BBE155F89CDD13AEA4AD9599669F4EACA96CB516D
417B869F6F5A4BE773C04CEA127335272EE8EDF83B37DEB70C29F8CFFDFDD9DC
994C11AC11F9038B2B1B5F0771332BF011723068909178D9A544430CFF9BCFB9
246472A47BDB547D02FCDA2034A6E5CFAF53CAF1C31EAABE44B4E65AC05A686E
39A66E89087CCEF84674972C820FACA78A9D10572B6C5C0259E2410A72D950C9
A90DADFDC11833C93339BF6E5B01BEE566EFC53A6C0F546A7E2FA8A481581C4E
CF94A4355AA673AA61555EE91D01EFAB45F6927C7E979968020D41EAA7F6C1A9
B682B344B7DC94AAEDADFFF91AFAF569047B3FE1143CC1040F97CBD3AE8040DC
DA7CBC3C53C762F8D785BCC025E1C5AC920040F5ACA6EE8AD1A30CB45AFFCA84
82A6D3614B221905B4839559936F7E85B7714002FAD60CB843791CFCA02C2446
50686DDFA0A1D9AAA65F0469FDEA0CEB1E24BB0976CEB7DDB1DEF300737540B2
1745BD882FFECB8914A1E25B2A8B2C5D244BA25C78CB3BED5E7AD9383F870121
3707958222BEA0B2C1AE0F7A914ABC04B6F4E9B305A2A3A485C7804A5889A216
475D75EEB838186C788942057588B3DBCC47D688850EF4DD9314C0FEA2661CF8
688C3D53F22AA699171426C498D274ADC1D97A103530EFB969DD821157A34E46
0A89B31933D20964588C89EC9E89534F6EAD969652163C94B93A4C903A65E8C8
A0E10F842B11A789F05722F39C45D48DD9671757D5F5B4E85B124B81A2269253
94047A69D9A3FBAE9FFF93696892D3356959DB61E769314C63ADE304189A9934
13F74081530FBDA87E66FF9C0F425DDBDE628AE55448972C4AF114F730722C5E
C22E0A88F2A4C93CF8428248DD241C3C1A2DB4C7155F899652023F4168EDA727
CF0DFC3ABE725F0FE01EBAF6D2422AADCCADA33D971AD09BB3CD3F0B7CA95D9D
FCDDF72F9B6BB67B5CF26F8C6A61D41E773D3D0004057BF9DE92692C826D378D
B18B9B53B5ABAFA5FBA977C63E3C9F2C5EB39BD9EF06ECBCD35F10C42EA9DAF3
65763EC4B45C7BE5CB6C36EB4A1D46683E515B27953875C469C271FBC1BCFD26
A7241379C2955D9BA1921169B16ABD7E4A33B92073BF7D5EE5FBAF3CF3E7189A
B59B814D50658E1051667308828A45ED4B9BC74239BEDA32461CA4F3C1B5C8F2
04C22ED92EDF4D13C1A0F8165F8B7B416DFA727907DE4A92D008A8F4C76C5D59
7CF8B7C878FA224A7914720E92784C5E7013ECA0861430BE56A3DD48D6E58CF8
102B09B0CA478A6A6BAC8CD12D58CDE6B7A0463236B5BA83B2B00D405B8A4371
916BC84678A13EFEF75DA7C89AA59AD9E53A6BC20A08A7888A003B7607CCC3A7
52A37735B9C1F81610054A54D76965628C16C3FE8BC6D819708103BB963F6F0B
DA611B948CBEC9FDF04818220BBAE9B11B05A685D4C7E7EDFF51C6FE336A5C5C
22662BBC2003235CC96E832A27D6D3F9F1E0D616622C8C65BE4CC71CBA58BD8E
99C1DDDC1F129EF78397BB57C1A71D2F9FC755C4798E56CE6044AA1958EC65AF
197AB62522E8E26E48E8AF62FD65FB576024A49012394AF01E2FFBF91D99B8BE
9B621CF7CF9BAD07616B674276A36FE626BEA809DC1D7D0AFB52BD7BD06B3C46
4E5FDA22D80F626020656D5E8EA1872BC169F92A89067AE8471AFA10C69AD503
4FC9856112429267999EA3548F838AC4965F27BF8327C9FE55B586D057A5B67F
97297F5784D70DB13A90B8B3A886423D10A76D674334C47FBEF3CAEA8976F522
C889AA3F48827DD9280D36D698735A06DED94E21069ED4EB4830E5E1BE4EE719
5B4650686DDB6DD8A594210FB5200157C0F02340FDD61392BE9B0F7462FFC3FC
67719A505F093E0BE8952AA32CA53FD08914308F2172FC810D86604C883BCDAD
DB6EF52427E0B036660BA768889CB155EBDD1341D52F0F72C3081475240739DF
109AB7631B321258281DAADA221C4D03BAA1CA72B5412028C2FABE2E9DC3B57F
412A5CC05FA759994A4244BA5D9A50B153195536AE6A6E83FC0D04CA55D1408F
B6FBABD255CF3EFD024DB4C40E929960B5F0AD71B547C077FAC71FD55A5490C8
9142F2844CB7E6352B01A0725EE4ACC809B0EC851E3DF647BBA2684C5C2EE1F1
785556BE2F7EC3151F50BB9D5C0D6ACFBAFA134AEF156911AFAD28B3B4E057ED
EC637353C7D47BF41FBEC8804A5AF4EFB61253C837805D7BAC8046DFC3F1C85E
335DFE0EA753D1963D180EF18D90A8CA521577DC386FFEB2740D700292A4CA56
3E6403B454E1F43DC5C2A092953DCB9185C7C229F5140D0B98341339A5470B4C
89E24C9D72A1CE78A24F7AA2BF1B70E7B535D37B0F69BE1FB27F04E4C290E3A7
C5FE2404D7748075F07DFD48CEF6189F1415C7DF2EDF2C3F52D34947E0964D0E
8E89F6043C0D2E7FDD989780708F7D4FDD2789F57A6585929BF1028022A791C7
A8B8C4BD004547C59707D6A8480D4BEF7B1B5A1C6C5C3838D79475F488283E17
D379F989E79E2A618C475F2C21579BA36AC6ECDC5F4BF936EC6E3053A312FA5E
82D26A7987D1B6A10A4D6765835DEC4EA0645F47A095B92559F1CA6D3B3B36E9
91FC1F66E54A3EACEF43916A438D55BCC4EE3500EC9AF91790671E766C422B54
70FFD3B59B8A9BB23D4218042307E484EFC0157825F1BCB5D7D94ADD48BCAF67
335C61B7F2B2B654C70F5370E0FCF756ACF24698B7252C22BE36764FE876B236
547F6A85DA351B62952C6AEC9BB506A5AFD9D9C202A4A34D52FB1D683FE6FEB1
DB4D034DB5A047B8D574769188C067907CA36EB26A2B905FB8E060AB87F85696
AF202D90C6A36BB14549D63F4E170943189C62C9D370C182723B4AAF3639C772
AB771A74EB93E3DAC78B1A952BCB3C63A9CB551A409B9A722856880AB8B91455
D050ACE2F9B635732E92F5C53E102669355C2F09BED37AEB3A88AA0A7EAFC183
E289918FCC37040DD4771C1218921FD978D545CA48E9FCC4AC4032F55765C976
33CB23DFF6429109D3815FD686DBF6C8D2BCA099078135FDF722D4C99AB289C5
19CAF6881D65F8CB127FF9339190CD044880D04A826CDBE5BE6AE2FE2C9B9227
9B960EA3D630838F6E0088C6DD1492FDDAF610CC80CD098D1E968B18EE09AF09
D20FB36FBC6CBB27085F3E9FAAED13D06E7AC97A386E361F40609B14C8D1F963
56661F43F7ECB1CF1480CDFA74AD531D56F322DF0BBEAA28E83B5C94175DFB9E
11A2CCA455DD24BF3CADEE7E8C956454650FC6D9ECFF2EAD268E5379E1FA1A18
E90331A61AB63356E24E01E4993456136B199FD07FA0EAA53F7F06622E1758A5
B6C86E44D2F30AEED088561D13ABFB757B8E552BD0795515FAD3FE02037709DD
E2E72E16C80CC9C0E7940FFA97F2BAAE7C7A1B48CBFAFE44700EC4BF98029957
0960375835946F14229837ED5FDB244AA92EA8A2D8C1AA64FAAC7952CC099D17
BBB17946419D977FC35977447AA55E17CB51F21A19B371BA0BA4C3FC5B8B10AC
5362EFE6A4271F2B6C79E3155FF1B53E54EABDA3DABC4A733AA38973CF4CD880
A20E96B9FC9B3861D3CF617825F05997FC1E538790B6ACB62522F3DFCE5D81CA
B26B366D771C3ACBD8019E28FEC5F948DCB5DC6BAA38B43805207BE1887DC760
22DECD0FE98236360548F75D58871FEE5164282E9A503E6DAF16F228285B627B
E31FE6BEC3F374AE853CB3E51CEF85A92EF26862C433ED083A10A282CFE103D4
CBFDD5B8ABD342F765C725ADD7B0D3769CA55C5BBF59EA7202BD7EBB8A678026
968855B88283552DD3CD9831BE0D76DA59B665507B45B50783C0B7F2B149EBC1
EBB02C3342721FB0952408D5051FAB8C578E0ED532A99EB95412EA3B116E7EDC
0E351A980FD7926D4B88182528CB3454F2902DDC9E1E85728F80FBBDF1CFB4A4
F7AE99C05183A6B338DD38AB086689E8B7CA8189774B0FE6D55D0D712E617802
976F8F223C8ADDCA895309CAADA49E1426E53799824AD73C5E8BA4181160906A
798DEFAE60242A4A4EEEC6955407F7993C2377B237D578162C7B1368AE2954C2
8514D91A9D54BEB95915E160B6EF7BD856659A14AC21316C183F9C1A3AC7F42D
1767C2A4E94E5B6DC1B2450D42BD399CD6885317C80CB800A295C60FC685BCF9
798C2553547AEBE17B1F48E22B013F3532EE5FD141D570451BADF0EBA854D9D2
B0A27A20D80555BDAD5A7ACB5C30A9E79E85CB8BF53846F45871E08B485E8054
506521227674339C79F366B6CA9EA7CD06B8D7A002582854830860E09994BE8D
B3CCA399DDE7FB9CF56069B2D2AF3AE6389BD72E06CFC7587962AAD6802BC09F
A702BAAEAA4853054622B71E68E8EB85702B4460E8DBBBCA49EB4131D9796D5E
9A6CCA98D3BAAA326A7E2BFD67FB2E492AFCBEF4C8E9DF3FA6967F6F5C9216D4
02CBB58E23AA46BF02AF43AB380F539FC38FDE31F2ABD48318662259AB0CCC30
3901A207C83125D327B276972C39D79BED1AF6E4A25BCCF50040393237695B92
C516605D27DCB50969D6E738FAB4FCA6C32FBC25A59E864E957BA805BB3BD8F7
FABDDB15C7568C36C9EC5AFA0F3B60226884AAD6751AA3C570FE0E4F0239E05B
F6E98C9C52A89FD2F19375D6E5BC2521E803FF56AA45F1574B95D84734DC6074
52CAAB956FA3C7626C70B16A053495F069A750A38CAA7AFFE06A2759DA45FE05
D46494A56D28EE8EBD43B424710615DB911918881BF1CEFE21BD4D50683CB7AC
A789EAE744D803921A773BE8A081FB687F993459BFD1EAE7FCA4E259856EFD5C
B9A80D1CAD55D9DE16AFB4EF904FFEF935954AFB9BD2041241B1BC8519EE8983
CADCB0655FAF3BBA11181556B22414DDD6C9781AA47323FB846DAFD3297DA381
474AF81B5584B054A5E8A272DFD5D1048DC87D9F8BBF3A28847AFE8A99CC319B
149F14DF8F5DA10E7729AEFF7D3CF49ADA55F1F20E720506873752CAFC5F902D
6E00FA1DBC770FE98B8287A78BFA4C7D441AA62D48801769531ED7EFB3C438EF
B1B28AD7B0D01AC800091119DE5CA7DA8A6A6D87679CAE846C18008F296B41CB
DAC3A4FBE58E4A0A7139B77AA48D0990156C652E08CAD9DDA97E247F70CFBF71
A5FD3000AACE81C8C0565CFF9B73D799201EE2DEF2F16D6564776CDC0B41C02C
33635ADD8E0504E1648717934572F974DD395D3ABC9D10FA331966743BB807BC
62ECCE310D8B7F2045600785C7B52C4EEB47FA5FD640739E1F09D5C0D70530F7
AEC84C4D7EE11BFC90EAC5CF755173A99C30F64D07BF8035C973E5CAD59E4B00
A05C45E7A9BB9C93045C222138D2BC8E401B5D986ADA9C7B016BD78E48AA9E9F
A70D335D41F59317F44A60ED73DAB72A2F1AC1D9717BD8B2FEBC7016E5CFE112
6F4294DDE5AD91E1779A59C541D7B8AD117442D802DF52CEE62D333C8680E459
86BCD01DE2FACDE3F5A08254D35A6B15321A1CE74E8B82AE319E78839E3C2111
A05DF18DDEC2EA771A385287C427B30CCFC704128747515D013FC749F75BA912
618F3B97207AB57F34C18CB75637513AA762A8A88C2E79E27417B5F83F74EAFF
ABC289CDE655EC5D586D483DA69C36607464A473A7577BA18FFC114EC9B4A6D3
0EDE8AFDCB55DE4B0D29AAAF0817C72707E20B57E4BDF333D068BF2DBB56D86F
22ED3EACC46F750F405FAF96268E80A1E3DF29AC7265E93F600D76FE5FB7667A
6C08D7004D0B1E8E999F367E6A91EFF7C614342278BADD6DB0A5663A797EA7F7
282FBD398422F52DD7D4F199BBD874DD442FD6D56EA78FC8FB38AB35BA2424E8
9E8047AD7D73B16E6CE819E733A2A2B3C97F15CB4FEC940C45FCD7F44ACC063C
3504176564E161D3E736F84F59B386F275077B4B8F7E4AA0DFC2DC8345AFBCC6
A64A2DE314EEDA2C5A334CBEFCA7A7023A4F0F1FD5F8BCAF16D33DB60A1008EE
5F836BDF65431FBB68DC108B846C238144FFF68112DFB3ECFC25FA0A6D5EF1B0
CB9DDB406823DFC71B78ADBCF619254549552026DE11E9CEA7A7DB9C801137E3
937BD200991D7C067A356F50039D73B8A978F8E246D66D5D9940AD7B9966B43B
D899889BCA1ACEA7658BD0581C7D0ABC8CF8723EB9EE1BB7DA59291A239C1BF5
D73841335105AC35BD4A479527FCE6BBC117F175B1895EA20D2407462B84856A
BB6A76CDB8CCA929F8903C1758BC45115C8AD13323EAC1D3237EC4511251A363
34A13EF40DA61FFBDEB75A6E73A5FD0B280E2A045472AA7E54D024D1FC7E6F7B
BFB5EA361A25BC48B7110711905ADEEF51B085B5DFB80C1A44F453128F9B12F2
D5B606F34632FD5286AC052DAB7AC3389671EDE37E1495B44F4BC2499B08E5B1
895D17CCF73401E120D12FD8DE82133DD9A9FA20D6B99BF18F27DCAF950043B3
0E165D9572F9FCE01DB7D89D00AB1F14DCCC86D2CA9BDA67BF85BFE4DCF0C8E7
DB38E73A3867DB96FDE106C4371F7D74AFC3B9DB128F96A10444193E2EF0FF37
8E0AEF04B6A78E619E683080199CDF030A461C71C2A07DFC4FD699F9B5A79B00
9FBA6721A3D105BD86AAF547FBB1665BEDED760914B9483F3D99D321479EC676
734DBBEF8DC3E745277D3F62F29F7DDA42604F1974E170539868B763F3F9358C
CEA87FF02C81CFA438CD803B4C9ED2CA50CC0274B51EE3F1371FE7807F8382AD
0D1FAACB70E7FCF4020F43BA360C6CFFFF0240F185FAC22B1D65D42755A95ABE
2C3AF343C5B4962009714500F9DE8A6985C9C89FA950A8468A7436DA206D1F14
C6B458F4B4E7FEE28C4218BE501753DC18B51CE95E24BB90FEFAFB534004D523
B2AD37D5316681AE011AA9FAE8D19058B80BFAA09B877BB0B3C42F50A4D03351
09377A13C045096E80BB14C9B5D886529E653DCC97E23D900D5AED238D952C10
B3337309474F4F6C395B12319F123D0AB5C3DC10D40D6A1E121D88E317225BEE
D285D6477E2A89467EDA0DF9D2F78EC2EF541EE9CFB3E2A893576436AF335779
7B2B6ECF416B9CB8088C5A6335A6146155B6BDD441890F5BD66C68EEDBBFB1E6
BDD2E5EE32D966C187B602275D621A8176D4CCEFFDF3538ABDC636632D00D567
0A85A29BEDB6F4B8E1BD6707EC98C57BA71C7C7E93417445709918D5B652D727
5FE9F6A70A8E883B46F96168F9CBB1EBF9BA781C65893C2A6C2C262280B38A89
A4193AA8C362184116F7A868801B990CE2D26FE6FD1F5CE5E6E43EE754496B51
991DAE67DDCD3EEBDA3215F3367206AA0B64A692241F315C706A63D4E868BD55
5C878800CB1EECA4A9775F8C77E6CB71AD1D4058A9DEFADF82D0D84D0E0B99B7
89736594D7F6C77E249763CAF222B945A23FEA9445FB1EE103A427E918A29452
8202138F30E3CA824D4B1EA8A3F3C312FAE688F7C00679DB6EC9459F306D309F
B11A29B5DD980667FD0DDFFA25069C511903B4396CFD18B866FE501FED449795
F40ED7A55CE843D8D602BC65A9B8B8975884E13C7B5B268275291E1297897ECA
75D9D12E38E1B8A2D632ADC9F94D8F93391D1EF995D6E4175755D300737A1C63
7B3E517151AC1D9482AC08D0D728A50D51C6C0E9BF825CBF08DE3CD84EF36336
A6417416BD74C5612283F7433B1E41E4A1591349DE8F29D9BD6D7ACB8A12D9A4
0AD2733BC68DABD124EF2BBA9219D082CE150C3ECB06184DDCD9F146D480050F
B973CE6EA359C190CAB85D2322A9528B7669B4327EA26D8E86A36B300E135BF5
0729F6869B9A8A99FA663D16A31769A321E6DBCED0E8BCE34BA559258593D4AB
8D33E27EBF8F759DACDF0E1BD67D9785C7B1B4A80B0307519A684F8596CFEC4A
BE909A320A37BEE5AEC18242EBED021328C673CB930E409D84DDC755E945E70D
97CD1B89A2571147212FCFA0AA050E79A5CC21229594EE6917EBCE1B377ABD0F
E7ADA1193CBAF5B25C1AA2D1B22E83F995A5C7FAED589D2AF464E448FA21A208
E134E46DC707A9E71B0D54314B4544B2483801E1451226004B21CFF90901CD47
3D01618D676FAADA831FE27392D8C2048FCC037C11888974D9215000B4200175
497FA7B0509E7C0692DDB43D185C197371A36957C49CC2D04E97726DD45B59F1
021509A8EEF2A4907EF3CDC194DF7541D34D08480F1A1CA16F2E2F8DFC319D4A
AD46370C76C3162444F3AA3672C66C81B3B138C68BCAE42E376A4BF18143CB46
3B43B8D35C1AF04B2B8D77216FAFBCF182CB1FE91856D59E9197A1914987E4D2
0DCBF763C51B8CE80EBD38D1E05C21B6B4459B52A7DC2904637602389E2D62E9
63040DF21FBDB400089023D853DEC87EF89C1EAE6C7BDC1CDFBBAE7C6B7C2658
43E749D66789E15E15A0D617CF3872B5861FA38FCAAE2839043DE449A2B064D5
892A7A675785407A2A78C7EBEE2B92B10099E7698FD931DCCA0CB2D68294F199
2D1D3B61D62667C0F7C8BC7CAE6403CE07A1F92338101C9E6496AB07A8CBCA76
CC277966DD653BA00F9EC558D87978AE4025E20F228B15CD952BB5799774618D
C465D41A3E90CE2C603BFD37A4B13B7D3439BC5F2562A2F90F91F326DF8EF567
8F01027A72F65BF3B1C65346FBB7E1439C8EC1587511D651C069F1EDB530159D
36C21E568C3E324FD3380DA49704A291F7837CF697A18478F6935031B9B500B8
C97DE269A09D9FF7422FC91F25BC2707591955B78C0CD5DECDD2FAF1925C3BE1
C67CD9E7FEE6C4F3A087F4BE21A90DE9250E5D74823D830A3DBBCB61ABB9548F
DAE49D71676C779F98B4DC1DF864B1D8F275DDCFC8C99CB0A38F886FE8436E18
336324287BC0E0D86863E600A95CF3C93909E4D756EC4BA5FC8756380D82893A
767CD980CE8537212BEDE66949B02AE1B91F90CB76E5F7E5B45196CCB6069DF8
0D340AB32A68665CEC729AD37D837D5A3CEAE0A6AC913CA262118A021169CA7E
D6D12F394A87DCC551D0326E04F333466455A8492FD61EA795CF5D16358B54AA
F25C041F8ED432FA629A2ED663E1D24F9852753B568776A96ACE6FCBDD696678
68EF371BF4BF97B544FA3AC53A51C4843802081696785BF15D76F545786231BE
18C729AAF5B30735CE380AB814EDC24C3140E4EF3ECA35EDBFFDEE3E46DD584F
04936B53C3C81CD9E76D9DC36BAC0F4402EBAE22FE9FEEF3C49D0CDB5CE0B2AF
26FE2436DCBE96063B45624FA6E8FCE7C205E38F463996755415ACEF6B48B660
A4F8AC58899CC2440FBABE7C43F4DDD9F6634093C40218F729F20B5CFC571FF6
8889213049485B23159E4066591829B35B66E7C7D34117C4FE8C27A888CA6B1C
0DDB423729AB18FD558D5735B892A1F69C8C1A81CEC44E02384CF54DF1A5363B
593A7E9AF8610D777F4BFAD17DC5AC2935901DDC1A0FB733C3C02DBC7C9684C3
BF8D4BA6D59A63E4E9F7D4EA9C29BBBA084923238EA63466BDD44B9579E0B99C
E723931DD8513F981C1BFB3D46BE724BBABDC7587F0EA17AB87D837E8E112C25
AD65770C1375709DEE2FE91EF1EA2B493CE31215A0DEACBB919A65E879F2ACEE
148D55098B00AD714B169DA93627B38A58168648D7A188149E58F6C806469FB5
D13A5E991CB00021DE3E42AFC10328969B5A3AA20F43EB98B9B23149476BF420
EBCA199594CF093FB8A028875BAF16B3ACCD65FDED44EBFDD767C0DF93377A4D
988D6605B52B96184CAD7AC8E0FCDE9A796F6B9C89719A06DA4FE6A0D74E3CA2
45EDEBB6179FCE8BDEA1B68116ADB0EDC42AB2491F620CF542E262566148F74F
7DC8655456B1A2E3161BD3DA758A980A280F8B8AC7942065AE715BB0B2F7A23C
8CC743BD4061DC32750AA3FDA1EC2D284C04E4BD5F3A13AF501BEB1208E5F29E
E4BC9F72803C2F744FD978DFF769BBC6250E2C8635DB734B7D21D23C65B36F45
4ED6D18C8B099DCDF940AFC6C552CFEA041D0318D86610DA75480F92603B21E6
1CCDAB60139B36472042623F0ABD4AE2B7E15E7DC8B34BA2DBF439F39DAEA1F2
44FC9AA882E43CE700C20BCA9125BAF0FCE9C78033D731EE186D9243261CA24A
3DFBBD7395E07CEAACE26067E2860EF2E5535DFB0D05AEA2DEC9B7AF9086B2FF
0BBA147BFF00785663883D258292F85BC6D2E2B9B17F3714CECB3E58A0A8C448
9E239C17E34B8F9E34956D2558B7FF166C507B492A26A90AA9C68FFFD65F4E93
0A3207C92DAFC64CA1CD11284B3A83C5E51351DB1E927786BF07E73AC15739CE
DD2600434748845F54A5B188D29364DD36C9CF43B8C446FB8605432132A0C78B
745A107031F117116099D07A362FFCF3124EDE7AE51BBC572F14E448FF6C91B3
4553F61CCECE5A5D7D2174EAF37344789A441B786CFE74A43FB1D491A3380AA8
84E7CB26A243D7AA497B71C1E241F4AFE3E9DA87C76277F092BFA21E98BC014B
32DCA80DDB7BD9EB4B4B37C5C1538E75C144D7ADBA18820FFFF179FEB82AC655
DCDFC20968F5BD12B078701E01F539C74D967B2865CE66370F16927135F55194
B9F6A1679797BC58C94969F073BEE1699F55E90CB69B74A7E9FD538C4ED9796E
3F76C95042B4E88B99BF1037B29E32C9A1292881F8B6C4656992945EA795CF0F
71C1034C72B321494E249EB691D92B0454253661BB06C2DF191C97B8A74C5733
11C2F5C0B191BC2288229A1331D6CEE6BDBA3AAB4DAFDB53DF2923D339F8453B
0B5FE4F66721068DD92C3919755C48B4F711372AE3B7BB1090E9EE6D94D163F9
F9D2796A8A1FBBAF7C9017C7F226D020096A2AAE11DBD978F3032D2FC6BD54FD
7664FAF472BBF13CA71E1A82F1E610CEE0821C68FB19B1CEC64928A718E86A7E
32A3EA11E59F0D8B012525A6F7FAEC418DFCE1050701B7A9A688E31703C4ED48
0F6CD896481C52FE4B8FA7A10868C2681621B4F8820BCEB09A6252258ABC070D
8CF7E7607B46F1254A95B78CCDDCBCB213F2702DD37EAB12B0EBAFFE5651D636
DFD7A74045EA1843CFC35BA7048BA6CE8FAB821443EDBF0CEF41E2E467ED1518
D82B08130625B70FFEBAEF4A8CD9CD5FBE8225CB7D118E1DE618BD7593FF87DB
6DB0FEAEA589DB61A90004DC57CA18BCB556893FD4017779BA6F92E67CCB289A
6B11EFDDFCFF0610391FA464104FD44A9541257A8769C910A9F92978E2B71C21
015CA1296E306DF0767C481E2DC72AA346AB7405CF62A7D5377A76E496E816F1
A085B631A5C09F284A6453C3AD8120A9B09A31092942717FD1538B4F4C828D7F
F50D459FB6C913BB52FEF3A6D47F5CB431763330FC1D9B1FFB3BFF2A884CA5A6
80FAA92E289227DFE720D84D24D020F5FA6A34101FB23E735861590E872D6814
29D1F71EE419535626C150535777EB83845D8671CF8AA624701A89C4EA1EB1D5
EE4A6678701A54437ECFE55F9AD93AA910F06463201B00F833E21CDB45C04666
882EFEDDC7E7567F65FCCD7FD032D07B2EAC4E17F1B4579EDBB3A2A599628580
C6CA15F024692E7E278601BF80330AC8D057984CEDDA7E34283B2F80B16F0F10
BACC5294D53ED82A2A5F0959F860D3199FEBE84605EFDAFD2DB59FCFDE2E2716
C1DCC7BF2701FC2920843C91BA6DD3D8E33A3A6779BACC5771F88734F9E4D7E8
01AC7A52EAC3DA8EA2578F636B5F41BBA9D2541A949E58852929D735FBDD7DCF
EF07F93366AF7F26F35ECF8D5AA73A7C101A3C45F85184B78E26180BA3DBB046
6C507369F4A059805006156E0271E215FB6C5258233612ED5DE16131EDF19674
6148C68F8279C4B8E1F0D2ED4C7C6A765E084EBEC1FE6DBB2EC712A4DB1B47B4
E53A26DE692918F4A9608BB9456C899BE64BADFB0CAEA77BECC428F828C1F3C5
191370D4C86CFFC27E62B3230A3EABBDB4FA0239E6F5BF3ACEEE42F3101F4498
D6A1D26FB26AF884F5A45A2CA827AA2574D36EF0070DC435A91A1CB9421DE1DD
7BC5D109B52B7093D785F4393AB3EF5D2048A7C611F6B74E9051D34803BEEEE0
D0451D8C4ADABFDB1E2570EBDBA8391703D636EFAF6FB2061B3C166134209590
2E862525725343D5690168C647A6B87DFE9838E66B7E6DA8FBC339DC2BB2AAF4
5947AD320756156ACB1740C65B70B91AAE6BF711A37AEE01A28076FA883B2FB3
5B7AD6DD5747C134526614321FD855571EF472AC6743E153BC0A03C5DF2E01C1
9F4FAF6B2F101A6CE2BA1B1901782FEE33F58AC13B8CE5563FB0AF39BF211D1B
8FF392621B7572B78FC328EA17211CF649F16B805B1FACAD479B85649CC27F12
CC616BA60DDA51C90CB9815BE5CCC74A42223BD35634D69BF5943404E8526C02
DF0FB540EC00541D9B56E9C2E8016D090E3E7BCC251ED9F74E0AD432C0FB9981
E3F3FBD3455725E3483D37188E60A746A995E0A37CA8F291B7ADB4C22EB9152A
BFA8C30B3002607718EFA5D9E32E3757D21B8DBD0702EC2F71B47B0C3E65A7D3
BB35C21D0AD632DEF5650D9EAB868918E1BF264A993D828D0C7FAF97400E4CD8
9FA733FEA4361D73AD773A4337B797DE6D7A03F868C85B3BE2C9DA02561644A0
69A6EBCB15182FFEBA0D3EA2F81423D30DD567F3055B9EE8EFC505738B7A2F04
130B06A0276FDF1BDF34F73D9A501D27DAD12D29327086C0BE2C74591A2ED50B
35B358F42944F0968B99D904C887EBE9C365C31B455E6022EFA2C54A1C4512BD
4824C742727273970EAB85A44184E6A7154151184121D11BEC843DC75C97EACB
CF83414549A34B06265A0B96B215A29527176F1639FD08EAC7B46572D83F04AA
1D1D3C5E812765C2464BBFE9F3C2F6CED3FBC3B42622C832B20129F58667F9AA
D3B7ACB8A02CA80C42D77A26B9120504794B5D4CB2180E4DED17EF90872A5C52
9F36786B11B6389830AFC69FDA6F02697DDCBB185493F2E840EAAF45425402EC
88E65E6675A734F2E4721E7B005214D30C9ED6B4B91134B8FC30948A4CAA3DB5
9ABC1BF5F7269FE8A9F7205586175814E736C25F2378F0E9538D5B14E8FBE71F
3C5EA363C9E331AAAFEA5C905FC0D12C6ECB60F72D16E676772CB0ADF3DFEB71
B17AB6126C06A3713F75408E29138ED78EBC3624B25ABB32D64FFBE347229A33
1129C813767E6586D5A7D4BB8F552CD336A19006FA73FC28EC31F4FC754F2B73
010DE912890D6A24CB1274CF6044D07BD9412C8F83B2A727DDB110991C467810
51968277FD4D0D7925BE695C331B30C5AF7946480CB471B7200ABFCD745D20E8
F5D7842FD352F078275C215B7B7C699903F93EF05C49B2F6CDB1811C0C215430
9EC4C4F0C907B94A628BBEA7AE3202898C61AD6A1D70FA32816D47CFBDE071BD
BD3FE111149117BE2655A4BF6D13D32D9BF574D0A74E79528F77D6502038D792
4F098FCF2B07A738F8327EE29107319D27F69B8ED3E81F3EAAAA92BE85FE2786
CD98DAE4878BFA9C9C09BF17B74E02DC02D73F1AD039E3B85F72DE3276ABCADE
6E0CDEEA16945367C9CAD16739738D1C786B7A1FAA54E1F2FBACDDCEAF070158
784540890E05F6B75C76F5EB36E4F09A8612D99CA948EF83CD1139A104744014
2103C32D52169510940A99930940D4C0196027C17B8EE71D654F0E33C5E5A805
42D1AEF47F997C4288AA1C8CDA5E3C6F89AD4B0309808AC1E0A4C2C7E3F1538C
8476110D7949AC14E89E77B4C274BCA983D7B5A446BF526A58DA4682C9F22549
FE68E81F987122C49507C2B4F3FA7769DB73CD3BAFF3971133B8F1DC2D6B02C0
965CDC0D91DF1A487ABBBBE2E2896F1B47BE1139A5F3332699713A1D0E26C392
220832FB07AFB756E92A5B16F4212BA513BBB9C5DE48973B6DEA41477C9079E9
EA4FE64EA87FD6E64BBA672C3E6A26B4F5D7123EE5F52612CB8123A4FF2E590A
D47310066954EDF4851581DBF1739EBD93CE53DF85531821C23E4DE1D0CAD21E
6055E2595D792A2E7003639A13E6F3845521A55684B2C998AF85DB5EBCE675FD
54311CB146815717539689ADB7682DF46C8A208FC3E7B71D190D240836B73090
D9239F0F41E86F2D4EEB998520A57985CEEF4463EA87B2669D367C6FF13C3365
37B67F235795800CA8EF1A6F293FBE9FDF96A78AB04B239E4EE0BA0904B7CBB3
F1117F93D9BAB1BB97CFD909531C68EEFE20CD2B55EFCC9311097EDD59B660C3
B8991F7857064BC3D189A1B89041EA82534F4A6E7EFCB1F3262D98D7B9D72B0C
D6A1703381C5F45447C3B9B81E57DA1D717AE5E115B691DADD8187E0C3057C90
07EE185EEC0DE8940EDE7A1DD87E2106393399BCFCD4EEBBF072C05BB0528537
EDB6EC99C049693879C816B9832580404505A857AB1A921E3786DACB4E1656C4
47743FDD7A68BA6EE06DB94DC694320517512FD889632DBF2E9C0CBF07218D12
CCE91C33333680E625FD42164FD27927DA31E5544336D69CBA0491F377B87127
D14AAE45B44A0315084F5C57B13A4EC01A924BB9615DBB6786DF6522B4AFF4D4
6E8B566A613A135A270FB3E83D87F3A394FC38E69967833C0CFAC6FB2C342655
6F00AD40A44AC4E9BF26B73B17B66791267FC9A590E5EB0FD33434F32087C943
134E6EC5282FC1A8A514C4BA1771386648241A9EA170931B4563D281102298BA
C4B236EC0BB066EF8E38A00BD4A2F3DEECA7DBDCC0FD10FC07DAB0230149C43D
F4DEA8EE07FD469D9896154032CAEA380E995D1CF13034430EDC64C56AE6B807
FEA6960B646C81767F331D3D3EF5AD7939E4E7541BBEB01AD3674D0FB01918E8
BA87EB21AAB2C494C6F6FF275D13A2A2868D87871AA4DC5D3640AF3949DFDE4B
FF9AA2F97FBD9A31FC8DA5F4A317E7644446B44BB8012BCCAF8FEC10AC007FE1
6F87149E876229B1D9D79B17F2D3ABC32E27B889A2E06DB5C689DBE39D5E3D34
25A76DE1FAF78AA5EA7BCC31EF1C34C457D01EDFD84A77FD3797A58660D8C0A8
34A76BD0C4CAE557ED663733781FA63FE456F6ECE4D25E13A1FE5E1284DF66C1
1E041D8E556DBD5F54C609517FC0AB69CD2260364701E94B7366E98BA573A3EE
A5967F58691C47B09CEBE352FDE802652D924259CE629A4C114C8032A9F3A9FE
3660AE5162413148C812BD4323EB029D021211373CD1ACCDABCF5AF7E319879B
5DBD7FF3FD4AE9C70527A55D3AFBE92119D5EEBF32FDFC699847D069FC2A6567
1D66EB451F447BD722504F0ADD190335B8794C3100FD08A3A0E9B86938FE2C32
6F29090704D06AA53B7559CCD26C3A1275540B86A2193A1BF363855450A17C89
92099875EB2CE2A37A660E8B4909C37CEBACEE7270EA076115E876426E99072B
AF9CC5380390D36BF31ECF83D795D880A41CF3AC5B4859D2A47248BAAA2A6D43
30094BC0F348A0C85E60650403683A29AB26EE2212F88A0FE66EC27CBD74FC35
45A0294A75A62AA83295F8DC9FF20536F140D86E13DFE0AADE90D2E7587E9F10
05F26E16BE510A30452826101B3E09A93ED33600791B0D1FDF54AABBB90D0472
352C0E83515146B84D6173BA7F253E0B2337E4C3CB3203CD0D1A78AA64AA9FF8
0D4AD28DBF9913982AC93D342D8157822D42F334B8793F13FB6797C5E524983D
DB7A202C1FB3301369DFCF49F694EB60119321915051C31767B427A1AA28CEDF
948428B781790F2D1889B481B7DC17C01E2BA89D62931D53ACA33B27797012CD
242EB43AB77BE350CE309D518DABE144A5D2569F321B44C352400540061AE33F
A2100DF8D274A5B7A04B57F2471D340AE3FA7F58BCC3489C04F227D1CB90CBCC
57508EA5D330BF85AEC03F519615BF623BBE1E40F490973D3964650822584894
0A51F9EC264A09D56661946D550B7831A2EE210CD17A21EE760C253E9AD40B28
FC95B158BE69E4BDFB764E5AEEFAE40AABA50FC081EF127A4F08E41823015B8D
89B5371F097EA4914B6584C8D40E7F673FBBDC09B2B6422B01750AD448731FB9
C916E7F655AFD7AFDA6DBD84AF13A9BEC40CDB44F8EBF3955C2F978D6F5936EB
16F611F44322A0AB7BDEC118119B19180F3F487EB3D252F2854291E6182AD89E
208A29C2BD50BB4D106C3C3E9F24630A01C4AA3DF2970783B43E453B1E084AA7
1531ACACEDF28E775D64806396512CFD585C15D60B48C6BFC3DDD1C64EC79947
6997F3DB8CCDDE45B5A6E3EE2129FF385AFCAAB7EE78A8A07986F4932783C12F
3113C13DF3E50EED85DAD3A70626B5C9CB7934B5B4B9BC838C0841BA8EEF27FD
A86CF66E032F1B0D494612E9CFF9A0F3E57A190FECA1C07FFC3915EDF5BE327F
C509F9D1CDA336764EF8A5FD99552985E2CAC60FB00CD9CE71209D5B15F87371
C6CFDFD157A1AEB2E3F4007E19E363BF0890FF5C1FBB974BA02E11AF85E4F3CE
EE61BD18B3A42E86CDD59C8725BAC4246323493EE37A4ACB3CDD1246EF6B4CB5
5D9CD04CE697AD685056BD1635ECFE2AB63C8BD608F9217E80AB3606D0292D2D
F081FAC0EDDC71FA7E4732979E264B6DE0CEF2F12BDC520A27D96B1E7FD78689
111BFA6B2D1015854A43B715139FAF321A2AF2256EA0675264922F9A98E6FBC1
BCC0544715156A99395CC93B6189189FDFD3AB62C75D8B7931D01CEB6BD2F273
D93E0EA39BEBE126128F4C63D5B82B96342EE045442206CD7C7DB44CF52BC2D7
8B9C6EFD62476E35C019B5DEA8087CF278DD5892D816A05BFDC706FF5346D85A
E9C7098008A9940C156920B7AD241AB7C2E919021CB2491F9F5F477E9F4064D4
596140A6ADAF7D1342B5EF482D7ACE6F3D68504218092D312EB54C95F2A6CF1E
84500A5FEBFF7EFFEFD7F25BD5978E7557824AAD36B6349FADA4CDE11606F864
5D788E07DDA0D9CCA54D8487B1D3D924DC67836D6598FD8B539BDCA02A0A1C30
58ABF1106799A6604B306672481FC77B5C6D7843D0CD59C28E408A97C263FE19
DD066DDFCA49FD3906B7D32C787DE06908B512492DB2163F7CADBC404D407A61
6D6C0517DBAFCB5214C49239871F61F40EBB75EE3024F37818C68FC464E55B70
455321AEFBA84C9BC4093E2151EA61F538857EEBDFB069AD60434EF2824246CD
4B7C7592758D2EB863263E0FF570A4249E88B67A19036F9CA8F73D54F2F5ECFE
068AB0E039B398A8725A856FD9955EFF184CDF0D4ACA448EED718F851C43E8F5
701567B5E9D62C946380FCBF5343294B3773CC0945CFC1173A9EE29C1BB8E81E
3058E645DA10A42812831DEE1801615805E8E1580531AF8EDB7AB1A3D3FDF901
33D1FAF687837F7DE5A3CF3D6FF6E5A5AC1D423A6059A12AE16D327D5201D312
8107D4965BB5FF54513822A58693D1C6A91DF4C13BD2BA11676998D79738676A
B34F886E1168A8EE97062250B6E2B64712B738E9496E943037542697BB8B96EA
13CEB88AAC4D9570FC82B6D231B37E2AB7C7143731A8483D88005D718C421391
BC4E0BDBECE4A7FC58DCC2F00B5F27D63178A0CBACF68B846FEA8F760EBFCCF4
9C7D65C9DBA4E05D7A9DC85F902C47DD4D64A7C2465106CEACD606039078E07A
3969715EC491033B3823CFC214868978ADB647D74A835C2D36FFEF17DC8445C5
3C75D67E0F6F06765B29B11003165105A524AA2FE4B25509053F34EF42EC4D32
C59EC0F6C1B30E31886B7B3399B1F6CECA0E3DCCBC573BFB381C8E0BFEB2B97B
AB80183B302937C26AC08DA98886993EEC7A8FFEEC357A8C4590FF95A803D5D4
0EA463CEF58B7561EA910826FBBDCBA791F7B052C7637B2FDD99EE38F34F4865
6EC9FB79C22C18A8A471C5A4F86A95A62F7E1E6C449C172832EA2CE3989CC7AA
8A55702DF94F34D407EE5C17932268B34118C498DBDFA41244B96E94F004F38F
27879C6729DB282D4A8CA0ECCB5A4D2443EB3A089E077863A2CB3801592D910C
5BEF6F915697207FAE53FF4F788AAFEB2E05BB7966CA5034B8EFD58FC08C1C1F
F21AB0962894CBDA32FF2B70B21AF4D158E0F746526F282B3A563F05010888D8
AD09FDD0EF576A9BB05860A56674458363E5A5504D88A31C2EE5CF4421803E88
923A4325148EC1E6E2CB48355AABEA0D1067FF0291CEBBDA69EB705E77AEC768
6E7239AE6BEF8873E2414668CB1485B6454A381DDB9DBE2A0A4A3F3584D7AB06
A2D217B97454A41DD3A4AC1A5BA0B78D6A72C65D92D917E2BBBDFBED74105F1F
85E3E21FCEEF31A4D5750105FEB6F0C6F848C17AF9BC5752147BBE75D085CF57
C6C1F530C8B5899D4F9FD88BAB64BB4D1E8C4750F53B483E5F9EFE8552EBA695
01BAEAB263FAF922B4CDEBED1987D64A444A48361E1417EB9BE565358E5EA4D5
601DF73CB1AE4D50A2A0557B3F4FE24C8FFA00BF928E30A172D59CEB63338D52
AAA02A40BDBA5FF88D8139C4CE226CB14F474E9D6CC7C80BF40482C77783EF6C
CF679EFCE39E277287B2B80024B5897AC10F56786232AD70AF745817CA28E67B
5C4FFDD23B55D05BBAE7F649385C4CDDA9A3826345E287FF58BD0E3ACAC93C4F
FBEBC6007D613F23E810E3236DAEFB08395942723FB853550238DCB92FBB00A1
B04D2421D687B8FD41367123CFEE10E02CC61C6E632B040624D3A862C1D10BEF
7FE76CCC335F6DDBADAA9B42A94FEB9EBD6CB8017A27E311AE62FE08BEE58F2B
33AD6E84E343865B4771249BC09203462F95B302B8CFF733E19EF97FD17D352B
303F2518E05CFDC4DFA697683ECBD5F6D15678F773EC435F824A95B61CA0427E
6CFCBC313C768F49A91E6EF714874953C224199FE70B61320E451212BA5F2BD0
FBFCF937DD3BE4A5B31D1B869CF99D01F0FEAB209422879682A8D0D249CDBAB3
1345F45FCE2427812E35A7D112AA3F39BD94F21DCD05FF887330D1BBD00BF32D
7A1F13650E3438D14F8E17601D57F7527CFB126F115D2CD0AB55040AE154F6CA
8B234FE0178E51D2E8C6A84C0CF952EA0D9C4176D5ACFBC48D8A48074357B6B1
036B6B03F42819D52B47DCCC1823681E08C9BD987CD370391FD902E8EA40D73D
285D7CECF73100E7F90AE93A0D8A5D73DC3D91F1056A41B007AF081136D50948
561FF5E7C7071C2A137AB7E3A91418DEE48319D0A910E0191A6D12AE0B91389B
A822C174ACFECE65FB53F78C6F639F54F8E3C2E237091723377A30F50EE2D9C8
C41FCF68538BF3A49A51613E3E6A46C9B7B1052C0A5491130E312ED3B9F752EB
B1A1303E87203FCEB23CE074F149C2EEB294F6FE69317FF0AA61E1DFCE95DFCA
2DADA7BFEA7C740EEB7430F27565EF2D8812D285B9B59F8C8A49FB435D4576B6
C1C6313CF0CD29AC91D2D374734280ADB1EC4B2BCD233E476966B7EF67D7F078
80F111FB494529F76173C61F2E63A85456FC35DD26A6104EF13F665B84F61C5C
8986923AF2E7EDCCD9DAFD1F0008AC7E75F54402B816557B31400F8DD3EDCA1E
3718899444E81EDAD669E0492887D07398684E659F4CBCAC34142F4E33BA61DA
1E50699E9F98C0C31760E7B2BD1AB594E30D797581F5A0E81AB0F7A9687690DA
BFEAB2E287C68A60023C7AF70BCE113A6A72ABED2FD439DE9ADB1786283C4EEC
972AA3F26BE495BC6337EEE18F1F42E5DB5AF73EB7BA14CFE5CE0B7C72498FE0
5D2C10916DB2E4F9B1FAE1B70FADDC7800CF63FA5E6C01077017D8F2FF9F6F88
AD245098A9CFAE5B41BE870DD9E5D9541C24BAFC53EFA42A90A1984881D91EBB
57808617B87F28E6C6EE881A8F2F137A3962ADF2494D65F3F609B45AFFCA8482
A6D3E12440BF0D3F126E3E1AD997C37B9E73991C13E045E0DF9213C9FEA0F083
0E3017168022B2E86852EC0BD581F6982995D8A72DAF160394A4644C4710171C
DC99FD86A83C0F3BE298373DA0C6F6DC9B1EE8015E65845B48444847FFD8923E
2AD093B00AF011F21DB5F20B5D4A4856E5013EBDE652B37E911AE0E16A50FCDC
20C8D6E6B127A3809FF2D5693C2E7A4517FE0F175343A1EB5BA0431C918A8798
28150795CF2BA78D48A77BE04D6009F314570BD06FCD655827CC511B0EE9FF30
E0E6DB0A0A0263FCB71E2056193FE8F09130EE36B681497C4BBF693BBDA6847E
FBF89F46AD331AC05EF80EC42D734520DB9746B02F2B0F075673455B14A2B2FB
57409AF473A4DBDBCF09BDAF501DE623B41E803C9C2981406BEE376972FA537D
F301C0187CC1063341E30B49E0AF725F33C1522522D8B5497F31F1B0B7661A99
E3BB1BD13565961B1B3760EE57E29F1B62CF7900606F89074070C20E9A85500F
CE410B5689F84C85EFD27BEE0CF7C6AF3313D0ECB93786E1FD81048E4A79EE9F
F01BB0A1B8C24DB58F7FAAF67B92282C5DE3AA0AA4B0933C1D7EBFF54013A009
C9286A371593745C7C33594AD778FCDF4C21B59E1C2B73BAECF55CEA02ACC806
5F5E2D6A58A8DFC976C04545F663F1921FB454F9A0048C9772A6D89064841BC9
B7B7681A77D7CC62FDEA43428C6F79C332342E15F75B08A7830B2E03D0E00012
85CC46471BBEBD35B275F372BDBA74BB4A933F9098F173D8BFFFD3DB50BE8154
38A3C46A26D3DAAE0D6034B01CFD3FE9C85FB68823B9F944BAC97D87AC8FF7F0
5E627E42F2B701DF842CD80161A57CC7E626050061080970262BA05655007063
3FDCE592272FA7E3EE2129FF385AFCAAB7EE78A8A07986F4932783C07CB24D7E
3A256280E9447A13D00FA3D6E666B4AE09D5DC7B002E221E3878624A015FE753
22A710B0E857532ED2E3959317DFBAF837DCB81BF77BDC45E4E6250D89672A79
40EA969285AD222A233EC61899AD22102AE68680A5D281C2CDF6A6A089FA6AED
4EB389D2C6431082E6941F4DB1E0DAEE20AEBA224E4A6B50FA4DEA4169C39B8A
1D07D18593CF11B17B392F4787049A77D601F46245B0AEF9ED48F3F52DC61964
9FAF3BC7D3F0867D1B8D78B9A9DE9E5024FA81193C5C8E44E09048574455C2B8
BA0F91B47280B3AFCC1E30D0DFB9638E9DC9E65F758F0FC4FD7902D98A2E8AE4
5DAB0A4848457A42152F9BCF7C4A5E7EAB04EE08FF2FD416DC8EF9BB6EAC27AC
7A411BAB23A8B988FC024FB9194EB0FD85A1955EF983606F5D58FB6BFB178DBB
0A4ADD4F4245DCD8BE40617E42D59AA5F34152DC54304BA8A338C4F7B3F6AF0D
13A64F1E02E9AC1FF2F84D4CB4FAD1E78E9C6871F23DD7DEA7C7D956560D8FF9
6593AEE59662497B7E1272D6209DA616F6D521685860B4805CC77C5D7D66DFE4
31CD6826CAF972D2039D793B8DB4EBD8E11EA7311610B2BCE067F9D06DB1786B
C32512DF19F9A419BBA8067C6D0EA97F03207428723A08B83A51426BCB916C07
DB5324A8D0C5F2282FFEB71171EAF17A4FA9A83BB091468E1540047B466EDDA8
9141ED310C6ADADBA75BC56BCEF97BC0A3F42A086B2F93321EC7414308B71409
9F9F10988BE7D061F5949CB0A11A5BC287DB7F198A68E4E6DC860987620F2C31
49094A8F1CB4E9913BC51369D3C53B917A9EB95E63CDA6BC9676CB80537A8604
C5AF4ED788B832371FC7F4855475235124507FF078CDDE1BF3F0DBE4C9F06144
93CA512F527FEC90A0764E9027D61CE5938B121AEA9F67FFE6A05DCE65C7B986
CF466B6A832F1921A6910CD367B3085676EADB90FCF6FAB4B71CEFB43381D434
8F8762AE673E6D288CD2A3095CF4B93D2773F4C10B31C3C6970690C002203AD8
FEB9231F5A2D0D2AB4D80076C75A31DC620F62B87A086EA669CA7CC9C0DBDF10
DAF4508DA898B5CC37910B427A110BF440CB913E39C859BAA2C997D47608E12E
15E4A069800228BAE3E6D4040A1986B3D8C4C44741A535D965E48F0F4AD11407
6E79FD9D1BEF659682F45187EAAD570494103D598F013EA14118D8E5693B2E87
39D9BD57A4D67E09514EB3A1D2DCF49365385B1E6A133B6C9AC1E9461009C0A0
78862017B2A1F273D9DA98CD07113C4269F06F393AB1B9A792961906D8EA963A
7A7BBCCB0FC874E908FA01CD86DB9A103623F61113CFF149F643EC607E69394C
A5141B1DD5E631CB4A2007591955B78C0CD5DECDD2FAF1925C3BE1C67CDB43F6
C1500BB2D37A45A80B6EA8532E26DFCCA959400FC36BD9B2C0F343719A3EDAFF
71FA23611B7B354AE32947BF288B6905EC04ED310E37BD380A32270F4981DA73
63B9DAE7BBF55BD530F47194B0A29F53553E244EF69A548FD0AF1E8B4E44A88C
FFB2DF0DB45F90DE9249C5AF8BD54FC6B5E80C2FBFC8F75ECB495B1941E759A7
CA7AC741D261FFA8DD0BED83D99CD39BE14C09475F81CDC22A384EE97CCC2378
77477FD29AE816D48E175C71E27370B557CC16B87F75A33EFEF432A1E2A8E5FC
47B8C074B94E2B8626B86EDDB355D66FC9A90DADFDC11833C9377B1847D12B80
B6A14D2E4803A47DDC45AB8194BE9FCED4C83034AA1F5BC1328762B99DC5B4A5
12BCBBD666997E829EE18DD301AAA69044E56DCC291482EA4A2A2642AD592552
30D00D4C62F1885A3465B64BBEB2771D9E8CF19C260822E618B71F2FD585B968
5A7A51091536FFAAECE23F12B2310283619DCD7B2D9420D2A736FB8FF15B575E
C476873E31DBCAC75257A45C1ED105A6F684FFC7EB264DFEFE3C76C97F952DC8
A84725ECCA3AE512C9CEE0C1C60260F6279A470CAB8B9CD46364E98D1108213F
6527B27D10189DDBEFFC14D25CB8460D4AB8B0A13AB598BBC426DA05872D827B
E4BF883698D051E105579039F14C71AC103D1336209FD44EA76C173FBD019182
1287F68326E6C59A9EDDF8F1C39A157276A83689240D42E16B5A969975CD993B
7657D66DC30F7091CF32217BE1131C4C53947724787A4C908600F1AC1AFE821E
9C70A4F541D7F846C0A95257D2BF95CC4CD857EB25B2F7F992180F2290F8CBAD
2C34A814E7E9EF79D00F1B54515F06E6B51B6AB2E9D86775E253F3F0FA03F38A
917E647FBC4A154C5C1B7EEA47B1D6759B67ACAC84F2775D09E19EB9AE7FB0EE
FD0B2151A064465A49A5E510AD034F878B91C19C98774AAC56054DE4FE4BEB70
AFCA33F891C0539A66F5CC4954AD90697977176960887F06B1CABB223D1C510A
16109AAF5CC54798C9F67662A4E0B348A96F6DE9E679211E679F2C106D40A176
79D6A1804A12165230004916B27003AB2CE404FD6CE477F20CD5F40F3C01A9AC
9515E5C1D06AF1859F87A18F782673788EE7D45F2F71298251D1A57A72F97E51
613B9E6CA03E2FABBF55591321554DFCC9BC14AD5C5FF8825150D568877E8F19
9E5E7725983CFD8EAB395AAADC2CB81F0AD6352BC95C74A1405E2571FA20F7D7
8203E5E129A875CB1935C5D6E0759370339AB822336CAE533A1D4D5CBA09442F
3F899B07EB9B13BC0EA3277BFC5780169D7C4D31A54DDC94C9A8E8C3C67BB78F
EAB990FFFF564A0279079AB5647F48471381BE7032F65332343E236869175728
A5468EF45F78BAE5EAFA5E9F3C59CDB404D8670913CF52B864DC1D763C825F83
59C2E7CA4634FC19639D0C426CFE06A7F4334C362D371D45239E6444D21CF9BF
C03D0852EE8B1DD37934719B1CEFC2316BE796A0062EF283F21EE4F4D9368DC9
05CCA03A3BB26BB1828D8C36C05302DC9E8DE674E42BADBC8FAD4D119B10C409
7DB88FBE60B6F7491BCCDBC73E41D0051C4008FA6CCA84598A045B526D8E06EE
41DFA125378E9D95C585C9D7609674AA809A03D7928CA8FD706FB16DA004BD43
8E47AF6FC9817808AA84A5E50F6EA9059E799697822CD7AD707F860083DDA5AC
22D898ABA78A3169A518EC4D6474BD353EA6DB570FC32655930653C4A9CEE27F
C1843C4EDE6D4A19E37E7A6EDF1B9057615D3C9C24586DAF7AA1C25202870C45
7C0F47C1BBE0227DCE15D99C4799BFE09E9C88C6D3AF3ED443E932F28CD7211E
28336CE6945F8019C320A7546117601A6B31BAC78A95EB5AFFC06CD77F4A62EC
D03A9576A5D238EA3B77A385F7294EFFA74C572A4931CAC487D3844D6575708D
6086CFD5A3237E1F9ED88C7EB6F34FE61DDDACAD80CC33F10E4113DBD91228DB
F3FBFE8FD176912271D1869F461DE358037A5A74F674BECE7C11FB9074AB9C1B
E598628F210BB3CC3086401733F5AE1716482735A3F399D832FB974B35934026
7E8ACA45A6C9AADF8879C2E16DD40616CE54A04BB22418C1AC742BDB85A7E719
CDA7E351B1907CD9B8418ABEB66ED84F8653FEF4115DF94531E4BE7C15D66D51
61F8417907499A332E629E82A35C6F252562FCA011101DCE3F5B17D6D9D349E0
67CD4E186DB36862DAE87F023072074E1C95F4A4B7C00098A8907333F30726A0
8DD2A20487291F866189CA8DC2EF5E22642F338E63D4A5208D361601D7FA9589
C7E8ABB5D387BAFFC6C93AF8FE96B3AD5C3C3E67D881A3A3E9CF933605818325
61225A9E08866E460D47DBD3174757F18F7E29B00D62AE0ED085E02E826536B1
09B4D5C4CB6F717113708859C9659CC8ABA3F9958FF3EC69029FA5B1B135A3E2
E658BE0CCCEE61CE18ECD5652B7FA2CE975BEF202245357B563E97001C4A3367
F842B73D0E04478FB0AA8EB4827123EFC21054823F393C3310387730776FC055
68CF7D20E382B781316BDE70AB169B30BF30B8CB6028C12BA46F63716834C4F3
0B8BF0BA677C40B58747EB420D12CDF741422CA360D7568E6E3A750CC444B45E
018DF743974D48682E4737B4A2F51279E3971E0336447440999E6F2D0F60D220
38D96A429B49D32D5A1E1C2E717940C314037C7E13F36B7DFE598F7F5499EF01
9B11E4B7FB87A340D7DD00DE468B78E595F98D3023A8FA31CD795C56AED43D31
954DD0B4F3BBC8D177EF5CC33A979149FF03BF4B5683D5BE3BDE0D9365966AD1
543C2A8EF3D3AC8F7616984F9E2456F365D7213212E127B968C9D03071713910
82A224AF3D7AAC16519BD9BE90728188C58A664D4ADEDF7B740B84C30400062C
1E1ACF16B26F41256BF2F2F0D8CF834E45B944B22A6093CD5DDEDA9648D41EFC
01162F6F0E63A4413DB784DECF2E912DBEE2294443482B4D33088410B6736555
7F64770230F020D5BB32992560AE6FCE9D951E3D62D8F7EC58AC8AF61C4F9E03
C0EB1073B858017739DC49A79BD0DBE60799C73B311D44B277C44F7F55AB53CA
DD5E1548E3F3C7D400FAC3275DE7A11F8228F1A42036F8332FAA0F06D5D95117
A6972357917CD989E599EA6E7F6D6EFA0D14217EB9F2CB214A5F686F28902B35
75192BB94CE9FCBBBC68C26676E5EF5A3BAC7D7568C06DA72809B9E9D8DD4F20
DAA416E5C0CAEF07ADEA73E527F90B2FD70CC5D456F86E625464E54B88EF06D0
EF8BCE24A44799960B42DC84EBE9379D82B9DD77FE1209AACDF1493E984E4E22
6E444A1C53E3E1C3A1B6E2771DCB82FDFD48FD82D2CE103C91F98AB1D55C849D
06CE7A4975433D1ACF7C731681F5E767A45FA292B3F2E64989FEFA777B832822
AA608743AEF35ECFD86BD421F3AA230DBAC87073B05AB8F986305562F758C9CD
B7048B00AE91B592F54EA9DD72B66B8DFF757DB417A0C075A783F6E7C396BF34
3A2D44C1713BBB9D6C8AE15B685DA7B7BC76B2894802F6E0E5B3725E1FB9405A
5280E520E933E8B0E90BC51057FB13235BC31459F6723F5D5AA321BD4D02E4CD
3CAE045B8BE483E0659F855DADCDE812546CDB3512E19E7ADF058364DAEEACC2
280CFCE4C921933EF464DBFC4FCD2F7BF079E4557A55F5D546C550AFA5D8EE19
59784986BEBD9F844C661D0ECE7B6DBDE25174B63AD1876B2B6FB83E59C94A1C
DCE919079898420BD274434ACE22A06CBDBAF2C66A70BD8DB9593DA0555F98C3
996285DCA9EC356E28C0BC6C2D90DFC4468A0C7B9C9D077467335D4159AB1FB8
3020A1B2015A3EDAAC1F28BC96B2CA8C687999ED69185F3C5653C34C5AA7F151
01B557A650A1F100560707E87E83CC36BDC3E2C0681FF5C1789817DD9D18E4F8
52C9A2580CD9F65FD985B8A0EC219689C873081AA09F6A941E5C5540000D422C
D714DC0CBF52F1F41895676DC73DEC3DC777F348C5F7D9DCA52F5EE216F59E67
A90989444231FFB92C8CCA64A9A7AF8B5445011E721B992A9FC9C94566CF55F2
53398181BB2439223B375D59DF0930A4581AB3426B888F9FF2B9E4F260188CA6
B2C3F8A14943E627BA364E8D5EC423985F63F706E20323A2CD43CC717785D29B
F501BE7CE9AD67F972E2F5B247D1255B6228B96783A051C14C6724563A6A74BC
4AA53AEAF4DBDBF649327BB7554D16DFC33AD2F86D6AFF55A1DF2847145B3463
8815CC86E7A2DAE51FB6EB75F18D4F1F07DAFB3EEC5C9422588DD62239648A64
6432206F57657344B3ED906F8D1E2CA9FD15798C1F6E848F4153564D0B43A7A3
D8336499BFC20CB5FEBC88B34650647F37ACDDF65ECD5B711FE3AC3EC6DB1D48
2D98122491C1B2D6202D4D4F74AE3D3CDBE61602895E6BBDEC469A56B3211ADE
85E2FB8B5F77F679370924023B5A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/A)
@start /Fa 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fb
242[1594 13[{ enclmmathsy ReEncodeFont }1 1594.02
/LMMathSymbols10-Regular rf /Fc 207[255 14[941 32[732{
 enclmmathsy ReEncodeFont }3 885.568 /LMMathSymbols8-Regular
rf /Fd 205[406 406 49[{ enclmrm ReEncodeFont }2 664.176
/LMRoman6-Regular rf /Fe 177[830 12[830 14[553 553 2[307
46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Ff 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fg 198[470 470 470 470
470 470 470 470 470 470 6[366 366 40[{ enclmrm ReEncodeFont }12
885.568 /LMRoman8-Regular rf /Fh 149[369 55[886 48[369
1033{ enclmmathsy ReEncodeFont }4 1328.35 /LMMathSymbols10-Regular
rf /Fi 146[1084 361 2[361 11[361 1[361 29[1012 1[361
4[650 650 650 650 650 650 650 6[506 506 40[{ enclmrm ReEncodeFont }16
1328.35 /LMRoman12-Regular rf /Fj 139[340 13[452 25[640
76[{ enclmmathit ReEncodeFont }3 885.568 /LMMathItalic8-Regular
rf /Fk 135[739 1[629 1[470 613 12[641 31[842 7[1012 1[1012
361 59[{ enclmmathit ReEncodeFont }9 1328.35 /LMMathItalic12-Regular
rf /Fl 650 2[723 5[650 17[650 31[975 73[578 686 686 939
686 723 506 513 506 686 723 650 723 1084 361 686 397
361 723 650 397 578 723 578 723 650 6[795 2[1336 2[939
723 2[885 1[975 1192 813 1011 1[469 1[1021 849 885 993
1[921 975 1[614 4[361 3[650 650 650 650 650 650 650 650
361 434 361 2[506 506 6[361 5[759 27[{ enclmec ReEncodeFont }64
1328.35 /LMRoman12-Regular rf /Fm 9[1076 49[1625 73[956
1136 1[1554 1[1196 837 849 879 1136 1196 1076 1196 1793
598 1136 1[598 1[1076 658 982 1196 1[1196 1046 12[1497
3[1470 1616 1682 2041 1293 1685 1[801 1682 1[1353 1412
1649 1554 1530 1625 10[1076 1076 1076 1076 1076 1076
1076 1076 598 717 17[1255 27[{ enclmec ReEncodeFont }49
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(AN)718
b(1.2)f(-)h(1)f(Luft)-60 b(widerstand)714 b(-)k(O)-60
b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p
0 TeXcolorgray 651 w(Der)389 b(Luft)-36 b(widerstand)387
b Fk(F)13241 4999 y Fj(L)14325 4800 y Fl(eines)i(b)36
b(estimm)-36 b(ten)388 b(PKW)-108 b(s)388 b(in)h(Abh\344ngigk)-36
b(eit)389 b(v)-36 b(on)389 b(der)f(F)-108 b(ahrt-)921
6792 y(gesc)-36 b(h)g(windigk)g(eit)746 b Fk(v)793 b
Fl(l\344sst)746 b(sic)-36 b(h)745 b(durc)-36 b(h)744
b(folgende)i(F)-108 b(unktionsgleic)-36 b(h)g(ung)745
b(b)36 b(esc)-36 b(hreib)36 b(en:)921 8784 y Fk(F)1763
8983 y Fj(L)2458 8784 y Fi(\()p Fk(v)48 b Fi(\))368 b(=)h(0)p
Fk(;)p Fi(4)219 b Fh(\001)g Fk(v)9041 8302 y Fg(2)9568
8784 y Fl(.)396 b(Der)h(Luft)-36 b(widerstand)395 b(ist)i(dab)36
b(ei)396 b(in)h(Newton)f(\(N\))g(und)f(die)i(Gesc)-36
b(h)g(win-)921 10776 y(digk)g(eit)434 b(in)g(Metern)f(pro)g(Sekunde)f
(\(m/s\))i(angegeb)36 b(en.)921 15578 y(Berec)-36 b(hne)329
b(die)g(mittlere)h(Zunahme)e(des)h(Luft)-36 b(widerstandes)329
b(in)33174 14679 y(N)p 32538 15268 2248 45 v 32538 16489
a(m/s)35248 15578 y(b)36 b(ei)329 b(einer)h(Erh\366h)-36
b(ung)921 17928 y(der)433 b(F)-108 b(ahrtgesc)-36 b(h)g(windigk)g(eit)
433 b(v)-36 b(on)434 b(20)217 b(m/s)435 b(auf)f(30)217
b(m/s.)p 1 0 0 TeXcolorrgb 1054 19921 a Fk(F)1896 20120
y Fj(L)2591 19921 y Fi(\(30\))295 b Fh(\000)h Fk(F)7369
20120 y Fj(L)8064 19921 y Fi(\(20\))p 1054 20510 9323
45 v 3603 21731 a(30)f Fh(\000)h Fi(20)10878 20819 y(=)12392
19921 y(360)g Fh(\000)f Fi(160)p 12392 20510 5526 45
v 14504 21731 a(10)18419 20819 y(=)369 b(20)22091 19921
y Fl(N)p 21455 20510 2248 45 v 21455 21731 a(m/s)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Ff(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fe(AN)g(1.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
25538 54804 45 v -2331 30839 a Fm(AN)718 b(1.2)f(-)h(2)f(Bew)-60
b(egung)716 b(eines)g(K)-60 b(\366rp)60 b(ers)717 b(-)g(L)-179
b(T)717 b(-)g(BIFIE)p 0 TeXcolorgray -741 34147 a Fl(2.)p
0 TeXcolorgray 651 w(Bei)519 b(der)g(Bew)-36 b(egung)519
b(eines)g(K)-36 b(\366rp)36 b(ers)519 b(gibt)g(die)g(Zeit-W)-108
b(eg-F)g(unktion)518 b(seine)h(En)-36 b(tfern)g(ung)921
36139 y Fk(s)484 b Fl(\(in)g(m\))f(v)-36 b(om)485 b(A)-36
b(usgangspunkt)484 b(seiner)g(Bew)-36 b(egung)484 b(nac)-36
b(h)484 b Fk(t)g Fl(Sekunden)e(an.)j(Der)g(Di\033e-)921
38476 y(renzenquotien)-36 b(t)9791 37578 y Fk(s)p Fi(\()p
Fk(t)11380 37777 y Fg(2)11905 37578 y Fi(\))295 b Fh(\000)h
Fk(s)p Fi(\()p Fk(t)15624 37777 y Fg(1)16149 37578 y
Fi(\))p 9791 38166 6864 45 v 11416 39388 a Fk(t)11886
39587 y Fg(2)12706 39388 y Fh(\000)g Fk(t)14505 39587
y Fg(1)17143 38476 y Fl(gibt)355 b(seine)h(mittlere)f(Gesc)-36
b(h)g(windigk)g(eit)356 b(im)g(Zeitin)-36 b(terv)-72
b(all)921 40694 y Fi([)8 b Fk(t)1760 40893 y Fg(1)2285
40694 y Fi(;)221 b Fk(t)3337 40893 y Fg(2)3864 40694
y Fi(])433 b Fl(an.)921 43239 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 45231 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 48993 y(Der)434
b(A)-36 b(usdruc)g(k)797 b Fi(lim)9219 49723 y Fj(t)9559
49846 y Fd(2)10020 49723 y Fc(!)p Fj(t)11301 49846 y
Fd(1)12116 48095 y Fk(s)p Fi(\()p Fk(t)13705 48294 y
Fg(2)14230 48095 y Fi(\))295 b Fh(\000)h Fk(s)p Fi(\()p
Fk(t)17949 48294 y Fg(1)18474 48095 y Fi(\))p 12116 48683
V 13741 49905 a Fk(t)14211 50104 y Fg(2)15031 49905 y
Fh(\000)g Fk(t)16830 50104 y Fg(1)19546 48993 y Fl(gibt)434
b(dir)p 24460 48993 3150 45 v 28081 48945 a(1)27609 48993
y Fb(\015)p 29203 48993 V 33003 48993 V 36625 48945 a
Fl(2)36153 48993 y Fb(\015)p 37747 48993 V 3583 w Fl(an.)p
0 TeXcolorgray 0 TeXcolorgray 1187 50812 19974 45 v 1187
53897 45 3085 v 10848 52594 a(1)10376 52642 y Fb(\015)p
21115 53897 V 1187 53941 19974 45 v 1187 57200 45 3260
v 1895 55997 a Fl(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)p
18750 57200 V 1 0 0 TeXcolorrgb 19459 55903 a Fa(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
57200 V 1187 57244 19974 45 v 1187 60504 45 3260 v 1895
59300 a Fl(Momen)g(tan)g(b)36 b(esc)-36 b(hleunigung)p
18750 60504 V 19459 59206 a Fa(2)p 21115 60504 V 1187
60548 19974 45 v 1187 65603 45 5056 v 1895 62408 a Fl(durc)g(hsc)g
(hnittlic)g(he)287 b(Besc)-36 b(hleuni-)1895 64400 y(gung)p
18750 65603 V 19459 63407 a Fa(2)p 21115 65603 V 1187
65647 19974 45 v 0 TeXcolorgray 0 TeXcolorgray 25658
50923 19960 45 v 25658 54007 45 3085 v 35312 52704 a
Fl(2)34840 52752 y Fb(\015)p 45573 54007 V 25658 54052
19960 45 v 25658 59107 45 5056 v 26366 55911 a Fl(zwisc)g(hen)434
b(den)e(Zeitpunkten)h Fk(t)42018 56110 y Fg(1)26366 57903
y Fl(und)f Fk(t)29437 58102 y Fg(2)p 43207 59107 V 43916
56911 a Fa(2)p 45573 59107 V 25658 59151 19960 45 v 25658
62410 45 3260 v 26366 61207 a Fl(zum)h(Zeitpunkt)g Fk(t)35688
61406 y Fg(1)p 43207 62410 V 1 0 0 TeXcolorrgb 43916
61113 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45573 62410 V 25658 62454 19960 45 v 25658
65714 45 3260 v 26366 64510 a Fl(zum)g(Zeitpunkt)g Fk(t)35688
64709 y Fg(2)p 43207 65714 V 43916 64416 a Fa(2)p 45573
65714 V 25658 65758 19960 45 v 47992 34147 a Ff(___/1)p
1 0 0 TeXcolorrgb 47998 36139 a Fe(AN)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69786
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fm(AN)849 b(1.2)e(-)i(3)f(Mittlere)f
(\304nderungsrate)e(in)-60 b(terpretieren)846 b(-)i(MC)h(-)-2331
4817 y(Matura)717 b(2015/16)g(-)h(Haupttermin)p 0 TeXcolorgray
-741 8124 a Fl(3.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)321
b(ist)g(eine)h(P)-36 b(olynomfunktion)322 b Fk(f)464
b Fl(dritten)320 b(Grades.)i(Die)g(mittlere)g(\304nderungsrate)887
10116 y(v)-36 b(on)434 b Fk(f)575 b Fl(hat)434 b(im)g(In)-36
b(terv)-72 b(all)434 b Fi([)8 b Fk(x)15026 10315 y Fg(1)15552
10116 y Fi(;)655 b Fk(x)17307 10315 y Fg(2)17833 10116
y Fi(])434 b Fl(den)f(W)-108 b(ert)433 b(5.)855 14653
y(W)-108 b(elc)-36 b(he)331 b(der)g(nac)-36 b(hstehenden)329
b(A)-36 b(ussagen)331 b(k)-36 b(\366nnen)331 b(\374b)36
b(er)331 b(die)g(F)-108 b(unktion)331 b Fk(f)473 b Fl(sic)-36
b(her)332 b(getro\033en)874 16645 y(w)-36 b(erden?)433
b(Kreuze)h(die)f(b)36 b(eiden)433 b(zutre\033enden)f(A)-36
b(ussagen)433 b(an.)p 2370 17612 41645 45 v 2370 20830
45 3219 v 3078 19553 a(Im)h(In)-36 b(terv)-72 b(all)434
b Fi([)8 b Fk(x)11339 19752 y Fg(1)11865 19553 y Fi(;)655
b Fk(x)13620 19752 y Fg(2)14146 19553 y Fi(])434 b Fl(gibt)g(es)f
(mindestens)g(eine)g(Stelle)h Fk(x)g Fl(mit)f Fk(f)142
b Fi(\()p Fk(x)p Fi(\))369 b(=)g(5)p Fl(.)p 41605 20830
V 43970 20830 V 2370 20874 41645 45 v 2370 24092 45 3219
v 3078 22815 a Fk(f)142 b Fi(\()p Fk(x)5106 23014 y Fg(2)5632
22815 y Fi(\))369 b Fk(>)f(f)142 b Fi(\()p Fk(x)9915
23014 y Fg(1)10441 22815 y Fi(\))p 41605 24092 V 1 0 0
TeXcolorrgb 31366 w Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 43970 24092 V 2370 24137 41645 45 v 2370
27355 45 3219 v 3078 26078 a Fl(Die)434 b(F)-108 b(unktion)433
b Fk(f)576 b Fl(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fi([)8 b Fk(x)22173 26277 y Fg(1)22699 26078 y Fi(;)656
b Fk(x)24455 26277 y Fg(2)24980 26078 y Fi(])434 b Fl(monoton)g
(steigend.)p 41605 27355 V 43970 27355 V 2370 27399 41645
45 v 2370 30617 45 3219 v 3078 29340 a Fk(f)3861 28858
y Fc(0)4172 29340 y Fi(\()p Fk(x)p Fi(\))368 b(=)h(5)434
b Fl(f\374r)f(alle)i Fk(x)369 b Fh(2)f Fi([)8 b Fk(x)16670
29539 y Fg(1)17196 29340 y Fi(;)656 b Fk(x)18952 29539
y Fg(2)19478 29340 y Fi(])p 41605 30617 V 43970 30617
V 2370 30661 41645 45 v 2370 33880 45 3219 v 3078 32603
a Fk(f)142 b Fi(\()p Fk(x)5106 32802 y Fg(2)5927 32603
y Fh(\000)295 b Fk(f)142 b Fi(\()p Fk(x)9283 32802 y
Fg(1)9809 32603 y Fi(\))369 b(=)f(5)296 b Fh(\001)f Fi(\()p
Fk(x)14919 32802 y Fg(2)15740 32603 y Fh(\000)g Fk(x)17807
32802 y Fg(1)18333 32603 y Fi(\))p 41605 33880 V 1 0 0
TeXcolorrgb 23474 w Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 43970 33880 V 2370 33924 41645 45 v 47992
8124 a Ff(___/1)p 1 0 0 TeXcolorrgb 47998 10116 a Fe(AN)369
b(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 37952 54804 45 v 0 TeXcolorgray 24746 81281 a Fl(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(AN)975 b(1.2)f(-)h(4)f(Di\033erenzen-)g
(und)f(Di\033erenzialquotien)-60 b(t)972 b(-)j(MC)g(-)-2331
4515 y(Matura)717 b(2014/15)g(-)h(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 7823 a Fl(4.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)452 b(ist)h(eine)f(P)-36 b(olynomfunktion)454
b(f)f(zw)-36 b(eiten)453 b(Grades.)f(In)h(der)f(nac)-36
b(hstehenden)450 b(Ab-)921 9815 y(bildung)502 b(sind)h(der)f(Graph)g
(dieser)h(F)-108 b(unktion)502 b(im)i(In)-36 b(terv)-72
b(all)503 b Fi([)8 b(0;)221 b Fk(x)33845 10014 y Fg(3)34372
9815 y Fi(])503 b Fl(so)-36 b(wie)504 b(eine)f(Sekan)-36
b(te)921 11806 y Fk(s)442 b Fl(und)g(eine)g(T)-108 b(angen)-36
b(te)443 b Fk(t)f Fl(dargestellt.)i(Die)f(Stellen)f Fk(x)27950
12005 y Fg(0)28919 11806 y Fl(und)f Fk(x)32268 12005
y Fg(3)33237 11806 y Fl(sind)h(Nullstellen,)i Fk(x)43583
12005 y Fg(1)44551 11806 y Fl(ist)921 13798 y(eine)469
b(lokale)i(Extremstelle)f(v)-36 b(on)470 b Fk(f)142 b
Fl(.)470 b(W)-108 b(eiters)469 b(ist)h(die)f(T)-108 b(angen)-36
b(te)469 b Fk(t)g Fl(im)h(Punkt)f Fi(\()p Fk(x)41589
13997 y Fg(2)42114 13798 y Fh(j)p Fk(f)142 b Fi(\()p
Fk(x)44511 13997 y Fg(2)45037 13798 y Fi(\)\))921 15790
y Fl(parallel)435 b(zur)e(eingezeic)-36 b(hneten)433
b(Sekan)-36 b(te)433 b Fk(s)p Fl(.)p 0 TeXcolorgray 0
TeXcolorgray 3169 43343 a
 currentpoint currentpoint translate 1.36888 1.36888 scale neg exch
neg exch translate
 3169 43343 a 3602 43343 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 263.22563 a add def
/d 0.0 a add neg def /h 166.2477 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3602
43343 a 5410 40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 246.89752  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 246.89752  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 143.46892  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.46892
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 246.89752
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 143.46892  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 143.46892  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 246.89752  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.46892
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 246.89752
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 5410 40822 a 5410
40822 a
tx@Dict begin  { 246.89752 143.46892 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 5410 40822 a 5040 41108
a Fk(x)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  PutEnd  end
 5410 40822
a 5410 40822 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 0.0 0.0 pop 246.89752 143.46892 exch pop } PutCoor
PutBegin  end
 5410 40822 a
5410 40822 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 5410 40822 a 4143 41154 a Fk(f)142 b Fi(\()p
Fk(x)p Fi(\))5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  PutEnd  end
 5410
40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (-(0.5*x-2.0)^(2.0)+4.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 3.5 def /x1 8.2 def /dx x1 x sub
49 div def /F@pstplot ((--32.-4.*x)/4.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 4.5 def /x1 7.5 def /dx x1 x sub
49 div def /F@pstplot ((--9.-1.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.05026 121.95093 134.33258 113.76755
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 145.84288 119.92603 136.12477 111.74222
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  { 156.49008 113.81097 } PutCoor PutBegin  end
 5410 40822 a 817
x Fk(t)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 128.8822 90.10527 } PutCoor PutBegin  end
 5410 40822
a 572 x Fk(s)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 132.18959 104.4189 122.47191 96.23553
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.98221 102.39401 124.2641 94.21019
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
5410 40822 a
tx@Dict begin  { 58.58609 79.66776 } PutCoor PutBegin  end
 5410 40822 a 922 x Fk(f)5410 40822 y
tx@Dict begin  PutEnd  end
 5410
40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 0.0 113.81097 113.81097 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.0  5.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 0.0 170.71646 85.35823  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.0  5.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  { 107.33165 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572
x Fk(x)6149 41593 y Fg(1)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410
40822 a
tx@Dict begin  { 163.26073 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572 x Fk(x)6149 41593 y Fg(2)5410
40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { -11.19684 -7.96672 } PutCoor PutBegin  end
 5410 40822 a 836 x
Fi(0)369 b(=)g Fk(x)8549 41857 y Fg(0)5410 40822 y
tx@Dict begin  PutEnd  end
 5410
40822 a 5410 40822 a
tx@Dict begin  { 220.21614 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572 x Fk(x)6149 41593
y Fg(3)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 113.81097
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.71646 85.35823
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 227.62195 0.0   false
NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
32740 43343 a
currentpoint initclip moveto
 32740 43343 a 3169 43343 a
 currentpoint currentpoint translate 1 1.36888 div 1 1.36888 div scale
neg exch neg exch translate
 3169 43343 a
855 47328 a Fl(W)-108 b(elc)-36 b(he)408 b(der)g(folgenden)h(A)-36
b(ussagen)409 b(sind)f(f\374r)h(die)f(in)h(der)f(Abbildung)g
(dargestellte)h(F)-108 b(unk-)921 49320 y(tion)434 b
Fk(f)575 b Fl(ric)-36 b(h)g(tig?)921 51312 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 14737 52278 16910 45 v 14737 55496 45 3219 v
15445 54219 a Fk(f)16228 53737 y Fc(0)16539 54219 y Fi(\()p
Fk(x)17784 54418 y Fg(0)18310 54219 y Fi(\))368 b(=)h
Fk(f)21348 53737 y Fc(0)21659 54219 y Fi(\()p Fk(x)22904
54418 y Fg(3)23429 54219 y Fi(\))p 29237 55496 V 31603
55496 V 14737 55541 16910 45 v 14737 58759 45 3219 v
15445 57482 a Fk(f)16228 57000 y Fc(0)16539 57482 y Fi(\()p
Fk(x)17784 57681 y Fg(1)18310 57482 y Fi(\))f(=)h(0)p
29237 58759 V 1 0 0 TeXcolorrgb 8731 w Fa(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31603 58759 V 14737
58803 16910 45 v 14737 63698 45 4896 v 15578 60744 a
Fk(f)142 b Fi(\()p Fk(x)17606 60943 y Fg(3)18132 60744
y Fi(\))295 b Fh(\000)g Fk(f)142 b Fi(\()p Fk(x)22289
60943 y Fg(1)22815 60744 y Fi(\))p 15578 61333 7743 45
v 17373 62554 a Fk(x)18112 62753 y Fg(3)18933 62554 y
Fh(\000)295 b Fk(x)21000 62753 y Fg(1)23822 61643 y Fi(=)369
b Fk(f)25986 61161 y Fc(0)26297 61643 y Fi(\()p Fk(x)27542
61842 y Fg(2)28067 61643 y Fi(\))p 29237 63698 45 4896
v 1 0 0 TeXcolorrgb 29946 61583 a Fa(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31603 63698 V 14737
63742 16910 45 v 14737 66961 45 3219 v 15445 65684 a
Fk(f)16228 65202 y Fc(0)16539 65684 y Fi(\()p Fk(x)17784
65883 y Fg(0)18310 65684 y Fi(\))f(=)h(0)p 29237 66961
V 31603 66961 V 14737 67005 16910 45 v 14737 71900 45
4896 v 15578 68946 a Fk(f)142 b Fi(\()p Fk(x)17606 69145
y Fg(1)18132 68946 y Fi(\))295 b Fh(\000)g Fk(f)142 b
Fi(\()p Fk(x)22289 69145 y Fg(3)22815 68946 y Fi(\))p
15578 69535 7743 45 v 17373 70756 a Fk(x)18112 70955
y Fg(1)18933 70756 y Fh(\000)295 b Fk(x)21000 70955 y
Fg(3)23822 69845 y Fk(>)369 b Fi(0)p 29237 71900 45 4896
v 31603 71900 V 14737 71944 16910 45 v 47992 7823 a Ff(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fe(AN)g(1.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 75972 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fm(AN)705 b(1.2)f(-)h(5)f(\304nderungsraten)d
(einer)j(P)-60 b(olynomfunktion)701 b(-)k(MC)g(-)-2331
4817 y(Matura)717 b(NT)h(2)f(15/16)p 0 TeXcolorgray -741
8124 a Fl(5.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b Fk(f)142 b Fl(.)p 0 TeXcolorgray 0 TeXcolorgray 7667
31101 a
 currentpoint currentpoint translate 0.61401 0.61401 scale neg exch
neg exch translate
 7667 31101 a 7667 31101 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 463.2106 a add def
/d 0.0 a add neg def /h 303.30634 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 31101 a 22218
19384 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 331.75908 0.0 -131.45152 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 17
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 197.4621 0.0 -105.84424   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 331.75908  0 -131.45152  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -131.45152
 331.75908  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.84424  def /maxTickline 197.4621  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 197.4621
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 331.75908
0.0 -131.45152 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 197.4621  0 -105.84424  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -105.84424
 197.4621  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-131.45152  def /maxTickline 331.75908  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 197.4621
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 331.75908
0.0 -131.45152 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20973 16520 a Fg(1)20973 13371
y(2)20973 10221 y(3)20973 7071 y(4)20973 3922 y(5)20973
772 y(6)20241 22773 y Fc(\000)p Fg(1)20241 25923 y Fc(\000)p
Fg(2)20241 29072 y Fc(\000)p Fg(3)25132 20730 y(1)2680
b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)2210 b(11)-38866
b Fc(\000)p Fg(1)-4352 b Fc(\000)p Fg(2)h Fc(\000)p Fg(3)f
Fc(\000)p Fg(4)22218 19384 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22218 19384 a 22218 19384
a
tx@Dict begin  { 331.75908 197.4621 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22218 19384 a 22218 19384 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22218 19384 a 21875 19670
a Fl(x)22218 19384 y
tx@Dict begin  PutEnd  end
 22218 19384 a 22218 19384 a
tx@Dict begin  PutEnd  end
 22218
19384 a 22218 19384 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22218 19384 a 22218 19384 a
tx@Dict begin  { 0.0 0.0 pop 331.75908 197.4621 exch pop } PutCoor
PutBegin  end
 22218
19384 a 22218 19384 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22218 19384 a 21170 19716 a Fl(f\(x\))22218
19384 y
tx@Dict begin  PutEnd  end
 22218 19384 a 22218 19384 a
tx@Dict begin  PutEnd  end
 22218 19384 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.62 def /x1 11.659999999999991
def /dx x1 x sub 199 div def /F@pstplot (-0.02263888888888889*x^(4.0)+0.25055555555555553*x^(3.0)-0.35180555555555554*x^(2.0)-2.255*x+5.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 22218 19384 a
tx@Dict begin  { -101.29169 -60.31967 } PutCoor PutBegin  end
 22218 19384 a
-258 x Fk(f)22218 19384 y
tx@Dict begin  PutEnd  end
 22218 19384 a 58942 31101 a
currentpoint initclip moveto

58942 31101 a 7667 31101 a
 currentpoint currentpoint translate 1 0.61401 div 1 0.61401 div scale
neg exch neg exch translate
 7667 31101 a 921 35085 a Fl(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an!)p 1217 36052 43950 45 v 1217 41107 45 5056 v 1925
37912 a(Der)g(Di\033erenzialquotien)-36 b(t)435 b(an)e(der)g(Stelle)h
Fk(x)369 b Fi(=)g(6)433 b Fl(ist)h(gr\366\377er)g(als)h(der)e
(Di\033eren-)1925 39904 y(zialquotien)-36 b(t)435 b(an)e(der)g(Stelle)h
Fk(x)369 b Fi(=)g Fh(\000)p Fi(3)p Fl(.)p 42757 41107
V 45123 41107 V 1217 41151 43950 45 v 1217 44215 45 3064
v 1925 43011 a(Der)434 b(Di\033erenzialquotien)-36 b(t)435
b(an)e(der)g(Stelle)h Fk(x)369 b Fi(=)g(1)433 b Fl(ist)h(negativ.)p
42757 44215 V 1 0 0 TeXcolorrgb 43466 43015 a Fa(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45123
44215 V 1217 44259 43950 45 v 1217 47477 45 3219 v 1925
46200 a Fl(Der)g(Di\033erenzialquotien)-36 b(t)435 b(im)e(In)-36
b(terv)-72 b(all)434 b Fi([)8 b Fh(\000)p Fi(3;)221 b(0])436
b Fl(ist)e(1.)p 42757 47477 V 45123 47477 V 1217 47521
43950 45 v 1217 50780 45 3260 v 1925 49577 a(Die)h(mittlere)e
(\304nderungsrate)g(ist)g(in)h(k)-36 b(einem)434 b(In)-36
b(terv)-72 b(all)434 b(gleic)-36 b(h)434 b(0.)p 42757
50780 V 45123 50780 V 1217 50825 43950 45 v 1217 54043
45 3219 v 1925 52766 a(Der)g(Di\033erenzialquotien)-36
b(t)435 b(im)e(In)-36 b(terv)-72 b(all)434 b Fi([)8 b(3;)221
b(6])p Fl(.)p 42757 54043 V 1 0 0 TeXcolorrgb 17433 w
Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45123 54043 V 1217 54087 43950 45 v 47992 8124 a Ff(___/1)p
1 0 0 TeXcolorrgb 47998 10116 a Fe(AN)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 58115
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(AN)638 b(1.2)e(-)i(6)f
(Di\033erenzenquotien)-60 b(t)635 b(-)i(Di\033eren)-60
b(tialquotien)g(t)635 b(-)i(MC)-2617 4515 y(-)718 b(Matura)f(2013/14)g
(1.)g(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray -741
7823 a Fl(6.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b Fk(f)142 b Fl(:)p 0 TeXcolorgray 0 TeXcolorgray 7666
35640 a
 currentpoint currentpoint translate 0.85263 0.85263 scale neg exch
neg exch translate
 7666 35640 a 7666 35640 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 333.59294 a add def
/d 0.0 a add neg def /h 269.7132 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7666 35640 a 26036
23761 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 167.6409 0.0 -165.95204 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 162.39545 0.0 -107.31775   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 167.6409  0 -165.95204  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -165.95204
 167.6409  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.31775  def /maxTickline 162.39545  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.39545
0.0 -107.31775   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.6409
0.0 -165.95204 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 162.39545  0 -107.31775  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.31775
 162.39545  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-165.95204  def /maxTickline 167.6409  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.39545
0.0 -107.31775   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.6409
0.0 -165.95204 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24791 20897 a Fg(1)24791 17747
y(2)24791 14597 y(3)24791 11448 y(4)24791 8298 y(5)24059
27150 y Fc(\000)p Fg(1)24059 30299 y Fc(\000)p Fg(2)24059
33449 y Fc(\000)p Fg(3)28951 25106 y(1)2679 b(2)h(3)f(4)h(5)-19734
b Fc(\000)p Fg(1)-4351 b Fc(\000)p Fg(2)f Fc(\000)p Fg(3)h
Fc(\000)p Fg(4)f Fc(\000)p Fg(5)26036 23761 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26036 23761
a 26036 23761 a
tx@Dict begin  { 167.6409 162.39545 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26036 23761 a 26036 23761 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26036 23761
a 25693 24047 a Fl(x)26036 23761 y
tx@Dict begin  PutEnd  end
 26036 23761 a 26036
23761 a
tx@Dict begin  PutEnd  end
 26036 23761 a 26036 23761 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26036 23761 a 26036
23761 a
tx@Dict begin  { 0.0 0.0 pop 167.6409 162.39545 exch pop } PutCoor
PutBegin  end
 26036 23761 a 26036 23761 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26036 23761 a 24988
24093 a Fl(f\(x\))26036 23761 y
tx@Dict begin  PutEnd  end
 26036 23761 a 26036 23761
a
tx@Dict begin  PutEnd  end
 26036 23761 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.832548135104837 def /x1 5.891911065818181
def /dx x1 x sub 199 div def /F@pstplot (0.09804004429333255*x^(4.0)+0.040538292112993014*x^(3.0)-1.404194081776737*x^(2.0)+0.008372796173848979*x+2.9967958492616105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26036 23761 a
tx@Dict begin  { -110.58954 131.16585 } PutCoor PutBegin  end
 26036 23761 a 915 x Fl(f)26036 23761 y
tx@Dict begin  PutEnd  end

26036 23761 a 44593 35640 a
currentpoint initclip moveto
 44593 35640 a 7666 35640
a
 currentpoint currentpoint translate 1 0.85263 div 1 0.85263 div scale
neg exch neg exch translate
 7666 35640 a 921 39625 a Fl(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
17154 42584 12076 45 v 17154 46215 45 3632 v 17995 44193
a Fj(f)98 b Fg(\(3\))p Fc(\000)p Fj(f)g Fg(\()p Fc(\000)p
Fg(3\))p 17995 44503 4968 45 v 20244 45271 a(6)23465
44813 y Fi(=)368 b(0)p 26820 46215 45 3632 v 29185 46215
V 17154 46260 12076 45 v 17154 49892 45 3632 v 17995
47869 a Fj(f)98 b Fg(\(3\))p Fc(\000)p Fj(f)g Fg(\(0\))p
17995 48179 4236 45 v 19878 48947 a(3)22733 48489 y Fk(<)368
b Fi(0)p 26820 49892 45 3632 v 1 0 0 TeXcolorrgb 27529
48408 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 29185 49892 V 17154 49936 12076 45 v 17154
53154 45 3219 v 17862 51877 a Fk(f)18645 51395 y Fc(0)18956
51877 y Fi(\(3\))h(=)f(0)p 26820 53154 V 29185 53154
V 17154 53198 12076 45 v 17154 56416 45 3219 v 17862
55139 a Fk(f)18645 54657 y Fc(0)18956 55139 y Fi(\()p
Fh(\000)p Fi(2\))h Fk(>)g Fi(0)p 26820 56416 V 1 0 0
TeXcolorrgb 3478 w Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 29185 56416 V 17154 56461 12076 45 v 17154
59679 45 3219 v 17862 58402 a Fk(f)18645 57920 y Fc(0)18956
58402 y Fi(\()p Fh(\000)p Fi(1\))g(=)g Fk(f)24184 57920
y Fc(0)24494 58402 y Fi(\(1\))p 26820 59679 V 29185 59679
V 17154 59723 12076 45 v 47992 7823 a Ff(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fe(AN)g(1.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 63751 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(5)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

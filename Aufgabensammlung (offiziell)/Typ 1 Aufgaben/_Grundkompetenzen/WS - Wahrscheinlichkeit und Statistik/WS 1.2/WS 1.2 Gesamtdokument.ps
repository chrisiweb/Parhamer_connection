%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.2/WS 1.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:47:16 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMRoman8-Regular
%%+ LMRoman10-Regular wasy10 LMMathItalic8-Regular
%%+ LMMathSymbols8-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.2/WS 1.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0846
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE503DBAACC843B2D054B3D7DDACD7D5EB62F3E2E7B16FF53
BB396EDB8A4B7B07046F0089F56E044B37BC6D86BD3281E84EEC46E015BEB6B4
1B3F42A7DC6C54ECF3801E5C266B6A683FD55DF3C02946DAA6596D8D9A37844C
7C6D9D856CFF936CBD583DA8259E113CE1257BE6EB5872FBF1FE69DDE14DB146
2E4F9859384B15882C6B0E2215D2E74B5719114C0DA6D1B05EE88107051E93AA
C1EEF9DC595980CE50933162307293B1567EE8D3BAC9155FFB9BD94337E6CA82
F859B5E4E7355B6D179AFF699D69DB25BC41D9D5893FB341D4742D2D54AEAC6C
C69AA022ABF232A44262D922CDC694C0A0BFE83E3E95F08F5FB761C442515ADD
F084844FF1B2B14A0C43F5BB9FA2C36526B2411B2B72CF351725928A70E0F077
05286911B646600FBFCD96E60F83254804C9126F6A007AD697659D0F4B9B7BE0
BE1D4DFE778149E5795166423DBE5D30C0453E411C9395DF8F3807EF11C82E84
E736A060EB4775CAF2106549BDC89AD08FAB3A14213EFB6D602C098E76E62A5E
C284C215CE71B98086E3722B28571052662AE666F725C46F9DE29DFCAC798130
C0CE5C49E1C5FB11EEEDDDEED240805D78448DF7E49A11B2F211A64EB78A90B7
4992D487B9909D602F361AE26078080DF8F67B12B9EB935AE0DE2D8839376A78
D70FA44F1974ABA413D5BBB2A974E898F62BFE90F132A37E2DCA4F43E13DB135
2F73EF4D5E5795A34E6569D002BDF5FEE796AE925B34A27D21AE1AAEBFBC4855
F579AEB074F92F96570BAB00874DEA64EE39679FC56E7B100B05476FA019E37C
01BD34699E04CC78F07CBFAD8971EEB479F54FEE7D0085D44C8B17CD4094D807
D2ACA57AB522D3F31B912A4FDF043ED5354B60DF6BE715C80829477C8C8FC175
DC6FD9A0087C94300A485F30E384F1D339B281D1B96D45BBEF061E7F351B1905
F008412EEA4BFAD3CE636BA777524F301D1DCA33A0C777A7B0A8CC71F2DF8135
1369AA38449C50ECD153286F1E1A84D9E91007DCB756C7FA53FEAE2E6565D387
94355609E6B7ECCF3770853FA62C92AB1F8717A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC677E95307847599B02E5AF54BE91F662979D0BE
A1CC2205A8493A22D252AEBA66664B2A0FA2AD5C2BFDC446E8217D3E5D67616F
A9C8D25588F1689221B896E4663DCB2823847EA18AEC15EB3464CD20830192E9
FA76A8D8C8454C7E9ABF6C0F725BC64477D228181C86BA782F4FE02493A70F60
73CE5AC25BF5C0579654DB07E4ACEA3666110AE5DED90584F99E14B24810C5DF
7394EE947676E459D57DCBB3829ECEFC74DC1A1B3482A99DC90EB52844D07B8D
4D86246B30916CF5B9EB30CF2688AD5470018A3F2D47875FBB75E16CFFEB450C
B8BC91FFBE6C83D561EA7819C508DE4AE8DFA21E23DB7E05FECB7CBC4A049B24
336687838F532359D6FBC18512610FC852B07E15D4B247573263395579F2B2D3
3E0A136C429A9D806C2CF8AB15954BFF59B4AE356D1DB3175DDC2A6AFD06EEE9
950911F36A10ADD8ABFBA9D53C42A690A48B179E6725265A12AB4D9865210714
AD7EF694588DD4594813371CF6DF55FC8BCE3B9F209F7A66F4CC713EC85C44E2
C692AAC42C9E5003AA9AC548FF0AC943ED9E898E52F2294B3AF6C494A1A62A0A
6F8E820E383A2F9A9BE2FFB3AFF49BBE499A6E4A6D986438CC0F8950392B6CE6
1423914058FCDDBE245DEBC2441DF1AA6A52716A7EF812A28813BA8D3D655ED2
66551C59852C1BCDFAEE9FCA1B8B7B45FBB5A049FC399C46C1426F4FF72A744B
8EED9375BA41440D24BE8D533BC804C1C8059928ABE24544F41569DAEB218F1A
90A339268479552A5D4F025C0446A986C64DFFC2C0C909AC2835EF3FAF19B53E
44F7EEB341005187115312A76DCABF4133E260320CB39E191970C0F0E81DBEF7
772D6C5F077DE5916A5E4571236CB05E25C0B681EE2902AF18783CA81177E26C
F828FED0D16B16987D62B6E83BF9B59F90EC4E790133AA578C8AF018B06D7B9F
5E162C7BC6381459BB3BD8E8BD8CDF61FEF2585E482EE3E3235E4B3C55CB96C5
D792E2DDFD91D5D62FEA685E885923620FAA16910AA9EB967D0B382CC9929D8D
11C794E55DEC8F51B5D7BC7DD0F437F1C1A89AFCBF166B5E882C1009A9DB4ED1
9128C657C8098ED5BB7691BBF8C1F6EBA75C1C9C1670B8A568F69091BF0FBC9A
D619AF7C314419A4FD057F51ADDF7DC9BEC731AD6040FD9B804FA147488D0E30
F8841589FE146D0525DF5FB31C974FC3B57F01E1D7A2A2E477EFB20457C17812
98694BCB0A51F6AAD0A5B019A8F4C210A4EF832E7D6DF3E913A142458A406870
B3A796EDAB7569B0D96F4665D013427D282B072CFF5FACF67B4ADA7A8FF35840
A4FE3D981216B1214415D55F0490CC2304501060CD4B29E20116F74FEB99A1CC
BD511DF8BC21284CBB01E5147CF95A00E8E775BB357487584644F975CC568F47
3DBDE6278D74ECB3172F5438402E9D77EACBBE3D271C3DD27C28F754521E715B
EF18A179D64952A6D39CFFDBA38C11C7238C738370C48C50E025B66055E56D4A
8FB3ECB4BE8FB8D21D943D3328065A91592BF5454FE871CF4302F1550F56B682
1344308331EBB7B2E684B3B6C374B061AC0CEDB050AFEBD734238E9DDC831883
C93110751B5F8637CF00C7C14D8D087E4AB1D815951E4BEA2690A552606F1EB8
A796E8FA21BB9E5CF8DBBD8D831A0B996FA2E67F9064EC921830EE707FFBD444
DF0A703A999B75EB8351EA2396AE35A6BA0B59619C35B4D329A8522B1EE90448
387DBB0912FED5852BA7AA362087601A47FF693A1CC34AC367036829996120FB
18D883F38EF4131EADDE2C756C2DF9F395FD83FAE697F3A69B0A0D171444B807
727C458C55F973274598E7624305A0F7EBBED6B1E29CDB9B8ED28CF387644D49
A2010C5158CE82BD52FE87C5035DFD9425EEF795DD0B09D4B1C7EA0C98434FAE
393859A98FC0B3EA3A0CAE001DFDA94760FF7862337BB4A2C3A8C8803E49B607
12658E7EDB16D9BEB4252D67C718C2A4595075C1818F6A1EE734956DBFDB57FE
6275D1873E08F3DE5886EACBFF2A132DE63FCE4B2955A9C7950E7043D7750667
94A2DA0D72B3D7E787DD83DBED95F86B97E1E9D80D9E991753E1723983D4DE05
CB5C6CE7C221A2038461896FF0EBC22B776FFC66AFB8F4EE72F16F4A83FD3B6F
7C02C8ED058B4AA23DB4E4F368D5CD221D0EA7E1022CA012CE9760152330C73A
4BCA1399C9CD243FA385624CD426256168309F04A2D2352DE559933C8B4E514D
B0410B1E140095EBEA1B13933221F95DE894A8F0FB390C4649872B940E5AB4EA
A493F99CE2D3DFF0982549271B429927D4775BEB5A12F660844638B9EC5214EB
8B4F3B900C34193E943A90C06ED8D9799646156E1491E5521FC8B9CD9158D756
8229D15D0FFA4E22B5A0CB4FC82C4BB848D07EDE0C11344EB69D0A6F329CF352
2C81BABB8C9BED90F772BF2077526A35E9F2844D17BBDC178AFFB0DEB4493D2B
EED930887D30C9C040B1498E7EAF30501BB2121A750312941839C81400086942
7242D783CF8D51DF73DDD9FE1950DABD3C95E57686BFE5C55E13AC8837A6492B
618815B78E78BA5F281755B0743FBB60F2952D9041F7F6EEDAD2563E236C584A
BD904D7018A00F6017ADF508BF63F64AC406DF45C6C9B90489846E9685287879
2D64A7BEA283E698CD7D8B2DF6A3B6681C63BCFC14135382469123169E3DAFF4
AFDBBBDF75C60D2808EBAD09A641D93EE38D274EBF132E2F1C61F31242729A9E
BE877B546996C6520013AB058EA55E58F59C374DC6AD4AA8B125F40114881ECF
0A7ABE0F5DFBB48002662AF720242D74012508F26D394925F71065BCB57954C4
CB5A9A42C6CF6EA0D80B6A99ACDA48E5ED3A2BA43BA9064D59C171AE87BB22E4
707510F8EF3AAB303ACA4121E9C92051578244155F5D47FDBC558AB5F9CB60A2
B2B7D3726D4D06CAA2CB08BE16E35F416B79718F7C53E34C5057880AB32CF159
42D3673538F51A2646DB93A34C60583DA3CCDBFF4F315D1FBEF4A12AAB726603
8BD7CF8F237D8E9B7D4AB72F83176580F0FE60F48D70FB98C3ED8305C7906E17
50DC71A816B0D510008080A1C3DEFB220D402F3CAFC75D5A1D09F5985687685D
0DEB29A821CB8D0CF788A0F4A87C061D56CE72CB67E59EAE0D87FE8400FACF1F
3E0B024C5FFE6777D6E374B40FC2ADE40888C5DC808B622836891157769C8BEA
7D15C98753C1756AD232C556098B581BBE5842E94DBE3F911FD8DCC3FDBC30EA
F5F569682BFD37A002015A3CA98EDB8D21E8DCCEEB631E12C5B4AE0BCF689146
9EA758F720407B837A1A2EDC4B490B3B7670FD4809B69FF65DA0CED5D7215A18
18A20093B619E51942C0292D48C76344A84198F453880A813C368B09C15D29F7
84CFA094E8674EEF4ABE3C40E65E60D66F58717ED1F730E956CCF855DEB471E0
A772CDC7174D8C4887E2FC486524C9DD9001F4782D4C9E406C46B171CE29CAE9
562DB5FA89B3D468E216BB509F4120B75672253A86C73164C0B29DDD2EE715C6
AB21674E82E6B49A5DCA8AEE53295494C0B4DAA184DBA107D65FCF751CF72DF4
710CA42F96220CB2FAFAA81AD2E91846D59CBAB89268B6CB078368109C9E8089
3A908DC4D0DAC6FA6AAB73CB8F02BA4A00DF71230BE65BBA5AF39B237C53D321
76E0B17A5F655AB0918BC6EA5573B0381BF73CEA99D4E06EAC2C8E77082880DD
E794EE877AE7A911A5ED5DA4BC69BDB43E36DC214AF28E55765856F9C6888942
D06B3634A820A6E376B90D763E1CBA4B610081BCBBE17E81F552B6047C988419
D2D84CE582ED340767DD50BD28E2DD1BE5802362E87EACB8F517FB3103E52595
BA002E0282E54CBA85C897D6AE51B8EE6A26F358B803419C1016875C2FC5BB91
23DA45BD60B4BFF2C7E594C5E9BE1BD08EFD522FD498000A60B8A3DF7F12B1FE
9D0800C9DA440F8F4DF29BE3054D332ECD422011A3968D9FCAC28875B34AB846
3292EDACB514713586695C0797C7900E8E6AC46A6B32C80210805D19400A7362
13F9916D014A560CDB431366DDCB35E206C199AD291CD4F0E033445E86EED300
3DF83B89F7C1D7F378B62DB43CA4BC3A8669F6E924D719F0D7B16FBF2402581F
6F84BE8AAA3CE7A906C63EFC4CEF05D20FE747739A0C92EF6EC74EBA6CB20D0A
C3FCCDE65075E3FFCEFE1D9D56A1660DAE90B755958197A33515567E98F07B2B
47B4EA06A0FC7E4FCE652FA38CDFCDB93D1C9185FBAC13AC58FA76B08A81656D
D25A7835DD6FE9B47AC1A10E33FC1E611BC3142D4A9B58F97102E7AACDDBCA91
E0C88FF6F0EBFAC5F9837A7EC7AE3F0134DA9274E57A04DA8A7CE4B86C16DAF3
4D8EC2BAF04A0C94FC850F41B05B63CE0F9832AE6CF22A86CAFB7DD0E30FDFE6
92310FD56056AB112633DC84FB7743B5F73E9DDB5069BCBDC41758B4122E88E5
48D22E15A2087B61FD6B5415B49A57FA350664D6021078EE1EBFBDBE5AEE9EF8
D5A8439351E9B9EF85ED875422A0A51F2333C9056CED49C1CA6111D592F4184F
ABB849A3676A8D175D44E7193EE8F2B50D7E73B29419F7312094C3C340E4F9B1
D89D5B41C8C0A3C14544F068343D3ECC39B6820E335081806D628FE867857D58
5ACE25A158AED63B8FE391030C55D26EA2ADDE6F26A46CBAD656899D01B503CD
DCEEC86BF6F5F9E64E2EEBE0E82A93C1D6CA5EEDA4FA3059151D7A063D8F787F
F1BD66A511B0F671D8E266E2B4177FF07E132C62C90BEC03F13845FC36CAEE6C
3D067D95F37BAB936A59CD4D305F731ECDEBA2A8C7B93F359219DBEA4A1BB376
7417A353BC475B59116D38BDEF3AD8BEDDD1929E077CCA4B6D69CFF950270D32
57720FF1EA46BFD8AE8172D2B9223D4668105644AB865122BB3360316F9612A2
9FE93C9E784860E5049057F46E18DA533BB2FCA2267FD97ACDC041F923737AFF
8ADBED344C0A20BDBF4582011DB242B488416118607D2CCD09AFE15B7C4C75C0
C00F4549D250A8D8D0B82FBBF7960F2CFAE1111C8E0CE9342B06AA7C8A26591C
258741F4C3A68CABE3508F62EE68DFDA4BDE678A10433A5DCE9E5DDB312011F1
9F94F8BD632589AF0FB8C8BABC8057FFBB73EB127855B8849431DA4E0D14DE73
7964EB1C709AC16C5F0E3DA61AE13BE61828CC3175A31BC100DD086CE280DC5E
0CF619E746402D25CB99FE1945FBDC9A1F4B52F1E1390FC739FCA36621F2819D
71BD224EA8B7075B95137A61DB977EC7BDC3F755DB6693581C5B4EC2F5D855A7
419322834327A3FF23A23FD48660178B7B0AD5CB98C94B6D69CFF950270DC1AB
3B2964A1A9472235FFC3C9DFB624A248F2B3FB6C70615176F41A8DB91E63250C
6883AB1D2D1A624F58B382C2FE2DECA6AE8458D3FA193CAF36832BB25487385C
E06EEC0A53E66A785118F26D5B64C90F206C9482B87517AC36F53EAFF0911FF1
FFDEC09238374D5BC908EF970D0E8D3721CE0C69502FD345C40D188F4E304C46
10FA7CCCF0512FDD24CB36B53437EF76316462C6B8077A367FA8D052D2E47A97
25EED7476F4AE151FA3B1FD7795D169C15DCF39B860BDF928782F91D980CC66E
AFB9E1E29EFBD9F0198C07B86D8CF8F8576A0FA938B0A6615694D1A83741D4F2
58C06B01B8EB90FB0BEF17F7C10D58787200C749BA0DFA1F59474A4CA38F0A18
6733A8523992CBBF6DFDED8BDE4E6DDFAAF27A8AAECFD1F72BFF12AB00F60F99
80CB3BC380F955B83DE6AB078CED5FB3D4EC94C08179DF1D96F5D2CD7C52D714
E42CF90800DF87BD77BFD898EF9C75EDB109164D3AB33413FB84F35B3C001608
9A6C4D67EA0050A1ED9C0FF6E45FE00933038F1BE45766247545BB7EBD0AC94D
DBD260753B64030759472D938C84A71C114A56219A5EE95AEA69D149FA897899
0319C453911C7F03FED1DFACC86FC63BF01D3A6A10A5FE389B1AF013EBCBFF2B
C00797C5D9896F2BFD0D101F03E134E14130A409334FEE079AD9681CA7F830EB
B4233C443F9C36A543B27050604C4E3E8B5854442C5FB9B7C287E2FA10D86AB5
C6B614D2F5FBB02F3B296B007B5830F70507FC28949CEA51360BA8E687DCEFF0
26052802E70BCB2C63BC975934FC508353AB024B3868C0DD77370B3A4C7B16C5
FFC37C0968E4FC4BE55ECC5BA2A7A3C5BB32EEF0CABB86087F2DE1837BFAC59A
DCDFB637B2AE97252B52101B6F33F63E54ED49617809FB8B2F24322AB310F16A
60F884A5889A50C9F977D12A5C7BE23CB6EDE16C25E0D9EB07239AC4A5ABD1D9
75CF9367CB92EF11DDFCDB04B641A6EE6B169F72FCCEAC871356DAF0CB205917
DFD1A8F1216EB432F3AA0F8956B8E334E69C67DDD1E8A652FB8DA2064F166549
1344E414D0D88A66D6B4F56BEB9360478E29A020EFC155A5FC36A7C291A47A69
E9C57AB73343F5FD68185CAF9381F5E959095F3F1EB907D1413F647D905576F6
284CD1D2B4A1367A5A069751D45FB473FD3CF2999563B2E1188F7FDBE2A9AD81
F7002A27F2EDE3459E49C2763C753C65D91E8B28382FDCEEAA89A3E0A6CD429A
2A569308FB018964439FA7B3877858BBA8A26697C5929DFF1F9D66997E964CA3
FC7ECAE9218A915BDDDB73DCD865976920BD253E4F8EBA8FA68830E6BD9979FD
51C8355EB9D8EFEE1980413950EE4337ADCCE3606B1AB98B58BDA3031FBCD1C1
8A271D67A94B587DB3D7BA51638B64DC57F5DDB6B2CE6E15F0C7670274541DB2
12A8520DB33A05C8F9A7A1BFA435C1D12E3E64C256F10D66BC78DB5A8702AB4F
4962A697CA30668A1809DD72B71A4BBF6C6181016243002C75ABD706FF6272EC
8B127F512CD94B4A671C2DF4F7CFEB087725D960A54F2535EED864F1B747BDC8
55D90C8CCAC8BFACFCF0E923F2EF64841BC9B7B3193238E2040E429B59000BA0
12AEB09790C43C27E568E37DDC754E1BEE6C8EE443D62AE6A2C9A48EFCB71AD0
B7AB827E0814F1D21FEE501DD6EEC702869029C91DED60E30F4334B48EA57898
2D5FEB53407BC29192867A15843C7ED3C22DD5AADEA97C9E362CAA752F7B3EC5
07CE68813545AED50CDFCF7246DBA338D269EDA4D6177AD8662C88F79E638606
2BE839C1F9D30AFFDE82CADE349141E110A5E013BD7D621A9025FAA444DBC3E4
C66B453792851257891A08FAD24873CC2C75DA3473DAB283233018246F25BAC5
50C282E77B265156DF6B789ECECE1886FC26FE41E99CDDEA8DA5B4E516AC3993
5DA37F4B3EEC014ED296FC220C6416877F7F1995EA262713DA7EC6ABDBA82FFD
EF81158A47BD89E38372CE2D82290BD895D063B427C6E44CEC46B305D67E5C25
3CDB908754242EC58D7066E98BA573A3EEA5967F58691C47B09CEBE352FF45C4
FC0007733572C4C243D9DF0E9D06A41B396DEBE9FF4BDFC533F5B87A0D016B3A
67CAC1CE1953C9CF73316898C9E1BBF8F8D5CC79DEC61D19B001A6B70EDF5439
B6F824BE1B12A00F107E3B101755E70B6DBE472F83389D74C3B83B7437FB44CE
935E1A803B54C7D2A3108D8678E9172B317EEF73133F01DC61CA964248444FCA
4DDEA8FDA9B882F96DCBEF94CACC55D02E17F44D2828175BF383AD06F224BB9C
8438B782B44C5F579F25F6F6C8B0D9FB1B359EB83E522342753373FB0A910EA9
8EFC31A04041B8A3E4A901284F589BCAE3FE6B038CD50943CDD5B32ADA56F50A
1E47F15513CDAB1AC0530A838346B7C97C616E393DAF3553A532812F98A0370B
34755A331814556FF227356698EAEB075F204108150FA44AC6C6DDD2C12840E7
4F65461B5F14AF7105AF3ECE6505EE8972574CD5EF7C12AE10ABB066C75C87D7
E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE2DA516D1F676074355F7FF6C55
7B3686D801E54EC5ECEEDC694C5800835F4FEF95F93FBB61F865EFA251BBF7C8
61076AAF566752654E81648CE01CAE6B824B07416075EAA6C7BADA707A611639
986453619B0F4A87D8D42B524206EA49C7DA55875A3CCD94F522EDFCAE0CBDD9
C92B3FCC16D2DD6A791071EBC06CC24C5BAAFCBDF5B3F16F1AF3554A064C5377
94568090C18DEFB980018F369F4601C6AC1D8133976243C9B988979F9839B619
51C2024660DF463BE72AF1223D0690DDB88C7DA9D59148324E7CA7D180BEB86E
63DED098A028B1DAF4450F5762B8ACF125079B99F92E8FF119E470A70DF3EA7E
4118FE0FCAEC5DA995BB4C89ECDA3A07157E9BEA93937C58C1343F948AB40A03
D6A06ED9890104DA2A575EA45E16DA2E1FDEB8175D20E161F93055C3432CB412
BA299FB6769E965D8B37DDDA9649EF7521D2F58EE489629CD8492171048BA8D4
4C652E1387BD302832DA3B044A853EB94D553D519B073E1F7947C49168E23A66
FDA1F9EDE6A6FCC1F869DC38B857E80BB677C002F5B67650D9D434956C7787AA
21701E4CC7DB3E226045C8A3E76D78E5E03162404310B9780E02532671082D80
5DB8A97697501B6A40A3AE9C9B66B421FECAA3DAC323CBE5BD4DE523A4AF7710
5F33EC83DDD7FDA3EF3BE4F13A201C7AC1D3A78A904AD23D3FFBF1AF4C1CA1D3
8BD8893C8ACBB63199AC662E767D37B337644F7FE2982572E4CDF1C6E5BA5CBB
AAF733DF941BF1D2A5696DC6C00AA4C418F45F2D92CFEA647A6508A8ED9E953A
EEE0F45A6CEC462468AD09E6EBBCD1EB55B342DA091F66B1D1B68F821ADAFF3C
67BB789B693FDCF8F40AEE8A6AF130A1DF211A3795A9B5FB934E47F6C48155A4
3B1D34FAEAF8703942158003E586C24BEFDB1660A6D88DF739B2C1A064DCCBAB
9C238F3064F04C6C0364BB57F3AB6D68B6F7CC89EAAF585B97EE0A1885CA97B6
B40966852481BCFBB63EAE33B6E7DC3B63E29661537A84C8715292BF062FF54A
1B7E31792F05368499B19687E503168FA56827DD7392D7A101E273541B8FFD8A
9F88AF43B3DCD228464CC0864DFAAE0AE7F9B73802015614C10B62F4551B450F
C9D4F3131E5B9BF09E2EB27D88CE83FC0412B85B1B6F95770B364CF19DEA920A
1DED65833D96C7B8A8AE43F782C9C7F3EAAB68393918581E5D402BDE4BE1AE92
245AC31B810E4C95B7506440F3B34C329E6C4B97C220C0086EE913D280C698BC
DBB8CED18AA5245C8C33E7FE4B7CB450A9C45FCC1397C6B0A86284D5B101EBBF
CDEDCE5B0FE5ECF23DB04FE974772A2224FC3BCA74016AA826B223E36E496B79
B2C7384BD18B3817C4BB2EA020DA94B1438B4AEB72DD3680CDFCE4008A7DC06B
F94AEC2B9949EDF0284D9893D32EC0B93813D97A5A5BE708510D09E7695F8C92
EB33721D53C52DF324EF407263432C34F7DD82AFF20B663BD1DEAF99C30C90A4
7B5B12A091FD066DF4978645F82233AEAC0DC2F442B65E74DC80A17C0C7FF56D
7B5A72DEB3CA7C79FE712565191653C4BEA566022691FC85E6C190F0F226AFCD
499782C9691ED55AE3730A9758C82596E4AAB39CF997250E05359282465E9C86
64DCC44EC05B69BD9970A06A7B62B95EF08A1D5C51B220F61F2CEDDBC6374D0D
9DF9002C6FE135867654F5F2E1854C3D68C7D15B3939415E3709B1E0FC192AE7
219BFE341207F12B03968966A34F5891EA305E979FA02AF30D02B23DC346091B
2CF9EF259737F27A03F65421B6DE423A1EF22B2D0A83C48263F887FD33B2AF7E
5B71B194517E84068E49784990D3377486A6E2D5E783E48194F69776D65F0A6D
9E5008CE20F86C92A24A266596D7001E8178F6F9EF1267648F194BAFBFC16EC3
01883998C73DE8EB95BF0B7AC6C7E345BC7DCBE7E243F48C58C8AD6242405EA4
CF1ED17AAB6F4952BA2A67688CDCFBCB5646D7D7DD5E27B85C89C6250060AB64
38AB14E879BE57D448DACBCA2C41A7FA74D0933D7EA6D9D2A4935A3B3F8623F9
E8E7BC62BCAFD6C19F1C40CBBC7C9B47B678C32ADAB9DC3DAAAD40EC7EFA668B
F2F2802281D2EB5B8E3B7C8A2B9416ACD24EC582B3936CB212352E7C849C51E3
9F8B92642BD3701D39FFA8AA2B2D24FB4F51081B57847EB7A9EC4A83BD769214
BBA65D7EC2997908F507FC3E1D2472A4A9443B825561E1F36B1FC2C95EA1AFFE
FBA6D21D4BC696D5BF0AD34DC6C4188743B4BF9F4671055F5ABA275BDA947D9D
95E30796E4AD38361E175BE0C8FCD766329DD911996304711BA4291D5494F260
5E36CF3665DD20FE0D9A9B66BFE5F7AAA89F04539DDA76B32FF721E6654212B8
E9C17FA72DB31053AC409AC16E32022CC1AE6BEA126495BB6E5FA3E14C18A478
EA38A3ED515CDFD925DE807626AB30776A1224F072F5A8DF2683D083C23A840D
F73423607DA0AC05E16F988759E4C0A2689D828A9F13EC640BCA91BF7A13A3A5
BE34DD622B0297F551CAF04611C5FD07E43CE88DC1FA8DDBF09A48C05CCCF5C5
FB40EAB7C8613633CA1325498A1FA78680C3D6AA26709BD34BE6603BA245B3A7
DCAB2F4D37F9FC23308B1C8AC1C489DBB6EF4CB7B233AE768C60B8480B4B4A3F
479276F7B174B44D872F3CE3819D288B9F8505A1FB1E2ECDDACA140C383A51D2
F44A28A6767DE8D2C5C94C29B9B37C268ED97523D71C807C167AAECFA702CBE9
31C521E6C1918B7BCF00FE0C4494BF14B578F34438CFD30197F23009500CAB5C
74BB375632C6148404D2909795C6059F3AA22CFDDC29409ADE33D6640B858627
4509294DFC9F1A12A9E6EE68B394659A11BFC0ED3E34B6760279F35D094C4593
52F8149CF383C8EAD56006D7D6A89FA851E3659125CA743EE91CD90530C18FF8
9319673A581E160373E235A83730ED7D06E783B7ECDD72294FE19771432E7A71
8EC52B0EC02399963DD1E05AC39FB6797FEA03A323FC30EBA6C1D47779DA4960
806FBD42A94588157DD9B107BDE8196A2B8CDFEECFE14804F49ED9648A07FA1B
6EE67BC618A7F6212E9CD5D1200A4EFEB63F68305BA9534511D08883DE338F5F
38DCBD6C593FD655B49EF8153B33277467AEFF8C32D580123B771CD5A05967AE
76B3FD0D8984E93524E717577CBF61F18B2D7C9E2AE7DCC341765239D06C60C6
CE915529D62769FC6CE72084DA427D68D5A760F19BE7A0B91603B9C53A342870
AF5D0B04D7DB9800C2D753C5288FBF1AEBEEB4A372BE1186CD6D1F8B00E8A118
9A0B3940466DE2C8368D2C247F63CCCA5459C599CB438331481EBB521D5898EB
1565568AC87585377C91D66B6F7E1C1548436AAE620A84410C90989C69C60AB0
7FC55B7716574D27FCFA7548A6F455187F54782429A21E2A52099C6E75778A36
9CE5383D55A8A0ECD544CBE2D7C6FCEFDC68EFE940AEB8A1FEFDAEFED78AA144
7450B29FBCF8829DC531A75AD584B53041812B2E85FBD31882088AE5C53EA73C
AB4C5551DEB0B3E1E1FDB802343D5A46B379A8C4CA9AD8DD791D6F6B252A7E8E
67D294CA9BC582B167AC073DCB42A98B8224FE83089330C4E89E37A582B736A8
B6B829ABA662A53D6423158B4ABB0518B1E9B401D8C9E8E7378AB7905C79750C
F177EC541FEB9F1AE502DC1DA3C4AFD268D300DC90918A1472D083BC01674365
7187B150DA08C8F2017AA51E114DBF390F64979D77A4C7C9F204A5B242630B51
5554702965E146ACDA25AD6858A06CAFA8C62D3DD7AF6ABF63C7B805447A1573
3195C5F9E6BD097D283F18185A02E6C353D3E76D2929F6170DA978048E8B4ED8
92814DE362732F6794B196E4D701BCE311D1ED17EBC5DADC16B12B130D515639
FD2A3CA84CC99B99E30E4EBE59076AF82B18E24F69D2BEB74B1626143EFB4AFD
4CD40D360C7AEB3B155EDADCC65E595380A86E8D212F52D5CC26766E159B68A2
EA263C66FEF12C83697425E75CD60121332C7D60C610296C117E01C633439C60
C3F0039D72A20D523E6D4936289721C283D435043017B5BCC1A5CBDC0170A6CD
36C4C00BE344F3D5A4DAF0705C1CDF6D7B90BE72DD46211252A50868612CB44B
64259AC2DFD95506EF2B01817B72EB20955D5880BB8A00EACB833876C987921F
5DD4C5B6C9F3BA3019B574CA77B7E9EECCB50EE02F7234AE0B78A33D8D10093B
566C80864FBAE4AB83E84FEC08F4EBA49F90828C2AAA8D65134C4EDC7B04E8E3
F9E6D6626CC108573E1A50311F4FF876ACF7D18B6063159C32943F0F6E73D8A0
F7EF263E1949E1BA2ABDA32D12B10ED201A9F192758B996B3B8750FCAC9ADE0E
210D0CBA59B887199F7C2BE1B41A88C9D6CC406E55AE169BEC3C7C9EAEB3D473
48B9D787D60C13A3DD3737B4B2CE1E2091DC0BD93A6F92107B50935397F39A41
4C13AA63186984DF9B3AE9BC353EA24A85EE81DAE8A47FACE4458BF4B15A3F4C
2590D5C4856D8A4A557003838B9718140793DA29C27E838B59878AF2E70EFB9E
C49BD7E4E8CA777E270D8982E4E19A4060774D6DBB3F7DE4DFADD7B3E8DC224A
2414A1D66DA1F8ECEAD2F4B02ED8EC349E15D73613F414A5F49F651627518A66
CB65288944A535129641EF21B5665E170E394C19242E26CA4E3A33FA7959521E
90743DB5D54762A26F2E1AFC3A777227A159834F5D079722760FD958CC608D88
2FD32811E34E51136F4C910FAF8AFC47D12472BED4B7BEA8E02F57F4F75CBC90
B73B35B294AC37626E404C7A9C8134C74ABD4073FE8044355CF07EEF4FB9215F
10BC3ACD727DE0FAF943D74FD9D932579EF7430063A09EB3FF5D97C24717BA12
809E9C4391CD56879C4BDC972D45F10072016879C1CA4E377D77797A32DB1867
6BA8295CB8198A90A2987F93E9FFC2486AF5F1468BBBB7E452CE73EF3E533BA5
98CA6F74E32444B72647072BE4EB70A72847F1997B01CF616FB6239443BC4131
BB066A40D26EC3E0CADCCCE30E56511E3CBBC7967B4413491DE985BEF1B435C6
D78BD9D9176FB3A48C6DE7364580DED5806D6DD5471E878BF3EDA53D06B66970
C67C333A39F63A6F2D978D8CA5F1856F9DD55DF7C19B9408353E43C5D1F96A5A
DDE4814415961E272D00506E8E854767B174387E1B345A81262EEF817D9568A3
574A9C02A9899C10D485B7F1576EC0424959495EA1AF4BFA64D81733C28A1F8A
E6A5D3BDA6DB926B032A0146A7F0B0385C7B36563603F0D1F3C16DDEFF0AB02D
494BB042B9E009AC103495D424D92E13BB164559F07289CCBBFA087FF39C3229
EF69CBC9DE2A35E733E5147F5694A472C520589B357F662315D3441C74D522C7
E12F6CED6C4EA037F4A4453F7152729B509F7B8ED0F3447145128EBAF2B73398
289AC1C2A61D14532B91AA7F9267FFEE494E81AD68686E751A2B7B82D14C64A1
D1B1938E94247B076E37EC2080ADAA77BE815ACFEA394364361C4A1F5ED9437A
BE162361F6C3AFE767DDA33AAAF0261B77BA23063F6D3CAF2A1A5E4C73CE51D5
30479ACE7652E7F5198B1FAC83EBA1B8A8A851A1487DB356821184DEDCD1C80F
DD4C50C046FF209D4729BC929ED7B16B11E3B0879428B3BE8DA074B6C28AE3A2
0C511D00E8ABEFEAC16419A6BC5B2E1CD52A4EBBCA7655AE1D3A6C05B05DD4A1
5D1CA4A77A2DF982ACA63FBBF29CD847F526BA7226F861B2CA48BBEB19166D57
9BC2286189E36A43B45AAF83C1492EE30AF332E5D8053B8FA606AE406AAEB026
6F0A5930F9313C2B531A846F1F76018255110F2F04183451EFCAE6D14B0C232C
CA8C27E32FC0C1E0FBE4968994075E0E02BF71C4CFEB93B33C812CCFE795F92B
4F8D4AD79246C710E2E909AD646D4CE0259EEB4155C93D7551ABF10D022FAA71
0F7AF005773F9CE561C98BBB3F2CF4BD210E7F5B5010B0ABDE0D3AABE5B5D306
3F3E84D2C923287CBD7B0AB7AE055891BA976FCE898E6BD5A1872141DE6FF484
5014B6379A7F72F1879084AC02105D22D820DD846E4D23028826312F07F715DB
714021554F2930E596BD6CB249A05F229CDC2C7B3F4693D6ED683701D71675F9
67140641FC067FCCB751E88E5AA36C95831495C83A530FB8F7A83F92B1ACDD05
DCFD6C2A45B62CB126CBE8C58D68FF5FA1564CC09F35CDD3B8422C416F6BF2D9
346B7DE05E8006AD0A9E37FB2E6200A83AE4DA29A36D2170C4957AA301C9BEA6
E43C3CB30B4E030DBEDB807B6BC09E11E545FE0BC756E18800ED21826F25FEA9
8608D0ED5FE94C060160136BEE30A0B65BB9A0C495EA195FBA53766189335DEC
EA4B16D6EE1A073A5FA8D2E421E2A0CCEB2AFA2FDD93834089E0C8B29F8179AF
EFB26D2D873A35A0CBCCC9B5E694DEF6267BE7B8889748793F08FA759FD972AD
7DBFD4CDE5E793211C8C46218C6FAEDEF99E909D0F42DB0F3B3019174AE4091F
49C5D42D92DB8C7FFCB7859E62B990AA5CB89546831C815FED59021F98F31AA0
064D966E655975928E97D0DA485DB5373F710ED61C692B4821F5AC69490E1480
D75B36CEF1F2393E682B7FCBDF1DBB43878E3EF5279D4587658F3B1535203FEE
C0884A148C1178BE7D5887CD789563B179AEB4EF54AEDA1D6085BB479A2A0D96
2F4D9F7CD8103227B9E919F613443739F2A3ECD008C0F683B43B65F96362BEA6
86A9D50215BC3B514D5EE3EC2956718F9B84630AE2B2006D469061B1430C204D
4E796FB84E529EE5862600E511399D22775B59198C7ECDB30EA0070A0B415421
9956C714A4CF3347AD3EABFF87F9A86E13592D86AE6EE5D09FD03AAB1D2562BB
7BCEA25C58ECA1FBAE5B5B95EFF4AD07A6BA23FD4ED3DF638E700B7B3BA12BDB
7A61843E130272C54D7CA03D8E00CB4FACDE6CC0D702E11E0E7E179F4A148C06
966DAD1D7B0CDFD79717971EAD2CF62AF7E4AAC761321D22F7EAC4FF68619337
185BDEC00EBA0C7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88EC619259B2B2
A59B9EB54A68FDED44DBF1F9FBB4189FE11B354E5AA0DA73239169EC9B543CF1
15FA9E642F22B4613E9B6AF85729BA3DC1B1C609E6A4FA8BC34CBB20286E58C9
8ECAC86205F64DC037C6D4CED740F3BD7CDCD6903E596C5F6BD34E576BCA65BE
64BEC25029FE47620469CA081690994CAD3673DA0FADD3E903697DD8B8AF1806
71B6EFF4B42E0BDE13017CEF646F2EFDC3A90FB379169C53622F9B30FE5BDB5A
D82B7C45157618DBBE4FF189046B9BCA790442E07D1223FD1DAB4064CE264F1F
D79F3171D4D3FD3BB302D0DC98CE82CDE9E991EC630D904F24F0E87CB3C125AE
6CC4F10CFA0D74DE9A17A3153617F07CACE92977B68FB5A1C99AF06BBCBCAB08
32EF073E3505C3EBA20AC324DEB56540B8117B02DF67D83692F9E18EB147E509
F03987808EBFF89A0C6F275267A4AF0EF7887622417EAFA60DAA0A2FBB99BDFE
FC345271A213E5B716A3953DC05F1C5D103ABBA0D86942774F48FCDD84E9AD59
1495A79D012A2A1625F65254335B7B03928A5E014F3A686D4B7743A63B688665
54C526D89B6B4629D0B1B9EF2AF6878063E9934FB7D16B89C38319771D99D495
69FAB6AE060D58793550BFE4828BC3DE9441F29EFF37C719E810E2D921CEE1BE
0ADF855EF2FE00D69FB08F5507303A7E61A028F26FDA872B719C0C3CD91F4667
913C47F92BE84954EDBF2FB6442A5A981DB37BBD0F90EABB7167FA243BFB37AE
424572A24EFC245742B43990F0A25D913D1BEFA7D862AA175758D7B3F0374985
43BCFC8951C644A10ABB7CBC3A579E69FD9DBBE5372C3A2D3C5A5DB7FE5DF620
93536D23CC40878C8AF5904929546923B375812271DBFCDA739AF1443E23E01E
0BCEF41FC00BCEE84790F27784A63066E0E43F3C7B4C757159C894E6E1CE3374
7A2C72E6720108F2307825E0CE2291F366BDF7931F460159B9870B5779E99F8C
718A2E8628BCB7017F64E3054D5DFBA6E0B265183544D1371DA1921BA7104CEA
21E820C1F8D787F99305E3317BD752928AEEA1E61BC9AE1093546EED14DFE8D5
9FE13349819CCC9366AFE79A48A3BCA95DB66E5D14FE0C675FF5608562153DD6
A09E462ADBE677E6F550F93922EAD081CC2D95E0C27CCAA30E0D36AFB23A2559
68331BA6BCB163CC540BF20B3C17995454549DDE7F9641CAEB513CF03C301E5D
A56E30BED180286F8D018B1D18B76E83F3B478C3BD3BA0F43ADEEFD1559C412B
C098AFDF260B05CD3921A85A8ADA320D8296BF94BCC83C5BB630C7A12F545533
834F37563256509346128EBAAF7D11ABA3DC2932E9D0E7CBE27576C729960E1E
1AFC71B6D6E3DF19EAB1AE084CA256F287E83C08AD158AE3AC0636BFC3614812
566AA4758CCAA5E9B58FCC6940967105F6513C05B0ABF1278BC191633B2A482B
36B46DC0EA2FBDB94ACE2D1257A05A222545FD632AE371E3E06E10B756679738
C4D6F32403DAB16FC041777BCB0D58D6A884977C4418CDD8B9940B2CA53CD74D
11FC1BD20007E8EBA47CE3E4737D747D586C2BAAF6899760C30B2D3A514C03BB
BDF82A2AEE088955D3C26BDF7A0FF87FD41C5E24138DBC22634AD87F7C2984E5
AA6268E7031B33855800A9F3E08636DD2B89DF2C4692CA3932089ABC9AFBC1A9
FA15B637B96D855AC580BF4679921924C24DA54D746922B120F91FDD1A0A5274
189F478094C06491A44B062953EDD79A71710CE28F55B1FEB7BB7C4564FB54FC
6CFB44FBC4C98D87463DAD7BE1CC74D7273A4B3DBD378FD5094E35BBC615EF44
DE68BC884BFF22980B05C463CA850A74BF380100B8EE07AD7837225C0D950E97
766ED86D14734DECC08AFB6491D092F1FB4507C0BCBB47A23E219BDE9AFA9F3C
6661FA543BD19074089E492AB6571E36DF5885F657994FFAB3C349CFAD8F885A
3D4CA30C74613E0205AF23AA2669456451A5BBDA03503FB5D56F4887A44DA8BE
686E79141C2527580AE05A6B7BA65FB568F6F67974E1AD5E7F676021EE6901D6
D43D0A773E9E7795927F415FC6F42A43747520060918945CD8E583D282F267FB
DE17AD10BE6CFBF7F6EE09FFD84314D9394A328CBAE1D9711F4E4088D6466B65
753C25713CF4D68E1611F666C09ADF8063C7B805C438ADBE8AE3408EBB6C2587
6B0AFAA296FFA024D08E50C57BC8A2FD60F301026A33BB941BE4AF19309BDD9E
5EA112D4AD610C54D8A1F06A555E927E6FAC0F3CE2CD097431094F7F33B18BB7
ACF6D33ECD6E4A909FA7795EE80947155E5975B235F4C4428A01C81B79C6EBA9
0AE3391FA6E189EAC627EDADB51EC95DF8E053F2DBB854C4BF36A7C39050A629
0210B9848E6FB91C717D8AB32E1E2331CA26EC3890FD9BB43A2B422BF14D2998
112AA0247A636228403F5AB683B59BB8DFECA8B227EB204E011B7AA75B406383
6D4277013A781A6601F0FC0145C81D00FA1CF041C6B96E78D8CDF9DB098BC76C
A1F5E0ED95905F74956D7C9B33DF636E35011FF6D197C9B8F6D95393AE37BEB1
482EAB2DA62F58BD5439A4B1FD5BFA32A7199377156ED1F6BEB0F1717C69768F
FAB6E3507DBE91D72A9D860EB899023D6FE9D116009BCDCCF7E56FEDB5F21653
7F9F013780C9BCB6AE6E0565B7B3FEA6E9465977F6537521F58D26AFECE2160E
9B4813B0A01DF8F876EDCC4F384055FD37C575726688685A039EA9BA857C2657
8C8D3650A6ED32411F26B48FF2632AE823FE2041BE9D41C1A8BFF9694F58BE4A
C6E8464321691BD4CFA07AEC8411DCAA34E16DD4479981C8827AE102242C3ECF
6AFC3961C148A754BC803A37CBA7154FA0C8C697A989D2D5CF7F1041430EB405
80707D4CD537ACB3B80FBB5B239001EA631F6E521DBCC7DC26B92E55DD5D5897
F1BEA0D10E6073DBE912439658766846A1A3E67D4D0782BCC711093EC2C46867
9FFF79AA50F65C2260921CEAB66504856ABF20BC7B31AA3028F185711DE0774E
DFF9B099E238C7690972E44F4FF4D552B894A276E9E928A02E13A44EB3B20CF4
AFE5BDA993616660D1BC6A8E77C180BB5757F1846D525713A4FAE45EAF59536D
F5A7E855ABFA3AD1758ADF9B5AAE73A04E1194CDEBD673BD2C25E9064469E72C
C423B7A166A0435C6B8CEF3FC33121CAB7A1FA7ED238378F7CBBFA3387FE25CF
EF435292714A8F491E29CABE1D42D04C4D41FEFB65AF81C51D429FD0A49893F9
90088A7AB1727F4289C6C81A10D6A22B44D2A33B103968F3C870FB3C1EA80618
FF7173462AE464C90F04F3A2D64395435A651F3D8AD6993899E980B370E41F74
EBB4A7535E40A3690F35E350D797A7A2639F6D34A59C86F056189965B757D3E5
B2BF51908ACA646C90631C60277A643827897936BEA92A3BDCAEA65BE2E3F212
871B43E18E060801AA9C11E42C6E3518818DCFD61381556EABC2179463C9281C
B0DD4C39490F5E388250E59410EEEBF42BA0BED37B6F72FC995A2BBF8251E535
C79F8A2DF891E2EC776F512BC97874F6459EFCC1760E9C6C78E60CC0152340DE
BACEAD0791BED4C33668C231EF6474FC9FEE1873B7E651220C4DE79A0A2B4F0D
2CA3E0E48E9B88F5DAB2456CD7F7C09A31DBC46995697E14D84F329150AD12FB
DBD8B3E86F755FA0755CAD5668A526AA5C977168ED96C005A41B02B1F5998C25
F760169CBDAE547B3F0031BCD6269FCB4EECF3171B30132CB709ED9E7432C69A
FC3E1E4DF8435E641B8321C0AFFB67880B0315E1A208754279EEBD588E338CB6
3AD8B46380CFE83B19BDE7681066ED7805503104C455720502B1BEC6D1BF5301
911D85E8FD15388B6363B4BA0910C41E911F300B9C20DE355F12830055AB168C
9D83B082EEED8AB079C2E61F9E9537CE44D5D84E9A18DAF2A99D8EE950A877FC
5EAA06ED95D2308DB214A96AFB2D45F2222580F007723EB62086670E2B4A131D
44C66E230372443F065A0DB5EE85B26E7A8AB167738B5EF3112EAC0687E8E5A5
DEFB272CB8415E4E385507F3D633D7CAFB950DF5FD1CFDF348B8A1F08379922A
6371E434CBFCBA7D5AE1F0F68F9EB4455D1E7B40EA5676F18D753FAAFBF6CC8A
06C726F257E9972CEB41F0D25097B004EEBC53684706E5AA02982C49EA0FE82B
5C3D0E0DA920566A104408EAC417BDB461014FA86C383A1C9ACA5B88DDE1474D
DB7E7634A2C093C92BAC49BFBA00A10D5200B6756F2281E0400F776034AA7370
C867BDF8F8CC92D3ED31C914BE552C85978977212EF17AE578C0B40177212877
24BBB8E65FE1141502C1218C55773CA3C6D716391E3BD0A30AB1C5284E3DE7DE
E7DE33F29036F694AB72808188ABD3FEEC8C72177C844E446AC41960C25ED60F
2192CF4247E5A5DAE5BD5E1A611E91DF81C29C93A270E9EA26FE981894796227
289D0C5E6E98298CF0DE7CBFE4ECAF80B41E2C5B6DD216ADF175923EBDD24CCF
A7D91DAE86E745E06DBAAB8396B477B09968D0F31A2535BAF0751997AA548B74
B2812D6097439B06B45104E76E3846515C25C53DBF61FB3614B788F2C6D3AD5C
7BE95535B486F8C805A2EE1D38F2EA58597AFC4FD910C8D37E7BDCC2C074C2F3
22737FBDE1BE1EC9FA52B2759825CC4836DD015B037C08031775B8A307142A34
47E533C2B5FCA428E4FC55D4FE71464FB62A87BFBCD2984564AF660830F40F5E
27E6D5BE96DA47CE4FBDF29579E645DCE876E505CC8348893EE05FFD60CB40C6
904FB5CA07E79A7EC498DBBAF87C99EE4E68698221CC9228CC146E59F53FFA37
CC7C64021C2040449FB345263E93FBFD131A16FEE7E21A8647078BE8742535C3
F77D130B53C252F0830CB7485969DA1BEBEAD5EE991D8E4CEF600EB513433966
C6F83F4218C5E1EA580DD2D4E059E1E15393989770235EFB63F7BE6E929B2825
E7C7C99845E58D8E510FEC2F86A86D6AED2DC26C28A403BBCA3435C3FB7971E9
A5622C8F65DF291829A64F790E760888FE23E05C921096AC0734BDBAC2EE9435
66F917B7E3C6B26FF7C075A884DEC1E77967CCAEF050EC35C66EDBCD4842C053
D712A35500059B6BB1E68B9516C4C99F5D77F12BEE7958985344428AE81ADBD1
011D40D1B90F5E71FF04CAEE097A8CA43D13BAB9E29065B05E8294610D0DD1E4
6B61D8254D16D587E88F1B54433526B5BCF13D2DF58177D50C626217A45A4B81
CCC0CD9E3AC423F5F3DBCBF573DD2CC1F2EA34872BC9472321573421043C3C73
C140E7CFF5C3E5997E46EC3D2EFBB9DA9FCB6EF772C93F0540835580087C6032
77C569E879F2ACEE148D55098B00AD714B169DA93627B383F17D54255AC3CE51
E835850E61D153F982B67F7B7060C3F2BDCA1B33F0B065EBCC73ECAD34837433
7C26FDC543BB7282F88065068709AD225A7D9285203BC9B3A37C9362E51812D9
AC866B4D60B9369223465FDFFA2B6BDA63A508B727F26A5A3389398C9F0F407E
44E489A9F03AFF3708BD587CA1765447330D2193B271102538D844986CBFF90C
A4299B7828D2FA6DCEF8314E2322C457EC62448242A13927989ADB385BDB0522
06F0419C55E36B4FC5F00B2758325197F08B2ED6DA001325C055F43826DDA9B3
20B214AE2C614DAEDE55E9784070CF30194792F9007AD783832AFC10BA8466A4
5F550E3AD3181614CCC41D40D27BF18EEB67E0DF4748B39BBE76D32933BFB318
5C3972FFB5EE9776D8D365CDD8FF305059C2E913B7978671AC30C91784F0D273
8F80764D94FE8A74D64F37689564A970F23C8C46A7AB7EDD9D3CB51ED9095851
B33728C2F8CCCCFFDED2D2E10C47C92421E4A5A6F734375171C527E0FD2C6C4C
0C4C2FEFDBFA01D78991AC73813C1C9F0ED2642C3AC42E6678C5048808436A69
75645A8D0668BD4020306954A21CEC0427D5FA06B29FA2C848F0B952CB0907E8
B9BA2CF52CA13EF59A7439606F211FF60947769D5A9AC68D87D88E7613FDC8E6
7712DCEBA5E13A747EAD82AD77382DFF490FAA65D99FB6EC4502F736F76AEB76
9587E1A7D4AACEBB06FFAF53FA706E892738E97B39A6662D92C7A565D5439284
142A9B8B7448AD21A527605C971BD9590AF11C2CF992F9556FCF0951D2B0BD19
5F64242395E6C807B7D00E12CC9CA7119D70638A60E8F22C5EAE00C1CA5EA4D6
8FE78EDD9771C3D2A575D2A7290794B7E2A28E6F94385D859D6A64A659DCC375
B496376425D808E62F4B4E17A8F200C6FB9B956E8BCAF202D30C052ABC486E71
7CE9A1DE3F4051981FE1313ACA0F29371954548294DE90C4CC28345A4B389E19
34B98FFF72243AFF882E061CA00527AE93C8B2F20DC6A480CD99FA259F81813F
0B8FCD2ECD436CACEB8CAC3B04F079E4557AEA1F9C18CF250FC5195BF96269BD
3EBCAA2B6F925AC601D2358D2F60E741D6C3A845DFC17BD9B7A268F55CD54235
25A001FB54EDD955AA4EE196EB37B5B9678729BE3572DAE3DC844BD3047B4C4E
779264257FFA0AFA05C2842C534A411593D10A747F8B5DCC127C76FF82E579A0
6D8A3A323458808BAD08E7749DDB47B9A9DD0AF18A2C289F15E28B94F04C534E
299F7F0A6F9F5187C73015A764980CF342925530E16987C44E9CB2F7F53091B0
96BC4FE49824135FB512619D1B9B2B5654306BC193F6DFC1B0E494649AF8F9C7
4E36A9420418AA68FBE3D77450DCBAAD45DD2182BF36E33D367D842C40919DC3
1B11C261F3D3C95AE95C6298B877A5CDB49DABAE2B66216EF3C2942C354B7206
8EB903C624C162B3E69EE524B7B38C35F1CC9FDFAA1331B0FF94968EF45A7006
C990BCB17E13CCBC9CC1FD6A60BEB7CAB8D8DF67BB88B253CB32266120A59BDB
C957661336DB9B1578A9F22E51E3EA5C36877FD6EC99679D8EBF1527DA68FDE1
B68209C6D368CF55C05722A9CEEEE4C6D4375C1469BE1B6F645FD5EE0F3C40E8
893F12330BA3B8491E77B14246C667CDD4FD08FA68FBD9A04C693D4AA6E415B0
160CB3F4F3A6DB955A81FEF61ACE4762FFD008220049430828F906E8DB9E40EF
4D0C54D49D520611165AAF3711B005AD3DFBE56FD10673E4D394658B9062D582
4C3AF67D0CCE1A4F498B5CD1BF71F7CA6B19B051C24354153C3C39D064C1F874
3E7B80260EB42D59601F8DB43B6701A4AD660BD677FD24C85ED5C6F93E0A5990
D81DAE01148705AA7D96542F152AA6ED721800BA18A9437C91EF10F19C2DCDEE
1EDDB0B6F0732171A39AE018177CDBDC528EA89C8D25A7971EE39B8D02D04265
F0C3A5AE28EB43EB0C0B4D1B5F148753B8978B4AA46BA27AC3244CBDBC381561
92450A948E256495F5F0BAEC0324616A7084723F03CCA84CB2607EAC6B9A8134
C4E8063C2BCDA973EC68AF3081A859BCF5528F060F62F8ACFFF03B0D375D117C
4CBAB1A53E3161C0BCAD739046051D41C3C70DB2009BE1AFC276569F1014CFCA
5DCC4D55D272E07AEAB1F2D0C9BFC8600FC97EEB77753976C7D8C9BF12FD6EAD
401F43601BCC7F39E89FD7D5E9E98591DEDCAEF37D9872B22CD19A5EC166AD7C
1631E3BE38C0C514A1EA231DB8AC566795C99A75EBD11BD9618DCB8D42AC8BD6
F5527DA6B9A1CF9577C010788C6F8E64B71F69877EC2E790D0E6430E0D30FB6F
5327396ACD962B4E20A8966AA50BED145390DC5F3D5ED2869F22F663A6602C67
31062C1A1440EB8F93239C3468B177C20373E8E8B725ECC6514500A943D03D2C
F5D7821941B18C29EC959317DFBAF837DCB81BF77BDC45E4E6250D8966796150
BC229E49B5D231FE5E26BAC879B6A7E1A6BEA340C0F9A63189750BE5BD6543BE
4528EA41A61E8BACF11026B4B820E0BC4A35E45CEC2C4063FBA93647EFAB58E6
CC9E89F57CA8F6C0C15F6FE07949368836FC489C50D8D3F9CA3E44BEFB1931DD
7E2CE0E540A398AA83F571643D6146A7C3B0BC1BF93B1F0A90C03FAF28E738D0
C557EC93951ED9D3E26ECDD55EEA26BE34F14607812AE22E1710F4791803732D
18A9B4687989E55BAAA158678817EEA08101B3DAB9948677AF0CBFD70CD2844F
5601EF69F818293F46248DD7B160C9596D3FBE6C62E812BB1A97B46DFB1D9859
5A6C9D8C6ED9578CE731A8C3D9141C54FBB14E8C2882A0737E53C920314551D4
73970CC868A19C5708A71180142B447900FDB1DA04028F3791ECF1E7226536AA
75899B2765F0DD3B4D8D50CC0995C87A692AA172C92281ADCE0B252C9CFED545
3CFA8E8653E268D694CE33830D131F7230E648917DC53751AF68D41EF321F1FD
669033A8A893F6281F1192BFFEDBE544A95183E9A00F23BF935489C0361768A3
432BA668F5301555CB7F97E4D8AC7727D909E8DC21219F392DDBEA93D439913D
A7F9B87988044D79CD1E2FDD60720FD4F36C666CA5A8D77765B99E0BA3C20CA6
DD59B550EED1EEB31BB5EC9366F0594260766EBD681E1A56C83637A1913D5E8A
80518B985D783FD28B1E16CD6B1ED20C0AB3E91BDDA9D98A37E2DA191CC0D724
47BD3B64C514F2EB303D5C61B5D3D27A434953240A20D3BE87971A9D2A06AE5B
240F038753E4DF3FCB298E413C7DE7B2E5DFB04731787E5CA80E88B5D8DE5F3C
CD07193F903A8FEC0119ED1A10B203499F7A05F120B9638E9DB75F084C6F3972
741302C8D4F9567EFB78FA0ED3A4536A82A6800A4A252B1A90BED2D077553AA7
5A306DC18676636EEACE42F2440F1D63A362DD4E21FA1A2BD93005ADE59DF6C9
1A88861FF70CF100E2D4D620A0A1DF22638EDEAF429CFBA89F6D30CF96C7D5DB
58B38563295780F9562326B3F9A0A5F4EC712CE9743E6C1A5E017EDCB65B4D39
DAA5C0E94FECD4466D7FC485531DEE0D4D16233F9FE0AFE56EB0324DDB5776B7
A8BF9F1D9E6132B5183B8AA08AE188FB193CCB3B9C52D6E4EB10CE7B2A266F24
E369FE2D7618C625CAAD85A80C440A6FDC9D19E8E4F78CD805598AD98987FFD2
7FD873378141C0D5E654274F0A884B4E81A58644B8787F8B3E2CCD4C3DBC3E11
E22550298BF25A18C96A5A542FFD77CD4B451D13A71296F770F4E876649D2D90
E80748F81AEF945EA96B1E2B412A5584805DD97F036BD60D4E30A4EE39BBED44
29BF719BF6CBD1934663C64360F54234B8E6F9714E73433E0FFD7710CB86E35A
488D64CD4432C8241A922E07F8C196D76601840B521DA32596763C8D4852F60F
9C2FB8C376B57267EF3FCBB6E99152977100C2F2B21A9C990A17DB0EDF2AF80B
03484D3D2C74D306C16F85EDC795C241E5AE798F4E06F50C22945B18054E79F7
6C17E4BBEF12CBB30F4304F962188765EBCD0BD1C62E95F659D68F0D69B85BA1
88CF8442A38E696A00C6D1F4A994FDF5798965931CC8F0C640A25A90EACDBC6A
1F8295DE4D2C6E8073ABE9DF2239F8DA9FD8D7069560DC5F76FE4F4EEF78AC59
BD69B14EDE6AAFB6ABA0A3EB05A9E2A6ACCDF4362828623AFE9034E573034979
B6D0F7D62021E05D2623868B6B047EC8B3065930E77CEDD673F09576ECEAF1CE
CE9BB7E32C91F43507CD44758171DA4D9A2C43F7512DB3B8C2F11B5418CE0963
177C001C3A6173DFF0335A63FFCEBBB56C5633E7BB4A5BD1B605F397413DF96F
D96AF98026BBBE228675A553F3A56FF81A199C054096F4651C7A7102779082F7
18B9B616E07B5DFC25F60929EB02624D393D39084762F438CC5490B29471B2C7
A7A55DC7468ED1F1CFDDD540B560C2E1AB253A9BC1F8A013C8675867D0EA3446
F4FA176517141B75FA51F69D544025057533D40EB0EB6973E8BA5BB736538520
EC2DEDB75180046D5E715B293A3D7E8447E7686A26B4D4BC453F99BD69FE6FD7
C9E85DBEE13CA184658CD5F793FC35A0AF72C00275E14310ABA4F845ED5A3714
FFFE6DF4642CD37869BC08F102BA0EA2EBFBC82BDC7DFB8771FA1975956C403D
1DB5BDD2DC150F2066AA14CA544DBEE691D8D8ACA1B60FD474A38C925E0587A1
CCE0EE3132D2B7C11EF06056690527A4EBD1F1355C3BD6CAC3C851B4AA746B4C
7A1B45353771645C01C2E1A15A878E129AD2F4308068FA72E47E611ACD8A387F
D8136A7BD61048656CEDD2A467C58639DC8A1586524ECEC85CB5AF2C3F810F6F
F32D4A8626350B48D95F97BC93B4D0900480F9BEC0D70E50657C91BF3116EE7C
65C6FCB101A40DC768D5535EEB54678E70AFD52D5B6763DA659BC38E6DA6E587
C23E70241F9C323674E061FAC1D1076D3C0BFC32DD3D646945B77CD65C9473CD
15249B0146112D96057F4EFAAF8BE15176E475E95DF937A4B39FA628C58DCAC7
8480D3D9081521F2EDF42FF7D1A2248B4C0974C5EF103E8B871C72619E192505
4A3840BB62C69F6967E3623006F57A08D8D6D7F4C72073F273A0B08814738D19
260E8053E9729ACBA338A3580225CE079C88A8993679CFF2A83F7C0050DC2F5D
ED04CEAD7FC63DA3588E6A907AF195C31A7F80552A353CCE50E1E3D7271051D6
52C1E371D57B511B52A4DB8F69D76C3BBB46DCA1F8637BFF069F64F4DF4A0517
1CED11559EE4868E4E4E63CF4AFFFF5DA4728BF4CE540395D6E56A6F9F2E2993
FA3ED483EF30CE20D652D7A27B8E80CDF39F4DFB8C718DC0E0947334C34F6C50
C8E934363B89ED6A492EF0633D73C071CEA58830A18AE1C56554ECE41B8F29EA
26BC23A46914E13ABBD241984CF6E0EB6FAA23BCF8FFA2413631598808E079E4
A9E0CF8533FBBB5BE141DD8B880BD38CAD8676E82D4C6491610B215BA4CD2A6B
028A51D047BC3219609CA323FA154C6FCC6FA51FFB8A31AB6328AAA08A8AE8C7
1920D7F68A91AC0559B078AA60092C1C36120DD26E289B7E23F670AEE0B08315
A23335E109633F27B60FA45B451D698BDF3DE15889FC8570316B927C4FD3E092
07905626DE81C0346D15D98846F874D9FEDCFED9050736CDC7FE09D63B060AC7
1E4FE3D425B12876447BC024B5BE2972DA789DDF1521604BE019A51F8FEAA74D
D627CF29E7A7B4F21136E5C76F823D29D35078412923DBB3A32176EFCC175E01
17434BA38AE08C30E8E9E32BBBC255BC6293198F9C7B8CC208D4D5EDF68AA648
43BB9A1C2B658D0CA812AA35A3A38930B1009E63C4D6EECAB8E869C01D1AC959
60665BC64477D228181C86422A248A48DE3858D0FB474D12EFC601A3F170AD86
ADD36EBA213A07D6804988A45D31B7896288F6EB7F77FF48A023AF77116B70EE
12366E773FB4AA716C348026B4C69C25164412F1E0999B7BF44FA8BF0F3FE081
45455E71FBA197F791F75DA7680788EB69281E3DD8A266D480978D082494CBC8
66E41065DEBF0051EE2C4BEB23ED154D00A2D2F836B63A9E05D8F4BD91ECD5D8
F53C13E526379FDC8CF8FC5D1072A941273BFCA54182D9ED7B586FA5EE60ED24
D3C9EA826C974B4D06CD584D702C12606449ACD326A7D95DBEF9EC486016F3C5
531F86774223C4D777A0275AACEA815B06FBAB01B13E1C52CB78A2F6903C495F
0317F5EC66FA0B727FC6AEE319954E24EC54B5E6C469E9231D202E67648E549E
99D9766F60E4A3AC6F774B2AF8FEF3D8C44E0E3C93019B5E98CA5A520D17F008
6916B8C3ED8AE5E4CDCF603EB05D7ABE12CE6736D4072BFDABFAB60376DE3D20
43301E5BDC0E125346571C3AC8F053A09AB668003A72CEE4F85E3CC5AEF1EAA7
5C658E90F0246C18C21CF5632BD45316EA9E34A9EA03A6C950682BD7E72A81DC
4C26DE87DD8699001A1C74BFDF954E13911272789134502CF752BDA1DCBD0659
FE7ABBC27848B139567BD0521FB54384F9DBA8157C09BEFA9E0EB256DB79B9D0
4014446FDCFB594E0FCC622BB066A369CC2474D56EA9D08FC11F45DFC4B11F89
A33FAA0EBEC92FEB04C3A6A0FE09FB8DBD97212048EDF14479D008ABE5E43489
7E2C25C96D79E449930010080C12CC74EB8C5288E168E18C8694A500B97E3840
9DA085A2924AFA002FA83DD86D63E9FF54F5A9B98424E76D01937F9CFE3CF4E3
779650D7C2DC396B25C0685B03F604B930772A4D52CF1E3480229AE082AAB280
5562B26AF884F5A45A2C2848BE8FD5A07BD73778444B0CF94F7FAC2D42C711CC
4AF0FE7664A8A8D9BF390586D57E05182EAB8A2552D56AA3C47CCD8C1D6E639E
71D1376BC0D22E976972C71EBE2C8F4B253EDE6068C67CC64AEB344EDD4DFED6
DBD4621BCAB4F4FA38A1802EE7251B0410B3E1AC0B42621E9410F7D1455684C7
A18509400AFDBBD41721CE2E4047F325F38649DD442E6F0B393E46711774FEC1
F775672B03985613A5D63DE54712890CFBABE41E2167A6ADA4E92D9D848B2D9F
368024FD837672A5DAF6F2D7D9F5DA776DDF97D5EFF51E900914122E6F7F85C2
1F70401248C50505F9DE1DA1C862C9BDC3513C35560F0286F366F9E36FC340D8
F1475EEF77E67CBC5EC3138661A00D17925EE268658836E5186A0F8B4DD78CE6
331377303267B2BE5B8178E6D1C36E1435C7D6C94E6BD77B836AB77273E654D6
7A6B6EF2E1E88B8A1779734ECF6AF3EF3FBE74BEE6955D3E4CF9738CEAEDF7D1
17235385BD69D068F1BB3C6B565D226C295D8CA42F9AEA4E0604D3A3C2C4F586
C4C8830ADDDB49E962BDDE90A4F841EA08DF4D9266BEB9644731BBCB14D9DE50
5B356951C13DA10A3EF094840AFE537D15CCEBB26AC9EB6F7548E63D6E83F77B
0929D99246B2B217DA44EBF99D9192B03A578FBC5FFF36A1B6DED7A30665237E
EA02F6F1D4EAF082C6F0C0567D0B1D0643700037651B1F31AFE351909123BCA3
DDFA0ADC2283C623DE81693159167E8C2952641CF279206DF52D943BC285B007
D1135D873491D46C6B6F759FDB452EFA0029231EE1E3133136F8B831A5B5A2FE
1B6C18912CECB8E244A91E1AD8064357051BE9AE619EE10B69C9188D59577561
3DE69E901E01DB374EB110631F6D8F43A7264FE5EA79D06F90520708BBFAD753
0EAC4786EFC575DE3517C708AD4EF6C27CB74E69FF8C7EDF980F53D331A0F830
B88E3F6C701E97A57C400F0629EACD84646C78399E063C0AAF44775E6D1570F0
8B308452CA06CF0731B05959EBD9842DB651BAC539FDB597E3A8C38289D2EC32
B466D21C9B802FF1810458E2756AECF326919C91898053E8C0153F4CB3863431
FF9F94DF89CAE422012E69BB0D43A1842C41D9535EEF0550084F45A8E58F601F
6F8A63D0FCF3135BE7E4461907C8EF7DC9A62F465B0A2DBDEA1DD7A748FBDF38
86107AF158F4F9C04BC70F9B59C3CDC8D90DAF45F9998AA0FF1D6E807B3F2924
E2398DD99A002C512A426A8C54C902A1EC331811A2B570377A356DEC6AF110FA
0FC9274961C7033B733E773EB7E92A2386B678179EE7279BF20CFCFC70378960
AA4754928E228A7225094340420FCCCC8C2F3ACB04E095F7A0324A41A2C2E988
5420DB19E1EEE2999B2CDE1A6C455B0BC940D1ADE3C4488AEDC5005E81BF78DA
7A7E57DE4855462F941DE00884102BCC0F7095A328915652B7C34F0B14225AF2
D9D93E25BBEA3F95D00B096DC0BE3B0CA7D77A442524FD095BCEF902B27D01C6
0D15B4E1C8F073906B2DD997C2FB6DE1632B56B3332445483832111C0F9795DB
579CB830C200F6E27BB35E591601EBFF9580F378E3BF2E5FB01D2C6FBAE2C635
4FF6A9769C00988AA1D2152FB366BB75FAF7EDF2347DFCB070CF8E3093B06D0B
80CED64E2ABB76A3D20B11E908D9C6195D8D3E9BDEFB663D035915969D3C95DB
1A817C856910A50CAADBE552F424A3D7561DF7CF5DD68642AEC65C75E78A837D
06F81ECC28DB55A59A2A72DC01F728801E4AF89319F6B018146B49AA11B14AD7
A4978F4ADA1C2DA39DD5C02C8DD82F0C2E744CC3B65EEED58A094F0063A0E772
20CED0D2A225B0CC8675EE48AA8C8CBC748E636C5168680E390E2ED9AA201B4F
06C7E8832226CCE9C0D28BF7D7541264844F4E91A0B0D07196D3FDBB212A5E82
736C3A1B930F3FF4CD5FDA5657F80704DB34451418D3F7BEB8183EA2211316C0
CAAF127E300748F7F62F12BAF2EA2AB937056D3B806BA7F408F14F24DD37A7DE
A590E5EB0FD33434F389C1A723FC6138CFF4C93D659F49D706CEEEE414994C63
33301D211C3CE49323D9074A6BE0F3CA8D9A4FB39478D46706AA7C8A26591C25
830E7BBCEDA0D1134E117D38C827F8DC437A8D9C12DC91138781C2669708CE1B
CCFDB8686D5CFF16D935DB9E74C2E94E89FC11D8E4CE08C3953F99A361F8B559
0BA9286987A49A025404A1F2D8FE4194FEB6C80B826C4557BD013C2CF01B13C3
4292BF0387122B10C26504A868E9A71ACE24FE63A6960D7C27B5721EC7211F16
4A664AB4C7C6FE7EA206A7ABC43CBF33C76B0EB28FD20AF1751A73E37D5200F5
A884569EA7BC4BF1E611B73B0DEE3AC8F44C4CA15DBECA20C35CDB2897A2B342
229925F735E97C672C57F9804BD0F190E5C0E75A39906AC28A3DA273EFEECF91
758E02FE252C681793ECDC200E0C407318D16C37BE276A19C497B4C49C8E1EC2
ED337020C0455852748C0477712A9A9258B1DE605F6ED0D67E335CD1D4CB26F2
3CEF9CAAA20DD36BFE286E88F787D29748D96A015B218CA7FACD4A19DB2AB83D
1377E1D5BCA57EA9F738912EDF4315EDC8FAB409283BD2EDD03D13786639331A
594B20FE4F015086969A323C19121D5AC29300C183C8F8862BB249F8D477A9F3
7138095C003D7928E4EAA6AFCE6633EC5FA6820FB8243DC46FABE1D78F62B9EB
0943AD613C5C71302CBA057A74D5BCFF7540AF61B2E7F28684F2C4E0FC8D637C
21B72502DD4A7C2F76EE7144190D8CF1B2A6E118381E5CB956CF034876437A8F
196E27806655D93EE99C369AF439846B74F149712C1C8BD73A135DA1611D3B02
E3FE03067B46E4A6586DE60D010DC4E5094662BCB12CA312F482DE121A580DC8
2F0268C8B9431DE96E83A0BB9F2D9A92A23D7A5387DB0F9EB0EA31834F8EFFE3
B2C7B308C52FFEE17833031B5978F72A26DAA9FF60D639DE0622FF69B33E0374
F3B9EB4EA38A46D1E6BB226C26851F1CDEAF8DAD78651CC86CA1CE8AE9AA9F5C
5618E23EC788C2DA6F23AD38D184D6FE6CF3AE5D96732BC1E06427174E646B4E
E168EA0E02420D3C19C587D4C8DA19186AAE5DA8C8FCECC78B24441494CD38E5
71FC205211F1CC6530D74816257A3A6D71A6968256EEC2D21A8441F6878106D5
AEC8314556681964D2F205E33D1FA88DD0F0427285194089B9A683BEC4622D47
D7F5BD74CF1CE8A48299F72F960B1A67A84A073F31BCB2643C5046A243BB1DF3
8D2E5964E9D8CBBC9C0FDCA7729BD605BCA3F77B4B9F08263E1B0A841FBAB790
F78B352C6A0180C7A21DB67AE8B5F6B8DD3A9B763EEB95B08BD3989D5E8EB5B5
50E1D48890937000E7A0C1B9111770E5A7C58EB1FC1D39599E3D615DDE96D386
3760B77F757259A5D32A9013CCFC645F71095185E368C9BB3A13F295740637E0
E7D2FC8B6C4CACD47A91DEB6E8EC7669C03052C8831BB8B7AFB3E520E5808CDD
67E9CFEC0DD0A618BCC959C5181960BA3E4710805AA95FF06B958B38209300AE
63A15A7D271BF41DCB6455693DA38C2B4F821DC997FE059A173064033E87DFAB
3DCAAF5868220451B4928E8284E14ED197FE55F9C267A9139B40A5FAA27FA576
A093F2F082082B46F42D4E16CD1C6EDCFE951C892F4F1F9DF6A010D77A963F51
6943DF4834978A21E13C265BCC04D0A37F320DF67B3D454A365D1D40261C2CBF
F3F72EDFFE44D62D6B9BA6F6B218D001F97A7F702F5FE44952C2E10B35D853AF
36A07831D93D8AD911EB545770B932DE1185C5588A2A9ECF8B38BDDEEDDD8E43
ADC7F6194FD447A27A6B3D18CFF408627DE46F3BC84628F1359E823AA847D6F7
2E2CF185D40CB09E75FDF06272F2A8478C0B912FB0C21AA029F40218EDFC7C29
EDCCA10AB09E550CEB59F8B2D44C3CBF95A9FBB29F9FE86A09A16F82792411D3
FDAE5579CC8ECAC221883FAD91EB3ECBAFA4B84A15208A7F397F354F1617BE5A
0B01093A76F4B2860904BEF4AB002A3FA2CE3159814C09AD88DCF8291184F813
61155BCE7FD5E708C80B571BBB933774EE3DE35C209698A002E37EB66A1F7EBA
7CB65339F70F9EA40B086388AF8F64A78E2DFCB07740D37A5FD8E426F7C91E34
6923404B23411542B6D3ED024848780E53D00D4EC6B31F03066CDE17ED24F3A8
A994853ED4E836845CB75A548CED7F9FB07D7E92C48D1F90757DFBC84708F031
C37694C77E2CAE2E6CB98B010B7A828E698CD2A52D460F44F70749D7CAA5A39F
8E60E8DA8E9FB4FC6543A08B0052139B4DDABF5DEF721FF51367BD91E07D49C8
95640777D41E9F9704C58F58A936C8B5FF6A4CB5BB1D1D619E247F84E3DBAB56
1C8BA8C6764EE4602021EE4959D52128C04F521C0A6173CAAA1AAE9879E0A6D5
F8223D1282FCE40CC0F7C7F36678DDE2C13786C6A9AF782B418578622E6A9EDE
A24E8F8F8C1E768CCA15723F28B61B5F724119056D64E24F38960B7FF53D587F
81DFCA8A9FDBF530E375C3E916C7B1006FAB578E9DE51D3B2D5DB4F9DE64FEDE
D245A1FE66FCF7EF159BC070E100CEC16AE0EB997E77E3D64C293EFF6D60DA50
2D974A709E701EF4559494F6B5ED59B4880535C7B7C1D182C9CF5A03843013E0
0ACF996C478F0AFF18843FC319F50D48AFF7F11EF2DBE541864C69F265139880
E694FA35671D6AD82F54D659A62467DE822C1F2E28C375EAE3C216CC72054F51
21B37D8527BA8401AC9A7A2EB1A03F3F659A922C7A00C6BFCB7EFF5BAD4A54C6
CB9FBBB1628F20A1FACBD0B993481A0A45287BA786324896325327988BF48153
3F6C961C0F49E61C2346A982AE10A21406AEF67F9E470C44E0FFBC6A2BF7786C
809825BCEA6FCE91D956916F63210228390284F3C6D80F8DAE56BD83F58B6944
F03EDD2708169A6690DE98B6982F75ACF33109F80A7E8CFCE0D19C2C176C1EFB
80E4439ABD85B720E0BF696AF7FA888F5689FB9752AF55A21F56F8961112EC15
2DE363ABE8AC10A9690C10E0F50AFA773ED0EA897325A3705D055340B3C119AE
A126DBDFA5D1C23D3ED298D15FEC7D31FF7DC2A43FAAC36B9481CBE2278AD6A3
1BA009FB08FF7ED61E8A793A54A5668E3DEAD9ADB6D9AB6528253081CAC6FEA0
C02CE30457946BB018BAFCA42BA7191DF5DD48A09A3C18863494794CCF1D7BF7
8E1E3EC11BA613B263975102EE1FC207C0302DC276EC79BD0B936F0AFA01D793
1DBF5879E8891687D8276D4897C2384C1461F0690F70B14ED8272CDFB9887EDA
EDAC89C85868F237FEC56762D15202FD9FC29B32B6C6EC8BA8E8EB5F495DDA53
49A3E79F69521CD054345DF144731D72313551F3516C2715967B64608296A60F
A9C82ED00DC7A6B05427B98E6547442C05D3D3D06C1C169B84073998BB66E900
2D608A923042C347B5E85648699372E86472641FC2E62DA50DA84700882F10AE
5ADE0322DDBAE83F791E96271BBAB66C66E0E78E30F57FFC69AE15F74E038388
1E5ED0F7F14E31AE0BD4A5194A79554811730643A3D089567C798F72C778190D
D5AEEBEF394511C89726E3B4FCFF6CF9AFC8521017BECD2222ABA834BD5FEF53
14A81C8FC0DF22DF9A5C8E5BB9DB6667E8C97AAEA4D437420198F01EC35538CE
86CD9BB28CEF833770F47DCB940C38B4D483F7BD6796AC1068FC947DF994271B
1F39BB8577DAB0CD20534894F68D3EE545779665C6B224DB427F938416CB840B
4F1F957B27EA3440C8A3768ACD11DB951248C8656DBC15B8C0A825450BA28278
F9E16D159703840AC4890DDF1F2BA7D49E792B56D2387D09477F8DAE03CB25E6
664AD3E9201C1D4AFC9CE065ED347D7F96B43C83030E5F2105191D81CC88A8E9
C3706DEDD98F940198BF34EEB1F303B4556EC3307E547FDD6960361BD9E87780
AC08C3D7442B0E245EC190A709B8CB4E1F373263368F62122DD6BCAE512C77FD
DAC8378245230709E2E87CA714ABC77D4106CB8CA0A33A05DBB7A70D1E9E8D42
8C91DE7134CFADB6046593EDEDCDC15B73E69F834514B057A0E503E418107548
13D7EA278DC28063455623D0D98FEC5F98128B9C8B3853C1409ABA814E3212CA
0BC0C868DF8DD13999123E56616967D42ED97E31951B731F0437AEFD43E7B521
AE4CB9966007DE087362B069202CBEDA3AA369689DE32E8020DA7D961A39F127
85547266190E9D795ADFEEA4A32471F35ED5CCB3DE70CC8B6A0073973CE5995D
F3DD865B2C691F17D4D3C2CE782D3181771000E44660C33F048CAB7DCB00335A
44C754B0FE62EABDD2EBA1C15DA5A33B15FA5E43C79A947118D7A284DB4F4080
DCF9BA25657AE6B32A88BC005D94DB3D61B46D56E720A8C8203FC03771EF7C81
3EECB84AFE349ABECA706F5CAA44CE09BB5549D5C62C8E58628908BA14EFC214
2435C54E548385EBAC9CBEDB2007106251E13588CD4DB96891C7530FB8B43A59
01B9DF6931879025DF4D1CC133AEE752623ECDEFE89F202F4159DD3BE2FF3C99
44EE833E7F58D715139DDAB8844290677B2CCEBBA1574E04E01799AAE09FBD7F
1A83F4B979311BBEF88ABD0C79F54F8C8435F7BB34CC558913CE3D7B32E072E7
8E3B4DDA86117BFCE9B1FE235CCE2648EA804F03068443C0D4EC639C9339916D
F8F14432A7D4FB41E6425D878BBD717FF43F92947E7B7C958AF62B93A43B70E8
49C876BC4CCD0409837F0EC416433539B17660B33F49E06978DFB74E65A7E63D
1035FDFC80583745151FA5FA40D9FD282BB385F123E70493372D5CAAE2FA4897
ACAC472EA4DD2193534C67DEAF02BEE942B0BA485BFFEDF5723DC2080E3B646C
9D718990E19B44246CEFA2027E387A8FF4E78EBE61914102AD4EF67CE9A895E5
286A2D34B59D970453CF5E8CF20D85BD34BC0EC5612BB96FE3856E77C046DADF
F99680E2BC3367497C95A462FE582DD97D4B878EF22A9267274BCA8C2A29FD3E
48D7EC7516453FF1437A0E1C8DC94015D9743F6C4CAA6E9DCAE7286D2042F1DC
7ED13E73F9B0A1F3C6C6DED651086C74DB9CD69B8B41A5975680E6C93E635F94
1B8AF4879CEAA373526E9F7C02FDFB7D20F0681ABD078D4B997C9FA40DFD2C2D
4CB13D762698B22248081B8AD7D4AB3348B4A300DC469BCEDDC5819D08B2DC31
71FF722AFDAC49B60063FDCE90E2665182D0881450E40D82E4ECED0EF71CF653
A87F4FBCF540A6DF360956ED545118578A3FFEE06D077425162FBF74632C2669
31B8856C04B7E34DEE5F52363AB756B5660FC90C86D14BAD4B7F8AC81EB3CA8C
EFC46584F452BA74CB6839FBC40649FD15711D4783B4B8C8B791F9362B170892
993A8E430846E137E6CA0BC2169D092A77B500D9EF90A12C52CDFF07C3F1FD5F
62F409BFED2FB47797AEEB89660FE637BDD4E0DFC6252B81494195B908ADCE75
6C19FD44127941082DB84B17A7FC900726BC231E978012049D9472D2E71682EC
EC87BC15E3EAF9846A74B7285C94CB8F4FD7E372DAD04FE29AD758B5E079882A
F71E931E983FDCA13D465C24E2D8E8A2037399FC931EBBFD8FEEC4E60FFADEC5
264949E023F55CC4E0B60188746EA6BD4CBF43A94523A22702372CB3B7862EAE
8E10398234DFE10C2C3697E70F292C47F458553DDF8127F1FC35DB9C739FAD17
4EBADF5B826058805A90024C505E35F6D03C056620C2A65A72B329DBF6AC15F1
852BB1C1FECEBC57DF9ED306285AD26B99B86B2F33BDBD99B567FF66FC4BB11A
ED7FD11148EC8F7CD8AD4E1571E364C5944AFEE1491434BF6B0D508A895F37C6
7056695FCABD59202D199CD7D161301B3A3348DB4F7897152A7250BB33B79A34
A3E164A8DD99A82784BB9BB0220E7F951D4D7179F2F894E65FCE7043B9B4BA2A
AE573A58252A95ED2B05C01B3279CA2FE1413C078E25B9F021B7A7AC6874A3A9
5E654799A5EFF6AB804DA2348ED6F7378EA6CB0AD3073C18E41049FC5F7D2977
6E24768B5FFF4F92C6AF72C4116C00CF94002EFA63600CB986B89E4892E6CBAC
0F2FA0BB729C13B0F377757574CB1F327B493DAC3618D3B52E3A5F8BB62E7993
1C523F3AFE478F99A8396172E11163B5C6270EAB2AF11316C9EB562F65C3DBED
8E0AB17261181247732F6F86ABEEF51881E1D338477090C74D443352E00F5285
E7CF8CC81D8D5F2536DE0531DE47C132733C96A4EAE21E6455DAB0B8BFCCBEF4
65E9567B5B313063133B28A16A38B4867539C9D8459A8E80F0228C510C0B6AC4
37570F3F5601B85F8C90123CA72CC2FB82467BF20F1211AD8292F7F914D4F1A8
B3CB91A1E652E1ED6814535EB90E1EAB47041887552F3E1AC7F99E5495CFE142
ACCB0D0F31558236CB4969AA1E72EB09A8ABAA8486906E72A11469B1997F01A4
3B7201B3A14CAAFD69247216F90173AD4A9894B95480E5B6EB2A24632776FB5C
8040B7D785B0778C87F34D100891DAC3674F714420D568F4508E710AFF20C625
9F56AC05A1A23140BF855A4BF13338E0BC95C479E696CCC57988D321CE50F535
6E14C97E61AA7940018A9595106EC14CD75606E3A94D3FA7848C3DAA85C30FB9
C2FB5DBB2CFE6FE11BB2AB01DBFF6BC7B1FBD03965653161B30A7A5D29BA90C2
BADA6583CBCA6B3B49152C2019CB7EEEC15EB9CB4C32BF89C6AE19D1A9EEB337
DC445791B2A9DA3758F4925EC94D6BCC6E800A37B6EDB5E58E3E792B4F038B15
3E3EAD5614957CD498330C1816EAD1E7F582A3D80351CADCC7391207AFD65172
4EAAE3FBBC8B6CE87BF5E7C54A74A5C251C707F1A990A19F7119220AD14E1EAE
70CE95AB98C8A906E314977821E913522E98CDCE899845F59DFF4462E3ABC23B
03D1AE20C50B390A3EADEE1936A85336845325F73B79FCAC34813F6F8FAA3B85
3B950491C9EF0E2B4FB3117DC0AF75772BDF2C3F52D34947E030E8EA6454AAB3
E85A726D2086705E5603409CC0E42C0C3C6E01D354FABF777712A3E3EF835AC5
47232DEC08CEA0FA99C8BF9334E8303C85332D94F433E422BDBB6E6BBAB0E40A
850074A46CF62123AA01485DD7A066D3570FA71208DADB34AFED07829ABFAC4F
1657B5A5E9ED0806875B58C9EA86DA22AB40A30C168FA051378FD7F7C6C69DB8
17249775728F566778F6403ED4CE579A3DC7BDF697D86AAE5286A04AE7F5FF08
D8437539611FFA55D9C425730E613C1062B4FB6281D1769AEF224DB15622030C
155D3A2FAF64D862A530380A88A86271234048FC9263D106AE900689FB00BFE7
96C359100169D005E5F63A71729A13D37A1B733842636F299307A71929DD32D9
03FD61C8D637763F23588D862D110B8FE4F9C878B5B0467BECE6B425E8BE5E6A
9AFAC6B34376D0E009F8A66770A5FA6C56BBE7F1602BEE5654A2E9A28F3B1E47
8244027BAD9A8FECBF14D04A7E6BA5C14C6F92D48DF540AD6C90A972AF1C9BA5
4008664CCE895FB27C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ABCC72B6CF075717DF5200D680CFF152D215865DE535A6
1CA8E063640C195BD08DBB8AC7B4A3EAE77A96BC881F674B33575A0CE6AC3EBC
22862808E84C47AF37E871AB5A85B043190EE840144F9F85E8C54196C594349F
1E95F04AC99AB789ACD0FE5A2F6587BA6A0786B3E4FE1AB8D3A3BFDDEE2C5A08
EBFA713F917FAB61A4908CFDCDD24D6632BDCD20C8987AA65BB71AC2C4FBD1A2
275B89EA38BA595C388368F9DBA8FB60FDC1ABF2444D2485988E57BB3F2D19BE
67B58F38ACBE8868CCF0848E493347E541D0BB97C8174EF9F4C39C228B2E3B61
99461A7973C71A6ECC3303E77DDCC17D126E13E7BEC3C3622CE2A275745A06FD
F5BF6CF75824BAF170E4F9BD32D2C56BBDA6C28F0AF05545EA8F8C18D40560C9
01BF5D12846341419AC067C910DB5FB9AE6A9B63E1EB2059B5F7BFD55E909ED6
9D696BAD4253FCCDFD5C71283C173F0C007A2B77BD8C3925556BBE473124F0A1
4DFE04228CD31F839ED027B5733E1E5AD558A7FDF0B2BD5B0382CC058AFFBA47
EA87FC07B613846097A09628559DFFE3235BF6A493D41759AB5B35166C82EBC3
FFFEEF1F94D8892457191F42839F72AF1F84EE8EE6852725C1ED76E7D2C27D11
7C68DC610703FF2E6557F9260969CD08FDB5D9A508BFA9E4B561E2BC2D9D456A
E6D63A0CC0D5269454063B81F633CD55CA61F867D89E888EDD62ADEA9491250B
3699E4DDE5825850597E60D912004FB9B646DA8B73200319FE77DAC5D180E45E
9A2CC5886EB238A7CDE702356FB2FAC795
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE366FD7A9FF7917C89D789205E574FA14895D60
74559B3CBFEB1985C97933EA251CD6756B1C77F32C734B1495D101CA0AB6BE91
B4A9D58388082E54DEA065A8C90782DC87540181D5C092368FB4CED9353E0404
D3D05A7FE264B6D55DCBB79ECAFB3D66DEC5959AFEF22ECD78D686050DCEA6A8
2F8E29385F3F1EBC4EE457F2362E4F3F83B3F7E57973A0068AF16661FE21F632
9733323BAB1B32BD7EDC4B8B1FE0D8E4C1E289973F0EDC58EC9043D405AB56CC
84D8AD43A5852DB697102A64DB5F69E37609FACC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D74449CAC20DBDDD3380C5439DCB36E82A5A
72E24259E976632937402347FE0E201D60308E19DEA3902F3C361CBED5CFF784
282EF746A5C778F2C04047A5CBDB888C84AD3CF84D54A2CAB96E83FFA40604A0
1EC8E8810CCF5AFC45FD42ACE7AF59B50DC33F7A65D806A3FD22988D44043964
7B2BA0C7BC5A9BAA7896608E7C20CFA05F71EE0B7C7B67D8C7AEF4721E7BB6D8
AFFDC6C60F4F30BDAD96F4316349A0C9B26D646AE3703B6892B61D3CB4AB4187
842AEFF43B202FB9C5CFBABEDDC1257ACE67CBE6928F02D22F3D0EC630CFA02C
0F9C4E60E3A54474E96780A532F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA12
81240CC0667E2ED796A8D6BC9CE98F2B71D9862113C69F0ABD2C8E0CD7C39008
6369D35D3E5A083C3E82E9BC568943DE1A68599E2F3EF62EA528B388FB28E80F
116D6062165B9EE0BA0C870AB44BB1683934B4D4429450A21C9EA0419C3A9D9E
4014CC17E17E0CA2B89117411197AA294D99144EF52364BBEF00969C9FA34784
61D1319CF4B7FFAA33E67189A63DFEBB88CCFE63251C667912F605356788B310
59712DFECD2A63DDEA51BCC61B14C231ECBC73C511681AD69F4B470F2ECB11C3
5BA9D7B664BEA7448A6B067FE9BCAA3B24E051FE87B31B6B7BB613ED01CA4D65
F79C7CE47DAD329C8020A4D71BE0F7AACCB3BE5EF63B1C4E79B49BED733F52A5
3D468179AC6BA242538EC564F080D8F2D112116C9B9732C4AF86476579DF658A
C6B29DFE3FED2EF67B28A1DD29D10C7BEEDAE714ACF1277D793D674E60F47D9F
89D1C1D46AF5304326F7002E83160972074FB6F90585C75CD51EDB22B4AA3644
E0B7B8CB2A919122800171B474419D914DDFDEFA36EDF85949E44024E035D446
8AE5C73036F3704B16222179BC125FB2A341ED546BB25A11C28B5846B2474652
31691DD7E1FA97D2920568999A59AD14685C049D0ADFE3ABFD04852B9606E8E0
74B6742A1847C136340CD545E53D67D82FD4E55C35805B7926FDFFEFB6640F29
E00F81BC52A1AE935F30DEEF5E1A8ABDD3012BDD34303AC60DFCD69198918FA4
340BAA063C6DBEE7AA46A79400E279407A451B1D866FA197A055E91732A95B59
5E32FF28C330E73A2D5F605E33B1B0E004120E72412526349C5B4D3FE5690BF4
E925AB2CBDFA9F7291EB281588AEF77FA121D1C64E3A6BA529C11644D17A9535
FDD857AD224A2DB7270781DAAA348A6EA38062CE26D5FAB880E771BFD4419920
3C9403AD934334BEF890240C606276B34A7453D932AE04BA8C1ECD87A1A38A0C
CAB4AFFB3159A66A113E066238B6CEBA0994A9165727AAAEC6FE417204F04709
7E04281B01B6D90EE76A7C997C39DC72471B7831EBC8ADB195E2FA2302597BFF
0F12D7DF5CE2197167150731721E1C0EDE4B8C30E1F06EC82B82F60534847BA9
4967D7CE8031E1273A9000C8139BAF088951C2DCEF712384E73099943D762D20
ABC42DFCCF4ED0E151DCDC6BB1C1C6313CF0CD29AC91D2D374734280ADB1EC4B
28AA2AC59FFF274B4E1CA95D4E35208026AB554031EA6AE8C8655B4BF53F63A4
8C7F4EFCAFF31F6E61A732E1B1A2C0601C57F5B7B1717C456ED996C6B9DE9E13
36BB337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EE4CC3A2C7C042E823D2F3
B7D9F84290D6229967002025704008128186513B63199C3E19E8142BCF137ABC
080089A09EF7487CDBA0B34AC1E44E37956FB033A3BC39266774AC94A09D60E1
904E59419D24DF068C106C4CC9C3E2E9788EDD3A24389AAC09486F9F9874A71B
79F6063FF117C9767B7B3638761D9C2DFE3DFB24004666BA8435FE10EC622EBE
16E092A4D2E6AA02F37B2F668A6D2D0CE9092BAAB0834C3F82F2A80550E3A89A
A8A18E4A00E72032EAF44C1A0EF2C695AEB08870DB22CBA2D2D284F09826DAF8
57D7474DEB0219B34350059E316D8EE8C8572A5A86DFEE5664191F1C11943BB7
6D70D356FE5D145C73670A8F64B5D774B8A235D811FA7F846BF8CBCC06AA8533
8FCA723339562A07092ADCA96F853077AEF7EFBFC7B803EFA1554980E13B37FE
C33DF3B23FC7BFEDA3E643839B74411B7B4A3385DA035E9EE81724A19ABB78BC
C7D6CC7D75E360338F293DB4C2900598D990A8698C857A01BAA2C5C2C79D8578
DF1E5081EFB6EBBD8AFBBD15A44362A10F1795E0780C412A606D33C0739CB56F
B281D67E3B28B421338F959AEF7D3E933A0347B77F4CBCB931F9ADB92E0D6199
0B09C6A749C3666EDFC4567EF8239569CA8DBB4063FB54132B4206B20812D54A
6CD838E51E38E72E5D6E3ABF1764E9CC6A430741A82F21FB94C2D83DB8D42A9E
6C43BF0B5B58D943D62484F8949B2CE9B87D9CEE04DFF82BF14931BDCF67BA4B
EDF8592C876A83CF48E4A2F7E92558E57F43EF3BB68F3FC3DCEC70597CE93846
0E736B1DE553BE603600E77410A768936DBB1162F16ABBA50F261E0D4DB631F1
05D77CDF18A2EDA5801DE620C8987AF36CD7F1B78D3C62F09DB17818A5F1AD15
C37D3EB3CF8F554A5389129C3D22C556E2F6E624ACC2B41BED13009B9EB33BE4
747AF13D0369EABE30E90ECFCE19F5BC63300FD44C35250329D5BAA3159E63FB
30583AFBF18010B75004203E9C274FC1F0F59D7A86D619FE0E895127F3FBF6C6
3C2901CE4AFADD0873708C0957A342418FE27AE87A1879F88AA4117D8064EDF3
5EE62A351F1F2FA51C4C0B5E613FEFC6B1084D6ED8793065587F40DEC9D81F1F
FDCCDD170A6C69F93243D25495055E377E32DF8E4EF595082237F224EC94332F
D441BA7C86123582F655B10A7DFD2D950DB053BB719CE9B2D2F75106CCA90E75
B24D6E3EB9254F7781AF73C474593EB984673353F46204B4DDFCD4F291E0BB1A
9D79E829E1B64DE91C306B8D803E670F03DE2BA917E3284D54F612C02DD4C626
D15910F33E4FF64CEDAC3265364A924F030D7B393F9582725A47ADE1BDA0E7CE
A438A12D0216F822CBAED2657A1913E3C0A21FC6671CB75856B0FC7626D42E7B
65AC7ADC46008D953CD80A6044904AFCC4FF4BC074370AB93855CD45405C5A1D
24BE64BCD5B5207541D34D08480F1A1CA16F2E2F80713BD457397797B1F5E1DF
730CF36E7E0DA7F9805EA526D43F2D092368CFC4E14862D0B702E894290BA038
91644EEDD4DD9074727F4FBD3C035BAEBD18239DA9049B276CC51C86FEBB1542
4B17BAACFAD06CDD33783088F76EE986726B5036C8C278A4AD1125A2196D7DBB
84B577338F8C0C93FAEA6B72F763BCEFDE93D5D7FCC28C549EA34F292DB225FC
258FC6460C3099F30A2C187D0ED9DFB643C506644C1EDF35D2B3B7FAFE3F85BF
2826465A02DA9A69AE9D4255FDFCE29059393B889F479A2D372403259D8A9FF6
BA35CF1E1DE68DD7DB418AC5957D57BD9E45BD0530C8A76E85F59EB0890ECBA1
2DE954F3322806792A290AD42AE11F3123C443CFA290D0F4FFEC44169600777A
6B882F96B951F92E5D4E51D532F29BCDC847717F6B887D83F8776E76346699BD
3BF24A57A8797FF575396B1FB8ACAE10E2EE812C36C1E2B485259EA075F6AD16
F1245F1B7F06E002719799AC31A8BB4E57728A6EB2903E361DAA5BC1326E0488
726E2D6F672352A15ED84FFAE011FE8040A6C037E0080DB96070BBA2BA84700F
87DC3A55C75248E4DB744F6E0C54E83C14066C3443BA7CA1E70DA07C43942B96
4A6D5ABBACCE69775DA6C3D4ADCAD73E31BD3229C5F8931981B7F9C278F0853C
066373144FD3EE6ECB3F8B59115379A09AEAB66EF7165CA8B6790F1889DD54EE
0164A61D924F7B17D99E1679B5B685DC399FE1D8CFA559C93999700F1189021D
60151430C75EE75D50C20457E6802E084BAF3910FA14A5545C674A73DF465C27
AE3A558D36A8DCA52875B5E59A5E45ED4E7F2813197CF8F595F1555AAA669C28
B477CE8019F2C03FEDDEAA415F87B04DFBED3D19371A766262D2B31CA6B0F747
412F2204092DC28DDD20976C2FC2D3BC3191493D12D7367371EAF1BCBEBF03F1
8C2C839AB44CD84E9E78E1FB3675A47B77D95329CC6AF6809F952959587B2F45
617BFC36D07E89110A0E44CFA2460615EB10B76A12B764CF1DCE3D95F87F1ACF
C209EA16B2A6A5D0BED264A9C33829A718741D4BF672675FAE08341A74EBE5A3
824D9FD3D8330D96CD8F687E7902B0217CDC890D9946142C6802542D61CAEF85
02268C985AA20305F0539DE9E445A03C052D4A77C6F8D4ACFD7128C270B7D38E
5130CB1CCAF4B88B9230F8A67AB20DD792C266993FA02609393B950AAAF4B104
3E1E4490AD1AC793BD28FC5594E700FC6D7F919791190C0C999CDDE101C7F176
7ED92CD28C7BC3BB93B0B9CCCC29938FA16F33A24555973303D8CF2029795248
609040053DFB264188186301575FE6C2D37D8F90B509EB9BCF4406CB8E601B34
5BF60B6462DD7913665633A36D221E8C19CDE0D7F03EAF49BE166BA3DB1BF765
EF0305CD510D162A761DC91B2470E13087AD73E4BA4288861703A326019EAF34
A2B13634F55E964F8B7C21D9373105975504A63924FAB720035945B624DCF01C
ED6402040CC761B0665764B326446A071B6F2F362D222A5CEB4FE9EE7F22685D
87B84ECF255178D2D2C4B7F7857E7F55762B4A35858F00E6A27320CF515B7B8A
F90D0682E89F09AC22DFB42C4810D2FE7BF278B215DB9A61885A88D88ADE5E70
DA5CBE51E28CEF57925D0526B51B63AC5634E05A1DF14FF11071451A49EFD130
227754FA1BC2150EBF2A45E003F902FEBC471AD6C6DB3CD6BEBFBA593CE34983
D3F9028DA28222985FAED7B6A1CC891D07185666E40C98903806F30AF3752282
8FD5DE3EC220C719B63A90FA7F1E130E8186217E2EB7B8A1B9D89CABAF27BD4E
FCC63480A51EC039AF5DA58C53421D968C241C486AEFAB2705AA6ED3EA2BA9EE
7756AA03B0DC87E4A39927BFE6D061EE09569655370A0BFF65D2BDBE1C8FB456
42B3C13EFA3DD815224F7E256A4EA0AD525F30EC6D1B1ACC3490702C68FC0637
C661E3ECCBB47543C20271E2233F7B7F03E593B202DB4FC6061B3DD4B30F0FC8
1515347A094CD39988E89E0A16BF638A41A0157109DA020A5F14423B4939F4A3
D16979D5CD3846BE53810CFB3949E44D973C4F8D3C0DADC361309B09C897726D
C616466250AF1953C9039C0EF935042D3049867723AA9551FFD58E493633ECB2
3A86621421E2B0DE3A365F9948A115239FB86CAC57415423D618A614D4829E16
219EDFCDC202544F6E8A62A744A9FDE44F9811361F0B5E6C8C4D85A2B9A839F4
40AEB12BE24421CDF6F1AB2E63235155A2E98E9926D8E2AC4599B3FCC5AF57C1
F3E16541D2EC15614217201220C75DA35DC781C4FAFA29D8D29059AB5E706E5E
B5DC336227E1D03B98C42383BF31B68F6A6309C9BC0121783FD375E1C7699326
0A62D4613D6131B075F03A20EBA5D39C851ADEA52E64DE64132CC1F25A0DB6F5
B88956141B3C74405EA9D63C064A8F59D7A42A35573A5BC38952A87D2CF1914B
A8B90F5359A393B6C6929BA47101FE1C1497851C7B11300C3D6948D6FF4B35E6
82CAD5EF41EFCE559E0A108282ACB06F53D5E9AB73CAB5CDC78691E0EE47BE44
21A95E6B02E8C66AA06F9C88B0A319B5808BC309B9E8CB4472C20FC27DC79911
7F90F8CC166FA8AA1D4994D871C6C5BA8BF19910B28EF6F1D077D41491DC8978
EFCE821DA96C37E038A136F8256B7DCCA0D7503A0750027042AE2826CD90E226
CCB41B71BF28FE6AA68AEFC449D6F2C583AC103C7203EDE66E6557E7BDBDBF33
32E19DBF11EB76AD3C2CAAEF22AF24628FBAE3E3F75C310BEBF002BFA0BCD926
9E8D4CDB7F92E030156C7AB18411EC8745F5A5F62EA9DF542AB4A9C67F423536
F0D04CA26CED51F1B1CC2073FECF95E68FE5579E0720E18A2BB150D25BFB1945
596A997B23CF1B52822FCEA099C47966D70C09BE127592B87624BAA44583F4C3
58AA5C43A6D04453B45909173C732BAE5C829A64F189DB3FB249EB775AEF178D
3044DB57226948863D5402710A02CC77A9841880181CC63FF2FD087089E5CCD4
368BEF556A281D166D457F08E6816182BB33D446022A4F9B9AC1793F71E79A58
BEF6EFD28C57338971D7BCB5F3FBF8735AD8459524D93A92E2BA58D5AD5AA046
8323052D1205BBE6E794D7FC7861C802D4DC2832BF258013E878EE3C5CC43D6A
B4C81C1936CD8542A1A13361C0DD06828CFBF97D02772BB2B2D65D182D0D8ABE
FA3D85BF7B6D1B46E0512EEA2757F34ABA4E9168E7D3DD8A0047778F2432BCC2
38170CEE768BA5B6BDD6D1510EFB6BEF2419CF3B5927DCB50969D6E738FAB4FC
A6C32FBC25A59E864B0F5C20A5428CD87225C7FF28FDCD4FB898A052A0B1A65E
04BD7E58F62CB64109E9856CFC5D2A62DA183B416826E9E1FFD0B18758DF9ADE
231B76140270F0A05D53FA076B2F3DA3BE87F87ACE26A40B708D9F5F4CBD9F35
1FD15736F69CA8A0282200D23FB0EC43EE107184712353F35BED19750A1E4112
3ED4BBE53BCEED26A72ADC4D9D0153F5C310AB3BC4F61C2FAD79570767979CEC
35A111F6AFCC20ADAAC3C0C63CFC3B7ADA39C0AA97CA287AA287196C42B91F3F
42C467E8599E2C88C2E4394A3AC5C189E4A16FE8F9DBC207EDEAA72C2F7D4B7B
7112BFDD1DE5C8A907F17A4C84ED0BF61A99266AFE0BC2925DEC611CAE4E389B
A5D63E8BE4455B35E59BD39AC3F00B12669162BD37331DB4068BE99D304F82B1
6B3597E8AE55B63AF8EA9A1804A05B350671BA8D9838EC6FD9269FC73192CC39
70CE84EC6B9433F84D118630A3B2233A129E3D4269C2982989C29FCE47F94FD8
CBCCF94422115A756BEE71E93E4BC9355CD59870B8C57F2F7EEB6B877B917851
C7278A3549585E94245D9E7E63EB45F0D1798271EFF902734A510548DE1788FF
9C89DFBB823DF700E40C2E9F8C0182782F84277397DAE62595E8913877434B12
D589EE68779D6FEC4A4E1B2715664F98F1E30C448F26300E4D13F52B3921E48C
BD1046A9F5D5BC258A8D370AFF7360D4175F0202B68C507C4C5DB9E33952A62D
116F143BBBDC9CE8937288DBC4F96661C812D31312FDBD0E6C54E29981F1AD57
78B2FD0FC05CB4C628A1F09377B854A34C5C1774101F055F3D4BA0AE55E1E4A6
C20556D781963AC37AFCF8CBD4F22FB2FBF6B0D58150BACD7240165457258CB7
D25BD0B8DB1CFBB22C420D71382C7E5042A44EB4138450AE3C9C1B184DF5E468
1019A2F1C34069E4A7162CF6F8D703C6508CB2DC5D586678999DBFF6A2D23088
8C05218DCD8124F8E93E24F05AB2FA84A4AC427C88F86BF32146E98FEED2F17A
27BA34968B958BA373C6B8C8674EF1F7729CDB19749ACA9CD399A4ABCF28FF73
423ED0505F69FF85459A658EF4AA3557F832DEC8817A50E01ADB495027386100
D41B4B76E83104F4BBDBC85FC92631D52BA0C29171B40E2BC4E567B4DC63A29B
0887B27766998E83E5365136ACF7F9D099F66AA8A058488B9D0DBA4431261733
A76CB16082B4DA5855DFAD2427084353D785E1D0E5068ED5F42F2186618ECA43
18D687572D71749274D7BA7ECD77D24FE42D1BEDA90BBECB8E27B1E91D7D802F
B65F4066B638056F697BA89C4DBFFD8953676F77F31BFE9A0EB3B37A53C57961
391247A788B1EB4630B71E25E517C60BC448891030BAE0D3B1DF3B110569E495
1510732711716E70D2B2CCA0BB9CE60BCC0EC4F15E5C4452AF3E1AB2933CB806
D30441EF2F23E148F453C32E9EF3DE510D05F01B979454C6280A58F8B8072D55
C5ADC3F4798C3EF4A56D79AA6C5EBEB45D3AF27F9AE4808E6120C9A6ECDB5C9B
A2B9A441DA122921ADBB9A5B2267C747BAFD5934D95FBD2640BFF7E94C4C2738
9A9CC588E29BEA16B3FD22EBFB9D13E7D7EB59D75156DCD181B02711EE2C105F
BB16BAAF98F469068B96F4056E90CC61CEF424A54E62107D2ADA1C19405B9CB4
C2ED008B5F6B4565ECB973DA53376E96B94176576F807914BACA03AA5F701B6F
80BBCDF2C427C40A51597F0B186A2892F74A378B308F05D8E2964B4703166175
38D36C9D5931AF98893672C3DEF7A733E839622CCF936159308EE33798EB43CA
D793E287BF3CAD7E8CAE1E9BB5F52488D9B3E16A98F1E92AC4A52A846A49F1A7
D264A22CA6688536EE75116CA98589E3AB1D42EAE1A775AFFBA5C8C7ACB57037
7A356DEC6AF110FA0FC9274961C7033B76432805A36CF320A298E24A387EA2C9
1E6CE8E9D29F9337660144B50A8E9472A9B67CBD0AD5633645F38705A9B01BC8
69FDBC4831EA03161C0DDB2999F26EED9D32C373613F2E788C56EB0EF8C72992
5BE5E43D9E9731AAD07B020D3CCBFC275E70EFAC55FF06BBF51728AE6724360C
97CE27BF0DDC55148AAA23A4FEC8948DC1EF163019E604B15ACE59F9353FDAEF
7B002255701F2BADE28357678B3DDADB2DC08CCD184BFAB082F33CA61BC587A5
132CA4E82F35F9DF4D9E2E67A050224AEE1BE9646736CAD15214654422D7C885
64C4853BA1445742A6C0884BF361B64D327E8645F44BCDDD7352069A414D615B
A09E156C449C172832EA2CE7D1347F6543889B0C918B4D8060946ECFBA5ADCBF
48B9E706D14E27155FCAA8366DB08701092595D44011BB485BD80E501B8F4CAB
74A5F64B4A95DEDCB0179FF11230972FFF0F9F46C771019311BDA7A9189C3FFD
C39DA3D703C094A1FFE1162F4B61C257CED6EAB227200220E95A57FC11C842F9
C4C039F8EA5B13A3A9554E4F789CFE3CF7C11B242ED41737C237A6CBC815C3E9
11E5E3D25D0C35330F0C3DECCF250DF79F6B91A1C43AB587F21FEB96F3581047
EC22A936598B5E50FC8DDC8DEB238A2554A77ED45142DE876540CB8A5EA2C99F
29B4A22D9E9AD13004144DE33DCEB8DC36446FB24D63F66122E702CD92AE57A9
2C1C67BD2932A5244CFE4D1404FEBE317C761093AAD03C18CA4063BCC8EE90AC
1756B426A936BAED123BD0AB3AB9740C261AD4ED24E83D21202783DEF88E7D5D
5F9A4085E7065FB50E28631D2A286B9862B0C69172AD6E4F62EB1227A0123488
E56195B04061E73D829B4B004DBC9147849EACF6F6F9C0037098CECB6E88462A
7B6FAFAFADF89E8F9B0B086AF6A25C69013A095E5D0616528E44157652C07073
C5F6505477B5FF6948253A4729773F147004E7BAA7E7FFA6685B0765E2864386
7D50C6FCAADBB9EE4114269A2C9F7A48E375579033DEE1EBC8BD4A7DF0884F79
286DFEEB32602DA2B5FA880C537F60E1394571392C3C19EF206B17216756AC75
CB0A6B8FD43C58490E5807F16261E7D6C9C2FE76B83BDDB2CEF6E05700E98E58
20402CF372AF04F2704D9367231B1B8C4102A58FD6661206114DE86B58E28A9F
5670A5A21ADC5159077D035218E0560E88F2A4C93CF8428248DD241C3C1A2DB4
C7155F88EC1C19DF7E2DFEDB8F10BE06FED538273CD29074D82B72C1533C0356
C7D6AB6BE4CCF1C2A978C9A8DAA2BC52EC82784BCFE203F3A7DBB81A0A202B56
83587B8F726549048B8E7A364F21989024421059D0F608E8471A5D00F6702989
E311B03130ACA988305882A38AE0E11915A8FEB16CDF98F13B4EA7FA22C76616
38B4583C8E173DE30970F5759C71DB7CF2DE1362670ADE582BCF431A0D11843C
306EE8AA00BBD282C6762F07FECA518F5985886CEDB5AFCC1E30D0DFB9638E9D
C9E65F758F0FC4FD790616DFCDCD1141EF873A4D7DCCCD5170AA533B314D338C
20698848DED6E8EC6A58365D7A62C2FDBD0B7FB6D86E977D010CE0990F2A9863
3876C9EEC666E45CED43099560407F2A98E3E7E08AA5E529377C0CD1D0C11221
AA26C5DA01F3110239048BE84817BC6C82C18B54D4DE7D6A3C68295C24C872D6
B5CCE3E7097D5D0371CB8797208ACE349615F917F93D84F2DEC7C169CC9DB82A
8970B3D3B63F238C22C74AE7FF1F486B785690B236258FCCD55798DBE92B98AD
EBC02E476647E85C45F9577B3952D17DA5BCACC3DA7EA62C0D915F5B935ADABA
D4443927443CE0E47ACE8589640500597A96A072EF4035306AA6005A2CDE9606
BE67D4FB9A62072D9A65E1FCF4A665973A4D55222459E372DF28BB7DB8901420
7ED222436489213BDFFC5F1C26E3D3E9051767DD31D495CB4679DE9A648727EA
1D839EB4A6B2664EBBE4DF546FBC914A6FF297FB5FBC8B632D158A299E13B3FD
58F627B164A6E78BF16C36519311DDB3D1CB66837C2964A2DD0D34A23DDF71BB
7784C67E58AB7F8DE615CB09E909AA836C2B4F5F47327D2FD2622C3A6DEE1F9A
A4A8C69D6A244B6353F3EA9DE463238A36732C3ADACB0EA238AB8B29F707E61F
F9B2DBA695DE4E68439B79B33FBBD44312EBA9063EA63603E2606C8892B9AE0A
E8B1F6703464043980C187E9016FC65DA4791C5CAD5D6C7128962A81910C6EC8
950C3C03F449B477BE528C3667F06EC5479B0824B87C47EC33CC4ED7D68DAD6C
1C9A9D92397F760A3704F53CA8D31B232265D2A30F9CDE995E06A82E0E3D4D06
16EEEE3B480CA2A6AA2D5871519431A85D597A49335CC40D38639E25D48B5973
6C4CDB790294163779DCD2A6A8CFD87D7D2A8C9684616670EAE0379B8565A98C
CA733FBD4D219AD9426E33C3DC50B9C518A1D6DF448C97CD7C7C9C67DD8B90A5
5077C7300F05F1B24073ED052F37A3183A25AB5B39BAC8237AFCE135D34AF379
A396158E522ED20342317DD1752DF6AF33E5A6F2CDE17D845A3706D05F7CCD29
97474241F59317F44A60ED73DAB72A2F1AC1DE7C16792D9EA463C2FB76BC8893
70A04D8682D0AE03DC8B1025782D7534C5486448FC86B1CD00AC242FB0ED9291
8AD56974529CD78CADC41D9815A364DD46D9E3EFF6BB9CBA4DAE675BF9E906EE
156B849E4CB3A2B62954760B3C6D1F980F1795301F225B536BCD65DCDDFD47AA
3E7818563E78A763B6F500FD4C32473D9875FCC119196528D55E46339FC63A94
9259C275415C6553AB46244851A7656219F17E801AF5F30613E7A2C3D32301AD
BCFAA894A5E00AEF1C2E77ED22D3BE479644CBE0FF57D5829749FD2696150AE0
62E40D2CF10D2FA439CD2633CCA61457AB7D654540154501884BC744D368CF55
C05722A9CB476DA11E499B25F1235800DC8E8AF634BDC2EC0A7AAD59FD366E77
5F2BD8C0019198D8F05901C897288256E71AD9A18A5544EC317B54D633F0F9BB
8BBC097A375BE1F979C7A902A6B98D2D1CACD2549A8AE864481D4F76BB941B18
32E3FDBFA59C6415C5F45D0E78BF2EC3E236B95EF9D81C6294337964B384E004
0F2B3660BABBC1DFFB65AA474FCF20136893F3F242011E70880A8AEDA809E90B
E4203C3F857F75996F8CDE87C535EBB201D3A169CD9DCC4C3C256A0962B3E6D6
B7457368EEC9C3C172E6FE5357807A77F869A4567408A3B2A7A02BC29585F879
92AFD400D2F662E02A8B97C916BF9A6BDAA24DE24D6CD65831B8E50C195D0029
9427CC97B1FCB791BCA86C8000610FBF38625B87376FDAD30DC18FD7A0C09F19
E9C0302071E598DDE8D620642F8DDE862922A8F80A0DD8B36675E83371DDD080
4340F00529D7542820803344CB844CCFF0B65999F5BFDA1D2A53F5584C994060
D3830085F5B2B4D380F11A63AC1A2166FE65ABCDAA308258FCDDD13DCBB18E46
2B56FB3514D2BB08E365D92A33CFB87DFBD3B6E725E5C68BA17CD0C9E824474C
B8755FDA5E1CD3C4B6EB90A6AAE78537FDAF216F5D3160BB73DB275843EF8030
2912AC11689E08630AD5645BF8CD5AECFF085B9EE98C1BEF50462F0C242EE155
D8A4D4B9C26C903940F755381ACF661CD0B825A9BF2F4841144E5B06E3583F5C
997211E5081EBA94153B485B551B90E4C1C49EF40DFE1973DC8F7B8C16FD36FD
92399C24EE8AC85E4D8C211613CE4DDA344F51B803B9A42F9ABF48FD69D228F7
22EC13D6CD3D48CCC660730D45B7489D3AEA31BF31E3319D0180539C7C4D2C86
F548D5E2DC2158BC1898BBA676CC279907E39B68AF68CA6233C87A1B4699D58D
1C7E4B5CC43779681336223D59B8E16778C4284F21B29864E26D31511F85D2D2
84D4C57A4455E492C6839B85A90C23F82AFFB57F980484C4278B30DF26FC381D
8D871D0D96566F0E4910D1712535946D6F2508D429C62585777EB9E6E9DFCA88
9F03CF2789797340DC0704CD42BEFC71604ADE64B46F7AD902CD0E5620330912
C3096974CD5B1B05957074DA4CE59290F8D28E55D02C0E2FCC829A1CAA087A14
C454EDD950AA42C5621797FB5B6216077AF948D21F19461C01EB66F7FAFE6D95
82A7DD2A35828301408B25709FA7CC2A60F41E8B380A42D3AB886A9197C0079E
12D9A79FE6FD1DEAE0BC55D3E78A9CB5BDFFAE7EC801AABE09A13A368F7DC369
234B15780303EFD10F9B6887E40A5D78E6B1EA9264DBB6B481D05C69088A0E19
A14AAA9644CD1D850A95231E5D670EFE6732E74ED760BA502FE1D51D57925FAC
60F327D58731A241E11468BBA16BA3494A4E80FF14E009CAF70989799D9D2428
1EC83E6536996D29B4A70E88F294058F2B8CA0CF190BB8B893C1C1CF3FBFF392
EDA3CB959F46F3FFEC99835C3925BE0A67E48E80449793F520740073D2F18F5E
535CF1F0D0D082C889B4F6866F2C8BF797848F6175B9205607469FD3B0F0C321
08EF8C9F70F740B91CEEDB54EB08384809CF652F1E602E7F2566B2903E361DAA
5BC1326E0488726E2D6F672352A15C7544EB97D8A5451711BCF10381381D3FDD
BB3CB3324B53B924CAA6C346A08DBE65B1C054C0587AFB35100BC26EB80AD280
D9197054727BA157B2B027B791FC0398448F7374C6AE0C64EB9EAC541E02AE17
7F44787B394B64937105C3D8EE63F77FF6700DB4C80D3E6B8FAE2765FE751D75
6223855834352478CB917D70F1B0AF793AF5ABA1639FFA26F1D282EBC19257DB
C8AFC1D266C3CD4D3D727AB6AFAEBB8AEBD799F0D6623F2AF12A15F01E915FA4
02FA899166FC7E7F6EC4C4BEBB3CEB93769EAD514FCC535DB414D597D45C6E71
A3C0EE7BA99B94B170F45ED08D45D768BD28D6A2FE2A4184C7771A108CA7C1D2
54D9A96C751600330F1417DA1FC08EF218B03254F3561F5936C9A03F3A4EB501
F760EF762B1505102220A5E816AC7A812EFB9F870174F4D1BFD11019237C11E4
86C3C28E63F65694328781509A5C4F020EF1D81AA3D7E7FF51C5572ABB111653
2AD67AEFE0758C051241E301C7E13BB7C141D0082658D35A251EA07539866A1D
B7839361A7AEA3CF3F247852BA56D5637DA0A204945533BCBDBA18F422D60AFD
EA209F39609EBA0BD1FE89234DBA4AD8EE32F3E768538B1DF061BB3B5290DBC5
E083A1E0241CAAA5F48C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3C2170AE
47CF016E3B3AD1A5C090108D4964C7FD5E57B7BA9298B3D2AC24C035665DD98E
26606CB1A3A8C57A819FA317D45DF9C35CDF69EF9B49CAA77040D379822415C1
B64E27F6AE19EE8D7572AA6ABD408BD9C0E8653A834A18AE58F63D569BB78545
051C2FC0B81CC7668EC6C3EA1E1E5AB2C2005DDD22E105A1F4AE4D2529C9B9A1
CEF940264B09238DCEBD82AE6A09A234149ECD5BB2834DBAF60073826142850A
881648CFF2BD247BEED5D3B35993349ED8E43DFC3C6C5837DE85B0278025522F
64B544AA0CCCC122C8C1CA9703EF94ADEACF930E6741D8BCC9CDC3659D431D41
6274BEA717043740561888CF924934CDC4597CAD54D82350F8D5FE7D4AB6D0AF
0BC5CEFAC5C8F84A819BD094842D0A31DBD42493D2DF8A406D54E2CE4122474C
84C7C3696AD83CA15099ECDF3A273E8CEA000EA679945BCA6A71E4329DB73E7F
29098787D96D8F8412759E557505A1366EEAC1142E6E43E7C50DD0AF354CA7D4
EB49510DB2CE5AEC31C91E211F0A7E41C25DADA807E5C17026C40204D23ACEB4
73C65C768D28FCE6B7920FCCC71EE1321603E2DA2759C4D5180F276BBFB65BE5
8D98D5A9292428B9368284EDCDE7B6926FA86E4860B89F96CA4FABA813FDA935
FA86C092E2DF9B35F469ADBEB45772B7E5E398285529758927D5AD6635D24120
2B50C0C39DD554294996C46E69902090E3E51F1A1610F190CB315A12FB600B92
EEEC2CE2B6C918A7906736E894C108AA6F5416C667735DD886A1D9B73BAD06A6
2ACA479BA0FF834DFA815E1F3765392D2DB2F4AB03FD01A267DEA52E6E372DDB
EE44AA952CA42668A93FC84298A559C39ECB3284ACDCE0FF6F7ECDB6AB3069E8
8D09732D3AB78FE46AD9FA0D3E24F2FDCF57193CCAAA36A4B774280FFC904015
AA56AE725E5AEE820FFAC056863E893BF893BBE2F2AC97C7A8FD33D6DE81F4AD
D3E77BFE2AF017519CA0ECCDCD40CE7AC49715D8BD0A6803D8B14E755067DDDA
AC886880B7CF42BFB077634BA5C96EA3107B6D4C6A89D84C1E0F10AE5994B981
AE7B6F030E18F7DDF3226E8CDE87C535EBB201D3A169CD9DCC4C3C256A0965C4
687301F5C7C276F7365F6850198D96C8EB6D6921D1B361E313967A0B57292667
588D0A60A045AE5775EFA4B4BDD9326D7F4D9C73B08A835F9753F3363920AE7C
7B168AA17B1B815B966A2F82D27A9DE7D80DC986174F235F2F6F3ED3A26B7E8B
AA8EDB383DDC0BC6740305C40DE72586D55DFE985951304701D12D3A66EE3802
7BF505CAAE62A0C11DA4175B9F63832FEDB75A7C3C17037463E7F23CE0BD2814
3A6401E15BC7251D465A083EBD52BDFAC15FD82A3607E18301B62AD95200E13D
EBE6F2AA1138DF39DD517431692EE1FA1132ED0087D8EF5E30FD833FC990E0EF
638B210931772B298BD43EDDF7277EE2947022A2044B1C0EE6096E008AD67226
A9ABBB491C413B52E72F060655DED219AE758B5A5537E8AD1DA5DD739FA482A8
C8F87AF276E8795C6CE1075574C306FDB236018249FE77CE8A5DC70938056E27
E016861F0371C24C7660F661EBA0BB60C59D40F48DF92AF2EB6EC67815D27C5D
EDDE9C5A1F80D025B7A76595ADF5337F8F93BB3B8D59D5B0066B051DD9E902E8
1F262602C9D87938B75EF43EB0A4D5E8D2744EFE51763A6BBD41A7AD83B227CD
F38B7135C60127CEF02489815A9437C2C93498CB49A2A036CCAB5FB566F57018
D82B15A9C80C550CDEC09BDF5916EE6ED3A7A0E86C8EB19DA903FE24988EBA6F
C48DFF0593D6F4EEEE809BCD936FF4B76DDB821EFFF0BF9419DF2DADC07D93F1
3BBF6A985A47085E7C9FD88EF8BBEA11157878F218E82FDFB74799A272873190
E50503912F322D0D6F22E851DFDF1315C0679C0906D77AB2144E8494E3635BE3
7E23FB873E2488086BA272753E307CC054B8EFECBA619FA6C38D9D27307FAC14
429AB8FA9A5FA48D0E843A2038D91F478CAB43237DF502968755F86E5A6BFBA4
7E507EE6EF317C394275A8D4EA9E4728E8FE7C2AEA4BBC727B0E325EB254CF24
B7A6A261F97999AC4EDFD1B6FD7600696818D3D3CD78604674650E4B06609E25
D37A23326CD8E2332276F32283CF0F7169EE52BD704F537AD905D0E50A525C31
CE5BCDAE757E052FB41B3583C70EF177EC0C2D3AAD49BD2A0BF511A722FDCCD1
96E5076ADAED535A8E130B46D3C97F4DE0BF14EF07EEC577FA80B14572544D0C
434FC6AB1342922A435E50C804D76314E08620C282FE1094CC0EA2676BA81D54
48A78D05460E7DD748B8F839254BA9139D345103CB03226F493297153D16C17C
D2F83B971005CA4FBAC0E247CC0DDDF00A677C10ED094F00C582E77F6E21A71D
0C319A466F6206AB4D120472AC822B3514D3C73DBF1486A8CBBAE65E9F18626B
EF4DD08E57DD9280429B46221987A70CB299A687161444B807727C458C2826A1
3D38F8908CBB9345733596B1655E53AB42EBE4B24C3F2AD371F10BA0FC470504
B7592D850174265A477C0683181F567F7ACCA0E90CB3A800C7DBF813A96D3377
3AACD4000D71140AE73DAA21685EA394047116ED7629C74E8171EE39B9968205
0D5983BC088472F9AF3FF9E9436E8886ADB7A8C82378A81879BE9047DA8EF839
26C442562A6E5212A2A2F6BA49D985D552F7E5DC23352FD902BF6F5B5CCC85FE
8E2CA143CD7E8E17FCB8B4ED57D7C61B0C70972F86F67770B17BF4CEAD88713B
289E12D7842C2A3A9861C89A228455B78BEB3E44B78C50316C61B6FE484CE582
EB7FB0484EFC399C46C1426F4FF72A744B8EED9375BA41440A9AD264D0030290
B03C9F7F76B44EE925C8AC12751900AA21C2A408FD3A8F9FC9756B60369CB4CE
601A9C208314781EFF3967B5A741B252F764BFBC18C29E0A119454F8B4F28330
C5056CDF7B8E94643288DEF5D335199E88466044C7DB81F68F15ACE1C270ED61
1FF90C0F8AF0F247737C0321C6ECAE276B63BCDFC4995F888953CD4B6449B07D
5BFB94EB5B568EAE3FD3A93CF6986C9F252363A207D88AB66A7C0DA4A116B32A
A9AEDC4A456134C235D3B273A659AFC6F867A0A6B524CDC2BE23B43458474D51
0E94FCE182C53165413E1E14609AC309B9E8CB4472C20F42917BA4B020DB0FBF
D83C2A9DBE70F640BEB821AD49E34383E63C474FB5CE9ADDE187B82AA6B13655
9500CBA6DB918224AFA3837F7D8B0B9794C85BD9F09D4B894679CC41EF3EB695
333742BB45614049610CA704337A94DB0F71FA477269474F8C2BEEA7711B75C6
AFECFF846191F4C6B573815A3AA97F937D8732A709957CE23D39B600EC0B3691
FDA05AF2A3FF22765837DE68CA029715A8A1D46C067DEFC27FDCB5BDA6A1DE64
B26607D758E07D79A9450664751BBAF49C56DA1A7208C46AEE9AE963718BAECB
CD412C2BC6BC6FFC00EAFFBCE1DE0C0838B32FB1886BF564BDD888F394DF8714
AC473001A6EBC721B3AD347F9CC5C2A27C339BE133A182E84F87163A97D16C6D
E238383AC59698E08204C34F7D4291F449E017A00E84DD26D1356B116DF445E1
AED95291EF9E305A1F4463791766573F323E05A264A42135D7A1E7162E501AEF
FD43AEEE9AC38AAD2250EEFA93E0AE4F8A7B6449A558A88D426B6C046E9A088F
A6AEC41FF909D5319865070DD71843404E5407A01A2AB818FE5391674BA68E57
2E13028779C254BF516641EF91893D796A0A76858D65B37ACD6745664AA06C3F
9047FFFA727DBD57A449D7BA28B98BF4F729BD36137E834E072B8A1B6693BB70
A7AC9B290539B172E2F22DC62C98580B58DA2AB8EEF2A8BF1DD13641CF203A0D
91D7872C7DC7740BD3F3154883CFE4EF0460ABD63DB61E3186ECA1A980EE3A43
73691772A120BEE77098BB898BAD2174974B65169F1FE7A3D115E94D83126336
DCB8867A795FA1E57E9C4B2FEE740BCF8F66A707BB17DCF1991BCFAAD4C1C337
56011358C467EE03A929F373697CD318EE0DD179400C5363F0ADB027A201E35F
B4C9C631CF85C30F467FD0A30D35C693B9AD261C3CF603FCB87651205D6CF13A
5C943BFD0868FBCAFC4DE907FFCD365F3CD9235703F4D830633B6D5CBD885DC9
3B1C8C8E7926F6D8AD95904B319A1BA19F0B7113FD506109A7D13B39DCAAE01F
984858D6326FE3972951ADB395041F35A5340BE770E44EC73730386ADBD8ADDD
1496335FEC30F5E9E16AC846CBE9A12E983E07BFCD447294B1F96ED4AC5B1BAF
7B888218FBF210793730C8E5197204416FD5342DB3EFE5D9808979071EA58A0D
10AFF07F15A799749C255C27EBF31A3D09BACF824EB1E7AC6127A68E47E30ABD
93644E4C2696A685DED842C2A0642F862E14B66919AFD491F98D83685326E1E7
5531FFED9C3415BC6E4D05AE962133C1BC4A492491E843D4825D99A63C68C4BC
35B3493927E3160F1DE3F6D67AFF806759BA0A3FA256607429A7F3407CB056F9
3AE1D7487E2406AD30A2E8B6A1A1DB86B1EA345B61AAF61833401353462890AF
71B05B84B2E8A8A3B8950B44ABE68C2A018FAA8C57D30B7F86BA9A0418460385
A87489FC2A842A1398CD00188333431902E82B66A3A13DE1B70F2AA0F73A2399
F6CA500E3C1230E67155FC96C435ED144F1ABCE2D73E44AC37185A1476DFCD81
4E2C39D4C625125133D6F43375E05875A139CE42B45450FEA409385AD0F33A8B
B9BFEAC2B6DC5AB31748CBD9AC712982BF9B2F400ACD7595C2D39BC1D8EC8C7C
AA8A32289453D7C620354E93FDC03A51CACF987183958249B4D93B605ADA92A5
A252451FD8696CCCBB9938FA9E7B2009D2812A904194C48D5B2ACCFB80A6FC8E
95EC5D15C33F7ED1D8367CD9DB1E445C49BD574F7040B7F10596DF2AFB817F75
DDF112E21C64DFA878FC3A68B13E7E9E00A942E9473ABE2F9E0CE8467CDD3D56
50CE735475FF6F2324565918F9ED22231D2DD641BC860829C1FC5AB7FD0E5029
4C91E426F1222BF104A78B50FA879AD2FE472A3FEB57E35599FAD0B8A1EF55C4
EAAC49D2ED9C653877B5CECAF47C5C193501090B199CFCA85A1AB47D180AE3AB
5EDC9A66EB2152A3931196049E92A7DF9313DC12E050920A13610136D6E15345
B0721C8F989103E4F6F8A25A31E864651CDCFEE7ABD001F27174A5303B534F3B
BA4DD09492576A8AE7707B1D2A08001FD53B47B8613BCDCBCCB6F6229A9F23C5
954B108FFED7C8C588F37BDF9FEAB7865F2F64A73F9EC7CDAA6964EC58537821
E98364EFFC2F92280F731CBB5B7DC93A5A0B9F3A8A8CF90369E4F56F6B1DD134
0374962D3E819E4AC8A11CB912F3AA20E2DF182850ABA7861BE367B89F3DF282
30B09097B55ED9B7ECF71BC7C7180340720121A891B3158CC013349AA131D158
B7E6198B5BE51BA6C866959431AD7A6E4F0F9B5B264E853C4C643F8909271885
F8E759760BCF5D5152D45E91FAD6A3E7B3FE9FFEFE3CE4E467B6A59B12647827
BCEFFDFD89937B33BFD2000BD641301551A0E9CFBB912BFDBBD6D7DE1A1713D3
9C63903F9CFDF4EC250F8E7787D0CE34B611C401E30DCA7209861ABD4A8864A6
4BF5A484985B33AC6F8F684B283A0A698816B8F93734228DF1D15863B81493D0
90940A5FB82C96E4348C4898ED1E284BAD94D5F8C4355B310B12F83A38112D99
C71EA76AC75EE6B685E3D8EE2B98E0C1D30AF2F4B677D1DEAB83F49CF037D0F5
B9E6B7268BCF2B4DDAA573EC35918A52243149770CB7DE7D51EECA6EA4ACCCEA
FD45E534FECF04734C1CA005E718523F07BEF10B0BB14C4D4DE4F2AEDF89BD89
51D1CD2056377F0CF94C53FB691309C35E6977332CCC6E5A478BEDA3DF529A99
5E2CE2872E1D93AE15DCE2969C5838FD9FEAA5AA98B091AECE8681999D7C8CE7
081C670C862450F93030CB5809EF98E9F48BA0752DFDCA4C08EBA416FD14F0C9
2F0870054818B7AB421E6C1383C1F44E123EF8D24A0B3CBC3DAE46817B2C306A
106B9026CB81885A90E1E7FA2401AA0BE497CCFB11BB8D6B2A70A614EBFB24CA
59A2B909CFB47CB43CB452F7523C4A50E7EB4C92045C0A486BB5871AD692296D
2D69F6CF1E9FE3DBA2FCF6DEF2C5BEC067188EC4CCEA66FF03751A4D76C8A2F4
7F997C4288AA1C8CDA5E3C6F89AD4B0309808ACE62E23E4FF64CEDAC326536CA
1F75ED1BC7113F02644DC3AC1D8133976243C9B988979F9839B61951C202471B
D3774783288C9FF511E8DE1A26866EAD6A8FABB083C1BFA9049789E8E751E0B7
AACBABFA493FF633DC8C7D450A9957265C44C4A9C5955D1AEF631FD9640B12C0
C59B16B04A10545EE20E90450F98D99F1E42082F99E4634E491B212F3AB0160B
E75EF873F759D8BAC2BCBEA6EA175E6AD9A1FC10AEEE0F37AEF7E9CCC5040518
BBF10BC149F7B956661666684C07055FE2A3B6D81785B7918E729DA7E00A3D3E
50EE934563FF9416FD0CE19966020233DC20B2E52302597BFF0F12D7DF5CE219
716715073173C04124C3B0C1E808A67F8C1272B480A6159DAF45EC34542F931E
76266B15CC8303BE2A0AD1AA715ED5ACCF17F6D593F8903EA5767140232293DD
817021F7C1A606A02F523698D1892835A1D8418682F698CC4FA02D8D919FE3B8
92ED5121D62E76AC007FCE82310B7545FA4FCEB1FDF55416821EB127BB006291
5D38CA610DAFF6739C02DD8D02DAAF48F3B4E8FD328E1C2A7DA0153CD7A4C3BF
B0DECAA769435BEAAB2EA1BD39B29DE0BEEA5911C9262D553D7CB13209963E66
DBD31FFFE546617BDA4097FCB8FCB635C4EC6AB135554C9B7F8041AAC5EFE527
9BBF86B620298753E22E4EA156D467EE3C32114DA6F3F143C053205C1115DCB6
A5799404494857CA9A4EB40D5252B91D5A5F4C5C43AED3166C98F15B037AC77E
B701A695533447DF8C36891B3CC0C0042B48793475561AE2718C4742058FE11F
A9A8EE638F8C21AD1D13D18209F1219F9A1619C6D8662304CC73B27F3638B597
66AC2FE42827D171434A374BD992FDBFA7D23362F1811CA9D8EBC3CCD47EB9AA
39E8542AC2A68D47019DFE0986B36BE8F6E9775A927F2EE2A07DB6AC3AB6CFFF
3022D1FFC91FEFD95714D76DC50C4ADE7AEA70D72E2DD36CFD2C96F739D43397
13137C2BFC9A5E7FB8CC9299F76EB6CEE25CB2BBD4E7B9DA42C0E8B8B099CD22
1E806DBA0872274EB8528B2EF6578CFAB753FD590C44620A74256CE5236B2B13
AF62F3A2E9E36A415AF2913CD469E24B979DB7A66E419A9E26728584CB756888
7A5028FC0C90AD1F95DC05065908D0D3984C0B368C1BECF693A0181829197049
5FA04642E17B5D01FE0AE2E890AF3301C7F4620B0FBBE521D15D36EDFB3C8006
40822E9EE34F929F49A8BE482AD451F3D94CC8D8E33E79F2BA3181099AE92006
6B5ED592EAD961D671F6A88CE1EB6D086F2AB69CC11477ABE401EDB52C881153
E8228D33EFB93F057E5967643AA152A5C611A52AE12A46588DF13131F9DB8437
57645025328B0858CCFEA9354C720F417B708625D0FEC0402FB88BEA021A8F9C
69F0AED078B7DF20965C583382250EBACCC9B5C71D0890A63667CC5AE766518F
978EC0514D25FAA8B72E564662ED3079AF94D86B06D7DE8D67FE2E8C917D6A4D
F569FC505C6951DE435DB60070852365F265E6A7F01E7F9D2F2F0B4EFE8E19F7
B69521FB56B15F70A14200D061E3F137DD3775626CF02D30F22DCBF4757D2C2D
7E532DD155061B0EFB078370E116DD640AAB59DA1B39C21AEB714781BBCA02D8
4C97A8F65464577DDFC461E6ACEEB25CAD1B04B8FC9029EB54490428B5A48080
A0E95A00D0F166D1AA1FE80D88F2A4C93CF8428248DD241C3C1A2DB4C7155F8C
3D44FFC86D9C66ED01B85534A1E39BD5C20DE216B3368367B670365ED9ED2AC7
FA6B9753CF1D2892B18CC51F7F55684CB30A51FE61DE94D66C33CF7BFC8FCB5C
2015E8E82EF03F94DC211CB2CB94A27524A4C2516A81623DFA53010BE1C4198E
61EF35377E26C7418C9109DED70F49519B594ABD65472705FDFD994C874BA812
7BCDC22A68677137DC8441EA7B8E6A353FE001C63AD0C72E1EB701A2D23C6AD9
A3AE11C6BA897ECF13CA428076E6C53C0844D95546DB11FA32359BBBA7F8046B
52CB4BE2C7A7A3754F57377C6E95AC3B74863596FA34250C3890457060B9B11A
CA917354CD7B5811508053C9B5914FC368A6A4F9711CAAEF90506454D1D85D77
CCC1D2D33D24FEEA1C5D771BE32884DD8D3F96E39648A75103CDCCF1C977267C
07C1E098D71D579089E848E6E001BB238E8E392D995CB2A6B48C8402CED1D19C
365932292718FFA56E5DAE5CE9F6C6BDF0A08D2A0093B1C31C4D1B04E49956EC
4CF5C1B99AEE5AC4F5B119C18F2D07F9AE7DB3D541BB85169B70AAD9E92BD1D6
CCCF11E84815308D89D6BEA2E7785EFC7F491332837F9D01E66D6780981931A7
D3F164EB0D1C6854D488FC08EF1C557ECF5DE837483333242388B4C31B161A28
C88FBF14846ED8CE716D43FD4F882CBC0F420209A2ED5CD01ACC7E1D0401A7FC
D4D26E791806A9137DB417D7AB84F57D855A69725368619715A94E8DE2DBF801
CDAB652D689011D236391331ACA2188AF1CCAC9EB3C76BE989D119E3850C059F
564127806AC1D87C98FFBD32D578D0048681E97FDA7B68FCA52DD49887FD2C81
C24E8C36BFA67F746FCC8D026D6D6CAB0A90A6891CC6A139CEBFDD92309DB826
C08CC4045BAFCB2B2C0C87989B89D7905696D5F70E097D19F73EEE205A47785E
F3C453E6F77A08AE9F97348FF52F4B16916E28A58257322FC8F59A6B5E670356
A3DEBB799E573A54E8C194DB4365A224C9813C036CE9E838800A47BC4CC6B35E
E6EEB1428D26EEAD4D6AF20D26712EA0F236C7462C608A5F169BBC1FDDB8DCDD
CE90BECCAE6F51A33757FD8DCEA2488E7B130462CAC1C61A4D6D374A2272E651
1BD0987B6E4A1FBAD528ADB4433F07713100C8DA1A4DF6C8B7B019CC31279CD2
7DDA52E34B5D5EABEE5A3EFD38C40BC3B14D9504DDBD0985505E124DFEA162CA
B0A75F1B5C1763C66D4528536DD4FA01EBE4EE2360D53A6C2EB0393A21C2984E
95892F8AB223B1D1AE67DA3476CCE84832BDA1B6BB5244DF4DCD65AA6C24B466
55E37CD7AFFD757B3CDC29CF12046CA3F4613B58356338CC0F8950392B6C6675
9DEAAA6C9E414B784C7620199365941F774F8CB1F07D5498B68A580366A98AC2
858B0891E10C66EF859E5866B19808EBF05438B8179BC246A164E01F163796FF
CBACDA22C239ACEDFE73AE71C1B2F46DB8AA8C2ED75C9D266C339E04836A9470
2E5037E8382128ED3AE89F06F2EA57E3A7A6688008E55CCEAE69156F655E24CF
BA3CCACD2EC564AF37894ED79E214F66E2585DD7181AE09F38A8152E34920B95
6EA59B6E0AE3200CD9B5E64328E0B31D43DA5529BB528DAED7393EF292A9E582
B78DD2BBE4BABAC7DD277FC23AA3DE5BC5C277D22217312B08735B76A3672054
A8A2DCF223736433C75F1DC0671FE716B7B6D84B9B963D21F320E4C695C99A61
4B1869F207E6BAFA869CB82B6DDD4DCD0988CB54A86A5456A0293797A1BD1FAA
B9AF2BAB480123F3CC4CF3281A312EEEF077C86C3D5EA3A3A5065319207D9907
C3E14616874AD27FE89777BBAE47CD1B4DA6CBC8ED87397E685A3420750F7BAB
0FE2A25DED422E0A85CB2CC29C5B7F2DDD6DD5104E04E810338E7B485BDD4D0C
4AA55E527E64B9FA87B6CBB9AD96CF0DEC60B30D91110D8F94874DD922AAC193
6BEC68BEE119F677563474B7E942537CD9A3C06DA77812BB4EE9929C9CEE82C0
8268EC53F2579337B95BAC509D8865BB42CFEEC2BC6A997A3BA5484CC6C201DF
87F0F105C79882D6161597874364A7F422D93B4534F8EF19B7B5638CF9501377
9F815F3887793CA934F06A27C78C5122CD9EC73E29A912F30989B93E2CF26F6D
F07199C03BA5466FA3EFBD7F77E090F764EF0FAE9B7A5F45D61E02205FA8BE26
EAB4B704CB06130734E123A605A627C90FCA18113ECAC31694158CC7473F4489
85E8B6EE64815C88483CFC9E1D0D4D02C1C024F7569316ABCBAF5B9672FF8D90
BDBFBA0CAB5057F260E4BAB3301CA9B795626F48588DD09D1AAF7BD674B451B4
28777C2234DFE67384E612D437A38D64352076BDCDF75AA4FFC87C759F4F8DF8
DA5DC55EA3B67D2A12C34710865C5D92E20335E197D9F413BC57BAAC9912EE07
B0D606F78C780BA836B6BB7D5985611C95E3DB481F69C517374702CD1F89360D
B66DCB054E84BD3442D366CC01BEDD930B207010F42AAC30C02EE0CC7F10BBD1
337AA62B8B7F2AE3985BE368309B13BF831D9A265353F0845E0BD94325671706
E3CB0D5C25D467A30A61A4A906FE2796C7CC76577C21918D904DF26C22F2CE06
915AEA5D922C73F58EA5BBDE47CD12B90D1FF8264E853C4C643F890AE7AF53A2
099524F362A188688DEF40BB855F6102028EA7A769943B050CCEC5C81D68C4D3
B152F038F5EB123C3D624D0FB01918E8BA87EB21AAB2C494C6F6FF275D1016D0
B64EC115F1D1E455CA8C5C8B7674C429EC7A00861015E047206C072EF4701514
195A43A81826D8B89CC1E1DE8289E2B764BFC86DFE3CE4E61DE2F69EDC3B3410
99887BAA698400AD9B37B073C31BC3DAD838663B3766042F8C23DC297E7FD410
C7D6917F61CEEAD9D5DBF8AE2BBD6255B328B0589C8D1CEA27313C6966EAE32D
EF611AE48CE6F5704933C67F48801C93F72BD152843B824961969AA1317F148B
64EFD16FB3061E4445DD5B88906B59DFE804795EBB813879E6FD815AF829D586
9F2C703056E8E8F7EF7B583368E24373A92913F95D8DFB1A69F6198AE78D71A0
3BD8ACCA8ED50D1C16C7C236C3BF2459C2C7EB9FBBAED9D91FF93DA9079BE723
2100FBD51A9BAE076457A0A9E830C0658485CA643844CC6A7DC3DBFB464844F9
D6A6BF415DF5818344B5DBBF22F8192430635B74CA881353E4CE103BADA0E976
4AA5880931DA86BBFAFA13291C28312DDCB7FFB35DC3E38C9B1A6C27A87CE961
E0DDABA61649AA1E4BA12378C6F4BD2B87F56AFBC998A8BFF455DBD4F8C7D91B
E31820EFE2A5D39472772BA555ED48BF05C8BD017B134DD4E80E63BBCF59D252
D989A249E6CB9ED4F7A4D8807C9D386E491E1E20F202321AE8696A2B452CFB70
04015912B246FC558D01FBDEFF342863F4C0116BBA79ED0974316868AE4F47FE
C164D1134B43DDEA6F428ECE9BA632E5F4779ACF79E494464447C416FC35CA59
D535567B2F7727AB09FF2E3952261C0205AF3BC52223C47281BA7C7346E7BE72
DB76EBDD3B6D382A015F745E9413590B9E2024EDF431B62C19D3A6401941DEA1
5094F4380B740727E2C73E5AAFA36ED9F7A8E5D9BECFBE4384E04B0D6FE88EAD
A92577843CB580B537134693F8E10D7441766534B13071DF8798B0DF87DF883F
9E2308FEF7CB96605FE3EE030F9D0103E1AEC4B9EE7ED89EB1DC53A32E47BFA0
8018DC82436F17CE838EF2FC36FC8D8EB4937035DB4920F0B8E96872FFA8CAC2
FD1A29623CB12869FF3B4A25D1A21ECA6D0DC687015B182F1811D000226A3706
E7696D31CD8A1776CD88A995C71A69F35BD0CA4542824B1F4329D051D97624A6
428E157752FCABFE9220DE08713B8F3A5B729DDF78BA585CF8613E31AF65E3DD
B4AEA10E8E04BE44488BFEC93D5370B05FEEFF8434A405C1A2E7250CAD208478
E26B5C3E7CAED86C85B5E190C5C8294E49F4B99E76CB774A4F81A5577BD4B255
CD6114AA6A305C8C2633765EB39B8C52DE63A06B1B761F68EE313DAC963DE599
5F05C27EB562B2CFCC6C8E30F658A9095000B8CFDA044C3E265531BD241735EF
DC419077B3882F31F29C281A4E27C5017557EA0AFB8EB0933FBE74940E3418BD
076773D3629BC541D7616E6DFEE98F0C2A1BECD6F22EAE4C7B49F65EFE082225
59DABF07BD61758C765FE329D55D9E2958A44170AE0A2CA61226A0CA58B47D17
7680800C41812A9C7C69C1DCB4086F18D33891ABB04CA2D32CDD53F0BB71EBEF
1D3FAB9CEBFCF874E4D394658B9062D5824C3AF67D0CCE1A4F498B5D9D02E985
B6EA0D59D1D2749D40D952A27047D6A5FE33D337462098578BCD5050EB47A9F4
313EDADA4845CD683F84CAA283448C7FF5400BFA745C859192C2623460AD1EDD
E9A34E92E3925484E3FA45344C7FD3D4D3A68B7EDE15B9E2DDDDCFD2BD85125D
C5A043A45C0B9D3C86A9A6EB8BC26CE436CB8730DD1D4D5EFAF5FA6A47330C63
B4DA8197DA9CE27348B9460926950090FEF8E63DD7D0ECA33C1717540F921AFE
EB849C78E9A641FCD2BCF59D5CD58ACAC106AF4B6A5A4E67422B208661DB0F0E
9413BA18F511CB3AFF92A63E47A10A3A6433BFC0E77047453DD1C7381D534A63
B80CAEACF1E3EA8C7A9EC5C3EBD3131AB23DE2F45597EE0694AF8445C41A12A0
DD5382793F0DB6A4D7DF929FFD88F15A1BAE76C6EEFC79C1304348487C2D133D
36D963BF8667C8DC3E83CA195EF6ED3B6EEE4110456758B49C4B75E97026A70A
7D06D47649CBEFED04B30A9C71A8C23EA2E1EB0302C214E7D6F7E62C1280E4A4
CFB85AFD46ED46CCAD840106074F69AE7C306C183D51E80D6154C198C0600BA3
DC7A5E8DF46D91337DEE5B4B48312E41D4BED4F302DB5649AF744DB486FB0D46
CE3D2025C9B6357B446B13C8880EF61E52087B5A8B43DF3613AAAD505CCA785E
E521B5D53CD63E763B4BCB3721B6370725CCF2BA061DE84855EC9197D9987632
46468572F84A6C7D9B93788DBFCEFFC16807D77DD30E9EAE57924AE96103ED1C
FA23A0985AFF7D29BC6BC4308BDB06E5A970F19673470D4663FBD7C655E71003
C12938AA734DC5370D03AC8DCA5CD34748A1BC13FB31B0EF2B5E662241AFA02D
2B39D2D903417F1035C93BA9ED147C12FF2286D794D5E8EB01E9169E93845117
CBE2F0B5980ABD47FB77D05D1547586057159EE81BF46E2F73407614E5B0D5AA
583BA3071A842560444831F001EEBBAD4BBF453C52CD273D67E589DE38FFAD26
376939CC85C4B8A8824930E256A366A29BE5ABE7879DB7FFB127700DFE753153
D715668BBC03B92FF441FC74C7773F68111CE4A0661E37442B04957F823E2817
2CB109A3F2D17B5AB13B75F34A2684FBE4E08CED552C09CDB80ADBAB2BFB7CE1
44DB5D6DB3041CFECCC768588BD38F0FE2F105BBCE9C307C660FFE76B2B0F087
D6458F2B1D9407CB5336010C6D6E5BABEF23430F28DB530F7EE522ED2810C5CB
192BDB67264C08F4AFE461E5A2EF030046700B475E00D41C13B32DD6DE92FCAC
F11FF1A9C5479D3C0E5DDA5ADA0D8DA922127B35ED09E2DDF1DA9CC23D2E57FC
CFD35A3680EB7E38BE257C895DCCC44269FD4E9F6F57FF406FA5C05684760739
8AB9EA0BDDFC44213AD960278AA498A967D890C295745B1E2650F77845B4EB6B
7378DFBF36AFE522359CCE236BCDE7898553FFCF7C0D7862FBBAA3043BD6D577
5CC2969CF4C47D4B06B2827C245506FAF5626A6A0F0E7FB15946544FEC181C60
5E086DA91CBF7425C2589F0956DB6D6268C6C952F62676F167CD6701C04869DA
9D77CAEB4DC19B20803148CED07ED01BFADF46DA47A77998C831CEA17602DD8E
D23E51542063A45F21700DDF82A8844499513D4D344E76BBCD8C0B06234AF5C5
9F6DE0BDA6AF42885DB9DE46AD8B2E69FE9481BA059418DCF929B98651AECFF8
506AD1C2F79B1DDE77815152FD4EF643BE9EC07DCF509AF437A2ECF2A65E4AD5
47FF5C6B8AB3C0920302DECDF87278C13FCFF6B47468BCD370455A98A239D58B
788D47EF32CCEA3A270192C296FFB2E49F5DEDBD72973EEDD3D9CEF5B4636A0F
C38087E3FA1A4B633CB6598F3F77F3F0723B3CED8B0B9BA473AB4B49D7CFAB66
AC05B12095D7F1298F80536E78834E416B248A6FE29A67DCF4E1CBFCE603260A
277FD9D0C43D019F687663ADA3764F11BBB2FEE232D419254F675318F6695671
892552007055640E27EF25EA34C5D7929A73D14C73CFA6D2924F7F4A343A759D
E9DA86D75A9D8F397BB542049539E501BE09CD83E8DEF82C70CD016F470FC236
BFF1BFB8DE41915E54DF671F665E5BA720D57893F881D795626291DF3EF87F02
28525FA434A535EEA888124B9AA8C1CB25B5CE6CF8F99399960F1808B44418CB
EF1E4DEEE67900498C2F9834799128DF2B034852C673ECC627B6331C62458523
B7EAE820C10BC35D42045E5CEEBBB4FE33760E8BAB3C99BCA59162FD934D3BC1
ABC8DA0F145289C33C65E4D6D12AA512DEB267C6C06AB90DF177913EC691E368
8E6A0EC0E65F5063436840DBA437589064E01A7741ABCB2AE2039CE16E1FE730
C26702E68F7D50F2B59D0B0A01076C2C1F2609D1FC87AEAE92E4880A145430FA
EDAF5D6C7BB6E40E631D6C201F2CEB2B654C09187C52F372CB9CFAF7DA3CAF00
3473DBA5C03B5BC0A78BE6A1CB1E6102FE69D3A9FE361F76046435F30D1D21CA
B19CDA8EC4D2120A75F8FBE6B0D64D790962336A11D44FC6B5E80C2FBFC8F75E
CB495B1941E759A7CA7AC9217989F985FD759D74577C6FBE9535A5203A130704
E651553C019F9BF0E9B31093AF70DB81A133E6B4D9FF2D3E21EAE328D7319ABC
DFA4A29B2E7457FD7C37F3CBD3385C23B418D688F3C9DD6CC12D7F54B18B7D05
2CCE376B65E5444AEC48A331D45080FE3B3DDF292C70474F1D9779D3750BA2C3
40B265B989E10F811FFAADAB3C186FEC8F3C29CB969639BF2C227E8BFB63807F
C36AB88C656F1332670CCCD54F9300B1A5B26121E7AE32E0DA0A034466F19089
11141DEB965BD6BB3D9AF82606615E4AAB5EDB62C8AC05616F77365CDF9B6A32
D8428E25BE761A5517957154263C26173F297EB2DBE76B37EAE625ABEBE9B212
AA6BF09C0206CD22E32D87C13265E7A78843F80CD719C44633862B102690C152
D4FF489E44C5390BA39A0DE57212027023944DD1F15ACC53824C6C5452E34A39
E05BFA77CFB2AAFD32A72092301A7A800E6B0C5982FD14E4E916D363E265322D
F14054C4BE21FD88A9327C3609D8888F174524917B756C1D540982730A18055E
D807EF70EBE57F1FB810A9FF25DF19A9A3943D196A412094119F6C7B84234889
3BB5450B565001FBDAF0D485BADEEDCC18657062F36EBAE1238214E41854631F
388B1327B6AF6AECFA67902D0150E797B2EAA43FE53F100DE329F2992ED2DD8B
E4396C9003AA6AC3F3561B1CA13FDB336BD4F041E9FE46C75BA737BED0A7C73E
ECCEC90B036F773A35572FE436EFCFCB58451F151BD82968B0B15A5FFB4EA639
44C6C33736FAFEC5EEF0795FAD09FCE908A5BAC001904C1FB4D0A379690DB1E7
C526F472736F2B9B07D0A865656B49A2E46D8814490617FDE07C89F68B7F2EE4
3906F9D4A04B99BC516A2D6003209D30974A40872E176EC00523370614897065
236557952E53E9B9A49E49DF90A6AAE92EB1B2F3AB6BA9DBDC17A5FFAF17078C
C55DE418D9573497D39114A71B48C983641D635534EC6A529CBF4FCB46D727A6
6D39AF29B751078551D349F269C24ED4E260ACD056257358B5B1B5E150E69AAF
6BB795029ACCC87CBFE7BED6EC7823EFD97218971819C58624089FE39F416FB3
FC68139B34D2B3900A8A6A0B93FD79ED65110B0037C9B5E51F9D2F17391003DD
CFA7A2678E64396CECE7B96908E286E47D223A52A656B1A57D8BDB3D7B62537D
A14915258158ACD595B43DD0B7A87B7A5AE832EC329416C6E693C523EA03BE31
C2CF0798E8DE9A76660BD4A3E2A78C8927F24C083340353171B8060DAE8A58AF
29A28A5E7AFF8DF1AFC5284405328F470074E8775AE6FACFC8F1DEEDD149E7E2
77ECC3C4AC7AA8B27CFF05C5E768115C104826CC10B0A8B90DE20F744D2EC8A3
0EBA8D2661F510690C4BBD74866FA993F67F9880F0F845A2D4495714783E9CB1
3DAA3ABD6CDDA0C7850A553C7C1FF72C1F2902DB13FC064304E1D523D2D201AB
C2BC9C88D9709ABD02ECED38F4EA6D4AC40F9C260A53DBD3433E9BA4350E69BF
F385EFDF93A480F32B4934A768F89217A3DC055A807F57BCD3BAE66F3017A579
13CDD7960CD3DCE6FDC0579AD9AF1AD37F3DD769267586592927BB429D953403
9326416647B3CFA0FEAC82A8998C0204D4F954529D2395D6191F328B3D9F0B62
800559760771873D48F813C093D52026755598740572F045B32289A2AE66CC44
A1C13FB8BBD4E18D4DD774E3357797A5728B46BACA35D941E9307561A0C137E4
147E76CC013ED5E3733553CAAF004AB4FC4EEDAAF4B51C1720C4C4CD3031899A
218AAF01719867D8DCCAAD77D8837021895B089D9E4A98B0953A98326A173A24
3C61FFC3830922DD3F4D91E6086844117D223CC2C4B14C8E3E833E87535CC493
62DBB7350D5408C621CDED6AC22293A666201A11E6E52A94CD52B8B3CEAF5CEA
7C3AE566DA6FC9118B7A260126112FB1E3B5437964E2431F7B614CD62017182A
B61C2C686AF072D547A5AD7A1C457D4DE11410C601C4044D5E4DA48D36959C47
B0218392F24C93D7F9FC8D64D51A3AA6DF9C9A3F4B89932B99826BB5E2F5B3A0
E56DEEC154BC4AB07447FE5D20FE12244B3AF7B1F129E5AC8D5E4046A7254B32
756000AF03E97943129A8A6FB15CB45BEBD9E28086E9FA937A009312D761CEA3
9A07DDBECD4672A865B536708385E438004E2B3F08CEE5A7E2394EDC5A8D3091
C99DD2D487D033EE9A75B7ED9E43439B659F9D94F97602A69B85F86AEC6253DA
395A55DED9117286BBA74AA02ADFAB59DE70F679945611D8CCB8AC70534E7B2D
1C66818F676D0D959F987B4513F382042F803DF99226A4FC31C9828CF2AC80B7
3CE2768B06545FE26E066A8B150E779FDD9DB73AEEA11615E7DEF726AACE3F2B
1EACD2E1727190539E12540F013DFDA4272FCF119AB56537E1028862E19D26FF
7E13EAFFC05484B0011D875C0FD73EFCCAA2C6A2BD03A17B5BC32050ECF8AFB8
FCBFCDD8F7423BB8FC091A088464380A32270F4981DA7CA01A91CAE0922A3C73
3FB9D45F81757CFC8ED6BAB56FDD2C80D89FAF2BD300218B879BE060706CA408
1CEDE5A5164195D257C911558D4437FC7F1A3C3D10CE99575F304E667E95206B
16E8AF5B416BB5D64953720C98D0D0A6F05450569F872338E9CB2776844DF1A4
97C37B665A54DBB821DDC0F441F3314287B8C4C229DEEFE1A56B940E651750E7
7BB55860ADD7C8BCCD30CFAEE905E9FB18028C82D6C7A924C43AAE2BA53F0927
DD0EE9C6BAAA488BAF0A3FC0D648E512BCF1FD09FA248B96BB63E5C4C84B3054
A623F973471DE50E2254753A99E8DFCAC4984A175A31BF269CC8B8944136DAD8
8F3E713BF819C0882E5D58190746E586B04C7A425747D7E2C29E0BFF8EAFC66B
E0D1D3F152DEE49A1E9697EF0DC609B60E61A42B0557FA7B5AB36FD3A9BA3FDF
4CC7EBC0F5098E1257F166139D3B7E9B1C56CFE24CF135CB57C09805AC3AAB15
6E9E4A8A9F54772BB334930E2322DF3632F1C8ABC3A7408C1719C88FE99BCBDF
3B261FC98B68E1BA625895F0E34DA602A89ED3C92CA7104F632C1026408BCAC5
6FA467141678807504DC4C0441410374A09A5B30AC0641C15312121352ABFD99
780E9EB8998F3EC5D30A9E2C9D39051889705F38F33EA56135FD6E2E6E467A98
A90D0EA7D4AD3D50827FE95920621346DE6CD3A56B57C864FE77E50957814F1A
CC4A7F7B57F2C3DA890293BCEBF7A217F0B25CEDD9DABDFD4F8C516A3C1E228A
FFD3377BF4F8A7BAB7869B69519A53E43178DCB2988718E338578927CBC7C334
D33C8560B5E7EDFA35608A8A6BF30610C39CC394FC21FAE1111C8E0CE9348784
415AF2618FE6F9B9A4D8C57F4EB9E819607432E52B03A7104EE3AB85392A2B32
10334A4C7EDCADBEB1CD381B6CF8974D937A2CC4BC9EED984AE4FB4650F0487B
73DB3D9295BCFCE2B3EFE95EB1A205FEBBD7A77163089EDE186310741E4C07F0
A5FB9CC39A98D9495C5C577B433DC6066E003DCB833F784DDE578F7512652092
AB86FBAF29D8E5D50D82F629D2F718144AA5C10CE67F69F97CB6157A2E124C3F
FAED62107D1F6476A80653F0900291F6430D1D26A419E891E8C5AD303F54C587
F28D860255C74A5BD3FB64946DF604861330619D26BF75C165730C0904CD9019
197ED80B92177511414C273DFA1E7BB95539000B473F27AC91005BEB9C0E2AD3
301E0F6D7F187CCE2364670FF99ECCBCA85D399BE8F26601EE4B3D3689426FDB
C4C3BF1BC1239B6A627F149C5FDDF72F853EEC0EE8608B17B99A769875D705E2
77D2D84373D01BBD0DBACB7EA6D3009F20BDBB6E6BBAB0E40AC2FD9CD644B86E
F4166F064E44395A86E6A84789D56A4FABA2F4A3B45DD5044EA6F0D8FD4FE857
894D8EA773350AF3ADF9F8FFB5A77F123A28A822E489E3878013069E9DDF7155
C504FAC9083162F848E2B8898C67F5DE30884E6DEA6B99697C22C3FE58DAB697
6AEDBC72317599470FF6A3067100393D415D64AEE06B79E1DEAE4A2FE1EFEC2D
004DEDFC04D3EE9C4CE8A3D08916EF28A9B2AF7AC60A85FE76836F66CBFD66A8
995E9A518ADB8F8E7BB7EC37A18121A85880386F545136CFFD4FAD3B89627AAB
5729451B1FE1292DEF0634DB01D33259BB716DB2D49AE804DEC057A85EA24ADA
111F4CA5E8FB4EAC7BC1F2BE3C28C447CE17E8B9ECD8CF2C0B0954392AF6E9F4
036613BAB5B0B9DC8B4CCE86A20AE895B1A7C167EDC1BDCA3375ED8C0B9EF2E9
A4DD76EAC1477D781D737E97AF9B1FA9B9E0FF5BBB84BE5607781EBAE8E9DFE2
1E4D253DFF41267B5252F6905D13374B68132A3057A54BEA33580C5F4FE96311
7F8C92127206FED850ADC3B4BF0438088F84AA23178B60E4463479CE0398D3B4
ABFB47DC4739BE6BBB65B00721E19419998BE823F03C4FAAD55AD8749010365E
8700944EA24669321FBD705ECD4C342A38FC15859D8D17813D420D9CCFE49132
C9357A92055DD557913DE8E26E48E8AFF748135323BE30B1A6022E25B3B810DB
2384F3A22B8954922366DE8FB9FB5878E0A02CF14EE0AE5C3FF802EDEB9B3525
C7DCD0C3807EF93314791F00E1B7B0239F96D881ED29BD6F05687DAA688EA5AC
6C44C429C833FABCA726690DA6F30DA9051E345BACD0DC6BCD32FD6801B199E3
98968B839E2D85F672F8AD986503F3D8430F2D79ED57464247A2351D43684CC4
21FAC1BCCACD998450F80AF3352867C632F89C6AAB5A80986512F0FA82155AE1
558113F98E9ED19B3702CB8E598CF2AEF99105EF63F490C3D176407F5965DEF8
66331B52ACA50DB853E3DDDDD7F565CF1CA22BB886C9E6A259F42A639D952E78
CD4986D92811A398E8C5E2DDB196535F9BABEF0D6BC5FEDEE18AB24DCB933B27
8FE479FFDA49E9ECE2182CECB8C6FBB8917512837A9743DD647470339B3278EC
0B43476F89A48467CD315BF7EBD1632DCB905EFC73088161F3C0485DAA8F786A
AF03A82D5F0192A9DBF60BE2C61DC22B4B52D8E9C9A6A5AE154E1F71D8A52798
ABDA8A18B3218F30BD2BFE39E555EAC6760E7D19D3F5CE44273433F7B807DE08
8570CBA4DAEB7579B38E64331C2FF9984018CA0C7AF81DAF1EE75D383C485EBD
4F021F190835166A6FA7F12FA1F846350C20F221532677D543FD346354029B0F
6936540C627FAE57A71EBCE160ACB6D82A1F46F6B2B23D040A09754C45986BD8
207AE56B9EC0C482CD536E21FB3570CAD5906134C581F1BCB351A147D8285895
17D33B7BCA8E54B09050D2304E27BE3C274D7424F6C73A36B2BB0D56FFC357B3
19976526BDC1AAB57F96201B50A3DA38B5E47B6DD5BCA99CC43CE2D911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE20B44A2BE90
C36DA2687DCB7DBA40F6B99E51650B25F4E51941B49774F8273B5E98306C87E5
3A03E6B35B82A143A76D58265254C13E6E1A9D0DB17A1D9294C759AEDDA6D4E5
CB498912E3AC15AF88E6309CB00AA35170DBDDB43739D05EECE15112FADEAFA8
DF7BB6157C5374FE3D6DE742A6980C8C55A9DD737F2069BAABD6F1B8A83AE84F
8ECCECD0CDFA74FD3C4FA486433D06974C660A27F619ABC0E178D15C8C217270
1E6C1493BDCD772A1B9A9CB8C1205F7896343973FBB99481B1A6B865510896B0
133C9D9C98E813E0B142027A215FC75181A42E65C3E1CF5269B00E31FB47B4F7
7FD95A823A176D8387CA420A441980D3E866604325998BF88E4D0A27D4DE5AB3
F44DF52033A1EE28195614165597150B847315C78C3871F7DF0D5B8BBD40BB58
C6F12D16BCB3BE5B4EB51671AE9357176D5AC14505504C43A33EA29CBE2AB98C
D0305DD935D8F0F5EE3205B6BA139A251BCF348F2A19EDEBB709068CE066960D
6D0E7801038F92981250C3BDD77F02C296953F4FE2ADEEEE96C2499E4D5C40DE
EFB9EEC8853BB3E2BAED185D6B4A80C1BFA827E4F15E623A96FA4C467940BECA
B15E072F4D80E6FA1492BDE59F46CA026F44D74B0536463124DFF7ACBDE3E03F
7063896D3B578B229735564F4BD7CF18486E33C6AD14424873AC44919FAAE46F
12CC16254F52A26FE47FE41504D3E851A066522DD56FAD7828E5E203F328AD95
5AB433987B2296EB3B524700CCC455A521EFDAB11378FA57CAB556A4F4B23D7B
C51D926CA86263840FFCC3BAF798B72E5EE24715E42D9D1AFFF7AACCB3BE5EF6
3B1C4E79B49A3CDF145253BD827ADB43D157A1BDFCB3233B9397EA3C8B3217E2
26202117CFBE3DE2C6DBFB0BB25BB138BCB5DEBDD171A3100D4D69D8A56566C0
FA3EAC58EBE319E7780B64A40FC4773482259B8CD68CAF88862A991C7D684414
A1851EDC442490FAE839FF9DF1F980D05D8533158A7D1941871D0016ED45E8A3
C001792669DE7F11CE8CACBF994B414731F0AA40DF1541AC1F598A5843D1CAD6
C5A53FB3BDB005D9CC4F9085AF0FB4A3861C67A4552C610497D442E859E2C91A
C6A66611427E0CF66D0C4D588B8B2DF2FE325EAD0AA769A4E94594F9B3831E4D
F7FF4491C8A266242D2E055113753D000B13A98CC0339E144825766BC2EF9A48
78ED27E515FED0D26FEEE69602B2BD58D145124F6B96B585D142F943EC5C1B04
0C1139273FE87959CBAEA46819A8980A28067452810D07BA9A666A01F4F60647
C3BAA80761E6D04B760635771EFF726D496EDC79C164824B6E3E3C3E69366B75
9B352F6AF5B900661AF17841FDBD5D61718DE52EB4F11723D1D647621D5D682A
CA36360AC99B9205E4D80CF55870847A5F88BFE7F399175DE7D08904B7A508E4
89571C79B533F45CD6E6F5099188C9604E2F35B3EF9BEE08C93A2ED5FAE581E0
4BD937DB4BE342FF23E08F149D9FC8A4B936B5445A26A913FCDF20A0A31DA98B
FBB545B8AA7BF24E83A08486E779A149C3C0D7EE148C9CA55FD3601DF73CB1AE
4D50A2A0557B3F4FE24C8FFA00BC0CFEE246506B981C4C25D9FB5C08D065EB27
2EEEA926ED5C68257D75A455702A4E56A3BE26B082645338532D192FA4ABF53B
D1A28704B84939C7E339BA3F4038C39721EA5C3464B0245E02013E1666DCE850
44D2187BA81C91520E8F904FF4D1B22F7BE492FBE5FA682AFF665ECD5FCFB5FB
379B4C969E738AACB9AD52BCD0D4537AD79D24DC1978AFD879B459DCC148B247
FFD4D9B82BFADB2A57FEE613EC3AF9EECDF534BFEAE1993C6EA14DA2AEC67EDE
08804EE6F29D00C325F9602E0AC6E2DE0E5F9094E55F65DD77E8263B967745D4
BF682FE837974BA4A855C6A8CDF351FD697E94ADC352D90E472F21BBE055765D
AB0DAC8449427E9AED2573FECF95E68FE5579E0720E18A2BB150D25BFB1EB275
F913649F77D74740BDDC09B2FAEBE1A7FFB354588115A2DEBF8CDAAF3BBEDB05
DE5BCB73C7BDB04B58D5DEE0E6B465BC273668725BFF2B6BF271B4E43B60B67D
E7676E4338BB923A4E3B2F946324EBDE7EF53912ED78B7415374AD07575B2A05
E4D3E10656D67DB6D7E3D0134F6C1FC75839D5376E904B45150CC894D3C2B6AB
DF8794929B68C055789F3E9C32180B57ADD9FF1D94F0F773B7D545F7521C2C0B
0340F42BAC723238E38676AFCDE9AD568319DC6F85E6AF68ED6996339EDF1405
14463E4AF6F8203B584572BFE5E7A4BD424CE681C93A77466C064827E8CCA4DA
F7D623EAB6D0E5EEAD68F99F8E35E5A8BA66C0F8D4A12FE6896012167D762B17
9B038D83C173FD9FA614F46FED6BE13063E51AC2C563B89563D0254194DE0006
81912B191489EF28815477997EEA26D31D194DA347C0CBC91466850581939745
F9D5EEEC8896BD3E465AA29E75A4ED632E4A89ED435F4F843AEB0DE2D08746E1
8A701A9F14A88F147851FCD85007E977C6EDD006E0430BE6149C594986C30DCA
B511686A2C699385B3CD763CAA61D05224C9DBA79A84DC57C2EBDA8E422A9550
A2E13B885CB567895A10EDB5A60F2B635A8F0188A64E420DA1F927694FD82DFF
58B3F223ABF692342F0EACD9E646EE7BFCD2D8C6A8AC56BE26BC139E5A805CB3
D9FCB29E4B4EF4B4EE155532C9DC1CCB2F040914451A48CD6DC39120D16ABA9E
140EF8A166071BE79D45CFE4070F971EBE827C4A23263E0F00CD0DE83A89CB97
C7E6E5D5C17A42A296FD7A957788E1C524B86A3E83C8FC5399DD980DBACB3E12
999B66693EFA5483DB7DEBBBDB7BBF07A199D5825CB5DB62159E7564759D3EDB
1720DD8F6EBFAF8A510C59E9B792EE8F3B330F1AAA69E59F443CE8A78D7D5101
8E340126287160D3AE846ECF26939401F1CB3FE4E886BC531628CD9F5A8497BC
33E31071C96CFB69C19BA99349929273F5BDE64010F443E8CFD4236866388859
3BE7AC0000B2D49835C34DE75CAF4932693BCE009A580D0F231708623163ED2D
B636BA33208269330C24A4E3C2D18861E5F87CDBD81FACC7DD80091F968191E7
B7FA2FBF555BF349F40C318AE9BEA6270F8BE9F7891973BE329D42D7B7B61296
2A9DC4B8DD8DD87504652967C67D20D20E82227E9165B5363270BB0B7419F52B
949B4107C0FFBC879A3A7321FADA299277D8D09E8CEE8238655E1D8C8ED60E3A
F7B679228139BF6DA9A74948C3504D1B05706181782CB418D2A2842D2A8D814A
3F0622B58626A5BFA57F831F6379060E3650CDB2C87FA552F5999A19F8BA513D
85342A87AD49F6A5BCEC12999BBAB002791E2701BB22DD1B68A0A278E02684B9
07CEF368DD836DE5588CBF9C76C921024B55FC6D5DB5BCCCF77226C214A99FD2
87DF0B96BC386A0DC2B658C25806C67763358A9D892E5F958A4D4D40C21D7643
EC0724B2284CCD6B34423BDC901D7508E17C81A5199A57BA3B720C1693D02E39
A9781FA53C4A2010D694B95DA29C67A81D03C05564AF788C94E3A541677336CE
9CB590A8ABE634D07B0846A022F8C13817FE377B75CDA8985F786C799656ABF9
DED3C1E37A5968277FFB26A6046D8DEC20E6CFA49B90D498D0F84208079D9D22
84F91BA0763C28BD8071C97999F3EFAB4A61785C42D2C746A98194782D9A504B
2A0A92D4EEA12E983E07BFCD447294B1F96ED4AC5B1BAF7B888654A71AB47994
04494857CA9A4EC9BA99238B7872B07B6A0AA72E26C987F09AF3C605E252087D
51148B2CF46FC1B70E18AC341B3946FC668C915A6423433A1807BF025AE1633C
8085ECF572713053E922283847296094C200C5DCC0AB2D5635020D26B524DACD
FE0D8DCF2F19BE8C3ECAADBFCF366596F5E3DC4BEC30136B8BBA284913F97994
56B6E5B9BF421E82415746B363938E88CA325D77A753952B33B4669F562097A2
EC39A7CE24DD0C15BB51DF724B051961AEFFCB84D6766A260CE1F30EF23FFC27
5EB1900B738568405CAB3D4CA7A97394CE61440A1BBB939DC3B2F7E23DF36325
C38CCA699BCEED8D80A7CBE0475A8885EC6A79394CF44EF8421DADCFCB027E36
69F5FAAA527B45679B55EF87316782B17F7642785A8FCC895DC92577D42806D5
DC56CA0D54C0C20B9DECBC8904958AFC504F7A749FDC9FA146A946AF1032B58D
683AEB91505FAF8AE879CC790D4E8C2E7C08210EAC847DA1D1A25E9FDD0DFE65
ED1FCD4B9BB4318E4890D453802BE679D3837AEC38680C0EF7184211C8795554
5434329E901AB3C5279979BC0426DA3CC7191B07428ED37AF944D326EDDB8082
0D550FBC010FB412DD0E6D083CCD272E8A5BC5FED4DFC5301B554BC721F24B6C
B390E97E52B81F3057209621E7A2F40B50A4BC239CC918F7D2E8FE4BC43AFC8D
57D4D7F60F0329462D2CC074540FD1991881327327B90CD5534097225899D543
E1D3FA90C418428EEA7FE8502D8A61B50F46B5B9122C6E14958A6F1BB73771F3
5000FB9EA55A132F9B151BEC31ED40882529CE5E4111CBB13CC3AB7AF1B865C9
05F11CD69E004F55F754A8E2469082BBCCC3E63B027A4C344B427B56ABD8AE83
CD6836A2A624A32128393B9D463DFD28BDA1A81A0D8E75880EF3D7798AFB3431
A9C936B9E10E65F3B8A875957B66B969354B600C1F59DBA1A199AD892C193040
C8E053C3F1EE0BB0AAAB446819939C813423F3638C6FDF3A9C1A993DAC394621
7C12D9286E6CB44E9DCCBEAEDAAEF7F7DF4CCAB29A5B26E9167045CC6B08D5B2
0D8896713764599CABD316B5BC7684724C6673502F83EDA7E5D330B263978922
8AB8DC8B253A1FA32C7B2171469DD7F631CE8016112905E5FE16FE502A429E4D
A27F1228CF4ABE44BB355F7068DB927D67B3DC640D04B9BDE5755BC0041577D3
EC2B46C468C443FB502408ED3271A2EBFBC82BDC7A57879058AB6414905BF4E9
5500D0B80890B00376917CFB3D917EA3055C85D171C0378299712D1177AA7469
F1EEE51D0A668FF731A43F7E85F640CFA5E7F8BDC7A646A5E2F2B50D7E73B294
19F7312094C3C340E4F9B1D89F3359BC7621C7DE55DC385B2E2E3B2B5CC33DE5
CE03DAACAB24999757AE7D0B9CF2700A833F9D90A1203FAFE9020D5070556101
BB3DF341E7B705B7CA58135F4A3177D7E746759CD77594B341ECC6931C62D973
97E340F61788A6B419CF4B3F2BFFB49B4B37F8F4892E250E98F4380236E11AF4
84E2FD67C1EFF5F8CD6CE73541A8C0D10C0B97B503F0677601A35722C36EB216
ADFC24BC9C7C8F365B489C54B4784DF9896B2790C88C0F2DFAEFD098374854AA
3AA151BD54DECE76FAEDD01067624940CE5E663A6F3DE8EE5EC67149EAA00EC8
658FF2346B63A6444A311CED27BD539F7866D7B3B832190B1B0059AB6528318A
5DC7648A46AFE9EAA17E79A2B387285985EF99E3302B40CEB35592BBEB7BC05A
E15079ECF9A6E004BCD28BE99FC267511C6C0CBFC2837AD6C0ECD601EE0A71B3
1D60E469D73B3D107D4E9FF5F316A67753C113EB226EDBFA602FB12AF527F2A6
3F182171615C86CBE937C0C3E901131D575196D49412D0A4617F3885E9F57194
0346E1F33FAD7716A552077D0A7584C71AFECE41946AE57589E52A9DAB9B4C13
333C0A1666241125457C9223404D30D6C17BEB76A16621361102D8C5D2ADFB60
F74420E1159DE70A8E253DC0FDC5A97FB69444911B4B4D6C2C0D898787A43C1B
428B8A171E28AC104328A4B90D93FA212DAAC6B0F5976B1C2FCAC4A0B15B983D
C795F63E7E365442CFEA7E3A98C58EDBF1AE8B44DEDD7C127D2599418E4020AF
AD9B94D7D8641D882B335BBB3DEFDB921C74394F8CD43D3E362E8FABD6772996
97480D55F741A018B139D1380519B5616B704E2291D1B3819F8EA21574B88EE4
A8E46B80B6A704A0C274D99B8FCE9BF97A6246D9D137F87752CA18F8147E9831
75FA450580110EA03F9F5A7EE4C1FF02C1A7A7003B478855D76CD3E8D71ECD5D
C0E63DCCBECA12B839EC2CBFFF7FC9AC13F612CEEAF64A520FFB62433B1B36B3
A301DA06FE661A4BD09EEE8306EAD8E149AD5B28578E554F7DDB26D77984A9B7
22E22B133E9F6AAE0CDA18F2428EACE52EE14B5FE74A52868FCE588E1E18810B
CB001AFB8F065FCBF8EF6BE6575E63A82ACEE79613DD66EA9EA94D956AF7ADAF
6F31B5223FBA27CD4F9D6D60195EAC4220B7FDF85DE8F0EFD64AC7BF14B5D93B
49BB30825F972433A4B91739103C034000B56497589A27735FF3B9EB0A1BE820
6426CA441593911FACB51BDAD45965CB3E4CD451B5A1D6149A631B1F77A50542
DEBFE49BE6CC438036AED93D9AFE10197B77540922501841A4F7EF18CA86AD20
AD76325914F48614807D539C91F3FD1AFB8E35446EDAB21346AF2FEF93F76296
D1C86E153D774B9B69D5B3E64D4A9E9491D4100CBE337BCAEB58D4B2EE599A6F
6A9747787AB8FF44FEBC7B58334F98D78901B2EE7D582D640F8E39492565977D
837E0779A27007A0F5445F03AD1DFDDFB75E15EFF24435371F2AA523BA4ADE32
5CE7E648920DF308FF9CA224CD6E34B28002DC7E74C22192182C5D3BE601C0B2
5B7EED40CCE32031FCFAE2737B412807F7C9E6494D0044CCA49EF4F7070D60E3
EF038472302B58EDB8556D0040083EE37425A0C38CB958BCA2B9DDBC8BC0FF14
DFAA5E911283141A95222394672BD2981221E491ECE4FEAA88CD1B242ED41737
C237A6CBC815C3E911E5E3D25D0C32A38F72831C12A52AAE64EB28B620A5EB34
CC8E514CF414C81808DDE499B5BA7BE0A37EB3D69F4B68CE7A505945A8A74C8B
1939A6DA38FCF89EA2BCFC54BB19612981433EADFE1A499E88284D2FB544B7BD
B637868345AD81C90392A32E43FA49F5870695901E686D807DCC388FA13E32A1
24FD8EE5C6C240D3CD3CEBE1A6915BA90060B824F67F4A68120DDA56FC6E466A
3CA47F0F2383A606DDCCDD7149704FB5D3154D1B4B68909D2EE97723CE015955
EC57A9011C0DD80E0C07A42DCC0E1BE4BB40B79FA79A76956749691B0E9C8A3C
BC66C2FA69969D54CCAE2FD88F57F16B0103D116CFBD51821884D526E8D6153A
F9FF4B19149114134BFB10D1CD4AACC908540C9F6C3AE6FFEBF2CC7849276A1A
AA5F1598EC7A9A573A79CCD04A0E28C0A71C1499CEF50F2E8C9742C8432AAAB1
9E4DCACB1FFEB7DF2A7921D57603B41B9AC5E0FB1EF3B0258FA5B1E93145F56A
06B7A32A8770B7B2AE12CA40CE4CDCEB9A49ACA9AA960B45B053079246F09B1F
8BE89A52BFA2DC3CD6C3C4F9785345DC3D7A5F085EF70FB8DAD2E48306EAD8E1
49AD5B28578E554F7DDB26D77984A9B49D0137FE1365B3985DC2DA7D7E686193
37185BDEC009B1C194A5B78268276EDE3015BEF3276AFE9F894A786635A2AD15
5659591F21DC0446A249375C2BCCE37694DF8E515002FE74B02B3D0C6B9B201C
3AC5CD3117B29102A0926A8E18E1838F4BD242BC436914F8C55BBCB427529721
9F568B9ED225D9D69B6581864E351CA800EF6352272077B3F0D608B7A4B741D9
8D6F302CB1578B0EDD5A5C71139A757CA11233A368C666168D45B8D27B595658
D5EB52D196EEFFF2D9E6B8CE8CF9F32866ADCA85FACD7236A540F2FCDA575E92
6B66322279567FA1FF6AB9E91766C3F3E3F3693001CD131D8C3330918BEBD962
04FE1803587CAE703571A817E2A7D1FE8496B76E5248A3CFF93AB49D0C265EC2
511211833F8C475D7BDC3959C3347181F3B3D95ED3FBB8E563C2CC64E2DA3631
AB809AE436318A758825ED631CC7897D81D8DB5E1BDC5FA5472DE512E2CF2657
A2CBD51A828AFF6D632592EAEF5EF118DE0016C0BAC2B6E9E6B495C03D2A4FF1
F5A0D2DDD0EC0E0A6820937C4EF7A7AB76DFFD907C8B8C50EDF382DD9A66685A
D18B7648BDD7170DBF7DC6E91446BD309C11024D751597C7C5D25EE9D241443F
85CC936AC92B6A60DF390CD8361053C9A032767CA7E6BE9DAF285EA8FE20DB1B
A27A95DC21376CD97019E10B7D56AAE006C3426AD987867C258EF44DED6E7BE1
A90282BB20ACAB6F2DACBFE0C0E5F2D242B83CCC05D2B4BC05B37305EB9E7ABB
45350199017B180CBA3A79B87815D8BA1CB39CFD6D42F87C10FF7BDD24B75793
43DA5E5547E88021B02A5F8FDD7480FA2A14FCEE4706AA003DAE9F92D5C5549D
2D003906F07403A54AAA87A7CC1465CB48ABFD9A8792838F3448CE51DAE8EC64
77EFECB267D97378E31F99566569BCBD30416E874194A2C4AA475A156096793E
F55F660BA0F8059823BD2AB80BC9DC78BD724DEDA7987B19F4E76C57B6AA7F5B
3BF9B315C9C46AA3B83C633E460B03A42D3FDE9E9245943A23627AE0C1C34B5E
6BB15175454F41DCF28BEDEDA81A4DF29ED7C8C7FD903BACAFFF0D204B0D7C71
2C1367086F0E83C9A242C22593968F58B0CC38C3AD299AEF4A850A8F552B9EC2
E7721EF7B802507075C6FD56077C00902CA6AAF0C12EB5696A39797AF1895CB4
4BBCFD5FD8B3D978C779AF8848058B25DBFF32CE5C9001F9E7A0149021BE5A65
DB754E14D890F24A3FA8F72733B7F3B44F48E78519E114A8BDC93D400EC94146
A7254B32756000AF03E97943129A8A6FB15CBE4959E3B776BB4B3F82782A7672
01EB3012C24B426C417ED8E4F1A76FAC74C2492E528D5BE94FA2DD0036C9CCF9
671669E0D271F30024C0488C71FB30791F330A89ADFBD8BEDF360492CA1038FE
A46B19FC8F24A1185669AC7F0AB5D8DAA2ACAA5B048E484EC119EE29BCD29A72
4AE4024D5B5A6A25612F7378757C24F20D94647776122A26396D6BA969B6CA88
A589DF7B468AFE82FBDED6676F8C9E0B72B2DE696377E02A43FDBC78E4627ED7
9B16862D939F3A363FF7C157C20901F88098B1C87175331A8FB62F312B7700A4
1BC5F00137C6AF5840026DA68D8DF87CD556764554C339ADC11FA69DDC5020CC
3C14EACE61BCE6EC7A9FED51E6E532844BE64C2DC872E0CB9A9D72170B2BAFAA
C7A82C1DE8BA3457FE240A987AF9575F5BBDD275855A951713C1BF3436F798C1
16228D45C44EF0279247352449FF4375CF967B451DEDEC8689A98633C9B0DDA5
0BA8BF8BB972D7305DF183D2C20E7518C879034945422806A959B629EF744475
EB159541FBBAB23ADEF3F64A5BFAF8497205D4BD5B22117BAF6A2EA0701460B5
61C2F0CDE5049DDC67AB28F53543E9389FFAD868DAD4334BAD9913FE1E7636EB
7B608D2AD018347DAD3F6953A4D9D6A7E2A9CF11AB148437C7E8851AA373EE16
82014325EB6F241DD1EFE7AD9398CC034F6E45C96C8FFFBC318EFF3DBE645DF2
E6B90131359A399DB51358577B51E927AD0BF2D8F872122B303F5861CCDA6E28
C26D103999FFBA2E54C16968D6B6C7120B93B66E01272DFDC689AC57A8B69B4D
AAC8F5653FCA6EDCF6B533408F3D73329A1355DAF2566A216246DA1169CB6049
61969AA1317F148FAF84F9E249F0DFCD212314A379EBFF13321BA7E3A23AAD62
8143B171CE29CAE9562D45218EF07DC7F74A0D22FE331CE2F890851EB3E99946
DCD9A40E25DD883D39686B170668C4624FD1A83AF7FCB128EEA482A28A5F2C66
D747DA29B54CD2EC33F618B8CA36FCDA32FDC097B192A13CA8F6A687ED471B7C
CFF7848A25850FA3834852654D945D0A9226ABDCDA689F202F60831F7B4783DB
A1C76EBB8D533BC804C1C8059928ABE24544F41569DAEB21878CE90225F47280
B1FF706DE6C5DECE198EDC7A5BEA3F41DC65622EDFA8E6EDE9A47DA62658B43C
BCBC5E8F5B5120EAB378DC015F3AC6510DCCC4687B7EC4B6153F655D00B1ACFA
385D9CAC57566163FCCEC2157AFC8FD8B178946D805BC78580A7EF7997467C25
4D74D509224226B56E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A22A818593C
3FB192661D2DD29EF941C0FFE601698FDCEB9D5111D4A151152979A546051AF8
6E03D22C944CF66D418F3DD68C5C8F24ACF262A36A8205C68AA0B892E2BF583E
E7FC13D79202C898ABF8814F6A2E740041BB1228B648C4AD00B46C36448FE2DB
35CB45276DFB339097E9EC7047AEDBC9B65463A916F24547591825062E84BF5B
FCCEDC1F84E03D692B02A2B072252518FEC11B39FBD39021E1B6F5F8A48A9C98
B34D79C81D40574117146FE4B05EC95761E9DA0209FB87B7B7999137EEDE3829
DA26F1FF05FEFDBD14B53D5408091D6039FC4977E525D5BEC77CF2CE0D07E063
4D699E6C291EB0507C9D25D99E45023ECDC8D71DAD38C0EF448DC010FF32F01B
63640A3886BDBE4AA90BC15F609D33C011027C085CB99911A1EFBDE44D5440C7
4F31670E47560AC3B6A80C385903B44B73A25E9A4E9A5B2B808890A43D9E7F59
104AADCF79764FF70E68B149014BB6E8E6BB46A4EF699D07E116C347ADEF0905
9E7A5ABA2257E904FBF3EE8286A248D2752206F0419C55E36B49145BF68F141B
23918EF93CE8C1E7917309FD652A4EC5D1D95BC23B73A2C221796FEF28187AD8
3BFCF46AE7E876DB7BD633B37F96031EB1EE1324369FA80A4723E484772E5CFF
D05520A205BF77E16D1B0387843CD39A2AF0EC9B5167725B9B0E99761E066F7F
CA3E57C46F3F924AD3D83219C281C28D03EE6A6F5DD566CD2A6228577299FAF9
0989AC7914AA361965E1876B223B74553E18AE14EF37FC9FBF85E97D8D60441E
898B9240AB3BC8F14FBB57279B0CEC768E81A1A69152E89EDD1922C10A3CA1DC
2B0BD7BA4A8F8A09B5D1B4520FF18D626A206F1F615DF055CFE15C8BA130EACE
E40AFE2068FC618945860121C4BF9C536F3570E658B5B785D2AB6863AA16D6C4
C82EE4AF7AAD7F0A09E3594598F9D3C98F98210C5DF95DA0CED5D7215BDD9103
0793B4EC86011CB0106EC22428ADA49CAFD61DE93B05BCC93B20D730B43691E1
49409C10DB071533101FC55441D95220FA6EBF2EF10A76FB4074806495A0A443
FDD17821A60CED6694F025FED299C4C7F8B077C2DBF4B87A65945445C012E4A2
EE26383CB45E7393AFD880E6932546C8A4CE88818DBDE72D030D8E884D315F56
55CB87214494EEF9B605BC284EE34062E3B392D2CD31532C6DCCCEC733780A7F
AFA6321B6945B95082E1FB3C5BC149358692A287F5074A8C01BA5518911789F7
767BD6366ECEEB4DEDF80BA158F65C546E9ABE7B6415B64E2C859AE6BF5E56B2
FAEE303A56DCBE13825F41740DC018A7A65FFE7179D2096AE48F387E2523C39E
DAF5CD7F0924F584D795F0F6181665059432D254A9DD01B10C294D431F3B1F88
3CD2C15E43BF7EC95C16EA2341D5A1054F0690D532709F7A5DC180608370FEA2
F20521FBF91658F24C75154A8A07D01FED1C412FA9813664082503DA2F8D197F
6F40CB8387218CD94EF127847A48B648FD0B62B0F7B01ACA426DB4BC12DEAB10
227260EEC9FEFF583E0B581F7CF09A046115D45493F7A67587727B64D2D565CB
B175FA168681C055D562FC34461835D0FB7A9BE1E3F083B68DDE13F0F9671B2E
7E4B03C30FD2970B441E2C95095C34139C48C83F18B685A3BFCF8F34993DC602
AB84EDFDDC647A3C41FD3DE85F89C3EFB5381856F76E79BE7F42723C95CCA984
D8E0B9CB64471AA58488620156738617681E0A664D2287F72DE27EFE633C28A2
F142B8069EA0BA7A8CE3B177F3E01D824E1ED5C40D3C40923DA150C493699F0E
682639B1BA26ECE28D9E58369BD6AD8A796052070F4C578076ACF8B6F0D4F064
14757F99246C6DFEAFF11DE3850A34CA320FBCB6540E7EB3B2ED0460F81AB38B
9240BAE84427044F325AED5CE3785DD783438D89D92DEEF30B110A078FB8AF1F
080A993C3C74871E4B7BDB2602D07587AC7AB95DDDB1F2F0DD388E0CED067B79
2A1170A1A5CF40319D6339FB76BD776FFBE44A0D870B50D5C08E42C27909E1F3
D8EF686CFC5506C7C15F6B9D5EC69C8D84107B3D413173D9F296B3DD186F8C3F
8658C91B59C58B51B358F18BD84BB1AA7F88CB97755F3116CE5E9F6A43919D78
DCC15004C087434725BC971971CA9533168304814BDA92D7BD7753B5583F0893
17A25B1C777C39B0EA1315286D1EB7A024989A6D910914C0224A700E1245ADAD
0A9316986ABB9A3BF36665834C3DAF26E5A7A5742CEF358C037BCF159C5E7609
EC3AC708FF6816598772E12C1B1C06E63B161012FB2DCACE4D50CDC063414811
53D90A4669EA1BFCA7B9ADFF7F4ACC6DBE671126FE078F52AAB2E70AAAA7D87D
8EAC69E3C8B77D780EF389B8367EC1D34FFD40B5C0041310556883CEC750C615
EDCBCCDF3EF10B46E0963399EB3291F47FA0A05D57215EF92994808E18D6AE10
D4FFE56A86A59FFCC90A00E691EEBC3E6A66E93E3D0CB6910A4072C474AAE956
C8FE085053AC0A9DB4ED071B9F70A0BD023E32A55F14E55A2D5CEE2F4107AA7D
78EFF8A0D27FEF34B60223FC6170F5DD66C14624853467F02786B0C20CD61091
CA81D8B0118E50A9DB6AEA1DBA9FD950A59116A399EDAF32BB5631E17975901F
CF5330D3134DE8F40C716B11D0A6E396D355576B9F09E0D55315CE4179710883
F8785EEAE7AA3CB16E7F9A7518B6A6B5C553A23C7C82C170052C027C1611FC07
A4978A98BAC8AEF2D4837251BBBF065C283B7C7B3BD08FE785E18855D22FA2B5
478D80FCBB49386EB93CB56A12D6AFA1DFE6FA7EA168F4DDC5FA86CADAD2636F
675A29EDFDC13BD01C6450DBD0DE1D9CD163520429734028ABD05B5F82E9D4AC
9B5424312755C4B74383FD094BBB26768148B0536FD423F3B861C442515ADDF0
84844FF1B6F261FF7DC04EF40B1690BA902B26EF0FEEA4D008B69F736F755FA7
9860C1C2C5C6B21B02CD8195B2DFC7EE6E7DB357CD97B141546FF52AAE673C3A
8FA461F426952D74EDB34F36495811D8DE5904E67BA3B608231D2920B0834A88
01BAACAFA7B2EB6C0DAAD46801979BF4D84690BBB43DB669C8E4378C777769EA
C9EF09FB04124570D3259861128AA6951DF21502BD93CF19040B8171AAF8F5A7
785049538CED34E669A162E422B331A3242DF9092972625584BEB0D0F8488FE1
851E4D2218F93467C90463F1B7AC6F537AA03AB6FD0D5BF4C9BC3213A5BA19D2
7243DAE7276A6B357A892D84A875E7EED85012819DD2FBD34CF8AAE0CFE2B5B3
A5052055154B1B7F8626D35CE1BF9CDB7016505A8DF7F307E7A7E8E64841163A
B3E158A8A918CEDF9A16487327DC3CAC470BC33A673DDC442F0BEA48008CDAE6
61378C0DA010776A25E1619AB85518225A7E9E0224FC37B4B2187C238BB705F2
B3FD9F8884507D1759B4988BC354F399A7EA0FADA7995818043B77C685E6D25F
C3104B1292A1F83517BC28709D3864CA3EB7C244B691274F7B85695F5F207900
0CC6A6A6BA86F208F707604C4F15E365A9E894AEEEA3338FBEA7771F134B6F21
7AC161371032BE4902BBD57AA5DC285EA30F1DFBE0A9FA65A75E27349DDAEA61
9E52650F8D44A7B989A3743EB332EE6B6EEAEFBB67BCA5DFC7BC2E11AA696957
BB29EDD545EE1C04CB2CB5110DB326A88D7A755630953505B812FC8512AC127B
BE2554524D958A0024F320DB8784D6A15310CA67408A962ED00F813E49030BF7
01C8A84B8B49C81270862B8528051C67824D505EBA49C3CFCB04F7C7F0879E6F
AA3630D313E6B7BE70C02F2AD5D96EC5C86A7F1C5A966A77B3EDFC742FFBA113
F9A623F38782CA44B3B19D36FF290B4BD1B807749BBF6077BDFABD412452A1F9
76B7A481011C7FD0CFD23B1E1537EB59E5CCE364DA954F895436AD8E34AB6B32
B5003F5D18F290FDBFA7D23362F1811CA9D8EBC3CCD47EB9AA39EA32EB597569
2F213E2BE3E1793DECCD5D9140740EDCCB942997A334CE0B60E80398A5776D4C
BD63C7ACC86AF07358CB08DA0EE60EECA10F8CE90CDCE6720DA575296508DC03
A874EBBE8395A3F64AB35A92C36AE66F30A2BBC5812BF67E9FDF6FF3A0842C93
510237B819027F631831435F51A30DCB0AF7C988AB25F12A87D1E1512FF71A8B
A3650E7E15D5EB486CD83D388C14987D638DEDB577120CFCA99A425CAA465C3D
D484429CAC1A913AEBF5528312FC72968C5783506819BDF21F6A3C2FE3B76F5D
2EE9C8BECCC7305AF0A4793504B223376B60F8D136DB11B8AE0C2C09CD85A9D4
D71E03BC8B89881DD509E1A6263C5DEF57A74EAA4CEEAEA98AF92D5E758C290A
579C2EA63EADA98518DD604EFE6715F50897F075509F64E998540EFE139D6538
20FB3EEA998267FB51CF42EEAD7BB65DCE653DB104E25A5E946CBD35809C3AD0
F81A6BDBF6814F6EF7690605C2B63BDF895123A258E8EFF35D7DB5793638ED70
E86F742C3B5D9421E2AF8F2412E78CA82D29D4B289B760B6851EA1A9D31C0157
7A0026C7929C85B3A6BF72DB85657F4A3558D4585AD1918E86DAACB8655B583F
31906127617D2AE1B888EA771422EB425F3961EA8BB8AF1F080A993C3C74871E
4B7BDB2602D07587AB4A0CEDF97FC4AAB63663D90B58EA05AA0E74F6493292BA
7A6462889DF510CDE4EE303C2B52AFC398377A8B3E2D7BC570FFCCC8D6784D8B
CDE41DB43A81C3A34FEB71935CEB90A8F016953104BF2422B1B8B7C195E8AFFE
8415EC6C9BB1B0730BCBCB20E22D06AD1AAE225D5125AF929CF3BD8484D4C450
FD2CC53E9D5D933D8D348873F0DB4A14EFAE04EC52C52383F18AC63FA2FBEA7B
B5AC20FAFEEBFCC4E3F3D8112A7E8FF270331D2FB475491A543611CCA936D001
1C53E7B33D5B50ED7BF3F41289F4880193E4606AF1447602483A341A59A1B95E
A285C94FA46A00C6370D566B96C5079D12C9D4F0FEE8731D3788121AF6DD1A97
A2841500B51C672DDD9181CFAC6D5546FF2237E410DDF4CC88CFB52D075E2DD5
A9A5121F9FD0A232C736760C06CDDEF25058065A72AADEBDDCC09B6D128D87D4
729F23E8541AED00A23BA814323DA321910FE7826812AB9606859F8B88CEBF26
09ACB01D758D8C883A55C033937CC31688C203C69145F8F20DBE256AECFE722C
4A46751E984FF2CFD2CC7BA41FD0B987963E2451C1106E00421729DE4DB2F27D
9264336152062BF9C1F7C01F9F68D1748639DAD902F9BFE6EE602DCBF09A3BCB
D14A8B0A7DD9CCD7E506C19B6F8D5D91FA20CF96E4D87948E0D4CEC2DB8F0E70
853D17814C9C0B8D4D3415222C4CBB095A1B6EF1661A4DA77B723EEEAE8EF961
E3CDB732081330A7F88EE867F55C828A9154DDA3C57B6E596B87546DAACE18F7
B182FBD0D0A7551372F78817D52F15AB4645F0C29BF1E997B92063EB4EA7A857
781F5EE0145D19BAAA2524F7D33DE2C3F202B96AB0C59A00DF442D803A9F86CE
048F4C870A446EB3E06BFDEF95D17AECABD35279E5B1C55D5BF69E81508860E3
A54474E96780A97CEDB4A087723F6ED414CBB3052B95631EDAD28E37392323E2
A811BF5CF5CC741EE4E92E9A64C5A0E024A9C35220CD6FB58B840C6D14EE78FC
84B1BD61C526475C33C41E618530BACF47165362C1E0F6B93CCEBD0545DD3574
E6F2E59D2099F8627118EFD202D351B7AC1FC6D95F96BC1ED58C422A119E8C6B
B471DF05580FB2BC843D95EDDD508C46AFBF0AA67F5ED46485047C59B8A6F45B
36A8F8F49C371BA351372DDB97AB64FCCDA6F82933AE47B208AB101F8D4793C4
204D7D421367224D757CECF551ADF1088A5E41311E9B82067883EDC8BCDDDFCB
6A87C352D11E3297DF93CBA6EEDDC1BEBC9536C17D7F7254FA98EAA85447F141
27DCB7495134C584257D260AB9E6C7E1B27B89AAB1E0E69C93A7B937085053C4
2ECF7716A0D1032C87A69A63A297549D01CCF8A92C81D0504D7CF4997F59882D
A0C544168426B788EB1B0561DB4C9C60E36EB9612A2097BB921884273804403A
19B6A3A946C63743078B597C7252CE6742413BE8546490E7BF7E63432B0E44FE
A68FC835EA29E0AAB6D51F94887BCDB2EB6E4E15979636BA68231730C7F28137
AC3A0D90E781E785AF0E9563555F598E184CE235D436D37D31BCED986A271022
30EBE12912B39338A6BD32CEDD4E8A51C229D30910E98A4D63AD365F820FE2A7
FC7D4B5DAD9D90CFE0F8930124689808E7996210F99DE85EE281228C7336E07F
122C927B47C02DA468E1B1405446D985B9E75A108B7937993C4592CEAAEE1849
027B06123A1A004D39C1DD6D8D0219619A92A04A4332AE7D030564A0EF74AB93
B42D66916EB73A763C946C412296971E30E6623CFEA4917743482C7D10FFBA3E
063138D07B5AF07270C97B5C4BF576F02592248B2CD8541D4066FFB879F0640B
A243F7987F2D3C8224338B0E76D4F510B78A7A6C6F4D553769823BE18EB58FAD
298314B8B004B03C18F40C4929992114915DDF1AEB1154E4C21FCB1072F372A7
4A63AFBAF673B83A89C8BE6B2C5565027A5E6C43FD48B11252AFE1C9317528BD
564137FD5767DDE33F5DA04E421638DD01C76A507BF7B12C4126F62D11AB45A3
7FB06EF464630E2E55C20F500DCDE8D0D4050278151F81FC7FA0B9000EE48467
5DDA6A1FE2DDD6A566C548B1975214E736C25F2378F0E9538D5B14E8FBE71F3C
5EA3671962FF36B049CC836C975870BFD49306F07C03FFCB623E83D55FB60A1F
5284E22685EDCB5AF06EE0CD971368572D4A754F038108BD7A61604A4D5FF0DD
4EB1116665BE6BFB2B9ABA68B9495E15ED996F3AFAFA8B8FD734B3BCD65C8B29
524188CC192F2D4483E6E23CAB9F3FE976C8B94DAED0347805F77FC6B9FA5993
3EB42976891603FF194FD049F28B82F4C2D73E41CC73C1C9F668931E64C0A16A
AE28B0F040E7EE32051306E1823F29FB7E3B2B67228943095A0250411E81644F
995A049EEEB89043DF7DD36F643201F5FF971324F72468AA5AD6D13FFC9FF96E
67841E1A749084C0602F13B2F4140A0A7DE08278DEB726EC55D57B5DC09C95C9
AE4B4EF735A5414D985CC24205604D6B61E916B27ACC7B6562FB568CFE3D6FF8
31AD2CE1E3192849C4397A469C12B20727A4CA38A6CCA354DCCDAC76A7552318
4F814ABCE4E4F660952474957A821F251F863683A1ACFD7164EAD511A3BC7416
9097C00A87CA33028129F4A085AD9DD05C3A4D0001737F969A871472595D93E4
08092B5D25C568A69F9FFED6FB31A13C7BA13D63A2DF6044F4707F3F4239774E
C5D2A531FC8D5451F815FF783CDE0A5A0B345E8350B8F483C8FA5A6F86728821
A9E6B675DE900A5A280F7E7B6657CEE47159ACAA88BAFEEB7E3C8132122B8020
45C00FA6B860DA3A495490F7D4F3C059CECBFBF7F20EC5431691AB8753985FE6
DB087505FCEF1F9B81B0F74665A45FA0AF2639D51850C81E31DC424E008D3648
C230C8DAE6E410E21E9C2A7F5A8E1ECA63FC9A5ED285837271FAF6CC611B6556
421DAC67295BBC1A9A2021B064295C22677DCCA638E40F1D5D95616CD93B93D4
5459AF43384C66A461024A5A5D049BF9B0C16328F8992A1287FBE4016ECACDDD
3B0B6ADE17A52A09061F578841058F3FAE9DDA4237FA4F5E8054506521227674
339C79F366B6CA9EA7CD06B9879959D4C890589C7FFC9F6EF171A9A4FA400DB6
5787618AFFFCCF9A00A98CFA3D639BE773DE73456A96D773C54DA68E87D47046
3759F200DAA04B33D16DB6B31C5F4BA1981FA75DC53DC7E39ED5DF5D5B049F09
A5729641511D759C1D2CAD099DD60AA7BFA31435DD57C23D90AF7C90C64AD1B5
758927CDB6327E76A8D8C8454C7E9ABB29F729A003DA8B574FD56BF4A9CBAFDF
2B1BBDC28F654CC2278A3549585E94245D9E7E63EB45F0D1798271E816C6EB1D
E7DC6F09568FD192E619D36143FF84F6355DBBB933FFF3E727FFA362C67E8536
B332C32BC478788C6681F1BCE7B3D5098B66B439C8E5B55100CD6F94B7229AC0
55621CCF5295EC12EB8C8BE4EB21FF0A7D4FE3B9735A9C431C71B48952D9AAAE
CB1A11B91CDA01B5901E44A8E06002EAADD739C94E17CDF93C0631B66B25656E
8202ACBA754BF36E02CDDD8211A56555943CE2B4A8E1F4C7C640165E00D38980
8FB620A8344248A6EBFFB82A2ABC5EAF396894606FD28B2091E3F4C81C7B2A78
DFF0722D0E720325EA6E666E1555A115F916A158580B6FC64701269B96C0805E
DA2AC121809DE26CA6337200742FB65BAE285D806F3273A4A2B6C88938E791BE
D2FF361ECADB0F68B3324E63C2C65B6338012D6EAFAFB39332B22F2C43C3AD99
954E96E39B52434F67D8B006DE3E4BD74C1CA8891A8E08C09A601506D5764318
AB58F78A4BE43408C7C2F6D4465B31BDEBFFA59F607AF38B8F624DDB145511CE
CAF45BBD4667992D2137151945CB9F302C3DD07978A90C6E6FAD3AA078B37A2B
CCC2C9D2CE43F44E142EBD215F52A7F52C7544FF78281751A65E74593D4627C3
A1CE2181D3A542BD50C27EAB75A20935CE4953D5582DAFBA5760ECF32CD5DACF
9C9D7DD8EE10FBC30A819E8DD6224A496398B55CD2FA1BF5A6A5D66C2D41D0A0
A1A7562C4A2D65057663E2094F239F9F10D8058C506642DAFFFA86283C08BDF4
ADFD60F2438E288CDE76BAB48CE9F69477C81D227C83CBB8EB531837396EB5AA
7BE08E08FEB6872FD2AF8B680B06372211F15B3ED73705851BBD2AD9D78C6784
0547BB833B0D91A874F95B68C0CAAAC8FAEBA26261C2922799D11555CED84942
2395DCEBAA7D01D4CD35282D02EC3186C48EF2FDB5EC5041D1798FAEF22FFC0B
806BD4BE0A3BDB1244A5F12626BD5B690C81B0946C88447FF0CF0841D5E7110D
EF7BF491C679786E34769B5029BCBFC46C6A15F769B54F85298224ED95C36580
EBF70314A876B797C8FF70DCABBB8E0C61612C2C54A7375DAB02B8ECF2C655F8
79026B4B77FD370C4709AD7AA6CA0B3AAE98A934A36EA4DB3B57EF9168357A5B
6AB89832D4F84BB4A323A3C006B65A4C66D5AD00F822D551422B35D792DD4DCF
3B0549F016231C7C8F3C66F4F16DD07A9BA121511D461C366375D37C59619471
E6A4C73448B33075E44ED103B9F6F8B2C8EBF969EC172E2BD072B247FE3D741E
15685BF81CB8BB337799D531260FB1758BAC67E14234D25747F1E68E0C36F9F0
362E1EEA4F86EDB1EB6F4647F4B1AEA267B4E0A71B88A841F6F4AE1AC91793F0
254037EAC872D5998FCA842F24FF0F2D9CF2B5EECBF408B54C3E0E0F292CC210
E99607D78A9A97D2774EF4D5FBC8032955669B0469E352C6CE465393A7DEB7DA
08B3012A99FB2FC7F6FF7AE57652D19F65F460EA1E5927D4524FCBFA7625C922
AD1FF185B28699EEE0CAF3C1BDD39D1C1AD55DAEBC24CFF24C2EA4BBECD38DAF
A3F671958441085A247E4D927532D1A43B075A1CF750ACCD72489207D9C81DD8
62768EAB5FA2D4CE847E0610E7CF77EF9E89E7B23A7208076FDC1EC7AF0315AA
5B02EFCF6E1FF2EB344F1576CD3D339DD3978503610BFD4FAC33F4C274413133
4FA6180533BC5EA951313BCA86CB586F20F61F519E31DFDD0A167DA802333DD8
C5C30EE4A82090BBBB0C0684C9C1FB6240973AB0CBA102F76C72F76221CC44D3
87E71C91506FCF863E3FEC97063C91A5368442B6EEF02B1F14F194096D880277
70565CE44091D9EE29C5526F99362C7693B01E7ECF132C62BDF74FF88E1F728E
B8C9955BDC3C107F352CABDEBCF9A22F9F4F4F4D84FE96E600113C1050E2655F
8927BAE9F2DAB969D9DBDCFDC762B14D45C8693A68A33524109D0C3ACF72783D
A4BF0FEA66F4E5BD772D6BC458804E5133A352ED102FCEAAC11473BEB8934F8A
64DB236FE4FEEFD87196A75D2C4ED2E89BBC0D431DC7C603B2474CCED3F7E139
F27115BFA7EEEA5FDBF16D0A901BD2C81234F0F4D5F5C1EB0071AEC7C1CF767F
B3E937D801E3F91F8CFB98BE95AF020AAE363FC579A955951E4220DCB8AAEB07
88AA043DB10E7628A7E3CD8CE2D8A271DAD31D51C87D2A60804D8A40793259B9
02971FC807D530E17529C07CEC21827B68AF8C0109DABB624751DC118099EAF3
102907266AE3DC3BF4F34B483138673EFFED3F498963B9B1012CC06B772D7C2F
E414E7E0E5E9B22A9DF409F39494094E3DCCD5DDDFCF2C960CC7D5E2182D31F9
6F99C09696A83B431D91847A571AB6E2806206612BF5DB0BC0C43B5D4EE1259A
B9C410CB04E5A931F0D876894372B84D03D1BC1F75A39EF4A1D52625DF58319E
34C4CC2669A6E5981E3E4620B96D5030E787961D72D02C195C669E792C0DF3B7
ED444EF1A6724AF2022FE7AC5F10AEC634DB5A4EC72FD61792AEC6465F89F9EB
DD06968A80A8CF7BBB5FECD5665002FE74B02B3D0C6B9B201C3AC5CD3117B291
05C7D2015D613B637F19614B32D3113FEDDB8BD432AFA5DD2A2CCECB4F6E7B5B
6B3B61D5858256AD27D93969E8113B1CB3EA16BD2E6D4B219D019242B9062360
3F7AA39B42D3F7A924CD93B97B6A079BBA10E78FFA5A91E9AE2503C72BE09701
8749375D92AA335837AE286EC255179C99EFF809D56C850C04A0FAA9BA4A52A1
7EC97639C76B623DF1DC35098DEA7E69B397DE95D81DF8AB287F2FC8E57BE3E3
AF28807251F21C1EC7472D56ED0C13A967730C2620F462EEBFB3BF7648E199BC
99C20F3CB8FCDDBAE8C5528C57D7547EAB536CDCCE3D92BABE853292AD23BA2D
DDAA177A9FBD16D0A2A2020CB8047226B1D3310275EC59523F8C53A1FB4C91B6
14AE5145CD182E580EA3FE086F7E50A09CC54908084029A4816614ACED424AB2
B497BE1F013C5C6B8B3F48898C3FA0F8F20B9F2C9BFA672B307359B9BC53654E
4EA1BC3974206D4EF92EC1E601B6082C8DC4C3A7EF82432621B7BB89632E2B59
8F6D138BF1FDE0BE992FE465310704AB0FD7F2B3B2D65001F372ED4D071308A5
FCF015E02B87E240951F1DCC464F9F56ED259D84A9F2AE4E5A24DF959686A782
3AB150BBAD191FA34F0966A1D224C0D286772725E16659ECC4344E712BCDE63A
D17167F4136DE68EB86EC529E69AD9359C746E867FCA60C51BFCAB6E587E53FE
9FE912799C724B1EC680977EE8A8502BF5A33B88C9721C7A763B9BB3D4F06F33
CE8A3468C711BC2EAB2F177D05A1B74BB046231A756979AD9E354CFE201E2EF6
25934633F9E70B0455B6097E73553EED34DF8DA712C29E2060E8C8655B4BF53F
63A48C7F4EFCAFF31F6E61A73132EFEB110DEBD28BCCD7B42E245579D29D18D7
BCEC07DFB5132EA09CB4D699114A950D53300CEBA72B1A1A0EA9C725347594DC
4E7C1F81F010AF1F4AE9839780B31878A279BCBF624F6B6398CE55586E2D367B
2BDEAEA40404445C768094B2E1B7C87C2E51B62223EEFE7AD3523806D2DED07C
32081F59017C05BDFA713557E1974D1F8DCE090904186C4892843B150905BDDC
EC6213CC9309CA2BA555E09C7CCAFF73E3C7106DE30A0BE3EFD47261CBE2F070
C168825E5329215414AC13FA5BBBAD1644C28821E5B1ECA4972C18AFD70D490F
20A4305479A29C6F7C69451726505E5DB414D597D45C6E71A3C0EE7BA99B94B1
70F45C72881192FF5FEF8BF68D616695ACD14B3594882B491A60D79F34E30D0D
24F49D4F6BAEAE31569A1B32D93163FCD974B7AA7709AF2B990D03584AFE558F
0C647A6C398DCA227FED7547ED1DA6E35253BE7A2FFFE59642F96496FA8F63D8
8DA381B78C531EB3A8617F33EB313E70DECE8CBBD71D7CE7AF4D7985886EB288
9D5E671B5FCA7FAAFD6678DC5465F1D6C4AA40918EE5057078B26B449ABEC936
304110DB6942C6EC555024133D18CA43757BC4AB2722E2629BF61EC452F0E0BD
B6BA9339393D3047B50C79D30457DB483FCB8E97F39B4732C161AB32971DE549
FFEB8FBB595C6EE6FFA12DAA892FA169C2C66738BCB61B03E6DE121E35ABCD40
B231AA59926199B26356008F1FF8267761F7B1D51B59EF63DDF261F98564DDE9
18BFB3DA51906D66AEC939FDAF3374FF82E0E1A8896A85FC0D39E6D68FDA2CC2
28E1E15BA89342C8C10EEE9B223CACF3704505F6181F7A6D13A616E692180779
89315CDAF8B686861E462776FC49AA65343193F93DF239A12992E860C899CD67
700C3635D75B805B4F3426C6C6E12E081339CDBD47CC660C9BFBAD84B1FF01C8
14878F0C177F552BDC9BB1933632A0F08DC7B007337B680C9E0CF3E5440B37DF
E9F756D4F8AF4636303DDD37A8AA4709C1A1F828B222BCE2D998963EA40E7028
74DEAF5C865DEA06501B0FC537D2B14C1B985F03669B546C110680DBC9E1DDE7
16C4A64514BE9B6008A31D0797C7D0DF975EF7543A387C3854E125226586D643
E258DCD0239484A61A22A20430E31AD4876B35791FB311E04CBD73113CCCB9D3
073066847C9E82604CD7047A421A841C948FC032DA85A0F4F3096CAEAD2DDC50
101AC80E317349DCCAF87401373886FF9BFE508C3A751057316CF9898016FE17
A0A07AD7169CF5C854AEAA3FC89F4F0327421CC5B8E5487DC255D76461BCA903
89032FE6682EB485A9F348401F4EAEA57B8955BA7DC58262E52A30CC9470EB90
E5287537A5E25A047E45CBFE8DEC8188DFCB33EB68C65C70BCBADAB10AE54A0D
D44C28DC4763D04D66EF1DF357186D5A3C8B16A8D896569D2046591B5C19AC82
526AC84A719DE7A70642947F38B33B5D36C221BE891AD5741193D80A5D6A6D2E
1E26746A94A779EE401A85A40430F57792DAF2D43D99E9EB6392846DA0B01BEB
90E54FC7B28CF24B224695DE81FD0B5600FA5D75473B71558566564CC76B2A4E
EB59D5B84EC21F1A9B9AE230340C5DCABE82C580D6142F3C8079ED682A442D37
71CE28BB2769A1F1BF7C02B44A2E75CAD77330E7A83AC17B6B769DF2D8473A64
1C49948FBA78BE7BF5C9B06B8250CED51C595D5C9C0CA1CE06FEB594B76C4150
B86A307BEA398227363F529553BA75ACF5B380DFE459707EA00C3BF24A9F2554
9196089F79E7494DB6E8AACEAF23100219B1CF3A1F09D967E429545A65BB9963
776E36EA3E0AE6D94408A45E5F6B12921B80696C5DEC748378B227A1E5D547A5
5BE01BF9BCF330F7268E743C0892D38EB8DC3693B5B65F7EF8EABCD7FAA9C906
86AE37259D0951E63CE925C8E5E4E683605E31707DBD47EA30D1F1BD0DCEB9D5
82F98AD4585187CDFC41CA811ABC614DA8C5DE3657D1A80350032D19862612D8
B97582B0C3798DA5A68D0EA4AF872890576B1DE985AFA8B77602F6FCDFB887A8
3C42C50F08E66B611F543149B1CA5747C69296B7999229531B651E4C98B0BD07
C1AEC41ED67F016B4990CFB9B7335AAFB1B259A7B19DC09F1A613EA547E7DC86
A65773110E7CEB4D7891054C2BA0149295DD704764914593BB144BBB0F0AE087
9CE4863065DE962EC6AE415CE7AF5AC0FFC6BFD118722A55A15BD6F0A86FE386
BF347F063DFFA83624D77474D8C7EDC22C5AE31ADAE0B467F3CDF0CDE12200B6
2FD553359821D2723596B1655E53AB42EBE4B24C3F2AD371F10BA0FE2E0AB123
F26F44A44A50D3E4011D097E2C9FCA76EA5D87C159CCB1D253969673DFF8AB3E
03258640628DC4E3CB7DBA9CBAAC996EA6D11DBDF614910E2DA28C95D3835074
D7E3BA3EA7F54443C2BFA8B2765F8C0D70998DC45645F65FBFE0A25EC6705991
1E9CE3AD64CCAEF050EC35C66E4E041AB5DF6E39AFB3A4814FBA708188210609
F458B37405B2314DA3FC7F4B774C12E14B05BF44EECD840A13DFC1398DFCE162
7AB973100F15528014D881E89FBCE55E6ED5D4DAE13501FF403643F1D606FEE1
0691D19ED84FE52EA960EEFB999E59F8C422617BE29C1D80639CF486167369CA
5DC63CDD2D4152B859612CD04173DE464FC148D32CF19F82DD4DAD65F0FDA78F
754B8454154565D4DA93F71040B738B0D5C5491378352A1A7801964CDFFFCBA6
430BDCAB6A92A95C52C13894C9151E34D2B6B98D1DCB3448AAC5699F43AD8F23
E1E70B74C4CDEAA691B8A9DB26485C844DC57B34ABA442824D04188337369BDC
2BF8EEE579FE7D3D16EFDB82862E1926AB750C248EEC80946CB3D0B3894A32EB
D4DE3933DEBF902820E1D67475BC144DA3574F1BD30E3554F65A2BDBE89B6F6B
B32B219D9AD4609F9BC7AF945C870E6D88A5E7E04770D7F8E51D52BAB0728F02
748AEF219D39CBBA1BF2BFC2FFBBDA1B4668AF5318D3E555B18933F7C10E387A
FAAB7294AFDC14F7AF1DE1F40487D51DC24E7D4347285682450EBB6D462DC9AC
E1BC0DD381CFE39B1A502005580FB2BC843D9744EB6403DE4E2C2F75E5044B79
C920ECBD7C9793C9A610BEA622D31F783FE35D5AEDA6D646ED0B658B1D2ECFE7
331A373BE03908AF2CFD2E49F4A079D08BF86D2E55F152A55318A39ACD5A6B81
93670C9FD08B15C97009F7F03CDC8E1A2FB16C7EEC9E3460BC5DB92A7737972C
A0F0238619CD7547AEDBC6BD58746434D91BF070E12C43250D36870693615747
CA780479EBD45BE752F7570181E29E955534FFF22A85ABA5DCD3B0D1B2DC7C17
E42BE5834C0EB08EFA9A67D6E275AF3A14199AC7FD936BF06F904A61C147BE8E
4C9CF8540FFFA6C0EDCECDFA28A951DD5211ACD684ED3EECD5214EBAB9C299FA
31AFF925AB8F21B25AD1B101F22D625C6CA74D112B40A942791AAC146357135A
D93AA3BBF2254A95A0768FCE9FA03D28AD36ADAD6FBF45FC0DB5713BB3207B9C
7049161848B1AF5B2A349E44DD04BFEF4988A0F61BCF9606A9BC52440462A69B
5B7B8D3A9821DDAF2D5EDA062C703A602B82325F6EE7D2BE04AC7B7BA60F88D5
0CB5BE5F12FBDBE6481D67434810D24D66B9C8A6D5F610B5A8068E167B6EE19F
B40249C17626B4EF7C1F1CDD0C0D5610F84906165A1919F6D05290A996F9392A
C34D5765EA7BA83EE4A6390283B082EEED8AB079C13251615F5C4576F6EF44CB
FBC583BEABA6A577651BFE8548651B73836E6207CAABEE74A7306B6D86834FA1
117E2EB79312E42FB01F5D430BDEBAEE24F2EAC8C34CB8D0ECA9FAD85863CEC1
B6C58479A1DDB40393AD8FB19F5DD029A8BA4892734CA9E01C68BA3E214D7651
402D595E0EB6DB39BB10C1F4D149305E6D442E7D8B58020A06C012F970A05A27
FFB38DD7CB03F9DD099E6596290A1E768CED97D7896893276E071E1016C1E670
03A22251C1F88E3796AFADEC8E98D78E01B81DE3A78F6FF1BF957F501F52C922
1A8534A1618604CD2A317F0B1BB0722BBC45B862DF2B9C4020AF4F0245779D1A
8D79C0582A7F2F9C85EB3BC5D10BCAD79538BF753AADBD6ED7BE07C019DC131B
15432E1514664240BA7C78226D4E8ECC5B15E9BE0FE954F32340FC82E3A2ED3A
D8E3DDD108A573F2D2917790ABB168FF8DD6EC74957607DB3ED0285C3F4525E0
426DCE772F4B24C9343E42C3D897DE532796B42E8AB66D8446E62E36C18B53B5
C7E530268B4D8550213E19A6CE98C94B6D69CFF950270DC1AB3B2964A1A94722
30FADCFE253C6D532D772D95F57D9DE63CF6F851C5E21DDAA588B8298A64627A
FE82A90C703DEF0DDEC0ED585CE910D51A49A2F385A84BB64B2728495D753082
C1FBFB07647D08DAF7DA12995BD7AEF31D400C9CEE71765238C2C83FACB77FAF
B1D2D574947CE32A4CD3AF4410331B1E9007CE4B008C74C0035ADA5BBCB0E724
AFA0F51B8E2C77DCC15004C087434725BC971971CA9533168304814E6E5DED1A
79961C8A15842664D3F1345CD967A08A9C8D7CD13C194BCC54B5D0B529CBAE4A
D98688183FD9E2B6DE1DB213854CB51175B088CCFBF6EEB46D7BC3B3B23F75A9
1D140D5AAFC6FBC6B08D6EE1453264D8E2AEE751B5488FA43925639BEF4B041A
D7722616B477CCFE4F4CA23CAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCD
FFFFB92717094ECB693C6A287E40B44F6435D089AE6DE525849C266CB622F9F7
DD740A0E8A1AAAEF6F9D84C1B26AD383E6B58BC879DC734DED754FE99DED43C5
EF4C85A549D129C90A05B4082DC1A02EA0E2E87060FC7E3ACD8F00A8847CEAAD
3690C5D73FC232347B4A3852F428A72FA063B9C5500FF2F234B79DC65856CA9A
6F6CBF2E7315C0834D098E20114903155F14A3D27477386B661D112E70ED3D5A
3E7D8A11C02F5994FD725FAB2CAA00F223265C0D5D34A184E569B1E45BE58369
54BAD6CCC3281398705E1B28909B1C671FCD39F91BBCCC8828EFA0F74BA87F77
1D6A8D90A399CBD792FE3855F316DC33187662B519FFFF59304BA8A338C4F7B3
F6AF0D13A64F1E02E9AC1FF2FC82B29E107C77DBDBFEE4FA9528484AFEF77CB1
0153CC68EEA931F9FDD3391E0E2353DC2EA171E90DE5650F74E8324A259293DB
485A3997A170DAE50451FC90F483165811048432F2E80E18174791A6E15E1398
7EB96A28F2445E92C6A83B0675726AD125B4EBD96A8D3233903448C1B4599622
C630FDF9E0C839B90065522791865EC99F8CC67FB4248AD10B12986D0F3BCD2A
969D2207BDDCAAB0F0251364B37229E55CC6DB7175DD12EB928AC9D39F05A66B
7DA7DA4BFB86DCCAFC3D80FF1C9F93F7556F25572AFEC769BEC84C689BB04A12
A787BB1A0712DE0F2DECF50026C2CE0EA143A330D02BF4218438C22693DEB59F
AEB3A14C1547C6C46C24FF3513EBCF2A03136BEA4E7AA39B55089D1342958D37
13BE486E3EC45F95D6072005F2B4A372256D8B8E788D78EBAB67127601282314
3D7430D6521367273BE13F70E16F9FECB42418BEBA175470843F85B6076CD7F7
A5554E5303A733731BAE1FCEAC6DC0C39FC6F00404E5A4A9054DF03BC9571FDE
1A190C40A598932DFE49EE67471AD76F25C6AB3EED42FBEB0E316AD709E2AA33
5C930C245C7C4B18D30A7046A27AA007D54F2A1D838EA7A619EA936D0B6239F7
2579B0E99370DA9C9AEFFA937B4356D3C2DD059D73A1F8086340A0CD4248B15F
9ACBE4F9DF3A174028CBB2A2717C97FF0F700841CB1DCAFC32116712218F9741
A9D0BC2BBB60C369C4183F63EF18C38388DA6AC960A3C9C90D3577911BB7975C
AE487F4C76B83600658E67F85FCE3ABFF518B9794BB67FC89BB6F3AB2CB7029D
AF5D9210483A9AB2E839907C48BB13E5227FDA302AC2C6E6E9E4FD1824F9E5E0
F97FC9B58B6A605314F854A16AC3011DA8D4ED9D591B963E01CE3A2143E7A954
4AB0F0107C16617C220FEF41B8F3B1A9BE29D6DB73DE04827BF75B644E13CAC6
FD4E851C325A8AE4050D1DA311C5EEFEB6538BBF20228AFA754C9789DCD73BC1
DF740F437DF5F1B361E2A8FF1B82B53CEFEE5A5C18087F2C3B28BEAF58B3EDA5
63C81720145253BD827ADB43D157A1BDFCB3233B9397EE7D4EDEB6B1D267007B
178DAB23BAC475BA70CDB2554AB86B19CFA0F0E07A4A320264C90B9161D0B9B6
12199F61524DD12744AD2BDFE788A6FCB393E69BE17EECF319D8C5F67760C94A
CDBD349CBD18E8CEA65C0A0AAD8348DDE9F3AFDC577DF8F4B125C0BAC2EA874D
558B0F46BA0E4D4B5CF90D1793F98D7EAE541772A11F0A66805BE621635D1D65
EB1583EBC21520FAF42680772C1BA775A5390A6C2A7F0E8784846A929A2ECC9C
D151557CD0E21667425C47B6AF1DA4DF3CE3826A8648A74D83D12EB45A5A6E98
453B144FDC93E5DD2F33705FA9D7CFB97ECCA5C5768E52B9A0FC6005FF4097D1
19A49B413FD5E2288ED12F694F6B2056997F2D35C37EF36DEC95AF26E9BB0F3C
575BCB1430713B988916487ACE0AAF272EAB35BE23A0B2808C5755EA09921F05
567101BA4EAE81E70AE164DE0604E5A4A9054DF03BC9571FDE1A190C40A59893
2DF943D38B1EF6BC34AE92E91E3DBF196F7BACD52EC4D5E6F80737BABC8E1328
AB11B432CDDE1BF3F0DBE4C9F0614B784659453E6A4C7B7F667C70E5C7C99EE0
02CA861FD123D52C9342208C4AAD10CE89C68A2FA8C6CAE272A57118F9724EC5
80E579857DFD061CE0C155A07D1067DBC5AB8370C47B399F2136B6E955309BC3
4E9A6FD25997E4D49214D3D1761AE29F8B15C018AF3D52E9FD5DC30C176E0504
BFD0C0DF13A533B501A088CD5408CFAC6A5F3EF9A9280384C5533F7843E6670B
2490D478F63C632FF2ED52027089972BEB0644E52D859C3D9350135DBB27457F
B4CAE16197347611DFE63DA3C7CAD03540E664D88B56E6F9CEAE61FBB850C398
377A8B3D7D19C331BE728BE7045DF3397542EEF16A1C9C12229C05D689F8400A
1FEE9BA3E6286922C88958F56523310C3865D84404E0D39F2A0B71D337DE2F7E
9AE6EC472FBFE0C76AEFB69565A71006D9DD7F7DA0FF8AB99F2595F3EFF41648
31073B1EA23B0CC0AFB4D935B09F36A1AD0BCBBA795A7D2C3B8999507CC7150E
A5A9E30BDA946F54E3C6A22B11040794D07620AE8353A811C8DD08009B2ECD4C
E9FFCAA2C6A2BD03A17B76FAAE9CB0493E6294AF9D2608E321283534F91CFE4A
015CD40CE908BE2CE1ACE7DF78BBD955C2F334AC79C6BDB6A46D666F09C8F83C
1F396D4AE23E173182D4D98D4C5EFA0825D933E8F582922B4D4E104FD0B58642
160A0A7BC252745EEB8E97E8EB47A87689C00F6B704D3CBC1079E7372E0BFFD4
778D4E9FB1D60827C1A420DC079E3FDC29022FE4AC2173B1014C760B8B015B18
2F1811D000A21DBAFD0AAE6680BE9E17AA3F8FED6803C6BF533300CD83F01869
883173A8BA72A2EEA056B3A7D086CD86CDC90F418D86E8B704D37E19D5A06DBA
84717637F4F62A76A595F3530B95CDACC4AEC7056518D6946A358899374F4A87
6C701772FAF0BE6B00B99094FCFACFE9D03B9851FC8FEEBF287171660B969730
D6FCB3C3122DE3D9D2107251D0672C4C0F8B33070582700DD7C1C40D9BD44414
B8ADD70C69A13A5381C7A7FF4D221B2835F5683F03CF7C7A4F8913A9A15DC780
2A111D96E639679CA6DA215459EFC1DC5C19329BA90A6860DC939E6D418E4020
AFAD9B94D1313CF5059299ABE075FBFF390738673CDFF3EED771F21F9D36EE9A
9E9B46603F14F8846488CD94E41A6706C9E7DB74631EA5C14A06BE4A3BCAE3AB
959B8B1F730CEA3CF3A21651D652C1E371D57B511B52A4DB8F69D76C3BBB478A
2651BF9AE51F8017ACA1F189103FEEE7B9BA528C4BF59ECE9D804C05019B3A82
879EDB943E49C226970378946669BEF559CA683A3E78C4F44F1B60E65A13C4E5
FBA3D90CA5E3B3211E20F739789086EA4BE455FC5FFFA3A8742AE0633C33C8E4
823681C0A61ED898C571006204A1B098B553DFFF535A7E5C6F41AA7D14736CF3
2569B06CB9AFCD9F09D428AA79821303447C940325E2C403091AAF67280B865E
25B0FA38A6356EC5262F82A10575462C229E7D0BBAD6E383CF9E8D0ECE8EC47C
B9D61C5F5F69792C38BACBC1CBB32F277C3765B969071CF2D0CABA67B410F9A0
DD26B8C902122271A38B7923957A15D11A1C4E36293348CE51DAE8EC64778AAE
6CF534F9603BA5FC741066E934984D0016CA1FB5AC6B6AE0E109FEF45ECE0C0B
DF3133C9CB345B44FC96D08126FA6EF4AB5CC7D6094DD7117BB46B00439826D9
CCD763F5BAB3DB9A7863049488C39FA8CAC82827878BAEE83AB15AF7823AE436
DC4ACE2F1EDBFF048181C586646D0C41955DF63256D5372F6AA8E83F596842BB
83001640943EB215CAE8D21CE0B3C7A897519C4A6E1D3A4BD9F0B7E0B28447E7
41364E315E7A150AFC5FE4A369A4E94594F9B383E2DD5F106768FD0A9F0E20F7
0924466A2D2EC190DE0686207F156AD668003E3196A1B016262ED1F047911BB3
4107E71F1884D692FB4BFA8E2E42224C18A5B39F892926DFE4B20D91E195844A
72EFE13343B08365148149F48692F6CAD43EB0C1EA77C52021FF104579BEF701
CF1AB4DDF439223DCAC6C3ABEE1E14C643529096A2EFD737A46FDF835496BE7E
6882D804A6EEA79B7034C1128484ADB7FA412BCFDD23621CCEF7854328220EAF
1027FD08EC9C500F78DA3CED394082281F57AD4FB0CA49893DC403EEE634A441
4C547EE8021B385BD6E116AB4C51D88BB4064EAEFC69F1A58E88F04C3B656605
94E0C6B30B918A0DC8FB66F8ED29D8FDF6C33B5F6934EBF08B455B33BF56AE6B
AA5863E0E18B1B22579F08F4E68EDA829B4C0F823586C83BFA220D1D53AE3CC9
2C910CAC5922F6AFB148FCE2F00D359A040A96BD14A374280F97B486E04FE58D
B7996FAEE1D6B7457368EEC9C3C172E6FE5357807A77F869AF737A380AB31CEA
643513D89845184EB5F9852A13A2CF550137F9E58752F5CEBDBCC73079BCB078
5DAD1A291C4B67556EB36A51D65D864AA64B020AAE00985D2391C113895E42F8
E44653D287E7B907612FC7645EFE0E2EA6E2FD72E1CA98AB704AD90BC5FF3CB9
D3C40BC4F6A3CDF009DBDF893ED674D12B77414032B6391A56012DCF662892D7
705F6E9DC04F1E0EE7251A03EE454C754DA9F485DBF256C21521BA229A1410AB
FA2171432A1AA586E65AAC52DD837E4B600BBC62B5AAE1C61E6A78CAFFD182D2
C7932A732F26E568CE197CA30842529B2275098FC7D47BF41FBEC88041181C92
2BDF2E74519F043C7CD8FA2E6C749D88789C5CE394CF50A0ECBD1743751B2A57
46D139A591AA3CD977494769BC5BD47C3240B0D4A30ACAAFCDE6B554EC5E6B2D
901A60D9EC3C87FB518250B14BFE0F2722FBAC787687409EB27BB61B4A077FAD
D338C2A01580D84E0135EED9552CEAF21AC7E214FC46936F3F2E2072523E9772
E367BCFD07630500597A96A072EFCB143FEB9090CCFA94FBDCA5F6E650529A56
8F66A773ED695588D7914A09C01523799821DF82B89E2DD0885CA956529EA49D
7B913374D0DB3372563DAB6D3481A92A83B4687F352DBA807E16351E97C0BDAF
A4514F13F8193BA87B197877203C032080FA549789F60F6699A0363A9A8040DC
E919A3AD39B7935CBA3F42D729698CCA8E164CC34A5DFD4DC575E5396DDC4167
8F2818588EB1983D9EC06E0C1EB300F6AE13F0691E49355A59CC5E5AEDE63E8B
E84D3355621E4291E888EB566F3CFD90C9DAA990D8FF1F519504B778C0D9AD7A
B4BF6D6209C94F92C71ECE1FEA9F976D08BCDC3AD62B13E1AF63B076ECB3C414
AE2F7C96BD3B2E8B7D560376C0E86CE2710C1AF40E9A0537A9984EC6762CB1DF
C0A7DD8EA41D1400BBC69217E6C707FFA2102DB94205458D1BF0CC8B22F37E95
C27F2C40B30C552FF98BCE28ACEA37046A42AC0058159FDCB85363C9140E4CB8
F392D312E9B32B8660D2759970C48A783A97F88C4E23608E9AB90CEAB6C2DE99
EB52A8110547FD77535AB4D1FE500A7E1633F36B0D94CB8BB45C217CF93AAE06
BE9A3000567C7AC169D56BA4518DB8CD46D27DC4DBB7BEFD1434700371469A49
A940B0EE7E20AEE0DFA94FB3FC3A48BB941A8F54C888848206154266F83D673D
AFF026D9E157E65DAD754A08F51077748D1F0A951BF74B76495AA9C0A311D689
D92C3919755C48B4F711372AE3B7BB1090E9EE601F84A555CA7345C7004C20C9
DCF02CDDCE250F72D21F245E954DB42742E34C5E8D96DADA48ED0887350DBBB8
ECA80301E4D98723B5A14A5EE325D1C4CA5023439EC5193A94C5DB326FC1900C
1051A12EA0AF63D45D80F3CB893F9F302BDBA57DA671A26A6A2ABE9D3BB94C81
695FC09BC64B04BAD22B19A6E4A9A45C22F467218A278C0517D74028A1206403
4A7290750EBC897F11987CE12AC81F74EFC9548086229ADAC4953EEEF78155D1
AAAF6A103DB8FF33E7989A96D0B2D0906FA92C220CE37E3D56260ECDB55B591F
AB9FBBE250F5A66513A168F44FB2290B40F39358B7AA50FD4F1C1DFA8F077AD1
F27EA247503774ECAB561760E687C3BF7B72600494F60D3490D59ADA9894C7BF
BB36E142D94194E5FC2564ACD7935C7ADEBDB4FB04FDC4FE2F15947DE72BDE53
9DC79E2EDC710D9DF190AAEAC9D735A9EAD4C63D44AD6EEECF3D6EB88E54AFBC
5DC7A2FBD7B92F52C2B5DB36919CFAA8245C8AD975F1B658A5815973D3B0EF2B
D0D5EDCB6C88A4648ABA723076F4C54987221147C63B17A03FD4DBC438C8435A
45C0136E0E357CE01C41C831FFF837664A63C20F3E9876814D9C3639501EB2BF
8C9CAA53BBD882284794AE9C89979FD6D35A4DB026F37AE5A4D691D00141839F
00B26AEE5C9C436FB004DF071D231033E4F074D29DF85026F80DA659A48670C1
024EFC82F3D557B7D4B21BE075951ACAAFFC4ED78770EE23188E42420A4EF42C
DD4F34D4B9D0A480AAF33A76A466A61577A84F490EAC15BEB904D90EF9861FBD
05B51DFFF7D1956866DE7293A1F71D5D689BDD477837C301BD68925CE079E0A8
449ABFAF7C3456EAA5DF01A8B814D730A2278A636513F578F868B17135260BD8
9BC2C1373AF9B63CCDD9ED5895A3D34A6EDF14EE3C4E26B63047960536904B03
013B6AF315B979124FFE76273D0A94C82ED56FD8A3E2742505B4DFB759B8D456
06134303757213493BFF46792B2E2A7A4BCC3DDA025D46AD80A10DE95672485A
1F4800A5303A3CA2D0A0A5CCB7190622542A817DD91B0F78789F4FB7A316C4B2
141469CA20C61D1B99DF5033EBD4C4A7E3811CC5A1BD8CA37893DEB3D7C20342
8C35954D5289D227B62F821C31A3E7FBB459FB0BD3EB2271167B87DDBEBC833F
6895C5DA3B210EF1BBC370D0C6CD333102383B2385BAB956F9E6BEABACA8156C
56EC46239BA9113DD9D72024B00BB24CE37FD37D563B1530C30E1288EBFF5E02
CBB6E2D8FB0EF8EA4C087681B7ED11090C5280E65DA84F5992DB28049D05BE51
61987356CEDAEBC0AF469DF86EFA33E69532BF88A06541E979D87595A4857E45
A170AC7C14B4D3F61628A0688719C23CDF7DEB9FBBDAD60AB2721F781D4961CF
CC822EDB96A25ED403ABCA83ADD65581273EE017337620B004D25A4E73FC4AD0
5771BAE85FB5A900AF325E568E1D28EDA097EC9A1CF4B57AD175F57B0805B6A8
5E18A282E86C2347953FB78CAB0A6972F2541849185C7561794F8C7810BB5EED
1627AB0A07835A76BE6CD68B00F1A9E0C1903C7FAF6DD7825A6CBD56CF5462D4
BD5C79C4329C3B9A05AAA6BEC318F3D5B81F0C9605DE941CB45EFD48B27EDB69
B9F5ED544DE553A65B6F76305CD31DDAB147071C3CC66BDE82A7EE52326C30DF
AE3BD64AF97D7FE3C962FF21D09AA2AE92C4A4C0B338630F9246BED581919E35
58AAEC5F8AA52B53A984160906F591B35333B9073A7AB1E96D940FD5403DDCAB
8837EB69D5251EB7659B094D4ABDB9A2218FDF14C982B8A3140E1E572AC1C5C1
9C4D95874CFED7C0517189BC69EA37A6DD4DD0887F556FE85F1A276ED0562484
7DA0140BA489AF7EDF2F32F31D0D0EFA38D936EAE941398332B3281DD06F7C48
9E4B184A84DBE4816FC2FE65424027267B295BF3446B615DAAD066C7DF5BF967
262BF6407198070A151A68E611E41DE7A47624E798D2D4239373D6C427330327
9D8131D9FC41AEEA685966E79646935341BD381B7047B3A24C6C09644E54AA28
80A415149AD2020C07C4E513E937AC8DE4E195AF0FAD2C7690EBFF8E27C354AF
B47F0EDF06BCD88DD228EEDF680830F24533E81A3E3C0A8D22FCEBE01891C23D
E35B305A88FE0396EBD46C873A08ED19304D6D4E33A056C57D5D42B7567F6343
4485C151A9407CCD9FFA63E833EB86ED4836767BA4019ACFECBD4E020F4C7208
79462883653456A1D550C9C5790E578D4DF08EEEDF242A2AF8F8AE01A4AD37D3
35BC90D84F72A21696D7CFB64C4A985DF8553730B0FB40021251B5693BB3E84A
9621CC5027F3A765882FE6C4928EDAFA23A6E1FF3CC3CD7CAE13D80F3A3BE88B
1AB792F1CAB2A8F75E6B9B21E65CB4DF774A63C6E796120F93A930F85B57D1A3
75D5EFA0FED22F8F108B471CE3BB364FBCFF3C14B4D7EB4DA7F67A9AAE8A6F2E
165A21884DF058F95260EB0F1F6B6B0D5C1FFC8ADAD37F49D6DC047FB256C7E2
B405BC9EA3163841B5D3D75225148C5A49D82A9F40C998F179A420B77BE56156
C481B3B5716F00C6F4EF57592ECBF980681ABEFE93DA2846E6EB70B893468E11
3AFE9A925817C0B71F6B7A4C80ECB35F93A0A4EBFD4088B340C3ECE761E3279B
A541E981EC1C45E286DF190406403BD47657278246ABB638047E71B6E9C5E4B1
C8B05D720A6BF7887F928108402DF39C6217A32A6B956003D0CDA150A2DC01C4
FA56580893540E95DE9A9F6E05660A58FBE261F8D4529D93F2764CB596C43872
DC95B516C145B9B2ADDA9BAB8529354685ADF6366A7B17E77C27641D2C9EC2E4
8DADFCD43C3ABE22BF8D0CEA47F119F1E51D29CD20C2B3D2563E465BC8275D54
2081A2ED8F50B2FC2ACA5EA48FDBFA44D0AB36EA74BB7359ABD208092C2883D8
AD3CD8850A47540234A4EF62773A0E216162C0DA05B21B3BBC187CDE4C138F9C
60C363E8F2D213653AC35C4C40558A59CC371CB64DC3CFB16DDA0891743922C7
CDD3A339DD76EA300A205478A5CC6EE68F39E69F0A9C1782F8335D230D59376E
4291CE89D92CFA4C7A79964EA294C41C11DD95C59052C86BB1D12A18F7E05FA3
75A5FBA7138708485669158A3F333162EED2023C633F9C2A53FEF9F4CDF885DE
3172C8DF624AD51B482F344C04B7546244474F9AF34952DB2BB2CC78CCC37EB4
A84A9BA3F968CFCAF9B92082A06CE3BA16B4303699C90FE47C6879F6245AF880
8E63961B1AC2D23FEE7E06A13B5EEB2CB9B4C132F560E902653714B8736A72A0
15071A24345AFFF889D0F2725A619D12DBEFF6A537CC1DD8B321321D6777C50F
5E8BCC4C058759EB92FE22087A57679FAAAF66DFB4EA83BD1EECAE5DA12721A9
610CF4AA6CC66F9C048036DB57D05F51E1AE62E5ED0E662FBE5ED7E88E34ECAF
5F6E4905B6FFA847386CEAE82DB70C830A568B88EAFEF5E1CD98E75FEB88F8C4
C154F216310F73AABA3A7EB108FD5F57E5F216B7FA24CD68F2391680BEB0D0F8
488FE185A060206FFB87881CBD30841DAEC12F6CD6F20E9FFDFB33029082CD10
0D9091D337592EBD04E9B34C5597E0316768144ADAF81CA043C5B555902290F7
9B2F0C0322545CFE3285AFED646F2CEE200D38DFB4962238232C404BD5041C2A
7F4C2E34A9C1634C8E073E8BE85B932051F7FCF34D15FC60CCD35AFF4E1FEC83
0E7F1915FEE9C55F213282E9123B6104B2D5EAEBCBDF6B9B1777659C87C79A17
DEF6419C08804C797547826EBC76007B10BC89F0C03E9A8F077FBE700B85
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B078A014AF3BB404CDF3CAADE7A8ED6135F0B1CF8
78BB14725E4813E05782683C877C7EC4C86D6FD37805197EDC7909357DFB4C6F
B6446FD6AE83EA4BACEEF5150E0962CF1989F1179C80ED82109EF203E8E6F42E
7E4D4C03E79C04FF94C5059BAC10947BA16CC916C66B1F0A58607BA2BE87050F
8AE8EA728056655F9D9DA1ADBCBF43264B09238DCEBD82AE6A09A234149ECD5B
B28348B6B53DE1E9D5E4B896D55B6783FF7E30080A67A66E91A0FB68E3E12A3F
C761885FB2C91CF3D317A7689F02B48F1A93BDFB2E5EBFA8CC8D2229A01DD36E
75EFBC2FC9878B26AC87E26AAE62521BEA21ABC737D16C9BBA570499CAAA419F
561B5ABE427F4C91C807F1A3B23B0DD937C0CBCED5F167D1D09049C07E649B14
92730DB5499E3027097569D8154C1BE749165D28DA7E2AFEAD936AE066ABFFCE
EAA68E1FAC8321871A09D6ECAED6F3418A66D35D6940A3FB549972ABB769BA0D
AB927E1D420A61A18D59779EAC7573D77E335EC81AFDF3F629F7967B89B09EFC
1C0822DCDA03918572D7480DBB61FB1A2006654683A71DF52411E554288F5A30
7DDC3E595E52574FBA6DAE04F80A9FDC4C875876D414F840BAFC74BB84483695
C1D6DBC323F6847592F0BE89FEB4B84CC0A3F6BE1B968E6F1750A2379DB19F74
24D5EB827E12F79C9CDF5A3085BCDFB39B2571FCDBFE86B35930482CED7C243C
96883233A642EE8B45B3B08141DD5CDE37FC1436175376C3719B9710793CA1D4
83984CECE060A10A0C5344888C6ED56E0810AE5994B981AE7B6F030E18F7DDF6
B4D05752F93232509E529407836CC3924FBFBBD4E1840065F3F43984F9BE9D28
E035B97D94C0C8E55495FB8EDA59618EAA62D3616BC1FB3B7C5F3EE8F027074C
78344C3C77ED2B75356E08825EF06656AA111A3B5E5DC9C7FAC375798319F29D
A8C996F21B95EC298B4C5C980843DCA734A8D815FAA4FE47E401B22682269B7D
393B8B474F446A6DF0234233EF08A17ED68AEFBBC8914D0B48251C111CB99C68
581593A6CEBAFE9A9136C3AAE071B00E7D298DDC0144E7C1BB169635270568E0
60AD7BF221307AF6161E0E82187082675F91CF7BB877BC1BD97582F6377E2D42
FEC131372A2D75A4AB18ADF4ED2688529F8F51F817A1979163F3A316640E382B
501A6BE18C334DEE750544A82E58757D6E68D2270B55C17323912234DA3B4F3F
89B6ED615FB1A022FABF29074FF629E2D24F4B9B2D3374B9E53BF531136A5EDF
9192965ACA98E06316C05FD641B2DBC25014AA98D3D0A708EEFB81A2C5F15499
05E455BD139F7D3911F48E1BE5D86F74CFE9E43CC260F4FC67F9F68D7637DF09
82785DABB8684A5525C6D23E69E08C51C48C374BA974F603DF4E0C8BE81C50F1
CF9F61728BFD8F085EFAA28460323E61C34723FC8529F41DB3C71514A006458A
52B68E702ED7D3CFD31F6D7E24E8B3128B3B0F66D6FBE907224496686847529F
68DEA6FB7FB3D7E787DD83DBED95F86B97E1E9D80D9E991753E177216DECFDCA
976E967EED2CE2C439693E2FD2F2C26C7DE63FE6AA6B6E33A3AA245AC6A5AD3E
FB0E11E043CB6C5D95137A61DB977EC7BDC3F755DB6693581C5B4EC3A0CE7C61
8E9694E35EFBF5EACD4FF4C0014BE2D781089DB3C1C7B23AC108144549B4B917
20D5FD1EC1C2840B4C2A9E965D3946BCC044D0F3B57D945246228342B574997B
125A2ED6077A79B2F81A51BD54DECE76FAEDD3A13DB0DD2B2A2621514057156F
95711AB10FC7C6DAAB71CF21D618A11C8FE5D7904459160186297873833682AC
8605C4F1CFF61783609DA8276706EC7C748A40418CD85FD323D46131B9284B3B
D23DC133F7F5ED56931FF5F3870023C31C1FD013E77D86868E7D5604DED821AE
4C939B5267804B0409836DCD1ED20EB82747C47F18DC85145900305F3881436F
F4236C7F23E21C499ACC7B5B6A1A3749C1342AF400984A169726BA926E6A7AF0
94A1F9CCC08D01256B7CED1EDC431201B02AC1925E792B908A541D32880AC41C
3C5F806F6F40D3C144723F5403453E9B176D8D68FD62E9FE7511E2BD4E6191E9
765C4CB18671307933945F052757D4886E4B878A2B5D561F97176033A7A3ABA4
68FA39B0955FE82812BF2A15A43115DF2E547E8D293DB503773A3FAA74234D8B
851D3FE8B9ED08ACE959392226C2D9AF9CF80FA4FDDD613E1E98225608D19BFF
B8773574AF9236054A1625B27267DDB7191C87277C0193F91D9D898C2B06126A
A0AF078126540BD2D435D0AD6CA9233144A052FD7E0263C77E8DFE3EEFA96E8A
485BB7EF3F9EB3A23919B4F744E0A34913ED4F3B358ABAAC54D93F05357FA5E3
B009A41E67FAEC8A10F357FD58BE2A16804A4997ADFEE6E00F84F822BF82880E
4507BB163A248F9A2052CB8980119F3F2EFECCCF2C0EA323A643AA617DC3B38D
8B3697CECC8AA4F174F5B11420137A8437C97401626DF593F477A0F179C4069C
020CD20DCF02DECFD422DAB156ABDF73CBA7DE351875F5193C1E8EADD19E2523
96699126A3C769848DC244DCD4BCA9017A6AA6EAEFDC44DBC7C26C6ED12FF675
0E6A34571DD48A9CAEE7F9DFF85745A875F3BF3C4B8C0F978AA583170CEA28F5
4B643A9BBE064D3B9237193F2BA020B98B9BD42618FF76B7D7477C08779C0180
E034A90CB76858E6F85C655457DBD51637C51A5FF27FC1322BEF3409ADECE18D
1DD8656751732BF46E0CEA6E10C406940863B1EE4EF3140FAFE77CB4ED988F59
3D50CABA9A80227F7ABFDED110C7B0C9E17F1834BFA8B62EF9B573C080BA84A8
4C9BC4093E2151EA61F538857EEF16E59C37EAE812266982EFCC4C3252AAFB5F
43EFA9F020ED4F71C63297B03C9F7F76B44EE925C8AC127519070B2869FE6393
EAE0E90E7FF7BC2333D4E0215D5201E7C62BBDA2ACE6A6AD26BCB0A0AB1A26A0
049604CCC83DE13D0FD4AF0539291B9B8004F211BCDCEB59375A259D7E52306B
185A4F541C29B07E6D9B4EB69EB2E7C12DA882944E6E8DB113BA70E3AF464247
9521BF4E6EDAAF5EACC12D2733C2962F92F524CE9ABCE9B5DFD6E935B1D43771
DF39AAD3ED676A6784ABF24129418CAF9F4B3F23CAFACB1880D07BDF63EDE128
761D164A9843955BBFEC7213307B783788836D494864461E89F9399252B2D0F2
E33023013BE173552363BF87271B5DC4615D281B73F4DA92823A4FD660130925
621C1D1021B2730D8E6F613285A713A005746744485075BD1BF8DF1D951426BA
4EB4992B5A523877A7A5D29A4E67E7A55169B3CAC15A2E49B48CF046E74067FA
053F713ED73B49F038447B2FF6C27CB74E69FF8C7BB4125DFCEE38C970B22B6E
51EB375632C6148404D29643BA5DD0C1451610AA956E22BCD5AB67777E28EEF2
F6D9C2F0650E649AA4B5498ED7FF197AFC2F97E36F3B4D28005BDEB67A0F5C70
BCD554C23A55968EBA1D4B6240067FD6CAFCB00B7BEF6E47AC23B920F7B53519
3DB8FD8A30ADAFC1AC17B04381C6754327FA7C65AEAC1A283A5C637AA13E1F15
030EA41B1E721FB0E23746B9F8A98A003FCE2364A75F034DD192697C4EFD4B9D
CFC50A59E0ED2EC6C95DE1A7D7574828918BABA81A5F36CC8C1A96A715630066
630D8595A47913D246893E3D1682833518628D0E33B06E3DF0CA28D9626A7DEE
E92DF84CF596794EA6FE7EC484B84DD4DDD8BF2C4162E29745A69E77132FDF7B
EA261993A02BC2A06C3291DEDF5015FA19A653D1A763314391267AFF415923F7
250C5BF3BE382D95FF4C51842A02A0C9F79E01E69A6025891C289395D9D280EF
5159F0CEFD84E9F655600B8893EE2C65BB593B873A704B407A25FCEA468F8E5B
9780310AE4D7EBA4461B4C8FD1BDED06C1CB188FA1FDDDACA9B869567B7E0DAC
C89742875BB61F8E7641F58AC11080C471FE2405773EFBEB2C5E034FEB45E942
5DBEF583887879AD93C362A3795E8B267D653DD50F1BBBDA92833A987A95FC1F
275B90BB4D11081E40D7AED32A610FE0C72FE1F4AE7FE41FE04BFE9A354D0525
76ADBEA1F7EA19CCCB82D7F079C262576524BE0B1B9D7954D406F5F239CFD0A4
5FA31EB5B9C93A2D1B4F9AF7750BFB6772F6BF07764C82A7AD0C991A5C416B64
BF6865B32E13A33A4B1A6DE8226F8B442492E7A89D2DF0204E657D0E44FCA5F7
9A1C37F03E39BD49697D30B8BCE8B9341D2DAA72F7FDE0C202B4398224D50B11
1990D1F4436C860DA78F1A51CD879EE60CDF648F9677A2701944FEE0E51FD5BE
B50150913B410E44CC26D3A3E0F450318BD182CB6F86A942779497FC5A0371FA
F14E7D7542B1B42D692328847E728072BC6FBF2402581F6F84BE8AAA3CE7A906
C63EFC4CEE5E3E6ABF752EE368229466AA66BD23250F324FA5E2D02D6AF981A7
B0CEBC56A4BFB59C945F9CC15C9669D2032254A2C2C9BA623D7424874E55FC53
58F9F242AE84A87DB7216A9599E4081BE9494718C56D998F9DDE9AA52C55D565
9BC38E6DA6E587C23E70241F9C323674E061FE09C118F41AB50F30D846DE839E
6B56218E7F536581357A3BB0D84487B7BBEAD90EE57EEE028900491428174595
B155256CECAE9184C1E3851FCE2BA9A86A1DEAE13B532324E93DD8950B75AF0B
6BED7C172549BE9D3D24AACE8B39D987CE15528ADEA1C1DFF4055B9EE8EFC505
738B7A2F04130B06A0276FDF1C8035B5502C46DF4A11ACA54D221B44224932D2
5E0EB3A772338F8C0C93FAEA6B72F763BCEFDE93D5D7FCC28FE9A9D7EF677C45
8C7EDA46DF04FEB9A8A813ACA5C119610C1C0F16071FE6249F5D7B6B50D4D200
4F7295D860A2974B73A9E8B594BC88B410E0161CDFBF8BBE8490F57E53C78E97
517EF7FB7EFE18241BC72354153521F52CEA26439A9CAD543DA05B258F0DAF51
0C5EF83D1C082F1869429B0A2626B6321A962C0275F485F8A27B768569194196
13973269D39C70D15C9D65F5C97BA8936194BEB61340EF3F8AD3E1BBEA39E25B
FDBD9D1711C55D85517389B468FAEA7A34B37946B3A7B7B9AA763F56FFFFE98E
8B960C5B942238491316A20B353267B2BE5B8178E6B7889A33771F86276E6DAD
2DE279033C4AAC3E18B02E195E87257DEB8A1F648BAB6FBA8729D96927203738
31BD3C4E8F387C78E203E5DEC9D2F8B02F89B429212C584FB9461A52DAB14D19
C7C11DFE4F0FE7CF85FFA8B3E42F7CBEC366E60C18416C4496A349ED6A68052C
CC845170D1DD32FFAC02A91ADC3E600E00CE29C4EFA9548CB450E12BC8B4BEE5
E7F2266D7790D83A01C80C7E195EEDF6CA42F8B32E1766E716E3B55ADC328CC3
AC493DE8C2F022EBFA14A2976D8E3739DE390D667DE1D900F22956787D089930
36C7FA255859178E81068DBF528C83F702F2EDF4E45D0FEB7FD43B1DADF4ADE4
F8C24106E0D76B8DEDC464BC4C4261AD74BB523A1BD269021D4EFC90429432FA
88B4225A1C231C357D32643958992778F2BC6CE209D3AD173924E6DC3BBF2FF3
333CC0516EE29A951A0332770F1EB78C7DC4285D78873C11E9D40A2414485EE5
1C916E20BAD2C45E5594C2C6AF76A0DF223531C12CDEC349D2325D6FAAC3C342
5CD2C00F79A4F0E84F0F996562DA5BB51608D3FEC71D1DEA2AA6C41677519886
FDACF388834B1E6FE3BC967FBBBBEF8C466E8E71908038D3C02B1F5E8293BE9B
B9C93D7F64C21C8767DFAB7E5677415F55FF32E4308FE7157FB736C30189120B
69754ED71D1AE7D3E07FA1D55A3D963B8186EE2454E318F5CC571A951409B0E6
9BB7A2415DF35A5681980B77285AF53F0C37CE00142A9692810F77C2972286F2
B152BE1F52E47D6BDD0DCD828F689B44991AEBF22F7CC829A95B90E4D2AE72DE
0693356B5778D124F1D4A26A62D71FAF1FDB22E36A57E3F58DB7AD165CFA1FCF
B9788F34E0A1E814732B4824505623842548D0B56B485C2576912814545EB4C9
191CA240C9AB7D04F31BCA667137A76761CBA2FBFFCEAFE3E98D5590DB37F0E0
7A077A88210B7A95379D2D7E532DD155061B0B6C25FD6629EE8072950A606224
DBCF1D83F5B188FEB5869D13CC7E036657C025AD24664C9C830776F9124991CA
8C0B94C9AFCD891385D583919D288EF9EA7B75EDF72CCD4BB1D84D1BE81AE2EE
6C98ED603B385BEC1DDDBC2AD2B526C6CD55B427B524171AAFC753B208667AC6
B70F3C41E627B1DB9876EE658C50AB2C826B6E69E994902A4C425BA976EABF2B
11775929B12E530032C24BC2D66EDD81132E44128EE1BE623EDD5DAEABE636A5
9918E193BFBB4953AB21EDFDCA58BBB7775CDEAB6E4DE38B96BF1008A17ED68A
EFBBC8914D0B4827F56398477272F3571958BB8A5A5588FED7F69020B67B1EDA
1079D05B0E7C7BDB432343F0DDFC433D1F9AECDA0F3E39C772AB771A74EB93E3
DAC78B1A952BCB3C63A9C6653C63E62401FF8E32AC2D33BEA4BBD681EB4AC7FC
335CCE0EC7494D4247243DFA8385DBC5760B397F0EF9D21EBA7B64E68CD0F58C
E1D60E5891AB5BA93B1B721662C03B2BEFCA6E17741DF67FAE0F0348D3C3EA3B
035C1C5B7241643523B8C6A3BFB4B3DFDEF5363899F97A92ED109B343350F39F
FF6EFFBD6E8F0488FA7A54B4EACC222BF2DE2CCEE6BADA0AB587AD0479EBD6B0
94B14FB8851F1FE96A25738A5FE7D15D283886D8B4550D5216A8F36BB129E5CF
E6B9BE5EB2233EBCFB29D09C214FD2D041408D69CCFBFE7E3062895E706E20DE
8096399754FB30813E3595088CEABFB137634D2AE8694C53BEEBDD1361447F14
B549B1E8C80D263159FB18C27A41CE503CA976FFB92592316FB23745EE6EE084
196CDBAE8F16946D8A6560939C130D20CBAD9EA901794AB36126A199A07BE52C
F08668C26FD29AB6E849715BFCFAC2784D902D69431D12B8FC3708B3E83D87F3
A394FC38E69967833C0A11D402B666A82EFE254436F63898712D63BCE010820F
DAD9ADA7496A1D611D5D428A63460826B6BEAA35BDCBFAB877853AC5A9598B71
BD06AFA2D779C29225888F5FD5CC13DD0B97251C58C2DF3AE4E1AE41F64D1B51
01E64784079D7F7DE95179875F217C0D6726098092EB246E31355CC21AA617C4
94D2B867BF1D13335BFA551C7AAF5B61F44AB6F5977D1D2471B5642E457D0BE4
06066F0377FF6C662EA0701460B561C27A38B139D86836945424DF3C274CFA84
0BDE34CAC6B57A04D9EAE9B90595D13547FB9EE90459E00A2F7DBF72B2191F8A
281E6314A36C1D1DED8A7793FD6BCE759F8302447FB269D6C55924D36515CE14
37906A0FFAC7846E4F1AC6540FBCB40BCF81C09D14DF8F5DA10E7729AEFF7D3C
F49ADA55F1F20E75AC907E211E3B6E052E1597B542399476EBCADDBF3B8471D1
F73438758A19661381D5DCE504B266FC2FF3C70691985CB1DF1C3829DB22E031
7D73DB9E2CEEA0F1FAB03F7F6B25CA5E7F2A6AE9C67EB7F32BA17242A4167169
E7AE53A1067BAD45E3F4249AACD8AE81CEC8190320B8DCAE9D85192393C682B7
39EB43CAD8C3FD4053B2D53E5F0CAFD14FA0E75A402A26F85854113E102AB818
06F472A65E846B6302B1D58E2DABB37541DF88049C1F1B0F23EBA130BDDEF0D2
002008116120BE3E47C31D0B5A092F3EBADCE87FC499FF9DED0E6C8FD6715B57
97EDAC50FD58E252D2AB5429BF76E1A7D08ABCA4443ABFF10E74225400E47211
33F3D8831697F7A4F802E76BE91554C39D2D854460A9934BCAC76B5E9D25F7C2
4968B44D1B4A75E18ED9CAF70948A4492B9886712F81E03850B816EA0E687794
E521E1447DF673F327C0031F415662B8F9B1B09DCADFB67B23FD0CC520310B3E
F0414CB723B3506BA05970AACC410555B525925D9BEED7A3B4294B006D7937B3
9753E7688CE5356D6BD2F73A46212368CC9012404B46A10D44BF63153E8EDD8B
D7A5C64D66319AE0C7A13EEBFB278220918E8C476DFC80BE6DFE08ECE9E00160
1A9013E5FF22026C6F2643128B9155F977871CC66741C7740590DD9E18801779
FBC3307C0BB8A578451867687C8CC6ED1F473C705AB25634F19770334684CD70
084FD2A60EAB988A1C23C7B8940F5D2568FCC3524F6F89EAB3115875B876CA70
B1C7D8A94FF1FF6FEF4143E5FABA6089B1757242BE47C2EF1682A05ACB1435C4
56501A6C6A6886CCB53BE427BDF9D42B997DDFB57EC2C439660811F64727073E
848B2EC0BCAF7A59308F505DBAE59B4A724095E05E383CE7851BE71430B47233
91FF781AEABFF8C78288519739BE3029B530AB99921E6EB29842A5B22462EC52
715E496F7050A16A6C62D6F124DE122BA6312BA80166D91855CC803FAAB932CA
BE462536722E95F8B6333D857D0B6044853C5346456FD749529EC1FB00BCDCC1
5FB907C50FDBC4B919AF9DCFE7C822301F9D4C78EF2A08B1190E191E921521A4
BD6E4A678BD8857D176A4753D27915C7EE363C4A24562849E8FA141C5A0DD359
F5CA5EF8352A3B2C0C3249870E1F82642B687E0179045CD911831536E2F66A2B
9F9683381C56776D27F95AA2BB05A1FFA362AD33E97A907B13ED4B7D58A450EB
9F023AC8B7A9714834A884A4957B1168D1E1F46742DC29BB4E5F23076ABD5A74
826AC08513E274289FB76B207496CFE8F79F3B51C476287897BA6BE3AE9206F1
5177732B1BE1B4DC396BE9F0F8A3D99758B736011CA5A4367C5A82893A714E15
A869A760D44D5B355836833BD1FA7CE36F4176BB68783B63BADDD3605467881F
7CA534E44903832708B39E90FD6AD32DFBD4E8C89A9FA5772BD7C4CF67C85B1B
342DE6B5E3E38467519B96E7A56FECEF89308690128293EEFA925E555E77E72F
0216B34D71875B4AE752E9465971C6B191B8D3ED752968F923AECB58B21CFD76
093637EFBE8110087320F134579D9E18D1E0A108A3F71AA54C887BD6424A4B3C
207F0ED2FD18B021DBB750F2BEDCE5884443D5A081512395BBE9E6A0EECBC136
52729D08BAAA7523628FE96F7F0362A7A748A63C6E86103801F883767E8A5D9E
B331968579C3DEBB3E382BC77093BEB24AFBA76B5227B40091656B67E3FECFBF
56C20DC805EB5A096396CA62ADD6CF71B58F3F96A0EF46C1F40C916B01C3A606
2F7A3BC54250B62CEF85C03F169A8A028A655C5D91AC7F8E69FFE57EC149A6A2
10BFDE7E7E7AE4A6886CC43455C6C44E9FB7F55FD5649526F932CF6F76E1FCD2
78C1CBB2D87BFD031AFF7612DD60816C4BBD69AD60434EF2824246CD4B7C7592
758D2EB863245EEB2E2C049A42A9F1E6A3512C0854EAB18A0ECB0B865BBFF7B9
C94BF929F948962B0B053166481A602CFA294CD5BF38ECCF14EE2FF0443BF777
99E457D5902471349D7A4882E19392B15602C09DB839E1DEFF4DB50714EF1CDB
10A9A02F36C06FA7B26238CF55340B24BBB424F4EABF0191A11501ED68DC6157
50C28D1FCF8B365CF72B8624A732F12A2661AB1FC21CBE13E07D84E81C83C06C
D17C7B37885856BBA23EFEA2AB1902F879F1361AF8C170DB9894C7BFBB36E142
D94194E5FC2564ACD7935C768565DEB42D646CFEDAA09CC251C84A48B5AB27BB
C9E074D7496B27DDAEBF19F411F46AF98FF43B1D23ED27C8501BF5DD26AA443B
6B73E80D855F5EBFF6A5BCEC4848CD574DA6120EEB299C2761995007D2B275FB
E9E9942B7E62CD2C4EB718886E4FF6A9F8F6EFAF9552AD1D7CE6CC9B8F912458
C1965BF8BED4AA857E62B7BD008DCC0C22E9C6BB5C98826F55898CADE887047A
1128E0AB55B1AB1BE8A2CDD3F5477B7C100C82E82FAEC0BBEA7AEF0B72EE1168
B0E0658B71C1442E7BF4C1C343358685BC2173C17EE92124F124742C1456D590
D873DCC8B012180B2D8E7848C9EC8D98FD54FA95EF36B456B0FA852538D8DE2A
96FA78D778FEC5D66460D04955DFEA71460082A33C14265DA8B40258E56469BB
61EF8C8A95B45F5B930C6F503BDF87CA82AC039F77FE0D4B91CD072E5DA1DA74
97143D514298FA7C892D566AC886D9C2D17F9C23C68FD0AFD0E4D3602126C40D
56F36B7B275EF7F771B6DC2DD039238BB9E71EA6161CE4DC1FF42DF64FB16F76
AB23471C47D178DDBAF6E0971324F72468AA5AD6D13FFC9ECAEA8D4ECA89C657
58520C434F65A0EF3B575960E66F480273B573CA453340C9E6BF826014AB7626
5A00842F913EC6C4A987E2812B8CA402021F33A3B306589E39DD881F949193E2
CEAC47428B1835A1E54618236476FE2186280BE25E49A815619A4F69E6142B44
7900FDB1DA06FAD6466870C3B0F9F47FFE4EF9561A25F70102C8091BAC6092FB
FC83F4332A5DB7FF85ACE0F25ECF30A3C901645B951E28C90B60556590135963
2E5C132EF0798C40DD4B4F155166BA36E2A6FA8745C28178B036AC8106AF277B
9E36680ABAEAAD15FCC0DE88213B28CA601D37EDDC2B0368C63A0FC9BE16947E
C364E70D5006C95117834941609FCB048910F3D70211659CDBCE05F0733AF96F
E0CA71E803F077572234B5E42D053482045F9AF9790CD22C1FB163F4B524313B
5449F465FFEAE0369FBB39015D563F6357B54389C5E44E2817807494BDA2645D
0FDE0972D9DA98CD07113C4269F06F393AB1B9A792961905185DD93625C5D2D7
209315F9E358DC4BEB66160A8FA50C5C1650C9E72BF8E2143D43A1481140B102
52DC8E0DFDC9429AD13B1AAFA21DFC19A784772D526FCEB9E031F092D8151F2A
38CEC48D2BE2295D65DC814A7E2512A22294AC13BC1896981C1C405420B30F35
8973819317B27948DB2C59EE7D12E7D455F57DFBFA97136B8FB23433D830422A
E25E593E88CF77FD33BC3711CDC7F1F132C983B2443B49220B4FE98CBFA544AA
78837ECC4288886A217873A8FAADC8B18868462754D13AAF71D5D59DDE0E1AFB
F3C5925B79817FD6087F14C709B611CF4B49A6910C0F27724B8790F33E4E8EC3
23DC0D3D1C6CFECE9A5E1FAE4903D01C0D17932A5A6951760EB0044BBB440A6F
8B42B9FE977DFBC3B7BFD602917B481E3B0172465681E4FD2380988AA95E5720
FB5D45FEB02AA45FD1B4AA06C2C498FB1C9850F217FF715CE8F26D8824228BA2
17260BCE49C0128BDEBE549948E2449E56B6FA626BB62B1FCFDEF2B795B2B273
9C47A0240D1B17F18DA3374D6C2AF367989C927F96CD99C59AF2E67E17B82441
CD2ED1E53E27DE788B6EF1E0674D9EE8E3BD72041AE1BA3D5EB9994F0DB9A2BC
FB8332218D0C64F81BABC9E046AEE8866049379032547DE084CD9AB35B4C5AB9
858152E3FA129F743B763E6925BB7694BA59C87452F633CADFB9E07A466DD5BE
6669EA83CE447F36E05FBF106DB07978710F38D74DA602A206E86C0673168A9F
5A0A0EBA3DA0263B9ECC33AC6E30388C56DCA40272E3B9FE3A40FC4E50E836C6
1952902BD02DAEF1D7987BDAC350E368BE934BC2F508B26F49E98FB93443F5AA
8CACBF897B9E70AC08D3B86F2D614B3185A2B9793C0F5FF5480B701A10570D63
FA6FAE3C75627720146C67EE26A6FF902DAF9A0DD8587BA20E0CCADFC9489CF6
BF32D2A04742AC7DB4397F03BCBCD562759C66B7B08CE4E27D7646048EB2F948
E9F41164E9E7418B873A1AFE79512EE3F3D66DB814030AA142AABF1B01993484
4265EF78173A6F6E493B7D9D0CB8B4F85EB666198E9464C355692E46D5F2F5D7
172D365D42A9C4F2CF80B52B64FD9E895EDBF4012A9A80C384B693F7167CEECD
387AEC186F765995B7B2AA681A3326D35C5DF5A059418355ABE624974BE5AC0C
BFE4A0B028164CA2F3769C139F3FF00FC865D3E387F5146E887115E5F8740F21
383794D27413275F54EC94BE4AE160580671F4BD43BAEE848CAE254B77057D96
CFB5B9AEA53776A4F37C84D143DEDCFBBB9D74465389120674CA292318236E5D
2DFEF981FDFB05CEC7DDFF9351F1895937EBF7C60209EAFF421CCCE6229B9D5A
D3F8DDC98AAF276FB5FF83B825FCD6C1474FCA1DAA1C8D271AA714D790FCDAB4
B4FA13CBD9AC37890D389F82DEF7BC6DA0A12738914BCEC92F08B4A1B1ED9A32
0444DF20153205E3DCB0397BE0EB4D60640113BB0045BFB40368E7F25E8D385A
37322DAB65416F021E5F864909E589E12A94FB9BA22DB03751EF775FA203CBD9
BD76B717A8CC0B23758DE3959BA8CA4E6635A61BD7E5EB29BEDC9314736E9046
AED39FFA15066BD90A78A7BF778CB305E68746B94535F306B2886CA1FA0225A7
E56AFCB0DF5D8A77AD7A78DB288704B12635330EE41A60BA761D5F1E27EF82B9
4FC0E09176B7D06D227DB829D02C7252A2C9F427968F247380EC17F2F43939FE
C66C274E3D17ABF313E5E32EDBE2F1C2ECFBE9771DAE4E990A6FD72F21507FC1
CAEC5D45A5B68020875D9C61B271FD3988E880FBF5BF9219D6D389207812AEB5
00C4D4B58E968334F369D5B2AD9CF95AAB75E42DFF5B0DD6B96D1256458CF9F9
31AFF7516F07F590B175646DC05B1B4AA083775D691124FC98065916BEDB9D42
364FC91AC88F98EE11E8609E02E01CE34455BB1795214D8627E32FC0C1E0FBE4
9697DE3CA8742AD8D13F5534CAFC203BA52F1E317ADB5BBD2BACB4963425F10E
2852A68EA749A2DE2144814F267597F3BF7F38FCD21A8677081CB402C6C2061D
EF36DD1AF5F08BFCE0C7274DE31F80C622F063F81EB08F3603C7B394AF78C7FD
F64561AF84F6DDBBDDEC6870540BE795876DCFC41745507A8B1CD1069BB7BF3C
1C1ECC107601185A86657D41E99E0AC88121A2792FF81E14018619799CFA0F47
B10BBFB484F5849C24DDBFD68D69CEC0E4C6125217ECC6E36B1D90D6E2B2B936
A4AAFE81AB007F6616C5339D9F9E71F70C9CE45554B7392E04B4CA25CE03E18F
36659455B5EAFD8063A99E6AD81B89E5775DC35780CE80BC3B3B39B4EF5CD5D6
E114B0B9D55A1ABCC8122516E1E462BC0E54552629955F68B692FDDBDF93556F
A7685C64A2CF4DF2E82AF19552D766E652B80E10105FEC8DBF217D55247E6AA5
8C7B3A65D90C4598DE6DF2AA81DF1E7D62B9FF3D5179BA96D4C42B0063B3407F
3CF897C932F9F86D0D4D2EF6A25A1927485211BF4530E0BB20C6CF5A4C1EC4E7
6ED59F3EA547541714D6C5511CC846D0058DB1B5EF5D5AB3BABDCD98A63B8F36
50F86AE90725D1E79B06983EE35ECDC454411C1CFCE43634791DB7B31DB020AA
A01B3042CB34B1025509BC87450B4FD9E8A02BF29699969E2F5A8A0C9C494449
C69B352C0E6A899D71910B484386E3CF08CFBDCF9C6E1524239B61C25930C639
2C1B19F24AF3EB5CEED2399B940F8D676B1494F524F4E3DB28B6847EAF3FF782
1933E16550AA7115BCEC66F58FD88AA6C63795785B793A7FAA7D7F67B367098B
CE47E05702B806FD4CC0208F4F1C1630B561FEBDE4C44852FDA43D3D535ADE1A
70B9C657BF5E933B20ACE3852152249B0A3DE32AA02349D6A7E743DB6094275B
643C6584D91078E593A5F819389D437463A5BE869CEB87DE10EF611B802E5B34
CDD288B635793AC884E8B42640338CADF35AFFC8E11C3503F4D28AFCFE5578A4
F104E71242BFD727F00B9877A29017532487CEEB754055F97A776B61B78597D2
A7EF4C9B3CBB9E25E022DA5424750CEA579D03147CCC3979D489B149E945FA71
A6D68FFD17B339E8567BED29FFB6199F8DB9E5AE11D8E7CF0016455E46769CE4
A10C68A4E558A788A4AFA3D87A313BD9A7D7F806C0588CE206DF3832D12F9AD7
8239F0AE0022DF01AA36A71617A12FEC341402991F411B950282A4CD40C3B8D8
6EA400013340CFEA5037551A74E6CD0E1A00C1D85543013BBD08C428FCE71188
2EFEBB8E278432D6E9D53ADE1795A287935F0E7AF6D49CB9DC59427AA75801EF
63981DEC08FC76030FFF8A6E6797D9D6D4D6794945B39D23D734E112A3F1FA8A
C72D13019A4A0C7B838BF2BC3374C680784C16E2948C26408408F057AA017A48
F67058C4ACFFA1EACC34E19B66C72E4635691DBEB5526AB5CC8F08590346F496
7BBC50E48245995DAF7192A4068AEA6FAB7A9035400BC5E85D0D1F82AA5B479B
5808FD0708492E180BAA510A7B158310DF438B1C27158ED1F4F8AC0E3EF19FE4
C9F4F0ECB00DBC7106BC78E02B157CA5D4313C01378A3DDC7B29ABEB5408140A
21D3003604ED320CBA92025D3F4AEAFBDB588772AEB23A97DD9F7E51BA83EB86
DAF47CA940F044F9EC5CBF39DA213B7E5259760D45C978FB562EEAEBE35AA9F1
43201B8ECC21BB428DA5733EBF79ABF6DA8D14BB87C44D523BC02AAF352822FC
6C9E3C4344B08090D7B48B79A5E5D88766581831E7B53371642D21407CE982C0
1BCE322A10C2FD989BDE0C28C40F4854205AA8F4281B9C5C4C8381EC1D94F501
FFCCCEC05628FF82CE9E7C4BD23AD1474D5EAA684B8EADC5D12DA28C937A52B3
D1546A00FA9320A14013C540DC0B2C7702F09131A46903CBA266F0996E73B712
4871AC35FB114E9AF4817386472C81AA67FBBFF50AC517CA096F28C106FB1CC2
CF016E6BCA9300F08BA994239C9716711F492F317C6BE4E3D2EB5028CF36C600
0BF23A56FBFBFE8478F1CD00150EE39F0EE4EEC8F352887F8DB03D70F9E692F0
A5A3160110CD4091CF227FED7547ED1DA6E35253BE7A2FFFE59642F96720401E
BC1FADD0B0AFCEBECA917E174E7CD4A7D383F43A77F7E650E1C27BAEF83DB48B
F2FE85645CCA04C28081BFD041C5F898AF5891402BE5AA256913FF234998F083
36182FB6D5109CFE4AA8453BA37CD1A908D55551B2B5D07FC481AABE682C03CC
AE21667DBC91D374A86F26AF31EF0ACC8EEC65247E5F413794C05DD4226F58E9
9040C0E7DA2562C3B69A717F4DC319B4B59D18E4C6A18218DF587BD534F0297E
3615F4E68DB6BD2B9412DA602B025CD7197FB2EDE22202B8A17630D41B7FB8CF
5B187B18772218EE8244B5225E97FEA8CA8375AC2F7A5ED24A2ACB47B78AD526
56FBCA68AFE66BFEC86BD5508519B427DD0AB6ADD611FBEE6711D68EFAEB8BFE
75286AC595BDF977D9930D7F6E32147B77F682C13F8B9C6C05DA62E9496B9279
594E51068CD2F7AAC0832449684418493C3E06B1CA3360EF22A0FB7EA04CC885
227ECE1563578A057934D049EA886D3C11DECEB1FC85BA843CF628A91F218FAF
96B1BA106BFFB0441A17F60ED1BCD3188FB37F60CF5563140D43CCA578E8A1A4
93E6D63A146844CF57B80029BC72250885F909C04EFD26A4F2185A63579B841B
19F07BBB919BC08E6FA7DED08E7F0FB6E03BB7B279E3944C8D5D5037DA4597FA
6BB6730526925E87CEDAC3F2F69E73F811BAADB3384E6842737EB5639A3A30BA
415E13158237579165960D95C26E692F4624D84D70E01DFECC249C350B1218BE
02819693EC1DA415928D75B621760572DB602327834E9E2AA09278BD704B78B9
376F2C8111C2E630AF47A107936EC574010D575C96A8492D81CB2D49EE17369E
14BF1CA5A16B9704A52199346FBCAF53BF73F946B578D70944D32D3ADC766AD4
AF766BD6F0464D8B30090BC982ECAD86937D32FACAB14D9836B5B79011B86CE2
36D7D91CC13592573F32EC6A94B6751208B89681A5A80819BA1219379FB08E56
3E79CAB4AEEEB8B2126900E3DB4E332F5DCE0531C11535289C0C7CEE4D59EDD5
91B002A493B2FAA89500F40402851D813A8E1C1B21758412FB891CE239BE4CE2
9C10A24DE0143B395526D852E75C501FC6E44D19DC4D12D3B5E3602D066ACFCE
D8C63258A3D4880759980EFEB25FB3935C42BBB8B8C3E827949B4D0241F4FA77
25BAC3B050F3094E08E6D08BAA8288152D83DFDBCF614DC061575636B1978977
F46A6FF563F73367B7D30301DB830B4178CD3F3A3EAFBE0857AF6286AEF4458C
22894768FFAFD7479F4B0AEE3672088710B9CF1E666F71CBF96F3D9A34870764
53CA3C57F84723738E1B94C3029520C1F8D787F99305E3372D91601FA203AE34
15AEEA37E86909CDFD42FEB80F91E5E6A8C24AB041F3C6E2B44AA95479E4E981
33504A431D1140E9EC3455C90F1D36E21DDCF6AD3C5D56238EC8847AC637448F
7623FE4DD17BDCED61F580312D9BD35F6E7580A6F29D0CBCE2A4A600DD5483DC
0B8E05CC5EA4E725FF256A318240790ABC17B490DF69317C054030BC7C1B6487
4B213D59BF27AEEC59D9232F2EDA3D3C74429311F98C34F6442C7A59557A24F9
EA99A24248C40C96332EFF00FC6766383E542DF195569E6A874602CFA5EAE2D3
11DDEFAE8E8C5255C6A100AD8F0443DA9918FDC286E3D852EC12DE5DB20531E0
200BF600B288F7EA9BCD4ECBD2BA66E7FE67E2CC8F507667E1585E9F3FF3701B
470AE16F5735414CC57247B56661DF84FCD8AA43D79BA09291780BE365DCAE0F
8C95C490B0432138356F4248AF1A7E7540CEB26F77C77B6D6320C39EE23A966B
4EA1FFDF504A69D38918ADE52BF3238E66DE0971689173A0191EA1B1E780DECF
5CE51D785E431DB246BA724F69FEB1EB7C2AFB151F7DB3788BD9FF8E30545E13
A3ED367DDDA8DB2D4C84D1A517B53B0BEA8A936F9CF329B2F4350B0D95BFC899
18C426F6F84DB84A54127CCD13C5E160F1459335EE2D121635479F766BB77394
4F5C6E0A4EEA33FE3779B377C2EDC53D0932D6738E0AB782F295B6012F9DF131
8EC2A064E41DF47535F1F3DF0FDC7F4F675EE08A890907F7419DD223827EB960
4E6C2AC660B0AD1A8C79254C14D337AD530F77D6F8CB332E5F8062C9B6AB3E0E
A7DDFD8C53B9BAE0AC60BFD1990FD3122155CD7807344B35971E24849ACACC9E
8423E5D5C17A42A296FD76588F75BE5F3E71E7393392A0FE4928556628295F5F
CFAE1EC8B8E3B1270C1BEB1C4042BBA0D34125774CAC7417A2358FF27E9FDF6F
F3A0842C13BD436AC67FA1B2A1B81A8CF94233F0832A94815A735A6D41839D0C
6C0CB0B720D10A73BF78934438A516D2744D73DAD0C2863B16B821817D68D9BD
0BE06F05FCD050B51A7CF5F297CDEE396A5424AE6CC226568F78981B480F1CBC
1335F82D862478606C59DF3CDA04D250BD9D3BEA17B4E257EFED2BCB2F270773
319BFE24A8976621C8FBFCA34B23AC10899445C4E5F44BF799734DB6C4CA9EDB
97A8A4AEC1FB116E1997B0FB23E6A72F93432E4C7643C090EC9B34F1DD4BB5E2
F469EE46F94E86E208B9C0B0A118F40ED59953D88C3FF60A8C9D26CE00F152DE
C98F89AF22A555A1945A9F872338E9CB2776777E42735B55DF5BACD2414E2F3A
EFBDB0DEA139D539F1465D50C5D1DF71C768431E399D2282BEDAE14864E48C57
D0F833DEB0CF206031C2D0722FFD3218887D32CE599579BE99EBCC1B00E6BC41
A1B72E6541567A1C84BB40080672518BD86DCCCFF874EEB1B0B826425AC4583E
0FF9D9611EEBD27D555BADED0538253E5B008107E2DCBB59EF380D516D54E050
0E1C89E393B465C22BDAF572685C2037214A29D6C618D0F0D9501159A3F97F2D
2400BC1EFDA775B0BA63D8ABB1E649CD7BD10DD19ADFE8134B29912CD7E6362E
5288564A45410F76839FA5D28C58901B8D3E18491EAD24E93C8953C9CE87D36F
BECEF5A058A73D9733FDDB6FCBDFD9F46EB54BBFDEEB0F6967525E5302C207E3
2EE2B364132E3E7FF75442A0F33B1B7C0C053F1608A956252350CC55C22C5729
331CD6D210EBA747E0FA256A192BA2CE4E79F2CBA423AADD591EDE71378C4719
7600949B59937BA26A83AA36912E05FF23630F50C0CD1A235945D8185E3EC311
7D87AA7659C9DC304AEFA4E3322CBC9E5BF80CD67AD90A4281F8985D89EECE34
8FAE5B11C8538820F77A23CC1945759F4271FB30791F330A89AA57E8C43F8661
F3F085EE06633C8A9D62411E0C7813C6EE8D97423A8BD29076BAEC3567CD7EAF
DFADA9448F1CE350340B37288CA08255BCDFD9CA2916B54B0A1F4B3C4322919C
91898053E8C0153F4CB3863431FF9F94DF8BAD9A72047991F13B71F527D42531
2BFD58FCD53D79FC51BD7484C836CA9D440461EDA1A481E70851A8F28339C9FB
9F72DE2440AB76209E2DDDFFA60953E618FF5467C4C3934C35E1576099082701
FCE199811DD294CC46CE685B8D8743FC64B26BF9E44921A707C2CF3EDBA68611
4DC8C15B7408E257EBA3C53D956C7FDB710963CAD0BD9EDD1F5A64EA728DE0AD
8B0330D0AA3C61AC84461E28FCA7F70B7ADBB35E0F1641F668817E64481B4479
C73E150FFD3C1E5807203C5389F960C2262A263D11F3C1C0E2E23FE1F01FCCC7
F5399762D1BC994E94B6179B1A7FBCBC193A12D4FDAEB0748EE2F49AC021F4F3
8BEE8DF501057B9356C1E1ED8B2C0334BE3D572A1C405E1F8666BAC6F512AEE9
F13F7B178DAB23BAC475BA70CDB25548D7153A26AF2CEB9E359BD9E5E92EC8F6
A19066B51C29390CAC7583F21FB6E4C8D2975DF55D9CC0ABC55E08BBD043AFC5
676268588F672683326DF311547C54662D523236E5D617A93CDA0960657CC231
C6F1D98278F2222837F578E92560FB682B0123147E9E8CD09DAFD054A067A57E
63DF2BD3F3C6CBB52E5D75AB74E830939CEF9EFF072709C78DD4A7B6D83F99EA
D74396128B0C14658CE4EF0F0BB84F21069ED4EB4830E5AC27F4376CAE289E17
DFEB5320E7F812CCC1F1F7C1A52A422E96CF0347E0AD815D1E2CAA59CC9EA84C
EDFD8F3D5E9A3E6A6CBC2289304DE656AC2AD026C8FB89E7E8106F13B0D7A3A2
A4D87FC5875FCA2059C93DF06A84B1D55E3E3FB9E7DA88E2687090C0C95A7E20
D8BB1CC5A9F32DD2A399810F7246F2DD3777FA4061CFF9D9C1A82925C7E0E5C1
7A14B562DFEE4836C38AB15B62DB8081A26B6E860975B71EC9F6763C1D676220
CE1AFC1724B9718A737FC20B37E6CD984A9CAEBF27B154CBADF3738833CB66B6
ADA4A8FC7B8E8CDC0B2E344BD865562CCB53F25CE29C161D1DFED330C2825A55
DD40C4DF8D976A95E18B65049A416AA9C070F26FDC3D2BCD6D0F3EDD54114130
F34676C6D6DAB5EB62889CE84080C2FA016D47E39AB62245767413E900138FD0
4725C99361E329A3E67F23EFA6DE495C7C9D966924F124603CDCB7A7355AD0AB
8AB3CFD09DA19414BDC43AA6155257C641D0082658D35A251EA07539866A1DB7
839361A6E9BE2ECAC588F37BDF9FEAB7F85B65DA6E204268BC49EC55F235BDDD
5F24949CEB89A93916C86B2A9DE768BF6F79EF35BF4133E260320CB39E191970
C0F0E81DBEF33C2DE3504C2A06911A7FB36E5EB80D09C748FC43A09805FE9A15
AA5610C82FE9B6F9C2CCBC0FF2E710146CB25EA8A563B6A59B12647827BC6F11
BC2C3CD7CDEF8DF6870D61324819BD29B657D61E2BA950218A3AAEA34716A384
28444275706266E620FBBF4BE80B2F496F0CED0ECD2CE99D1A8C7C2A6C659F3E
E6D6D5F242F5ED8508E6322D0FA46031B8D11FEDD10EBF2FFEC29CD83DE07CB0
246D8A31140D83CAE2BA50264B1E097ED39AA1BCFDD9D472B9D9B3D5003D79CD
A613B8B4263412C0CF0B614311B8DBD4E05A596025A24F1B49314A2C4966F09E
AE999C04947BDE778DF7ED7C91AA4100A493DE953FA6A61865E4B62BD96E0D70
28A6D64142BA9D8750E8D29D073047D9B164CBB808540C553DFF7573C394E0DB
F5DA4006A52BA36B49C3DEC9D655A44099AE4644AA5D4EE8613155DD915081F7
2AA87B3C47E8BCAF87A6FDB93CCFAD4C088DE3257BEDF187741B53412556E76F
11E21940DED1DD6815946798BA5647052B62D9CEB29539BDA71BBA7E79A8A115
20BE2B47FA5D3C7063D87ACED1B887E2258B8ABCC3CB2F8C747966340B384E7B
F1C144455CEB185B01E5069FBF102668540AC1702D32D3B6D916393586D92D58
99A27800AF960F5252385EA3E898611BA9C4C8A5E0A6AD4E40D7CFBBCB64471A
A58488620156738617681E0A664D22828B393BF2214C20FF453386DE9F4286F0
2E496E8B60B6F92A2267461489AD6E8101B91007E55926DF28A383810C458119
7B96A9598725D5C5DBBFC9E7E42A78929D140B2825F7B9C717AE7E568C9FE357
981616016A7C6A48F5A42A21CEFDEC66358B3938BE62E79A78D2928FEE6F38E8
80B09CBAB90443083A74742E895C8B2BB07DDA99390F4C8BD4700E7E15D5EB48
6CD83DB865729822CD1AE3467AD4DA735C0C9F84C5A663D82DAB9217A7A5CA5B
F35B947EDCF48F64ED4B0855B5CEB75A3D6D2918E9B1E175A2E33B4554E19407
D4A894C3D2F0707BDFF42E3AADBC5305954F50F6E593DA94E61DA1DC0802E501
BA7EFFEE4BC25E0F7897C624255E2F2BC444203462806FD5C9DD766FD65D3A9C
8291F409766177A264B76BBA87A310F2FF808EFD25F6CFF3FC9B17E791EC5A05
480BE714765EBFACC33843026DB304E8BF5E36A75B385043922C978D7D0D5598
CF88955D0CD47033F6D2513DE8B0CF6BFC015A54C5F26A3B404B9B9376E79A80
3426CA4CEB3706A4BC08DD6698AB78D7681FECCBB4BABA186DB63A023A3E5225
E0377ED38749AE1F7714AE5E1D63D35E28620E3DECCF250DF79F6B2FA2957D2D
EC8337E2FDD60102550D1B2CEF2E5AAE9CF712D17F11EEEA374A9ED4A0D82A44
9B4F140402726138B96E3A6EED71F529EED36C30AA15C66D500D2C931BE795AB
10A9E7D2374712D6F0623F1C3DF36D7246D7CDB034CE3690F30C56E1CD1E76C3
7C94C17A855EE2A6F9C25ECF0662B61741519728AF8E09B59DC9FCE175E01B99
D2DE306F831A69254A546B6DA8EECA492D56B2F9F55B3722825B20E2CECCDCBB
DDD028E973830BDDE3DE50E1E939E07CC42473F8BBFD5986525AF9535A2078DD
3E501C32715F3377789FDAFC843F9B3B635BC7871DBCF2B8B957817A86814E96
27551D1B7ED8A623F8247B668383830D422BB168CB640A502FF8EDBFA13AE756
BBA58983F99B33134CB607D56892AAA3559A3770CFA038C3DB87BE396947FBE8
692B77E9A6F66102846B267EB6DC26F3B9B5CE73634D5C3E9BB8B8E2D97DE428
B2A9596E4EC3D8B81DF4B92D895EE550CB1B15D3F0FD3019418F9C9FB5380FB5
7A0FEF4F937EE71800F8D32D5A7179D025981DB0F1AA37EB7E091123B2668CAF
6C983D4950AE2043610480AD2469815377244E4BB022F94DE028A8861FBCE564
DCF89B36A5F1C621F2F1E5C2E2442F285A81A0DE2767675387CA88D3E224CB58
65B030D96696E6B035E3D0FA6ED6AFAF2E7CD81AE8534A40ABE963649785F697
D2DF5F0241C05C449D8DE05FC99952D74D97F7BA2CBF800B76FB0D0F29D243A5
B3A12EC368594B7B90E07CC72DC667B7655B5AF313C6201F73201F827CF41845
BE0BF8AFAE8348F559D6AD28E781EF4635EFC15D5D7BA5444EB942582DB27E6C
1A558D4A75C1BCEC94950AB01477110CF83586C3FD9DDFB32F51C71DC62CA61A
D3B7DB9F1AED3418A067232B02010911793D79E392C638F0B9F05D4B823024F1
7D91EF11E31C11D0D22163A17D2A08B4E2F7F7B0C53F8780D8CC2671C9BAB644
59823CC44D9F516563D2B3F866FE05A18C4171688C6FCF3AA8F81CCF3A2E4C30
54A247179B4D95B7C12218FB71DEE78BFE6AFFB243B055D7F950026B7AFA8CD0
D07CA0E07C97CD7BBE8598D4326E088020A10F15D6E25CBF2E493940FA3E356F
2F4279001DF60C61E599A5E23CC2A3BB44438C741B79546B6FB5CAC2E79BB710
C91AFC97674F2843FB709E08E283462DDB18B45FF049C399BB8E5B26813C6054
B0EFD355444F1EFDFCD07EB69563510C525D05E195960D0EAEFB7710500125A4
A9508F6836E3CD323B86F7C01070725DF295DAAF21CDEA38A128392368D68C28
ED0D7E997A88143F50F7F325BA60F7827214D7EDF7FA68CA658169520C5CAE0A
A9F2F40E84316A4E93013C35939AD547F4CF4C9F6DE86A14D1EE7BD85FBECADF
BAF2B8F2B50AB3F297E415393E6B62F58F9DC86556254A8A71F70C88A4FB8011
5C1B8F4CAB74A5F64BBAA41365D863DCAC7221465309A287313C38F4DE5EEC0A
C9114B1F8E40B50437B9FF88C0578ED3630CE8C147EDA9A6C549D8F732F740D0
B05DBA37AE3772C82AC0ED80B2DC8B1A8A1A3FC45680DA85985EAD6DF247FE49
095516D68D2DBD0691DB867253150EA67288F7AF12B054547E1D3F3B75882226
74C1BA557F639F2EE9C0FA967E7DD755042E6EE60A5177B4BF4DCD77A878EB77
22F2CCC3A53F52378FE5CA9D10043E0DDF5406C0316645AA6D44416817B10C94
D1EBF9CA1FBE120BD59E708A364F2283D730CDC57983FAFC88F684E6A2C23714
3FF92C2643214BC98BB16FD06B69192A2146790B67AA56FADF3E651B22B79291
780BE365DCAE0F0CFD1C1902CA2E7BEE15FF2A93487C2944D35418E9E9DAC347
9D3309DE6913788CC747B7C328FDC32A3C909DD219D4A25FEB3E43332524740C
61BD06427B88C84105CCA89995F513EE814AF3CA01FCC0B35E02D7DC4613C87A
46BDA3F8D42C928DDDD0BF15A30C53EBDDF599447BEB3E1EA4CDF17252FE47A4
869C3F9ADFCF3F625B873265EA82815AAA3FCACB059750EBEA5B3B6A7B7D0ACE
D3FEBB7A94E27270B41AB70586880A7EEB24A6834CC1ED4FA2F94728E44D6271
121286EF517780172D12AE96F686678E215EC936C9825E30E3ED393589AE8806
A7FF94C50F5C0EFEA4C5E4D6B5EBE6F340B850FA620C9600A0DCBB846531D593
5D9D3D7D0AFEAC9181A6C434512F6A544CCFF36F8AE899722D7A223A52A656B1
A57D8BDB3D7B62537DA14915258F82D58C58FB14DA87DE71AD3AAEBF999E98D9
13AB360BFF4692D487B9909D602F361AE26078080DF8F67B12BEDCAF06E1EB27
57A5DF3D6292B2A347FA3516D012A2C150528E58AC00AA0CCD15B2E395482539
E49E919F3B1643BAE30173D395E1D941320BA2A64B42C1373ACFF3D491D1FCE8
7B674B174DC6CF1ED0FA43374E288DC93DA0F1C224E5EE4ADF486DA47F265FF8
FC9FF028AAB2FAD90B42B1E038974CA38F894F03A379682124CD29D1841AF9A1
516AA18F35C7CC9A7C8D719E8FCE2E4AF1F3B7457558247C321C91DA2EF7558D
272A4646327AFCA6D3D746552F57D49D8D3353FC7DF3726A2A533CECDE6F535D
05503A1A502672B17951401E5FC1E44E37956FB033A025B8951BF1781785213D
442C049956A04CB4C3DD6BB7B6DE03C91AF6BEB934EA33023152C25C27C3C771
B55265AB69C48B50DDF960297D39DF2B708BEF605075EE112BC69D1328CCB4CE
026622460A1EFD5A50F83C296A65B724A6DEBA8A977F82C5126308A96EE6FD44
755712368DF6990B0CB509543E06599192333E15418156EEEB50C342C853E493
6F420867903CBBD57FB065E3B9EE8129C778D8850D009A8B3868F4A84AA68FD6
EC42440353713F0CA22F253FE4E3D1E56E432F655A8C234A30166423A1EE6D87
377A7F70F555DF45E883869A4478FEC899576E98453B144FDC93E5DD2F33705F
A9D7CFB97ECCA5C00EEED34039982ED5E5664949215B7B7C699903F93C19ED0D
ACE55D5313AA0122DF712B93748B674E586501F37A25C9950C133D52C4621DE8
FD678BF518CB89C24A65BD957D557B464AEAB154DFC2C08F8C1098BF71196B77
5C4AB57499E51515D2BA0D44855014654D1A999CAD1A5E9DD35C0D7AB9E1FE02
9A8B85F8063CEC788CAAD96571272BEC34E803F42A5648E6561C12F0CDB0BA12
1D3B83F8FEED619B24C73E424480138614EBA261D18BB1A26E4C270D5E43D6E8
2DCD40E8CD287ABE7FF1C9476D3540344A5ADBEC083B92313C397F0A208E4D20
386FD56DF3227F514E6AA4D266FD5AFF8BE28083C04AC3D262EFF1902FE3F609
047DB5AB1D11EF4A587E569A48CB4193904A78345D549BEFC3F6666785B281C0
6087C7308074735831734944A48A0E6B71B28F0F55B5D198986A78438468979F
D251557224389B666D10556A89EE2E92D49570C4707537A34FF2F33B061DB954
129B92FCA4828FC83BAAC642E71B72794192D1193BD94E99C0CCF702D9EC1000
66E1490E464D54CE9CEB8E517F95A53659AA649A966ACF3A2EA59431A513697A
C661337A35059E033BF9F86DB88FC6C1DF437B51F09D2625AAAAF2A089D94C25
3CDCE592272FA50EF9356B15C104868DB82A285837E62986F81259FE8B61CE1A
2ED96EFAD0CCE878AF9550D6F769068B96F1F40734EFF7F7B0C53F8780D83CFB
474FC0F1CD987D52D82BA90D318A8A0384439B38D63B94757252062EA448D7B4
A7B079EA7540E25149AF43B94820170D8CC8BB8E6209EA40080AB0320F63E5B0
D79377484FFDD254E866E66C4ECF8E163ECC9A2615767B80BDF64054AE7F8F34
E0A1E8E7DEF54926761C005A324E4BD2E18CBCD20FA5D9FDA1FF1DAB44F01454
15AD25BA98A7450783352A92D61B91A1BD3A72E0226869496C7C10E6B9410FE7
B69EDCFCBCA55ECA90D105D3EE27FC276277140155EAAE420BE83958DE1B2DC1
7787C412E7273DD1AA5991C4F705D969EFC2DA84EA7AD0BFD73E6FD773875E03
774474BD86F32D752A1DE9564A9D3E07106E7C3EBF116741C894BF3A5BD1D130
3B2561A4D010A395A1BFC7A2423D1E19F328A5F716E06643DACC84C67787EE00
016C4F79E7349F344A891ABD0B70034F5426628EB565EFB277F5F44C4AEA20A6
1D632E0504DE5CD76002E64188AD1D58756ACB344238EDD985C41FA9CB3C0EF5
88E025CC4F2131D84B5D736ACF96F667862BC1BAF0E033DFD5EA403567EF0BAA
FA416C0AD7D6AB86E6337264858166D9ECAB860C7241C3425690CE87022DED7F
3A5A05E9F97A5B2862CCFE1FD43197B1C7953BD8F4DA1AEDEC773BE3EAC6B8E4
AD2D5278A472D241413AAB892ED473527D9D052015D3A8B5EA02CD10C45038FC
6C4E8FA08109D99CBE2C4E2EF1070EC9528F0BC7ED87DA4B04088C5EF94D8FC0
DD45A62C8B6CD6D07686293565232BE739AF0990531D25AD1A01EC4C31819D2D
C7B35CF2D9F0F492A706DF0C1AEA9C0ECC5E1787985544273ECCB27B5D1115AA
BD45B58D5B9BAC0B2865D54AA511982CB8071B2582839702F522B3B549BB1280
53BCA7B1897126623143D721CF836695157D093A6A68FDD3983AA5055E7E139B
DF6ABC4D40E875A48483E04D117BE1577B35111AC7B52C4C2235A26D24DBC6C9
DE039497621E584D1E9DABAF71A35D35F5CEA5F3712EB3029E680F91DC145A4F
7FAAA554106ED1CEA6D46502CCC5BE14C1643C89F9703357AC4BE04A90139258
A9ADE8D72A64F336F904F18B00488D7316A1AB14C97FE4C654C9E122065BA462
97F7D142D0E8D87C355B3F6263142B2DCC67B7938F65CF6B1DB6AE3FBB5A28A9
8104021E7720C1A97D522C07B0F972DB969DB7745DC63B2E26E96B6F0556D499
23D63173C465D725223C0A071B4BCA8BC0A91867D9BBE00B986837CF9A24DD32
56F5A7DB9D25F0BA34EA859BF991D0354BCAB97DA3ABA0662F39ECCC768AB03B
0EEB8067F8B3A8D2C6AC6938C55A0E084C987097F447A890A1E3B26FB108C875
0E7A5A37791246235FDB4718F2585346E7B5B5E81B125D6F0DF7C48079602320
830A38C7B58AF68CFECB09313F5745B02B4BB609644CAD2281EB809E21824659
6A46D6570A9BD7D3644E06C2A6017B843A6972A781290DE00D4D65E01171EB71
B8C53EF3FA72FE2606F70CAA658FCBD51F00F3C8CAF224558BD0C3A9FBB951AB
DB4CE6BE4B5F97D025073CD30F0346E71EF264A636A9B0CDA1509D95CA8A85A9
EAA164A4716C5525184E744ADF4A633D9A257753C55B22E5A7D1DABF78E3298D
DE862922A8F80A0DD8B36675E83371DDD0804799C79707114DD547128F3C4A4A
2428B51852D4DA802A0A687307318ECE80777A5FA529030B795AA0CE8D74EBC4
1E56823C9811B3B5ED20AD2FE457E763F1E38A6EDCAEA970CBF14ADC348B1150
E34E14099F26B4DAF2B052CFA2E9E76779AD43AB1D0C6B1287D624F7D78C26C1
D5E2184A01FF16147A859B82A428839AE349A5475C5C9E09C05CACEE0A97B514
78A990843F11F9E2C94E6710CBB74084FD93446770C3DD7431F955A5F3734F69
31BD7F26646E6AEC36C38FFEE58A7CF412C97859BA2D699B620DDA83E93E35F1
88E2255D4CA238D50701150F646B6445A45AC66080F745228EAC9B0EC2C3F650
1F4BA0C82C6EE94A5B08A98A05DA37D8F2B76F82DF1D2DCDA032E13A1D35D959
901D8B991528CC1E6CFF3FF76F7892B46DDD6AB1B284E4C1767A5109DB1E7403
9A5B0B9E2065F80968CC9D816852D5C351BF1456B1AF4BA063CE6B333D2BBB1E
A12E6AB5B07064C07CCEFEB72C1D949C9FC46168DAB43CC1AE8809A03EA3DC9A
22CCE26B31363BDD6F61AF1AB66FDF43144DC4CD991A73F7F8F8338E18180C53
8F1E71F5A2332D9A7C14479025FBC64489304F69499E072ED2B94AC84E717DC7
612D6EC842A956F9884A44531CCD50EFE1EDDF114903155F14A3D27477386B66
1D18F0D7A718CF5B89CE505A8BF1BD7240594784DBA4A2D108E7EFE008301D60
083FB7E8BDA75A112D1D27E921CC77B21ABBE5E79C53C00D98CC24C50DA84B0C
80BAD6D53991CE58DCDE5998E5D85161661C364F0DB54129524B2671A15130E0
812C23E0851E4D2218F93467C904606E228C2AEF18EAB42529A1299D47EFD1F7
74F2F20C38D2F9DE78FD9CAB46BEE6168EAEBB1BB890679354EC01926516E9BA
EBBFD8C072F63C98E9D2351BD577F4209ADFF7E37E555165091C5D410714867F
5A1977250373D8383DF962D53124A64863219E30F2710493C70437991C00DDD3
556BC6C7FF68FBD04184EFFF2C1E2C07E5378B12A51BE454D3ED2895461E974D
B8EF8227B134CC4BA38D91EE90DC649175D798EEEBB8A4F8253E33D6D0154FFE
3B3A960D601F257E38BE25FF6426C00EB338BD6B26376AD18BA678DE6618940B
338101A8F3BF931890E128860D8FEFD35635DE4366A8B9954C7D4FC1EC0F6704
2D5321187A43CC764E4BCDD34915E54428D6D723C01F3AF384848F59D226910B
25F502121CEE7934C215451BC96D96D1E2370AC943C09351132107EDCCE05DEC
0404A0C1FB48077B4425BF9C5E276ECC5C85612373E9DD9BE10C95F50E028009
F5606EBFB559F979CFD4E00573CE94A026837EA61267F882D17A8E91F45139FE
4A2FAC68FA784F8C106BF35F9060144E243C3FD9989365DEBCB719919C768CE6
69D294C1ABBA4823ACC488DAB64464824AD2519C95FC83FC7CDF59B889299A4B
891E832D1E9C0D0B6C7D636C9184CB26EB0CEB139CE657F2A7EF1C4307D6CE40
60684BF01E1BA0ACFCF6238B313118F6E8D81F04A2ADF9F12163527AEFEC6C77
8353C94B542FF7B053877D51A0A5B7E607D59165683117537F7F723DB71C3A2A
FF188BF15EDC43FD02BDE144EE6FF9F782FC5DDE5242606B56450E510B9D5971
7DEC0ED49AA31FA3F9A576CAA0A8D3AB09D0C72743DEB7653AD2F3E72968485C
45E9941A3E9E4CA76CB99FDEF364C224B3C8DEF5E47FFDF44391E50AE131E280
B2878D4FFB33044027D126C52915EB791F4AF7776DF725F58F4F2D4D9E0E0CBF
217078B7985538D7072BEE98BD57B3D551C920FA1E06AA841F3C3D7ECC11452C
880189E0E3021449870057D4646ADE44F65E8C42721619FC3E704F560C2FE7D7
57CF6532217D74E4B17F3F49AE9DB419FB1C4450FE38500FD350CB75D17B6C14
D5B2A021DD69EAC4025DF8A036F51923487CBC90355A2B2FF1A2AA3108FE8D7F
4893940091E41B3173ECEDEA7022A886493CD3CD0BF6948D7045070ED380B91D
78C15C0508BEBA2600342B5749D58A6BC45CEB1A0BC35076AE116F49EC3EB047
9907A641598C7EA475C17E50713C6608D950E9BACAEFEC61BC5E74F4087B4B14
2F5C8BBB57B8A4C8B8C8605E25049928B01E78C6FCFE751E322B79493D4703DE
47A342D18A73557490EDC4BF74BE4912F4B5E0565B02D1DD564145D4D2776644
651256AE41C982F53B3813CE5C7A46971F5F83021D3FA5FE17289B0B15C33C11
6C67DAC49FF062B59F577CD9ACFD47594A04FED10CDABD84A5074B58320280FE
E504B4EA6AE4EFA02198BAA58790FAF2863BFD0677AFC7DED62D2CBDC61A3889
CBC27AF0A01822D74828FF3259C745D3E2F4C21F0C19791C85A0DDD17E25F4AE
92815B308519A907707CB6712EBC99D34FCB2E658664EBF78336384C9C95023C
CC34F260504F92906C4018EA0311218D1226787A1A2C8E609F8B77DA79ED6249
108BB9C2340EA4AD9FA95A208DD163A3CA1D6A30A6EE53E69EA157846BCA2BE3
0E062C63A0BC4A44CC2666FC75D433A54CB39EEB6372C811C6239C1BA6FD6417
ACB8B79331EFF99A37E3EECF86E3C5336B64709708D2D3726A377CAF1B5366C3
A3EA53B7DE728CE138B2C4D459794D1A6B3364A564608784925D6CE1E1B6CE28
0A58DF6B2D1B1183EFD4D3AA4EFB177B26A0EEFAA3B4E315BC327194BF604ABB
BEBD214B7C9AD10A85267F2FD47893063A553D10D66FF69418CBD1BA0B0C2EF1
86CEBAD20909D024626425BB805D660D6F7794F311213484F36B0027977D6B37
1303357E7DC33A7590190B1E2C1FD69EDC844DE8AAD6F4E0797A990119087DE4
0666BF909AE8CFF9BFB7690CD75BB0F4CABF050D2F3A3DB09C27B9C790D97CCB
D5C882F0DA86CF80B4293724C5453F9B9B48464A7FBF9ED85B39BF37E23AC891
43DDC67623A0E7BB2FB499F49A065852150F56C98F831EF726DEDABA47F65D98
EE68FF27CE2A86F9D0692571FEDAC01BA256DE73FC5F5A4A9DF436740EF3547A
A0795C3346299C804A48F652708953E8C85A6559C86C55084EE590D2BDFDDD68
87AF9FB1C7885D9A751522379DA89FF937D5C7E3F568308AF7F676B49F00FFC0
1CBAA10C00322A59F398E0471C432023D2E8218B8F5D7F47CE5236EB13B7F152
D747932D6E3E02EC8B3CF5CCA112B64A550C79B1EAA87ACD2D0CBD42EB7B100B
28A2CE1217EA002EE756398DBF3504250CAC4B895AFAA85315E85984AAC3458B
D47674FBF991C1140124EE650804E02FBEF4EFAB7D72B222DF771949B0CE59DD
0D548B62E2FE20409E063302A3B2C5524CA1BF6984B6F4CC5D713C67E9DC741F
9652F9F000CFD14930428BF3945B498491C453F2A12D3457A29DD8FA0E198FA2
7CEC78204104DAB2C93BC52BD7178FE9216D8BAF17AF1DBC3D349AEF61C49DE7
4EFDCC469E3E548B1596CBB4E475C622091D9E5F7C396657FFF5FA76B8935DE9
D718248AA3FA53B8EC3AAD6E7CC25C5D2672F1382E43A3685ECC60867F517516
FF4F4E627E4631C2E138BB9EC57FAC8443C66645D950EB67D443394E43347C58
A5B6B645604AA5E167EC1BB6B7E7538E7AE024E79C6163F819CA663964C96FE5
65149D4C72A8F1EA391D8FBE506A933A64ECA69AC80BC1D8C9ACC5753F961D2A
BDD718E48959C0ABC289CD4EF402D6B1EB558E7F7578D504EED0B5B38AE805E0
5BF54C94A9E6CCA096E44C3D74D7141FCB76D7FFB66099F7F6302D99A4964126
0B8622C6364ECC38C77DD8204A970B1429AB3DBF60D4124D0E3FDBFEB0EFEB28
AEFE673FC1EA76E526FE8ACAE88A692517D2AFEABC2F841E9D923C93BA017570
BE18304878F6EAF2AA24715FF277218847C6D4B19A28E07008D608FAB62299BB
D017769731545B30E423B5123A196189C885E100710218EEB18DFE5488A2F64B
9535F49FE2B879C1591454693EDFE7047873E95C639A0E2D009B09EF35B53EAB
E8ED0232DF618C0D7D787AB0B03C288A9FF7210BBACDFBFE59381C7F7AD5D875
2892026FAFB1FDC18F2CB56FC6DFD2C30C3C058585BE88989585E097B29AB497
293B76B75DADF81856880F60B839E3D88BB5B7B13BD1960A67C91CFECC809F7F
7A0E6B876F80CCD5204A18EDAFC9ADFD985416D8EF74EB12B2ED04FD5C98BBE1
6C268657468CD2BBA83DA75190FDE1A6B30BC76F0B23011958E842DE73D5DEA5
03D6A74092A710A9A88B621EC9F8437E13DDF25447196148EDE39BE0CC892ABA
A08F3A3AB756C503EF2FAB187A376408124F4126F196C5E9DC71B23B0A9CF1F1
FB3B71992FF6ADB31A1CD568EE1F7F0AB9EE273029BC5A33D9A04A2040B1878A
C2AC15BEAC5E74C15DC6A0BAE8639F9F4E94FBD66E7CBD6534CACA3A31760D1A
4E900FD697FD98D2AF1A110EA9A7A748466FF70624127FC42C842C7891DED549
E67C5B4DE3C78EE2343C9AEBD67553C326E44B6B17297DEC603DE4BA8BEB4F0B
56A2FD0F751EE31F01FDCEF53A9575317882E7E3E2D2B1032F23771B743B5E0C
B35CBFF138848A5F1EAD10808DD4C0EAD1F2CE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrschein)
@start /Fa 235[1033 20[{ enclmmathsy ReEncodeFont }1
1328.35 /LMMathSymbols10-Regular rf /Fb 201[650 2[650
1[650 49[{ enclmrm ReEncodeFont }3 1328.35 /LMRoman12-Regular
rf /Fc 139[470 55[1012 60[{ enclmmathit ReEncodeFont }2
1328.35 /LMMathItalic12-Regular rf /Fd 255[732{
 enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fe 197[261 58[{ enclmmathit ReEncodeFont }1 885.568
/LMMathItalic8-Regular rf /Ff 203[993 52[{}1 1328.35
/wasy10 rf /Fg 35[830 101[584 615 430 1[434 3[615 1[307
584 1[307 1[553 1[492 615 1[615 553 9[1138 3[615 17[830
14[553 553 2[307 4[430 430 40[{ enclmec ReEncodeFont }22
1106.96 /LMRoman10-Regular rf /Fh 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fi 35[705 97[418 4[523 366 371 367 2[470 523 784
261 2[261 1[470 1[418 523 1[523 470 11[705 680 13[614
11[261 470 470 470 470 470 470 470 470 470 470 3[261
2[366 366 40[{ enclmec ReEncodeFont }33 885.568 /LMRoman8-Regular
rf /Fj 198[470 470 470 470 470 470 470 470 470 470 48[{
 enclmrm ReEncodeFont }10 885.568 /LMRoman8-Regular rf
/Fk 650 2[723 5[650 17[650 7[975 97[578 686 686 939 686
723 506 513 506 1[723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 2[1336 975 975 939
723 957 1[885 1012 2[813 1011 1[469 975 1021 849 885
993 939 921 975 1[614 2[1012 1[361 650 650 650 650 650
650 650 650 650 650 650 361 434 361 2[506 506 2[1084
8[723 759 8[613 1[613 16[{ enclmec ReEncodeFont }74 1328.35
/LMRoman12-Regular rf /Fl 27[1046 105[956 1[1136 1[1136
1196 837 849 879 1[1196 1076 1196 1793 598 2[598 1196
1076 1[982 1196 956 1196 1046 6[1315 2[2223 2[1497 1196
3[1616 1[2041 1293 1685 1[801 1682 1[1353 1412 1[1554
1530 1625 10[1076 1076 1076 1076 1076 1076 1076 1076
598 717 45[{ enclmec ReEncodeFont }46 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(WS)717
b(1.2)g(-)g(1)h(Bo)-60 b(xplots)716 b(zuordnen)f(-)j(ZO)f(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fk(1.)p 0 TeXcolorgray 651
w(Eine)618 b(T)-108 b(ankstellenk)-36 b(ette)619 b(hat)e(in)h(den)g
(Shops)f(v)-36 b(on)618 b(Filialen)h(die)f(Umsatzzahlen)g(eines)874
6792 y(Tiefk\374hlpro)36 b(dukts)514 b(jew)-36 b(eils)514
b(\374b)36 b(er)512 b(einen)g(Zeitraum)h(v)-36 b(on)513
b(15)g(W)-108 b(o)36 b(c)-36 b(hen)513 b(b)36 b(eobac)-36
b(h)g(tet)511 b(und)921 8784 y(der)433 b(Gr\366\377e)h(nac)-36
b(h)433 b(festgehalten.)921 13322 y(Ordne)f(den)h(angegeb)36
b(enen)434 b(Bo)-36 b(xplots)434 b(die)g(en)-36 b(tsprec)g(henden)430
b(Filial-Umsatzzahlen)435 b(zu.)p 0 TeXcolorgray 0 TeXcolorgray
2683 16763 15666 45 v 18348 16763 4523 45 v 2683 21287
45 4525 v 3391 20342 a
 currentpoint currentpoint translate 0.29709 0.29709 scale neg exch
neg exch translate
 3391 20342 a 3825 20342 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 429.34616 a add def
/d 0.0 a add neg def /h 80.12448 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825
20342 a -29136 18058 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 727.10878
 0 297.76262  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 297.76262  727.10878  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -20.64056  def /maxTickline
59.48392  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 59.48392
 0 -20.64056  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -20.64056  59.48392  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 297.76262  def /maxTickline
727.10878  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -30381 15193 a Fj(1)-30382 12044
y(2)-26222 19403 y(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444
b(10)2210 b(11)g(12)f(13)h(14)f(15)h(16)g(17)f(18)h(19)f(20)h(21)g(22)f
(23)h(24)f(25)-76295 b(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444
b(10)-29136 18058 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 455.2439 14.22636
654.4131 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 42.67911 341.43292
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 682.86584 42.67911 682.86584
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 512.14938 42.67911 512.14938
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 455.2439 28.45274 341.43292
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 682.86584 28.45274 654.4131
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 51352 20342 a
currentpoint initclip moveto
 51352 20342 a
3391 20342 a
 currentpoint currentpoint translate 1 0.29709 div 1 0.29709 div scale
neg exch neg exch translate
 3391 20342 a 18304 21287 45 4525 v 0.9 TeXcolorgray
18348 21287 4478 4525 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
20117 19482 a Fk(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 22826 21287 45 4525 v 2683 21332 15666
45 v 18348 21332 4523 45 v 2683 25856 45 4525 v 3391
24912 a
 currentpoint currentpoint translate 0.29709 0.29709 scale neg exch
neg exch translate
 3391 24912 a 3825 24912 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 429.34616 a add def
/d 0.0 a add neg def /h 80.12448 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 24912 a -29136
22627 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 727.10878
 0 297.76262  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 297.76262  727.10878  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -20.64056  def /maxTickline
59.48392  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 59.48392
 0 -20.64056  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -20.64056  59.48392  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 297.76262  def /maxTickline
727.10878  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-30381 19762 a Fj(1)-30382 16613 y(2)-26222 23972 y(1)2680
b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)2210 b(11)g(12)f(13)h(14)f
(15)h(16)g(17)f(18)h(19)f(20)h(21)g(22)f(23)h(24)f(25)-76295
b(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)-29136
22627 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 341.43292 14.22636
682.86584 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 483.69664 42.67911 483.69664
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 51352 24912 a
currentpoint initclip moveto
 51352 24912 a
3391 24912 a
 currentpoint currentpoint translate 1 0.29709 div 1 0.29709 div scale
neg exch neg exch translate
 3391 24912 a 18304 25856 45 4525 v 0.9 TeXcolorgray
18348 25856 4478 4525 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
20075 24052 a Fk(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 22826 25856 45 4525 v 2683 25901 15666
45 v 18348 25901 4523 45 v 2683 30425 45 4525 v 3391
29481 a
 currentpoint currentpoint translate 0.29709 0.29709 scale neg exch
neg exch translate
 3391 29481 a 3825 29481 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 429.34616 a add def
/d 0.0 a add neg def /h 80.12448 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 29481 a -29136
27196 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 727.10878
 0 297.76262  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 297.76262  727.10878  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -20.64056  def /maxTickline
59.48392  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 59.48392
 0 -20.64056  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -20.64056  59.48392  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 297.76262  def /maxTickline
727.10878  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-30381 24331 a Fj(1)-30382 21182 y(2)-26222 28541 y(1)2680
b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)2210 b(11)g(12)f(13)h(14)f
(15)h(16)g(17)f(18)h(19)f(20)h(21)g(22)f(23)h(24)f(25)-76295
b(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)-29136
27196 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 512.14938 14.22636
682.86584 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 42.67911 341.43292
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 512.14938 28.45274 341.43292
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
51352 29481 a
currentpoint initclip moveto
 51352 29481 a 3391 29481 a
 currentpoint currentpoint translate 1 0.29709 div 1 0.29709 div scale
neg exch neg exch translate
 3391 29481 a
18304 30425 45 4525 v 0.9 TeXcolorgray 18348 30425 4478
4525 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20090 28621 a
Fk(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
22826 30425 45 4525 v 2683 30470 15666 45 v 18348 30470
4523 45 v 2683 34994 45 4525 v 3391 34050 a
 currentpoint currentpoint translate 0.29709 0.29709 scale neg exch
neg exch translate
 3391 34050
a 3825 34050 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 429.34616 a add def
/d 0.0 a add neg def /h 80.12448 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 34050 a -29136 31765 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 727.10878
 0 297.76262  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 297.76262  727.10878  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -20.64056  def /maxTickline
59.48392  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 59.48392
 0 -20.64056  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -20.64056  59.48392  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 297.76262  def /maxTickline
727.10878  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 59.48392 0.0 -20.64056   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 727.10878 0.0 297.76262 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -30381 28901 a
Fj(1)-30382 25751 y(2)-26222 33110 y(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f
(8)h(9)2444 b(10)2210 b(11)g(12)f(13)h(14)f(15)h(16)g(17)f(18)h(19)f
(20)h(21)g(22)f(23)h(24)f(25)-76295 b(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f
(8)h(9)2444 b(10)-29136 31765 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 455.2439 14.22636
569.05487 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 42.67911 341.43292
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 682.86584 42.67911 682.86584
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 455.2439 28.45274 341.43292
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 682.86584 28.45274 569.05487
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 51352 34050 a
currentpoint initclip moveto

51352 34050 a 3391 34050 a
 currentpoint currentpoint translate 1 0.29709 div 1 0.29709 div scale
neg exch neg exch translate
 3391 34050 a 18304 34994 45
4525 v 0.9 TeXcolorgray 18348 34994 4478 4525 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 20163 33190 a Fk(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 22826 34994 45 4525
v 2683 35039 15666 45 v 18348 35039 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 24451 16763 4567 45 v 29018 16763 15621
45 v 24451 22045 45 5283 v 0.92 TeXcolorgray 24495 22045
4478 5283 v 0 TeXcolorgray 26223 19861 a(A)p 28973 22045
45 5283 v 29682 18317 a Fi(Umsatz)314 b(Filiale)i(1:)29682
19623 y(12,)248 b(12,)h(12,)g(12,)f(13,)h(15,)f(17,)h(17,)f(17,)h(20,)
29682 20928 y(20,)315 b(24,)g(24,)g(24,)g(24)p 44594
22045 V 24451 22089 4567 45 v 29018 22089 15621 45 v
24451 27371 45 5283 v 0.92 TeXcolorgray 24495 27371 4478
5283 v 0 TeXcolorgray 26274 25187 a Fk(B)p 28973 27371
45 5283 v 29682 23644 a Fi(Umsatz)f(Filiale)i(2:)29682
24949 y(12,)248 b(13,)h(13,)g(15,)f(15,)h(18,)f(18,)h(20,)f(20,)h(20,)
29682 26254 y(22,)315 b(22,)g(24,)g(24,)g(26)p 44594
27371 V 24451 27415 4567 45 v 29018 27415 15621 45 v
24451 32697 45 5283 v 0.92 TeXcolorgray 24495 32697 4478
5283 v 0 TeXcolorgray 26265 30513 a Fk(C)p 28973 32697
45 5283 v 29682 28970 a Fi(Umsatz)f(Filiale)i(1:)29682
30275 y(12,)248 b(14,)h(14,)g(16,)f(16,)h(17,)f(18,)h(18,)f(18,)h(22,)
29682 31580 y(22,)315 b(23,)g(23,)g(23,)g(24)p 44594
32697 V 24451 32742 4567 45 v 29018 32742 15621 45 v
24451 38024 45 5283 v 0.92 TeXcolorgray 24495 38024 4478
5283 v 0 TeXcolorgray 26238 35840 a Fk(D)p 28973 38024
45 5283 v 29682 34297 a Fi(Umsatz)f(Filiale)i(1:)29682
35602 y(12,)248 b(16,)h(18,)g(18,)f(18,)h(18,)f(19,)h(24,)f(24,)h(24,)
29682 36907 y(24,)315 b(24,)g(24,)g(24,)g(24)p 44594
38024 V 24451 38068 4567 45 v 29018 38068 15621 45 v
24451 43350 45 5283 v 0.92 TeXcolorgray 24495 43350 4478
5283 v 0 TeXcolorgray 26292 41166 a Fk(E)p 28973 43350
45 5283 v 29682 39623 a Fi(Umsatz)f(Filiale)i(1:)29682
40928 y(12,)248 b(12,)h(12,)g(12,)f(18,)h(18,)f(18,)h(18,)f(18,)h(23,)
29682 42233 y(23,)315 b(23,)g(23,)g(23,)g(24)p 44594
43350 V 24451 43394 4567 45 v 29018 43394 15621 45 v
24451 48676 45 5283 v 0.92 TeXcolorgray 24495 48676 4478
5283 v 0 TeXcolorgray 26310 46493 a Fk(F)p 28973 48676
45 5283 v 29682 44949 a Fi(Umsatz)f(Filiale)i(1:)29682
46254 y(12,)248 b(14,)h(14,)g(16,)f(16,)h(18,)f(18,)h(20,)f(20,)h(20,)
29682 47559 y(20,)315 b(20,)g(24,)g(24,)g(24)p 44594
48676 V 24451 48721 4567 45 v 29018 48721 15621 45 v
47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 47905 6792
a Fg(WS)369 b(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 55088 54804 45 v 0 TeXcolorgray
24746 81281 a Fk(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(WS)717 b(1.2)g(-)g(2)h(T)-179
b(estergebnis)714 b(-)k(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fk(2.)p 0 TeXcolorgray 651 w(Ein)415 b(T)-108
b(est)416 b(en)-36 b(th\344lt)415 b(f\374nf)g(A)-36 b(ufgab)36
b(en,)416 b(die)f(jew)-36 b(eils)417 b(n)-36 b(ur)415
b(mit)921 6792 y(einem)292 b(Punkt)f(\(alles)h(ric)-36
b(h)g(tig\))292 b(o)36 b(der)291 b(k)-36 b(einem)292
b(Punkt)g(\(alles)921 8784 y(nic)-36 b(h)g(t)499 b(ric)-36
b(h)g(tig\))500 b(b)36 b(ew)-36 b(ertet)500 b(w)-36 b(erden.)500
b(Die)g(neb)36 b(enstehende)921 10776 y(Gra\034k)528
b(zeigt)h(das)f(Ergebnis)g(dieses)h(T)-108 b(ests)528
b(f\374r)g(eine)g(b)36 b(e-)921 12768 y(stimm)-36 b(te)433
b(Klasse.)855 16752 y(W)-108 b(elc)-36 b(hes)990 b(der)g(folgenden)h
(Kastensc)-36 b(haubilder)991 b(\(Bo)-36 b(x-)921 18744
y(plots\))433 b(stellt)h(die)g(Ergebnisse)f(des)h(T)-108
b(ests)433 b(ric)-36 b(h)g(tig)434 b(da?)921 22728 y(Kreuze)f(das)h
(zutre\033ende)e(Kastensc)-36 b(haubild)433 b(an.)p 0
TeXcolorgray 0 TeXcolorgray 31014 24382 a
 currentpoint currentpoint translate 0.53024 0.53024 scale neg exch
neg exch translate
 31014 24382
a 31881 24382 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.01466 a add def
/d 0.0 a add neg def /h 331.73 a add def a neg d moveto a neg h L w
h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31881 24382 a 36988 20422 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 170.72557 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 295.95134 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 170.72557
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  170.72557  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 295.95134  def
/dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 295.95134 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.72557 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 295.95134
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  295.95134  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 170.72557  def
/dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 295.95134 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.72557 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
35743 20707 a Fj(0)35743 17557 y(1)35743 14408 y(2)35743
11258 y(3)35743 8109 y(4)35743 4959 y(5)35743 1809 y(6)35743
-1340 y(7)35743 -4490 y(8)35743 -7639 y(9)35273 -10789
y(10)36988 20422 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 56.90549 0.0 56.90549
85.35823 28.45274 85.35823 28.45274 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 85.35823 0.0 85.35823
113.81097 56.90549 113.81097 56.90549 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 113.81097 0.0 113.81097
85.35823 85.35823 85.35823 85.35823 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 142.26372 0.0 142.26372
170.71646 113.81097 170.71646 113.81097 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 170.71646 0.0 170.71646
142.26372 142.26372 142.26372 142.26372 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 85.35823 28.45274 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 85.35823 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 56.90549 85.35823   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 0.0 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 85.35823 28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 85.35823 28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 0.0 56.90549 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 56.90549 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 113.81097 56.90549
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 113.81097 56.90549
113.81097   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 85.35823 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 0.0 85.35823 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 85.35823 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 85.35823 85.35823
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 0.0 113.81097 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 113.81097 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 170.71646 113.81097
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 170.71646 113.81097
170.71646   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 0.0 142.26372 170.71646
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 0.0 142.26372 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 142.26372 142.26372
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 142.26372 142.26372
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 167.871 0.0 167.871 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 0.0 170.71646 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36988 20422 a
tx@Dict begin  { 54.43819 -22.90945 } PutCoor PutBegin  end

36988 20422 a 915 x Fk(erzielte)h(Punkte)36988 20422
y
tx@Dict begin  PutEnd  end
 36988 20422 a 36988 20422 a
tx@Dict begin  { -25.18182 219.47417 } PutCoor PutBegin  end
 36988 20422 a 37903 34439
a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 37903 34439 a Fk(Anzahl)g(der)f(Sc)-36 b(h)g(\374lerInnen)51921
34439 y
 currentpoint grestore moveto
 51921 34439 a 36988 20422 a
tx@Dict begin  PutEnd  end
 36988 20422 a 36988
20422 a
tx@Dict begin  { 14.22636 -5.69046 } PutCoor PutBegin  end
 36988 20422 a 836 x Fk(0)36988 20422 y
tx@Dict begin  PutEnd  end
 36988
20422 a 36988 20422 a
tx@Dict begin  { 42.67911 -5.69046 } PutCoor PutBegin  end
 36988 20422 a 836 x Fk(1)36988
20422 y
tx@Dict begin  PutEnd  end
 36988 20422 a 36988 20422 a
tx@Dict begin  { 71.13185 -5.69046 } PutCoor PutBegin  end
 36988 20422 a 836
x Fk(2)36988 20422 y
tx@Dict begin  PutEnd  end
 36988 20422 a 36988 20422 a
tx@Dict begin  { 99.5846 -5.69046 } PutCoor PutBegin  end
 36988
20422 a 836 x Fk(3)36988 20422 y
tx@Dict begin  PutEnd  end
 36988 20422 a 36988
20422 a
tx@Dict begin  { 128.03734 -5.69046 } PutCoor PutBegin  end
 36988 20422 a 836 x Fk(4)36988 20422 y
tx@Dict begin  PutEnd  end
 36988
20422 a 36988 20422 a
tx@Dict begin  { 156.49008 -5.69046 } PutCoor PutBegin  end
 36988 20422 a 836 x Fk(5)36988
20422 y
tx@Dict begin  PutEnd  end
 36988 20422 a 55572 24382 a
currentpoint initclip moveto
 55572 24382 a 31014
24382 a
 currentpoint currentpoint translate 1 0.53024 div 1 0.53024 div scale
neg exch neg exch translate
 31014 24382 a 11181 27083 24022 45 v 11181 34522
45 7439 v 11890 33577 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 33577 a 12323 33577 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323
33577 a 12746 31867 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511 33213 a
Fj(0)2679 b(1)h(2)f(3)h(4)g(5)12746 31867 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 56.90549 5.69046
128.03734 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 17.07181 28.45274
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 17.07181 142.26372
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 71.13185 17.07181 71.13185
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 11.38092 28.45274
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 11.38092 128.03734
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 33577 a
currentpoint initclip moveto

31416 33577 a 11890 33577 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 33577 a 32793 34522
45 7439 v 35158 34522 V 11181 34566 24022 45 v 11181
42005 45 7439 v 11890 41060 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 41060 a 12323 41060
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323 41060 a 12746 39351 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511
40696 a Fj(0)f(1)h(2)f(3)h(4)g(5)12746 39351 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 56.90549 5.69046
128.03734 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 17.07181 28.45274
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 17.07181 142.26372
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 17.07181 85.35823
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 11.38092 28.45274
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 11.38092 128.03734
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 41060 a
currentpoint initclip moveto

31416 41060 a 11890 41060 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 41060 a 32793 42005
45 7439 v 35158 42005 V 11181 42049 24022 45 v 11181
49488 45 7439 v 11890 48543 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 48543 a 12323 48543
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323 48543 a 12746 46834 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511
48179 a Fj(0)f(1)h(2)f(3)h(4)g(5)12746 46834 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 56.90549 5.69046
128.03734 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 17.07181 28.45274
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 17.07181 142.26372
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 17.07181 113.81097
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 56.90549 11.38092 28.45274
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 11.38092 128.03734
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 48543 a
currentpoint initclip moveto

31416 48543 a 11890 48543 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 48543 a 32793 49488
45 7439 v 1 0 0 TeXcolorrgb 33502 46101 a Ff(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 35158 49488
V 11181 49532 24022 45 v 11181 56971 45 7439 v 11890
56027 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 56027 a 12323 56027 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323 56027 a 12746
54317 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511 55663 a Fj(0)f(1)h(2)f(3)h(4)g(5)12746
54317 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 28.45274 5.69046
142.26372 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35823 17.07181 85.35823
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 56027 a
currentpoint initclip moveto
 31416 56027 a
11890 56027 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 56027 a 32793 56971 45 7439 v 35158
56971 V 11181 57016 24022 45 v 11181 64455 45 7439 v
11890 63510 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 63510 a 12323 63510 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323 63510
a 12746 61800 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511 63146 a
Fj(0)f(1)h(2)f(3)h(4)g(5)12746 61800 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 99.5846 5.69046
128.03734 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 17.07181 28.45274
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 17.07181 142.26372
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 17.07181 113.81097
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 99.5846 11.38092 28.45274 11.38092
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 142.26372 11.38092 128.03734
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 63510 a
currentpoint initclip moveto

31416 63510 a 11890 63510 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 63510 a 32793 64455
45 7439 v 35158 64455 V 11181 64499 24022 45 v 11181
71938 45 7439 v 11890 70993 a
 currentpoint currentpoint translate 1.03651 1.03651 scale neg exch
neg exch translate
 11890 70993 a 12323 70993
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.48085 a add def
/d 0.0 a add neg def /h 48.36436 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12323 70993 a 12746 69284 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 142.26372
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  142.26372  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 32.9215  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 12511
70629 a Fj(0)f(1)h(2)f(3)h(4)g(5)12746 69284 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 99.5846 5.69046
142.26372 17.07181 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 17.07181 28.45274
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 17.07181 113.81097
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 99.5846 11.38092 28.45274 11.38092
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 31416 70993 a
currentpoint initclip moveto
 31416 70993 a
11890 70993 a
 currentpoint currentpoint translate 1 1.03651 div 1 1.03651 div scale
neg exch neg exch translate
 11890 70993 a 32793 71938 45 7439 v 35158
71938 V 11181 71982 24022 45 v 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 47905 6792 a Fg(WS)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 76010
54804 45 v 0 TeXcolorgray 24746 81281 a Fk(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(WS)717 b(1.2)g(-)g(3)h(Histogramm)f
(erstellen)f(-)i(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray
-741 4800 a Fk(3.)p 0 TeXcolorgray 651 w(Bei)623 b(einer)g(LKW-K)-36
b(on)g(trolle)624 b(wurde)e(b)36 b(ei)624 b(500)g(F)-108
b(ahrzeugen)622 b(eine)h(\334b)36 b(erladung)622 b(festge-)921
6792 y(stellt.)g(Zur)e(F)-108 b(estlegung)619 b(des)h(Strafrahmens)g
(wurde)g(die)g(\334b)36 b(erladung)620 b(der)g(einzelnen)921
8784 y(F)-108 b(ahrzeuge)433 b(in)g(der)g(folgenden)h(T)-108
b(ab)36 b(elle)435 b(festgehalten.)p 0 TeXcolorgray 0
TeXcolorgray 13415 12924 19987 45 v 13415 14916 45 1992
v 14124 14318 a(\334b)36 b(erladung)433 b(\(in)g(kg\))p
25735 14916 V 1373 w(Anzahl)h(der)p 33358 14916 V 13415
16908 V 14413 16310 a(v)-36 b(on)p 17389 16908 V 4350
w(bis)p 25735 16908 V 5605 w(LKW)p 33358 16908 V 13415
16952 19987 45 v 13415 18944 45 1992 v 17389 18944 V
19778 18346 a(<1000)p 25735 18944 V 5203 w(140)p 33358
18944 V 13415 18988 19987 45 v 13415 20980 45 1992 v
14124 20382 a(1000)p 17389 20980 V 3054 w(<2000)p 25735
20980 V 5203 w(240)p 33358 20980 V 13415 21024 19987
45 v 13415 23016 45 1992 v 14124 22419 a(2000)p 17389
23016 V 3054 w(<3000)p 25735 23016 V 5528 w(80)p 33358
23016 V 13415 23060 19987 45 v 13415 25052 45 1992 v
14124 24455 a(3000)p 17389 25052 V 3054 w(<4000)p 25735
25052 V 5528 w(40)p 33358 25052 V 13415 25097 19987 45
v 921 28115 a(Zeic)g(hne)433 b(ein)g(Histogramm)i(der)e(Daten)h(im)f(v)
-36 b(orgegeb)36 b(enen)434 b(K)-36 b(o)36 b(ordinatensystem.)921
58370 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 365.85812 a add def
/d 0.0 a add neg def /h 249.3187 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 58370 a 6724 55891 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 312.29974  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 312.29974  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 226.9326  def /dT 1863500 abs 65536 div viceversa
{ neg } if def /DT 500. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.05687  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 0.05687
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 226.9326
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 312.29974
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 226.9326  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 226.9326  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 312.29974  def /dT 932183 abs 65536 div viceversa
{ neg } if def /DT 0.04 abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 355.65944  mul cntTick add def x abs MaxValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet
exch def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add {
/dx exch def /x dx log OffSet add 355.65944  mul cntTick add def x
abs MinValue abs le { false { x minTickline exch moveto x maxTickline
exch lineto } { x tickstart STsize mul exch moveto x tickend STsize
mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth SLW
subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 226.9326
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 312.29974
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5479 56177 a Fj(0)4276 54602
y(0)p Fe(:)p Fj(04)4276 53028 y(0)p Fe(:)p Fj(08)4276
51453 y(0)p Fe(:)p Fj(12)4276 49879 y(0)p Fe(:)p Fj(16)4276
48304 y(0)p Fe(:)p Fj(20)4276 46730 y(0)p Fe(:)p Fj(24)4276
45155 y(0)p Fe(:)p Fj(28)4276 43581 y(0)p Fe(:)p Fj(32)4276
42006 y(0)p Fe(:)p Fj(36)4276 40431 y(0)p Fe(:)p Fj(40)4276
38857 y(0)p Fe(:)p Fj(44)4276 37282 y(0)p Fe(:)p Fj(48)4276
35708 y(0)p Fe(:)p Fj(52)4276 34133 y(0)p Fe(:)p Fj(56)4276
32559 y(0)p Fe(:)p Fj(60)6489 57237 y(0)2207 b(500)1502
b(1000)1268 b(1500)f(2000)h(2500)g(3000)f(3500)h(4000)f(4500)h(5000)
6724 55891 y
tx@Dict begin  gsave STV CP T /ps@refangle 130.  def grestore  end
 6724 55891 a 6724 55891 a
tx@Dict begin  { 312.29974 226.9326 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 6724 55891 a 6724
55891 a
tx@Dict begin  { 5.0 84.19461 8.29999 2.5 130.  Uput UUput } PutCoor
PutBegin  end
 6724 55891 a 2064 56212 a Fg(\334b)31 b(erladung)370
b(\(in)g(kg\))6724 55891 y
tx@Dict begin  PutEnd  end
 6724 55891 a 6724 55891 a
tx@Dict begin  PutEnd  end

6724 55891 a 6724 55891 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 6724 55891 a 6724 55891 a
tx@Dict begin  { 0.0 0.0 pop 312.29974 226.9326 exch pop } PutCoor
PutBegin  end
 6724
55891 a 6724 55891 a
tx@Dict begin  { 5.0 66.16713 6.88875 0.0 -40.  Uput UUput } PutCoor
PutBegin  end
 6724 55891 a 3062 56273 a Fg(relativ)-31
b(er)370 b(An)-31 b(teil)6724 55891 y
tx@Dict begin  PutEnd  end
 6724 55891 a 6724
55891 a
tx@Dict begin  PutEnd  end
 6724 55891 a 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 99.5842 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.8695 99.5842 0.0 99.5842
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.8695 0.0 56.8695 99.5842
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.8695 170.715 56.8695
99.5842   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.73901 170.715 56.8695
170.715   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.73901 56.9068 113.73901
170.715   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.73901 0.0 113.73901
56.9068   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.60852 56.9068 113.73901
56.9068   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.60852 0.0 170.60852
56.9068   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.47803 28.4534 170.60852
28.4534   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.47803 0.0 227.47803
28.4534   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 41420
58370 a
currentpoint initclip moveto
 41420 58370 a 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Fg(WS)369 b(1.2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 60406 54804 45 v 0 TeXcolorgray
24746 81281 a Fk(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(WS)717 b(1.2)g(-)g(4)h(S\344ulendiagramm)d
(-)j(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fk(4.)p 0 TeXcolorgray 651 w(Bei)735 b(einer)f(Umfrage)i(w)-36
b(erden)734 b(die)g(480)i(Sc)-36 b(h)g(\374ler/innen)733
b(einer)h(Sc)-36 b(h)g(ule)734 b(b)36 b(efragt,)735 b(mit)874
6792 y(w)-36 b(elc)g(hem)791 b(V)-108 b(erk)-36 b(ehrsmittel)790
b(sie)h(zur)f(Sc)-36 b(h)g(ule)790 b(k)-36 b(ommen.)794
b(Die)d(An)-36 b(t)g(w)g(ortm\366glic)g(hk)g(eiten)874
8784 y(w)g(aren)801 b(\022\366\033en)-36 b(tlic)g(he)800
b(V)-108 b(erk)-36 b(ehrsmittel\020)800 b(\(A\),)h(\022mit)f(dem)g(A)
-36 b(uto)800 b(/)h(v)-36 b(on)801 b(den)f(Eltern)921
10776 y(gebrac)-36 b(h)g(t\020)556 b(\(B\))g(so)-36 b(wie)557
b(\022mit)f(dem)g(Rad)g(/)h(zu)f(F)-108 b(u\377\020)556
b(\(C\).)g(F)-108 b(olgendes)556 b(Kreisdiagramm)921
12768 y(zeigt)434 b(die)g(Ergebnisse:)p 0 TeXcolorgray
0 TeXcolorgray 23459 28394 a

 23459 28394 a 23459 28394
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 1 setlinejoin

 /pgffc{0.9 setgray}def

 0.79701 pgfw

 0.0 0.0 moveto

 85.04042 0.0 lineto

 85.04042 46.96713 46.96713 85.04042 0.0 85.04042 curveto

 -14.86285 85.04042 -29.474 81.13849 -42.3606 73.73561 curveto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 42.59805 73.59935 ] concat

 pgfs



 0 setgray
 23459 28394 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 55.07547 91.6391 ] concat

 pgfs



 0 setgray
 23459 28394 a Fk(C)23459 28394 y


 pgfr

 restore

 restore

 save

 save

 0.5 setgray

 0.19925 pgfw

 43.12386 74.29674 moveto

 53.10815 87.53824 lineto

 pgfstr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 6.03038 32.67691 ] concat

 pgfs



 0 setgray
 23459
28394 a Fk(33.3\045)23459 28394 y


 pgfr

 restore

 restore

 save

 restore

 save

 1 setlinejoin

 /pgffc{0.8 setgray}def

 0.79701 pgfw

 0.0 0.0 moveto

 -42.3606 73.73561 lineto

 -83.0836 50.34093 -97.13028 -1.63757 -73.73561 -42.3606 curveto

 -50.34093 -83.0836 1.63757 -97.13028 42.3606 -73.73561 curveto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -73.73561 -42.3606 ] concat

 pgfs



 0 setgray
 23459 28394 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -100.8399 -62.58507 ] concat

 pgfs



 0 setgray
 23459
28394 a Fk(A)23459 28394 y


 pgfr

 restore

 restore

 save

 save

 0.5 setgray

 0.19925 pgfw

 -74.433 -42.85498 moveto

 -87.96385 -52.44917 lineto

 pgfstr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -35.53389 -18.39758 ] concat

 pgfs



 0 setgray
 23459 28394 a Fk(50\045)23459
28394 y


 pgfr

 restore

 restore

 save

 restore

 save

 1 setlinejoin

 /pgffc{0.7 setgray}def

 0.79701 pgfw

 0.0 0.0 moveto

 42.3606 -73.73561 lineto

 68.75665 -58.5717 85.04042 -30.44331 85.04042 0.0 curveto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 73.59935 -42.59805 ] concat

 pgfs



 0 setgray
 23459 28394 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 91.63934 -63.31117 ] concat

 pgfs



 0 setgray
 23459 28394 a Fk(B)23459 28394
y


 pgfr

 restore

 restore

 save

 save

 0.5 setgray

 0.19925 pgfw

 74.29674 -43.1197 moveto

 87.53848 -53.02528 lineto

 pgfstr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 33.53589 -32.40402 ] concat

 pgfs



 0 setgray
 23459 28394 a Fk(16.7\045)23459 28394 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 873 43215 a
Fk(V)-108 b(erv)-36 b(ollst\344ndige)834 b(das)g(folgende)g
(S\344ulendiagramm)g(anhand)f(der)g(W)-108 b(erte)833
b(aus)h(dem)921 45207 y(ob)36 b(enstehenden)432 b(Kreisdiagramm.)921
78632 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 439.10324 a add def
/d 0.0 a add neg def /h 277.96487 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 78632 a 4073 75115 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 33 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 410.62424 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 8.53546
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 246.19194 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 711.9751
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 410.62424
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  410.62424  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 246.19194  def
/dT 46660000 abs 65536 div viceversa { neg } if def /DT 5000. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.1424  mul cntTick add def x abs MaxValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for subTwidth SLW
subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0
gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 0.1424
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 246.19194 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 410.62424 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 246.19194
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  246.19194  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 410.62424  def
/dT 2796900 abs 65536 div viceversa { neg } if def /DT 50. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.85355  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.85355  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 246.19194 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 410.62424 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 2828 75400 a Fj(0)2358
70676 y(50)1887 65952 y(100)1887 61228 y(150)1887 56504
y(200)1887 51779 y(250)4073 75115 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.7185 0.0 42.7185 25.60638   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   3.0 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.43701 0.0 85.43701 25.60638   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   3.0 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.87402 0.0 170.87402 25.60638  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.6 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.59253 0.0 213.59253 25.60638  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.6 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 299.02954 0.0 299.02954 25.60638  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.6 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 341.74805 0.0 341.74805 25.60638  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.6 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine  grestore
end
 
@endspecial 4073 75115 a
tx@Dict begin  { 57.35234 18.85599 } PutCoor PutBegin  end
 4073 75115 a 915
x Fk(?)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073 75115 a
tx@Dict begin  { 187.19452 19.36137 } PutCoor PutBegin  end
 4073 75115
a 915 x Fk(?)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073 75115 a
tx@Dict begin  { 313.66417 19.36137 } PutCoor PutBegin  end
 4073
75115 a 915 x Fk(?)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073 75115
a
tx@Dict begin  { 53.13669 -10.33311 } PutCoor PutBegin  end
 4073 75115 a 915 x Fk(A)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073
75115 a
tx@Dict begin  { 186.14526 -10.8385 } PutCoor PutBegin  end
 4073 75115 a 915 x Fk(B)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115
a 4073 75115 a
tx@Dict begin  { 311.13478 -10.8385 } PutCoor PutBegin  end
 4073 75115 a 915 x Fk(C)4073 75115 y
tx@Dict begin  PutEnd  end
 4073
75115 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 85.43701 0.0 85.43701
204.85107 42.7185 204.85107 42.7185 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 213.59253 0.0 213.59253
68.28369 170.87402 68.28369 170.87402 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 341.74805 0.0 341.74805
136.56738 299.02954 136.56738 299.02954 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4073 75115 a
tx@Dict begin  { 53.13669 216.37389 } PutCoor PutBegin  end
 4073 75115 a 837
x Fk(240)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073 75115 a
tx@Dict begin  { 185.50826 77.89682 } PutCoor PutBegin  end
 4073
75115 a 837 x Fk(80)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a 4073 75115
a
tx@Dict begin  { 309.44852 146.12457 } PutCoor PutBegin  end
 4073 75115 a 837 x Fk(160)4073 75115 y
tx@Dict begin  PutEnd  end
 4073 75115 a
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 49528
78632 a
currentpoint initclip moveto
 49528 78632 a 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Fg(WS)369 b(1.2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24746 81281
a Fk(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fl(WS)717
b(1.2)g(-)g(5)h(Brotv)-60 b(erbrauc)g(h)716 b(-)h(O)-60
b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 10102 a Fk(5.)p
0 TeXcolorgray 651 w(In)460 b(einer)g(B\344c)-36 b(k)g(erei)461
b(wurden)e(\374b)36 b(er)460 b(einen)g(Zeitraum)g(v)-36
b(on)460 b(36)h(W)-108 b(o)36 b(c)-36 b(hen)460 b(A)-36
b(ufzeic)g(hn)g(ungen)921 12094 y(\374b)36 b(er)355 b(den)h(T)-108
b(agesb)36 b(edarf)357 b(einer)f(Brotsorte)g(an)g(einem)g(b)36
b(estimm)-36 b(ten)355 b(W)-108 b(o)36 b(c)-36 b(hen)g(tag)357
b(gemac)-36 b(h)g(t)921 14086 y(und)432 b(in)i(einer)f(geordneten)g
(Liste)h(festgehalten:)888 16631 y(232,)369 b(234,)g(235,)g(237,)g
(237,)f(237,)h(239,)g(242,)g(242,)f(242,)h(243,)g(244,)g(244,)f(244,)h
(244,)g(245,)g(245,)888 18623 y(245,)g(245,)g(245,)g(246,)g(246,)f
(246,)h(246,)g(247,)g(247,)f(248,)h(248,)g(249,)g(250,)f(250,)h(251,)g
(253,)g(255,)888 20615 y(258,)435 b(258)921 23160 y(Stelle)f(diese)f
(Daten)h(in)g(einem)f(Bo)-36 b(xplot)434 b(dar.)p 1 0 0
TeXcolorrgb 921 34242 a
 currentpoint currentpoint translate 0.50516 0.50516 scale neg exch
neg exch translate
 921 34242 a 1788 34242 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 796.45714 a add def
/d 0.0 a add neg def /h 150.67719 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1788
34242 a -726361 26688 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 7374.3723 0.0 6577.91516 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 56.90549 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  6572.58376 0.0 T 28
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 82.43028 0.0 -68.2469   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 7374.3723  0 6577.91516  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 6577.91516
 7374.3723  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-68.2469  def /maxTickline 82.43028  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 82.43028
0.0 -68.2469   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 7374.3723
0.0 6577.91516 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 82.43028  0 -68.2469  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -68.2469
 82.43028  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
6577.91516  def /maxTickline 7374.3723  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 82.43028
0.0 -68.2469   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 7374.3723
0.0 6577.91516 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -727606 20674
a Fj(2)-728338 33226 y Fd(\000)p Fj(2)-723446 28033 y(1)2679
b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445 b(10)2209 b(11)h(12)g(13)f(14)h
(15)f(16)h(17)g(18)f(19)h(20)f(21)h(22)g(23)f(24)h(25)f(26)h(27)g(28)f
(29)h(30)f(31)h(32)g(33)f(34)h(35)f(36)h(37)g(38)f(39)h(40)f(41)h(42)g
(43)f(44)h(45)g(46)f(47)h(48)f(49)h(50)g(51)f(52)h(53)f(54)h(55)g(56)f
(57)h(58)f(59)h(60)g(61)f(62)h(63)f(64)h(65)g(66)f(67)h(68)f(69)h(70)g
(71)f(72)h(73)f(74)h(75)g(76)f(77)h(78)f(79)h(80)g(81)f(82)h(83)g(84)f
(85)h(86)f(87)h(88)g(89)f(90)h(91)f(92)h(93)g(94)f(95)h(96)f(97)h(98)g
(99)1974 b(100)1740 b(101)f(102)h(103)f(104)h(105)g(106)f(107)h(108)f
(109)h(110)g(111)f(112)h(113)f(114)h(115)g(116)f(117)h(118)f(119)h(120)
g(121)f(122)h(123)f(124)h(125)g(126)f(127)h(128)g(129)f(130)h(131)f
(132)h(133)g(134)f(135)h(136)f(137)h(138)g(139)f(140)h(141)f(142)h(143)
g(144)f(145)h(146)f(147)h(148)g(149)f(150)h(151)f(152)h(153)g(154)f
(155)h(156)f(157)h(158)g(159)f(160)h(161)f(162)h(163)g(164)f(165)h(166)
f(167)h(168)g(169)f(170)h(171)g(172)f(173)h(174)f(175)h(176)g(177)f
(178)h(179)f(180)h(181)g(182)f(183)h(184)f(185)h(186)g(187)f(188)h(189)
f(190)h(191)g(192)f(193)h(194)f(195)h(196)g(197)f(198)h(199)f(200)h
(201)g(202)f(203)h(204)f(205)h(206)g(207)f(208)h(209)g(210)f(211)h(212)
f(213)h(214)g(215)f(216)h(217)f(218)h(219)g(220)f(221)h(222)f(223)h
(224)g(225)f(226)h(227)f(228)h(229)g(230)f(231)h(232)f(233)h(234)g(235)
f(236)h(237)f(238)h(239)g(240)f(241)h(242)f(243)h(244)g(245)f(246)h
(247)f(248)h(249)g(250)f(251)h(252)g(253)f(254)h(255)f(256)h(257)g(258)
-810388 b(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445
b(10)2209 b(11)h(12)g(13)f(14)h(15)f(16)h(17)g(18)f(19)h(20)f(21)h(22)g
(23)f(24)h(25)f(26)h(27)g(28)f(29)h(30)f(31)h(32)g(33)f(34)h(35)f(36)h
(37)g(38)f(39)h(40)f(41)h(42)g(43)f(44)h(45)g(46)f(47)h(48)f(49)h(50)g
(51)f(52)h(53)f(54)h(55)g(56)f(57)h(58)f(59)h(60)g(61)f(62)h(63)f(64)h
(65)g(66)f(67)h(68)f(69)h(70)g(71)f(72)h(73)f(74)h(75)g(76)f(77)h(78)f
(79)h(80)g(81)f(82)h(83)g(84)f(85)h(86)f(87)h(88)g(89)f(90)h(91)f(92)h
(93)g(94)f(95)h(96)f(97)h(98)g(99)1974 b(100)1740 b(101)f(102)h(103)f
(104)h(105)g(106)f(107)h(108)f(109)h(110)g(111)f(112)h(113)f(114)h(115)
g(116)f(117)h(118)f(119)h(120)g(121)f(122)h(123)f(124)h(125)g(126)f
(127)h(128)g(129)f(130)h(131)f(132)h(133)g(134)f(135)h(136)f(137)h(138)
g(139)f(140)h(141)f(142)h(143)g(144)f(145)h(146)f(147)h(148)g(149)f
(150)h(151)f(152)h(153)g(154)f(155)h(156)f(157)h(158)g(159)f(160)h(161)
f(162)h(163)g(164)f(165)h(166)f(167)h(168)g(169)f(170)h(171)g(172)f
(173)h(174)f(175)h(176)g(177)f(178)h(179)f(180)h(181)g(182)f(183)h(184)
f(185)h(186)g(187)f(188)h(189)f(190)h(191)g(192)f(193)h(194)f(195)h
(196)g(197)f(198)h(199)f(200)h(201)g(202)f(203)h(204)f(205)h(206)g(207)
f(208)h(209)g(210)f(211)h(212)f(213)h(214)g(215)f(216)h(217)f(218)h
(219)g(220)f(221)h(222)f(223)h(224)g(225)f(226)h(227)f(228)h(229)g(230)
f(231)-726361 26688 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 -726361 26688 a -726361 26688 a
tx@Dict begin  { 7374.3723 82.43028 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end

-726361 26688 a -726361 26688 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 -726361 26688 a -726361
26688 a
tx@Dict begin  PutEnd  end
 -726361 26688 a -726361 26688 a
tx@Dict begin  PutEnd  end
 -726361 26688
a -726361 26688 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 -726361 26688 a -726361 26688 a
tx@Dict begin  { 0.0 0.0 pop 7374.3723 82.43028 exch pop } PutCoor
PutBegin  end
 -726361
26688 a -726361 26688 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 -726361 26688 a -727409 27020
a Fk(f\(x\))-726361 26688 y
tx@Dict begin  PutEnd  end
 -726361 26688 a -726361 26688
a
tx@Dict begin  PutEnd  end
 -726361 26688 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor   0. true 6885.56393
8.5359 7056.2804 31.29819 0 Frame  gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 6601.0365 31.29819 6601.0365
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 7340.80783 31.29819 7340.80783
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 6970.92216 31.29819 6970.92216
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 6885.56393 19.91682 6601.0365
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 7340.80783 19.91682 7056.2804
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1 0 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 89953 34242 a
currentpoint initclip moveto
 89953 34242 a
921 34242 a
 currentpoint currentpoint translate 1 0.50516 div 1 0.50516 div scale
neg exch neg exch translate
 921 34242 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 10102 a Fh(___/1)p 1 0 0 TeXcolorrgb
47905 12094 a Fg(WS)369 b(1.2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 37717 54804 45 v 0 TeXcolorgray
24746 81281 a Fk(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fl(WS)827 b(1.2)f(-)i(6)f(Beladung)e(v)-60
b(on)827 b(LKW)f(-)i(O)-60 b(A)827 b(-)h(Matura)f(2015/16)g(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -741 7929 a Fk(6.)p
0 TeXcolorgray 651 w(Bei)535 b(einer)f(V)-108 b(erk)-36
b(ehrsk)g(on)g(trolle)534 b(wurde)g(die)g(Beladung)g(v)-36
b(on)534 b(LKW)h(\374b)36 b(erpr\374ft.)533 b(140)j(der)921
9921 y(\374b)36 b(erpr\374ften)505 b(LKW)i(w)-36 b(aren)507
b(\374b)36 b(erladen.)506 b(Details)j(der)d(K)-36 b(on)g(trolle)507
b(sind)g(in)f(der)h(nac)-36 b(hste-)921 11913 y(henden)432
b(T)-108 b(ab)36 b(elle)434 b(zusammengefasst.)p 0 TeXcolorgray
0 TeXcolorgray 4313 14319 38193 45 v 4313 16310 45 1992
v 5021 15713 a(\334b)36 b(erladung)433 b(\334)h(in)f(T)-108
b(onnen)p 19919 16310 V 1372 w(\334)369 b Fc(<)g Fb(1)221
b Fc(t)p 25358 16310 V 1373 w Fb(1)g Fc(t)369 b Fa(\024)g
Fk(\334)g Fc(<)g Fb(3)221 b Fc(t)p 33909 16310 V 1373
w Fb(3)g Fc(t)369 b Fa(\024)g Fk(\334)g Fc(<)g Fb(6)221
b Fc(t)p 42460 16310 V 4313 16355 38193 45 v 4313 18347
45 1992 v 5021 17749 a Fk(Anzahl)433 b(der)h(LKW)p 19919
18347 V 7146 w(30)p 25358 18347 V 5695 w(50)p 33909 18347
V 7251 w(60)p 42460 18347 V 4313 18391 38193 45 v 921
23401 a(Stelle)405 b(die)g(Daten)g(der)f(obigen)h(T)-108
b(ab)36 b(elle)405 b(durc)-36 b(h)404 b(ein)h(Histogramm)g(dar.)g(Dab)
36 b(ei)406 b(sollen)f(die)921 25393 y(absoluten)433
b(H\344u\034gk)-36 b(eiten)434 b(als)g(Fl\344c)-36 b(heninhalte)433
b(v)-36 b(on)434 b(Rec)-36 b(h)g(tec)g(k)g(en)433 b(abgebildet)h(w)-36
b(erden.)p 0 TeXcolorgray 0 TeXcolorgray 5417 63082 a
 currentpoint currentpoint translate 1.51974 1.51974 scale neg exch
neg exch translate

5417 63082 a 5850 63082 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.98137 a add def
/d 0.0 a add neg def /h 209.99374 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5850 63082 a 7929 59869 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 191.20247 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 180.97023 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 191.20247  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 191.20247  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 180.97023  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 180.97023
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 191.20247
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 180.97023  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 180.97023  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 191.20247  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 180.97023
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 191.20247
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
6684 60154 a Fj(0)6213 57005 y(10)6213 53855 y(20)6213
50705 y(30)6213 47555 y(40)6213 44405 y(50)6213 41256
y(60)7694 61215 y(0)2679 b(1)h(2)g(3)f(4)h(5)f(6)7929
59869 y
tx@Dict begin  { 99.5846 -13.65813 } PutCoor PutBegin  end
 7929 59869 a 738 x Fi(\334b)26 b(erladung)314
b(\(in)f(T)-78 b(onnen\))7929 59869 y
tx@Dict begin  PutEnd  end
 7929 59869 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  [ 0.0 0.0 28.45274
0.0 28.45274 85.36331 0.0 85.36331  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 1 0 0  setrgbcolor  0.15 .setopacityalpha  fill  grestore
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  [ 28.45274 0.0 85.35823
0.0 85.35823 71.1361 28.45274 71.1361  /Lineto /lineto load def 0 
setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0 0  setrgbcolor  0.15 .setopacityalpha
 fill  grestore gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  [ 85.35823 0.0 170.71646
0.0 170.71646 56.90887 85.35823 56.90887  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0 0  setrgbcolor  0.15 .setopacityalpha
 fill  grestore gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 85.36331 0.0
85.36331   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 28.45274
85.36331   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 0.0 28.45274 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 85.36331 0.0 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 71.1361 28.45274
71.1361   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 85.35823
71.1361   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 71.1361 28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 56.90887 85.35823
56.90887   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 0.0 170.71646
56.90887   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 170.71646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 56.90887 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 29094
63082 a
currentpoint initclip moveto
 29094 63082 a 5417 63082 a
 currentpoint currentpoint translate 1 1.51974 div 1 1.51974 div scale
neg exch neg exch translate
 5417 63082 a 47992
7929 a Fh(___/1)p 1 0 0 TeXcolorrgb 47905 9921 a Fg(WS)369
b(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 65118 54804 45 v 0 TeXcolorgray 24746 81281 a Fk(6)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

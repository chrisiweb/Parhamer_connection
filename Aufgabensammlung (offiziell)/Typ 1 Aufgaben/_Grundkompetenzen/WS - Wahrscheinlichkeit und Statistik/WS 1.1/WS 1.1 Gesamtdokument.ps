%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.1/WS 1.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:46:24 2017
%%Pages: 15
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMRoman8-Regular
%%+ wasy10 LMRoman10-Regular TeX-feymr10 LMRoman6-Regular
%%+ LMMathSymbols8-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Italic LMMathItalic6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.1/WS 1.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0845
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathItalic6-Regular
%!PS-AdobeFont-1.0: LMMathItalic6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathItalic6-Regular known{/LMMathItalic6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic6-Regular)readonly def
/FamilyName(LMMathItalic6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathItalic6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{0 -250 1241 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD113E9A4707A44200A15F1431F9E64
6F74A5028622F1CCB472247A2D3C92D19C0AF82A97AA93420B2252C089999F87
E9B99CE919915A7841E47F18EA2729DBFB8D0F265978077327D4885A16B99026
3AF09EBA03D665F320B724646224778F5207197EDECD6BA321B46A9C7B1BE014
C7AA72E7AD74DEF4CCFD1905F237AF725D38159039E347BB692EB0BB42D933B4
A4F5113867999A3BDD6E56036DD46F7BAD9445E0EB69D6BCF844741CD349792D
3F6A794164344B7301C4BD8C500C92214EAB1BD409FE0D61470E69C69E668D73
F1418A89939E9AD8AE9F3EB718A13741D72F79B4E51DEFB2029F4979E0C7F79F
8178AD7DFC03558964BF7FA8302240FA1B7CAC01375924C41D0200C60452AE3C
2CD5F7EB6BFA476372518118DAADC1D6E053E534830EEC37A0160A24FA76B86D
3FD75B97E83D4B1E1216C901748E31B5AC51D15BC8B8EB18D83CE35525239F0C
0FF52411E08D5893C09162BFA0EA49E1290193D19157A30A5F21797106802635
1F19BFECA6B40461144E82A051FEDBCFA7B096E34A7EEC13F93B74652D2EF4A7
08522EB97A15EABB2AF74CE73F5B8935F65DC93EA24E129BF18D5F8B4E890B81
105D0673055DAC2775314AC07C1D99428076035B0EA20A382B61A8B4548BCFF6
0F0A48E059E7497260326AD89AD9815B1F9B36430AB8527D61C5EFB8AA5B6B83
2B5053D7C25089EFD48A2E023C219158420D77BFE7CB795628865715FAE6EDB8
89F423F0B97DB7AC2927F97EC4ACC2E9F4BCE46EE66B37A2F169E33177ED4408
5F93FDE909FA829DE0AE5D9BD0BC4A75A0141AA472AD0ACEF816F27FB4A6CB04
13BF8944FA31EECB2BCE2983E7CD2C9C68868890B42D91D3182096A7719209AD
32A69532F10D71FA1567B10B0CCD4813495F34F89764223F7D45F888FE1889BC
F7E9E0C3E520C1536228FCE80FD44B49B8059ACFE6DA964B7D4264039022F974
E8A6827C6C472B256C93764DB10436956E134C91DE3157FAA4BD45965949563C
96042779A46D091414276284CF0B0724C8C0A9A026276ECDA2CF30CE3FB80656
BDABA466503D32708C76C3F755C52C22964438FAA61F9694817BBA9025D99E3A
86A4DB4C064CCBCF3F06D0CB07AF646EE7912F0E113563E7B2708EA788D1FDC2
2ED4BEBCC59426426F104845FE5C4E7C75B9499AA1A2293DE0F1635AABED98E3
1EC57687C22D808125EA81913338B104F7A8F401034AAC78A9E51BC115E89D7E
BBF9496E3359BA42560E881B76D6D5D885CC186681C90FA96D04926140B21B2F
27E6D26CCD855C8725826D01B6AE8F6688DD9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A11065111310A46FCBB19212E33F0B75634F4B5550
DCA5BA87E18E4F07B5CFD4BAB729CB705A53CE0E0336424602EA4A3032DED7AA
13FDD13235C6514EEA804EE4C5F3035A6AEE4391BF9839800B20C7E958E4B42A
1EB67E90C22A997075D4F197AF8485F01346CB8E17CD12A285205B2D5D6FBC1E
930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A3BFDCC677895D8C041C1
092F4FF2D03D6091E3F950ED7BF3F41289F48AF0A0D302D14F972D7E215AE40C
27F118AC052C2E917C8ED53F194AC6DDD541E4160DDE659F85AC3B58BE49788B
4428D9918CA66CD99164031767650ED4A3681A84D170419B1D9D825F30DF959C
EB471230A8942C6B0834FB86AD04CBD02303654E4D1E40609B14C8D1F9635666
1F43F7ECB1CF1480CDFA71035F9EF833A4B1B51E56065ABFEF1036EEAB8E04F0
95EC4B3D758F2C2368FAFCBC926D5660E96B9741B75A6395CD7C83F9931A7999
0298B08DA5149E3FD6CBEF3D79B7E604C912EA7DAC8E354F1CEA9C76D10F5718
23F71101D2FBB9CAFCD196E7A653070E680B42E542CB7DAB82C4B4329E5CFF8A
B0F213E9D5CF55D422C79C38F2C2F487CA8BC0696574F4D97784BCD075E22809
C78DD4A7B6D83F99EAD74396128B0C14658CE0A473AB3EAB6060F37CA8DF3344
6E877BCE976680AC346250670C41BEB73DDEB6099C156F65478D26C2CCE2BBC2
D1323B239944FC0727155B6A248DE14B83C362595A23B2F32A46B578F76FE702
7B3CFB43CFEB594BFF9BE4E7F8ECC5B006D8B46997F3DB8CCDDE45B16F33F170
30AAA7B0A2CEB87A0360124FD1504C60DE1339C3BADD2EE20443E015CFC5A976
34E4948BA2142FB8383DFB5DA7A5A97407F3DEF442B8DCCDEC2DDD4A96ABAD2C
F549FFE58BFDFF5FD8954C0B4A8233C657E19241996C2FE81439067979C57205
08AAB6B59476C63E035056CDBBB9F4DB89659D42B100853BCBD6B4196EF1712E
B3029E680F9156D505934B2008BDFD071E49305C993D4CE9A3FA7F588F2073CB
A7DE351875F46D0DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E4BD2B3B7349
934E69E48EB70222D8B9D52981FA04764322F1D67522E273B443AE9820ADB530
3CD0D839FE2DA6AFC55AC786BB5451BFB6C5ECDAD7BAA8CECDD581C5F70C2E00
5213489EA21075A3BAB4C488358207F7D538B0B8EB1F74EF96BF93802DB51EC3
DF27141665AEFAD538B644942B6B97E778000DE2F2AC2B228AC44299443BCBA9
770319B732CC695D238F69A4CE6BF98BC4EDE0996427EDA0CAE0F19C2B1D5B91
7C508B83F0A2BBD5B56D32B90E027D459D467C66E0B2E159858689CF391A95DC
4C962D8ECEA8E753C2DEA7E42C8C52188E0DB5CA45552F8867037B2180897707
BFB944811C58BD3A3C1B47EA135377F86ECC12B42AB036AEAEDC4A456134C235
D3B273A659AFC6F867A0A6B4726433C75F1DC0671FE716B7B6D84B9B963D21F3
225933FAEB94966600A8B720DC21DE0755EEE6F50ABCAEE853F4D847CE7B282D
DE7EF7DC6F24FD7D8118F5301E3EB92D3CF24F6243BC42E7B1F1F575D4877A14
A10F8C8CFEAA802AA756D295E404B2B331CD0C7DA22F5FAADE6BE18603642142
C01F7924228A89E064588D4BE70311218D1226787AA0A3FD23E2890634946E91
D1AF215890547EB22A1FB22654555F8CA81A98FF701E4E3F32A4B1E22FEFF347
BD3FDAC64590A3E6AA52D0F676F11979C7744E54E5B0088835B64AB5BD2A130A
2D8C8272237FE1ED4B44EB22E96CC5D185F48BB1713E4DA77B4F636BC2CCC399
49980502A7FE534FE6B7220E6B0CADBEF44EDFF90FBCAE8C4272E2CE583FD73A
055ED8294860FA3B4DA4284E7DD36A5A8DEF27122E4081AB0A60CB630389A4F6
01F284FAF60214272C9F9FB2DF078049C357718AE82962EB54D0F0DFDFAA44D0
CC32979A1EEEC2389C5A37BF4368E12CED705AD291DE2A3F9351A8674BEF0BD4
CB42E6B1D03FEFEC635C4E3E11848915759C1D2CAD099DD60AA7BFA31435DD57
C23D90ACEC09D7F9DB5A1476962A592ABFFD7C6573996FFF0F40F4D2FBEC5B7F
4C7EF6B6759AFB2EBBC09D2A621E972546C8A4CE88818DBDE72D030D8E884D31
5F5650C4367D80A903CC4192686020D0716C1FE23EF60C89987505AB9A92AD9A
55EE0636C143463EF284A9444AD2113D19B43A4F31EC8856A7DECEE7309C0D14
8691BB0887AD84C2E2099F73A2E468110AAB2BC83671602420FD0665DDC72FE8
375C91FBD9035841767258BC7385E4084932266C621A42B8A3139CE953DFA968
751076FDCAA3AFFCC71DC7D819C3A202A4E77553F9C1A1E88D7CB8E40CD6C4FA
69CF3A22D252AEBA66664D8243C852C84769D1E4176F64EF3C2D266ED2B909E0
D1CE8031E1273A9000C8139BAF088951C2DCEF71207362FAFDBE73F8F6F99550
EAB6973C075EA14B305AAD86838F1CF017F9E87057F94EC125B3ECF744CD5792
291BB7FDB904D149467FBA73927F2CC982DF1C269DCF2346C02C33635ADD8E05
F70604A8612824099CB3A8BC081F33CB005350D208EBC4F8E80A54D110C33382
DC13235551CF1F50DC361C2E70132FC29AD6067C60D1CC7AB83FEC19C5ABD83B
ED1F6DCC6B93D8F7EE51A9C5DE68C1187E0087584DA4B3E460C495751816D944
88534EED21843FE41405C42C30D07D729FD472241852ADEFDF3176894372B84D
03D1B17BEC6B9C98D4CA52DEB18C093EDBF1E43A44DEF95381CF2347FF33C4A4
0439CBAD94858AE0C6D3DEC58319987C4D8948335B630A8C2E7CE1413F99C1EC
1E0CD4D4D8A18B49B7048C06456BE79073B38E8EC302C9A3E0E5F3292C976836
C6017B46AF959F77888B74F9FC08D98CAFC92EA0B6BBE53ADC954B9B32F1F852
DB888567C1C1717D06FAE23DC20555C129B4924BFCE14913B22B6848FEFA6107
790BE7B3C7F55451676EF647EC262E4C15BA42E855E249A638240239D55726B6
BA413F846A887BD133E37CC9BD591FF8ED0655E753AE55712F2E5C55F4100385
2B5883FD2CC9F33C5535522E2BE0AA2CB6451AE5AEA575249E6D4963C88AEE9F
E7537C3F8E2D32BDE94E7B47ECE15B865346D956FA91D2C2028FDD2C0BB09735
A0A8003D3C3D8DFD37D8FC6B3FFE84EB2F9A0D0344E6E5627D613BA2540DA3F0
64922470DD9BE07311783290A0EA08384809CF652F1E602E7F2F5933FD06CD0D
1A78AA64AA9F0BA11FFB42D173043053598F3690B13F76C5737253FB5D2AE802
38045C9284AF035C5C9DB485B0EE7DDCBD013DF7135B2E98644F993998F6C5EC
D1AD840B521DA3259676334E609FCB048910F3D70211659CDBCE05F0733AF962
65CC9C001359DF6DF52D943BC285B007D1135D8732354D59E915398CF620966A
E7CDA967A7611E49A6D4B8224C70EAE8E808F089357E3671F2D1F18F6CC6F463
0E1809D3042B7CC8E67CD47713C9A925DD73C4C95CF2906028E08CB5287A726D
9734CC34EF0D0885ABA3C73F1D78F811430E0A4B5911E3800333FCC219DFFAD9
A7F756EB629D05BBEA26008EF805F7F1CB2130680354524F74226670A1FD29CD
BE15D728D7D835AD3B998FFCF4AD1325A524D676161BE42DA6699C5C0B88F3BE
8B398445FE9D5637A828209E9660AB74E830939CEF9EFB35880DA8FE850E9A17
5C83CF703AE440955E69DB70483A4203F9797F25663FCAA783FC4360E8E49BB8
0F8F138B43CFEB4C301E5596CCFA7519DBB19F4593906E5B9711CF60A04277EE
7E0EB69D76392B84CF4113223A6709CF1783C386AC2358F315677479DB92989D
F9FF5D6A997B23CF1B52822FCEA099C47966D70C09BE127C7DC26427B6660464
D5830030D103F984035A523CA99481FE7A0CADC3AECD739C9C425D09CB50B4B4
BE2819EF816FD8D85DBA9094E105CA0C6CF6C122C2ECBB711ACA5C2D1B67CD3C
F5EF4349B3DDDE8CBDA5AFDB24648062C1F3C410189522F61655505F37D6A182
ACDF7D3B149C98B5ABA942FE0F7E1CC26DF0F139B04229B10355842E811EC2ED
337020C0455852748C0477712A9A9258B7F172C5C6E2C88FA9336082C86E8431
0DF2E15C2A8EF19F7E23FF7B7A9FDB181D64BF5A3390EF29EA6A156CB2134AFF
9DF396E5EFC66EE2362A836FE257B06BD8EC6B1611A1720790B0B6722BE633CC
1D753D694C8F8DC44FBA568718A8ADE9EB26B0402C5F61327EFA5AA4E83950F1
79CBD4DA333EC3590B03917367C9806FE3800B715372499F6B85E0FCA48B718D
D31B2571A78D4463B995CF6379645825941C8B7E1B1401AEBC356EE505946361
3DD36491F24D7C3D634B25C2CFB93493174088A505C703C2029593EA286E5C67
C0B1A29E4B3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B862D91D8C1FFC172A
D2E5ED14C9849A1475958C8045F32105E1D523D2D201ABC2BC9C88D9709ABD02
ECED38F4E38B52E7DFC146AFB27C32BD7A3AE60ACBA39AB615F9539E8AA538E5
13B26906E9E6BC229D511F324E32956174BF714947AA98663DA46206E7A75B1E
7AC0247834B4577FE6188EFEAE13FA319E5F388B89BF950C292C152AECC74EBF
0944CFC4A423BCE1E467226AE0B39365CF469AD06DDFDDD2465FC53E50F199A7
BCF35432E5C7B43EBD3B45AB3C98B383BB0FFC9D031B2301B876860BB758FCDC
AD041120AAC0862B614085AE1C15D7F22C05184F0E5A02E35F5FFE212672889B
CBD27C4B8CB913E67B0A9F553C3511F9C637E680F53E61A0209F33CEE45E4978
5FDF24AC2A5D05D634E530B612DC0FE5F0495F54931E74E8794276F856200CAA
47F2616F4CD48A5197F98F35341EA3A752FBF80C009DAC8817AFE270E9035F12
399AE9E99E066688884DBEA2F4E1997E211E3B6E052E1597B542399476EBCADD
BF3B86D76E228D3A164A0A1FAEC2997DB02A3B7CA3B5D2C0A0C44B95B3D50398
2779D7397BF1D887CF316E2573D9042D9100A5452C092484FA6FAAB5FBDEA2A2
C207DAAF51694588BC2EADC60BB6225D9CB6CA887922B117EB0E7F84A8537042
41F8D1B2CF663368177B9AF0F93491F6DAB6DC87A2181F1D6DE4E183631716C2
1F0F952E0666AC768B3AA0108574C5FB78BE0E8615EACD45673984D608101207
4734E7989A96D0B2D090EF42BCE934B61DF2FCCC64FA324274960330E13C70DB
A7992AD388833902DA8169FE89D391CA583B1A4CCC7D7BB7D8F32994520E1744
C00662C0C9B06A2E3F4E207AA4112E15B43AD6F76EC0AF3761859189D7A93BDE
CC857FE96B9486AF082785CA8A5E6F4F1A755E97F12D702630C4A2C7A7FD2C3C
0020FC70BED6D04DB4820FDAC00242815CD27361E68D79B52B6C9A96C1A40596
F048A31C490575106E783BC3A24FE1CCAC2616FB21B177663600885E73A5F37D
FBB76001E331CFAB90E2FA2302597BFF0F12D7DF5CE21971671507317706D1C4
834A5A1D1078DCC4444EE308B8A5AAAEEF34780111EC919B75ED0EBBCCB03EF5
F13BB2C4F0EF5A35DB8BA95DA2F68346CD40AE6E3A628D8D1151137A4BED2848
F98F6807D5D8FD1EE5A172D081BE486AAE38E319190832266609281D86AEBF80
26DF55B1DE1D32145D395979ACCFED4A2797D8EC42FEE90EC7504ABD10116BAF
97187EFA024A1A7D9DA2FDE6A9CEBC3428448F9594BD6CF6D7EA2A78783162D2
805591608ACA227FED7547ED1DA6E35253BE7A2FFFE59642F963EFCC2AF7C015
2DADAD834A43DD5CB510F4E2813868F322181D60E376B4E430431F049992647E
2B744E48AFD59E26FD6CA218A1CB03FCB945FC24376A45F2DE0C2137808350C9
716F9F265E0F76FFF660C54AC08131B56DF06EF3E0CBBC936650D9886E8C3F79
BA7B78FB84A3503174D2FDC63493D8B9EF33711947B65B0C07BB7FE129E4491D
4288257C95DBB994E1887E1D875943A84DBBC2498C9CFE95EDB9C23A24EF78D3
29E59D6881F3F7FFEB68D9F2164D9AF89DBBE3B49616C51E8265379ED8DE9A5A
DB2EAEF4DEF28B5FC78F9B26E111583C71D31F7D8FF55E0C60DA0196DD4B0E8A
EB23739AF92B579720B119FA992EA549EB52152BB04BF5A3E95CECEA846B5E15
8A522D33CA9B4F60CA8D75878FE4BC40C0ADCB09448C46594658984C31162537
3FF73925D862525CA5E696419DD3E60BE0FA25D586BC15614C89272DE6D1F25C
31FB754AD94CBD3F1EEF1BB71DE6C221F4BC9E3F0AB438C06EE3DC882DC3CF7B
6CA10E80597C6D46D97550C614A3CF44E3D6E362EF0450576CE48CE0709D1914
D56A5142B2E5EA6C85E8BBF183265327078D87FD6B36EEDF1DA499853307B18D
6FC9F3CD27317AE5C8EFEDCCED86BA6FF9774B688E44CEB8654AC79AACFCCBFA
F40EDA07278DA546A957EC57A9011C0DD80E0C07A42DCC0E1BE4BB40B79C134D
6420233E4952E6F77BDE60B62F6B6B4DFBF3D68A009152E2B9229A62EF76D442
2E27F4227102CF7D56805B6FFB0900929A29FC28C508A73216BA87955AD8BFAF
5773CC7B2AD411091E49BEE16A177AFE57D15B1C247A2913C69F0ABD2C8E0CD7
C390086369D35D3E5A083C3E8A0DD69475D7C8CEE1255CCB36DDAC9B974D3E64
19A08BA4C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A28032D036947A623EE
86048A0CA51ECDDBFE74ACA3475C92E4AA0EE78B943B79CBA4AE311FF4612252
D9EEC7DEA065023649E43CFE82E4F6D74AA3696DD13387024C1204B638352653
6E742D1F299C73BB93E28D89714B02C93F185B0B156A0E9BA31F748D236F1FB4
954BBC19648D83B11C6A538AB48C7CF874F7614562322EDB6B87A3754153AFC5
FCB46990A5043226AA3B3523F134F68C8616BDF9EEFAAB2DADD904DE6BB20AA4
F3B3EFAC4F4349A44AADDFBA5773B75BD0949EE04EE859112CADD13747A629DA
1D2427F462E1B0829A8D5EE80181286B7FCE258DABAA1CD08127A538F741B95E
36FB9674ABD86A83309CFE771F4A5F8ADA32421416D786DADBC2D91CE0B646D8
AB5073A179EE0DE004988793397942ED0508663E38B7FF05556CDD7FAF7FDD73
693D4752442EB8974AB96F46DC25B86B07F3BAAF56D72E2FA869F347D7EE2A61
48603C8B5BDAF9AB2831BDF98BD312B3C0056F607C2F368DC2FBB2303E5FC195
A376B20929D5D0056115A25CE1D258A0D11FC76133074FFBDF7C7F601B0E3619
7BFA431548DC233902D54DA503AB04882F2A971A09196EE70772CCF4E8199570
C607CBAE81DAEDB801F01459540E1BBAE50115918754777596A91EBDC5D1E325
C4F1739B462F1998B2FAAE8AAF21156DAD9509DB2D563CD5E4578112E9823FBD
51C50EE26AFA3EBB6841F2612CC8FB2AEED9628597FB8984B759AC9A551DE524
A68817F64E34B15B6883B4BAE39CD216A252FE03085BFC50638BB19E4FDB3064
DE68CF3E2D9833F6C8F5F5A48F29603BF70F2E1F12C36A7E84E41ED271901DB0
7ACC778D03F409DEB574C2659B24E1D3D968967A14479872D5B414E4A3E30113
EBCBA296E4031828A4C12A71DAE2B256444D06A3FFE21D9099979E3025B857A5
8B78CAD093CEBAE2A3A235599959B10ED7095DE02DD016CA478F2E04125BE93E
80203A62ADA5F3B3248E35589616A994F5C939189F730F4FA2EEEA414E1DEF4E
D73A8A2F03FA5DB38415D90E36B339866B13AC66A466425DF97141017B2BD667
44E1F4561AF33C3DE08B509DAC76995E2605D1CD18F7FE5FA60F8F48E2604F77
75BCC1B2CEF2A1CF3DEDEE81F75D8B5CEB205425442B328703A8A02743D1BE7F
78CDBCE9F4F539AB466232DD51BDE9E8549164DFB96D5030E787961D72D02C19
5C669E792C0DF46F5326E1E75531FFED9C3415BC6E4D05AE962133C1BB83ED47
FBE4EA1867EFC6BDC20BC853E357D674717EBBEBFC0760DF4725B4AAE22A971E
1EBD8580431FB27763044E1D2AF6FD54B8C163882BA8028D6AE5F8C165CD0D25
4D86F36AA2BD43B7A38BB585B7A130F13313510EDB1DF48D8B34DAFD7452DE79
C61F414C4C20CE45226FB71628A029390BA70D82700A71D0510CEFD31375C162
3A68FD220CD70AF44BB3AF71E834ADCF1BD62633B924650E918FED1913241C6C
EA1F22B6D9F5E6FA185551C74FE838A9D7B3E0550C17EB83589B3D213DC74828
CA4CDAF73438758A19661381D5DCE504B266FC2FF3C7074BE20B89596FC8F4FE
B2C582024503754847E28D80D14FF2F604C2CAC70727F24CB5F2B23E93A3CB70
3B62FFCE2D6A0087E30C8F91B3991BEB10B121C31DF3A38285DA0787349A6380
17555F046176A9298786AEAB1BF32C05DE65CB06AAF333F91C2D2910FE5E427D
4554B341E0E125B248874A723D1CAC0E6DD815CE279FB0B28D20F199D593FFB3
4D445FF8B74EE25981C24E8C36BFA67F7016F798DBEE4F369D5FDB88F12DEC91
9082DC237A9610588A46C984CDAEDA86706DAB4E6ECFCB1D91887A61CA0A704D
EA41D89148984027FBBBDD108842FBFA0CDAF83D8750C9716F9F265E0F76FFF6
60C54AC08131B56DF3F726EB04A439D43635254CFF36C827155FC7F5C6703705
2441DC2A34CA9CFBDBA9CF1519633A44E889CB71E24DDE429403619BCFC29B10
9BE23860C670D5EB5B0EE2F105D12894A5D3A331145DE6FB505CC19634E9A154
8F372F692FB97A0DD77737F84F944EE4F182641F0519868767C6527835848FBD
6FD2D909977882A9A1E80EFBDC65D6847A8BB9EB523CFDB347EA9A8BB49F0F60
BE4EC8E5147BA25978B587C96D7A96C590EBC1CC733518D1EB101F2A72D9F931
9DDC6EC991B713C30F8DE5B09B3F8D29D8C8C5F39807B5A3A5D025D400528D51
60C7E9F656D93EB214E1FA04F018DEB24433BDD91BA70E84115929BB08D42023
B94C5E0954A9FEC1FAAF3113D089D7C8AC30BC2C1AC697D103B20F96993C6EFF
3E6B5B12AA5072BE796574BD8425EE34FBD4AA7DE4C4A1975CFB5F1762444C55
AC40583F7693FE4708FA0799E401B3503F5A5EA2C53C567618F91BECE1470741
02CA922C49DE84A3CD7752C67CABF25518B8F7C9C388A9E2A7D505F67C15DECB
BD1CFBA69DD89D6CBF5A82C037D70EBB73931AFFDB7E29FB09B3F3F3752B178A
D1EDC212E7FC06E86F8C31DCA9696C29DABC5CCAD3452A7FE5A527D3A9DDC1C8
E5A1260E01E3239ABEBFCA5C7E828BE667E9C72222B84C4C79C2D4B131121D5A
26A64FE348622C6CDA9FAC1A26DBF07A94A4356D1B940016CE245180FF271DC3
49A4A095E93E7BC88C6EB5766A44A7EAE4D5967EC3646F547C1BB5DC55FB4251
9C647AC14E7625D8FF646D135BF584D4963DC5B49AC9E5E6BC6F373161076941
FBE23CA6E81B848B32FB9204CB9EBC3A3D377322FC994DAAC423A4B40357DF37
B65B9BD0784EFA1A9BD09ABC04956B86F9B706370B70C81430A6DCB1642F75E0
25ED7EDA420A3AC189CA30B2C0B3B0A7D19A6EF51A2D28348512488883144CDD
9D84C7959B419528B283E03EA02F39AFF37556536D462FE388B982F1E2CBD036
EFDDC29AF5BA03CEE08AB4E79EBC96D281AF0BC516AE5D6CC4E176544A47869A
64E63952101F18BF75E71B5B6E7022B99AA55C94130C7A4AFF992F9928D5D31B
088F7C1E44D171D013D490A0EE6A8EB2B1B380BD963108B932CAFAE6923E976F
786DEDB9CDE203B79EC06C7B364E6040B557C7D6B0F7E5E5521E20283CFCA712
0F8F3A8E42134F1B6B0C248D56F247AA68F8707772C16BE5309CF91E7B9440BC
8CE2D95FA1D83B12E3EB43D4885785D4D1F07DDD373CB57A8F422670A4FD1313
CE7070F27AA426B145A147B8823D214AFF3493B4E6840EEE67CF5E402D7C685C
9208DED34537CE2D9646828E0034288E97C143576D2AD37F46E21F017D2EE4F0
73593ABE06FC429FE06F9122E7F8EC158A3A9D45C2FF2FE1057991478CD587D0
8576EF5B4A94B001F198E0ADA68E4A12569BB09A57D05DE428708C446C51F462
B92672A807F216E2009FFE57F6CB0CB72BC26EF0ECDD2D39034256883975893E
1B15A65303D1A326CFA20274FB619B0F4A87D8D42B5436872B5C017F364C4030
648BC31DB1D2E5178B5D9C62FCED51BD2DFA3087A55E15E6BB75DA4C91319929
A193589D9BA89EF883AF78C36A391F17BC240CD8069D8039DA3FE521F8595AC0
7D7CD353D9A617C7C2F4CE01DB006D5E8E7BC1E2A438F46A40AEB3B047C9AC18
69DAF2B4B6D9669DD6CB1D746912D4CFB5134DD46C874040B8B4DFC0DDDDF3EF
AB051A5C0EE7EFE008301D60083FB7E8BDA75A112D1D27E92466E664BF860BCF
C54F567DB1759D188BE786BEA67E148BF142DE60777063CF5413960F46F7517C
CFD8957FACA13DD18C1EA75B4C1FC380622AB54A020EE2840E81EA5246D35956
702C9EAED6CEE280BA2961683B841750017951B8E0E6CFE66CE1B4C401B6E1BF
9E9308107E3B17FB42838490E80AFCBB1340C523C7E247273704AF5EFA00CEF4
5E0D732902199C52E26368C631242A501B1BBFA4AB28522D7DDE76E26C270701
183E0047942C30D06D482547BEF946795C131C157285282CCA4F4E8429A667D7
8989898025EA873936EB69BC17539AFB4E5E6E11F519F5324E9DAE1176C7724C
EE2C70F3A203377F7D1E8907C95AF60AA4B210562480BA0819931393831F1DAF
C1C5B265E858850E6C6CF9E5CA28BA647584F5C1CB17A4674E779D50CD9F5479
8AC016FEBAA4BD6A933BBEACF252EC93F5C403C5A91AE20F1A22BBBC1B116654
7B306FD5D6037A698BEC695D0E254EE44384CDBF724CDF871B3A64CDFD3ACD21
F2431580556CCDCCF71D363EB5DBCDC679C4E3B64FF75E77E11FE5D50E811096
ED908048722EDE9EA11EDDB35A731BF732BBB6A26BED165AF16EF31942B8070D
31E6FC60F8C7961BA96362CA771E3DB9D9C9CDFC017BAA8166A39AD8117BF368
B91934BC6F0BB6BCEDDF24702BE0D79C81597D49BF022A2D851A47A2D14682A2
889BB0DE1E2E0D0646A3CB0E5628BF6C8D599A6445EDB1E5E9315B4AFC92C6FC
FDE3D7912A87B5A6E7F525BA77A3F888F990BAD4D1810A9046288D9C33E4071B
ED5A6EC51FD6C3C5A6F475A4B0FCE5CF6A6877852A8552E4A992CBCA5E1285AA
1067D470813C4EE003437193AD3F253F251647F3EFF443E83C75405847B9473E
7AAA91E2599B2F6F443D3D7BC3AFFC07005FB62AD3C3AEC312A96E832D92CB66
35071B65536AAF054BB9154531EBEECD5C8A5BC1850FEDF67F31D0331B736AFB
58B5778C60E4DF1E559AAD01585CC331588DE29FEFCF03915CB1C64141049219
FC028C5E47806AB267581833A721D174A65B51E3E8A909519A68BF5CFABB1475
EC41C9E6F20D2E8071551896F2BFD814D080BF399AE37F3F10203F5066E2D80E
F7C7866BA82D75D3984449A1F998C318A8FE36D0D5020E18A49627E4209305DD
002F50F36A89F0400BFAC3A533E44F41C8EA4BD8A1DC5BB14E21CA654D970958
EECCF947B5604163133EE4742916BEAE0D21F24A3E4D146DEBD198727EC9364A
E68381B4DD8789E1D35D4AE06A051107EA4D91822171A60B1C9951D8A457A4F1
CB344477D7A651613278F4C07247CE5236EB13B7F1E8A15AB9B0819C35691F90
F4D000126B2CE72AC322B4D962537889CF225B33816D85C91FB8489CDEE8BC22
3C4281DDCA5F7DA80BD5C075E7D61A9C9A71CD02986992B15F4CAD81E8CD4B2A
1E817D6DA3D81E94B79A2965D63753EA5B10491A203C9FE6F0C0A0522F8D6CB3
BFB57F14A00BCBA2861736B09A6A9740CA8BFEAB9B506088DB3CF99C78613AF6
2054AB8C1CCB197A7DF573B91E5481522C7E5449ED049CDF2CD10A166169DAC5
68906DFFBDB38CAEE9EB849CE52FF6C1DF6174295CB49AC66E224B32478EEF14
B427BAEE5A9EB6B7F7435B508C0FB63B6F6E5679D2432045BCBDFE961E34FAEA
F8703942158003E586C24BEFDB1660A6DF69CC7E1EB159606D2297BC192D3124
88ACA3A78A2BEF26EA4715E42D9D1AFFF7AACCB3BE5EF63B1C4E79B49A3B01A4
5E454A8F91807CE5E62A4B6761FE2A12AB35116BDCAE9AE9D984422D42820082
3D674B1893F0338488BDA988DE894EE7FD9B7283AF109382E0FFBA9018C10F93
8C627D21164292A62CDA15C49DC36F749242714C6BAEABF2259E1A12F791CF64
CF7BD79623962FB0309E69980035A3193B3E6C9DA14348B7A46DF7ADB6657DCE
F94F15723F5341538CC03D63132E388A6F34EC2C5212EC755FC262A6078F4DA3
35EFA4CA54911BC802A06B3A5633A435524B5C1B8CFA5229C6CA9C8BB7B08270
7B2B046E4209F4FEF9ED2417593C51061309D2F9A4742DCB0CF921F4F041822F
B77ABAEB31C82A8073EE674510EF30FD68CED7EE928D24ADD7FF8D9918C339A8
E8B41383665DB7E8380F66A410FF23883099831871EC2B5353AB2E5DF5C766CE
61958B5C07E80379887CB0264E9CDFB2CE6D95644EEDD4DD9074727F4FBD3C03
5BAEBD18239DABE7DCF549B35B619754547362FEF57A6FB752A972337CBCD0F8
2B44B4D6E4ECBEF48C6E2F39CBB2B53B18DF7BCC470317FFB83C801DB9D655AC
9551F10922392F1BD2A7AC29E6A06F7E9383DDE95F51E448FF6C91B34553F061
380CDC69EB0AFCE824D6275ABBA8F5B93733B9276E34B9E913923E011284E8FA
157E9DE83E8BAD62DB170F5D017C51EFE1B3C161E0965B220EF5104EFFE258C0
55F04E1EB3E85EC2F094AB06D427B5E1E7412B3369336A929A4813B0A01DF8F8
76EDCC4F384055FD37C5757260D1AEA7EEF2D2CBFFA77D88827236660260C19C
A8BAEBBC8FF8885E335A3E0F3980CE20FB2C68043EBD3CCF93BCCDD60190167B
E5425BEBFC580401E723102B6820248D8841176C4A8719DA2C75A3CE10FCC29E
DBE9205C3C0E3B5AF485AFF1AB405004CA0DEDFF110AD9468A0E41C0C83E8B80
7AB38A8553E4B5345123312D43AD2E836B912026680D97565FE4D1E216A9C768
A454647DB379C59CCC381CD2DE3DB70458D95772040A5D25C0640844690160FE
19DD066DDFCA49FD3906B7D32C787DE06908B026A46FD0EE22A88D9A1F1E0F81
552BD0795515FAD3F9122CFE1755F3530F8334C211D603F86004C9D4A7379ADD
8BB4A5C0D6E3D543E11290FBA9612CAF16B6918D1F4EC39F9FE57277BE17AB3E
C8F2C89647853487B44A57684985A6D16D469A20CE3D0401A7B165F5271B585D
F4F863029A8E6564460CBE4D5EE06C24C4F502E4EB6023998BD1C3166B2121ED
6639F9981B91DCDA1170FE1A17F6DC9EA1ACE49BE65A86B265EACB68F4588F0A
756257A7BCB631091594C80B02ECADEDC487C429496930A2719C50A0F5F54B21
DD7097DCBDB747D975077B37CF09EDF1F72E89E0F168D4D12950FA0B17EBE7E6
76C5E99F047A2FA549EB52152BB04BF5A3E95CECEA846B5E158A504469FB0C77
BE269DE3B2C0C46E879C36143840EC16F663B238CB32649C98597DDCDE8DDFBD
D70EF02E745357C4DD727E406FC07C39CE6E1DC83F0927DD241E10AD2381F2E7
6E8EED63F5281ED9CE60832DC567F8D7F2C6FE300FCD6A7C246D47F42E318860
8F068A7F00F2385A1F298F0A72A0EB1FBE7B70C8CE0AE57426572795B0826AC7
BAF4DA73458BDA9F31F188D5BDBEAF62F00E36C576FD9C1863ECE4DDE11AA360
4E2022AFC909284A4D43B5CBC91BF599FA98E9FC6346773531445FA23A4A39E9
8D98E3079A8BC565D2CEB7E3B896593D720DBF66CDB26E63798452CD70A67A06
DC1EB3F2B3C58FBD1B8C3709864052D630EBD5471DE274B7485EBFD009F8EB5C
C90E32F2ED5428ACD8ADA7B3025203AAB593E649A4BCEDA329854114EFAE04EC
52C52383F18AC63FA2FBEA7BB5AC20FFEB5D377D3EC454B9E8E4E4B789738723
4F730A1D2BE3E2CCE0AB011371A1F3477648500238C40EDAC04F04F5BEEDA5BF
150E373526CF55A76CC97FA47FFDD7D892E217DEF714A1468207592BFCA2FFBB
4B083155753E239265CA40D2F1CEC1E150F553908DFCEAE061855719DF9D1087
96310B1E33D5B6A764A8BF95474A18AA51CBFB04831224409FDD3819C98C395D
D7C3AD05DC5ED1B388F9B4BA21DAAB34F2A1CD801662934D7876C663B79E1A81
4A69DEA53837CF42F98ECC48772B99FBBA9D68F363C87D930A53702E62937C18
838A430C60992C0D5CC50F3813821B58BE53678574253555AAC69C4F5FDA21D1
E0DC65952A0F1382E9F2913A745245CB6AA618D8F66D60B667F046F959CF3B5C
3CCAAE1E43F31B506CF77D970FC42CCA8339782ACB8A908C5E7CE698479ABD17
3B9546E17BB82A56592F27FC27F1D49D5FF4BBC0E1623180793AE76F97F06F46
9C78589FDB9EC33A8371EC60CA1EC0C9B8EF229E16DE8D008A4CCCBC317B47BE
42354627E9EB758203021BD7214C2234AD81C620ED2A12432CB1FB464235369E
B96E6A51C18E0BC4346921EA3A8BE3B6876B691C951F04D6B0D0E599445910CC
42F926DD71C9A1DF3FF09EBE614D4BFA8B7DAA0AEB340D42110B7CBF4553729E
6D6C8ACF2C6986A41EF5F57E13555656242DE123E356C1A83904F00C6F8129E3
47C6489FD4FC798ADB8C6E6F1C924FFD9E94B76F6EB9D89B157A3F26BEA915F5
FDF132BC70894EDD4B14385F5BF95ECC01C22DF26CBA689815AB3FEB37E78106
CA0A3441735AAC9EB49CCD5E4E10280177392F60E826BC6C58F3065D9E77A3EB
F78CCCCA37FDAE1C496B5D0E7C1D53E0B769053BED7A98DB31F78C17CB202849
141A1F5FC0C086DF025BD411AF8810A5EF7511324A8C312CBD99F9FC9ED41C01
2CDEFB72D6C7833BFD97782599BF53A5E98877AEBB4F2B057B22A80868C39500
AAA7F469E6533983CDB9C1772CA119ECEBC0A8C926EBE5C0826541C257638711
E28C333FDBD8BA603145A82BD558AACBE2337E87EEA5DC720C53EA4125492581
0A365A9D8E21D9FD21944D8BD1E10A52F77EA48CC9E05D7B24FADC2B172D329D
0064066026BA343B7466E98BA573A3EEA5967F58691C47B09CEBE352FF40D8D8
3B669E321E9A9D8D237C0D95B8D5FF033724D1B03703915F269B7B231F5D9B1F
61DF7CB03421C5F46673C7A543ABB1E059247E276E206CB00BED125C8F78A3C5
7A93757530AF7AD352563063A1A6B764F66CE61D11C2F422BD2367DE24BBAF62
15F77F00081A0C911F1EE848F1BE0BBC7D58A92835845BC1E5EDBF76871F1F34
DF73A1E523C17A201E21DB85365DD8B855E4BDA6A34B1DB3434E6E1A478D5C2A
0D08CB39DA7D5F522A4ED633EF47320BFF2C61922E062712EE9865390B19A9E6
808244C324849F2C6234B253A36D82E0B00686B0E8BFE3F4A80BDCD0AC69A34B
5F54605818FC34559A4AD68EAC4326693ADFE0B80737B824C8AC23378EA0DF75
BE56AF47FF23B7CF3F71B4C23DC40447A2D21270DD055EA707AD5384782ED035
D3527D67762027FF52096CC941F47D9863C49275B1BA401B7C66DE659436405B
1F8692E1E8CBCF3504E6F49D4494A93081D9EDC3E6F33C0CBDFA4AAB1373847C
D9F7E078D1DA94B7D89BD873CFBC936787F84DA0DD962E131EC9B9463386118A
1021A24A7204007DD83EA949D129C90A05B4082DC1A02EA0E2E87060FC7E3919
C251B7AF1B248BDF58FDD0FE2A25155E5E9AFA5545C82A4172AD5A4A4D0E8CED
A9F2CB3699402576CBDF6F0AFEDEA902493E1600B69EAF1217B9DF2607B03971
60B7048439DDCC075F1566878834A1E4AB49B80D2E138C39B249BEABBC2A5CD7
E1AEF2CC12A569BA7BA59C02049A8D04604E06B119CA0AA3E4C8A34CAB0C691B
6AC03EEDBF79D292E3B0AFD624E645E212ADA620A07CA27E1DEBA2AF93A4B40C
506C136E5A5F56AEA9C6C4D28960B65460612755143BDCEFDF9812CB59F95F25
C76E0550BBAA8BE79AA7B72000C7B2DAFF6236CD773386E362EC792B70CC673F
AFA4504EEC448C29A8F93B36FA63BA313F63B23C8F791B16AEDF904C7D4395BF
211547456696F9956D0DF3FC71E71DDFD7EB126901EF35FB6F71300BBCAF7145
561770BFFC22E3411E5E40FF245992A0EC3227CAC336C145CC25F858E34B6D27
E13A4E773B8D621B2363D66FCE75148C516079A8DD6A1D6984C65E12F2561829
8B5452FCE11000D9D00C7B33AAC360A11E9F5F226CA341317DD1752DF6AF33E5
A6F2CDE17D845A3706D05892B7C865179B3FAB830E1EAAC293AE37EE0993D38E
EDF60D5BDE68CE1AE6340946D23E446DA0FBEB5F020C80474004DFB99E92F80B
74476129FD7EDEAC8A8D21FAB372F7296DAE71E5D90105651F3CD4CB937CE704
55E8F5A76C4D6EAB6157DFFF0128C29E7F9F5106E14E4F919BE1FA278AD38D40
743CF176A9C55F64C9B2FA04318C965AD2F0E56F9482B8AF9A3FFE6A603B1746
E061D30AF8E103F301AD9FF8FFCF4B8DD9CE727EBC632610C843955AD0B93F92
03462F95B302B8CFF733E37AC94ED7D68DAD6C1C9A9D92397F760A3704F53CA8
D4CE359AD5A80DC8A9A5AB7918FAB070E18406BEC009B663293E170F6D341B2B
DED5E5EAE49A38ABCF7A3AA69F6D456810F44C4701C1737E7C75F5191C5D2AFC
986B0A6C17CF08D885343D6DEF53574FC70B3CD1D2048FE03969E1351166857D
E5B2B016A4B47DCA203C6C6EE5F25042E10A7A659D9A45853C24DAE4C4384D6A
6C0B4E1A3B397E5DF9B7DF6566C86463A893BA45E0BAFCB1FB0EC7CE59CEBAD6
3471EBF5739689B9658F75B4746F0788B0EF1483DDD68969EFB6C828775EAEDA
73D25296691FB449D7037A698BEC695D0E254EE44384CDBF724CDF871D986438
DE54961B6568639F3DFAF6D164CB498F4A7ABE4CD698C68EF3919FE465EB9062
FD65FB576024A490149AEBBD1371F20C284307E54889EA74760E16926FC20B36
639C19685AB5068BB7842242BD3CEA3A0C38E38CCC733E40153608AFDA850C48
AB8977B7C0726022D0F92B5386C00F9F95D584C11CF6B22868DB73DDAC076246
8A09DE2E447E551D1193D670F151AA96F678ACEA7000319FC729609451258BDE
7360066362DB24465EFBADDE92FE06CD6A7C246D47F42E3188608F068A7F00F2
385A1E7A446F047B15A4A96B2772BA8BA179B0D1563E7E3399ADA7DAE4BF534F
C07180E277C771BBC84A300794A6ED2D55A4191C68077EE40752B4110D045085
2399414A072AE2A8860E05E535736EA7255D81C4838F3CCBDCFE66BFB12B8522
2C6861BDBCCBF5B17AA9F218A80D732FA6F1C3AADE109AE4E4DA535522CD9B1E
E58DA560AA745C2947C55E2E7F58AE2491A12D5DCAEDF18205F3952894329705
10D378B201B1891289EDAC7CB9EE10A94DE4E1DF085D4E288D406E4B0E11F5C5
32C2B13AB9BD39D51D0E1DE89B4A3C50F7958DB413233642797649EDFA1B1C81
1C776FF8EBCE0D53A21C8E060190C5C92AF27FFA02A1D58A1BEE2CB55B1913AE
262495021DAAB3FB6176BDE684494D57445A29FED7EB0264F510E49A7A767CD1
F5A9DD14965D4F6C75C9781CBDC39310DB3D81E0400F7760B486BF889E047CFB
A3D6D40B799900BC447BF29C537E3EFDED8FDAD5A1C050461CB2437CEB206044
35467531E8D19767C5D262CF576561EF160F9C4E5B75325CFF76F28A0599CED2
5CEBF5045681E258B8A0802733FAC63B177B5F9E61B01DA82F58B15D9FC6655E
413F7E2FA3CFDE3FE0B513A4F246286AA1F952E7530E4F5265C44D7FEDCCC54B
D68E304A15E7F6D575184906B60E480FE17BFBECA3EDD57C175260722F6590FA
00DD44D1FC937E379224B102901FAEB9730C937F42DC110F3C33BC4989F37790
D75E3678E540919B38AB628756A3A9B624BC0CAD5F9A61A44390FEAFE0A407C7
C2A6FB8D733A711ADB62E2DF8DDBC45322717D695D88B5B006FE2690D1260854
DD383BBB5EF22063BF890409AC9B2F72AB659190439BDB542D514B0E19C8C8A6
2B658D746C3A506C877013CB13F7DCBBAE111DC53486DD88983A5137BC0F5FEF
F0D8B9348FA3D0E65699D87A86B5EB25D0DA1296D380A2EB9F0658F924571B3F
927C3BC03587D5EA7432A5C3A8B98785AE2FAF843CEBE9DA52BC07AC8F6F9890
82C5BB4F9475D367D0A9D872F63C27A30FF0D63080763BA9FF603C0856F6621F
ADA38D16F8D9C646740F45113FAC5F2A34890C9CFEE354F7513183054A276E36
9450B29F11C7A900C15BBB49ABFAB9D06AB928675F682E569A982BF3D7681513
367BD4CEA57549296E29FFF84703B205F3871BB45A80D6F1D7F041119D977995
2DC775574016CF976F4B7557E22D72D68198BFE8BFD907826C4D180C16BEA622
2801E5F940C612023350EA736EE0E00B17DA99D460DAB705836ADF7D47808911
6335D1C7F9F0E4CEEABE1A66F0A7D6AE10FA00F3C3FC13AC0B59BE487B46B915
89D64E5EE5658F643489C813B9B6DE3896387E6CA16A2824498EC0053299691F
4E3739D686AAEB2B025779E5CDD456756E002AA828C424B94677EA2E35AED029
A5EF3D3C9FCE27CED659AA70FDA6FE7132D0CAD6B7B51706DD3D9048D3BD5412
C9B6D17D206F7034D0EA4F1FB73476024F87688EED668F9B6380CAE5E75DF3B8
B749E7052BFF9D02D7ECEA632E4A89ED435F4F843AEB0DE2D08746E18A70170D
9FCC4058803F4E5A9502A4B17DCA04C03766252AA25D2F099E8249EB0FCB7A33
0CC3B22F7D9367A56090C677C5C8A12EEBFEAFA07BA16EF99E0BF740D141DCD9
D94695A794C3D25E72689AF0FEB1DCE7E76E0F77536DBD7584B29AFCBF934A3E
47D3DEE0CFD98AA751E013AAD3DA21D7ED877508BE050D6526498840CB28487E
7CFE6B2468F762F67E44E9EB36DE004F999536E0B56D2A5C5F4426C7C6C8B385
8D791A37714A51675AA76FB3FB1F005D811F710C33852FFE6E63BAAFF30FE084
3CB3324D35A5650FFF12D06A00AA0A625ECC8FE09DB849CB9EB617017D1FA5EB
D83470905482FE17C25C6803B824511B433EE9617020606CAB0053880AFB3862
1DF50A9EB1FE48534EE8DCC431D7E08DAAD7926D8FF982BE5C852B88B9753D80
48B5FC519246EB2A3A3635DF42051B37FCB9EF755BC8B57706274A541BFEF910
6F8D1F13254D88A0DAD945ABBB955936C1020E6BB09F5A1E9E5D12C744D657E2
F00AF64B9C3747F5C38A0B51A487BA9923561D920F0EC1198E32511F945E1172
87AD86E517267E421D300186D00DC33064E82B283AA46D876F0DD9AE8C10E280
9CFAFB8D48D04F98492972699B5667C0D2D206F47859A5A86EFC9BDF91470F1F
504644EE43EDBB75AD763F07315C059914FB500071536523BE6C9EBAC734814D
D8A6500F0EE7373A181DF08FEBA8B94B3D45EC6E217C2315012BE138F999FAEB
67846EAE8AB952D3D3C859656F275A7FFF590D07C424A61807A4AEBFA4CECE1A
F8B24E5709FC09EE6641F8ACBE4E61CCBF0B7CDCE176744A59E2EF27FBB5953B
97C01E5F213E9FC46236970BB1F8E299D348F0636EF9728BA93F5D369FE10A0E
27F605C08029C34410449EF06596814E0213A1A73B1F27C4A264DCFFBEC0A1C1
8F262048EC8496EC77AAEDADAD6425B34888854ED2B3F25E70722B48F386A004
CC1B29F0742C9C2526A57F67AB6C1EF1D03C5616716B1A31A84B1EC23896327B
AB77EA2EB1505DF76ED451CDF3E9D4902C2219481F2E2E4718FCA2A1DAA2649D
E897D89D4D62B260CB91C49ED918419931FDA3ECF14ACCEBCACFEDCC834FEEC5
B1894E5384979966F496FEA5CCA2D52C0912CBF14A1982227AB214371C060C93
83278A263BE6CB6B1A9EB6DD1A51C4EF984A5788E95260E9CEB3CA09DD7D96F1
0775089CF00EFCB848EB837C6B3320CEC51F7580BEF1383BE9FA57D0C5E7B2B3
3C7C987AC933A6FC12219301804DEC24F97CDBEA0D060AF2E43D7F651EB0F7BF
103F2741C4DCA2EF841A7672981048ED810D3761255E3BB4B46EA9F08A64504C
AB2EEC3DDF923F9D1CEAFD1C2F8C37B07C368C5B533ABA0716C85EA49307D5CE
2096CB1EF3BC0CB008421D1582EA277C121CBB619C8036F6BE8AE71EDBFAD15C
24E79ECBF597D624415BF588FBA7ADCD69036B05706661604092FE54B6218687
8ABAD0E20B2DC4557602FE6F058A6045905D8102151887833ED8F5A2349BBA30
55D420FB6395DB724E0ECF8068288110372216AA989B5706214E4129D028BA94
416BDF5550CD89493566963C1093DCC88C63FC4DDFA1F6E0D1EDD66DF2D06351
10D9B4B6D800B11E60BEAF783E7045D5335C9B9D812562633026395B7D816824
14A6D1466946032AD3B660F068F0B1623B6FE6302ACAAABC73EF5F44DE6070E8
E4AF63767FF352DE28FB8FEA0015CC28BA9335A59311646191035B38C143355A
ED03337DEDA21A5BB90DAB18D604CB45B202279E15456C72C9D5D0A44F2547C8
32BA3D9918FDE3D552944258F3184E28421EFBF0F6600EFA1E7D0E52E87A8EB3
24726265816EDBA8EF142D2940FCF6BAF111F20FFDA5E4756A2D4B952A209C4A
54244D0B32FA23DE4635371F2AA523BA4ADE325CE7E648920DF308FF9BF1013E
1D95552BF9F91C7EBE72EA2215CC172CCBD4D963F17525A757B78588BABE77F0
3FB48BC437CCF9E0C77CDBF20E2551C68B0014E10C9129397BE6C89792E04628
25732ADAF5F725A7382E085872CD090E000940346C9C068DB7679EE26959EAA2
321EC5A5C7580433244432168A87BC4F8DF47DC43D57C92E72185C6772A7B3B8
7DF0EFD6053AEC9EE2CFAD51447F0D660BF7CFF7EBC4ABAA311B84F4DC471ED6
488AA6852C6281BB86B01CAF92656D1F24596D7698447A930B242D46C1B7A4C5
6A787BEC91A0BDA72818A9EFFA6C6118B3347A55A4677F37FF8648B9833BE619
75461263C38A40D48BA60FFD2FF24E5A17F6B50934F18B5DFA76D3B85160322A
1C7DCE2D5034B587977946314C2FD586F1FE0E55AB74EAB205F6A3679EAB6B2D
C338D7D3A0EAB2C7A5279B75E85F2D63923B5243BEF03C87A087F25AB3C957DA
8D64BFBA40A8A188E09D80FCB5507AD7C0D6BC89989AD30BC818E9D9024D277B
1167C3FC47A4BDF1432401C80A978D6930A3B76EC9B4E80F6AAB458F2B8DAFB7
983BF339540A8D8280F3576CDCD4F2140CF94C96DA873C9E50D108A802E99C29
AB0C3AA217661514A11AC57CA5CA1F007EF0DD742B5EE926439460A47473343C
E6AB712C7B5911E92BC411461B7DE0705EB034EB0EF5192D8DCA2DB6F27277EF
893E1D3DF6BA5601CEB6D079BA4234B00B60CCEB075B7A849768E3AF8E18EC31
EF128F56C4BECFBF3630C901B119FD2A9E94E2DD99CF4DAD69033E49819CCC93
66AFE79A48A3BCA95DB66E5D14FE0C6301BF106AC063E2B8EEA19EC3ADE5245D
D627628FF4508A9740C38207AF9F7F3A479B0D3A6A587952E2FD4B41E94F7092
710495D7A30239E7E76EFA9CA18600157D93FCBB73EB127855B8849431DA4E0D
14DE737964EB1A9126E50FB5802B90950DE333A44434D9D4ABC65D4337B601F3
595872E08AD9C9861BED8052C2A15B815D843C96ED631D3368BB9DCA70E4532C
75592285E69B9A7B0CA969F129F9F25D2E51334FBEB09A86A8BB5EAB37D6E73B
29CBC79905CF788D487419F424BCA9D4FF873553212321F22089610C1B2AFEE4
3DEC56F2A44A5936BB53A39AD043C288D4E1CC5CC9BF1C923D12D566927F29AB
2440F3BBBE0793A59337DFE17FB35E4F90D8633963CDFC7FD977DB574DEA866B
C59F91EFCD0EDBD27BACD498E657233938E70C508D92BBDABDA7B5DF31D6F0E4
D3096CB0367CAFA491ABF413D2A231F56B3B2C28F5D5CBFE8F04DAD394CB6AF7
7AC73425FD0B0E5186F6949A70C40B3E6AAB5B0440DB6E1C66B49900B524A3A4
42C7E50DB41D6E44E566747AA1161B897427CF03B3DAC57CDCE72AC77646673A
424BDC1C183E4E34509609358C89EF5E5DBF5866A6BC64FFFAAF4C02C3FFB88E
C11A22AC92CB3DCB94B3FAC9505DAA7CB6AF6E020D57C3CD6F8BA50903FF2559
62C8A31E3489A41BB113F7AC689928D1F3F65A670DC206C11037DDFAB2469E14
9CFD53BC0F5C1F111B48BE82B67AC7FCC9878D2F97D0E3E98DD466CCB4EEC3E1
642A87AB7757400060824D13F796523BE4CA78D9479BED438107FBE1498474B7
257C1424E21E3C4B3C6CEC1EC7D2538BDF275489D47DC372C0C3A47ECC297053
DE39C8659847B7222CFE55972BD5CAE08A508D3FA9DFF9C763BB08532298F7E3
8DFED4D2EC6EAC821F837228B67AFA7044CA4343CA6955DA648E1F601A54550F
0D38C763BAB61634226592D31C2664D4141978F4FFD42FB9A50C8F2CE66BE6CE
692A019E67211BB1BC861439BFAEF9FCD67CD74CC1B4FC5179E0EC4E14F0C4CE
E70AF06AB314430218BBF93A5C7A8B05E1024F88D43D58C91D93264B8AFF7388
B582E42CC97637C58553CFCFCD20E396906C60472E2D6422552ABA520F093DA6
E95CC673A83031AE88A396A6FC160F9489174F2A04026183FBE670C413F2220B
FF50B5E1D64B13C5AA8FD42030FA93E960E29DC1C4AE0033B29A63B14C43FA8A
D33C0598C71A0FB65583632A91F4A5DEB671999343E273655FF9FE426042DA27
B7823061F942DC4B19C06DC8888C4E97AEF75F7E8BA544210C88EBBAB51C70F0
6CC5784703B910C3F9F118D7D79CC11905173C8969AC4411056192A60FE20D28
C82E35E591AAFD031EBCA3EBE8FAA09A91225B462CDCD606B4ED1A1B7D1098E4
76A619DAABFFBD514985F0451CE062F47FB4D8D9034DC5D7019EC8C6A5E352C6
081C7499C62B1B92480E596306020FF1E0A4AA9EEED46E8871BD8FCABAABE7D7
09200C3DFB72734534F0ADC5EADD12659B3770745B774D879EBFEA1243E50DBE
5DA38D700443A638FB7F35261F2A0904DD33C105A2B1B20403BDAAD118AD8EF4
0863DD4D2CAFCCFC96A35076C55B3B43450FC729D3FBBE7645CC7A17711563E7
6FA705F5AEB552A831BB1B0CB9F490B4E79E7E0378BB965108D3306F409772EA
E15EC60877E8DF5BFF72ED4BDC21F1206CBD8F624062CDF0491AD6C66659BAB7
15BAAAF85F128280E2DC1BC050537F9643D44B6981772E8546A6D79EFC003893
60F7E5E1ED9200E4DDC04356EC3F597BE5486D456861089BD2D9F0DF9A7BBFFF
827F1AB8ADEBE5B0A6379A1444C694260A57811FFEDA59AE22FB051832A9E906
58CC1B98D9EA0C80C2FC6409864B97649DD10C5D1222160B141628736AA59280
99348B52096CC941F47D98621CA1FC2FA72C764E0B6B9844988AC0ACC3842F31
D833D99C6C0C53FC8948D0270DB2554069014225A0284986B2B9007A98439E99
57F7A37B7D14A14D7FDCFF805DCCAB3C6BF2DDC9869144FE6B917B0AF79F7293
0E2431DB2AA39F670AC917BF385B2235458BDF077449CCC13AC71070EEC7FAAB
2B6EAE8EDE6D193B018E80D2E471877E3735676304680BFAE4E53FB69EC8E85A
65307EFBE4201EC5F373EF1DEAC13702A4AA0F11F50EE109741E0AC7CBD73E75
1FF1AF3B210215EE0DBFCD1004BE8FC676225C5CF385FF18BCF6690415AE8728
23D8DDFFCCCF5E0C8885349C3A72C5F7B479782C00EC18B985878701474828FC
AF8907C43D36DCE606D8D89FAE426033708CF20D7DACDF043A43A294F4A7F0FA
C599672AC5FD5FB3C6C333C5E2345AA680CC0213F630DBB2199A8DC08CAA7A5F
C94AFD385E7B1A6A403CC958074186AF54C589BDBB6774A6DDC1862EB5B38EF1
E1B1C2903938C40AAE54D8490E78E92FC8C6A940CC2FC17C00E48CAA2412D7AB
DF4BCFC2C840176F61771358E825E51C022C024968A1B70B317C0B28750FA04F
4B6B420E0A98106AAF82CAD2455D7C0DD3BB0AB14C1568E5B5320F4DFAF2D8DD
F067ECA6EC89153C0424EE731057BE380A5046D33244DEE73BA7DE04D2CA5D0B
3B008AA088680D842118AAB0EB9D81DC42594A593F7CE93CB2EC075AA2B2742D
FF1897854320B2A000D677B346D32C7FD4C8A061B19B9F0C2B1C90D873DCC8B0
12180A701377DA6E135BF116DD8A23AD5145FCB8AB0F61860C49385416C63D3F
48556BC90EB8C41EEECA3540871409D659F775761A95E4EBA11CEC91556E07EB
4429AE711CC7E365325C0CA9CF9F633BC820D6A609AB466A423B4BC04437E39D
9D27360C8A8D8E8BB772EF73E44C8564F7BAF8E58752F5CEBDBCC7B0122CDFDF
5E871F7E1BDE85D292904417BE7864D78575FC61945B635A4FFBA31647583083
93BE7A2DD121ACAEA374515EA02F5067AA36406A379DD377CE757E5F349335FE
4AEE54992F1F12CECF94D098C7AB87FD0C0106F7A18F971379458F91CD3F83B8
40B2E72336283EB997E7D4D0E4F6D55FF114586FF56F82756E7E7E6A7D1D4D77
1AAF7FB0583016699A3FDC333B26080381352B13A32714643F7FF162F64ED659
62C52C7A22BF7AF3BC490D2488812B8AE52AF23E1144C8A2FA7EC9D9675B2F7E
4F60BF48C4AD00B46C36448FE2DB35CB45276DFB339097EF8B97E48110DC766F
03DBCC2EF01DEF4ED73A8A2F03FDE2A8944782C7325EE9F9CCD6A1C47D567256
5EBC80E448A229ECC2B23A97D080C264194C2A5F4166FC7D801F3D113D3C9E3B
5F3443AE9ED1A66E89653FB107D0B4E02DDE3893A8EB804F6A839EB265AE7FDE
1D48229160921D2B43CEEB6F55C2C95D99B515C85793315C73112C8257D55CD3
53CE27537484BE2DD2F221630E4728D08DDD74093B11589139B40C9E3BD4B91D
75BEB59268F0EAE6D6321BEC919B75ED0EBBCCB03EF5F13BB2C4F0EF5A35DCBD
4F6F195B123171A69B2D426181910E8EA5EBF6D1D45144AAFEDC471ED6488AA6
85D04243BF460051DA59D561AE8321871A09D6ECAED6F3418A66D35D6940A3FB
53D03F7BA382A902F008AB5B92AC6BF1104B2CC456431D4307C021434CC2FDC3
5A4FDC88E365F40B9D576708B3141791CBD3C0F554AA2B59F454E3D427962D34
6C24B542B073708CB11EB869023129C967D3E495794B2EE283590950E67175C8
EA5084E4FED0637D79FC8F79C31585AB3DF8B104C43A87080E37D1D7305E7308
D2A3984297BFA81BA507DDFF5AC82153843C9C1041952C47391E4B981E01ECF6
8BFF50E3E0868FD3B65CB7080CB1307F13FBD30F58EF4947D6C248FA1D4E1E8D
2970129548FD57B239A73A60A299D026CD69A2FB035D3363EE470F4BDA28DDCB
25E08FDB4218F9DC6DFC201FE269C07084D92842300CBA463409FA76943A9128
16EA4DA67BAF9D06065D2034DDAE9C7B38F502A82A0D35F24B66D6EA6FA8BFE3
B7659B13AEA47ADA41BBA4474B7611AA8BE21919AE8AE31B66D8C1D7E8DA1574
8622A9704B65174343E4D41F7ADD8F6158211E3CBB761BA33F8B513C2FC6851A
8A15D6C711661FCFBA69B4863BA2A9666A222A356C21DAA8A94A9E897AD6D3E3
AF8E18EC31EF128CC9D0D2156928CFC8EE865A632AB4A611CAD82809B7222922
7BC5A6641770F5E9F75C572675AE6E69E7AE3761488FDC8BCB33A871F20ABC9D
D9856F0F017B31F3FEC61E2242313A0F3177B83C5CC1D9C87E1F988701ADD7AF
275D452D3B835ABC68EE4F0A91D2B720BB2C5A1C96722E3191A97827D2AF45C8
379364325DD8DC1AE11DD1EDE12B6B656E6E42B9B45BFA74F9B6F290563B29CF
738456B6ACE2C4F9468FF28C9352528F4D441CB0DAFCA1059833271DC2676914
DB811A127C9EEB6C56E9C9C32E88169E618E6B2A23E0D05AA412E79C08908A00
30F94AEB435C0C0C42BB0FFE66B16E44F3E824B277DEB9489E7B9E21FAEDEC44
A18B2B25A319A90EC4818A26F29926635E596B8AB299D8798336331488F2FDDB
E0E3A71427AFCAF15E06209BCD8702AABEA33E8692ED1BAA9F704DE8FC7FCFF1
5F02AF05BE0EC725003E6D283D4260791FBA9D012360110F4C96901E634981F7
4FE0DFCE6AA633D4EAE5F2AB5F1EC097F8126723698234387F898E395FDD62F9
8D8CAAECD64C7D8468DA6DCF2767A7358ACB995358F9CEAFE7D68C9CEFE49C4D
D9745142652E07DE901D7508E17C81A5199A57BA3B720C1693D02E3E93A1198D
FA11BA9F47B3A2A57AEC5937A993CD7AF781434C3470BB2538098BD30B3B2B19
021C3D28348A240822B09595E2AD5F5C40D9F7A698167CC50756263573E5F5A4
E75291944F48FF517FB5549E81935E5EBD26E5739A92D2E8FEF9BA9485AD8875
8AC01C1C98B56A814CE885C4A4C8998AA0AD6282D8DCA42149633DF4B4C4E606
A3B47E119413DD9556FF4172F1B18271FC2437AB0D82E2378546386B61903D79
00A9523935A532E49BE7C58E4F62B13EE283CC58825C1351394603F6F20B49E1
52C96454AB2ECB6CAE95DCF479AA36C75B7DA006E98AC3BA4C5981E1A8B10E50
924161C2435EBFC75BA114EE0589DB373F4DBCADFF81C58222CF1C4DC905B343
BB72416574240E31C2043CC5BF1502696A2FC6C88A96AA853B4D07B9843C0E20
8422EEDC232CA6A04E928004BD90C2FCDFB6DD8957BC6972FED0B13267168AE0
533F2B554DE764FFA72EFEAA2980A85D103528A79957F00BF8849A73B9D49874
E4557C74966B87AF047756C808A2F5B7E88AA355F27B389B4270A9035327144B
153EA731C192BCAB45747B3CB5F98EC275B386B6404227871F473493DBF24A4D
4A888092EB4399763A3856680B33D05315CBA71F0A4544FADCBF28E0049FBF8E
F39ACC5A5E1947A1A80642E73431449159694228F4D66A876D5D8356EDE74869
83FCC401956CFF71FF5FB18DB0AB0F5DDF2BD2DFA545A711B2F499B557828677
57037A6C401D32A63CB6F5B0D94FCD701965DB04E06683B43C8A3F696EAEA29D
A0B8D9285D2CF59118472AF2627F31E8858BFE5F39EDAC2AEB8E64D3EA95FA22
EB08C999AFEDE6F666CE403920F5CCA31379FDA9F7BFA82EEEA150C679F3A87C
8E20E9B12FEC289014EE212384E14B2BD9C86728DE56F30FFBB585EE92EA73E4
06F3A4CBCB3537C57C4D9349C6828767C6527835848FBD6FD2D909977882A9A1
E80EFBD82374FC790A98BB8F77D161F6228107C92BBA3269401BF53E60BE416F
2C075B87AEF6FEEFA202CD12E2EBBBFED6E1007B75DDD189C4EF993066824B48
7D18EA9DA5ED6086436A60F917082FE8C18566925D0D2E77FB4ED01809E0CFB4
8BD830583A4E975A340EFDA6FF45D81E5DCCB9C26B9FF9D189685A039EA9BA85
7C26578C8D3650A6ED32411F26B713AC9D861C5D5F0BC58BC526CBED223A031B
B54AC9652BBBA98152D3CCD67BFACA1F6DA762470D545CE6B8DE2C89741417E5
C0A79444E197B321BB8116BBC6FC1C6B6C9EAAE2911387A78C1E733A92612D24
CE5293AB3E7C402D369B8204ADB68C08CC711803F3ED11BC25491687DED0ADFA
2D070CC9CC653EB0773BED8F883DC5E7C0AE5E211CCB1432E5CA1C359295C7D2
9682D2344AFD157BFE5CBB19CBC989C33D4401E8712F86558E1180EBBB5EA1AD
97BF1300919056B626B50E3BF19262058C5A0D5FD0891CF889ECDBF86E56729E
97172263A0185BC62236FF9E4827B97B32E0781FC15DD3C3D5F4C1D71EBE3FAA
ABB6C688F7147DBCF8C113DA386BA760FAC102C3870220EB3399E9917CAA5683
408D3AFC33820081D04A294115CB01446379D93A84DA7DDE692830CEEF1340E8
345D6261D204B3F0A740C97A69752A384EF0E4CD4B7B85D77A7E551C67B59DA7
7AE6866D0B3D1A936B5EEE64CB07624CFC5AD7CDDFF524B69147E6E967043F91
62C399440E523D0D82D47326D14E817F04B9EDD97B6EDAE3658FD5337B621FC3
B5AD82F2D268E222FFBB57EB2DDC4D26973B53A629195E6180B4FD4920794F6F
F910D626A9235C76FC3010895BE4AFF551597F0B1CAF10C9CF3C549FE1ABE58B
C62936C06573ABCDD67AFB5751E3B95709C980669AE36B94EB8A5C1283D86938
F1F59326D6F5AD828A2BE2E60FD940A2A8BAC827C610872572B8F004142161A7
701192F6585586FC5DDAB14D19C2DEB4CF38B4F4FC0803BF6176B216B0548AF5
22549857D2124DE34AECE622C40AD2D349F0A99EE75CEDF13EC5C8BED012B6B7
84F740B8E0B360808C984DEC73EF5736CF165DFD6FA4ED3D2B15998D02304F1F
8BA19D607C566174111EDC5B77B6DA54B7C3CD219F24B8607A9391CA476A8F7E
AFB07FEC3BDE5F1BB47DCBB139964EF5F46A8B083D9DDCB8DE0FC9D66815E962
E8A8F95F922F3AE69167BE4476A860D205AE370E3B789EDD4D739A667D483A71
91F94693713CCA4EB3760ED1C51144D456F754928B26CDFD5008A5AE03F62B05
856D5DFD68209102FC39DEEB728CC5B35F80E6724C622C8E122864E708337372
2D99540F2059B9962A8F3702D484061414E1D3DDD9D701CB6E35A3B36903D802
0CD264985A301AE48959C0ABC289CDE655EC5D586D483DA69EA9703100C8DA1A
4DF6C8B7B019CC31279CD27DDA52E348CDDE98E22CFB40A99FE068305C740DD1
3E70A4B7BE82E44F7113FD6D52BEC23C21EC0C0FDE2375719E962D5246B1E570
5F6DB7EF310F0BE1B88E80F8DFB0CEC4646BF4554E0BAA2290B2082F996026AD
C420C676AD5976200BB2B7658DF687C9A775D9EA3C72674A561939FD21A2D964
D57B60C7293CF362A457B088E51440ACAF6ED2263470F82264386ED3307C69F7
B4EB8C14B2A4EE6C7718FEB2310B9E3451EBD233B878CBBC30EB08B9D150950E
359ED8E43DFC3C6C5837DE85B0278025522F64B5460DE3315C9285436E5868E7
56EFA26237F1F338818259AFC27933D28585B6D59163EDAE458E91E7EA641EA3
883F34367B4DD87672765FDBC026E044AA92004E8D5B1BFE8246C8E2F135AF77
320C9E1945C1B974221A1114D88E20C8B2D3BEB161A038DEE86FDFC6E4C42D36
4B33E38BE39942A1BB608700703AF1711C21699DEF2D24FE446CB294E9511AA1
C5BAFFD1B11E93F60FCF8621B6EE79EE107C0BCB9928307ABC049C8004E21B98
FFCCF59962034819F2B5B36DE73A691A3166DB4D1DECF6828403089ABCC46C2C
6849606988C3B7F11476BD78B05DEB15F229C7D109D80B8B72A6365A4A9445A7
1FC40B81E8D4CDFFD54B90CF0768E577C0CB33BE59FE620068BB46FC559C4B24
9611BEAEE18054D0AFCA6700C789EF8C63BBDD5AA149B309E054C38A60F2ED25
1200C8C3FD1D2D3013077E2A482EB2B51138DE5234A93A0FDB1AE200E2F463B1
C4A0ED65F785A518971A3BA19E96D9CC27D31EC24F3C98E3550096427D9257AA
3E29AD84CEE2D6607934E04BCFA39E37833AFDB4BBADD7B71EA7817D5D7C4A34
04EA48CF8E163ECC9A2615772E0F6AD9EA30214411A8EC22E6D306A76C391F97
59A883FC30947DAF090BF54FD4E7B01311521458871B0C8F2A6CE007A966F613
45D046731EAECC593F3CD76CB9C4B05680565A68B7581892E9EE86C9E7AF0602
B0EC327DAD84F9EB5C9C2E14AB079BA8A6AA22304EF113B8A50469087738C879
87C4699C4A56FC37A0CF7D9AE0D0933CC49558A514BA3CB40E8610E6046812CE
43B02B9A8F4A127E7C98CF0C08878610D07AB147CEB89735647EE159434E3AF6
588F47FF97242EB8A3F72A50F8C443BB34DE842F3EBDE357648BB47B9DD735E5
084E8F8E2DAB2C25D461E2DBAFA96610EAE8D89C2ACC48BC4377CC1BC095304C
D782CFA3FC106438C33FECDA777222349B653BB04139673BB3B8D170F0987AC7
C9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3119D1F8B8BF6D1B7A7404D8335
70846D0D8F4F0C823FEE560547A482270692E476E281ACC1CB0C838B22BD99D4
E3F27B2DA579A9A3183EBB8295592BE5AC166A7C19EA59F3504C10E368E56708
EFFEB57E167D086E98DD49D77B928F1470EA702423E369484A4945CE4C88B96A
841BA76536B62D20E752B76BADF8AA33822F0F0638423D6ADE78AC5156763DCB
4ED134DD502A5A78CE2A22F721969C7BB7463204E96F011EE6CA8DB2259528A3
55E9F44D54A2CAB96E83FF24A58FB06B0CDE19AC9641BD4BF722D8207FD68296
B4ABB049ECEC181FEE5B3E8BFED17A1861AE0DEBBC21E58DD7358A8F6299B5F7
7AA74682C7052CA4B6D9562B4D49DEDAF13B1FAEA9797A5D3C885CB567895A10
EDB5A60F2B635A8F0188A64E4D267D5172C8C7D6DD63223EFC56D5FA82C1822A
6309947FA22DA76351A047D8D0C0A6E8D9DF424556BDEB6D6983F522BCDE9EB6
4CA74A512741C74B677C957055537C7A2BB3033C7892D7D9C92B4645F859D230
714DB9DD0DE8CDB7E571B63B937AB9941060CF072D79559B370343418EC50B22
1A923B06DEF6BD008C5C72B4B1928B33BF94BA312BEBD442DD6FFDC8B1DC800D
D6F54CAEE682972C2B75516B35F0072DCABF52B08B66FBB9B9F62E3A3E951935
FDC18090714B60E3CC50851A3AF523A60202B4062B5C8A4F3AF53C72678BB307
D1C947B7C328FDC32A3C909DD219D4A25FEB3E43332476F110D3A249AD283F53
87224270F8133FA299289B273741909A11A824C2BA80DD28426CB762BA1573E6
C3E403263BE72E4B676F7A211F72225DB3DB146BDB01C7EB176C4CFF5899A088
4293BDEB690DC928A68EFFBD0C10851766E398C58FF8074C8E860FE132AC46A5
AA4DD337DC62E7D6C9C2FE76B83BDDB2CEF6E05700E98E5820452E57CB0EC901
3F7EA391C8922ED288DA4ED0C8166675118AEF12C035039A8AA12C719C0339F7
66BE6275511BFE13350E6C724CD682DC94D4A705033B67E3AEF408650D5888E3
4CD8B6827760CEF6C13C29E60CC460A6986CACA2814E8C1E2D29FE9DB5031D51
690AE9C6196761C86E0968630CA5D75DEF45ED3C627AB7DE0588C855D2EBB1BF
0C8A1A90C4F19A0999B9409541829FF0C57C6D152AAAE8CCD968B51C9DE7FC22
828F47702D604C36D87E9902DC2AD5AD007C841022DC5EC53C2689DC3FD77A46
8D0DB62647CA374188C7952E6E83292D3109FD1EB543B1ED66F92F3918E3294F
FD8A98B445A88C8F8CE8D01AA1F772DC7714B2792FB1B4E9EC4D19A913656E97
916BD51CB820B9211D2A3C6F39B1914DB7477F4ACE3E01C310717FD8D10B0517
6B2E49794DB93BAC55016AE06595134739401B0D8ACDA775BA1278CADE0EE489
13BB0C4CB09F2124ED1AD4B59F7CA5F20E8274E11299E7A4D9E7D85398B981C0
B74FC0FFFC78CC9EADC43DC595630A49D28FE834C3E671B402F789CC1936E72F
E16213BC2778963960567849E1F6FAA1EA9E612442313A0F3177B83C5CC1D9C8
7E1F988701ADD7AE732D6B7A8C8FC175DC6FD9A0DD7BD39016B7D3FA7B591B3C
C9A67B49C13096B923BB84E70ACA874D9A0C4A7D797D0B0D80F2197A5002738F
99176AEF34CA6EA3F43E1A25202A1D7A627C3FE5D8F062861664C25430764F8E
692EBF163E132F12D947C06A3B2080FF0E02960BAB1D7CAA00EAC0104FAAB959
A85C4B3F5BD9EE970A2FA1D9D3707D84206A483AC63965AE1E09627186E9F40D
F393CAF0F0AA8A81AB02413C8563AEE4F2810BDF9DB93C5466961AB212A8520D
B33E4356651C251B9EB5A26DEF9EFA45B44CC4377562BCFA82A7EC4064F5CB05
6A88A3E2D03EADC0DB4C783F1C592BF8664AB4747C54ADB455C16A594B6B8008
7BA2A10D9E01AACBCFDAAAE5494EAC39664C5D453FE330202D64F17F55E9E585
85DB51674E88FC0DF73AA47356328D78ACBC8AE74967B9CAB75B24F70590413C
9DDE2C8926A3FD7C28917CFB4D3B4587CBF59A38C4418DC3D035EA2C9A685A4C
4D38AF1752A6547B2F7F77A71914FF669B8B11F1B3F3B1EF24974DD6824A8E33
5AB7E6764A00C8B9D7D6BA0BDFB13866FDEF0C1BE93B62AC49659CEBEEF114F6
0F85935BDBDDA3362A11E0BF7854BF4D13621BB032EF0F402ED81971E9FC729A
FC1E778A3C03844C5FF4820F0D260B7DEBA72FE89B64C4CCBA115B79C69E2840
8B8B5C5D7C8AC1E980689CA5BE15C3FA96CCBC14D7835669581477FBFD614700
D6BC3A1C4E266C105A31DCB6437AAA3C6A48124685C1174607759219141E8BE2
295869D7174EE46E606872014DBC28CC0103D4ED4BA86AAB8451DB683159A396
F4938C67AC4A506913B62766D8084A676F0C23AEC80E43EDEA957BCBD290A7CA
F0DD09E02F491652F7761416ED41A3C6041A21B868DF1653476531B36AC64585
51956CA08156AF9C33D3F192E24A317DD1752DF6AF33E5A6F2CDE17D845A3706
D05B223380A7553ECD27B328EA8481D053315553F3C5C3BDAEF642DE60777063
CF5413960F46F7517CCFD8957FA91A6DA273E39AA72250F7528842FC37D91B86
475F3CC24A56FBACD2586F3D71442DBE3042A47EBE4BA1FFB271B625647328F3
D39E0D60348BCEB447E7CB60046602A5C995A4DF574A6133A6099B5C0CE9BB94
91D966755448E09013E044CF57992A19A5650C8EDFE52A9575995E89C47DA0D4
4A66BD1F2931635AB6B6CD5047BF5B6F6AD5C590F524CE9ABCE9B5DFD6E935B1
D43771DF39AAD3E87C7F918CF298CE66E65983EA230EF2722AF3C11A75F21323
A781E14282982C1AD13479B6178D281CAA541FD7C4F61612DF8E6B72A5B8C1F7
2A3001FCD5BAAE8A4A45D417731121C2541984B98D3CBDE7CB0B654E730B78F7
36002341A65C2BFDC446E8217D40B13A5BCB2328A88E622B4C3138F2905030D0
66D54308EA22441A488B379587E81C3147DAD300C8BC5AC4B184E13F3ABA4A18
487B10878E9D800C0DF3F77E16E2F42FDC0A048D867C62E534D15F5484349BB9
FA1BA43F4592A98C8D2FFF3F7C0A84FB8D0F4A7EB91877BBDA711E73F6CF45F3
1613A24A30023BEA9A25683209736F4C3E149C1208CE99EBB4BDB19A68DC6FC7
40EE87B82AA6B136559500CBA6DB918224AFA3837F7F6E3F80A51EC039AF5DA5
8C53421D968C241C486AEFAD96DC75A84589BE79A66E6C29ACE5156971C30E22
6B391B3FB6E81F96156EBF5B7D624A8032161D54A462A9BCC8620BD6760B3187
0D69C4C15EEA09E1831354F7C4A4F8D43F1B814287AC06CC61F294AC1CD25B31
9DE2507075F4D89A6B610790FD82681B0435C7EA8C1A0A48D974EF81A92CBB0D
A163D9689FEE614F9556097D62031C6258A79BFBA973D6A218C80AF10042B24B
BBE788FD5184B177AFEB695F8C92EB33721DD3B41058551019C4E12738FCF523
1CB1CAC451E1FBE5F2A1566193E94596735D00151756F77E37143B2E58225D84
934141A0CA89692D1E504CFC53F55B75BDE37DFBFBE5DB1BFCC5AD4B2ED156C4
13AA29D0A8B7216F71B74675D120DE78814D3219D3210144A6E2C7BA186C05C7
83887B778BF1D02F32ECDF1DF6128A674FFC3FD89AE09FF322EB01B1222EF05E
C89BF702378D753D55E69D2099F8627118EF21DD5F4CF4110CF01F5E2F25344D
58D92BEBCE28B19717D107B1AA4C38913E75DE1B50C64747E1C99FB6B98A20C5
30C9BD04C451207B020BBBC7C633BAA6827DA4F97A8307C47400CCC6B3E51287
96310B1E33D5B6A764A8BF95474A18AA51CBF7CBF445B8CC39EADC00F42AAD7B
DCE1D80995284AE9284DEFE06966C4A23F3F49740365E82A7A293938440D2C6A
CBD88A4CBEFE5BD31C5B14B003F38EA1D7463ED695C6B4B4E7A62C4655FA5FF1
7B14F01B02C1A4E8BE81D4099D1C208B9FBE3BA7C43423D2AC31D5CD0BB4A2F7
91723C2FEAA0B6FB48FF3F261306DCA162D6FDD663FDD73F1821C3509B3ADA33
F96DE8440B8B6C0AEDFA196C68184D417C142C606D7E469C49D481A37B26BB52
D0538297A3E730DC24404E19769A52588647510A6DF3BED20AAF951DCFE26AFE
60BF1460A6781556AAC0654947793D3CE49CD8DE276E7DE8F9B84756A9DA5717
64BB1E29D7AE8217AC85B4A58279E7062BBA9FAE457A25E67407D800B810916A
7AEDB6553E0E712C5D131319C2B08B4B72DE1CEE8AD109E8EC94ECDA1235B6F4
69BE574E849F237ADA30D3C0E24400B49784EC409322D1CF9BFD2B37219A4361
0529BDFEDC780B76943F9F8DE5A46FCF3178AF9EBF10909E28222D2B3DEBD6D9
D9737432C9E65F92128162F42E585D42D25A7DCE3FC1B9FE3601F9E53B561CFB
5C004A289BF1E02E07486E9F22E0533791CF0EAE32CD4DDBAEE2F40653E13969
2FA4F05DCC367A9EC6EE5FB3A93AA01DF86760FA5C65BF53BF0E67CC04960E60
59F6BE26EBF8CE5452C6167A41D5D57DD7244A107009B163709687DF1748C90F
E49D2A8FC74B702CE191BB13A549FF726490CCC6109E6D709951694155C56EDE
2D9EA1C3C455D8E7D70A5C629D2750C25A31A8170CABC90CF6CCFC2B3A6B1B95
B2F2CEB5036675013A692E0B4E39C6955BE9ED8D0F033FB488ECF0ADD93E7E4B
F0548849ACCEE49E15DCFC537A774E8F036EA3BD1FB35B48F99663555F598E18
4CE235D436D37D31BCED986A271CFA580ED8B061E82530D793EEC3E5EFA20896
B346FCD7A74A779FD556341061CA3F2BE8EFA332637AEC878C220DC4A54277F5
5C9A2AA048D8FF185763DA65D56DB07DD00A952D10AE95CBAAB2029D54B35486
53CF8009E77FE92112B04580233972D92119549CBE53B0896667EC7271D48ABD
60567F307D6EC471F99B03CC7B5E8140DC0E47511D56F322DF0BBEAA28E83B5C
94175DFB9E11A2C0D4EA1E683384ADF7E6F8CF420D5467C22831775E342E8664
C40384A39274A30E5BA399910C1606DDE3119DCCFC56261706FE5DA56E84A194
7299D5B636ACE7B2E2EEF3999D38AD27AEFF1F1FA4FF43F5140ECE63FFF04DC4
3C3C595015F4298A144C62A039A19FE05DD9DE5A8CE52E360EFB5E0ECF810FFB
A9BDE380B680EE38C9659E3AC8CA5DF66DDC7933F828D3CF9ABC2827AB289174
22C2C2489D209D78E0A2FD3FA71C28EDFC157628BC52E56D3F05CA0DFF5AB1BA
1C0D6444AFF9AA7F78997BED40CCE32031FCFAE2737B412807F7C9E6494D0AB0
257F9DBAA518D132087207CE6B8FA74EB5300A4AD6F9452492138424CF9AA5EC
6E1FEF4FA9B659ACFFA97AF08EB506C6E114762B8C04F18C3A5E415C59C2EFAE
6A5790B47663621EA5489BDCAE29273EBC835E4BB8ACE7DBFD8FC696D5AC88C7
2D0D51ADE839CEE815E9A161B8F05EF20AC4697B7C33361DAA5BC1326E0442A0
6CA2597889C86AAB1C4A9FF82D072C28D2777B771AF5B44B016B77A118594BBA
0832D9740D1247156879C56FE0F226E528E555537A1D9121B64C683F59CE6C09
241C0CCD458F43D29D24565F9382BE8D3425F83CD72CEED5CA4BDA76318D45F4
4965C504426B78B1E8E23839753E86F8A3C4326C4CC8AF46927D9884C6427429
A45420A6D7EE7F92485F7A96B1680DE1502FE9A49E1CC5C66147D836CC459691
E4B601BF4CF835561F20C46E0B2C07F80C2F7EF6601BCD2E65DE7E7F20497A37
A9C183119AC3971F5154EB2ACEF536CAD38F1B9FE400DD5090816852D5C351BF
149C420A12647C7328F058F49A3F168E87C26CBE2780536366C2D5965E5E2A13
03E1863DB5C0366C514FA65C7E20AD7F34704BDAD97461F7C62EDA0EEB3ABB21
72018299690B8A014AF3BB404CDFC055DCC40A0E756D14434384B7F1848C10AC
BDAA850CE1BB3CA6CF7BB29A532112E71AD8B9DEE18931F138513D73F0E57366
B418D8A57B6DC3B2D45F1B833ACB504450A319373E109E0FE3C2CABDCD59F0BB
72A7CDD1B8D4BFCF8453FDDB57DBEFC8B5990C1FBFC9D486CA93905242CFF912
63BFB2FC4B5992EDB859A9F9A257A3AC2011FDA8E80FBBC279D19F58E627ABDD
1E3CF2D9BECCABBA85FACFD01D03D15CD64EB9FC993FE5487A91D1F37077B4FB
822A31B44463F025842B0F91F6E4CFC0BCF83F0843CD45DD2C22CC3F16CFB8F1
E022C56F8DF8BB86BC800492D890F2D157EEB9559C64259AB1F7B4D82AA4DCB2
4F0FAB733348510BA7EC60F70AD67BAE0530D34CCF749B6794B83227FD411773
B508B6F55D3CF74C9D41340D94EF88991A08601401F2EDB5838AE404809FBE96
6AA2ABFC79C72701941FC5F85C754D5186564F385618D6DFCF073A9FB64C898E
0F31125A5A20B4D7D14D3D9566429A84400F9AC9F012CCB510478ADDF98D6160
AD35D9B6EF3F9E772A9B4D56D67EBD087CD5BB28F00D1BF109D88CFBA928D5D4
80FAB01D268AF11128F3AFF6E339BBEF061E35C84506B293FED8AF1342C46596
A02A0DC2B9190D8079F4F6A23C2703BFFA016214B4263EDACEB33C7116499A55
9F621E3B7444D3EB2C6DF873174345CA5AA275D6048F7E70EEC5CB6DDD0CAE9A
59319F1FFF2183ED395A753557D3184EC4C6FAA9D8227519D42B1EE8B4CA1E5C
0D2E14060F99EB39B048A38D0D6B9CA127E665DB37DB06B3AA66D56EF6E61ACE
10293C52F6894CC2D620523FE203E5951D5FBD89E59CD09028352FDA10562E9C
77B328BA17A267859AD4C6FEA662C8D0AB3CB2864DF44D1F9EF635D1C2A2781A
246AC6496A5AE7A4F756E3B483CBB408196C668F5C1464CF0A081D484058DC97
224226E57AAED8CC2B4194EF9D879BB2E5DFB129D3631DC101D8AC8D8890C264
4234876F4CC9245C00AA9355FF0ABEA24087D0D7D53973CCFC0004A35F948D0D
FFB0718801C33F0BA16AEB1E2B2930DA146352D286574809AC52B014A1033E4E
6C5E6E764FDD50D417D95F96DD8766B61AC8AE084F91604F570E71EFB1BCD60B
87E9D6D2075A3EF22C104E3D046CBDB5C3C8D38EC410E34F9012669BA6DC63E0
2E61D3C82AF10F5ED86B5E9C8A28026666D5689E19C3E604F9FA1D0902DA5646
E775060D255078B1575D8C11F8AAE5481D3B55E34ACBF5F4CA68EA39D96DA68E
243D4F069189DA6E8D3741B79E5A1D44ED014CB9CC4975D8B3571316D8B40E72
37A146A11FEF592B2C36327E6163936BD12A8C843DA6CFE8006F68B267670CEA
523B63FF6F0B1AA9DA8E023B86D4012322BF86C75D542D3C077C7BAC48E5F094
E2C6B4D20BE48B14BE74FCD408C3B3D17A28B24FDCF09B9277A9C5E2DDC239E9
70BA17716A3C07206583B5357799FDAD53D5D19B9F039B5187937B34C7E5952E
F45CCCF28F6AD6ADDFF048179613974A6A88CCB12751B0CB6B73D7C81B519D92
713F9C7C671C062D1280080C8C9548CDF71151980024ABC57DA9DB6667C67A29
929BCF21B7EB301C85F08724A723EEB260320BD0CC473B95A38F4D9A8288365C
932EFEF1CAF1F720F6D7035064ED271A45621387E016CDBA180E1D76F2DB1D5B
1AFA594A71B60903F652EBB6A8AE4DF9F410E6EB1353BAF79A8D1EA9A49941B9
328BE65ED457A8C6484EEBAABAC583CBE9DC6ADC169F76B66E3E7F4CB655E4FC
A3F300D8B338B64CCDDA743E38FC9E6C61A8E1D7896FE66F99C8078F7D16E3C0
6287C9C86C1ADF248B6C79D211407397AF6CF70AD1045B0AA5D43B48D40D3DE3
68CF9E741D483CC3977C9AEC53313CD71D2A8C15D4C4829830EE4257795F2432
1B5801A5D2BEE5B0DEA08B9AB38F9536BE0F228B8105B0D833CCA6E23465ADF4
C9C88E1B4D074F7F9B7300CE992AD673E1366338E7E17A310AD09B28BB856130
FF2DDBFD54B1A6B4C340B35FA377462B5DDB25F2AC9FB09426778C3D75098A68
4D6164B53D1CD6249002A6C57E78FC059DAAD3F0EF6F0D1CC6E5BAEFA93C710E
1743D31BE772DCF52FB02419E5166D283698A1E436FCCEBC8F095C089E44D700
0E72F91267ED16E94F93E0198744E75B7CD02B4B68A6D7929E0041B3A63948AD
81DF8634C8C1B1C6DF5D0441560534BDE1B5359FDA1168862A80D7F7CFA7A085
D82460508BF778A19E8C46CC33B1DF0EAC67C8164F0707F4F805AE6489B7C4D7
D51110C143F20EDD8D642AEA693316AD664E3D7C8D7662F468C53D49F95138A5
35A8C06B5244C882B94A533985F38555AF3D2B8E8368DEA392E829E49D3F70F1
9144590B86C66D53C8368B039D5121E75C725F924AB7ED5BC883E8AEA49055DF
783118FC41F5947DD17B6C14D5B2A021DF0EE08862734377DBBF7066FF9A3908
D9ABE49B09F756DF1328BB51D1BEFAF742BA20095ADE729CD8925DFEC444C139
EEE726BACCD7267CAC1E428601C16F1AB8B42CA95385FB7CA9DBF499F9326F5E
C7FE20A946B3D09ABF4357AC60A166CC12F6644B8D2DD0F08EC7242DEA94F3B0
6CF9F05DFD5E084A31205AB27A0E5AAC847E2ED39724E3A1948AF4D89EA2D4C3
C3351A500FE5FFF08B6834FD2EA9677008240A0BD7EC61BF69D36ECEF96640BC
D418146155FD0C080A62CE1238A6909345978D207375C614771542F65B9B0643
3385505A136B363F400C80B17D7BBDDFD0829549C63F668B70DDF92B90A260F5
9D19932EABFA1D40EF32B22CB3B1198694505D370005FC3EDAE66C5140075580
5C52EBF506F0D5039152872AFE6F96A7F7B43C158B997B0C107C3B8464B0A623
7074356E75788B2A02DFACAE8FC14380BAB70C9AB029870DF1FE5DBF42FA6EEE
6AD39B93CA8486B024738B7B93D0E79C0FDC7026A08A930CBA924AD7EB6B30FB
42C6B16DCEBA85F5545FE4F1D219625B321FE15E0D43408EFD35E75D8D3A957C
E4E7635B6270028720A19C5CEB09E9832AC5FF16FBC406C556CB5770C108D66A
05BA0CE09CAF55F08D65A25E78F8C4219DA338F1D211D811C0D2051AF5894C24
240659AD7FD01A9E4F3A6364DFFDB8FF728E08BF7F2A34417B1CCF78942741B4
D653156C02673622E15E49F5F01A05613B36B5B1E77CBD332EB57640CA99B7AF
A02CCF35F0FE818FF1CF8D0A89B32A4B3EA8BC9E8C66A1C572491C63CB4A4A8E
386B16EF6BA4DD053FCE71B5E4231AE36E6E1B5E28B3AA624DED41191C5AE0AD
F3FB83953ABDE712A1E50F0996156A4015E0CB4E60986F5F5A6A5D7963D03878
EE632F4A83B3C095C109CC46EF22E7F5FA3726D80C50AB338C188A6C124CBF1C
A02C47573FDD6A0B0735E5DF0FA88F1289D279910E0E58A94443CD7675571E28
308B246F66B6CBDFE9D437F5FB6103BA303A9ED8CBE468BF652E20CFF5B2380B
8C39514BD52F5717A51BCCC343444A3778178CD7279FC68DDEDD7109DDCF790C
D6BDFABB5A5A36F5D40D5AE07CF0A0966ECF943581183A2BEB54EBE2BFA843C8
18C740B0088C00CF31ADD370D5384B34D68C75CC754A47AF94C30CB90370988B
85B61A1DEA8B5733CF458F9EC4D39D513E0EAA952BECFEF7D3886A9BBE038C39
18FCE03E0F751744E8396950C82447539405F87A261B44EE1C72727E7C4686AC
5C0D8CCED7CFF6748D8B8499E542988CDFFB6DFBEC9E805CF7E1D084B6DC6A71
C297C0212F0FD468AA3A8C40DB1572FAF5993238F4EA2EC787BD75E2182BE959
80481687D1BBC6D8FDBE151624933F16C4551A63B8949036B4A5D38A2691A2DE
85E25D048A678BBD9612BA887029E95267D1A95F7364F661717F05C4A14F42BA
8BD8C183D67D4203212F8639A28360B396E82929D88A5C1BB0B8161D667D8E98
0BB54AA24973C5D503F653C1A9F41B733ED94F054DB30BF9774AB8B9C17DCEF9
C7C4801B12E6904CDED25282F8014FE794E89A259EB56A5DEA8E652E3F2499D1
FF438B9BF640991B938AE485F66D4750F9B2A99AEE4035C45A40ED03F0D4CF61
9293DAAF1A010D57E9FD98327C755A7C7FB926787CAC492BCCF6242D70729D87
109571D09F61E4D7FED4A0FA95132D0EE940D362E9B236E866E11AAE181751D0
69356B3677C5DEAC541190711E42245F85C3DD3D2F987F54056E346575F13793
66F50B42C764F72DADDDB233AD9640CCD54144F3EA6440363EC91D15CAF6D70D
CA1DC03E363D3BD8BA694CA5157827DCDC46F2B517CEA9CFD90D82D4375AB9DF
12690D92F3077C06A85012A031095C186F3AD45DBA3A2147679FF78413F44C8E
52E2FEBB5C30193884A139E54803B0C1ABE850E8FE7F833357396C7BCA57287C
320A48A3655FAFE5FA00F39EBF2028133AFB831AD4C5EEC91A5961B9EB4C8AEC
18D647A6DA9D0E60302F90C09708C38F7C07DD66161728190840CF830C30E085
4491251E909968125F96F5DED14619023424A7151EDACFEB0BE73E87A79565A6
078F4DA335EFA40AC8DBC958EC29A824DE9DCB905B82A5319F2AA3567E55119E
A436E8FA0F3E8F3057CF55751AB81B011171FB3BF2592E5769D63A2B46071ABA
297163B2371C75F3917D30FA36FAEE9837C68E48F52593B3C548A5003B32C53E
A62575DB23C86C3301BAB88A851526D0177520AAA0D5B33823579DF684DBE237
D388B8871485701E7DE8BAEA8459E697D3E292B43D81E1669B066BBADFCB3AA8
1C548B56F2AC5D8949640F39EB1F990E3EFA792DBFE4DF6063B983B014F85318
A312B5581FF00DA078A0C0ED5ABA024B4263589796F32E03903BF31021DCB944
03AE2982DD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Italic
%!PS-AdobeFont-1.0: LMRoman8-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Italic known{/LMRoman8-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Italic)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-489 -292 1472 1124}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD115081973393B704D9D8B
0462850E51DBFB8616C22B791B3CDDF2039D509E454786F4825F8101A18C49E2
08AD15A3C7A5879AA4CD3DC5E43C24D225BB39F3DCF4FC3F621B881512F86C0A
F2952E088E3335306E2FA4A8080B7A1A8AC5DDD22CDB2E8CF5D9648CB41369B6
EC5189E3927429DA99031EE0D51228E5A7956A04A91430B7C0E422FC2BE35F21
4CC77A15E5D9FEFEBBEA0F73A77580CB02BDFE846CCA0671C8007C5080D22262
B9A41DA20C793CCAC644B70497D7D1D7799F589CB718B52F52A1E494DE352095
49E9F7D4250DA0A890AF86BB288D85A8366508C2B91C6B3F99F69B79DDF04B48
1D0C74086E615842106C345F07B25E93AA0E672A658E4801BA3254DD5CF00295
4856C8D85A90A841236F26B782904EA31482F6E111F95E88808DBF6C40C0F933
CD4BA0243926E746C5FD765065A7DDF5E44A7F94E041E79C9E83A6EAC906E40D
69DC5B47ADE559E7295F0E742E4C458BC1E8EC7AB04C695DFAEFEE778A90ADB9
4CB21EA81EC7D47950E964E23C0EA286D73D87F60DF0702BF6439EAAD17BACAE
07B6BAF3DFDD2546250E451F8F83AD2F5E29CE5E2C278BE49FE3AD78E960F75E
AF6F23F450D71BCF85002DCBECEEAB0FB990E25612ECC9000164E0470806A0A9
AA5FF1D671E9E5F0572DC847F1D3C43D42A12152F6221EA726ADD196BEBFFB38
375CD9DC1B68D9DC4410BD7FC6FF3C6B7E8A04016F1E3AE257F3177B7804ABB5
F3949CD5C11CDC905FCCBCBDA96A501D8406B46C02F8F5D6444C486AB68204C9
AEC313044A6A35B7E699F540DF4D3B0C8FB1C9537262BDF381769FD74BFF42F1
7EDFB698E6C082C327D461587FC9B86564CC1E48FCE385666CA784F59F84FA71
1026006BEFDEFD1F659AB9DCD7A333AC57AC912FB468D39C0BB84BF39517DB14
A19A851ED4E1C217D5FD8475C0CA36A84C1FFFDFC0342838AEE12EBB684C6C1A
3C973E2D56BD97E39F61E1B1B9ACBA7BDB3F901428C98CD7E3DA090E128C794D
9D6EF7E18E06469CF003B9537B60F93E351800999ACC476DBD709AA7DAAA193C
E2C27178ECECAE03BF717833F0692E2DB3C86B8880C0AECFEFE1DBB7E42DA12A
67E70B290AC88D73F30514F88E8FD48F0B675F296A83AC1938FCE2DF9E91EB4E
B8B2ACC2214FCC5F2514F24E0A4593EBDA9D17A20F6DC3C0DE48A796A43EA25E
34BA76F1681A3282F7FC211E13B3A1FC467F98A7E2F4511DEB9FBAB2FEDC321C
73E17058A7998FA34AAD8C78DA36221A147B7E77EF2D99CDD9306DEA21534DE1
FCA4F6C6BE4FDBCB6C7CFC456E5CBE116BC3DFC67B18E95621D03FAEE361D368
613638EC5DFD9187CD14D47928961611E7390BB77F218FB837E7B5327028F742
94FB777078BAD84FE0B9E27E5EB32D904084F969E166E6A53CFAB75F75CC28A5
3483CF315106F5A1B428B4A87D42F5F09A321BED127C7018C59B0A5872B6C996
C44E712F82A71C040CC46914D29D51457905A91173BC23B3D1657C9E8DCBDAB5
22E1F4AF48BF0E3FA1B3BBBA9B8CA038F113C57B5B2DFA65BC1531B4470B5A03
4CBA00791EE592FB4DAB538C280A8EE09234A543243B3FF8E29549C849F55923
9032005FBF0708D97515CB6CF112C2A89D2D44816E9074168B3A76FC1FA1CABA
526EE65F6439F9FA6F27F76365253722074E8876405E2368CF3BC65040648818
172D8DA9F06957159A569F6487BBEB0C1D62CF242FCA104861F63E0CE6FF00F9
36219E4F59A514F54313F10BE8A0DFE6A7B72430D7DECEBFE8D18792D44F39EC
680F178A07F4A84C5DD989C47288DEB2DE91E7A5A4CA9E3B305E2E4ECE098AEC
270F112CADA74CFF4BD78FEDE423B40140F7AB6FBC84982A912BCBF17E8709D8
6605CA1C8B082E81EE08E8D3D565E42987DDAD25034D1C61659E33793CACC755
49D54E2A04A2F2C6DE71FD8EDB02B3CDA24BE5B94F4D4C0FAB79CD0D3E7F885D
842B769850D291C9D92C836531BC2351FADCEB22C0DF2EDF2C3F52D34947E096
4D0E8E89F6043C0D2E7B91334762A700EE46CCFF0F8222069A239E9C090D382F
755A2F3209D4F9DFFB69F2296D9F724349DB496B42FB35256D93962CEBB58438
1E580898746A33391966B70D7882E0121A128CF3F3B5E6428E1F6EBFF807821F
105AAD8F008A01ECC02E7933E19CDA965A884BF7B208519979ED23271B6AF228
8430995CF657CB2305D67A473BCBE4830AB55944F07DE38907B58D11F2FE9FE9
8E660A780BA6BFF75BC9DE9B0A4EDAA177F8F6D7E6A9E866BAE054F5EE51C829
C26F9B88AC1091128220F5E734EA2DE6F8CD4225EB94D4436925DAFADBCEB0C2
01C64F56CF4AAE64E1F2AA294C00718D04FD696B3F07019B87120BA7E2FB7B0F
59266719A4646127E2CCC2232674924E662B27AAB6D57C09F26A63C400F5C62E
9FC8B9E84BF464065CC9706434B127E0AB3069ED10EB8C4212CEAFBC79B61186
AA832CA31EA12A4D2A05B5C1F8295AC799CAC6349A8030F0285D30E48A620A29
7B211C3996726C2BD5AA99752F71F391D7403FDE31BC694628B99661DF32F2D4
BD16E36C755D70BD5E2BF0DDDEB2CCBF9AE69C1496A8BEA1B556EEE562106998
F7FBFAF7313B1FA589C0DD6CA8844B165777B02C5938A3F19631D6133A8A826B
EFACA741F53EFF9021D9D4C491F26BE8F54C61165CAD7A2D32C54D4A3D3C1FD8
F8F90A234A4F10E1AAF04B2316EC9C9749EF2864DAAFC2B4886C6E9E9D214EF7
4D7E0BD6E972A3F81C7EF13974A6A7771FBECEF7BEECD78B8AE3B5A2E6CFE659
1438894018072909D00732D71F63668F44D454435EAB031BC8901A89EECE3BB8
CA238922035C69BA8423CB111552301916EC174222485E973BAE1751B0850541
44022BE6620E3BE3BCFF07C029D465A2D09597CE1A2C03653896E07940025DD6
8C11C8EF4E59452CC7349D12683C6D610AAB4267EB6D070EE775A1418AA997C1
6C2988EF7E0148A1DF74DA038B94770B57EB61C47265049EF59628DC8B04C719
0BCA2E26CADC13E2FBE104EE488385C954AF46D90692B49F7A7672F7DAB6811B
1027FDA86CF66E032F1B0D494612E30065D79AE1FB42841F918580F3EA43D284
AD3FF9631052511C02B6F9C5319E4159C386DFD7E08913A010ED27662EDD2380
36C9A646C280EFC242ECD53B63EE65640810BD7C466F5F433EC555E83C466B69
8F58418FD60D1E9B8A9DFD05C44C457C2669807F31630BBDFEA94C6A4EA4A96C
696DD0E62D1A74313C4E0BBEB6E94DBFDF8A78969FF3C08562DE4012BAEF33DC
753C32A0A371A51F64CDC4E06F544F2055F67F0ACD4B0F72207FAF08E24C5D0A
20A385910CF5CC9590B7D2B2CAB2A1DD50A23E443D8A30572DD2A12550B2D61E
E24635EFC15D5D7BA5444EB942582DB27E6C1A558C89543D83B3EBB1F1EC7A55
8CD8D86DAD66D3EC933AB8DBBA73A64A421683D25AD6436A70B0C1C43A419F5D
B99410D0BB68B865F3E4BB7CF3CD00DA8E491D38E5A77CCA98D62B1B218C8B37
1843DDF5DCBACC2CB25F1041B0EE4D1E1AFB6B6FA6EFF9D626D24C4FCC9B0117
25B1560B30D6CB37427427EF4079D701BBBF3DE5EDC9E2C1FF4F9E51156B1A36
A5D0F0E0CAFCBAF87E8A9F9AE8BF9E2E340162023B85CFE6D9AFB6B92D74B09E
123754F7752507DE77C8B35CA1A3F7D176D5B00F6B6966A3380F67C084786D19
2891C18FC29F078BEFFCC010D53C07AE90526031B40619B4D27AEA5E7C3BA7CD
D616DD17877C265E77F708D49AA47248A27C570FCFC6600196DE9ED27F8DF650
516F54C844FF7BA81A1C6ABCB45E5A9848A2485EC84D12EF03328885D837A7FE
7FBAE9F372C30CBE0298C7CF0424F68D028DC56C55084EE590D2BD58FD9784BC
DCC3D498BE2BBDA1A81A0D8E75880EF3D7798AFB3431A9C936B1549455696100
79DF9E96CDE8D005FC25E59B029C0AAE7202F91D76B565BC0A760A0DE6682329
78D1FC49305728AA57F99008E157FCDC9D79CC6D60881693CC49E31E91520E8F
904FF4D138518DD564140AAB4C9462CC97D47608E12E15E4A069800228BAE3E6
D4040A1FB6E9C3C4AC7AA8B27CFF05C5E768115C104826CC10B9ECFD085F54CD
9DD02FBBCB47FE1A015EFC812D65DFB3BB4678F19A26D9BEC6A777904EDD6949
D621BE879C3832EE8F810591B0C92761BC20D9E6F8ED30903CBFD917CEEFED9C
4910218E0E1F254137D816B21F76617F02A6AC8A319A73F84CE822BB61C6C628
BD648CCDA44DB60DC1A297F739879F1507A6001113B11FCC641D676CD122C1B8
6FE985561EBCF74DD0AADD279F095AB2975A5DF4153D79572D2DB7F7BD8C2056
2D791FC03198CA758ECA0E24D2B48F6DD3BDAF7171A45B6434D91BF070E12C44
D08012210A5917CE236D356F1181E9D49336567AD43DCFDDF3C1DAA7F1FE10CD
F6C081F3345BB234239D342296275C663F183246F0377048C48AB0D05E92A03F
CD2BDC4556E7A1F53FF5ED7B2E617D6273562E2837A23DAE26D26652E807C045
3067C105F79A954D8AFDBAC7A28A8C8472B933865552B6B9F998FF85298CBBAC
78BBA0A17FE622D3505E555EC90AD1EFE819DD2DEB414DFD0EC3122B64707069
2E6AEB04EAD823AAA6C5FFBC6DF009416E82B5CE51D229B3BE5AFDD189B9D128
BF0081E31702AC06FD3E56E171C25804C38478DFD3C9EF826C2CABED7C4CE491
2E5431C06D2C1CEE39D5413C110EB25E120C62761759B4988BC354F399A7EA0F
ADA7995818043B72DD0EA143FBA1C9F662A35F3BEB5A529B512E85E0C64706A5
2B393C1329F91FF6E05E273B5DB89549315DD15FDAFF81DBE43CD8F459770323
F9A29B49C2FF1894F735FDBB064FB7945535F2F9C287D971BE65A9828EEDB4EB
F6AEA562347DD12AFE72E2FA971F0B7F498FA3DA42D7FE846CCCF3F2280D3158
A253F22466A7F758FCABEA391FBDB665ED969B8B374E4975E93D1552B7E094C1
6CA1ED1FFF918FE67201ADBC70726F25090D745663323F4AFD58B7F63766A85E
FA245B9004F69A3E8DB84607142C217A7D76D8A8022D9216DA7964982FB1A662
A4C97C3CEB8C6CCF629B3734013689A99E137219EB039742484F84DF747B0FF5
BF4BFECCDF86624F61E7995E2B7066704E97D15EF77FC87DBE1723429E976EF5
9576CAD14DD5B8EE3CA070B8C00E961B884164BFC2C3EDB87F3482F7BEE425B7
1D233F03F54F614BB18DA64759564E7DBC28BF461366D05F10FF84996044DA3C
5B900B6859581E7BC99280169F0935302095B6913DC2BC911C49295BDBC13358
EF03E41C7C740652547A1DBC1E7FC3E74AA11616B36DA258CB42DBA9608BFEB3
5299D77DA9370B63525B99F0A8D519F488BA37A41767EDF87245ADDCD1E94D2F
EE120C7BA60C279DF5F5BAD37D218B1C3735FB7D517C344AFEC68F301DB41BA0
CA5700D1495B99CBA96A3094AD97D837B75AC220B8429C356780330E38BA624F
7B660BD34A8C20D773BACF0AD11ABF592276F34D4827534E414B81558C55E3C8
A322030C9EBA796D4186444D0741991AEEBB537CC6BB2BD573CB45C6BFE3EA37
44BF1DD096105924368F9E6524C011B79CC93E8247D831EF285071922A2D3101
C64023ACC59352BDCCF7BDEDEFE293DC26A2AEC006838C6370FEA4ED1DA0C57E
99C99841CC560FF6D96608EFD2BDD57B9A8E717A86558021766929B21C4B184C
272D776BBB5FE7ABB591951AEB4D9B7C6524A82F08D7A67036C85DEC8943FE99
E02D544CD77E53B9581EB9A9F99AE1AF018FFB189D1DA2F6D5922452478EC39D
D17C1D4D030D7C1CEDF745B8BE29FCE6F56F93CC01814CE35C353A7EE338CEE0
B8964878C02328BD308424854AFD3AD930AF497ED86BFF93B9FED0372D8DF634
81255FB07C915411AFA55607F038FCDE2A796E981760EED747888E8FFAE33613
748B3B68A5BAFCB4F1BBB90BC96AA1876AC4F908AE0478BCEDD0897269186E9B
9BDB90A1C44D61641030BCD1A4AAEE984F3B94BE904F870B9858491583267DA9
D0F1F3E460B219665BCBBF90F7ADEA6BD244304967F3CF5F117E6E53DEA11221
65030B06F279AAF28C4BD44168AEEC453982DB9489F29797B7A08928CF9313EE
3605BDD147E79F18529348E82AAF23426BA35F356ECC8E939196C3CD9763637B
FC029EBAF000C3D3A8FFC54C5FF109FE32E6B1C408B8B539677ECF48CAAB8D3D
F601023D688D4CA975802D0ADC270D4BCECF15DF40DE7BA9966C21B5CFE205BB
11DF658AE768F2651FDAF4EB4C7239D2B31614A06578A79D1AD88E04B941F727
0988BA5EFB188CBFA895E87729004573FCCF8DED2AB6A609EB89EEC242EDFDD2
EF552359727536916792582FD9DE63E6754CB8D0650938D7D1D90A82EEFC504F
A7E04CA4256EAD3DCB103B9E31342B7A47EE9CA54D1EC662172A702A6F91DBB6
B894E45AA7E25825A8BF710439369C35D7262448F165365151D5EBB6B84F3EB9
B7D25A8E69F4E4E2C393803A98EED710D6CEC48A28BB846E86CF6D9DCF7F3A34
E6AA3CCB13CCC61FCEE7C7706FC3987BDB800DA1C4306AC740184CB367D70D8A
B7DC78803DD09EB442AEA8A8F2F13427439971B8428AFE5B15379E7C89DC1921
5FA388179DE4D224F19182BA7A3CA8C4D734EFC0B94C4A58600D51FB4D89FA79
7068AB8EEDEB5B4DF76423A7DB7ABF711BB0C7C703843BB4FDBF3C187C80FE52
EE1275B05D19E6DC95D93914B71382086A46D74E23D93A69FB240C1D824CCCD2
68420F8B91DF6CEFFB278220918E8C476DFC80BE6DFE08ECE9E00162F5406205
126E4CDCC23EB4C431FC6C1DBBF79938BA671280F0A33C46EC274A77BC37F4CF
7C183FA6844ADA6C3C2EE4E4FF707C55BB3148051B2B6F2E8AD884FC8A25BA6B
F26CF6367091BD71D7EA1069F48D987D3E76BC13E5BD9EF666E63DDB2427EA83
A5974A57C507260CAC9F0D419FB0832014E8629D27C2D02E23D2324F7348D4FA
5B5C754BFDCBAF4EA9021861F290135A92692B6433708E7811EA44E754404417
650D70EA17254DAE87A972CC94981CD4AC4AA888BF1A20B01CAED7EE23F1EDCC
8E5DA0553218A6B8C354F178C0CEB0AA22DEA142F9EDA0AE9C77356A42F9DE61
FDC26E840D305519386A04F9D4DDD7FABA7781D9D5E4E5A84B5D57F900EC91DD
E4B334421EA05999F7C53BC2ACAF87A392FAD2B5E5A56A604E8EA03484476F9D
6F645EFA35C60549632B341E305712EE8000F2D6F2D4DC7D9113FE47C8ABAF3A
7CA29BF669B44C004280055D47B5B0A3725EC5101252F708A3F3B5CFACD77D5D
E9FC4B58E6CD01B59C73A14DBFB287B7017F6AE0F6F15F19331CDA93CF358AB9
FC23F12BA3BAD27A85825DDF136C2CFFD8EA20EA384D74D11F9273358E7F80EE
2D8CDA9171BE3366206684D3DCBDCA5537ABC8C2B536D47C6EA714D9689C94CA
612BAF4375C33F9F42FF4C40D091CDDD76048FBB9B8B867BEF191661E65D79A2
49AA3D1972C296A11ADF59C4919F63C78F9B7C2FA998F5BEFF8B055C36FCB240
7ADBDBD37FE825BC3853BA73139F46781D91678E402EC73D4064328E15B8921F
38FDB6F24414B768492FEC6A122D532233D18D088E387D5D7D631CBE053CC770
27D8A3C0A06A48BCCDF5D6D6770402B4F7D0A6D704C65455EFFD4BEA1607F0B0
B5FEE06533568EFA5888EF29BDF6223F82F41B3259A86D6541C9150BDFB32C71
7297729BE47A5332D3D80C1D7A697A6B345354572894D0114F25B895935FBE69
0A6AAA4CFB18B11053314A115FA8383BAD84C3F44D158AF7969556CD7CDF2305
498C0D0D372F9225FBA4356DE1EF78EAA26824BF5FBCDD02D727021892E32742
0606D5CB281336EF2380A37A882606D35282BB6DEB6866AE147806BB43CF5C6C
35FA55C0B4BBB2612F93792757CEBEB0661827629481A2FE20B49B9E7245AE5D
2B6A0884699720F20146ECF684242C6D962C70F7F425D9D102B254A312C6E124
BB10F89BDFCE2464D64360914F500A28A6B2126EC9DB90BA60D4F0CEFF050A2D
0A52B5B411DD3E71BB572126735E724E95A1FE6CB9D8641B380C444EDAAAD0E7
9E07E8E875F2F271E06CEF9C6B306137CD190172A2ED3864249EBB98ED102B32
55C994B91C2DE6B146DEC313A1ADBB6BF93418323C479C2C0A9DF9E3E7818C63
F990E9070D3479E7DD9A727A8594C04AE9D0594B75515EA720D3FF84861AF5CF
FA05D6BBA8E738E159B2DC0C4145D889BDE466A82DB36E306769AA0E85D4BC17
130857DFF8BB965D7BBB37C0DC5B31FA12C8CE54E4A3E6E6A2A78B06763E9C2D
ADA3728C9E3E0893C478B3F7443D9A332101D6E8D60A69D7649A14AC21316C18
3F16D35B8B5BB7BD6B02982078B99CF8CC1C7997C361753C007853880666D38F
510BE2DD1F8300A22975C6DAA9B6DBA5B09A6FA444DBD6FED0942684F14B7DDE
D833E4403F50AC10395D6C8CE0BC55DB2F959BDD0BF872AD824934360373D978
E8CD0F612DBDA661B7D65177D6E50EF170E1FF1A73C2E46EC98299320F814265
2E703F4370BFB5E3419169C1A4678199F00571EFE7E7D1F7A2A5590F8AF3F625
CA0C2A1BECD6F22EAE4A9B30A152186EF35D59BB974980F8D0478935C577AACA
E1079604CF5D555A41FA4A0C8ABE2A103876AF4A02AA19B8E3FEF14FB9026D08
DBF658240148259F667D1ABB4212F0BBA1C94295A44055F0C74DDC1E9AB17155
0825EA8A69E54AEFF71681C44770EDEA27C615E62F0F1D361D536CC790C6A92D
331A6F462228EDF6E7CC7454E876C48B858634D80027DCF41B3084D2AABFC0B7
183B1B1287B51D8222A1A56CCADC1061789494C65A584CBD3C65762DB7AF347F
0642DDA30F1997653E0DDA51C90CB9815BE1F83A6F84CB56870EA2BE9D0B1D1F
3D34CEBAA0367AD81ABFAB0F671B02BA487CF6B588EBECD26F9BB7E8DE0CB528
661C25AEF923E6760935EB5E9618CBE11F8DAE3BCD34F09B4884979D611382D9
6BE1124E7ED7538635EA24E0CB5F989871CCE60042E3E8AE2DDB34FB454F1FD7
5DABFEC9AE1E158F1DEEFC669CE61D741A02E26104C2A1DFA474A1B1E08A37A4
53F973652909111D4BD00D426F21AA3CD3F011D7E206F3B881887748EA3B0E66
B1A413A807A35C81E3C3B6003F6DD194CB4618827F3E93512F79E772F5D4790E
F4F92E3F780B6126EADF2E12E547218BCD106710C6BF245202E76E99984CF577
DA06C054BD448159FA31469FAD7504D520F20576A0012383DCD03FE01172D338
6C0DDF493F875241C7D7773C99DC40C53BB0F0A68C7C49C128507F648221B16B
1D8E873523346BD5A991D00BAEE2F2A82E2D45D45FDE59C4BB5E507C9FD85B65
CC1B53B2921BC4B6837325204227AC73F2027D99026A671F83624D4D29B082C9
0843C4AB3C586AF1689FE77C7C772DDD390EF466D40B6AAF7C4247FC0D40A2C3
CD57E796482600AA5E73A63B54251EFAF569047B3FE1143CC1040F97CBD3AE80
40DCD889E170888A77473C84F15F2BCD2249D705EF92A998797BC18E64D86252
B69A28E33BCB4F4665F07AB827BB2ACBBD620C56973E51B882C13785523B2218
DF0980B9496CD8015CE08F99D3CC6FC472E5FB314CFB957757B3A3E737986204
6476ADED15087DA8D19A2C3B7260FB620B6A9533E9C9B38EF5D524E99EAD57A6
6C587F16F3B41289D4F736708280E7BC03A0FAFA64A7C5FED819BEB1AADEB1C1
C003F982B905BD7D67725C83EF7119C2C4ABACC91DF8B388B207BDEAD9C007BD
094F08F395887CE66F564582A39CB410107BBCBE4B5F3F8CF3C20A8E023AEE90
F378ED9C00BB1712A05D62932BE6D33A3FECC4F4608EFBCD74B1477B93807D36
B8C8B29B24B3EDEBB7657AA44BE494F415493E68C762C83A6D2C43F63840D038
0A0B61571C281CEEDB41658D2F362F1723BF3EC42E3A2E47C6E200706BADB590
E92109E12018C02DC886068880A1B5077C3B95CA0BC9705B3AE1BF023E0A0E47
902BFA9A6E4067C523E758A774470BD07DE4C4FBB141C1AB5878D613459B02C9
AFB0968EA773E8D88672411E83748B5C34B2FB59588DA3A69410EEEBF42BA0BE
D42D28623E295399B61D5CAC79805BFBE669F45AD5AA8A9C20E5CBD3E8CEA13D
18E12C35B9A1D4CDF40A76214A719F8C8F905F3225491379F3703DE550905815
891EB61D63CD500D6589644A770DAFD5FB061E419D3EE4FA2FACD50B5AFC75D3
256A1FC325F77987BCCBEA11228D35651699B67105E95809E22B8EB64D035396
838CC902D1CB601CDC970E3A7BD29028ED61C58260832E6C4EA037F4A4453F77
73B6C473C510CA28AB90147613F0EBC94C3EA000104374AC639A43AC6F9F7AD6
B6E558F1E9C5DC4C9888AD0D486DBA6AC4B35FEAD22394C03A72D4AAC6C42C08
5ECAC812069D1C7443607554F1F1B427F0E6CE30FA91CA3F30CC75DC5314F745
CE66BB59329A83A42A73DC9D59023D8615102A0089B28F0225AF0EC1856CC9B5
DBFD8B179B0D53AA69D3478E0CC4D688E03FDA13CE39482B68AAE971DEDCAA31
E7EC79D611B97AEC290CB83DDD47E0747C26F14BD3341D7ADDF2C4568CD5D9E5
E84C246F36A0BB9D454A35D273951F0248F3AE47589068427C176D1EF2E0375B
8F8640A75773638943DE96B8C4EAEC254AC3090A5A1A72EA11EA272C5C8B83FF
8F16ED7860E2AD1023995F1BDE6D2489C6239BA3626FA35F918EE8B16707A3BA
BBCD4897246289B24E63471D8080D64616D716AD7EF941D328DB7651ED7427DC
4F2FF6B89E35D55DC675F44688FF0A75A5C94AA0B23B5F5D92C70B77C1E94F29
2C16E732C0E1871CEF589E4AA8C9EC85D332360EC2D07EA64F4B87FDB081392F
2F46CBE9591562EE8EA03A1B8571F3E21FDC608AF3CDD6A51B56112A4D6E273F
C28CA962BAB90AEC62F1C351596257BE6F85A0B2C6694A816A7E158615829E59
EE73573363006FEB8ECAA283448C7FF5400BFA745C859192C2623460A8170F65
F4C45137F1848A3687D5BE45FEF3D084AE1B3A48DCB4DAC6C83A858307703A6F
79AC6ED05FAAC5784FE959F32B47D4836ECC48CCAE1FB7DBBB6ED76DBCB40B5F
308A758825ED631CC7897D81D8DB5E1BDC5FA5472DE3B1E303F8B56D1161CAF1
4DC202B636DB484CCA840696D723699143C3BB3C7475E21AAF22AD06FB556EA6
7B2E85B29862F343AD8B98EFC32D0A1F2ED51B7A46D69770BCA983D7B5A446BF
526A58DA4682C9F22549FE68EFFC355327A582968548D1C5648CBE6BA93CEA0D
E409FA59FE5679E65E8DFC7CD8388B363496A07862ADAA1F31D20A1C14E0B494
30B7723CD88E73A424682095BD130F460C80DA2411B1340618E31C86081C1634
E890FED9E22FDA3FA08A099BE60DBFFA3AB45CED09BD7EA1DCDFCE5759872FE9
6F2049AFE4A69DCCBF9E2726272A7F3F8AB3D56162F369FF93A3F4E91547C49A
D1852FE7BF5606F2C1DB42C069893A6C31F0A44812EB0380609943F8E1F5413B
11FC9A0751C9864D727013B6AF798D3CD7571EAE5FB3FD08D95F9EB0F889FEAA
41F3B26B7144D29454A8D2E421E2A0CCEB2AFA2FDD93834089E0C8B2983FFBCB
8EE7E0A553ED1C167611B98529389D46C775EE6F17BD7166DF1E02BF6E503703
7DF1CA63B9333E6FFEBF224C84D1A517B53B0BEA8A936F9CF329B2F4350B0A06
467F457962C3723BF6E61E3C3E10DE25AE1908F8605D84FB696C84881BBECF84
0080C51CA6FD9C78AC2A3BB7607F52A3424F1B7995A97253C8F822C11204E340
652E452C5AA2F385A84BB64B27DA576A7BD8350C2860979DE20376A9CE8E4B6C
4211CBFCF9709AA29144F3A403AF89D7A3A1B81718F3A994AA4CEAEAD1F1FB02
B3052D52F986F3270D22EFA230C261DA2FB591A3D5C55971AF6DD7177CF5F25A
AB7D45791021199BE22D89940BD35C48C11763ED8073F0AC8279680F56E6017F
F5D962F67BD7EA8531A574C42BA2F296A2166926C9D207751DE0BF309A7C0B5E
6825980CAB56D409278CCA62106CAECCB2FDA2F4ADE4F8C24106E0D76B8DEDC4
64BC4C4261AD756D26F053A2A7CDAD63A0DB6D50166C927D3D083E2F6C578D2D
90D46BBD8F7B95A7BACEF0F59D7A86D619FE049961612661F780459D9932AF48
2B5E2351E3BADBEFFC85A1B44EC231CE55AEF07E942B962DBFC96A6B7DB7CB28
515A07564A9D3C2275458700FD01CB5E99962B8E8D8B1BEB02233D61F7602829
4FCFA010ADBA06F53A700AAEA9213F7E64ABAFDAB5F42B0E4036C2DD237344E5
945428ED26E5A2583C8C7A4D020A8EEC2D80FC67A306D1643187AB11CD2BA196
6F4EA30DF566B55D4BDA83DA712843AA4227182ACF455865CA526CD0C3AF1F22
BD3E39EE904697F94F59B8AD259D2DDF433930B270C63EEEBC745D332849ECE6
6F8102383F02F7401C3481B529E3E6843F38B1FE6F1A7578AACCE5E275E11BBA
1D0821C1D790EF1FF192AF561E7AFB4C6710520C895701EC10BF04769E72A508
E242A05D015A9A32809DD51DF932DDED7A2DAC31CEBB0999EFCFD079ABA71327
FBC15077E17CB75A4D5B62954F2E65342FDE538763E4DDD7B9015E4C8A4891FB
3317DB9C1872D93F6BFF63D42DAE91FC4CD6FA81A210274671D30D947ACA6806
9C71DCB150C658EF9225428FEB2FF5261EBF78258671671BE4E51A9CA4C30B4E
6DAA86CE6F98AAE3EAB58E1F6053BD6154660CD64C63295997DD487BC7C40572
53875DAE598DECD3C4C26E19284730BAEC36E258E3188310DE7110A48839DED7
9BE381088BC7191A40B026C36FC9583A048A83F68049C707E5FC1473E7DF950D
54A68791DA15FF5999A8A0A26A1C469440C75A4BAD6949B720E8DD38E27D05E8
01B0A19AE1B5998A9FF519344A606E08F30998D4C5AABC95068BE7A9DAA9F9DF
79732FF2D971B0398468408AE8A9D786D4459F1AFCF285CD3FDDAA06862E0BFB
5C0D788E57D2FAB457DAD3CF24F25F7374441FFECBA1924D32D059448FD4B669
BC65CA0CC120213AEA97259581392B9BC171B1AE1279F582DC721E8249A33A6E
064AC1250B4C879999B04BF7CFC2FFED27563E8545D12267B73080D802BE7341
B5F4E5D10C07264C69EECF460CF82F033635EB5B3A4F7DF718E0EC1009231584
54E29255E8846AB1AB9E444B82AC000DE3D95736F69CA8A0282200D23FB0EC43
EE107184712353FBEFD7AC8A23E53D9E640BA6D2C2D5C7681ABEC649AD586E58
CB1599834A73F6A7F1957BF95A52353BFF9D34D91328DEECBA64BD825113E613
717E3D948CDC7C93B31E42C65AEF0DE3631E0FEA8C168B1F07AF698BBC601328
C575AC3C97FCC08A6E6797D9D6D4D6794945B39D248DC63672546AF3EDE43B35
792D80CE15A6BEF1CE58128B5E881F0C1E9BD75AF56BBDE24109B2B136AD0292
B6FF75C638C7E933DEC5A0694421F7E826D4D257DCDEA4C478AFB9A208FD0DFA
792028968E84E511B51A5A93B4FD48A27BCD3ABDE16A8320A3DE7CF8BE67751B
687B0D51AB87E4FA193238B26A7DC6BB321D23CCE16C49D5B5A13362817731F3
0F60B22B808E0102F0F13104AD66890B2F0BE0D9707B7DCB885D6B04DF891FC8
07DDC7F0A7853BAAC2B681D7A60153CE19AB3CE48BB89C85B9B0B26FA57A3504
92CA1038FEA46B99D05AE5ED8E3208053523F97D6883F450ABD1799F8579A036
AA6F4FB6094903AD8D38399F2F9CF07D450B0C058AA52E4C6251C38D6E5AC8BC
D2705F21C50FC01B842C00CD7A003C927B62FBFA825D2ECDE445F16A4C9642E9
8179B838E8686E86479FAD17DE3E8666A274B783740218847F0FC79D2860EE10
31DF1081E83957FE43600504259E1D1B7997302B451F10650B9C1473622C6324
425CA629600DD87A29F1884E7C4B715935E2B9D435CB9B033D64CBA4F5559692
B7327B6720BE086562C6CBB48959460E76FB49A7C535BD506B2B226033A297EA
3C8C9C8B245F49B289A9B088BD9EC3B6580F2817D63DE90FD71BE3F97BEFD291
A0DBA52EDFD3A216173C3E69F47405B8A86382BAFFE585B2474643F58C3BBB89
4CA3DA52D54D2D77E1A09B2C55DB06808BA486D91078E593A5F8193EB4A6549B
D550F5600AA8036BC6094AD5D0C723C2131C25396252EBA4C0622D2B0E8629AC
3D2BF93B07325DFD89E1E9757F438418A09605DCA1C039D918A075AC7F0DFA9A
95A07DCCF0DE54B996C728BD33342978D99464D6C8FA2C0019156FF9B33C8FDC
27D67EFC22C9DDBF49940AA06B4FDC1DA224656F15133D61C144DF45E747C966
E5224ED29CFC03F5FF651B72D3E5B70D2836DFE33E7EDD803229CB814E449D98
B39F000F922BCE8C297E4E0ADC1EFFD39B1742918B32AE929B96D9BD90607978
45C4FCF06DF5E525250725A95D15EFD0B5EC317437135C5AA68F6EB4F5FE1565
0CF4487A938A117EE85ACC8102ECD40566D52D087A2188BC928DB56231BEA405
1318283A37F917C13B4E2AAEC6CF2829C1F8AB2E1A7FDE227C2B2D8ABC623D90
6EC7632CB075B9D013C9266B223C04E45E4A30E9CB34CD780C1B9A210A65E46E
113C9B602A2B6A6673037ADCD10E8F00818EE88AD2EA98D6B7F1EE7C5CDB22DE
3DA6095E85675A81A0E8B75D1C32E17928D5893A29C8DE0FF82A43D64F468C73
A24EA2637C80EF0BA23539777EA791A503CDE266BD99CE1D2976040390CC6F13
DD92F0686CAF993FDCE0113E5C9A994CF7617897252E19A54DA73A385F9AF86E
F6E3F5211BBE23CFA17E6B479453E9207EE1F683EE4C2E93F10DBB8ABA0C945B
E4B995D5F9D95F7484B2B05FCB49861F7EA05779AC02495D18DE0B91E73A2AFD
5F8DC4CDF14C1A9D0B93E9A9F4450EAECFE4448F77D161F6228107C92BBA3269
401E18981C21F744CE7F3A67AC069D0099A5BBB4F12FD99B9C1430529B3EE149
554EB95268A1A07E6E7BCD1EE19BC386DF55429E396C9C0AF8D0AC0CE02F15E4
5F1353E6047BA9CE343DC452615EF60DDB7E70F095A1D511491BAE1FB85C1904
A00E780E2B0EFDBF5EF51C5C3F8184C0FFDF892B72098784F1E01467DE591787
3A449E4ADE299989394E987600DD4D04CC5246DA7AA16DAD7A3EAE2C53D5FF4E
8D5FDF29913F71CEA58830A18AE1C56554E9452CE71493D9F365FDD09268906E
F9FD12D949C7221F0E646CEFB649B15B905E4134FB8A0ECA85100824A14C5A57
20D709C036188AF869E8D791FE3DCFC3E1A07E4B008EB3F156C524E15C7E5DD0
1D84D9C3FDB21824068F947F8A9C95C58A97DEC9CFCD7E12B1206AAB94B430C0
AF367F909B8B374E4975E93D9FD32DFA0AE84699D18551A6BD25908C20527C35
F23B2FB06496EA462C2031D219705B73E8F285A967624AB240C4186FB5E47200
60CFFC9E9CC68C4EE6544EEE1B5F966B881C2977F80396C16FA272BC6AE0FCA6
6760484CFF4BA51454712FDB8104BEF9514520DE675D073F415271514ACFA19D
2B9D2E2CBB099C46EEA673F31E8E07AE5C862F196EBD7415B504D40353F3D80F
49365D5006829FED63CB9571B219B3830F9A490A7A695330AACB6D18A25A7846
9D984799D130B5BEC196A23123BB399318B4D2A836F88D24D6FE3899846823E6
A4AB07D283706CD71D72D330171ADA792E155E75A75348EEE15DFFDA2503C447
72003487DAAB5D9C3E5BEBCD5B2C139389EA1E172679B2EB1444E570E4FB2C31
A3AADCE73F5F0181BD8456E553AF718E0CF6AC6A28E2245FE08E8641C30244BC
43DBEEC6496DE182F8F914CFD85E713ED14AB7E9F1BFF78299D07C5C1572205B
598F5E10A403087977EF07D53BBD4DA7921C1210D2C98B7D3D11ACA0FEC3AD55
5140756C29A24A789A87ABF1698672D6AD3E0F12CECB7595C5E680E31F06B8DF
8B49F1A4AB5C77B5FFC96866641D00B0AB0281C7CD4FBD96E00784A852A32989
A63805EEEA8B14A64CFECA4BE788FBA88D839EADD20F9A893744085F176E43E1
878F89835BD324D3CDF776EAF4F2E07CC84C4B6A6EC0C35155CDA6EDA571EED8
BD7ECF7829B310429383B5497FF39971E0C7989902475E6CE9C732AAA49CE107
C713A3CCE7D5FDCB68063B65B26A95C303711943DCE9AF05FCF2841BD8E20EA6
1D28475F515B0D494B3B9353361CF3B0578398546C927D62A6E61E1F705A0403
E9A5D876942801142E6E95B9E2C710DA59618F442E4009B55F53BBA8345AADE3
0B6F236A3BCB744CEF08A998F91E8FB121DBE3B4A020C6E9A7B5EDA261865782
23C50EB478AC4131EE773248ADD641A983CA3BCD930955DFBE0DA8B9619E74AC
91FF3818954DBD2C212D2C708E9C9661587C8EA6D3EB41912C929018D4C3503C
BED9CE6D260DC546841B21C7842091EB36923F31341B9DF942E732F5332C6162
3DCBF2EB20F747EC99431D5C184CBB71284EC3CE8741D2CDAE45EE3DCB18B1DF
5F8B1351F3977813674AA6FA7B7ED42D65375AED5CE3785DD783D37A4028D961
1305AC1B94700C0BC04DD197DF85B94D1A14D2204853DD5017B2ABA6ED0144AF
AA79DDBAA9230C3B2CD654ACA8A513F352B24A37006F26BDBA4BF29F957B8682
D21CF1CCFCBAC8BEA39BF72E881F5CBA918F299A849F5ED006AA52A23114FD6A
E73B524700CCC455A521EFDAB11378FA57CAB556A4FC335351F930853B1D8F89
835127E6D5BE96DA47CE498BED3840267D7D1A70288C3CBA2FFCDF1A4368603D
69260CD366B9CBC118E355CDC5E86364FF13B34B86F0637C37F8B6FF0B0D28B0
49F33DA50B0FDF4FA8F2153C30DAEFB59A09821BD121F361A0BB39E02217B34E
09C281743C60B819EED0051D631CC75E597DBAD011C449044D44503C37149C4C
BFC016A8E8936023921EED7FC56841CFD9237A76D6C78D9BEDC7423B8BAEEAF7
8082472E90E01B9EDC153B42E554EDD8AAAE14C6FCCE8EE99064EF3CBF68D25B
0E9FA4FE677E198B66757D72D5EADBE16A9B432DC8D7FAD2ADB181B6FA6021C5
1CDEDF8642BAE68B02F45617D8511F94C19D4110E183542CA76DDBAD88E69D2D
C27FF8FC3190D55919924CD89FF87DFBC54BE35E31946286F802ACD2F58D4E5A
47427C40C3D66CA13092F3490B1845EF88BDB22224DB751F436DA24A2EB3541F
D4CF62460B4C4EDE542BF4A17E92DFB106AEFF870B0726827D47021FFCD2AAEC
351545AF6706F8498F8B7FA86B35AB339ABB48DD4EBC17DC91AF265022039C88
E07AD466A721B175FBA0FD900892D103769FE7C545D49E68B74B883E91EDF506
914F349B72E664AC8C8EA9350A9FD4D4C0CCC3859BDB788C097170F5F25AAB7D
457910DD7D3FA31002F1F7328B2F81B82B51CD473DCA54AB20CEFABF0A301EC9
F7A07D26963A85F7F664FB2356A2D379E5B23B6C460CD8666B261434B56B8EE3
C13B1EEF396F59FB007CA71808FD4DF63FBC668B9E2B7DEA0E9F45D87E787DC0
ECE57CB7B2AF041B8FA750D06B5EFD12558BFDBC199C00D72DE760A98868ACB4
B92759259C38B1E4AD205C8550B899571D812F32AE4B15D172D0B30128964875
3DC1E9250F5FC77A1298A1613E32928777B1D5EB522C258B318E8D3296CFD607
B785465647616B06B01D0E8104D0C499ABAAEE58B21F857AD19A53F6AE69D489
4860169E3FB9F6B253F056A901776AA47D8A986FD1AEC3308C6D2C2B01D38A24
77527EFD046C89C88E43DE71E368DF1D347741A716BF3623DD3501319E07A7DD
BDD3F7D15135701F576BCB5267F9DF880ED342A3D70C7DDABE98B213EAA0F4BB
F3D66D9374833A6376605F47286CAABBB2887B24C190A1858267B5D6CE63E342
3C73594181BB8AD7FDB639F4FEF44A4923ECE3552643210EF9E12BF80A29E52B
5664DA5AB9BA57F6168EB379F4D7020CC7BD726141A24E406CAAA040B84F1166
3D6250C3F8846E1D5FB2E72455B486F88206728847B7F8FC0CF1487664B9D832
159F359CFACF746967E395779307BCF2B6EF38EA58B9B121CAD10AA544A7FE14
2F7FC8531C390681485357AD848E0A39124E82DB5DEDF0EE3BE8D73472BE05A9
58F30DA71CA3A5E50C330CE3A1F0FC0B9E3704A4B780BB2B531C444D75CE9A4C
5CCC89B4827BB1B0548376E1F25A60EA3AF2BA7C53F96C33A5D5D03F34A59E89
A3EAB09F3A91CD89E22793D92FAF294B72EF9BB34EC21FF050016A1D804982B8
3997E1667A4E8C6891730DE346EBD252F322DF0BBEAA28E89448D1B6864411F1
3AD333C3163AF812A45AC9A490C5769C12FFF86C12ECCDA6A7FA4795B458B9A5
C81E996AF366B25092AD5495582B3F1A410CB647362E039AA71F3CB294FA440F
C9807B33DF176C85A4612C37B3AC8E62BA4676860D0FC3FF8A8801E7EC2E30F5
D864BB07DCD3D8EC564103542F4B1464E2EAA7C8A7F30457EDC1F9C9D970BDF5
DD88349D475E194E632FAE8A1FBE0E749BBCAD6110AFA7A68A0B39EED7C3C976
D8343FA381ADFD66A53CF866A410609286A46B6F34BDBC9F57937F128B1672F9
2DBE6C5700AA20610401C8EC0CC9FE150645544B3BBBF70EDF576D4FDC1DDE7C
92150A4C8903D3F128148FBEF1C470E81BB487AE816C771D616C82180C9EB56D
E6714EBD3EC0E343BB164499612322E209205394816BB72D87EE3B34B4115DD4
B34D3D6BC021E852C3A8F8B2ABF8BFD2B4A0B422CA67D992CC989F6F9D2BAD3C
05BC5A5873890DBC261109E6BFE3D0246A98F9F47E7C9D5FA16C05D4111D389D
9BCCCFA334EB04721325740FEEDAE5EB82EC45B768E9FACC930A1BC6F1680D94
D42801F5468F31A6071381F02370BACE1787F0948B2034519C0A4C08DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D0D6058151285328
89B5CD42F763105DCAF788648D74B078ED080E3573D61FA865EBB3E287937147
C9BE9926DAAAE76BD43CBF626B54567266EA2F4411EAF07AAB49611D7EBD8CBD
F1F5449C2169315824D0A6BB0AD8D5662A85EE619178100F6F37AFB159DC1265
4EF3FA2D2446A2E1F947B15B3081FED4A12C27B85CC6A3E545A312C95C6F2627
0159823B33BA57612F379BEDAE5DE173B15C5200882F03A1FE6FA61A1B3F4468
7041F37ADD6989E85FCA21B588ECBC54F126834654AD20853F11A6AB840852C6
9B0516458463E8C58580DA921CC84DCA9C4DE27B681970483A2A2E8BE06358E0
BBD553D9454EA8BE0A8587039B95A5A344F9EDCDECD6B5F6907657BCB470A304
2A3655D5DDFA9138E7C6E4B118CC665F4B861D3766A2414007C963C65C70BCBA
DAB10AE54A0DD44C28DC4763D04D61EDBD52292E6028414C7FCAEA0A7E62E4DF
D5645313CBAE9A863ADF8127F1FC35DB9CD34EBC684818AB259FFC315839277E
B107BBD3E6EB771574CC29C1415B4811FCBCC2EA6AD5BE04886842418EA1872B
C169F92A89067878C5ECA2BE88D881CC03929299117F82FE4F8D747109F2BC54
9621EA8FAEEAB5E745E5CAF9DD3087C4764D41F0F503DDF0F46C7CA67023CE05
2E3296ADB222FE2151E375731F47B6018CF32DB1F7AC0478F0A9D13C11D38542
D397B3D34B2D59D4B2A379AE1347C5A1FE39542C99525549B30ADA383485030A
EE93AFBABB827D996E563EC2DDAE9AE9D984422D428200823D674B1893F03384
89663E033545AFBF576377A48059E6DECA5D00BA874DF5039207DA39BA7C9692
6AA7769E7702305CEF74EC07C03AC9B7D8328977A2F5D9D63813A994A1F9E8FD
54E8D967080E1EA0527DFB9564EBAFB4292516657B11080A1EE01CF75C43A202
003126983D7E5049DB20BF5BB1E2D14E3985D2D448742631A0DD067F416CBD96
D8705D5108615DE881F53F51C9B0807122846CB7C7A03548AA0505F67A6EAB2D
85E1224B6CA124989F106D85DEA26E8593730FA3F6156B914FC6D2FAC6B2A4B0
C95CDBA6575225199CC9AD11D7A028153A308601BB35995950CB00A5EC95FC4A
76220272D548D05150B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDDE6ED5B7A3
31AF7237DCDC2483E367DD892F6347E5FC21295B65E2A540432B97CD7F69F767
A67AF3BAE02C93A4D410EBB91EB3CB214F4F214DFD130D697972BB11E9F0FF45
52233B804496666ADAA0D84BBC6A705A9C77B52181F10FF86D3D7B07DD66C717
D9F02BA4C1F8B3B06D204AB5CC3944DEB241F1FD9A5FBEE5B1F2620B814FA2A2
2A70A7204D9E9FA8728D4BCAA70FB527B440C0CAEDC181359BC2D4AD8C286AE8
F24B4C1AC770D3C56ACF5456D1E1C30B2506930DFF22B41D6C75698D18ED153C
F2CC4A73C3F5D62536119B5F7E15A4207DEF9096D27D3D6EF2322CC7D54C426D
3E520704A5B0FD809F2C02709DE350D3E39C9D5C62A298B8BE48AAF79E7C22E2
D14BDE2BC816B49E850ACF32FFBFD9E8DC9D45873D43E2E654A41B44A22874D1
9630E3FE3A991D494458B14D051F8573328804790A03D98CFC032242FC6E2627
C754B79F4601DE1B6FC0D6DB7692A30B21BD669D367C6FF13C336537B67F2357
95800CA8EF1DF18B65A82A1D003242430EB6FF1DBE8C3D96F2BAFCE65EF058F9
C71DCA9348746900FE665375E9C805A494EFAE4CA9986794B83227FD4117B279
84A141A4B19E695AB476FEB72F3EFC3DF5F9C35B0D6BD335FECFA17526833025
71A60B1C9951D8A457A4F1CB344477D7A6516133299B927170DB0EA31A11EE76
34FD75CAEAA480F411AA4C4BCA1FB7AC7E65D5A5D8C5FCFDB41707B035520A5A
B0BF40C2A15E2F739D73D4931E3263E89A0CC83FB6A41EDEA073E552117442D8
02DF52CEE62D333C8680E45FBBDE9ED6E7F01E5BC22E802FCDB0BDF1E2A8A533
CB7D6E917D674EE5C046727F6A3F7C7EBE4EFE700BAEF06637586AF5185655D7
1592270DC46238DC0DC4515EA969F0A1407C8FEDAB69BA3EEE3097D5B123C627
7CCC673FAFA4504EEC448C29A8F93B36FA63BA313949DE5CD8790A1CFD6359EB
FA90EBE9B7BF54177F19A68ACFF812AD00A931626533380BECD9A77158110E3D
15561DD6C244D36FB6F2A10673088AA9391CAD3D4BAC7001265D89C2F898AF58
91402BE5A4F09743FD2234D37A9E63527CAEB1EB68F8C5389BC7B4DDB1BE711A
8FA47CD65AA53D6253DAB94B98B47A204F3F6E7362DF98165B69189829176033
2FF8D4A862142B7A895F9DB67F41582D0C817460440E9BE7D223D4E55C35805B
79260E90985DA5E5B2F43DE775602DE15585DD5741BF8FA5615C67DCE3740E00
9C06CE3A8306780B31793DC3588A170E5A20B20B7C7E7B74D4B52F2C03FE2C63
B1708B7866DD9E8FD9C6F90676BEF9C36E083C0034671A4E268BBADA4583A16C
3C57DB5F72093F76F9FE0B6D85C50D9B2C4875701BA03B7B042C7E63292ED9D9
954D71AF0B943E3C6B83B82EC62BBD305B6488B4B726AC41950EE2F482555BF7
40EFD19B8552B70046123162295E5C1B8D5B1F8E0AC21F2EA065FA879F533C36
4C054BBF7F35F0B627DDC5FE2AA948AE738E07D7CC041AE13DDC40D378D93B05
6E4D96B1E598D949CC0520E4BC324C436303E25F013D1F713C24FA7BFD9BC3F7
7A89F8EE67FC86A86A4DE5C59198F5124711CAE1F4208DDE790812C4251449DF
EC70677B8B3BDD77FCA2B98631869511DD652656AAE94C7E3F4E753906B3088D
008D7E2A999F4ADD8CB19C27CA6B1929BCF6F52BAD537EB57E6B7B0934D43B9A
24F5A9BDEA3D6D9690B071FF90E75A9BD114ECEAE9E2018FFE5B97E3F9B57EC4
71115E3B32A41A879A41C90FFD91A30625AE7C9E1E3501BB5D739AAFD4DC3147
EC63E3179574E6CCEE1FB1F6773117ED1243332FE1E3FC91864C8AEA7916A726
F924AFD84BE27CC51890A13715B7B5CCB828EB08D9A9538E1F48CCB869DC2181
26956CA9B66DC23FBDDBB5FC550068417C156478E76014DF9C546D9201261AA7
1B05F2E629B6BCC46BA91937FA1C7D5A6E4647A70CB32D9A9EA2796070A56B4C
6445370A3F1E0AE7F74F1BB33955864E470E9A2911FDA4C818B0A3812B714D90
25814369FE71C3906B189C2DFE3DFB24004666BA8435FE10EC622EBE16E77DFA
1ECA64BE4C153AC91451F122BDD5C724CB802334CB2B38ED365FC4E08FE4C042
56827F2B19FA865D6FB094DC02259344C0663016BCCED66A698E664B6E422EC3
0DF812D8CF9F07F4974D5CC9278E3D3982E45D21DE1CBD7460D2C4421C6507E4
DE22C24947C312EFBF84019CB8AAF309253549DE00B8A092ED646F3CBCF00FFE
1C981EB0122C3515BF2776B5B833FA120AE7A81C64AB2F20E7735CFD4B13C2A8
CBBE519A8F57C6687AB3639219910900DEF856C43D283247162C392D23E1F183
C1602259E6390F359CF18F039F3026354F553B1FE5366C26CD0F254CD8A11ED7
7D05FCB64F261AD82C4DF999CDB8524EA0501EAEC5D21617E9E56D6801FDCB62
45E566251AAFDD0A84155B62410DA5D9D10A21CA8B7001A24B5801BFF9879441
A81C2BAA74E95F79507D65838598D01F66D7743E3C1CB6D013DE4A201A150213
ABB82438AFFB084C8D099A75D89D6A89E962E01BCEE4B41F30351159C5FAB596
0A2E3E913CC7EF0A07843E37CFC27442EDB3DD9AE5B2B077C4245513CE965D1C
9B09EB62FFC06C3233AC20FADB3505BE2B8C29DB3630B72D102AD6B2DC9BE98B
8A5013F998D83349B69E4DE0A3A861D52D8CE2EDF98FA2196ECE13CB4F39641D
55BAC02180697B632E74DA5ED29F290C37D03C0EFFE15D0917BB65CB6E09B76D
BAE3AF4FFD6E2D1B76DD3B13C37D2D54977748622922EA97B59C1D004F8ABF17
246D4C8C41D27CD2C06EAA2577DBBD57648E398F5A052751A5B22688404A5C35
4A11BCCD8A5E225D29D453D8A0AEC70EF07B7B8D3BD42BF755353F893CDA8E7F
5F377C51A8FF392A822244F5550DDDE2FA0394898879AFEB695F8C92EB33721D
D3B41058551019C4E123F76DE89C99CD0635E33CB76E5DC2882CDF9610932E40
8FAF53A7428F28CA6FC859BBB8440376547482A1BB752BCF90B12E50FEF3F5C5
6140966AE46B713D0F7BA5129A1FE5CDED325D4DD939DDB00630FFFC44925311
1FA8F0E714784C3D073FFF4BBC2B12345A39202444EB3DECD89E871E8B5FAD8B
B153024818C449D1175755ED672E32D303658881A9C92C09B14BB2D87AA395EF
6E1C8A6D3FDA0817AEEC11C8E1544DA74B369425D80E2A4707E1D31125C9A277
DB7ABA077B0AA328E3B9E203D6837046ABD57717801BFF29280E8DF8D728D7E1
456BCA6134F5408C6D211148FEFC69658175AB69C72C13AC5E8C97D2889804C9
19DA628C6A5B0F4F626E8935AE2943365C505BCA8137E42846577F66B459169F
E19DCF73C5380BDB1F292A420EC9F149FD6A55F1A51A895E2858859721116246
449E3E04993FDFDC22CC8FC032E38B815EC475ED194E34A31AD7C1FF48617243
9C132B32E829D10EA969AF62C711C5DC5DED743A7ED41E852DC45BCA016BD811
97C69AE05B9BA0D7E90197A12DC144FF69C587FA522DD3CC1436E2109EBA9AF8
CCD5C58B548FE6133745BDAE9395B7E2DEAA16597E0264A7F978D83065BDD909
7F2E659FE48110DC766F03DBCC2EF01DEF4ED73A8A2F03FB0CFCC2425C26A601
78B8E8F81C48D8EC11E458D64A6C42DF8160C467A7EFCB0CA56ABC164CB4DC95
3DEFC2248729B184761BE599B45656E0EA348B0D6BF5D5EF7738F88510E8001D
DF0750125FBCF26095A320A1071176B201AF4D97A7DB4E6BB61E56591223190F
13A772ABD2F1CDB3E0A35453EEC505A64E4AC9B0D19B39BF010C61460D47AD5E
325197F08B2ED6DAF07474FCDF67A10B68E22BDF53999F1101EFED7759E39C83
1DA47BD4A04494337B7F921741A4F2D840D0F744A1470A7A67AA5644EAF8769E
6FDA5D5AF706F0A30AB0EF438151C7D39682CE23E960F2CF8E1D94B543515988
4E743DECBED602BF78B6938EDBAA07A27A116C80E837DC740E86068952F0A57C
3B603B750631B0E76083832E083EF17DE3C42A87CFE82AF05EF4832B592CBC98
09C6CFD90AFB12DB06411FB9E0B79143CCE20C908DAD730609D523675B596817
F2378FDC38E5F9621B41A27CB8FEE8FFC1A2FC48EBD2582A979D024649C941D5
9CFA44DE813A3BAAB63A6DC5B59CD7F5588BF938C4E365335A08E4F940CE9C8B
0DE788BB2AADDBB4DEAF6141D460D1FE4D5BA9825FE6E4FE5420A827D08C98A3
F490025B20ABE6A0B2A20847751DFC2986440D716CFD5D2E9A57D84846762C9C
D2D8564975D17D8E0A1227998D4B94FCA8042756F97AB4D1D7EC69D7858D0B94
1CC83FDAF4DBFEC49C4BD7EB68C1A456DAD044021E04D419C671C0EB19A35AF1
49CF0DFC953C2158D476D0FE0725DEE6886BDE038E272D555323B5ABDD850E11
E9FD1C6DF7729E6E985765D1246A4453042FF7455004899DFAF0BE19102E6F61
11C5CF960C1336E30CA4C05B1532C6D15624A83CB86FC4DABB5F0949234EB51E
B6E52C6840365835E3C5F9582E3BDFBB41A27B1BD42213757E16CEFFB075813D
F7B7BA6C66C0AE45EE3DCB18B1DF5F8B1351F3977813674AA6FA7B7337F2D735
9D881F7AFCCFDE78C4D950AC4F5A16E34CECDF508F3EAD9A57AB12A9A916D7EB
1B0EBCB743ACA7309AF9FEE4E81E152F9E1712A25EBCC360750585E50A56E2D0
74627218388B1327B6AF6AECFA67902D0150EC9BF11003852B5883FD2CC9F33C
5535522E2BE0AA2CBC7EF880B60089D4C18F187D265E8494A80BDB1FCB3ECD6B
0F6D0BF513155727DD54F457E9C2D20417DA2D04D7F1050A5B9B4BEE1ACDB865
00AE72576A26FACE3A2E762C08F5A26B783AFA95962E9438FC3B10239FC8BE78
0B52071B481165B32528BF3209DA0DF713EF4751FBBE4F9CDE0A6DED8311D435
5BF65DEF10B20843F0B1AA4BE4B16B1D5CE7BEA436FDAF8EDFC92BA4E94A3367
17062614FA2BFEF596C524B327969A71459F9B49AEB06A762AD99555FD81A22D
E96084D7181957F70B74CB84912E47C82FA1F72C6B470701C381E335C2364CFC
EBACDD20C85C9EB877A5B3EE0EBAE8E5652378AA6CA84F0A02D1B93FD3A30D35
C693B9AD261C3CF603FCB87651205D6CF7D35FF4BC0293BD16FACB5C78714AE6
F776AD12743DCF5777DE479B9877082D321C9FCC928638FCC2FD5B04E794B74F
B52C492BD8F7DA28DE71D625BC1480D494B8CC3051A960ADE0663431603335A8
DD49D99E769BD738563FD6CFFA37FF627F4756AFF88FF10A172C60310C10FC17
4DED03A449DF4655802BC3265010F286DF8660274B8943C4DFC75455A2200DBC
805F99EC797F49979E2087F4C8B553325437EF1F238C8C1351682ACBF252CDCB
515DA39081F7A1CB7B7BDAC189A0568797D0A56138DE4597AD70CABD8E491D8F
710C5F31260C5AD761E6DF3CFDA1B80945B9CD7B18C88E1931B1D04524CDC4DF
D91255B93F8DA447506ABCC3C649EE21863E4C426DE4581141CC86119D2B31A9
4BF39948D4B3688E588AEAE48E2D6C8802E957F931995C83EAB1684CA637424D
C59853EDF0F3EEA94867E63CC03ED3A5C17C70BBC9515DBB6667A5DEB3C95B6F
D047603E302D3D296FEAF54D457AB450649FF44BE5BEB40B796AD36F4FA86F33
1E4BC14C95C484BEE7FCFA9D92F96615A5922333D102DDB3F48F2ABD30843BD0
7A191CC377126A41EA96394170A5BF25824F7CC6FD2FB39619860EA3A268C57A
3689F66F0216EC69917215FFA0E0A37F242A86EABF81AA379231DB5D3C3328BA
0EB79C88C7611B6007BCEEC990DA88025400B0A616217FD20B41AE6B28880F9C
43CDBEF790281699E31C3828044F325AED5CE3785DD783438D89D92DEEF30B11
0A08B93165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B51022372FAA078DC8AA
B00146550EE703A14B531D522A916140DC786D901579C497C3EC6D98BCE6B049
7E4A4DA0E695CCD0114C8B49875196489903BAEB958166DA999573ACDB4D4833
03C17560B4222FAF139C90CE7F8D0DDB2AD5B440190F11C953C3C8FCFCDF5C20
A99F85CF1949EA1EC89F0A6EEB2AC5F91494F51D54FDC55115DCC4C45344C851
2CBC8FA98A881F22B81F1A7B425686367092595AD53C8DD8710ACDB3786A919F
B356CC2695CB277B0B818F0F735BA0468954522498086CCE1E87A94354844855
23EC18B9724732043C890248711496B906E3EE71FFDE79FFCBAA6606E892B2E4
1A173AA590B6C92E254B94FEC3FD0397C7EDA10C345F5F68747E05DDC8CCFAFC
FCC3A05017A993D91DABC265A39EE4A494BCDEE07252CFB58374934CF2F01C5E
EFBE63A5C3B6BB37221F748E44105AC946A2667805EDDEE005AD1BCA7F9663DF
E52D3E342E7802A5BF4C9235E28F5D93FD74122FBE17C51078FB07B89AC5220E
DA163A25BD6676A0D66DBD9047C3BD0A03D6A06ED9890104DA2A575EA45E16DA
2E1FDEBD1E0663525D6DB5D83E17A2EF9D954C1DAAD9BDC21D31E8FACDF70F4E
CA4EC27770554DB296C79D6604875FD9CE3E5C2F3604019C1E6EBC56418922D3
7F9EFAE47ABB2D3BE5F7F9BF42EA170FF2EA98485424B855AAFFFBBBC4375601
1358C467EE03A929F373697CD318EE0DD04E1A7B7EE08A4211AD764B9A8D9CAA
0D1DE3106460BC92E4E45DEF36C266E8D4367454CAA54EFD38F6228B461690C4
CEA7AFF4075A15327318F6A5962CB9AE8BA6D61ED3727E406FC07C39CE6E1DC8
3F0927DD241E10AD24B5626487656C1A822C24636E6FD8026C79AC276D5AFCFD
2C181150E11E876917EF04AC65A7F15C0F98CC14644E7592629BEAE54B6FF1BF
A35BB75A3090201FE6604E9706868E3BF3E6247DEC4D4ED775D6A01D350CD3F2
792ACA6EE48DB376528012DF50DB540EE1F4D36D43EC3F2CF6D0C964CB3FCDDD
E264E04EC3B405A158F235BDDD5F24949CEB89A93916C86B2A9DE768BEBA296D
037E1875EADCF481F27673BA7F253E0B2337E6BD6C73D05E979D8392C29DD5D1
EE9526E6C38D5C2B0E6194207C35F3B014133645FB9F8E53A6E2A1CC08CED27A
1A6AA65EE3A1298A8BB5A1E6ED5C525EAA1D903FB445483F9ADD7994C11CE949
99A3F38C88115D6082DECB6418050AD00D19CFEBF7C899CB6DC0F30CF38F782C
96A4EA2CA52C242507921E828D5EC28B1D352911A8E507E8B7D80AFC1D747E8A
46ED6B318E71813F2C217744E8D2586E5D82BB9E05390DEEC769C63967F79359
D1B29407F762CDD5480E97BB4606EE953350A75AD01DA8E2D4547071966D5E19
09ACBFEB342BF961147137F29D0452F50097ABAC30EE74060BE1BCD51B500B94
E95873D7CABD1A38E83705D3D364B37D0664664C6FF0AEDEFB0648BF74873328
B5CC351E220C6E7257BBAEF6AB7B413FA0EBA36337BF404B153605402F14B545
51378F52F29CBA7877D038B3D9F60F63119EC9FA765E6E318CA3DBEB264D669C
1BA0E3A080CB1E4463CB90DC8A841CD8A6797B1162A8E8C28005291E4D768BAC
7378E124713CA18F333704D7277C0D6FC28B5434D6FF1A1EEE3D5E439D7D2089
3CA8F72733B7F3B44F48E78519E114A8BDC93D40081D11A676D738B40DBAE762
0F27C3A01F2DA8A5556CFDBFFE346BB0E37BB222FB8F4E5FEF51F9240CEEE5D9
5C3B2A3D6CCE7DA625F13D9C504668753AA079E9B24F0994496CD4A84360DC9B
6ECB0543A5143464DF9B406DA49F835841D729698CCA8E164C0B4F019F2DC10A
EC6FD65A2E6D037E1875EADCF481F27673BA7F253E0B2337E6BAC2FCB3860E9A
CAEC0BF95204DBF32AFA9DB2C058F7CC7F262C560FAC2BC019A1711978AEA4FF
9F8E856950C14FF348A8B34666168BDBB207CF4F0F00B1BF86DEA442244AD294
86FEA928C585DE92E03CD96A7DA480959E4F8348015D1F8D9591F91F6A2A228E
B61167C50DA54B5B97820B88A18B6F5E9C82246C7F9FDAC727F7C1E2D97BD87B
20D735CE102C0F60A9D44BFDBA7B7F25D576445C5771F654CF59FB94240B438B
67BA2B72845D3946BCC044D0F3B58D299E6D6FF277C3A92EB3F7F852DB888567
C1C1717D06FAE23DC20555C129B8E81C958E99FEDC664150D66C7614AAD9EA02
AF73118B71D0CC059BFE0ECADA74E5E10262F9006D5F16497CF7C5B8A707F30D
E0CF72BCD39D6E934B23A5C5C87D0789204FA96E61ED1E128EEB51D0C09F89B3
F755905EC9C1A8BB4219F49EE8C789A9BC7F63500C8A735DF316A6849D2C7012
9929360F17F612A62DB1068594DC152E58843483A8CBB0DCE6D06FCC2E3AD7BB
240DE7DFBD1F17FAD2CFF394CD7FA1132EEB0C7442A63B99930B70AF8F851C19
AF1DBF25B8690226C381D7064768461AB477118891783A4C13ECA61A8D261B3A
74307AAC38B50C0E552729B466CC044347E34EA72ABE84E54340FE82B7E0A627
1CEF36DB6087C93FAA703EEC7A2E1E0CC035BE26A14AB37E2B9793E3E2CDCD50
8876E200F3B1C6FC0878C3645B0D7AB9E1FE029A8B85F8063CEC788CAAD96571
272846622922EA97B59C1D004F8ABF17246D4C8C41D27CD4A26A92183B89A5F6
281F58DD7BBCD7B39756AB4CF8D72602A5B18BD06CD658AB4AF27B1BDB96A42F
A469C5D5B2D45FBB8B7C18E2A7B55A71827007D54E603D88211B00B1389BF0BA
95B2A29E90BB4820B6AEF318B1F51BA7C880605DD868C8F663872B230E921494
B129F80EA04D199419273494A85018A22C3FFE633082B4FC549FAAC725C802B9
958C2565390A99D8E18AD621A0AFC48D8839704B0A19E8CBD37EA99E61CCCBCC
0B39312F234D4D04FE58676BE7D50D1C98764EF352851111B13DEDEF95F7E5E4
D07E680C911A2B9B59A84E60DF00DC474B9DA4BA6DAD78969B59BBC39BA54744
2F5C2B68EA227AD2B6F749BE17B27D8E8539B49D420B6A31070F7B7D545C76A1
D4F40149E8D5C909D1868B3D10DE6D45F2D9824B8E5481ED7A50C5CD9B08058E
3EA3FB4A05CB93E353906DA6F96F6138374BAA37B122B30A3B8E7E1B4B033ACD
B99D9036369269BC18D9B550C994C9F720528CBD67D46C68BF305750BFB01593
70F5A484A9C99F970294CE5B1EFB5B3469EACB167C30F757A69F82243D5AEC13
18DEA00ADB05696CF8480A7A917E67330896D116A4C5F38B98411C4125EF859A
582CB416605172EADFBE58B5E06C99292DAF96E3F3D11B9D30F43E0ACBE4CF2C
AB7D8DFFAA24AC2BF9CB222AD2E8402325112C50C338ACA5144DBCA462242326
267147E8055E0D17EF7FC3D351E583A5C24604D42AEF01FA70C706D0998B5768
625D67F5147A4CFBB84379AC53B02AEA4773B16CC740546224396ECAF7DBC08C
1F72289D2F0F54BF9D6201C7DA9C846205E522DDC3FC90FCCF6D6AD0BC99936D
16FFC27B3A08467E29D1FE36195433C46E74E3BA5C1DBD5C054401D1464D63E0
8F25F961FDA058D5E997277475B385B30B2AAB8F3F53EECE72FCF532AE8BBF09
E6CB3629C70F948A58AFDBE367DF9865E3F5FCD76E2C1B7604CB7B687B6357DA
8D00A6325A3DC65A1574BC5E8491B817B27113A012BCAE80A442B9CEEC1551AE
8A483E5061294B65DC2956AA0B02D8703D2C740E929960B5F0AD71B23EDCE753
9777C63378573CA78C559BBDB75C3CC77E6676364DFE4FD4F8786F913DFF9B41
E06F26EC643AC67B3D8E0CF410F54DA4C538AC4D7260BED7A3D7D25A2B0C27B8
D92303C121DBABC5F7FE30934428785466AEACD6DB6C79797887401B73740EA1
86D88AFC4A87A868BF537A6914804C6B1873FACB0DB5646AA99BBEF8AF1B1546
DBF1CEF772D8345BC492D7C84758FCA6A309DA464318F5A58D2A607A9BFE872E
D87AC88B14548E795BACF3CA1983B3A16C0102F260DEB282AAD6EBA79E856ACD
40001E6ED73F2EA3132EB84619043AB76FADBEA3B8774A0E22797061AB5C34A1
7682568618400F057DD038D121785ABF669BACBA32D7E0EF2618E14D46386147
7A9E1897B78DF58FA2BA611F68AA0F0E3F9F2B36EF94658CB7D8871F653B3C82
A2D397D9B6D5980929A59DE7B0465B38A250FA94A79E60899A2FA221A134120C
CFB289468AEE41F13CB26026A3EE93E8CA505442AA7264196811B28612DBDD10
0BC3180AF20F666F7CE70BD839D70B0E72C4F58B97E6EDD4B4ED1204D5CBFC5D
665C363CC174E858BEEC37AFC41C0F3AB12519121074826D1D991BFFE27ECD7E
F160CFF5F93A3F5A459A6B0C4C6AB17FCB20306920788D2F3065D8A90D76CB7E
A927648B72C4DCDCE1C48BF8BE2B010C57314BE9AD53CB517333872F1E7BCAE6
D6ED60F514A478BD458611B60641B2412EE1AB9D7497868FA72C5D517CCCA7BF
E9A6AA9BD553D6AE931B3FC6564E04B00C512587BB215ED6A7D05BA26E4C0640
349654F661B3A524622F1EF70612FEF4FABC6940E7CEBEC114B6F291C8287F02
A1A4396F26DAB6C8571EB665D1F60E353D725420119C91515AC8E8818BDF3F19
CEF14F34A61F3CBD2EEE9871F510FDAD5BA3E1EC5F1CE78E082015FEF67C1828
FBFD1E07839B0EC52223717E6EA759A7104F455E34337EDAA90462873D7D242F
469C1DFA069C419D11E01C694BAD3C3071C497E03A20ECFB319A0D9011ADBF68
B67C9A33F8676249AE9CAA541BFEF026DA9A8480A2E47E0D6EC97E41EE90AA98
C75F3439A1E6BDFDA42C977C4A020CC2B6F0C5C8AA68EB2F660C424316CB874F
FBBFB9ADD6A9A588F30DBD588B337612FB32956A7D1CF82A5028AE5DA5139E8D
BFBEBFF644019D08C66149274AFFE12C7A87D05A5163DFCB0DECDBA90B15BBA5
61DD1B6EF576780D41A99E5E09087A896C707073457CDDF3E28C3EC624D67885
9930D7C9DE2AFEA15398DAF41EEB0662D4DD16E0304E432515DF0BB1B9271F14
2BF519C9DFF11550B97785CD19BA781F4746163DBE32960457F94B55F6E29093
B20AED86B172253AEDD55D3D175BD1B949FE60CEE89C810421697CDA51A5CCE8
FD8F891727D1B2D57A49C60DD4FD67219A4407DB960A98D6418CA1D6E10E84C7
542101068C459B86EDCB36404DFC58DECB037B1000141C01EC7536F8230A18F7
07B1F1BFFC4B356494C4EC934DE5EEA08530E3DEBA8EE71B699D16DFE9901520
D089C79230D2C11C8B77493F33FF0091B677E25C3A78E6567EB5C5A892059060
8162DAAEBB398B01F92A04B648EDF27F0D3911742FC0A5768C2D2289657C9291
E07D1836D664C1C75DF7F16ADAF53653D6E097F4C10F198205BAC41CC5AD0655
EF7F91E292981680142C8146CB32B1AD13BF298D0021FADE1526959A02F3CEE5
40DE856E9A862F5D6A4A9425C990B3D01794FFDEAA7DE05757D3FD361873A460
895378647B738F553F81135829797CBA09386E323898AD294895E58B650E823D
F439E66308DFB80AF0A746F3AA48F529EEAA13B19AE78E502CFABCD31765C154
199216E306BE4E3EB7FDB65EF95B7C5E1798EFFA98CBF0B16DE41E626A8F4F70
785D12F65CE7F06CD9D927EBFB5C77BF072BCDFB35FE0A1CC75F2F2ADC57C2B4
2AD862A092E04B114CB780CC07E8B3CEFA87014077A4805E6F068CF2025CAE0D
03889EDCDD324E112D5BEB28766C0B807B8FF1F3796AAC50116B04C25A4E5B8E
0B0972AC8458B9DF82C0939FD6A842FF6BCEC22ED954560FF7A1971E39FD51C4
D76C6EA5BB6598A0BD1C6C0062488763FDB07939C52B0AFA5B12BB71EDF13DF6
10C6F36A06A4D2C078C7D4D8EF5424958BAB6798DBC4960AE139E15C34B10CFE
0788BD0CA06BF51FDE3FF7479B7CBD57954F4ABBB6822254F896BB9687C2661F
94B6A9664510F1DE54B5372D7B790F930D2D1851453C27096B96AF60CEED8968
72A3F8320E88A7F4E667982C26A6ADAA3A13D7D3B33D7969A92EB33FF2CE85E1
25361ECCC811521394472DEA699E2EDB0BC285DC33511ECB7C52B7B6D47042B2
6B5C7B7D12DE631FE7F2FE4EFBE0FD24EACF7FE3DE94CD50C269F967F3ED068A
6C48218025CDF8AD1DFB826B01AFDBF35D155B0A782263AD2DD482416D99A5FB
FC4406870A8C6F7C47AED5299921257A0B943A1223A9657FD2580D8DF766BAE7
93237EAE5332D9F4FD92732856B1F4B95F5FB0D1C1DC328365D50C30486E9FD4
C256F19EAD014FAB7A52A6281950F56F161F73DD2826CB3326245CC9ADAFB22D
C5D7DB4AC34A9FC94724EF82E49DF652B4FF498CCFBAEEE3DF70E1996E2BC487
0BE394625E6E15625B13F485FEF06D31B32068A8F8286A945773F5C59075B9BD
CEFC4B659E93BACF45D1A49845748D6F6F4C619646B14A25BB40D57C2B958845
B8788B6C4132DB52900657F018FF227701992647C9DB8E4802CF468EA0068316
D0DAC23D6366E798FF67671C829F078DB1088A304F87705A16F55D895A665F94
F1402E5079F5A678CEFFC8536C7CE0F0FBEAE30D0B7515650F5C6B34BAED3682
948AF8C982E0EA7C505A7E0368A1C37FC93BE7677B863F48D0DC18753CF196D7
1D50C7D3D9EB4B60371FA062571113FD363044F43DE9F56A2A8343933A6A7738
152D6DCE9DB8F8CB66CC75F710E7E062E84DECE4EA88FDA3677EF26E9E434020
4DB2ADF2B3A6CF8B096C6C030E29CC7F535CE88E5D983E4E08A84963420FE875
E697BEC92CB7C35656985806D564891780A7C6311786FD82331BD3D2D0C91740
19BC7861BB5CCCAC39FA99A0C214EBF86D2DAF50EC4F1AA832D1F868021664C8
56290B860E0BDDA198DE0FC5B840F0E39851F85461DA178EEABC9142F46192F1
99D0726525F4118B574DE9428C47AE870F7F3EFC0AF60E785B8B723C16F77F4F
3568097B60E1B12AA87A981556981C6250ACBDC1812004520E40365C85FC6A86
CDE9F7DC6B39DB37A7CE0E60F04ED9E86DB24896071CDF7D441B7AE1D7BE2A34
836ADD027CDF5266E2B59C170DFB52A09245577F997AB5766A80FE4ADCB86692
CB60EE071F0FAD07A8CA313685A002C5BA7A28FF59D38E105689D202C5C226A8
57F015AC023E164746AB688FABAEBB93C0A643F05B40AD551B340D3559E8CE0B
646D16027AF810B1A7F4E4FDBA074A06EF651D90CE264D55C2459412D629416B
28F91F74DD56109B4476799A1526D1A295B182692BF2E76A72F76F5EB7F76A79
EDC52D9F4383B7209C175FF3D4723A21A1B403D21542F3EA84CEC0ED22BEB736
3D527DD53487F68A5AF6D06DF7BD52EFC38A1F9511FB5735C3067B62D1B35E7C
991D71ED3BF15E369E45DD62FCEDBB2A8FB2DC57280ADD4CEA345D177D307D7D
C73B194DB0DAB572B5F4FB758AA290C79C2B8A53DA1486DB4DC19514F067987E
EF5D8D6DB00ADEE3977265FFC60C5D1899962451A6E03C42848DC1CA275FADFF
A3EDF0966D4A7F5738E26A49BF79B7E3A91418DEE483EDAAAD2D25F4063BD69E
985B29153C620DDDA8C891288EED4F6EC1F642D3D7B5C7C34DC4B525B404DD48
CE5751F50E2F3D1A098AF932FC13F802598BF1A04C3C79FF27E1FC259F8C8218
2DB24894A8A845880D031F1543042D74A91921B26FE40165E968FE95EB579CF4
303FFFD3ABFA5CBB693D74698431008A9B281D8AE4075D26F8A155FD9A287B38
091C64495F29158018D91CA8EF5D527207AB1709E1A3FA4C1EDC28145BA8DBEA
305C71530FD917BAE904DE76821B2EFB2FAF0914FCF3FF17110E87C90F2BDCE4
9DD8D6A89A6178855B6DD902D4A4293759EF4072FE79A87C8A8FF4D9F060806C
38B6E215B8A12314C69968744E8671B594D1E760170EF67BEA0653D92E21CC6A
F092C1A19A220C227E1B74561796FF68DCD3E59302B6CAC4926F051D0EE5EDD6
8840C6134EB89984A6F1086695CC90B65B51E7A79809A9F6BA5F4B34FDA033E3
DD4789A73617A13D098832C58EBB4F54F943DA2FF24F22866B64141C8B5DA393
DDE17C782891C2297D5B212A31754B2159CF5C104E137774FA958C0ED5722B9C
9D403D592EFF451FF4FA63E82DE36E2057DBA1DD5B431B12955E1A6FDEC932E1
2340122793E9EACD7BD177DA7118373EAD2A938F5D072F304A1F776F073E6310
2BCEC80929F117B05FB4114B5ECFF7FE22F64271B2938B95133036675ACB4E83
776ECB323270487BAA01C06782B30EEB9AA6EEFB56AC19C4A0E8E3E94B4607DE
BD34E5471463D4570D4E89F4CD31A93C312EA467473045A3E5043EB10733C06C
C88625A3813E3C37DDD271CA85A89A8057CC4F1ACA9704215BC5A75FC21D39E6
E191BA7548F713F09A95CFD918458C21396D575568E5E772ACDAC639E9437454
E5FE3453DD206ECD099AC341B8698E67C7032B9A6B6ACB9AB7400F9D072BD429
11A9B77500D6216FD89A80A57C38641E71D673717BDDEF6DF29016204C9D6FDC
7AF0C1A9BEA45AD2998C69275CFF8BAE37BEB1482EAB2DA6DFAEF53253549A5B
D51E4785A92114E8BE682D617EE310D3CA099353AAECC94686A54FE2F981D95E
91F7E2E23BF6A9012ACE73CDC5874374522F080F22480FF4C5A5A2CB27AE66A5
1A5B11384527173D9AD7542AB921572286EAB03EA7A7C2DE72A0CAD842045D26
01348F5CDD07C79D4D1DAEAC669CDE8F23699C4479F1554ABBE53BF531136A5E
DF11FA11D5D69FC1DD0F0A76679FB9DB93194B1C065C2E469A12E62F639BC467
2CD14717B2F2882FE9FB59B437B37AD5A4F99C4A91AAD69C1CFF1B69FE757ACD
126539978307E2C3659695A1F67111358F429F935B1578DBB7F37A43352667CA
D3CE5C108EBDC34F7FB236AD3727CE9F3AF4341D19280522173BD779B60A7322
73B9B2322E4496428ED0C719219FA04011FD355AA3C99E5C78984897AC7C4E07
F45E19D662E81EC77BFF01AF6C48FCD4D922D9E99901B365C060994C9D8D2E20
3E3C3114A8880ABC2F463E62026973E6482F801FA8715FC91FFA1FDC522582BF
A89BC3FDBFAC578A525BF8B960B22DFFC19775C058BC13013E94942CDCF8E20D
EC5CD4696759CB07039B6DE2E3F890851EB3E99946A8EB001A4697B03FB0B42A
4B334E548D971774B3D1F94A5BD26ED839D2B51C245D8AAD0228D217E064F7B6
7DE5C7802A65BD9F79B7D033A24EBCC223204571CCD042F0C55686EC1DA42F92
372BF11634D0CD84A1C672841B659905782EBE39DA6973E3BF0A146972039239
F73B83E808045730639A7A8331DA86D2C1B5D2271669F3EA25B39CD927968771
EDC9EF952A81E23ADECDE18846517AA7D0E737B0583EF1AD01F434912D70D2CA
DDEED85B0B1CD7F60EFDD49F241FCE31D3A18AD542229845132043D563509AC1
0F265651953EFE1A6CFE0FB94899796DD28ADD251D1A151B71EDDB4E4946BCE6
FB54DE01045F58FD3607966692DC1788C6D49F1AAEFA49BEBF3EC507F7FBDB1F
D83F056774CC0B85DF8F3C93466F6D4CB79F699028288CAC9729239A938F3DF0
82E4785BC4FDD997480784B84C20C29043C40928939AEAA87420FB0F691B091F
4944DAF827831F8A041674BC69E222854BBB56B75502DCF0530658F92FFB8FFE
6313670B73014FA79F910AF70D197F0C458C0DA8F238E56610FDFD62A92291FF
FE47C9ED55722B12C8E070FEEA2648A9AE95525065CFD5A29BFB3620929FFD88
F15A1BAE76C6EEFC79C130434A2D8EE18855D22FA2B5478D80FCBB49386EB93C
B56A14BF0BFD891DE6BA8E5424C8D0A8997857EB0FFF12C4E1593AC88EB701BB
7922D20D559C86A7E3F0CE0DAE447518078EC81415AB821FD2369BEE9548137E
25CE456BB3AEC0DED0163F02FA994B8E4490948B2E8E14B121A415BF549AE7C1
E4FB68609BF724DBD20CD4D8D586CD9968351E7F07AC51DB2BE615EEEF4497E7
C2139AB64FFA19B70405813652FBBE33FBE5BC919E0BDA38EDAB51BA25F77DFA
445C2EC015310E57FB12C7ECA8F87DA9A280AC6F25AACA49BE9A25E2AD280660
9A91E7EAB64B89DC98614AC130DDFEB95302F10A23C47020A8712E057068BBFC
E153251CD4C1A4FCFF5F3A9CB2351A119922DA528FAA04864A58E00B4B28F054
FE0E01188ED5AD7FFF6131267CF0F8E36E5CC7DB656EBC2DEFD7FA91D445CE6A
8EE979256C85B055F711AD4B7346086E957CA8FAADE55B91AD21B168A0485284
C483AB68F12AEEB8586CB87E1F0CB447DF8F33DC61135BA3E5397F55DF844F9E
FE1E760903FA12AA2489BCABB95F57397A31C9B3C17E416A0C74DE40D9AE0B73
AEA420AA0D48DE20F5A760A94FFE6023DD4A407390AABD44CBA84852CDB61FDE
219CED9A8716B3A45CE2FB832F424D11FE3EDA75E20AC6898BEBC65DFB036D03
5C49098BA98B46D12DEEADEAE20F85DC7109028669D8F37304156B223C138CE7
E82F86AAF4F8D418FA823338B026317B1BBED5E94F64E0A8A288081798856F72
64541F43ED6FDB0395AC959BC7F591BD4C4BC725E52A217690FD4ED525EBBFDD
58993933DDC0056BA480071D4B7B56931D9D741703E35DF099EA696C80691331
2BAFD9624162DAD3F695F0EB7F8264414F75D8AC66EA62D0B3088F76AF237C97
48401A6A18A59CE92284231958F0BA5E9616B4E809AC0C9F768216F04AD0E3DC
993DC37F5C1F7080AFFCBFBB82DC55FA52076A34EF8C82D88A595B9D97BC1D32
360ECFB378192605E726A3DDA7E5B47B0F0683DEA985E03B45448F558BC8BE82
54D9B349D39B74597F4C2CC2D224490275F01C14BF421295C46C8E9101439A4A
972E125209DCB9B0B030C50ED66F53EB2FA806F1316224CF5896DB4E1AEAAF40
CA714C8550EE32F028675D18E89BFDD95DEF8B2D573E886119D5E16785FDF934
BDAD5A41DDFC639D83DFA779391CA7645276588111A2B4222424DE1D9F0AB366
B02085C506E06376D5E0D87D45FD46798C484618B773DC94BE3804BB4F9D7622
BF095D9C301DAFF6D33770084D59B3985C996E1AD6F78C52FA214A3DD8BBBD87
7CB14DB9E5E56D855B75005B2F4608EC1B5CC2A72778AF0D1376B04486A0349A
7D9260E89443A3941E74A7B6EAEF6F0AAE5F86D3C9F36D456DAFB6C4040E6408
37330E3AAD079A9D626EEC0344AA65B6998158F0137612BC277D7908756A336D
F596DED21E55B42B6D4AED6EE2091E33FE3A23E68BE9FD96D93ECFACE27076A2
F63D6CE103075A0E1A05799767D853230E9C9001A8D46E7FDAF9F4BB69F2090E
FD0C8EE00F0F0B7AB5004DC365EE16BDEF2547E5E3F3DAB339E9B30C2AF01AAF
1CAA1623588DAD69DE5CFEEFA9185F641FE65AB3AD897C787FBE8768905D9103
AEA62A2C53A96FA2BCCD8CFDBFDF30C7DC2051578244155F5D401392EAAF82CA
CB099DF960C42E5E5EE52D128DD28B0B49B2D59A2435CDA2ED5F2BB7637F9EE9
8B68730B6AC9C63F98402A1AF13C79BCE883E6B74B0D992826D67A4B533FC31D
5E9C7B84C92C5CA433C536B5C41C7417F0171D786389E89CAD59D8345082C46A
2DEB505DA944FD9DD7E1EBBC8E4D71C289D8AB96B75E7A57ED2E234F185C3ABE
9877B4C267BCD62F59DB59BD02CEBB5DCE1215DC7D581AE0E340B2D936977A5C
0AA34528C275225174BF1679497DD384E5E643908EE638318019F7BE34C8E2D2
612C2A5B073553F755E3CC155782E68839A048C683E289918FCC37040DD4771C
1218921FD978D54360FAC85C21A80A68AE510704F729FEB3AC16B6E3061C791C
DFEFECDF6B1C287FA48581CF4FB723E2238AB55C0A1234E74040E6E7E797E18A
F57941DDF7DE2072ADAB1F0A3A5AFF533CD7695E440F19A0A6B88002637CA12D
14F10E9A79CF91E2F23F5348B811342DD3A2B352DF19842E4AECB69CCD081118
5FA0005893ADDD71F0378DC8BC5C31ACDFF47EA3BF4C901BEE4B08759E95A867
2CCB5F18ED8A2A563F68C1C2F0196F30AFA55779A6802E2B123C56853E002ABC
509706C00E045DC552B2E5EA0589FD90CF23D66E0FA7039C3E11CC5C1BDD1347
412F127B11D936A224FEF55B06A6036ADD54CDC87F9D258766432990BCCA48CF
7562D5D69CBBA4F21660E0A95A841DA3DD040353B600DE2A8E1DB7A520128B32
0F2E0F1200131ED3D181B02711EE2C105FBB16BAAF98F469068B96F355041B19
03EA8A4D74DC74301C204639C60801C1EF485B788FB4658DBB9A2217CFF1C4E3
55520B7A0962E50B759C3214ECFB40BB188D37B7EF316D7ABDFC060FC254E3BC
CC8DE278EE68F3CE739731BF1BA47AF05D47396570D1996BEEBB7E1A4F11954E
669DE14B907CAB448E38107854D298A39FCDFBCB88AC0EA6AACCAB081537DBE2
274CC3FBCD1349304B2F9EC4D5C57518E8210FC2C6196543FAEDC2875F4D6B2C
1EA59D629B0FF93EB424BE452C40D02B4D2B19D6477314944427FC7FC91F7BCA
627E3D33DCB5F06D931E1077F87886C874D7356AA2F88D664E9875C2F6751520
8CCCDC93F4FE550F3E087A9C1116AF3C945646CBE2BC7A67279D480D770E64AE
0F18355F4E51B86E264D6E937DF74507591F8502A7407C48C76BD9C1ED9DB78B
F62E9AD2222E5BEE9FD2BAF222BF1B10178ED4A484DBEC72E0B3FFC47FA639D5
C094F527D4E82FADAC6C38292458961C7716671EA297E6D5D217D3070A0CCE97
065387F087F8881CF77543E8CB2F96C9CAB20394D99942576448D9FAB18FE3C6
2ABD37F0FCAA68D8967C8DECB619DC958445DBE710A4CBB1DBE7A2FD0EBB0312
166958F479DAB696C58ABF3332E19DBF11EB72621B619A811D7979A52174C2BE
61A127119CEA1E07679079D911B203171D95DE3E6D75086442C12E901A98A145
8FE935123F988CBFBD56AB986BEBD58F99974F8A50EEE33F12C6E088C30DA602
05116AB7833FC159283054AA61D40A0AD4562BCF005A05EA389DAA2721AC6E6B
FF0015EA34790EE12D99CDD9306DEA21534DE1FCA4F6C6BE4FDBCB6096B37E55
A6E677F0AE7D565B973C2CA3BB7BBAFD7E39D86D5E766A1BB33298840D0D678C
EB623240957A1B5FB9AE1343E5403003C28CF53047A07DC8A48FD12C2F3E622D
FF0F2D9CF2B5EECBF408B54C3E0E0F292CC210EA40489E2DFE707DB05C0FA723
D9E430A779CF890239F6E39F739EE3BA37379887434F5384C56AA2A49D11A357
13530C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F9620CF3309B7F91E5EA33991B
1A04499E6BFF161C96F51F7855CC09AE6042E58DAF96ECDB80756FC73220A36F
A8FB1C38BD0CBC60ABB15E8B5D6C9FC217F7BEC34C938C38F3C7D3DC1DB94102
FB88F631211557D3A4F79A8E5FDF1DDB30CDB858F34D4A59E3635D163DE7D75B
530B2F899753CE091881425432805A253C0ED15F2DDF9388E193D9D9296EE186
A2DCFE19E12EA4072844E5F58124BDC4A53E4285D5C238790925C4EFE4A4464E
11713DC2C2E885C88F882E29F08C6E1746D8B7A5F0E76AF213582E46962647F8
6CEE06E31DACD3D593D3E2644444F7539E67A8C054CF8FFA6828326D4AE23E17
3182D4D98D4C5EFA0825D933E8F58345AC1DE7E31F9952F450564F06CAB105AD
6F4C749DF909C78490F7C5C62DF833DB9BF71445C13667865BD3900BFDC4CB64
5232E12A5937209B7A1250800602F7C99003279D3CD3F35D8A396BA1F673A0CE
194EB89742A12CE9AD6ED4E947E74BBAE1BD49C716522730114F2E1FB4E7A6CE
89EA7C92E036C703AD5C787C37A4430FF72756E6730A8DE91A44B3DFA2C96C25
6084D6DA1D9317F961F6E6BED4A1655EDC31C235D20B206326C7E3CB1C9855CA
FC61330B589DAFE4CCD0A65276D4C4C09021CDE07D52CBD3D4BB7DFB6E05535A
C37A36B9737F19CD57134D75BD5B739AE7EAD13144C0ACCF0690464B7E4954CF
2862886E7D1782813C55CBDBECE69835137D4D76F8CCF9CDA7BCCBCCADFF6803
B31E42431B432FAA8605129AE85789E9AE83A259E5ED0FA55DF5A6D4DCF1C97B
1F7C16DDB512A6AE8E897DFC6000017A46BAD8154825C9B29F56DCF7844785BA
F8FC671C6369C783970D6F870A6ADE1F3C70BAA197ED844404A7DF5A89BCA3EE
5379B1E034062D1536C234ED0337761A3AC7F42D1767C2A64A45EB66AE76A0DF
223531C12C2E20EC3FB396C87B05F60C0F8BCF5B2836713852F247D493E9E72F
0DA378AAF8B6C76DBDBD42FB9BE5E765832AEC7925737C796249CA0EEC764141
16026B9091E93CE1D9ABF1D0B121D6EAC79B08ED10D33909FFDACF95690B6AF5
2B9E1EE8ADAFBDD93E49400864A9D5EC78CC70E07A5975A2F3FC9EB66CF62F8F
33C6DF1899034C4B5B37F3CC150D13B4BB7901F18B38FBFF69D3FCB65A973610
C405074CE485CC1C1C86B8FD8EF3FC186A8EA4C9BE51D592FCDED6F2ED545FAB
D70FCE958A9AF5CA8BF41C7D48B04CF05D9C5C54C5B9AC55FD47082DBE0052B1
083D90AF03CD0616A52A42C497D05A6A86C8E72BD112ACF291743312F66D0791
C8748268009D7C806C75A5B7B8C1545F4E7203D9FFF367226E73CA99124A0926
0CE90DBCD8AB3972CE7B007E0E3D3EC7D3D94F0417DD2542E3D90B2B51628E40
6C0908540AA40B21F4A6F437D293CBA20193E7E47628AD68058D664203777334
9DE530D70549EE97D7DC3783A048D871AC6F3464517ED20118DEC517DF1F827C
F41845BE0BF8AFAE8348F559D6AD28E786D04BB0037FE312A5EEDC40B7A9B5CE
E8D867F7A98FBF88ECE3ADD8AC4B24A8DD842B31F76C3596F43A6F2A1BB2D04A
0486C412BFC78C427E7218F931EC6D953F55CBC3BBE808D6142836381F0F450E
EAE1564A42AE5B53BAD72FAC7579DABE52DCBA2DDCCDCF48BCFE5AB771064CB4
5C5F5D156798E31BC662F1D3B1F2155E10B53A271F23449B93EE6739FE6E29E6
135340063A25492895A8C188DFF2AD1494FC0CA2CD75658A0033DFED28A7B9B4
E9474D0EE084E363C8B0AAA70DB2CD8A2335B62CA1D8384D4869BD9004CBECE0
11C813DF9079FD3A534F666DD35FB36CA0D8264EAA3FA4CECE8A2DF6DD952B33
819FF58DC3B451611B1DACA9EEBE1D421D3C8CF5D76D071D3748C32BF1C779E9
131107CCBB6C36374EB7584F372B9A40089708F461991A7C59B5E465A354B42C
8975742F75BCB6C0CCEE1136FC7CCF14FEFE5493FBEA5FB1D26743416B6D20BA
817AB49ECE49B33CF9BDE4FC610FCA4FC9ADB098BC3F1B4162F3AD80B93D2950
4FB145CA391948FF22941F69BF1CC3467FD03E26ADABB48FAEB2D2682FA119D7
2F24F7BC44E71C0BA8B0094D7548BD0A4FEBCD4ED01809E0CFB48BD831009F26
30C8793C7AE960AC011E91FC977CF09747F857D4E895C247EE7B2DCA85381E42
CA3F56796B6441FC06A1499A5C7EDC9210E8A9FF832725554B1043C94E2540D7
48941DB7300E04EB6F4051489871D2F43F07D35CFD6607AFE678F37A7179A684
547B6F5E170EBB7F614C59D7E91726125C32B8BE4CEF23A533E172680F9C5760
E0AAD6D8E7F790B69115549EE24246059908420ABF308541778306DD63DCFC43
51E15344DE683298503BF6B1A801AC84FFD82566D635CEE5B3FCB4D57C732A10
F2D642F4B65616E2A22223B0E9F7715EE1E8617FC91E139885A93B0519E27133
9BEE64BBBE22AFAF5278C8212F06CB4FA88AF922E0DCFDEF73874320ADD4AC1C
12F31A8A97630C430315D82C6BCC3463E77EF0AC2D1AF1DFD7F12771534DB8F4
AA0999D768A672F1A5382E7B2287E81DC9293AAB45C83C76D98B7FC005D1F298
EE53F022A50E9C6889F872C77967AA05FA6E16BE46031406FE22B8C7870AB7DD
DB21B45C06CAA73CB62178C2C63001A415D6978EC80CBBE250BA0562AB6D2E1B
CBC4207CCC0055BA8777786CB8B67A4B1D1F905C349457363902FC92E86EFE55
5A0F4B6074D7155E3A29BCA569950996BF4BCA46A441CEEE89FC42AE0F4E4261
60BD6F174E7174622DF0B55C12FD92CADEB7539614969E23E9A78BC8696865DF
79A4AFED0960A3CD6750B2DF7736BD5A0250CBC87EB9D1C2DBC418132322EED3
BF20028C0019ECC8CAA5E07458583106C6C145AA649B9388B791AAC516633811
4EFE0E85508397926039FCDFCEF8BB4382003153E604C23D313121A0F4CC2026
F58D771229C2A3A491455426500E410A707FA3CFD24CEFEC85AD6FEE1DC312F6
D9F3B9309B62AF48754D6CB8B656BB0015D7D80E0A79468ECE32F5EFCE7C3E38
A483DAD551D0ECDC163CEAD83A7B9017415784827E752C3EF61F720CE7F77885
99AAF3FF46CE5AFDA10BA04682C7052CA4B6D9562B4D49DEDAF13B1FAEA9797B
0A89CB8438407EBEA5A06488A7CB7074776AC36B43FA69BAD3FA933106C682E0
D9A3BB536D7D332A393FFE73FBFF6DAE25AF87DBBA48D5F30E55599126EA0796
6DF8581409ED345F7E6EB57D050EF76AB20FD6F05AAA14D65952774531A01D08
AF8F62837592F0BE89FEB4B84CC0A3F6BE1B968E6F1750A2379A2D5F45FE6953
D18AD1C2573314AF568A69608A9B382BB31ED751209AD8BFDAE064992ADCB918
D84DE8771A1A3128B29A20912907260FE96AD4F71BAD23FC61323E0907EB0C84
FAFA0C6783C620AA6231DDD2B6A02530540DBD7FF0FE7EA3CBCCFD78019F2243
4ECCF66634DE56E73349B1EF64A98457F36C2B704D541B1DBC252F782DFC48D7
726661BDF8AB0BC20A786C8C6E76A951873B419669C19123B724B353CEED5493
C35B2D84985090CA164DF0AAE5DF997D62692BAD9B09E617F2CA0C7D35F28EE7
422F7CA31B3A514AE12417459A4602CFA5EAE2D3112D43FF22C4723429BCDE2F
71F66FAB78AEA057C18ACF58136C94A428B207C2828EDFF46A81723BB6B76B4C
3C2E2E5B8584AD015374B9C24E945DE1ABF68E25229084437FC43831FD101E68
425E0DB2B7D7775E395BA4BAF7F82F0850D4EC408D5FDF4268643AFDF4966244
2EFD59F05B961AF21DE2B1769265984037781A7CFA7A9CB4335D687A58F61800
FB46DC6C36DFE6F45BD57DB169FD3568C8E044865DE7308E8E1AF8F2413D29D7
315B04929385712AE14BA10E2702C86A4F0C274A29EE2FC01C25913BC44D69B3
AF2FE2CDB27244BCDBE88FCF29C984876BEFF75AFC65947B449F21DB8AD834A1
E8AB45FFE334532FFF6EE351252820E23AE9802CEE764EA8585BF507366B5310
6699DDE84155F42BBB1BA723C9FBCBE763A30F9356111575D04F9AA9D4E19EEC
7A3BA6E3B8BC7A608411A44EFDCD3B7435B3F3E2F82784F8C6462D45076E249A
857FC13D34B4A0D73B5D059E431CD83EEA8085E3337E32DEED5C9FB49D23A03B
BDB88BB319E6627EE0D7A6827290F095DA482A4A49A1D71A9BFF215C77E14D23
E09393EB10015A5474763024A5FBE910CCA9A8D8632CB05620A24B553A27E1A8
FDE2AADF3DCB2582F75CA7F1BAE3BBE71B35C83F4748944FAFF43072D98FFB45
1A06D2C1D979EA2C248B4CA233E2C25B89CFAE3F0F649948253EC51D98A20B1C
4150AECE1B66291008D7FAF7B601661B2E2B92D08E151289F0E62B8B6F956039
FCDFCEF8BB4382003153E604C23D313121A1A190EB567660970F66F2061328F8
5AFC287E9C2421C7512C173C9382A085A2924AFA002FA83DD86D63E9FF54F4E7
DDD452C60EC1278EA80C5FABBA6B9E98418A0D61B48F627F5B025A7B766FFA65
AE25F0C95221732841820F8B8337F28151BA66AC63C1741D8ED7C089B4360386
A7737A8881A9C92C09B14BB2D87AA395EF6E1C8A69E7CB52A9BE85B84CB83278
2FC5B0B22B70CEFA5736629F498C75794C620B2330FD5BB8F5BC59A60F63CB79
7F99E9A0D85FA72B207266BD5FE1A5BAE23D1C3BF262864680066C70C0B973C3
477D209A2FEC179D9A53F0E3789B23C32C9BCC41BA050C469F1775237FDA7D6F
1415A7C0E8739655462C447F22640582C972655ECB16686869E6DA64108FB200
BE9FDF96A78AB04B239E4EE0BA0904B7CBB3F3F7CEBABB452DF2ECC9744C9C50
0556EF9EB6764B4F82E50E66D4F9D8446E8BD3500489A6132C0F36D15D428A90
92B235119311B9888D0BE96AC4BFD340BCABB8EE5CD384D1977E4A94A814D5D7
B7A6799BE69FEAEE8ADE68550BD50DC093C9E693265E828A441345EA5C4EECC5
8E02705590E407C2CA961F03D1762ABC486E717CE9A1DFECBE802B04A8D7DF14
9E8E3ECEF7651EABF88BEE4B385D1ED10D49A71974F0FC7B0A717BBABDC7EE2B
88A28FA505E128EEA482A28A5F2C63B1331828EFCB01B35A95D0E929461A4A01
66B3AE0676DF7532947B97366718058835CEDB35DB4D7DF540A0872826FC09B3
5D6BC44417E8CB8ED895FEFCF90B57BDC6CAB825E78EE880FB9308633483D171
BE4B505A63372FDD1EFE489F63852A12B46114BB6BFD37897D8542A378FD9174
5386F481ED8E8C84C42315564A45841C76735906DC076D58B3E290207065992B
6296DD1217EC0F4B33410539B74F2530BABAC5D186F59E3F8ABAF2B9287AFA73
34C01AC16B77928F75C6B24AB76E3119FD34E749426FA209CB1FB124D9546B78
12BA06DED9F0BC337C53E57106BCFB1FCFB2CB1DD837885F2EBCFB3F02ADAE6A
FBD7842578CC7D5D745F0DE62C03875BCF18DFEFECDF6B1C287FA48581CF4FB7
23E2238AB55EEBFB05FB869188C14C268C3BD17A7F6557EEE167D205366A46BC
83E8E043427C28A2401F5ED30A4C2578F06B0DFB414B6F8C06F00A26631D7FCC
4527109F177093E259E13CB5661B02C76A1E62E9B4CD2688FF913D3F49F915C8
710E29409BCC90E1B54328E6A0C72315471578817A674467B82C1986E948333E
1D0B5BDEC27230D2966671ADE24367EB14A7D28DAC9A22E2DF55C42D244D9DBA
C9933C449AAEE0A157C20D987B7AEB3CF7613C59139E12D14A5803C5CA70E0DE
9B15ABF17872ADB7D07347D0E014652911CA1060CD108890A27FC710D60410CD
F5CA46C027832BFFBFA6459AEDB6C7A96847EF66B919660191C51431C839A192
BE91F8D48FAF80B44392DA442669E8524D25A29A5710951883B78DA708C33340
589D3651EDD7E9FE13916489BC37E66CCF943F77584114CFF5B5E46336B08FFC
F2663644C985191135F0156722F0BF1DFACDE1922997A334CE0B60E80398A577
6D4CBD63C7ACC86AF399EB3541A8C0D10C0B97B503F0677601A35722C36EB489
B1CDEDCE5B0FE5ECF23DB04FE974772A2224FC3BC9414F0F84A25F7DA6404DCE
156C876E12918275E17D96259F2E87A50DCA2EBEE2FB931973471B2FB642EBEC
E412EF45A0688BED45967508B39362CDD78FE87CB5FD77325BCAFA3A1CC72F7C
D60952852C53379530E0A6BD4E92CD42C8B923B43458474D510EABA41B969643
F800368BBE5EC245BA29A5B084DF3C7D934ABD2D431613942BCE511A8D1D7347
11985399EB41C852C0C84CAA0D2D3E0F4D0E0C51BDEAE0C3A6F1110C0C5AB805
4BA0E6B528F42136FE1F66B52203E21287761A7386992280AE2AD26D8F7818B2
DEE05A80460AA82185891FF7C4F8690D02CB9FEDC0DCD19B1E29C20F1898816B
706FD5796FC3F135E794D5D00D43E42EDAF75A107E30BB286D0729C85C0E1F60
2D8D8E781B16E78E2D26AD0B223D0792C9E78F1F0B694F1EB9DB7A136CADA3BD
43B1A5C8FAFE0A12E4E8DFE8EB63679D37BF5429C65D5A4213F6E2DAE85D8EA0
7DBF0F7CE8AF45BCAE8E07232A5A7CE6665D8C4432AFFCBF37F6900013D0DD0D
4B52A2AABF769277F5D4878326B6ACB123477906B1BB4660F76F3B0EDB2BA4B9
7A09D1EE0CB37A713AE355662EB466D24A2F6F59FC689CBA73699AD4804910ED
7B65C5061E7F111D0E8131F155B106D862F0920651AB446DE4B6DA6E0DFDA7BF
98C5632B31D9509AF593CBCB7B0B261CB647D937A6C2DD7C2320DC37841E76F5
7069E9178CAFC8B8DA4C5DDC0D361A5F467481B87ED7CAB30EC2B8D94C55E4A2
D086186E1DFFF295901F077B32124A22AFDC33BA11A19B2D697C75CE2B6171EA
0D39805B15434A07B70DB9E81D6D5E001B17A8D845ECC703FF0851D4A535595F
E551CC04883568743F501BB40ADB8DEC07D5975D6E91857358F58A400549BAA5
70F95B97AE0BC57BB24732D4F24F8E33BACD0F4D746442E530F2BFC8B6879F71
B858CABC9D6F8C656053140A1C3BA20FF624A59FE2DE219FA95806960DF734AF
FD732DD289A3DBD48DAA0E8B237A26F9286ECD37DDAC21C503C15854F1ACD7EA
1F38347356EE229B0EAB2E0A3EBA2647C2301A7215A0BD4AC7BCE3D0DC4C2312
EC701C2A55C23A71E12403A443532CBB737CFBB2415614AF279584EEEE66FDD6
947B83E8B404D055996B79C2E6795E23452881DEA6255133A2762A1DB374F049
F75FC09E974E64A63E36F76D0DCE3B38A84750BB7006B4F65699D9E45E323C65
C3D953D33B6293A4187BF5CEA6A56152914D7C025FC91EB9F482ECA1BA53BCD6
F436C7390B71822D2D464A10A1B14C33FAFF6560FFCF2B7B6B3CE509264EE2FF
75C9CE88D17D4C355E44F4DD2746DAB76A6600D77A4D0586601837945505112D
B436C58A28CD0FCA766ECE69CC4A60829A626192984D04D944109C2E5D22864B
C6C45CD5030ABE31061BE9F99EB7EC35CC3DE6BDECAB9FB7852B8EBC41A2DBA5
207AA877401C3DAB3E3D1F7E622DE0043C1FDEEDAB353DAD46B7E82A4018EB0A
233189D497F5BCC1F30FE4042E0FE627B15E24EC8B8568CC337627D58CE89F2E
5E5E637D153E50B12D882258E272CAA59937B2A2A7BAF55192C2F784F39A0009
F715609F5F30FEE4B8D5B92B19CB2C662679D6B69277EDD90F76DCB96A3EDA29
6F0AE6063FA0B108872EA24825C02449FF2103035C6B172FBD42C3858B9FB3C2
472D2AC544E0B51BDCD3AB662F5C094B0AA7D90CDF966CE614199B182E6DB2D8
DC640B8F24946C1C750853746E38FC9DAD009A42D165CE4103019F386C7F17FF
676B91AE3C3112FEB92D67F7B9DA6F579C4452ADED366BD57798F007EEAB38F7
CFF12006F6E4AAB73BA0493851B0A626D8DE2CE6D87FE28536D4F76E939EA1AD
BD7B6CB7FEB1B49E552DCBD4698AFFECCA2120F31D4266797BBC187FD331346B
1059B7407054B2BB424CD3F6F66D01272E49B79301E094E6C4CA5988E8854856
02765D300D38CA79CAC554031C0596E7E8B3D14AD39EE3924B2922E17C8660FB
EA321F8264E1E6F9EC0711483BC75DE0FA273D40D0A813509514CC8880194DD1
0F87338F2829868164A76A3B6BA6E9934C391131D87B6A2C680CA9BD5ABBB87B
7248DA7A5B186C469B5CAC9DA5C8EC312432324B7BF98F9C91A1B12D5E616C40
9B4EEE823E0065A9F726733BBD84647025EC246E35F04FF8C47A88A9C0C93C4E
2F40736AB9828C549A74A8E6FDB9C6A6B2046A89887F2CDAB83A97079C578B49
0A6E188B6B9CDA17437F319608FDDE64E5ECE2D468D3DC6D8A5613A89CCDCFB0
01E949935782514485FCD6BA94FECCB75E73654CF07466910037BCC3D292CB23
F1712CB1BC050DE2A050270FDDB04C2DDE3C67A213BA82B88FA5211DDA448AD0
0C0CFC079A48BE2436B2D68D4C609469007724A36E7A6C29821EB6EFF7CC5A2A
2913D4111A56301DC590796B4CDA6FC3E7F8A3F525B00E6BB1F3E70E796E2060
5AE0062502BDFB0DF653562E65416CC22FFEB6A9214FB5BB387B7E1676808530
0D8E40B77F47766B5FADE4758823952672D3A88840D6FF162922E0AE19C967C4
2E2E8B3EA1FD709F8B714D0380EC24A66461CA35B0348B7BBA80ED5EF7C9C219
A159FE260F786D516295B664229EEFD8BC905E4B498AB8B9A9012E711877EE1F
50E01A5A5B4EA96413D5DE143DC12B1FF8BF875E38761B4224DC860847FFF632
B1EE9B47BCCDF734D5228F5F9CA6B7C158B5CA75BC4FB3FD0050A61838193337
4888A6584744C8C7737D247A04C858835306579E3DDCF4CC51B48CCE3B5263A7
148C50A7C1DD73A031DBF90A367D62D90AEC64B4FB1BC2E8472997F9D2A2EA71
2055485E255542C3FB0AF5541F63FAB51D15F0A9AC59B7E466D722765E7AE2F0
5BFB2E22290EBBC3B35D92E4C8A67C6C62AD783201D5BDF13A6F115C92AC3A73
DA9632295284B1FF01C81439EF44F13561B487AC2AD621B01DA014D951415BE5
E8483A5F657BA4E46FF2D28374CFAD563D9FF0B0A6C81919A17686DE10B6F5E5
DD9EC0E7293F540631FC12B7C3FC19FECD2E92818441DD2D71704BFA82C7B080
BC02C2404F99D592EE6446347ABDDFBB7966D51B3610784B4815B8759B157990
EFDCC9B9953AC1FFA4861253194D89457DB7C1A498B33CA161CE354868894777
84B23B4C3CC0835F09F98189D0A2C46692FE217AE3F87CA39AD778DC6A100F92
8D24E3BF83426183ED476E485A61CEAC5F632A4C665FE655567D3A8C9471C006
622F2F6C1D9C137627D71504B08C29F4C9E2DF8152EC5DD89072F6A670302181
90C97FCE56224478FF564FA2E2BCC8B0E14BF26D94304A0FF6B67A7CCBADD15F
6518CC35B197AE8BEE70289311CC30A38B9DBB9C520876EC5BA79B849449A53B
792E91A84575CEE9501C40E4855DD96BE3B11EA8A78C3A11FC2712B27C31E9EB
16624A39FF92598964C933427B67FFDD23B782C88DF4773DC0E711C50F458F1B
36A9AF7D783761089135564BB1536D1EB639EA3B7001255DFBE35FE807C04530
67C1054DFC35855672675772CA4DE6BB6767A0342C48DBBDF6EB2A5A72E24259
E976587DE65A3FDCC9AC5C5F783D573AC91942E6F038AB1C2504D82AEE3487CF
5E731DADF37D6D6BBB94B39D3D6FBD30BC5CCE9456D138422B1FB649C387F063
51610780A10A972ECBECF891FAB56CE8F8D1447278BD29B851CB7DD2727B73A9
7E2038C60BEDE44517559686339482AA183785AE9976C8FECB4C94A97B01156E
3CA41AD17544FF097B020379CB994D8CB0B34C148484B34C224B542D4BB05753
35BC6656AB8CFB0AA1C09FEB38D139E33203D3C5FDC5FFCD2E07DACFB439C407
BCE331A29027723AB87D3BC626A96B494EAACAED7F8BB2DA2F891C8CF143EE88
A6ABFD7D6D9D581AEBAF44B537B635D43538A2E6EBD9BF34DD758E79C5FC4254
661666684C07055F36C3426D8FF088A6175DE9D19B781302C8032B0D788B222C
9BDB4F08381FA096D2303842C303C712151D282221EABAA593787DFD4BAA054D
1619227A17913357BB43BF8F93AED0C201455E229C987A128F91230225DB294A
267BF8AB621698998C393910D9FBB4225C1B15F30668DA6058BDB0F64BC8E683
9C9E61F3CE9893F0F4599A0FE9DEFABD0DB4DB4CBDEB5EC234B3349B93550A98
8167B6F299401FC5ADB09176CD65BFD9F684CEC1777CC5D9B5BCD4E6582DA5B8
2CB5A93315BAD9A3335AC17772A4417C5FA33BF5ED74076F822C83B6E232CA0C
E56898462E326CD9247B8B11F91E918EC5819AD5927C246350CF67BDD8E7BF02
D99BC1E722D20D7AA537765D4F0572E9A43ACA053A8F7528925B427F5A8368A2
169AD26D1F8270C48778AA9FBE0531B1C2CBB35B44A391B38A8112752F6F7263
009E514E4CE7DF8C67EC7EE5BEC619DD75BF26797FA80F81084291BAD2A3223F
C25CE28276AC98EF0C0D6E018170B10614B04B497D48C8C7F2686331E85CC4EA
5368C9AB943363EB898F010421FB8D4457E5772E65054282D820FE75AC6A7276
D0FCA5CC911DE21010E3AAC8487C9A2527489C2A3ADBEB19B305A32C87AA9A4A
2C9C77D44B2D0C17274BAA14547586856F95B01D464D6B344A51BC89CB77C2E3
9A2105694ED22E9D2D164EC5CD15146950F5DB781D81F0C629CCA58A380B58A2
65AD69B4DDF3690DE70FEB21C05787DC1D2BEBA14D9C2CC62AC403D6910906F1
689C0BB33BD33A7BB749E3BF50A9AA66ECB8370023907791500ED4358E0F1244
A885B758479E52DD59865A4BF0675D6E2F7FC853AA86F0CB3B4AEE70C934C08F
782BE440F60C2BEDF582A5B3E194E3B8C670B83FE12E1AB14206671CA0A08895
9B2A860AA3B8EBE37C24646BBBBB940F6F6F1FDA40F33594AFE83C605102695B
2219FB76A33CA51CC7C8048DB8F6EC995C502654263FCE45B8F982E1A0687FB2
6B8E79E1DFB81AD691E8FF9D4638062598EF0399FD11F6B0DCBB5A25C2B8A389
723D514BE2CA18326C0B728A81C2DB49A0B50CC45EDD106AAA6B04F932DD279A
65757B30DFB20F3CB555CF5F81C259E6B2549D73E2343CF1994C476AE4C19BCE
1BD3F78638AAB72579CF3888F5534A3DCBE4914CABB294BCC949438C60D99B92
F9AC512C76A5F3E62AA99AACBE1F6F72975A695D49D87D65274929E19D49611C
2325E25767706FF4C8F68FD46D8999FB538C274E3C6468F917FE643EA0C4798D
A9237B0309787D5D20E057A6E1D45DF424BE6D73234F5E56FA211D74E897A45A
A36869D95C01ACA46A56DB059C3FE533443DA18F6735A20350DDC82BEB6DEC2F
BDEEF1B1E8C8B0EC1796A6EC8429A6A42A06095E9518C439D8AABBDB4FCD983D
5BA6719D53E82B5860B8252792A47CA7306EC9CC99E182D9A72D3C66FDD2B32D
EF24468DEE93301E054CB782B9F1152B97E20DB53B676A125CAE42E92D015324
FCDE8C1131835CF2BDFAEADA2A266F60F875ADD765CDB478B59E74F8C6BBFC8A
64059A49F9975040F078106D54A33F9741993AF047C09BFF94255125D597A848
8798107E81E24B92610F78B4E8088614607BC3D5619A05727B6A61B438307256
3B93DDCD9B4187B86ABBD20058C7CAEFF91FE774F75311BECC9230FEE3058A11
130A4A80E32FA166FC93AAF9A668EB61DB1F18A0780CE54230D6C76DE8DA893D
29FBB184118A1C7AD76D5225EFCD1AC8F53B435A14
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571B36569CD507130E8F9ACD3CD20D9A4008EA074361239D8E8052CC
15B53B907E17802B8F1B15359AA8D6F03661719C67527EB25CCD9328283C9F0A
171E48CEA273F000F765D1CB762C01F0925CC89920648625740073D2F18F5E53
5CF1F0D0D082C889B4F6866E72B09BEC4DECE4EA88FDA367F98790AB0323A4FD
9F2E28963D7CC8767E4719B001B2B4D6E8E7FF796C4B5FE29DC0F93C2DE0ADDB
6BB87BA8423296AA1DCA216EC5AA96CED8CF68CD7F69E003ECD5D48EBA04CA5C
2A3FEA809954726348F27B22E5B99CCC94A4CDB6374418325E79EC4229D8E137
B3C9EF090C510DC30DBBC10E10866513910B65C0B9F0760B7D4F6D28B6CD5B5D
C818257E2541C8D18975EA17CB21EE4C09636917012FB05964E8014BD979C2FB
36965D880AEADADA8D7D37ADC90C999415AD8B6D0F40447FB5FB330A80601B1C
79EE748172D7503E56183EB0E6818FA31EF967
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F4243F63B1C1767A866F1F9B4B27B64CB3D44108486
E457FC565E44F8F0808F26A82E25AD6B4176B3BE5DE5567ABD3D9951F55183CA
0B9098477F133CEE733F925020A43590C6F1759DCB808D354C142B307468FC21
146806694BE08EAF1D049422ADDCD4A9F280F136552DB47831640E82E68DCCEA
59B2C9BED6F4D29FFADA86B2C55D325D27113B3B90BA90FA7240719CF20247AF
E827CE4495ED0F74F86AD1E5960BCC178CA91E649ABCC49E4FF0EF4D5D68E2B5
0EB8441057292CB8E3306F74A08E4BE04651DC9DA320F7E32F8A63B781E608C0
406CE3FE8684D472BD8D065D836983265DE8EC9081A480F9007FA4217D853967
AF5E3659D9628533AE56E6573FBB876F75E89F0EAB2B56BB23A883697C15136A
A186B3875E6424706A895D3C52B05DE9645F392AF2F5F12994C28B330903B31D
1B6884EA08BAF995F1D86F8EC12DCA2BEED71E9593D31072A4AA9719189186CD
C274F6F6AF80802EFB8FBD6FD2D909977882A9A1E80EFBDC6369BEF559CA683A
3E78C4F44F1B60E65A13C4E5FE32BFF73010E7625254A0EB74F63C285E2D52D6
9BEAF56A424AFBBCC7BEDF35D589BDBB84C84B906C59422C29693F0A3B5EC3D9
0B9120D6F194E4CB7C93AAF993F59A77779879D789907C3294D33A2C7CD3B58C
F74B8B5144E16043EDC7C3BFA3A0147463B0F347B9DC7568CB57E0C23961AD85
EB524048C66C8CD94CE466C1FC3E5A530C2C68B25B1A3575C18E159611E2F8C3
EA53645E2ED9E33C316AE9AA7984D4077BAA7EECFA4DDFC70E7E38905CEAB276
E20865C92FAF0273D2AC894D2433DF81E89065FFDE3FC6DC9099C5B496E58420
F026E50D67F30DAE4C4E3886B4764A10AF7D2D19C2B4625CAC05BFAED9E07612
E13044A31C08BE7EB767EBA488F7D8D23D4BA1745EC4246CA97D74A7339B78A1
9B6D4DE45BF0D61A493818E6AA7C4A2DAEF30A306E425A00A3228BBECA5F6FAC
0A660F157F9BF6DE13B491B51197CCDFE5C482B78CBB5FE848ED6D844FF2CAEB
9A80942612BE59E8C4EA4BF7EDB72FCB39DA5791A058160C2AEADA891C854BDA
6BBC6BCB2DA0F63C2DB43411995B1D1A06D2256A9768C02A889B71D190D56098
210206911BB7EB9A6F651CB794CF2361F3B9FB68C7AECC2B777A3B5067525D5C
7E7F05D0581211FF57F4DCB10F4BE3BA3BFEF484568CB2ACECB2D08A395C9592
CEC97D2C85686DD754C1D95AD36C25E6B3C8C06267D7EE70E40AB1C69B142912
2925C146E896CB5C4BAFCC33DADDC64D2A3433FB57E9B36ADB89E2BA777BB88D
0E7B231DF14D2BF866FD2867C1B82379B92CD1AA4EC00424088C323A649891D5
8CC0ADEDCD68972E104301DB2AC690AAA7579646EC34B70609467628B211234E
FC718A93E4452AE6F78866771B93BD41DF4B0542734FB6351E000624349EF7B4
D3ACCAC569F64998A9688DE906E2341FA9C2F4E04D9F2870ED2574E7D8347090
5482FE17EF823945CEED60BEDE5C6384D6E8809D68FC985531974507A1C67EA0
B0CC0604F7197CDB583B4ADF19AC2A0DCD8CB0FAA88EBF609E86B013195C3100
4494B04F9FB74CE17A78304DD4AD6B01BA099C4921FB6BBAE47FF7F67F06E2E2
60287AE02B90F5D1A56EB6FDE7D818DC894C1BEEBD0452B78961C1B801AC48AC
FD44C7C15488B18A4613CBA49C0D8723A509A88C8DECA23C273329D9EBFE107B
06DEA59EF50A532791D90C5439E6A1F48FBCA71F09505712A472C014EB11979E
F3447E352D49DFDE8C45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BEC01ECCC91
62D605160067EB251A8B40D3229C18FF655220D3DC72B74618CE98CDB7E370A0
BA04A0FFC4D3C3AFAD0869003BE33A0CC74D81D8BB0D87E5C0AE932B4309387E
9DBF69C52ABE85006D83B9020CC042DA9597CE1A2C03653896E07940025DD68C
11C8EF41CED336BB116AB3BE6175D6DD1CAF80144DD5D921D9F734EB854BE550
341FD8148EBCF4482E9D97738693472583DD53F4D15F219219825BEA068392E9
EC101A958BA3D4C45B156302AD722B13F05F71D8C40C2ED1766F45ECB609FDD6
6F3014B11E63D70CA13D96BD5AE19DAD78AD44C7C99DD91D71CC2A3E0EF74012
0DE42BF30706C80B42BB37178508EB5EB02F088194A4AEF86083F9A849BDD896
A9B2F6F431345964D7EC4F60EA071D0061F16D88796C4BA0C670D0E715ED9330
13619BC67D712BF7CEC27CE0B7ED8D31A29D7F2D8884AEABFBF6919D7FFD1E7D
0B2FA582811CDA7DEB06661A2D27741CECA6F2956BF0F2DCDF5326BD8683B5E3
828D8A7AE0C2040DE5F9ABF2B4CB8517A00888053AE978BDF45C9B464B9DA129
0584B298711CB71771E933AB92CA36C6D06E8D4E51000F60EB69CFE870326E00
4D436C27CC46EEF80FA1A05AB90D788643BDAC66F405924BF40E49AE3D7453C6
30FC3431FA13B333D69F672BCD4D19F6D70059D309B72D0A48EC241A28AE69C4
8B50DDF960297D39DF2B708BEF605075EE15741BE0742A7D74895BC47DCAA02E
982F9ED1C700AE14F72B455074678DFDBED70D546BC7E2C50ED4DC57B3D87551
CE86D4E2DB7607F065FACA01BF64480CC5A1E8891B692ACAE9C6921FF496F522
F4F6B7362A3E60B1A2E645D49F8DCB88685B9321172315171071A3F8A9D704FD
FC4178A14780955A89C2CF9BA8E32B49BD096999887AD4D12DDFD616EEB4FC37
08B3E83D87F323E24EDF17B8187F0EB71EA7D10F02928D6E29D2F9F2FC89FC1C
20F741AD7BCFFE1FFF0D4758515A86D82794F04E7E9865773AF83D1611360216
3D500E1FC9C23244B8402D1A983F3DECBD76E17E95FB425AAC96FCE977839530
DFDD8B9C9935E7B787F601DADCC81385E9036778E69BB90B0D130A32445972FA
44213D14B42FA2BB0D4C4560D8DF4183D3598FB9584A4433C91319E3A1614154
78975E25D1E928C5867A495F88565BA516314A268E9A30EB41F7C771758410E7
D1179567B10FEED34039982ED5E5664949215B7B7C699903F93FA67DAAB60FAF
8B43F9409392E4D9197B434AFA1C9FBB838F0E570E8CF04E85BA16BBB3123ECF
3733A72C364FC2FD02F3F6970F6306B22213A308C0C5BC56711B73E44218A69F
41A55F3C8296D12EADD820721F4C7AF96CF1DE87958E94147897470374D33501
DA608DE239D45886741463E26AD685C330FF9B4020A256C0820CFFB71A8598FC
3ED02114F4C179D7B00C40CA23F99A91A601E5E290A8B8D528BEC85ED2AECB1F
2868B1AD53080831000B7B82E2B24477097AA2DB2E8385C7B35F69B7D06F576D
7570D2B23AC52BCBE12DA950703A90C352983D6F88861882EF3B6D43899175D1
89B06D743A93B49963136BB32D1B6B235AE5810F201E3B2C79E9201295016793
5869EC0E7889E8F98F0A8B4645AC96636979A8D75386EF83D072F76E195C0E3F
2B12B433D7DA1F634865DA6E5ED7555195196DB28B1A5318E868D3EFBB90D58E
EFD17FB418D20EB82747C47F18DC85145900305F3881436FF37CA806711890C1
AC5997F21A14E7523CEDB295474F3A38E8A031AF7237DCDC24831191B7FEBAA7
946C2AA4CB8888144889677B31D3C8C38C2EE39B6A5BF6B667F72189E90D571B
49F6965350470B7AC7749809795D33F0F3A475A8D9D46A50C126DD7C1F7BB870
59684FE70A0DE7AC63225592B42926CF2AC2CD8B3C4A090BB25FEBCE1C41A775
AC5C3DEC9DCCC7E4B2DE82CDF9793E621833FC3E9046997A918D26C871FA7B33
F0B669AFE85EB30D4982435FA36C73968C2409AAC3DD643E0EFE1857807BFA0B
97FA21F94E9C9CC7BD30C73E7F151C5C6505DECBAAD59A2B2158B7FF166C507B
49AAF6FA4A71C74683F2BFB99BE54606BD96D7A485AF1114173E61A36005E195
72FFAE0685C7C24E70ACB8564454277C41C28075AC8FDE7784E9FB3C39EDD64D
59FD94E698D0A65005A59FA1C74FC929BAACC1D9275B3C3CC4A76F9D5C431044
C8C0A3C14544F068343D3ECC39B6820E33508184AB9F0286C64F328339EED21D
83604BCB1609A7926169AFACFADE342458015F57983ACF8912B5CAD20ECBB665
19EE8B3A333B63D44EF29D334A64C61964CEF23027F94A43288B69A9E79012C9
C5064D6804B4B23FCE995D5060C9B13CA0FE121D17B57524F6D8E00EC7F51B34
1A01D47A5FFCC91ED4B7E13900CB00E970C83917341C8A74C4C04BE75CF00DFC
C413B504773D9A5D63C55D55195909B820B4965C880D6A11F2D202F1F959D248
C6D982B908FDFF6E6135A30D1F0CCA7F03E52F060655DED219AE758B5A5537E8
AD1DA5DD7393D7B8CBCB49FD9FFD260F56CD6070B9165275291022571AF7D103
6FA5C7935303AD6D0DDE22CC3126DA2FA88A174649A0504BBF5BA6C59C6BE0B2
BF3FBC77534627AC73F2027D99026A671F83624D4D29B082C901E3E1F32E3F90
B51313D7430BE1825C90D88DF40E7C91EF2A16CF64A53CCB1757BE376972FA53
7DF301CF7A41C8C4C3AB23EBE6039BABDE34DA37BACF547F38B832DF0E4167A1
A8C656D66246E89A7FB298A96DA2A9D408C119D51988265324E090E6584F3EA2
AB3D9A378C122A1C3480163422D6F9CC5B133CB1B2FC237FADC20659B5F19B18
932E563C8827CC340AC4350DD2FF1A3EA9F8F862396D9F990892C2D7E95B159A
68B1967CA98D2A86BF9753735383D05EA02D410D544F6F0B9B7DF3D97055E79F
F2C4611CD948F30F581827003D19B43A4F31EC8856DABBD44048E67806EE9F93
21EC14F219950F42BD9000A112D58FA8598C55080A7BEBC60473B3720C899A0A
2D0BE37D6A21AA60543F3470B0A8E0DA4AC95D118F3C68E14391C4E0D89F5A11
805337E9C92A7C28E1A786BED7274A1E87749F6B1B05B6CD5047BF5B6F6ADBF0
D25C8D5208E1E3019BFD5218EBE79578A072462EA51E09627186E9F40DF393CA
F0F0AA8A81AB02413A24D491AD308DB487846D17E9C3E95E5842D5FB7A55A92A
962F2AD0FAD8B198DD4BBC90179FE9329D97AFDB378AC89477ACBD92D1BA24E0
33458D3727ED4B961BF04CAC860132923ACE057116BF388C8C0FE4267213204F
F0F00D3FC0B1AF189101F02498290F371FA6B0A5A39B085713B13B088A932409
3379917DC337D433376EDD4B473BDA0BF7B5FB00F28D7848438AF0651F9C3650
6CDE24E3F717A5C387C64ED6809376C8C1015C395EA930024ED96A015B218CA7
FACBE5C83B5D279E14DC084DA2D3842DF0FDDA33BA2AABA83762C911AF08BA10
D43464D50EB5705B5F8F86CAB5CA3879405DF665D0513D45522C23DC7D7B9AFC
3EBCAFCF7D634D4C558A8EFA9DF8C2EFDD7812846B9DA0C07F947D7524D37DC6
3A400F593F917DED24E2115D16B2E47E3DC85288B93BB635FB4D12DE24BE0003
908E91DFF2043E53242B1D8E6D2357291A04E7287731B70785C23DD9E87512FA
8954C3ADE73CF3F9B1032905B4783C306AEABADBB9D5FE2EC20FF1E5D3E208B7
0A82F3812CB70902CCC8A0CED4EF40A73AF7245A299C3D4F7F4116B07F162570
7CFFDEDD5CD6771A68E0E00A028B98F990B4D015153CCC2E1853473BB9B42C3C
DBCF7C83ACD62213BF6D8A8C77FE8B2061655349FAEC071CBB4C168386ACE8B2
49503EA4EC512D72F932B4AEEE375FCB3A86BFE57FB3461B4EA8E3DFB5668B7B
3D2EC809E055FEC45769987DA9CB3DB593307B759B9343D3D8D13ED162A43CE5
ED0110C946D421B421FB4CA8C5B997A491F8A791216C6FA9A62D337FCD128E56
CD8B85FFE824554C74679B25590F079D0C1EB4C3D40B013BBCAA723296E00046
3F8247E55F8E9CAB0E67857381ADE676ACC5E3282A3F2F35F415C5B593CA786F
52C600EBA2CC4A176B1EE20A0A0709D6C9E30AC4FB02F118A80F39A2D3A7C748
664D0DF3DAB0C546942F887B0A495CDFA6DEED544D78E6FE09001BF7787E69E9
ADF2F5F855B1FC4D27D848205648CBE820C1EAFE8C87DC6C0E2DC5B99D42C4EB
08FDED400931C8B5DCCDAC5D47BB71CC988759AFEF42B6D450BE2391F43507CD
447581FF932F5B55D4C8CE6C8C9F8C6B7B9F00C11F5F2AD968CB3E74C7CEF003
3F6F981F50D27DD221D487447AB5ABC9E68C826CD0876A83184F0F93C950BB98
309C5776493DBFC71B73568970E19ED65EE83EB3ED30326F19B25596A888D753
0E73DBD07BDF74D0F6A2AF779C4CCE2E00F837EBF22661AE5630B21EF71E8586
B8BD977DF5C00EC73685E5ED7A0CCE16D6CA98017C7C118D0870FA6250548317
9F0821E1071F912646A17806F12BE0F07606DA710885C3BEE0FCA40901142B17
1E1FEC7570BF24516D1890C856632FA4B6D70B90FF0AE61A1A596CB04C7CABC1
D37D26ECC85EC180EB8EED1A6E86C1600C9E7FB298A96DA2A9D4F8E755E355D4
09355C8026429FB381D71265DBE5375B06FFCD490B11631704A06E90A9F5A23A
3CE8A015130A0FB817DE38359C63DB25979FD4AF92BA5D627FA697E110BC240C
D8069D8039D903EB4A88921D8ABDDC55A6AC76E7D03FFA2A1F4EC1E8E134ED3B
C56480C6961D4C4C4FD241EB727D31A47273D626EFD9806976AA4D80E4FB2C64
C79C4E7B77F70EC7EB8300D87DE085F5FD245FEBFE5C19D5945CC0953AEF4F24
194538774B4821CE2285376F74BE1E2E3C49DE611929FDC28C23B692D5FAA6A6
68B2585A3D6006683222F07BB1F070662DFBE4C835B057D5953BA549C0742D66
1C8D6BA1F02D11E57DF90EA99D68B8B3480E8BB1CB3572CA7C2A2A474446D4AF
3FE8E4A61F72B56377153D0B890971A824936B618AF3B0E69614C2E386FBB4B4
7EC80423384A0DA52C39CE68A552AA47F3854D2757F509F2B1769D6E704FAECE
7E1FC3DE57410DA12E707F36C2DD237344E597F9CEC4F3C67A22346CF1559306
18309753D179022FF6D52B815B58F2A48BC4D4A4311F728C41748823421F123C
9A24D07C12FCE3DB7EF5977C1E1C778CAB39F889A684F409BD672C3E6A26B4F1
922362F53AA09B150479161D8B2F5FDCEA0020FDC7A51DA45D77EC0CC9D3D768
CCAAD341ED80E67F36FDFAD167F9DC5F32566CEECBBE3EDC5CB643AE0E6AFFF1
E130BEB511A29E4F5378B00283F43C55605847ECC0FD7780692ED2D2EEC1E5FB
3EBE07CB1E5508810670EBF6E45EFE50B7A6FB590A75D9D0DE19C80384B80762
58813E639A76CEFFEF39857DA64E64B2F6904526F63A472B28D5B6865FB24D28
DC0008736A49D1FAA5E68007FB852E0A92ED6D704F15FF0F863528DB72EF2206
F6875890DAF09D18C3EB567019261C42C5D4291FE6CBD829C4255C893F7749C4
E7B6796855E211E675174680A310B15DA4EA154E2A1ADE60DA0AA5FD94C653AA
28BD84E0040F2B3660BABBC1DFFB65AA474FCF20136A75FFC0764BF53506D27D
54D7BD1B948B1BCC4E6AF1E38DC9C3CF9CE8E8FAF564CCA85F904153788A60AA
13D1F096DC52D96CFE8FC26805B4554ACEB90B961BA9B869A717F116F93B2F6D
29ADDB80A225B7C1FA63F324DFD34841FCB3F5ABFEF28F0F5E7AEEF011DE1880
F76492A66B36FBF0C02BA7606C632D584CD136D861B615142BB1AF9613E538CB
C4A9BCA44AC6C1F999F576D962461480859A34ECDE8AF4FDE5AA1B8C1E7B19D8
3F738F4D305CE85F7416979CD2644B2254BE2EFD56230A94692248D224912F77
E5C213D710BCE1BD4E6191E9765C4CB18671307933945F052757D713E672710D
EF408694402960947DA3B6BF54DA82FFE96F947F06CE2FB5827F840576BC0A55
717C052F0667884B126F54452B0051C282B4B49CD3F7636186D1DDCC4C52562F
90F81CFB3590EA7512A84CABADE67A950C37F5F96019FB2822AE4DFFC83C70CF
FC76259E25860A37228364E58AF0C35EC708D48FD341C439D8C6C9D20AE0383C
5364033F2369A0D6D4DABFCDB305D9C4587AC495570DF9C4F05525921AFF53D8
122EDCE87E866DF89959D51C64C7A1E697B5E0C1A4754F54095D1CA40B9417A1
DB1BC9CFD7A726E5853FD36B3291E4606AF1447602483A341A59A1B95EA285C9
4FA1CC5B8D9AA0DBEDBCEC5599C64DC58CB532690B4BB9EC4E1A8E556DBD5F54
C609517FC0AB69CD2260364701EEBBA2CAD73E31BD3229C5F8931981B7F9C278
F0853C066AD72F0C46763A0BE692D47598441E7011C41A69566CDD9FD561FCF5
AAD0873312846B070B77C6D79C45080C9A4CCEA3F4C904C19B7456A83B170834
69EE367CC1F88DBD4F49E1035E0D4AC54FAE46B09A0A16D02CF31590EFEBB586
ABCDA6A329FB5D07459B7E6C66685144EA4CD42D795CEC42606A82964DE25BF8
4C229C62E68CA7CC2BA576708AFEAB29E9A7CBE0BC90D0E45B0149324F555BC6
CA6111D592F4184FABB849A3676A8D175D44E71B901828AC2595BD123E8C062B
8D1A9E1E0D8BDAF66CDAC488ECB36B9DC8744E250A9967E7B70BE19A5A755A8E
F2280EFF9E8D6EBF66746CDACEED55FF7A4E26CD6CC9229D5F4185B55E7E81A6
6D846705F7C5E94EBA49FC928048FC6E99DB2CAE37F6163465973FC34F18A96E
3BB2ECE5CB8DE317F7C1449E4F6C8AE7D67AEE9BE9CD45EDE11C79F0180D8145
9D660CAB4AB3879DC6E8517D66FFCBF6BDE45B9E7C914E0074C4F6D3A398A33A
4BBBB1A93834B075801F323729C9FF29E681FD7B0C080A5B57E0ECAE086E3FFB
5C4B56B45C48662F6B272B13242044C4B1C222AF7C60C6CD394D7C4BC204610D
3A92541054C10CA2A232F44B216B0A7C6B898EEEEA2EAE31DBAA343542586906
C3E0A204A8F86CA2DA812DB4F23DD7676EC3BC369E7C89DC19215FA388179DE4
D224F19182BA7A3F36D0B7D0C8207A291FE4C18F6335FBA135BEC3293657E644
F29B46CD6BB7BE5CB0BD793CF3B35B13170730EF3ECA5B051E3DA7AE134145C9
BFEB0E526D408712B8144152E252843CA29B55BB99CDE952E807631756B1FB6B
85AFB3F50E53CABCE615BA7A3D5E4110030E18F7DDF58552684C66C94E84ECF4
F361EB4E78E836D10D890EF292E9729569F2DEF33F9469903A4319D244F00164
BCFE67DDE7206138CF2D23227DD5C8A1AFCD72C564F315E0AA4963798204BA2A
9A504B2A0A92D776A5BD5C811BF0CC8B22F37E954801A7D97D076D5FB3904908
E5F3F063A38EB777CF374ECAAF088A952BE760F64560F50B146EC0F3B3FFB1F9
D7B41CBE22FC832602DC5027B4CDA589D4204A5A5E0722F270752C6BC2F91D9E
724CBBD53982E2FE82CF72A27FA056D75E4289F24E742ABE0538FB7A82BE7DDE
F5CFC3046EFA5B2A51660FFA663695FB3C03D7569D309DE3ABDAB022882003FD
C5DA687CFA43C0D1856C461F97C7AEDD6764A330BB06435612668940B9251CAA
B8CBC7DFF25941C916D35E96FA40AA847DA5E22F00136F21273615D47CEB632E
97CA65D1D2BE3644E84A35070D8E8B67E27FA6F009E25F64B6827E9F8867A18F
92F1928B97F03B9308946668BAFC9BEB325ECE7BA227DE03A9FA9242F6CDA322
A205BF77E16D1B0387843CD39A2AF0EC9B516773042AF20F423A30C79C5CFA48
3AF99DC1251FA8EDFCF2EFCBA6D65D0FA0FCCCC6146E7B483AA7CD13A91E54AF
F30DCD38B5901221B1DC3066AEFE92E3FBB7E4176DAF6F5C10F6315D432DAEC0
5785E0611D82A36F9FC00D0F38255D8BE44233E4E54C8C0255CA77AAA035608B
B2F5D578D08FD7B68352CACCA2D75D486446E7369DE487131D0BA4FCE9C00A58
45D1C7E8F51710B4F1A4DBD8E6B8EA9709B75542EAF6CA2CAEE117313C66EF1C
56CD1A04132F2265D2A30F9CDE995E06A82E0E3D4D0616EEEE3A98127C324ED9
094148BB33DB26E3E436B06A04B309E992FC208403DC91461325F612CF1421F3
099CCD799C2715780C37B62D3D1BF8537CFCE40CA18283494E800D98DA6523ED
66EC7FD40D20D573D3E49345B301795BDB2F317F371164CD8376433E9D2556C8
FD15B110E435A6C93938B9488213B032991B497045AFF4168FB019A777F8482F
7C6F4150C4774423E8C99C28166E5FC3BCE52C173E74114C1C0300300B9EF15A
312AFFAE9B89C596599277B843DA6A04D73F003E662859583611989501D6F299
3A1B6C7746982EE5CA54E82D2393AE265E476BF02786B0C20CD6106DDC48C23D
98E255DECD92AEAF5DF071E285C8E0D2DD61A71643555DD007B6477A05334C61
810FF765CB849F8CECD243BB1A43DBC273DB1BE1C53B751270D61C8ACB19DD62
AEA40B0E23678322EBA231B6720572F045B32289A2AE66CC44A1C13FB8BBD4E1
8797DAD55B8CC6FE268840400BDEC78CB30A2F939E917692DE8A0D5A826235FD
AE0F2269E6CCA5E6E543778DA248C34D20462258D5DFBFD7DAF32CEEA2096AFE
70E8058B9F0B6D3A86FB04163ED36491F24D7C3D634B25C2CC15CBF438AD191B
3BFC1B7DD6D9AA4D9519F85B14ACC01C0694990B5B4CCDEFBA8FA1D34686001A
DF08CCB347176838A8D691D00141839F0032560881EE58F4131635112F94C35A
36853AE144AC5AEA6395A2CBA52FE80E62DECDCBF8C2255DE4C035D2303AA66D
F56526A41CB14516DD1C4A4896F091965DAFAAFEE8AB73E68516B5714FD6DCC3
ACBFA7059E492DCA4AA0C2B50FAFDEE715E865DCCD1249255D1F4329FE92C8C5
247752B2945D2D707601983B3415981AF9A4CC1FEFD13FD4BAF26C1556CA2423
6C08DAEB2F796C0F267E8D7F4E2B82093323981CE217F3203590D105D3EE27FC
276277140155EAAE420BED2569F3231D1EA86607CC7EE79F2BB60C5EF4AF15C3
47DECFA798B6E803A0A99CABA87DA35B532BCA16C510BFB41B1FED01B01F5FB9
CA6867E6D25A9AED3AF2522845034F9FBEF35888E87E3AF5DE6125DFB42C4810
D2FE7BF278B215DB9A61885A88D8892C7562E13B2FC69FE9FD47150AFF5CC168
6E594D72C9CB7B720E779333D814901FDEB3C6B5D8ABB8A07828702857EDDDC1
030D19928F2E260434DA3E0F50E7F3BC91F69C38CC6212DA06A3A0C730A82EF5
38218AACC1AD2BD1C98E198476F07F32DEAB29245E76A04D57AFF7B9A1E82072
0EC4993EC419CC471B55FD83A887AC2DED3690C808D50EE3FB532B9F3BEA0EE8
B65013C35B05D14D60862AAB2F2AA9A9B7F03F530456D6A553D098CF057C9007
EE185EECFF81ED1157774516464C6FBD414C528D4C0AE081C851DC3F31614CDA
56DFF9B3A1203EC12AA939C3F004DB440C37234EC49400BE771DFC2986440D71
6C0E4B3873A3F63F718ED7305ADD562FD546F1E50BFD47D417994D2DD0AFC488
F4420CFE3452867774442E4B692A059AA6B9F434E1C1C2771321F8DF4957443B
AF71C8ED83A3155E52DD658F4BC55B753C942539038F0426B130F365CAE08E9B
046C3F7EAB0A0691B60A329E70A9D420E6DC23795E6DD8CF55B9823989E117AC
05077017D8F2FF9F6F7B1AB0E8B7CF08833DC775A18CB0520A0CFE8F04DAD394
CB6AF09FB953DBD5EFDF6925E9A446044C4E856F3BABEAE98CDEBAFD78C6ECB5
38B1BF02188A91F1655BB88BFA9851F59C63BBE90E17DDC644F2E2E78238A91B
43DE9FAA86551D715D50249229E89BB44C19F6098ABCDB06E2D56FD40D8CEFA7
33D3C9A578996AAF957B963C159EDAD2B14BBA98940751DC1A7D74A76DAE7C2F
389F7870B9B4200D72175BCF191C4F3ED7F9F55C21A04F1A6DF8168FA2286D8C
7EBE4388537FB7E6C9492C2FC9F5B3B18C4FA5BFE8A5C2176009685156270A53
6E5DC0236DA24612993121152E7E7A468385124758A2CCBA6604E8F72BF2316D
9271847C8741678D1699826FE8A7CA7FE321AA97994FA366628CECEE214D8C12
C157E9272C09D25038F29F5128D4644A950C5623EB7D6A90860842964426D9E5
06537B3F8B46F809B3C75CB9368D70ABB56BFF966AB6C821B1B553C41ADC5FBB
8B7C18E2A7B55A71827007D54E603D88211C35EE5CA476C09617B1CEE6A2B48C
DEB0450B99E5E00DDDC194A6BA3C7EE4290F0D898BB3E404CCAA91FEA4EE8BCC
9BAE522B4821985E2F3BB273C45AFD346545AD9C29A16CA1E10837B4D590E004
C2C2B8AC7C9FA1BD66202AE72F01985BCF3D9493ADCCB3711D7D6290DD4760DC
8E9DE3DD8CEC4918D7FE142F2FBC5F9332C1ACC7C13728C6179077EBBC4CBAAD
AF493249B9BCABE51EBC2D7D6D68F0F1C54F38D882DDE8DEE28A07A9E0A42143
E0FC9299B8A1F921BAF0ED78D89F33F144043D0FEE36BBF30E39D6A4A1BC869B
CFDBDCFA8C381B3D58482A0CC98C9CBE5790E45A8947618AAE1C7859CEB15776
5BAF324C939A3DBFD4613BD0DB2A70E57CB73CEEE6A51B72B5252EEAC0AB82FB
AB2A72B5C5839D67E26A540DBDD8EE8783E3F3DE2BD2DFA545A711B2BF58BAB1
D382CEC2720CDFBAD65314D2BB69D35F3F089F755BA04D5D03A83FE10482E9BD
D7864E4362ECFC49D3A4F2B5820F17BC8EDC0C053D25AAFBDD441F7139AEBC59
5F5E82AA5C049129D006DE223E7620AD1E77F2C9F7045257D254633BBD947B26
06CA8BEE0ECA2F070C601EFAA100DDFE2B5016C1B2123FA24C9748A7AC966BE1
D30827C1A420DC079ECC4004A59E1B2A075E1DBDACE59A33C52DE098E40FF406
8BEB016CE898B5EAC79E8C71C2C7840714AE480ED0FD98BCE0A1ABC12A9A9EB5
14E0D3DACB121BDB9CED994238C39531CDDC197EAC2414615F253A41DB2B2DB1
BCD88F7FDE6F59961B6BE0AB723331585E31AE17B3A5F26C726618551ED6F3B8
5C5DB458FC08388C441C04A64A0C41F8C9F34807DEDDF20BB1BC36480A5F91D2
E7587E9F1005F29EA0215797828A9661A2CE397A1F365467D56D210B185F12F8
DC154E4B79B165A282797CAA35C737F3DF938004CA4E9EFFF243628AAFB3248F
15FE4F89517D4C07531E5FAE089A21C1D49A8D2FCCD60142EB127441F4B6ADA9
4074079159F6EAE77A8A26CEF1BC56E92FDE53A26F9395671BD1653E8DF6C320
67264CFBA06065AB22476B5017C53D18DADCD8377AB13B43467A18708A41B051
F31A13C3EA3D583D1AA7F968E26231448D2D4FD987EF7D250F9865E3FE7207BC
DED581C5F70C2E005213489EA21075A3BAB4C488358207F2DBC09CE29CD93203
4A3C0C89135FA3E075E35405710068098E153341BC60653264E799832A468D39
9CB9F4F6E2B26AC9EB6F7548E63D6E83F77B0929D99246B2B66D93D615667456
8119F59090D32FB97B7B14455E226B2E1721BA229A1410ABFA2171432A1AA586
E65AAC52D638ABEF4608F8E37A48E9739040BB737D1B0B0B2D33F181F928420E
BA065CA35AF942E6CFC2646D50949425D33047252137451B79C52B101ADAA48F
B0A461461225894DEA514F8FC3215637FEA7A304C5923205BD49CD627AD7E9F7
637C9BA48F730C2A8CA5441A4B7ED06EBFC5FBFBB66A30B06FD147A2003BC98E
41F463A11C10C9CAA5470F770F19A5292DCD4C30E8928CDB1375A67FFC936935
878EA73FE41BC9A94C7C4AE6CBCD9414E45E92C76AA549D05A5C944E26BD2C0F
0881E7DBAD7A9023B62FE5A0236DED7E77A8B4E0B5182C1F9F01C677EE3F7513
703B23593487BDD4CD96EEEAA809372D0F7C78CACBB5C8AEEDFE85CEF7B9E5F6
53AD3FD76A70C5B35A2390E5D223A9B1BB026B5AE64868FC6AEE2A6A9791222F
432E490BE14DD40726C5DB38507FDB6F6A7F613614306871E98D50E9E507201E
11D6583DF8BCB311128B7FEF549E263A5F7161E4834077E659B690A784535F52
79BBEE5A68791806A9137DB417D7AB84F57D855A69725368619228DB269C08EA
3961649C0309CF1E532885A495990A9A0AFE35FCDD6169645C59195984192F99
4AD63C130BC3BE59F347797DF580DA0E0A4F13FBF20B25DFF7861AC65871DFD6
D591D11D35F3956CDCD2C060A03B7E47417DE3280CC78C4FFAF50A2A66D9959F
98E7BA23D475D79C0026C39BE1302FEBB6C5A7E2509195211FF1A494D775EDA4
C495EA195FBA53766189335DECEA4B16D6EE1A010538917C6C2E033240C86703
508D2380278FB9B8E12F9B0624B85C99A5E98B5C458F88AA854D2F15F7AD81C9
F14A25F7C3B591FB74909EE16F53AB0F444AEC233ED2BD02DD345E2C115CAFA6
8D28538C4D2A07F2F83A8E24C5693C9E96ACB55A77DF4812D900F42AF9770E51
EC9AFBDBBF6E6B3FD434FDE1329BEFE5A0C84E3977329139F7C8E8BCE41C4871
F6CEC22A583406AA0C6AFF44BB54EB7A8BF61AB70AD1C6615B51881FB83E438F
A7115924D26D3AE5F7ABF8CA57F2147A5C288B50B295E46F4C3CE9E0671F2A80
B7BD216B32682375DF670EA86EA88BC9111276F19BC2ECC2D462741B0BA00C65
61DF4B4C68577A2E369FA93FB926139676774399E370879B537E40FC0629AA31
EB86B25B6F4766BB606E8733151D3FDA0B39DC1962F245D9E49B3A42967A84A2
B04CC19B94A56D2F482C003A0A5CB77A33C0E2B00E5F7579AEF49A3D4F23845F
5777F048D317210A6791D432094998B144BC6FC7C2AA86815826A0132FCFD809
E2BC34AED85936859173540872207FAF08E24C5D0A20A385910CF5CC9590B7D6
8795EE807B83CF7E1E095CB10D5CD3263B03C83FC4B5C91259688AE7F151076A
F9FAE9424B0E3DAE6F2B4E63485CA9379B1E5038238A03A23B1B4CB13CE19083
9BC334393B10E1DCF7DBB4EB6DC13F61C0A90C6BD0FE37726F45C04AD5F17FCD
1E87796B6F6721ACE5F11E543057B6AAE0AB1944BDDAE1FB609F621928A3A51E
EF532685576BEAB46B72FFD337D62DEA0EECDAC0ACC8C1B258E39411D7845571
C082FE435A273EB95A6F0C1CACD44D32597DF68D98B214195ECDA182220298DB
B1EB1FD9E60FA696C551826A537FBE9B5F897B957CDB27ABA4802F0AF031CBFE
F15BD7B46BFBE6CFA0982129B55A27E737DDE5C82355A39422A17124B098EB43
EDC664776ADE7832E606AF11583C71D31F7D8FF73F593DF95492E74983439AB7
5BC7A21F225F83C4666B0F8311C0CA001BE9D46BB30653430174D252E3FA2075
B0C445958391589B431E90D4571106E2AE72AA71D6D04802D690CB0BE3B49747
3473197739E55C66E4B7C85DA68010BE3AB1624D36C6C0F3EE53F3F6B2182D88
7C972D6D61249C43A10D5C2F624E2116CC9174AABF8FC76B4CB44ACD2C158FE3
8F1DB46C97537A4DFF3B518AF203B1505F3FA66C8F36F2FA4550F81E41D6E57F
80881B3BCFDE9AED0CD76DE2B8BBFB516D51E15344DE683298529B579CBC3945
55FD489236394407BB66B609F75D8C1377E32500AB25E770BCFC5B8326FD06BD
8F3BD37EA60FA8BB944146B3B7D9CA452453C825B92E606247E509FC8B91B63E
7BC74A1EA9079752B0985AF8BE3D4DECC616646B35CF39C6C3E0846586077E38
E1DF1BF4C8C223AC3877F7E650E1C27BAEF83DB48BF2FE85645CCA04C281B29D
70992AAAF45866D8D63736A1E7496C76AE7950F5F6F60845BAE801DB3611D794
FB1A1D878BFDBB49FD88D0FDD1C8D598B54BF11E15744AD6836652D627B5D776
197CB67C666E254938BF6A44706AFC1CC092741BA7FD797CB9DCE91B5AE82CBF
821D0CA2394715CBF564DA9F2CB1FBA99B7EFE1571BB537FC01D4EC43AD1B8F7
3F3F8123A9092D9F909889BB5F3286E69430D36A5D1279E08FF67E29953254FA
16D7AA03EBFE3C76C97F952DC8ABDB738C04ED3F5E1479C3146DE0D27EAC3EEB
E036BF483563AC704A6F74249E9F5EB7CA37809EEFC33FCDBF9C38CE4BA51075
607335EA30C933E3EEDAD46AAD7952727E60223B86632842682BCD4EED2766A6
9EF6B97655AE38D9AE351314503CFFFCE5CCF041A02877B76050B070FFCEEBEC
25616CC076DC7279B83FA125D6DD423540BA14F0AE7941F78325CA190CBB2659
BCC601BA85B214C79447B36912CF67F8CBDFC44617CAEAD49134E8205BC73C2D
85F427309125949CBC1DBAE54FD404400B355B7CC089CF2917E860A5399E2AB8
705C835C93BE5FA7CB5DFCA69A50E08D6C4810474C709515D6A6557ED09C2D30
E6267EBBD5193878AF0D3EE755BD5958FD3632E670361C8E8F78B618B457D710
C2B8DC5914E90651FC5D7A1ABC300A869DE9837D710A56F1A2149B53BEA91A5C
184A5950556EC8BFBADBAD045C00A6C3887E0A00795C37141D0F2B723659BE98
EE64343BBBB0B662F44D186BDDCEC68737C144D16D313F269B56FB852777756D
2522BC0EE7990E9D7A0546E34F8BF633F656FE32F1FF453232672C9F16145FCF
7D27CB7F13F38FF4ABD16D2FC22656FF41E35FB05B53E1B9BDC776BFBE74BBC7
DD92D941DD65BC50651003587894EB357482F68EE8437F47D2A1F30897669CEF
42A595CE4B65C86C104E9D92A4299653008C30FB4BB4FBCDEEE2DD064CE34460
8BEFC72FA3BC09B33FB011D26EC09C0A5F8D1038506BCA47762C1A267CFDD2D3
149CA8007917ADC7938968F07E16F5F94B475108B7FCB9F742BC4FA62D0F0B04
F5A4F9EBBFAAFFB7CC43C20E5C36FCB2407ADBDBD37FE825BC3853BA73139F43
D7DB5D3D709E67CA767DC3D20929B797E1AF1E95D492E238AC1ACD31713A7D8F
EA52AE1C01905E075CD64CD00DE4889E1BAB998D3EE2C0BAA7AB94A0807026C3
BDF060CA46525FEB4BE079BFF644AEB6B8B421E14F973B46C72C6EC6FF852C85
996873C9CF8A1E6C29DC4365DC1BB2A7D40B40B3B362AA3B778C47E857E4C2AC
635DFFA1BB85D6F9E2676A7EF904B019D3B6AD98F74FD037431914B464F4C54C
EF25313CD7BF2F4750ED01F4B464464597B7A8AA8BDBFA82BD9A0A1E60FC5F7F
3EFA1DBEB4DF59FAF6D7E6A9E866BAE054F5EE51C829C26F9B88AC10960EA2A6
AA2D5871519431A85D597A49335CC40D38644FCC13A29DE6B7B84AF75B80C768
5B16F3F33A59C2A982B77E579DA191A63FAB427A45CE4DB5FB80350DBBB4AAC9
DD74CCF3D403C8992A070CC18EB9480289790690571E532FDDA928828944EA65
7066B84C17059030556C51260E13A57B48CC839F5DB46CEB46F8027B303F4B31
54ED1883C36E7B448B7C4E0655C8FA2515B0381184464F255FC6D0158061CC26
D5259712E4B57653F9D831627A162ED56EB6794BBB90FBF34BBEAF282A69007B
F679FF14EEE95F611616BC36801F85F5B2B4D380F11A63AB6BF31AD6451662B0
E22E6C9C0A057F7885CFC38A25DD85B78D3D416E5E034E36D9C5FC0B33B7AA0D
46F3A3FC4A32D0977F61D836C0BB1FA3D448B363C36F9830029CD7511FADB35D
9A3FDEF856C43D283247162C392D23E796C82EE55AE3ACF0B696E4444DE0BB34
91FE84A6315D05200A8E141775ED7DA74734480B48D114719BD5B359639613E7
37FEF91B42E09200D95D57CD747F029DE9731CDDDF59F46A636EEEE6A62B6E12
14CE593C8E6A44DC8C19DC0C2D9D95F7E82180B767328BFC532CCF26068F658D
DEC533A7F9759BF94C667916F166A4AD0D7458BD4AD0B312035B1E6BACD7B080
BE77DB2F1D8B7F9C0DCE31046249E9D0690379DD5578A1A5D79B9B60CD7DD940
C82D0E7F82BA02EEA5CAF47A04C01760E7B2BD1AB594E30D797581F5A0E81AB0
F7AA1183CF447A19D91B8CC30481B5C49B6ACB4DC451F9C34DDFC3787832DA8F
E8848BA6FD3427F6FEADE6308DA99F4FCC856B606CC19287478B4D215DB07F77
26C499CAEBECC79F098182DC77880F7443289E6E8B0FC127B39017BB421AAAFF
1052012B1DA153F7095F6E0C2E80C3CED524E63FCE4B2955A9C7950E7043D775
066794A2DA0B91663A11D52FDBF09C34772DFECDB156BC729EABCCB6D27DF96E
299ABB918FF662A5EE19C1360B5ACB813FEE8D01D73AE60ED0238395CB9AB494
1B1C526E7233E93FD43EBDBF3A63719D837EB628627743C1E7186CFC7CBC9159
D8DD9B16D9ADDC30CB7ABA76327DC13E282819C84DF00529D7542820803344CB
844CCFF0B65999F5BFDDAB5AA355CB6F4CDC952EECB9CEA4547D57B9EEB3ABCE
4E4F0D18653AF8961B6654C0AE9EFE9A2EF4BCFB0B671E5568F2419DD223827E
B960C01DFD5B7C33A6DE4D99644DA939D6C253F4D15F219219825BEA068392E9
EC150937C035D9D6B9E25671F9AC599A40C37B2439C06FDADB613DF69770905D
11D3022EEEE058F0316E770CE491653383D6A24F1E84D3ECA5D922289DF434CC
3B75118AE7142A1047B5E8CEB7F54E8E4D20E485B5D572F1CAE3AB8B14C20005
B39C19BC5F3362DF19FF27514A43947A167DE171D9BC7ECA7FEA2B7ABE317AAB
1C982F262475502F3BE72E4B676F7A211F72225DB3DB146BDB01C7E9B71DE109
39525FA2CD9E35988FD5B8584B58D2A96BA0BE111CBD18EC07707515C98EBD48
1941DD3375501534CDA0809A3FB4834F8123AA9C3021981161813F0BB1D87551
CE86D4E2DB7607F065FACA01BF64480CC3C3CDDCEDB7655264E5A5CBFF0E4E7E
7536E7F6C621247F715C846C1FF57890925A192A2CDA1BFDD81F7A2FC6423259
6712EE8C58E25A36BE60ED028DDE250ECEEA3C1EC9305FF2BE5D633E49E6D108
99FC5C0C1472F6404B1AA6039BCA9DCF908AB3F675FEDE7209862B93AB33E5B6
6B12904822C98237911453E0233FF14DBBD172CCE6CD2B6095B0157B9B295F24
4E60E471A721CE97E1FD9A0EFE937656C78D3EEF3837812DE92754EFDA69E253
507A388DE74333F6462EE1DB7FD5242DF69DB7749DE522EC506EC6F9B2C43864
D39B831C47AD2A782AD53550CFF43B4DAC2BD3A84C1A663BBF1972CE6563095F
56B93D56DF696400ACD04765BC793759EFFBAB623021FAB977DBF011E7F0FD6C
9B3E98788FF202E737996CCC4847CF2019B1217BCBDD7DF302B8DD0628AB412A
97C78A25C5717BF323F7167D12F37209017FE019CD87A1A38A0CCAB4AFFB3159
A66A113E066238B7FC74E6227FFC6637647F60685A0DAE8F715731AB8EAD23C7
0A862AF4A25AAB13FD9326A26EDF85AD06AE33AE07503AFA59C4B1D26C6EAE8E
4E226211219C690F3E7769E0A9E7FB346A9DF4B7B0F0004359C8ADA7FC13B788
2074E65C6C61074320443A855CDD8298F94DB4334199573B8A08AE977001F136
4377E5F75E345F3D60D8C55167F9A0BB8BB34B51C9B4AE7A36326A5B4B5DB26D
D5B452FAB5338EA8CC01B6818CFA9D57DE81F6D86FC17A30D922B0ACF922D3DB
FB6E2C4742B6590A8D1CC447CD24C5E0F2B792C0BC289B8FA24D22A82C90A635
66472F61D63F51EBB25D9B1B174C5549F4B373D0C8429FC71B96719EC6B5A5CE
885D44BEB9BA77820093FEAB6790870C7B880E322F11492FE2D4693CDDA5926F
4D6643907C7BBA81D1CDC12201101F004DB32DA55AB66D790A654328029C8638
5A3FE61B5BA1369DB20EC80C8086DEE33D0478E7278EEDA0833C35F798D66B30
AD10FF770C9A0811AC4188B3B7230CD6EF0D4D69D8A56566C0FA3EAC58ED40CB
A6A79B9F49B4B605A6BBABAB617EDA35B2569AD1E34C479934F5EA9823AD143D
84CC102D2A6E3DD7AC3AC460D4166BFDA12BC262DE9CDFC614D7DC1BC5691098
13B7BBECD38DAFA3F671958441085A247E4D927532D1A0EC56C7E44CB159EBA4
444DDD09B396758316044F417E4A62EB5F60AD32CE002FE7F15CBA8F8D641E84
8C5CA6D68A0FDF67AD2F9B62E5EDD6FFDABAF6A0834A8A350DEB9624170E1B55
4D5833833818FEA5F5ED726D42578FF1D3E719337D4DB74734FAD150B6CFBD92
A2ECBFF9910574C13B694B43BBAD92BFA4465001E476B1B47F8BC9212BF6EB4B
A42976BA57FB934260C116B377497C15B663DD634701EF78880BA21C4ABCBEA0
DE7AB213BA7086790F7BF0A7B38FCAD4BBDE8E1326BFAD181528F09979D785D0
90DDF276BF310B963FE72518D4A1B62CD21FF5F33AADF1330649BE0DF3198C16
D92FB2E1247ADFDAB98EFAB36670EA40468AB1C1C5BB7A39D0FD9A4068AE5EFD
B18D279D7525A72BEBF26B6BC602403D3E42E045253FB34CE53F9212C9D27338
8EF3C13A4550994E666048F938A255173E3D83AB89679FD47E81703DADA74770
324F5F4528DE4FA92DB088B981C3911319629FCE8751C3AD042C73C59AB2AED4
BFEBC13F1E69B3ADC1A4930B536C7C8FDD89FAF38A48F4A8B6CC0BAFE11FEC20
F5C360C7E06FBF7B3197BD598F30B9283826ABBF9A5BE39513BD5DBE6453BB60
45C6C2E9A243C24B112CED50D41F64EAD584B433AE69CBA9DC280B3C38C13039
C6F13F534DDA1DA88A06EE36401A2A54A603C1F631511A87C3409884F052D1DB
42ADA6092525510F0F59789B9A0A5D22191FA84CCF090455A1D50B5EE6E5F869
BA8E18C8E2D1BFDD23F45775FA8CD0E4499286CC43513E355F5686D1D493082B
3D7CACA80F7EC984A14B4A66A67DA07C0E6B48F0D310755CE53F960374C56D16
5E4973D3762018E3D93BD6985D19B7F4E6E1256CB199204CC3DE231E6AA494CE
08A93843793803C57BEB78380D73E6E72412EBE4758D5DFCC445286160E598B8
3497C593C90728B12B7DDF3F1FBE32DDA3B3BDF27219517C8596B0FC1BC3AF6F
D63FF7F727710E5AE0AA2EF4457C00B6B2FCE20C8353208432377F2DC727F2C7
E9D6017156350503F83BBF51DE341A1A5CF0888583CD81A12BD26143CB491C5F
B06DBA21BB257DFE8FFD4ADAA158D9446BBC5488998C08320011357747AD504E
3484C65AFC26144E8A3E92238ED2B25E4DF0792507355E383EE98148624E83BF
2B134892E0849E78E9B98DDC804D33CE49B23FBEA41962775ADBC39753253978
7E096355328623FB797CB927051F2413F0E614FB94CBE84D6FD123ADD0A4E11C
873E88DFFCC683B626032CCFDE8CACD53D9690BD1E3153E25B25D15ED016E260
83CF2D9782FF923B3F49F67B819FB19493B45C33410EBAC8AACC4BD1E7DCE1C8
A3F93E025FE61982F9F65EE985FA5FD65C4F436A1E6380734C650A7F9164222C
11C73835E9633010006BB6B89B830715B9247CF0742917C7C593A79247F1DB50
E93BDB9AFD3C3D9BABA398DAE753725D21F4D7B0C1EE030974F2047C1A77549B
05513C1B9CD51909B26830A69329E058274526809F6EC08F41953A13458F8827
5D7FE4D2B983705EB895FBE9E127C983EAA854204449A841E80594B80A4BAA96
76EEB9BA4026B9252AD7B574C84112214F2C29CFDDA52C2D3958D6DF5D860AB5
5E7F75E7FE5EB1025062051AE1826675A5F7CC281912990E44737657E4CEC590
5ECB61C938201BF2CC618991D888A334458B945B683328365EAA97CBCB3824C6
0C6B089397BFE24A6D6F0EC7A0C4E262628CA383669A9D680D07364AFC5F07D9
C215630BD20DB0F397058F63046470C9DF112B2B1DA7B76A46314FF048F3912B
5F39B54C11219BEA28D5185E5E5BF3B362415BC3807FE49E3A0086E47857AB26
8442DD0CEFEE2D659E51D60FBCA3DCD351EBEF213659CE518B02E8D87DDF1549
0B7B426437E93678D277525C93DE34FE8E5C21E56DF4B1C7650637AF6EC8DDD8
AD1EBCE160ACB6D82A32D941F0BB9300B3BFF3E7758045B351D9B3762BF09FF4
2B20D0B8EB7E45B3CA3E94CEDED9DF1B805DEB6669850112607CF820D284E1D0
65FD6976EC18B89EA07E6F01F542CDD2303E25D40F9B08D0D9E482D394F173C9
884A27014D57BEE975A629B9F5FE30BC5E4282F23F50E273650AA3A684CD46C5
36725806415FA2F97223CF7329B3E7CE28762142525B504AB323204AE09949E9
51BEE89C4FA3F5BBDE04CFBBC9A840CFE1D4850A497CAA3C5DB6B33FC41274AC
C74269B6FB219682307719C216B78E342090E9E7E6DA53823342F3C454C2EDD2
73C9794C30A6205EE2633E3DC186ABA08FD02E9295A42F6A8BD12543256C8FD8
43D60CB4A26A7064406715BFD4E27CE116C4DB52F6A45F7220C6850E2EE3D3DB
8EFCC1802BBF0CF91A7EE05DBB68BC796647E75A1556611BFA45399CDC135F39
88DD1CE992D0744810082093CF8838C64CD67CFEE07E2DF38D95DF52EDC3972A
97F2301157DFDB64A730303E0926676B8DFA6A44D9E1BB55660B8B15E5705D6C
2BBD66FDE466560B838A37DE4710857541E7CE6059197106766636F5424A2F91
279D88C443C2F8967138A65F45FA34328D15C879E3504071AAE50D5ACDCB2163
996299FA25E75395AAA11AA330A52AA3E631B7417F217B0BE86CEC32409D8B67
87D644B750AAACE1C86E0EC2BD12FE858AF94389F79CBA3FEFBEE6041084B856
0BF0D2705BE262007EC6273E19A23B4BA37769A5F309120995628DBB129CD7FC
9E146F5BD265B6613C755FA6989947EBDA99C590C6705AE76FEE038E8CF6C81B
99A475CDE34B75B786238A94327677149BB53EA04AFF3A9AF06F61027E678BCD
F06CD4450405272C7727941C7C0DA55D8D40C155A1281CD4A904E7753414F1E3
C351A474B4B0D17F0CFD841D2A9E22AC12AAECAD19F847273C857025C0DF9A70
5BAC9527FF3A91D6EFF971666FDD84471D287F1C007DBDBFA2AA2F95E4794225
2534868BC0BDD3AC613B170754E1CF748CB6C0489438BE89DA50BFAC7999BE4A
242912AB5978361D83B9D6C514372866A572B31491F9BFE1E60219AA2F5ED174
4D95E2567CCC0B2FEFFF0095DA3A65D6EB705682DF92292C4BAECB4BFD0AFD3A
6D2832AF8B29B498427F7D0C17CC791D59CF6612FB96488CA3A32A8FBFCFE431
3F8A8FC44F9C7414485B645A5AE4AFE90B27B161AAE52F430705DD5B421F7333
A28E1934803D46A47564F47A25A16DEDA42031A2277FBF4F982811CF61B37140
77B9F552D1E7065A7372EB87999E943BA721C0D3245312382180FFF721625CEF
599CA957E8247DBDF773D98366253B50A949EE84E7B7F2C89731D28AD0CECFFF
7988763CE1AC1627F4CF0259AF104F1A4A0224910B0B9D80EB2C5C517958A9B0
D6BBD5B089E44927B79A2A8BB1C428579113EAE37586E98F847B7220B071C881
940D1006E3B598E3BC4FDC8253C26F1727A525F170429ECDA186071464EE07EE
918DA8903110F1BC42EC5FFCCE6840E8ADC084E63A7C5E378FF0A0444016A191
133F19542995636B1F993002C0B88AEDC69939DA7ABB6B1C7AAA577848C5DA4B
9D78097E5F8C73060D2FEC1F218A069053CA2B0A1FBF490CC00CCB8B85FFE824
554C74679B25590F079D0C1EB4C3D037751B1758B70F3312FFE826D8AC2F81B5
4CFCAFC7531B2BB3097DCB0FAEBB3B25E8D96F4D3097D3CF26D55953B6406966
BAF5B5BBEF997617429C7623C09A4F022AF8B96C4267CA6CBA2B2C0B2C863908
24D151DFB49570A6C231DBE20734473C18DB53D415A2CAB00BC20CD3E4AC4C31
F52557111A26950A8F6C1FCF716D3B3FEC178E287E83F7C58FEC4F546B31566D
7C3F43D5829E6603AB07E74842E756A68697334E1160E2ECB75AC97158A7C907
C33EB854708A3A164A0A1FAEC299006D8578C19B845EDE3F06FDDA656842B66B
409D9A217C17501D0F03CC0EE8B66859746C8FE9D2102AD2184F724C155DDE2C
B7DA850DBC86EF70EEC498459850B94ADBB1D9497375135532C3537C41832605
65D8BFB3343AC189C18FB117742E9966B459D99209447757F570B11985BF3B2A
1C32CE02399941195EED4C72BF310026C13AEBD4631ABF5B3DB13569ED522FF4
EEDEE6C21219B9438692C501C75C62BA84B70334512ED42D1445672DAA57F990
08E157FC5C1A4CE986D54DD780A3870BB6380A2717969F60266AA31FADA7EF51
C171CD9B92096534160E959A5320D8B2C9E0AEA77ADC67943D06EBAD6D98F025
2E620D3CE2374F19217287CBCCC1D7B71166653EAAC4CBFA2065A399462C960C
43534348B09110845142660F556F69906E2416B7550D5216AEA4761630337D67
F4E6D9031F874A49B4D7F63EE779D036DDB99375B4FF4C8744B35B40FBE71E82
205C888B146338F753A18C11121CCED7570B1146A8F84218DBA6E7190FEEDFB6
33D932F540B2AAD23FB2DD58050015905D46B128C4D09CC77A5B3201CBB37727
FCDEAAE5A238BB0B4B8163EB54F0D81B873BB2862DED2A90B8B09734AA18227B
4F8A4C02CB8A08125A22A8C5A7C67BF8436597648F96EA270523905DD8583F62
FFC6BE66C615F93AAB205932C4CE95D020A91F8A130EC70991DEF3C9D2114617
206FD38E1A7B1B489DE1554BD3DB80018DDC7B6A9F42FFB821D211857441A183
2173AF4A894D5A725DCD3107AF5E1D0590297723AF533CFBA51DFF5DF1470EB9
35F26A1194C247E9D105A169AC0997009952D30AF6D00E33E78F1683970C2A98
F4F8403ABDDAB2DC2CF56545CFCAB1A4C126B0A327FF64DB61F5C74FFEE1005D
9CE0C5730EC354C5449003124009A60B3B662C69AE6FE7408E2194E5804D09C9
2048FD35426CD3AF575E18B346D7F25FD1BA9F4B47812DAE8CD6EE1B33BBF6AA
A65F2D504F45CAA0E02507034F043B65E1238AC2BFBC0D8F10D28EC176F81A2A
2222B2117545EF265D6DD583094AEBB699ADD32B4688C2AA21BE4F05093DB8CA
C4BF9D96CBD0A038B6BA98B6078C9FCA1556AEB8E16DCAA78E3464EAD10C6F0D
DF513A630E0133FEC808630E4F7DB4412758B74D749818C4EFE5995268AF31D8
51FB497AD2FDC444537CD9A3C06DA778924DAC9BB092DACCD630426864743837
97CF45C34B580772D26D7E27DB76B589AB006785EA6940C9800263A8D16BC1FF
C7FC88CBD906822B693A03F91F23E4E06BF2A3C178B96AB0C59A00DF442CD1F4
79C06E69FC7987E3727EE06985E1559ADF6B9881BCDB1CFB8F041A7DF0647C41
75A9FB3D7E1F335DD115AE22B6EE5B2ADA989BD741693A0231D55B37A237066A
517C6FFE1F384F90F1B47DB4276CE06532479E48E7EF347B2D1F4DC2302AD7DD
C579F60273FC53AA4D99218977B02CBF0D2EC5070599DD2DD476D63F8BC436E0
13F25AC85F5CD88995423E5A8F17FB87237D074FB99A8D038B28A26B444C5DB3
586ABBB68D12D38393A985451215C4622FCA59BBE6BAB95588D3FBBF8357D4DC
0520759A7D93540E890C37971E766FCFF7D74C648A9DBDB61B0D0800404E0B3A
1A6C53FC6B15991066D9203CF9B5DC6D660DD41B9185EBC6BE3E6222755AFCAF
F22CC76935E911503088C98020B1C3BBED68D32B23A05970EF61CD05633D1325
38BF9BD6F4D5E69D3DF97C506846012E56E209C6A758E10DB3EC54820B2A7CEF
FA3D7FF30D313029D4987033F28647D31AC19E694482A15B2C4840D9E7C27100
9FA65140FC0929F711A0B3E5E10F03D1750977E53B31CF7B536553824F49E698
5E6C7A4A8A2AE7F8BF374F6EC1A66FB2C3408D97E4429930C6FA01508716C3B4
8701D39C70566F4F39CB152361F011905BA466540F38E107A62F45407C3679AD
E503EFBE1DA277A2E145B6341E95C0E106536F5408767802ADA6D62DFA5F5C56
D56773968A115B9E81D3FB291C9E39F3AED9D0785B5F0B6FB868D8C6CFA4C26B
683EC262DC1B5A8E0571E17EF144979EF89920A3A8F0C806CB9FAB57D387EDC7
1D956A4ECE3C3AFA5806541A59DC607934C19F4DD6C7A637424DC59853EDF69B
BCB023F30BDA21AB8C8AD7F1F7F6455E4CBD4CEED121ED51F170ACBDCDFEFC8B
7BD2CA906BEC8F1771BE7DDAC9701E5063105DB22AD167689DEF1956A2CE95AE
8045ECEABD5683A12E934A06FCF05C2ACAF93F5AE1D9BF43BDAFCB58C43BC5E0
50CBEA913F3717C5D7A4EDE0DE15D5CBECBD86B6F0EBE9751F5688A96362CA77
1E3DB9DC5390164C59957B2F2CD39BF76BC79FDFBEB4897FCC0A0E936046271D
93E4D4BD4E7B8606922AEE047AC1D64FF5EB2F4DA6EC12D7CFB4DDBB6B123B4C
1012059A24616A809FAEB2A45F0C8EED359CE3BE18A2F73B54613E59F0184461
EBEAD0EADD41FF95EA75B540CFC45DE1634C04CFAAD333FDF84E0F33A2EDCA74
E6F8F1B371CDCDC742A20A39AED2E38EE1DB9B71066C4995B60BF4D8B3AFD0A0
02B3A6E4FA114131410D559A7F7777AA3C4E692B8EDAB13CF5F02C0FCABFE373
41FCF5FEF703055ADDD6E210A0E1D2E8C2B41E894E5744713AF2E1EA8BBB632C
D473A2F2BB86B15B5583FFC35350679828E7777E60A9D5B83AE1606EF587F3F8
D489E669AC39A796A4DFC7533A5DECDFE9880A92ED61013ED96FD800BA3941BB
C01D553AFF8E34B9C672A4BF30E82A78D0E0AAB381D925C3B859969032970306
9C7EF1279D1690E31D70D13F976B78115E0B9AFDAEC9CA903901CECED8FC1201
A5619D115423ECBCBB4CFC479981A3F36C7DF0FC335A80B07C90BE6F492E3FB7
640B74E3D3BBAEF652BEA86664B5159BB8E00EF406B9A1B84FDACF0FFC94BBB4
DBBFE13B37FEC33DF3B23FC7BFEDA3E646371513A14DE29AADF0AC9F4B4CC126
DF2779061016E3275BD63E3099EA17974826426D2C533DC004D6F4C0F4605AED
52B51C319F277F0FD789C8D5F56EE75D27485E086FF7DB1FAD380ED084016C25
59765AA37BA1D1CCCBB92437C58BCC4B01595D76ABDBCC5403CA78B3766307A1
F0D737557A1B3BFFF929DA57993BF9D3E0878EA842E979C8E653F92046E1E5B3
6E223885BB7E1E8B28BFAD1BE98B96029B34E09BAA559EDF5E3D9DFA8269E06F
8DB4C50446F7DC2B9A8A8BD2D4E2D4ECD4D9A7C0BD4BA2A3CC3F1B67C085B49A
D4AC1983700DA4EDA4EF35D82D50EAE69AE3A21D55DCB8B567A15E65BA57BA23
28CABF00DFDA87B692C959CDB7A45A98B7B6C4A2D4DD9AD8A3E4F85B69429085
C453279987D0A15A51CC385B26D3FEDA26A24CC336676C129855CBA6BE939196
E1402216C9256416801AC8B33812540A18B473780E3BB450502F20E147764CDA
174A716443450587E365211E73CA2C322D166E39AAAEFD0D38ED496D84384366
F6AB3F3DB193FDD78FF21A69C4B13AF37514F61645182CF21B51E7EEA199D39C
2CDF8159F344800C3DA5B1854941164D5474C02023FE6F0E1217456B8B531878
01CC5CD18F4DABE09507D89773827FD6FBC72A4182FF041AEE061FCFD0503CE5
A240EDA38E9289B0B2B2DC37058A9709672C05BC52EF352348DB09EF9DC88744
21A3870031C5EB5ED7C81666746196A01F5A21C9DDD3781A58EBE5738C446C51
F462BD654D85A1A32297CBA91BBBFF80BCD00B7DEC624F1759FB9150DA129DC0
FDC4BE50D5A5CD8DAB4109CD47BC05E9611A5D69B3A9B39695AC4C95D2B8073B
0700F3CF56BA89188B1733546199D9EEC9679643E4F426B396F341AACBEA2B0D
F1F161BE52B75EC1CEDA2570A84F89AD064833D564E62F7DB7235E9F071BC67C
9003F9A86596FF1124600747BE646FC77987824CD8FDFD672B37165737469779
C298D0218D834ED05AE94A90272EEB041DE92DD0AB708AF974FED63F8EA2A7E2
5B5868DF4EEC80274080ED533F78D9AD857930471ADEF7F06628CC413A49FED8
3646EE5B85CE65F214356834200C49E6CCDBCB7870F570B46B881BBE4090D1CB
FC4EF5E998716C9F052D6C66D3FAEE0166ADE5F16BE5F1CD6D46E2F7588231F2
BE2026974A1D6451FE598D2D1EB4272D4C8552D197D6C1D6693EA252427E636B
B34CEF668238819AF5EDC88C5B249C58CED5C6CBCF63B4FD224DD2CD75CD212E
6BC289D87F1E08E6EA810D7009159F1FA858DE1E4E6D9936FEC600F414DB2C6D
92AB98F3476E64ACCABAD9EBC22A55727BF40CAB44696D80CF4535A0FE714F51
08CE1FB984C9C5B21CF8236154D849C83E36B08E7BF88EBC67BFD892E35E6940
E94893E1CDFD279728305E49F08A25B6B242E36DAAF1DE150D2674F35246B2D8
768DB2F8314DFFB54617007C1984D443CB98799F6AE155B030DE5E0367B7006F
75DD8238148EB3781C003F73787DD5D6094D6703A481C05C81D463C9DD4FE1E0
90C7E0FF17252CE087190AADE6A2EAFE6F3754EDD6278AB867FAEB35EFA1D7F6
65ED42086434F3D30563CA1AFC0933092B1E58992201AC3BC100421D93BC4C7E
E0C09F389FF828AA7585F9B7FAFA71895332816C95E988F4E0E7C56C9360678A
9F36A33624DA5D6AC26D7434E04902F01574A5BE94C232228A3778F1664498D1
A0742BD35D552069717ECB277088FAEA628B2A610012140A8D1E3A2BFC0BE399
14D8192DD5C62C633EABD93E2DE09725AB7C071F2636D7287B209D2A7FB3F8FE
3FF0191A1BBAED298AAD42D9AB73076F309317F7FFBDABE56B4CB2B79EBBD1A6
29D536AC5FEC2823BCD487BFE8E77B17095E3FF9130E2A4C0C2FED3BCD185CC5
7E2AA8C221AA0767E710A8734F2E6D3612A4C5F71E1A7854A0B7DB4F83D4DACD
59C206C2460017A68FE05F6B495E12D04631E986E790BA9DE0149F8DC5554935
075FCB35CCF796D9EF9F97BBB4163F5A43A0861A9033ED76B763A8DB61F49639
E47749CCF7812E0A4CB2D756FB0E9E4903814F47047C572BA8BE7D6136C56B28
9D8E66A4AD0D7458BF2EB2D93860886ED01600FE4FE5B6C87C05AFA7DBEDA1FA
6C76E2B23333ABF27FE159FEFE89CA6E88F43E2C8BCD55CBDD30F5BAB2D6F3B1
1B98A43210DDE46536EAEE3DF430C6518080E65394803B84CEDBFF90F3AB2CED
F9A6621CAB42D5779CD52C76A75AE1F85ECDE5A52A19CC2159B2A6C55E7B267F
E3EE82086FE6CF8F2C6937B09E7F6BC68D3456631FCDBBBB7031D5F2337EAB4F
70211C000ADEFF8CEB2BF67DAC531B53256C34A5211FAE935BC1EEBF98BE634F
D17B2A2F4306AC9C0E2C687D1D9AC96489408F1936557B76DC6FAB62C0289330
7A29F1E61D141E84879B2D72186EF82941854CF9A50C47603BDBAAEE6C9EAE91
5DC6F6A8673082AD959C8276E1D40DBD03ADBB44C0C3A425F84078E97B3D093C
670689D714E5BC01BEA28ABEE84D0FCBFF9993EE406146BB21B0805CEC687016
25041EF3B045FB716BFB19F965BB8D342FBD9863E1BD9BC67B80F842322A0254
84B92C455470D030B13720D2293012310DF8C091C45B8261D9FA08099BDCC0FB
B35FE44DC25B231BCCBAA667121DEC57BDAEE01F4B727148FBA1B332D9A4DD98
4352E9F7361D438E8C12A69DE629CDCFBEFF742C419F932F82AF6089D9BBA63D
98104354351ED916E716D3B1FA17DB35616FB37A92A24612993121152E7A3C3B
4C33512D63CFA12F8768CB47DF26B9087F138692B00E82FFB5AF82C3AF471B43
619A22E91F05E811135F08E047981E2255DFD763AF22F391722E9B2D263CB851
23CCD7ED6FDBAA5A7F41466C73AB642937BAFFF8038910C1973DA515E869D196
B6D0B8B8AF6825E252BFAF0D5B62B6135CC85A4383F380C770AD1E44970D66A6
C473EE1E1EAF89339AB2D94C2709E08CBAD9A1926DD364A1D0A70BC53C0F5C57
24AE3C9E2B8CA4C389C7CE8AAE26FC900614A3C1122D1D8A14A05A7CBCF9E5DB
AF7FAEC6E4544777F4E31B08DA208FE08B4C8BDE976D18C8F669EFADCAB68BB1
31F06294B45300705B786BC0D0653933C6561E6360946699DF92F05CA2B9F342
29FC9E79C0522405E62A466D5D450BC7831163599A2E67D000ACAA21FFEF941B
295F6A7446A2C6DEB5CEF464135467314596056E5101962F172B48ACFE30AA9F
C0E73DBA9E508070C5EF4EF0514593F396B2A26C9B94BC551A93A978A6810A61
E49D49C75223604AF01B5F46C7C9C8A32D81E903B32BECFE491339F6210DB593
571D9574F69E81391CCB59C30D3302A856F46D2F070D0A355396B40039AFF933
4B20C4A5320055F8EFFA14C4111563ABB27AB6E746CEBF9CE816B349CE7E2BDA
B7805D326993193033D9926E148CF2AE04C48190525C39536173223C31EF6525
99CECC14D3B9954E915A8D17E47297716A940F1B8749E779FAE8EABC686CF86E
B9AA864D42F282BDB2540EB3A78D5E22F7B00A29DF94657823B3DCCB2CA4B5ED
A26186578223C50EB478AC4131EBE24B45112EB2514544F9411401FEF77C14FA
64B96654A186AAB626B36A2AB5F41BAF1D97C3052FB835CC034F100AF3933F3E
5C8AA62ABE27EDB5DDD935FFC1E2AB3E703790CAB52F6AC65F543D188EF0D26F
AFE00A584F6BCC0A7E5827A93D8C76370C87943275C36814C460BB788A0BCDA4
39439D1E570285A7EBEBA0247118996064991B85A142B97D9CE6688DC14EA2D0
4BF211234BCDEED14B3A18B7A2D2EBC289DA7245FC5098A69EA8012A2C376C38
0319E067A941CDFE0E585E21C1A0E7F7368B0798B3A23FB1490CB52949603C07
27A1BA72501911715F16FD79F34C2B0C99F08A14AC86DDA5DD566513EC40EC06
39BEB7F11F8CCE9730BB80F25B89EDA2FA250F7C4A903CA5D5198A36A3EF8102
2281FD3FF7AB4DC7B418EE4DBCB9A4D551565A4C6240F2DF0109811EF03E8008
C2A4CAD064E43E501B67C9D0D0C2F61A648D55F9CE9DED6E6A16131CA22ABA16
664F364FADA2E7E0D1B86E2A3FF28920E7A55352D8235ADF11693CAF408647DF
A57EAB10108C477EF1E1C4283721F978651CC1CD8995B6B299D8795BC7585F17
9904D4229F797E7938C66DF5CDFAAF3113D089D7C85E5859F27B8DC4C5D86658
A06B4C6445370A3F1E0AE7F74F1BB33955864E470A4BC8ED684F4F0B391CA938
B48D2AA2E7021E29FF39F30E83B7B19883B9F981FDD5AE272603E4D20E7B2FEC
5223B9CEDA7A20FF9AD7A658A8385E5F5BE2ABC0850EF4100B16C372A531176D
B59F10537A4717637CB9592933B7AC784F874870B8D6F7096E251C6B88360835
2261246E75913213A61C9C3BD9336AEB3CBE770DEF99EB9335F75BE6FBB4682D
F46C8A208FC31BBE0B32B0D97B4A4C6CE8BB933DDFE3A7EE466D77D323D3291B
D4916F73C94F2C4E5FCC14CF5A13875C3610B087F668AEBDECCB2C1A6CD47006
1A1D580BF1033B82D15589D5B59FAF6FA8E9B5A02A09751D51CE19FDB55A1128
2FEEFFF3E6B349E855754BC800985A57640B2B6105B2D2C996F6D1324088B3B7
230CD6EF0D4D69D8A56566C0FA3EAC58EE7B1ABF4191E893C0130C8058FB035E
41FB76A15FE0D458D7167D40762662D178C825BA1D00C476467CA429B3ED1691
4F5AA1367A101789B84B67A903DC5A829DB662C0AB44EF3A42571D128FD0EAFF
B955EB75BD8C8B15B696B81A9B37EB84B0D6297FA506FDD296949F8FE9C26D83
D4E4E8FA92FA6A07625BA11F8147B49DD7F33D5B4AB4F32E5871B3187BE186AE
F93732E6BCFDDC80F39F89FBA55FE319D61413D43312587BD2D16F265FD71A55
FCA26EE11CF0123F7E32B5C5A66149BD897EF5F0DF3BEEA7DD8902157BF2B015
0F2F0E35F4D000DC45CD6405E4C0877F21C0F9B128B9B12D53E262E7B26B4849
55D1156EA4E26D2E36F80938E2A77D5064EE1865C913AA54AC0F6FFD5E882A00
52DE76A475D72276E2C6A8C48223624D30E598AFD69717A52C2A3DAB5BD24A94
FD83A99CED34378DB5792FFE4B43314A58021F36A765FC2EA4BD68A048BE92BB
9B82D69AA1D690954DD77B0CC9B824007A7BC1939FD7614ACA4FE2E0A3A750BC
7E258CD3B946214560773F61BBF8D317660E139413E9CF6AA845F738BFBA5273
E76DF44E27B49FEF1859DF15FA0C223FEB058CD9F4D4977CB26F9A83AF7B4C5F
F11863868BF0E582CBCF77F99E79ED75F22A4799C74153AEB81DE79B3BF4832C
8252967F7561DAF86A49FDB771F9A17E46A92BC83DA3BDA607A2D937F163CE11
ABA6BAE1ABFF251B43F643B6B833A6E739532671C602DFF008BD50F3A7176453
B4B7F6857779FDFB8CC7A4CFE322EBEEE15E3395B062B933EB55FC39EA61A0C2
39F01DCC55940A347AF0D0EDBF29C1E6DD74234DF91C9B3CCA3AE3F31C1198BF
3F62049435BBF6C6EADE92EF4C176742032FE8889839755D8D821CD7F998164C
5E7D6E2EDCE42912D03328369F37BFA6A270892216A81DC1AAA33FCFA22C0A4A
1A2CBC348A383A57291FA27368B77491C2C28FE08871057D2B7EC6F0E7A5409B
E87B857CC239AFA87538B04EEB941A161ED1D578B1F16A8EA178FE60E4DD88F2
34ABF6FD6A72C48D0EF5DA334D37BE0EDDE5C98292B72B1F8AF153F71CF5826A
320A89D4002645944D4A8537D3D81053D9DB60F6DAD4E176B50DB98341C8D442
F31C7CA70CA4411B401BB82E0E27702BF83306A0C3A89D9AD2A517E03612534B
13419110637B99935074B545FF79BD3BB75758BBD35DE2BF2F18D3DBC469D145
E19C13C983AB9227C56D198D232862C16D1DED415BD260960E086BFFDB8FDE34
A384555ADB7C548020D1E2EA4FA0FCEB4503D281F5443F84BE6EC4ECAF1BDF49
C6CC4AE4C7AD117137DDC1A13F7AD8BD899F9150D97CB968FBEC05248E9B0C24
15CBB4E191E98FB776EBEAEE6FC41B71DA0E46468695A4CA7D1B1BF6D4AC2B19
3FEF9E36B3AC62E25A8AA3F115026ADA9C53020673B9AD4CC6CFCFC0375E2F37
692FC6772041BB732AC06C381F7B8248F04BB7B3572D01FFFF3BAFA642835537
8CA104CC86879F6FC5FB394169622625F2493AD95E1A2BFFD0BB03EA0B1D80BD
9C6B7E2213C6BB5D5C5382A11052F1D7841113302E095581C8A74D6C4DB83EE3
5339A748DF45FCC48E5D680DD016B803C38B8923848805D81925A8BA85A9363F
C5924585E86456B993FF4BEFBABCC0993871E9718A75DFFFC74395B532A58983
B1CECB9EDBF3837473C372E70836241C7D872DD6FD22C2073F8C52482647723B
FA3BFF99E5E81F4306EF3F8D4F1391D0C307CCCA25AA9B3E1CF05583F5EA9D5F
B725988851616485E1467125B7EB3C9EEF561001051A26F3196AE922BF2EFCBB
D30636E1F31B355F9617AFD58A54622CFD7330FA8435ED02349884DE2EA6BE76
9145084412A14C702166106601CAF220173D616AD0B00A1FF4979B774ECC50AB
47A61074A3D62CD8AEFDD97BD87B20D735CE102C0F60A9D44BFE6A6A86CF6D9D
CF7F3A34E6AA3CCB13CCC61FCEE7C77606DB09B80F5F8576B477970D94FD85B3
A7455B4BA420632591C35CC98FA817B5B18FE2517839D51030B695AB917160AC
31A8ED3AF8897BD16EBA220B626CAB57FFD0A953E0EAF9DE3500921A7818FB31
8487A712CCC0EE98AC751500BCD0885539794E5745D369EA6FDA1B21A50A4CAC
4B28FF68957942DB5BD93FB36D52A5B2708D4DF4D6D3A88D876336457245B77D
B542D81709C45CB037E4FBADF3E70BB117CDF8152D4747FD21DB708406E51BEB
379670E729C277E902195DB766F6DE7F3BB2FBA15D02DDF03EDC5726A21888E2
5B687676540C187B06C8F53A1671E87B0DBB5B417137A7223F86A8C979E696CC
C57988D3B725E16659ECC4344E70784A79E8F147BDDB1DC607885E12FBFA7343
990A15C20DA06EFEED3F824497816406964BE0ACA330216C336DD92F9433EAC7
44133737D29FB6BFBE84492B86DA2EE28810A611970044F0D6FFF7D60ECF751A
17478F201065B459BD480A50B0B877F74E6F175299F557709AA75CB0506823E0
33A496D9331C3876A239E92B6F7C3E83E416B33B0262CE0FCACB72E14C2FDB87
A97F47425E2358D7F8607219A13C7B03257D8CD384F37EF087732504DAFDC593
55267744E046627E5C1273F222172A13172FB2E1889AA50A31AC1D82999783CA
D3F411874CAC76DBC9DAFD76B425844861BA546568C40FD16885A589F2A8DAE0
336E2381245DC37D8E95B06B632FB7642F54CF5E06FEEDA16F19083FD936BD58
0533370858053114B3D9C05AE502E950B28FE45D47E1D403E1924C81BAE1665C
E873BCFE5D090A8984E98030FE6B21D461874E43A202003126983D7EA0A161D1
C416AC85C188F3F31C28ED46A45A1DEB1C93FB1AEE54042F3750D1F48F7B0C30
094C412C426AA6633699790B4886E991DF497B8A1D82EB6AFA78A16767431015
B7FF179CF7D3F427F90E39028ACCCCB0D0002C117BAA7874F4BBDCC8CB50A40F
9BBC315607CBDC3AF46530F8979AA42C4EC405A28024201A9246EE7C06A6421E
927444073CCF2454044F6B15A4796764E03158FFD80F49365D50068238D2FD46
31E94D3CE93879FF02745CB823734AC4C096CF87DBF17E16B8A3086A1CD77DF2
3376F110B4C71E24BCFED9C9742B3E9E5DD57350D815ACDE83B1746915E7719A
402A9919F5CE7FC3B92ED8BA8DB0A57E0206D42D82D2022D0213D8AA16275D53
AA36A80D9765F9059895E4915405709607F4B3FEDC85A3A4A9B11564A034FF2F
3B60508154B08981B62A2E9974E68659A681E27E2C4AE26093689327A256571C
E9457E7D95B393CF8AC1F7D725BCFE2C8B959976E9C8560FED01D0513F9326DF
A9ED12F08B91B7E0983965E2CAFA437DA892D56B595E1947A1A80642E7621BDC
8C2058069BDC8C537C76CE64E546B499600A0CB482D150CBC14501A0DC8B61B4
E00C448F2635704C9098FD0DC49A872AACAEC75AF897FBFEE2DF48931F4C0D1D
FB366E7E47785B178C8FF88F95647DB2619576A07A16EC0F13A589F452936A79
8BADF461C448C5480CA1D4079E2FE50C8A915F9509A822FB278023E56BEEA38D
B555E22811C87F72082C9BC07B07893B2E4F162655033D4074DFD71D9239E6AA
CB28D62951CEE8A5E2C1FE7AFBA2CD0E7C203E9B94EE4BF63D4479D94C5A3F10
1F1F45F8CDCB814A5E0D7A5B8DCED8B0DD5D23A3742F51524E0228494AE5959A
D4C37D1BEE88240C4AC5FDA27EF16F42E362770EF7B8CBF49D00550F1B65D573
3B93E08EFB68EC6F6AC91141F367EA9D3FA6967F6F5C9216D7AB3EA8F1EB48AC
809BE050BAD39813DCF287E7B822B15615AE89B9E4CD3F19CD16D80B1C32767A
33513C42F60140193197DD6640CAA6F371095A260DE5DC01B8DEAB3475139C60
08A31D0797C7D0DF9D185D7A7718D9408FAA94F0511D916C66EDA64778531CED
BEF4F2F5A78A41E4BB157978510CB2D69ABA96673E3960C57FA4ACA326789036
B42BF5734A8E4721F2FDC1C4EAB37D8378683A96737BD2925C54BCD4A965C5F2
BC50B51C7F0AA44BC1842D76C4AB68473467C128A52AC41EE688184BFE6641C0
D34DC5F77FEB379542B9B97A7A768871675D0C203DDC23891E5340E340AB4D22
18F448337E748995A74E9D3DE60DE90966B9A2828F7F46ADFD8AD1D683777C41
FD1488FCEE52E2C0AB0B5FB2E740457962C3723BF6E61E3C3E10DE25AE1908F8
654F46BA83717397F562A2DC529D7AA099CE9ABF60849D56E87935058ED16528
D28E50E37BBEB1D1554503645FAA5D558D69FB699E5EF78ECB6C3E02F2391C4F
FAAD45988B2E231AAE386456AD8C5D6D84B14FEFCCEF76E987C31CC01A1FCBCB
E9AD499E7E0AF050DC3435E1294134003AC507F1CC2582AA9FAFAB0E85B5E6D1
9CA4FE5F4E647B458C136404E769109A3CEE50CD7A2C97D382DA5AB07F54D831
C820E0D66676C57BA2DA0E28DF835EB4B7E64AC70B1E78A09EA492834F9F1A86
46DEB04E73AFFCF66BD9DCB19A5853273485E72F65B9817B90D67CEC376B1D7D
733A0D3E8802202F2B05D1893C7FA2E9D6E8AEAABDF2AD9EEC9E131211993F94
62686782A2194A3F19F5D5A59AEB5FAE6FA51A6E7548819DE8E8AD38D9632C6F
9348055F9A8B00B39B2B44B57570D9D15D84CF9F0FA89B2FF059336B57B9BD81
BEFAD5AC9FBF383B3364B50D5860E9A1646A92A94110276196D2E4BA1BAE2EAA
53FF433AAA6D12256F2040025D730D1086D8B4C3EA3E065518782763C89A6B28
55849B67B91C3336A04416D5A1FC7D11FC94CFFBA60CA6556B0473D5BBC594A7
EEF8762859353E43AF38D0D4E667A80166D51DD4161C2A000F352EE7FCB38537
8887BB1F5D5B612FDC9E2F1B02488CB276F8DCA306373E4A4D365B38C00A7CBC
3A2C59F26997929BD1F88DB38A1EC4DF4956D533E0A0670D60CBD73D1E1B9865
C65B12F8EF3AAB303ACA4121E9C92051578244155F5D4D9126E9CF217F7B9B18
573B6CBD958A80FA14221F9AC6A8272BA52DC028A438B9DFA0D9BF845CE38E33
893E54E1886A234A79DA8062B02744D9E08DCA6D6241D713E957381E3EB92D3C
F24F6243BC42E7B1F1F575D4877A18E3E022D3505E555EC90AD1EFE819DD2DEB
414DFD0ECAF9A2170374C92379C003C65EBA2A94485105D530783B0039C788FA
12D3CAF0134F9E19DF8F5ABD86CB0F8CD70747E8878E1856CA6D1296CA1A27B2
7C91ACF150C804B1A59619640FBDEF955C19D1FD721D6BD59634F198D7D08853
A641F087BC3DE74A69A71AB9068BE9FE976507B85F26B9252AD7B574C8411FBE
D93B158DCB9A85A656F047B16448D99F49900ED5C9DC3A5F71AE21DCA9039DA0
2B117D2B27D60E79AB825D03098B8F45C8F5DEA18BC3044E73DD705E5CC49D39
7B605060DE82575DDDECBB289E25B3A61B54FF4132151E130091524FBA857710
432575088796B70BD3A63507E8E5BED7D7AEFE1ECA64BE4C153AC91451F122BD
D5C724CB80233E3E454210FC1A4A07ACBE690DAF11CB7BFEC4C82BDC738F928C
912521569844012BABB5ADF93891FC191896AC5D47004C7C04D85DF0A7D9E501
46B35868189D02DB366CA2D3154EAFC128486450F5C16DFDED314F1FB7347602
4F876563578D31127A6FF5F873691F403EB1351CA800EF6358D85EA41D61FDC2
7D53B109DE75916CBCBC6AB44B2402CAA6A265F86BBB20F0DF2534AFA4C890AD
7A6F35836DF9559E383A65DFF5E5C48960541C0E9CBD5D4E8869D9B55733956D
729E9026B048BF61FA390F64979D77A4C7C5A27DC38BC3BBD7FE5B14FE97B25F
B1D768B1555C02A5D8E3E78345B17B829686C23D94EBEA9D6C9E65CEDDBF6501
BE3CA4554FAEA417E42BABE0C8DFA45ADE77FA6196A41C3F3C112ED828E9BD8D
BB5A60E88548BB1CB4F2520783C048A382217CB3AF4D7E79C9DC04B65B02092C
6FD1E5ED77738CB7DB4E9A1429BC3B3639103FA239F891F0040912F1AA7FEC00
18084477F66C4A4B2D5FA122EED969846E4C49D6F39100C866981030360EF190
011F885B2C29631ABB4C5C5CC36CB98DEAC8057A687A4125C0192507F0B74B35
2EAD7DD123695D5DD6C338BF9ADD219FC8985D348C632A6EE80ABFAB0D3380E4
3B62E446F96D2829D36C0798F5C481E2D002DB8C58FB14DA87DE71AD3AAEBF99
9E98D913AB3605C287C4C51B01D1487F4031379D30B9D2D60D18BFE7CA41B9FE
5B49DB077AB0E05D2D25C9A776E592B6678251C508E4505E845AA28AE7679893
9F0AEF7E64F621BE09010CB6F43790A6BB7F3FAD710C008F4FFA8D307536D31A
27F6F7216B714F74811140AB2454A53819A91123419970A4A33754000ACC8CFB
6A882EFEDDC7E7567FE1388497E6D17C88340118899E959EA55FE178D681E9D4
9336567AD434893E6222E5E6F286D27D731EE3F193F99D8B419C4FDC4562C0BA
56B0C5D3AB8C3986CD0B7BE65DAEDB3F4E23D9EC00AB2ABD3C25D5C9A27A8335
1F811B1FF379748D3100CB7D830D9DDBDF81CCDA206DA3D7C667AAFCE875BCA9
550E20D13D58452D4993506570FC63D8AD2EBFB6B8C0EFF6D40D9801C4F99518
B09E9F6D1B78E72E7E52019EE8FC1296B605BF170412CBF14A1982227A98AB55
BE1675FEB493963CF768ADDC16BE8958907BF7BA20BA603E03194E76D3781866
50EFD52D5B14BC98B190018FA581A7C802E4B974937D1FE92FF850A72E7CCF84
A2DECC7058D6BD8ABA9FE7F42F5338475D1B321583B42DE5E0F9AD77BC7E6B1A
6CFBD3F15D21992B8DB550D7488B296E21A0757882B1F0FD65B21E614D03411C
AF6FBB9734125C5E45A818F41A007E6D9276B5B59E416AD654E7057B937C6F15
31F3CEEC2B80CBDECF18F74C45C985E6F9113472083B7B4E700546D84ECB4407
4C3B78058725777666DE7703EAC3383DC10D67B550DC9399AA84E583B94A24E1
3A3BDB4D791F82AF311C6CF549A46784BE9BDFD1AAA71006A97172B2E549F19C
CFCB3BCF6AFDFEEC1B4A7A206550FADDC772A2F0D3B390599F630C25FEAA3359
A90834F4A5C63836C0005C601038EB4640358CD2D6FCBD70A3B06ABE5A8A8BE6
EDC955695970C7A1BAF6614606243C6256300F7C6DEC9AFCC5C9B90489846E96
859C0D4804E03137DFBFD56A17D5E5E80836D1312553101A3DBD906E766370E4
3082EA3ACD90B90587522A5DE01CC635DBCA03CAE19A98583B1A6A7982B8C3DC
002F7CC0FA0028926F5C36A448F6EA82E2FE82CF72A27FAA43ABCC20ADAAC3C0
C63CFC3B7ADA39C0AA97CA287AA8B87C3A4569659B937B96A1F545AB6E657ADE
69A5E5CBAA6274BBE670C5147B9B770DC2BE0708C251C4924206F80AABF782B7
9A47A74895D6F0713B5575E701E04CC8D8C93D8A8ABDD4D93161D7224213366A
6F5219E66FBB157EC7D01CD99630BBE3E8D221925BA79351750AC4EE04D73C9C
3FFE5AD3347370CEC5641B1033EAAD96D465C2860D01727FB541B664F2390190
91A859D490BD6B1BFE4983C952291B004214A782DA97E7C016745CFFBA50D533
4C76B13CB636C84F79FBDDB3B43AECD2E112A5582D6916D3D0841153F2DB66BA
A79B0F75B166CC1099F65EF34ABAEE3EEB5ECB06070A02374C0C9452BF086EA8
35F92AF3B4C31A4359D8E85EB7DE90CD828AEED36F69D0FBFB3E67DA93EDA2CE
E7FD90F62A04A9DC5A4AD5A2300F7994280C1A230373560FBBEEB10B6B1B14FE
ACE3BA89FE4E63D756C7382B0077D6FAA88240727A0D49B7C0A375691F4C21B1
99411278D5F3429A6A1F940752D8B21432F0954A086AD6D76324A869D46D06B8
47270E28CF1EF81BD3580B4B809531D51646630C298C4CD8FCC760B924EC52C5
D3AAFD595AE01342A1CEBCCB7E1BDCE1C7311D68A92859C27A5E879BCC9B4093
27D7351433331A62A521A33257E0010320DB0D62D02B0FCD4962599B351FA6D9
0F3AE940B883A378571687B46DFB5663D5E6EA4332B8606F8473AA1789B3A099
4F5F2CC2068848E2DB13801F8681856B25B8B31B8C4743BEF6F4691BE8EC4D9B
859D189C5E4D0B13E15C370563EA2D64E9AA9BC30D5FC4108F403D2EEB0C96EE
7AFA1C1161FEEC5198B2B83BED42B2A6833AA4ADF97164412FD324CCBBB113C8
0A5374582A96DC703BA6F2D43114DD8AA24158E9B031860F696E6EC456A8AA1A
75A7BBD801CA0B0320DD8B8865459704CC21A3B7E310DEED632BA559A56668C9
3B6D6215C591258B5410C7C68DC45326B81305E9D8B78CE7723894DAA716ABF7
15A1612A038D62B9683E7AD8F34F91FF83BBC381A0C681C14C5BC39C32E0B2A5
2C8149B0FA58B4F6B2DF176AA5C2C0AAC39B0B7E59304598B1553422CB7695F8
3B7A54E7688CE5356D6BD24BD41CDA8DAEEFFA4D00179CACA10F357B3044365F
AC1687BDA88164D3D135889A148D8FFF2835857D9A63DC5687FE6DBA38D6D9C4
99E6C41A06D1983EC6E8BCCDD80F25049188B9D91BF7CFCD181092A9291479EA
E08A7C9B93E9D96B5F86BCAC74099267C16CF18B279216F3C08D865A9138BB68
79AC6792E81242A16232F2FC492C48ED93941759DA378E3F2C715C4F12F6280F
582E7528DD5323EC9DA6E07C17AFF57A9DB3B74102E1F9C93AE270A5E64C6031
EA766B9A4BA75D014800EAA7598008F31D1F244693518E4629A3AD9A36BD436F
F41714583B75C3A61CE27962959179FA15D71A68E8EC34135149B3800729B36B
2D3A435DAE6FF17575CD7064133BF48F35077D37F51B866EC07D54C89A80F142
68F4F964E9998A7248D5C058A7E58969B7DBEF29D1C0F2DBFDA592A29C0B8D02
F8225D9B335531FEA0061722F95F6CEA46424E9F14540AE51332C376996A0281
E9B513D171C0778BCC3F8A6ED17FEEB5A6054EAD896ECB403ADF4BAE837CD74E
4DDC007136F2703AB8FEA722B7659AC0CCFADDAD5EC3C18730C9BBDD9E935F67
ADFBB9368142FCB3466833E416E350F726A5D94BA616085E333287501B32FEA1
87106BF35F9060144E38E94D1F070B7F87DEF26A6C17F40E181DF0FD294DD20E
1CC4C35114DEE607C7664608AEFBAC297FC9AD87F966CE5C72E68F2FC05ECB43
57790760602AF6C3DE17DA18A1E8C35D1C13B7E32FE8D5F97676061423632D64
DE939FF39E0D1548D661FFF4213B98471AC7BB445C8CE1237A6F02894CB21FF1
51CD2348264F5277BCE084DD4F508EFBC8E8C351563FC2C865A275887CFF6971
F5F19FD3F2F5262334A46069F71022C470A3FD06F8260F77276B489D61809C2E
273654F41D6FF02140AEA93FCF1A2BC956F18E1F280B205F269414476567B507
A3608993F6AEEFBA01D5D1B9E64729B0252B64073DFBFBA17030AB46AADD28EF
95ECBF544451DED49EC8F5DA107C44AF7E74CD43CFEDC082D4AF6702F9245A08
644BAC0F195DED476E67294547525ACA6C96F5CE024BA59FBD85AF830D846B7F
8D397AFF2B756CB2EAA086BBF8014B8A250A4DCBE215B3EA87F62967B97D7FEA
D530E60A785F1A0335D1B25492594AA403BDF6F3B54A95D7EB3F7FDB5E4107AA
5884F8F6B35533E1D052CA53E1076B57871DB83D2F6248AEF5DB93F58E0E1AFE
16DB0C90DBBB3B65378EA8CE55B1E538A41E490633E3A07F1E8C3419EDFEC9CC
AC0D185D0F0A2F1907D68A168C10DC766F03DBCC2E52D6CB271D3D35369994C6
1D328E0A1980964F72B130BD62D0939E001AAF11F61E056F62CE82C1AE077576
190092CA8E006581A1623FA60C4F5544E46BE9C7E01411B3886DE135E74A5D4F
32E2ECDDF401DF5E93DFC8658CA2DD969709577F16654E9509A618170B07FB35
386EE0BE1B5A58A29837DA2FBBB4EBB18B9C1D56DF143032228F60275DB8B783
312D48A4A935E9CE18B233FFC176CD3C1C46C80467ABDE89856C8B9649D488D2
A41694D380F42CDD185EE6874B3C85FDEA0B7409B9113CCF06D8ABC9C79C259F
A91BD1FA2294CBE89B41F299D7BB5E82A8BDC73ED5735536D3A4851A38A1A756
F317C759B8D13518DCB69211B3989742F5E57C55C653D57DE0439569B2D57995
09145CCA11564A2348EC14EA4C06343EDE1D97DEDCF308386838CDF2A11B8B10
835674767719B423E3DD23B913C2CD84FF40F674CFE8C036B2670789B3B33E55
8250D4E199822DA725A06E3708D1743264511C1F886F2B2BBDCEB04CDC5B8244
B356B4C31E686C9EFA01BF7855616AD6FD0359DA4D3E8470DA2FB9714A097309
FD39B4341967F5E0225681B40B4985333B5E4B81A20FF10AB168C1D6B17345A4
350088CBC87774932B5A2FC2AB3AC0DE61303B63E8EEC0303D4549D394A87CA0
DE656179FECC7A7ED8BAC36694A3AD2E2A6DB8AF3650A6FB442FEF19F61FD420
1869B0F2D3C7B0476C50083002524E6F17C89D8904263BF1832A09E931EC7B13
484E17099DCD6B766C6745745431DCA6A0A5CE3EB86B18A6D79D4B06EA4CBC80
FA161075ACABC754C9DA04D24C7C00AAFF462F2D6C9EA0B94072832C6C61BB5B
DF248D514C0D34E16AB42F32C2929754B9C31BDD8EB4A9524108E4BAED6634AF
E0B2C249A4236760297EF4E4295FD11DAB71372D1B2943B8A6B2E7DF9300AE63
A15A7D3D83A376B5FC82BAC9B3624D23A2F1E04EF457CD2986380118D88F6908
BFBCD4CB3919CB55486486036AD2607B4014744D6FD4931A2E7689B494D9B788
2066CCE21ECACAE3F78F40E9A456EFDBAD5EBD4028AB874601E674810ADE80D6
366607EB2391BB35FDA8FD1ED206E3E08F5529487A198EAFA0579C6EC413E65D
F22AF5F056D6443694CDD4133CEEBDAF30FFDF2771AB72654EFD89ADC62A9D33
82DEFE6912E3C09490ECB6DA98D3FF4A6E9C7B24E877AE2F06E8303378C1F70E
4BD47F54C15DDFDFEAEF751CBB787A6B5D294CF4D47A7BC7C98C7B09DD6657C9
E0134E795CB2125E2AC0B5C324637C245223F9C572A15E157144BEB96C0711F1
CE1800CFD7356C43FDF26A9A3A0CF9BD83F0848619C9DB0D4C915CD937F82A9E
B807E082EF65597D82F8C012ADCB6BCCF7DA9070847645FA6F96EC6E19385F64
C6676D7FCDC2AAD111DD560CE578CC1E5946BF7E8879D68124CCFC9DD32E918F
67B2DBF17C292D74231CC70299B0D585DAB967AD5DFCD10AB2BA6907DF62BBF6
69745C9AF1AEA8FF656793A8249A4EFC1ABE92553ACD46D2CD13F69C051FB1FF
46F35F77A74322D24EF1A6EEF3E126650C27B340011BF9711B6F3CB0C8B67DD4
8C0CF7284A186924F1D3C91C60FB907F2C5A499814BE06F83D1CBD7B9FD09628
6C9776CADC93DD78DB85522600340E5A52EC6AD9824E07DC636C5CAB042783F8
E2893F23DE1BC09E4666AFCC4A176B1EE20A0ABBF3B1E07211856346A7C931D1
3E9242DF0090E8EF4762AB8EF09A09CC7FBB7F58D4E1D2D962A5B4550E6F6650
A9823E645B183583A665A8D01D4DDCE07B0977E5B89F06267578B429C2F8716F
9633E3ACCB6CBA99E6C93CC061FE4283BD27435362050ECB9A7C3A12C2BFC853
77EBD741F82B88B5CAB1311BE510CDFD8F503F6F73FE05827FDA3D8CB80708F3
5EB8B3A614AD46BED8428F74C4DAB97059AEE799D5AC3194CDFC7874FF94F1C6
4B9C80E2E2BFBD690F918BB18D887D83B622B03F500F9D90E2197DEF70FA92B1
3A1A6C2C1A40297268355D3C1583F93EE3170616866DBA97465EA3DEC848E050
46E11C580D96FA966651D093AC0BD5DFAC3A5A83B942CAA7B7EC87A6C4BB4EE0
FDED48A40975374A1693D1EF74AC6106C9726E1BCF113A665B8D596FF6CB3001
7653769D1140C5505A9CA16983BBFB3CD7484E4401574D821E241F74EF6B5DA6
666B7C80A05046EE64BA8A66ED9F9F8F67E8CE177E0B26F8C257342A9B6DA799
5D7FEB1A608888B358CBC97058A5C59C8B3DF357C429673B5A281B2B4140ED54
60D2BDEC73EC3B83082DF0BFCC2B7B322EC6AD99A8278F1A977F51C5F475F0C4
2E87D00228C0D4D5B857CE50C96273798589988B664AF11877FA21F48213B634
2EEC8D4CCE5DD4FF83D86720D5E2B2BB7EC23C70E061FCF1BA2B1F5502A33F3E
65A94A7EF56220D78EB6DD7F9C5DE9FD6DB56A74F6CF7482E59A92A7DF9313DC
12E0EE39CA476C1F8EC4D6E696406B659B259534A461882C4668254193D269C6
CB2228E56929A034F60B1D64E39C390B08E7C6CCAE9B1BAD5FD282463AF0C748
7FD3EAB1C01C4162FA0F14DE45612A41348B6BD6F5B94B58A3FB5CE431B8445F
7F957C0CBBA77C0E88771C84AEEFD3D2676DF441045E1D3A1452FA2FA236F9EB
494815A697CBCE9CC0B88DD4EA8232758118513E913B2749ACDE04A0C717ECAB
CCB644A0CCCF20E5326AE9AFFDEC2E85B5F18E107F4859C53BC9191A7B7F6779
328489F56EE49E755CD9EF73F4E48A6A4ED38488F36BDF9C7D9FA8E33928D155
50A5147246A99569CE318E21C11A4A1112A3DE40FB60AC086F9A291B75C56D97
9A7F2BD5EC52D7B274840551EB947C91541525C83928310CB3D813FC292A572B
4E8A4646FF5D0A0E022AFFD570CC12E649EA804A50FAB6CFE397917C35625599
68FC2708BDCE2DE4FE4DBE62ACBC58D1F9D756BE35E2C1E2F43692B957A92703
855DB51AA8BB8204E2169680655AC0D1F3C483175907B0F05DBAB9B2D1EE4A3D
0D2105E5D23F1B75B720D6FB00D6065A87D51E86F65D418ED52B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC677E95307847599B02E5AF54BE91F662979D0BE
A1CC2205A8493A22D252AEBA66664B2A0FA2AD5C2BFDC446E8217D3E5D67616F
A9C8D25588F1689221B896E4663DCB2823847EA18AEC15EB3464CD20830192E9
FA76A8D8C8454C7E9ABF6C0F725BC64477D228181C86BA782F4FE02493A70F60
73CE5AC25BF5C0579654DB07E4ACEA3666110AE5DED90584F99E14B24810C5DF
7394EE947676E459D57DCBB3829ECEFC74DC1A1B3482A99DC90EB52844D07B8D
4D86246B30916CF5B9EB30CF2688AD5470018A3F2D47875FBB75E16CFFEB450C
B8BC91FFBE6C83D561EA7819C508DE4AE8DFA21E23DB7E05FECB7CBC4A049B24
336687838F532359D6FBC18512610FC852B07E15D4B247573263395579F2B2D3
3E0A136C429A9D806C2CF8AB15954BFF59B4AE356D1DB3175DDC2A6AFD06EEE9
950911F36A10ADD8ABFBA9D53C42A690A48B179E6725265A12AB4D9865210714
AD7EF694588DD4594813371CF6DF55FC8BCE3B9F209F7A66F4CC713EC85C44E2
C692AAC42C9E5003AA9AC548FF0AC943ED9E898E52F2294B3AF6C494A1A62A0A
6F8E820E383A2F9A9BE2FFB3AFF49BBE499A6E4A6D986438CC0F8950392B6CE6
1423914058FCDDBE245DEBC2441DF1AA6A52716A7EF812A28813BA8D3D655ED2
66551C59852C1BCDFAEE9FCA1B8B7B45FBB5A049FC399C46C1426F4FF72A744B
8EED9375BA41440D24BE8D533BC804C1C8059928ABE24544F41569DAEB218F1A
90A339268479552A5D4F025C0446A986C64DFFC2C0C909AC2835EF3FAF19B53E
44F7EEB341005187115312A76DCABF4133E260320CB39E191970C0F0E81DBEF7
772D6C5F077DE5916A5E4571236CB05E25C0B681EE2902AF18783CA81177E26C
F828FED0D16B16987D62B6E83BF9B59F90EC4E790133AA578C8AF018B06D7B9F
5E162C7BC6381459BB3BD8E8BD8CDF61FEF2585E482EE3E3235E4B3C55CB96C5
D792E2DDFD91D5D62FEA685E885923620FAA16910AA9EB967D0B382CC9929D8D
11C794E55DEC8F51B5D7BC7DD0F437F1C1A89AFCBF166B5E882C1009A9DB4ED1
9128C657C8098ED5BB7691BBF8C1F6EBA75C1C9C1670B8A568F69091BF0FBC9A
D619AF7C314419A4FD057F51ADDF7DC9BEC731AD6040FD9B804FA147488D0E30
F8841589FE146D0525DF5FB31C974FC3B57F01E1D7A2A2E477EFB20457C17812
98694BCB0A51F6AAD0A5B019A8F4C210A4EF832E7D6DF3E913A142458A406870
B3A796EDAB7569B0D96F4665D013427D282B072CFF5FACF67B4ADA7A8FF35840
A4FE3D981216B1214415D55F0490CC2304501060CD4B29E20116F74FEB99A1CC
BD511DF8BC21284CBB01E5147CF95A00E8E775BB357487584644F975CC568F47
3DBDE6278D74ECB3172F5438402E9D77EACBBE3D271C3DD27C28F754521E715B
EF18A179D64952A6D39CFFDBA38C11C7238C738370C48C50E025B66055E56D4A
8FB3ECB4BE8FB8D21D943D3328065A91592BF5454FE871CF4302F1550F56B682
1344308331EBB7B2E684B3B6C374B061AC0CEDB050AFEBD734238E9DDC831883
C93110751B5F8637CF00C7C14D8D087E4AB1D815951E4BEA2690A552606F1EB8
A796E8FA21BB9E5CF8DBBD8D831A0B996FA2E67F9064EC921830EE707FFBD444
DF0A703A999B75EB8351EA2396AE35A6BA0B59619C35B4D329A8522B1EE90448
387DBB0912FED5852BA7AA362087601A47FF693A1CC34AC367036829996120FB
18D883F38EF4131EADDE2C756C2DF9F395FD83FAE697F3A69B0A0D171444B807
727C458C55F973274598E7624305A0F7EBBED6B1E29CDB9B8ED28CF387644D49
A2010C5158CE82BD52FE87C5035DFD9425EEF795DD0B09D4B1C7EA0C98434FAE
393859A98FC0B3EA3A0CAE001DFDA94760FF7862337BB4A2C3A8C8803E49B607
12658E7EDB16D9BEB4252D67C718C2A4595075C1818F6A1EE734956DBFDB57FE
6275D1873E08F3DE5886EACBFF2A132DE63FCE4B2955A9C7950E7043D7750667
94A2DA0D72B3D7E787DD83DBED95F86B97E1E9D80D9E991753E1723983D4DE05
CB5C6CE7C221A2038461896FF0EBC22B776FFC66AFB8F4EE72F16F4A83FD3B6F
7C02C8ED058B4AA23DB4E4F368D5CD221D0EA7E1022CA012CE9760152330C73A
4BCA1399C9CD243FA385624CD426256168309F04A2D2352DE559933C8B4E514D
B0410B1E140095EBEA1B13933221F95DE894A8F0FB390C4649872B940E5AB4EA
A493F99CE2D3DFF0982549271B429927D4775BEB5A12F660844638B9EC5214EB
8B4F3B900C34193E943A90C06ED8D9799646156E1491E5521FC8B9CD9158D756
8229D15D0FFA4E22B5A0CB4FC82C4BB848D07EDE0C11344EB69D0A6F329CF352
2C81BABB8C9BED90F772BF2077526A35E9F2844D17BBDC178AFFB0DEB4493D2B
EED930887D30C9C040B1498E7EAF30501BB2121A750312941839C81400086942
7242D783CF8D51DF73DDD9FE1950DABD3C95E57686BFE5C55E13AC8837A6492B
618815B78E78BA5F281755B0743FBB60F2952D9041F7F6EEDAD2563E236C584A
BD904D7018A00F6017ADF508BF63F64AC406DF45C6C9B90489846E9685287879
2D64A7BEA283E698CD7D8B2DF6A3B6681C63BCFC14135382469123169E3DAFF4
AFDBBBDF75C60D2808EBAD09A641D93EE38D274EBF132E2F1C61F31242729A9E
BE877B546996C6520013AB058EA55E58F59C374DC6AD4AA8B125F40114881ECF
0A7ABE0F5DFBB48002662AF720242D74012508F26D394925F71065BCB57954C4
CB5A9A42C6CF6EA0D80B6A99ACDA48E5ED3A2BA43BA9064D59C171AE87BB22E4
707510F8EF3AAB303ACA4121E9C92051578244155F5D47FDBC558AB5F9CB60A2
B2B7D3726D4D06CAA2CB08BE16E35F416B79718F7C53E34C5057880AB32CF159
42D3673538F51A2646DB93A34C60583DA3CCDBFF4F315D1FBEF4A12AAB726603
8BD7CF8F237D8E9B7D4AB72F83176580F0FE60F48D70FB98C3ED8305C7906E17
50DC71A816B0D510008080A1C3DEFB220D402F3CAFC75D5A1D09F5985687685D
0DEB29A821CB8D0CF788A0F4A87C061D56CE72CB67E59EAE0D87FE8400FACF1F
3E0B024C5FFE6777D6E374B40FC2ADE40888C5DC808B622836891157769C8BEA
7D15C98753C1756AD232C556098B581BBE5842E94DBE3F911FD8DCC3FDBC30EA
F5F569682BFD37A002015A3CA98EDB8D21E8DCCEEB631E12C5B4AE0BCF689146
9EA758F720407B837A1A2EDC4B490B3B7670FD4809B69FF65DA0CED5D7215A18
18A20093B619E51942C0292D48C76344A84198F453880A8138EB66FB67C22587
FC14898051C4FDE207F01B839D2E33F96CD42386C234A9447B82BD519B639D87
A4B10B7D1EB275BC1AB6F8847D80E4BD474269F936D2A0AEBC1629720E21956A
2E0336865660580AD6FAA5A61D90198218E072C7DCBEBD4A57F54C4D5DC893C9
2249FEAD741994E0CECE14F76A594D3F32391C040298C4B93AD22B2BA52DC028
A438B9DFA0D9BF845CE38E33893E5ED842EADD7BB268421BAB8EDC241DC33608
44AD12B1F96C907CA473A1FD2E01CB1197990EDF8444CC83F1AF7893DDAC4B1D
DFD821E84706606D71CE21B35DC08F7C46745552C5322E029F22E1CE39A70EF2
A46B53BE1C1A8ADE9215994557109FAEC294C1580C3DD5D2E322CC095BC98810
F43B9866180F9D58D0497793CD785934A15FC937EDC90FC7F5D9C04BB5B655DB
AE33483B6BCCDE68A091232BBA1C539D46CBE0420DE457EE415FFDF1C7979128
EDD4F9537C4F0E870DE54D18F8E1B3524547EF3BC3AD6487B679963A4CB62633
A522F3617563587F19645E1468A2277FA7DE48DA99DF7F2F1460A76682A2C495
EA195FBA53766189335DECEA4B16D6EE1A01035939F71C4F0499935074B5B5A3
470CA5F34361AE50F4B417ED74243FE51E6BAD891BC2CCACF0C9E1BC50362961
7F52A3424F1B7995A97253C8F822C11204E340647CF92061A889240B2E196C34
50BBDA9D018F6210E7BF26EBC9D73F2C768710DA5E40DF238862E45E699A2208
5B77D5D1AE50A44DAD397382EB984802BF9BFFA8090066BA30024ECF9B9E27C2
A57C517DE53310C680BCC0C00A98B7E26BB1730B9E3B03982F0297A1FE852B94
5B168BF8A47E033D6EF4DDACE3569FAE662D19514D98A462C9224F3794A28699
B8E8E73CB2BF656EFE9D02470FA46D2AF33DE79BB830A2F69AAD4FEE1096A89B
45C068EC7BE9632E4A89ED435F4F843AEB0DE2D08746E18A701158BE9C0B8139
0C67B61C835FBA29F185C0181148D2DB13DEBF3E9BAB479A3F9DA76C318D6D07
98203FED7C022965365297FD4421CDF6F1AB2E63235155A2E98E992460EDB0EC
68A78F6911E36E12E02ECF7E9DDCC72C99BA4CFCC9B1EC9BE8C9C04FEB47FA5F
D640739E1F09D5C7B40320E6F45BD57DB169FD3568C8E044865DE7308E8B8A7C
8D7F27643D015A4423506A9A2A9E1CFFF120534F7A6182E8CAAEF1F93926CA45
7899A06AC3DD5F5124014013824B2832924F86F49214FEBB4B3AE05A12F0D231
86C441D6375466FA0272B67393DCBD86FE4CD039BB4277303664E935796233C8
C788C31A5CD411A5F5CB07C5A63C84CA36F6027A26FF421BFCE5DAB2D853767F
E8A0FC7101BE9E20CB160B6BC81ED4696D66169BDC648AA8721FAFB0A95A5445
B5800D0BE0378909AEC60F544C3F27A90C265DEAD8E0241A38E99336725151A7
A2C5282442DCF60A16F6936C9A0AC65E5DF109EE8ECA30D88785FD165B58549F
12163570DD73B013B7347FF6E9BE216CB5DE5D367EE01C808604D05EFD25E1B1
3B03CBA0C37EC251BD452805722C04F19A395EE0926255FD030246AC687884A3
547DA00438951DDEF0B61A4F82117B33ADAD9AA04C4B6A9E56344507DFC2C63F
EC9460ECC8D9181CE59015CF337A218A8FBCAF517766C653F933D6CEFD146C84
A94AA7AAE84A6D87A733DCAA6C761AEDE8AA97262EC0173560C8F5722743E02F
CEC8F2B0D464644727B8F99841EAEFF1D1139D8A35EB3630617FA7942D47411A
DA0246E296E2D20F02C44D6F63B3476F2EF2991878E11F38FF36D1F1D67E0A15
4F2A9E5FC7EAABE035F2A19ADAE898B7F06CE566B5620FD716979C71DD0FF877
00CE95F21C4C1C9C326172364A0E9FBE2ECA12783242342904893D044DA384E4
836D27E65DF41258900212A5FC7F4DB240B62848EB6136462595A8E6CB517109
806DD2CB6704EBB0D4389D1217080B745D7887691ED180DD93E65C3E4A2F3093
0C2AB7113EB95FA56D854E9A5B2B808890A43D9E7F59104AADCF79764BA4F70E
FE840959AEF3E34287BE6E17CA0E265ADB2D8042915FDA3D82FC347F0D24314D
FB378B7F001843D00AB73A00C331CD7A43C0A67E248D6097F3D94233FB027780
A92CBB0DA163D9689FEE614F9556097D62031C66AF172A46B866F4C7596B3D38
67CBE5B6409D4903CF36C6F045B93F5A05EA389DAA2721AC6E6BFF0015EA347F
3B8988AA8FA5A38A2A7BED7CE91AB3830B6820671814782826680D97565FE4D1
E216A9C768A454647DB379C59126BB3A7349CE7BAC7CD903D0AAFEEB0DD8B306
E7A53A5F1DF4C97A55174CE26087BCA16DA5C250762E982CFCC72B19317FDE76
5000BCE9A1A61A802EE8ECB4D53FACAF5242DEDA2CFC1099B1C95A296106DE15
CF1B4D70FA9B6E10A3F76B65763C33A249C23C8616B866CC56D972EA4325D3CD
448697ED68B3D96224B86821217A986A49AADE0C2BC5D68E6F05020580B5DED9
1030783F8CBC1E5B4FF3DAB0438C65E5A1EB77AFE9274CC14073847D09E5054E
364844F0BF03BE50426089EC7071143F5176B11E066945EF87E654F8A53B3C49
07DDB687A20A0BCAB7F03D0A62701D18826FEC47F867C4FC966D23A12CD1CAD9
5E4004694D39E05F5E2AEE30F76D51A3CF5FD030B696C0B83559BFF38F41627B
D8FB32E62B80EAC98890DA692C5D17804371F9AEBC100D7A6D1414C37CBD273E
F647C7B965D9AE82D16F0DDFA0306B260C5CD4D9A581ECA33582DAD4BDE5254C
4660274462334AF71A1E878EC03C67DEA7F016221CB34AA4EB20552294F3AEAF
6C9E98D531260FB1758BAC67E14234D25747F1E68E0C36FFABCB2118C48004CE
C93F33A41E97C719CD5A7576A3DEEAA7246FCCFB4C5CE5663CB4883A9220F39D
0144B18B851DF2AFDD734A558594466D19327F4BB5A9B8E0C473430E807A5117
A9461C92DE71A8B3E97803700E50900A60CA5C7F64567C9D80D1829D7FE5F456
47ED6B99C6D8B616596EC63ADCFC01DC4E23EE35DF9BDC8DA4DA92700D474374
9F272CA43BE6C9B5CD3E674BCF858A46BB2BB47AEBDBF96773D2F86DAF0FBDA9
D2E7F9AB662F5C58DA57C10AF3EE307E159C82A4E76C543EBA4ACF3EEAB6254D
BA53E11A43ECB11D072C68D2131BE1C7C43CB9D84F93C2F3E4EF7005FAA7AF98
AFDF7500359B651D48593238E802732D4B23AD08E64CD0EA508DB893617833CD
8AAC2C1045FD7E0F586CBF2D967E468B2E8E763415D4A217F9C188FF1D9C3BA7
3A8A85887A7B273A60D565A0CE0F6AAF566752654E81648CE01CAE6B824B0741
607254E05D377D3EC454B9E8E4E4B7897387234F730A1D2C99F24D336A889395
E771CEC29602496D2F4CC30058646D9FB1D14DE9BB73AF0AE80410C4FBC3A45F
BE3BA44183172E1B66D135E09A46B054E37922BFB709F40562D1324E07BE4DAB
A9BC0A35CC617B9E8BB69476EF2221C34C79D44377FA2A33C0EB41B10B64C142
5ADF4234D759B5DB13B8FB1B33A25F4BCC90B6ADFB4DC714D6D08322780BD128
94A5D3A331145DE6FB505CC19634E9A154891C83703DCFD1BFDEBCC3A12114CC
920D6060DB63D12D0AF2161F425FC7831B3FF7FF114C014E1DA800226FFE9444
301E5BDC0E125346571C3AC8F053A09AB6680039447524D0963C04EDD832CE36
96753BE91995CD7EB3BE90349F3C1A1D113CB87969B0370D0DDB829296DCB0F3
7A33B61AB96148B87232D14B426649F338383587CB14FCEB971CEFA4C610DBBD
02FF4F978B68EB6C23A2082F4F8DFDD753AECD1B53196B31F29C5AF625B78AAA
FB55CBCFFD65AB2CF6A54F79BDB9DB56F26CFB3E6591E5D45543776D0EB6C3A8
8D10A1DEF8E194E095090958F9C70357589F8A99057B450A38D203F15211DA39
F2E97C073A30819AF5EDC88C5B249C58CED5C6CBCF63B4FD224F4FA23EA90684
2C86B5147254A6EB06C3E874B88A2E49AEB426B8CE0C6940EE386D68ECE113BF
94AF3F46D282E2E704A3C6FC29D60D85375C56C2CAB0BF091E996245BF51EB48
6664D8A8F2350AB63F6E4545726A96EEBAFED19666A1DB4AF2E9B350DB04B850
24823654FD33D3C4D429D5DDD0DAAD0AC6745916FA18BB7F7D0DCCCF62D091D5
25F1F848BEF99438A2EF8990A519D704A287889135BA6CFBDEAF29347797F3FE
7F4D056A5EB03C786F5F980811DCE99044CCE1EB5FC3CB80149DE54B2FE9459A
F2DD2C4E3631FDA08D2A0093B1C31CBEA19AAE4FFC83A933D8DC9A49744D7F48
C9E39E6A99ADE7AE908D2D4339EF994D62DCD99398C16988D529AE144FD133B1
1DA950F2DD91143C7DBC88D99DA041CA7716779D3C541DC2C630A3E55DE31ADA
E0B467F3CDF0CDE12200B62FD553359823B6D2337D8261FDE80C9D0FDCFC10EC
F31B8DFB66FA81B5E96C98F92E3A81C8BE23BEE4B7EFC230F62253BC1C1C2AE0
F07606DA710885C3BEE0FCA40901142B171E1AE5A1439351E9B9EF85ED875422
A0A51F2333C9056CEA228898D13F2F465616F7949B5DF28EDD3FBA26D6EF2B37
E345DDA85E5DD5C024B24774975B422C912C9FB6118A52E3B470A5800B4FEDC4
A99823CAFF87E567B9657366CB9239790F6B0B3DD6FACF052D2E1C0EB34672AA
78A6574434BDDCBBD35418E9E9DAC3479D3309DE69137A64C6D18568C06D4DC7
9BE0B9754B8F88632FC3A74FA1F03921BD9737A22D4605E10BB31310B68ABD72
95F457E216417028F03D8138000691D077DE4BE964AB5C97C74EDAD55A0BC8AC
E6E7972CDD9318A247900C698EB3D6BEA526A634CD2D2206519D53EAB53E924A
60ED01FD4FF9C7E27058FA600C8EE798C5B24F5EC4370F3F71E5D731BDA3F72A
50F8C443BB34DE842F3EBDE357648BB47876AEEA79F1B0E73FD3C2544D30C234
37CF9C3FF4D5AB73FB1F5E6AFFAC00BD24FEFC0C19947A45ECC6B9F49E7AE369
841C42B4988F48BEE08EDEC618A6BD6E4674AF447397CCCF8852F22D77E46192
F7978878EF7D37A5A482E3A3EE02D5836DD04F03C7AFCE7E1BDC7457501B47F0
C401F6474014DCFDB71FA151BFD05B61C2C2B9F21270C9F73ABA34BD195096C9
A611B79187B4DB5AC1017281B45FAAE82386676CAE2D18BBEA422008B4928C27
5C7929AF6048725DBC61C7258E81C02473FC274ED7A5CFCC0057DAA0B85851F6
908687246CB3073FA3CFF94506647E28D66032847BD0E8FFF410792A25D4AE27
807648B4302DFE0CCDEBEC25616CC076DC7279B83FA125D6DD423540BA13C7C4
277079D25627DCD5E40E3E202D71769340728135AB1C3DC43E4C2E379C5976AD
A0586431588D2E79170C45AF971CE65E6EB2296D1A267736C7F69AFC502C9F1F
E851FDD152F3E1D16BB5DEAEE0CD3290E421B6313A06427CB520B59E53117FB9
61AD0BDD708C34E6B895AFA7F1321C6361D12879D78AC6396BC3936BD40FF147
6D165269A720A6D249F9A5AC91B1ED3896F2C6874D6C2B18D06EA4D637174260
A2DF58AF4C523FC0CE23DD0881AB70D5000FCADF613B837969EB3C7303D4653F
41FCC7D54D09F57F6513B74F9F6C1F90E5FA9079FAA3E23617F80E5E0E4AC3B8
712D1CA44E0FFC78679BCFC1B3B345347499040B8DBCF17ACA51256EA4737474
941F6AC369713A619D46A2EFD36F9B6DD070EB10982D93A8B6B7EA1EB6D4B10A
DBA185A1AEFFF7E715CFB0FEE3C5642BD0217E4EC2FE3E1D71BF5CB13EF53E8B
5993B89B96146D226A07B099BEC7CD38699015DDFA5E32143ACCD729EB38EB17
DB88E30C42D4BBB3F889B169C966551150795C49C31B3B44D9E5F789B7877ADF
BD0F5BF0D86E0DC7B36600F355206369B2357DB7A88096EF19171074364ECD60
C272C920BC2BFD3C100E7A657599A79E93D3024779A063D067DA9822358B051D
C98F078D3D55FF4C7AEDC020D9D70486B05667DDD1CF59CA8FE2C0A36E88D1F4
1A9B9E182E662DF95E2E857908C685269536AEE16FC51EF75BF1A981A64742AA
C671BF6477CF5F5410CC780B76252EE2FFC8BB9752C7AE3229891C3D0429212D
B93D99C9C228D797917C338BB634441B25B1873FC7F390E93E6DF057C879E8EF
4757B9CFCFA6C8108658C5C23E48EADC1EACFE8EA4947EAAC3424A9D77E0B05E
0220FB8FD8F9CFC6C229A606FAD9B8CD1DF6F9D3B75C76F5F25E622E1BF50290
11D8526850A8606A7EF26357BD2707948C02243273F3CAECA175260290D8B07B
C834ECD1BAA5F0A6DF05AB22307A872361C5DF6CAD05159BCA793D33DA2EAC8A
4888BB74C0ED536B1EBD7146B14BD248AAAFD2C6FAD9CA9FDF5DD25E65131DE6
C3AA3FDF78422DDC8651103ED30F5FEA9623C8B7F5051B0D496AC491824F5D6A
B9018A3F82885D2C562442D3AC7C7DFFC5EC30017FEAAA14DADD75CA5942F484
5B21E5A4C18056869DC1B88C86D563545F3244A4D2E4D01152B68D767CE9BB13
1ADDFFD2047BA83A9FA2C2849432C1F958142752E7073535DA36AB230E3D91ED
C1384F92AEFFB95144D2E2C0902850F09CBDC0449DCC828C171ACDEE5191C53E
946CF7B50856A3A290D09FE9383DE131F36A6367113D48E35045C87D6146F713
8D92B3EEAD52B3932CD591B20852A3A3FEE33DCC50CC3223B43FD8B8A8550C9F
A94D752EF9CDC45D14E4BD1BB84F9001B8EA13E5FB1F8CD4431AC3832D86C2D8
6906E8AA94327CBD506C9D3AD5DF384DD8CD727BC1E2D80457F06F52BD460038
6F9DDAC5AA1CB6663CAE256C06852F8B2F35B4BFF17FFC594CCC7EAA9C8C70B0
427927D22DFB602AD372917D97C96DCB5564A41B0F2E2EEE876C915252EA75E3
562D25DC57F53B5F2C93E3DE4D219BC89D63139234AE184C0DCD9EABFF1FEBEE
F5FB87617238003A53F944E5B140B38CF351405B9AD330EF82DB0913158788C6
BAD275CE128B2591229C6C861A1238CCD1BC6C0F69166191D92C84CFE3181AD2
8C30476A320C7E13F0BBBFDF9EB0542E7F7540ADFFB8F85EE97EC79CFC6B5189
C759E190B666E5418B23CCFA7539E7B9D10BC22EB207B7F7D55A1AA1943A6C11
9CFFFFDDB9B9A6FCC2C30A3F1780AAB46028D1F4B6CAA5C76281CB123EE4C50A
DB09278FDC005210FDA33700E3EFDD2A1F0BC7974CEFE923FA2E604B7E31E21B
EAF01B5342B8752BBD867E9547EFF28FF86AF9B2A5B3E2353BC40A71057CD66E
FE169BC37D02634D88D9942D859AA604EFE5091FC25607DADC9C3A5B7D08D76A
44C75481C0C7E72CF904DFDFBCF1ABC3AE759AD09FD2556BDA19951E8F7F2383
BBC32E1D3096DA05A27394866F9E6D5DCBCE77DCDAE8898F78A4A252DE8B48E5
BE1CF2FF49C09F683C212F94BFE61F2CC4A5E686F1EDEB8BE53D0DF1AF539893
0E65CF84633532B8A63228626517C8D1892B8F218603F5D047FF8B710F872FD5
94EBF01B13FB8EC6E87AA26D8796862E4905D9692FCB119C002DCF2B05C095A6
C8262E055113753D000B13A98CC0339E144825766BC2E4EB0B5DCE6F433F2277
18802B4160E0120A64C8290E6C14994DF4F38074C2F7CFD63062E2BC0CCE09F3
9848882C56265826F8076DF48F75EBE56DE1CACE670F62D020FB877D699D01DD
0AA4EF6CE41B4DBB753E219D5CA0D1A43E5443FEB75DFE341BBE9C141B835399
DE36E2E8D7AB5FE75A8A80BE11BFA5ED829C67024D8943D9CAC45846B3081345
7ED69DCE8384A3CFB62EA15BBE6864E146A9DB9EC0042C69DC422D62E2DB5D6C
A4115A07FBF86930993E22F1A25B3421F4AB024A2AE10B9FAC64AF4DBADFC7F5
4570BF8A3C8C7FE762ADD3DAE43BF43188B96B6AA5688FDBAEFB4E965D6E2859
3EB105FCC4DB128B0AB0556C40D4264A9EF9D69E6FD6DAD4CD5140F0390DC1AD
095C7B956F84B6D3238CFF08223C03F7F80C573A450FC37DA55DDA88DD760CFD
A6589D03F5BA5A1E1ABA6BFAB6375B1A148E710946C95BF5DEC1C48C775D0543
E671E56FC70DF1B9293B7041C83D733511C24DB02CDA283D7CD2C48AE079D438
3E55E69F8F8127430B66201F99705E50BAACDB92A579AA763C17E2F46669AEBD
13A6311CE2F890851EB3E99946DCD9A40E25DD883D396E10576A31A9AE7E3BA4
1EB7AD90511A6851BEB0A3C759C1E04FD4FD59602DF50FCC43D7CD517F4C2EB8
23410B20427ED53CA039EB44CBA02BF67B2EF7B7096CB5AFF213EE1C88B26F2F
B0CD11243ED9C62369204A18E0EEC4E0C5C89EE5F08CA00C123B377126970A04
8876AE3B997D7E2D5BCCC91C8E68D9620E9981314398F4E4733D2BECF2D7D600
2895581B7B69AAA5135E8284E49B31A6C67DD891169DD5F00110AEA7CF665726
113AE3CD85217E747596B788677D3FF586F8BD6D69CFBA66D0F0C5C707D6C162
A047A8A548EAFDB5645F4D2BA19A91790ADFB7D4AE2DE1288F04663CA7C2572E
92D94B20C2124EC79EA23358BAE52FED3BA7C0509ECF7D8EEF37135C1B4D191B
DAF467A9AA3F12DB19C0243794998FC2DA7AD8107D1BA5BF49250A3E4C03FF88
0418B96A7F779422704BC24AFEE43A589D41137CD31F65130A316DF09A08532A
9CE42E5ABC34E2A90071938D1C2CD60A653DE2A0696188A8D03A7269908E7BB8
314FB6D08BBC45A7053D309A349E277FFDD25F5477D53AAC1E0CCC259C428DEC
23A2B17CD4B8729E18A89D56355A3FEDA2A10E255CD596A11AE284119615E60B
A98E2257FA292EF6F10E740BD2CB42861D3E6BF154DC1029C2DDED377647D732
2F1407C6174C8C597CC188A77EB3945168053BED1B26ECBE36D8AB647AFE8BE1
EDF70CF96A0F61E85F33404FFE10B1D4E67E11874297E086F5090F09A93FF9F0
FF1B200F1F87C0D5BDACCF75077E5CDDDD6C3210E8771D839AE2FA1E751E22D2
B03D311C44981E54A1BCFE5626C854818DF6F217372686B1FEEAC57C32764D53
1E3B5CD8D17E9B9E29EA602B0D2C1E4F78F0C3E0845F31B2A26D70E38B81CE91
51EF2A4AFE4FA32112954C5B86EF7AE3D010FD69E1AF107809FD39B4341967F5
C5D6FECC34CE6B148998C509EC930840D510D05625B8E00483FBA343CEEE9AE9
F6E50B0686EA178E876B2A0BF3443A2727B0293925D51B32ACBBAD62C2386C13
DF1641D9EA0D2DC9C6CD756F8FC50B6A626E84EDE76984D3534F7D09FBB12210
AD3A7787F271CBC32DDA72C516D255B2071EDE7F6E0286E8890B83EEEDFD96D6
612C658F520B8EC456C246C515A0696A8E3E169BEC4F978BC9AC54FC694EE1CC
DB92FFCD9B3BBA635AECB8A733C29092FD1FEDE3D35EEEEFC58A2BB23C6C949E
D093A7D7EBAD9F4E4A8812B814F7C286ECACFDF2F7652525982F568E45D04FEA
7390DFCC7345086D0D514BD6AAFF1A8E5E750CD63DC517ED52D487FD53EC92D1
FAE8CA94430C133E706D9574E31855F41BED2E1E037EC736F89B18B343C92EBC
F9C43B72667DDA86F7E9C3B3CC06F84292995D030B9CF7DAE289FE4D298F6C8E
6EB4956C28D804A74282AC78175D9C8BBBC317C645296377FA96C300A3CB297D
20119A18B36560D141A9443886916806EF88E456B79B09C42892F9EDFADDA8D5
CDB27144FBE8714BEF1D0EB8C15D75D143CAABA8CD3E5FDAD531ECC3769605D1
CDFA33CDC53CA8717B9A0F2BD5D656043664B9F4BCF51C29A63197EE08A7DB52
D4F8D179D063951B2BA9079B8018C4846D0D8F4F0C823FEDA071C38BC3BBD7FE
5B14FE97B25FB1D768B1555C02A91D4FB81AB7A9DE66411EC11874E8F570E041
90A053616B40301A76DBF28E8B1DF45EA09F2C261D37992448638AF708488214
A38AE3FD7665A8B8DB9AEB26ED755BB1592C10ADA8DF62F0ABE84C7BA102C255
666C912F6896BF2EB781FF712DA73630939A2DFEA38940D8B749C17778B6994D
C0CD9E58D0C5E0CFB3843A9F716FC0A20F3C524748B257CEE127CEA22B24F836
CB1E502FFDE1A6A05A93B2E48A6B5EB923025383228450E6766DC62672B0D2AF
645AAFB3E51CEFC0E88AF09C8E66A6F27EE257E88F34E6654EDC23F217C2AEF5
340F82F0E079F1C7D0E4F3C49EEFF74249A595C2C1C063E30E2076AD8B593C5F
AFB016B4B4B0E59E4C971B95142F5C09FD9ACDA3D1D21CD83EAD3C7744898A76
194CF909A33CC52A9976A35EDBDC725EB7E583AE817A40D0A1F69382596BD123
12395AACF7B298B92B41DAD4A192B26B0D392A98589B138DFDB27C5FA6D2E8F0
C1AE668D418AF41D9964639CAB69EB8AA1967F610B037D62FE879427A458E8BC
79D7EF2B879F14ABD41905C0313797A2C620963F7467BB28673485F642ADA712
B1BBE222BDDA2F61D487692FD4BDC4F833F3354AB6F99F8EAD50A11FE1636867
FD425511337C5DB8D5E0867FEDFD27B3C94E03AEAD81DA442B2551346E0DEA79
D56B846948CF383A4DA29AA36242171C9EDD0FFC180697CC8F69972EC43E62A6
BC5A6ADF20F2ED1D80E2B3180AE481949BE8425155592F74B91FD7F7F0C9299D
2EEEC862F5EC56E183AC89D0A9A13EDAFD15BD1618E59A3FB025059598E1FA18
7E022DCDC35ADC5113B6919AD3DB88B79954EF9B01E7D9877AFC3EE6C6106BBC
351F3FBDD45966617CD18E55954C83D2BD2C8FCDB806744AB8679EEEA8070F7F
4841C7AA60DDE240BAD1B2893D962C08432D5076C5D22675B6D90E171F51EADE
C934859E86087FAD63292BC42F65C1215AD8EAF89A6F88BBDBAD64F49CFD88BE
D6DEEA8BE0F006A87A2784495B6C7321A7E24F956F55FFB8479C63E73C8810E2
E09414EECEBFD0EF6B951827345F4721B4F5C8CA6439DA59905D284582AF9168
2E35560BD353FADCCDA41E41DB007081F840EF22585401BB6CF87F494CC6B431
BAF0804D83527ECE7ACACA59BE03D7F37C940A8F4B3E4DCC91413C3273DAC2A3
FD2C4D3BD93062C786EB15A5F0DEC6366D20DFACC9A51E37BE22B33A04FC29ED
46A45A1DEB1C9308C143C5F145482C4E989C74709231D8E4D05CED8B8C949DC2
97B6F6671F8B08D7E289C0283B3D3F75E0EA80D03133C9784DFA1DF8F8E5135F
DEB0E1BD7D6A8E0E38523F113C09FDA10594919FDAEC71FE660517365C2F18B4
EB11C82940A9862E861E1A336AB952E25BC193F1293B8A67E0F23DA53E3EF6A1
59569E1000DA288DE7D1E5B287F5743B65153F052AFB72148ED6C631EA37DDF5
77BFA71B8A651C04320695FD7B7BB37C48B7CC48D99DC9AA79388C90BF683F99
46C4D4AD6F67F56FFD7162DC76973EE2ACA2DC4C24840D64D52A0D096B4FAA68
3B49019A1A6FEC0D2E18A7724A663172A6A5A9C8EAB7BB7D92DB39CBCF244D6A
4A721D07276251C8F24B88938C6B6D34544836D7D4D493B515D026BF56C1D057
DD0483F6F1F3CC2F0EFEE40E99B8AC8CFC152117DD9CB718D5C8E339191DD049
D8EBF57C89305D28093A434364456877A679BDB33BA0AA9736EB8C5F3EBF3981
25B2247D4343D6A951879A7744F1D8115E9182F9B763A7FADD7135FFE0FF339F
B779FA7FD47BEE76989153CDC3DD7F1EE89E404A43DB5B8229F2769B2F4D97B0
2789467576AF1BEEC5CCE41DFAA70EE4BF8850CD680EA9FB2A79178CA91E649A
BCC49A0ECD59C6420E02AB660F2FCD0563BFA17B754E98DB92D8D2500B48339E
10D1E84F62AE54484742625A50FD9238FD58F2861E4B10FE70A437B6348A1B6A
959329CE616F2999ED08DAC41E289444A1CED5947E8B7ABF9FF0DEC8C32BC3C4
0D4A2BEE22969794747002A28E53E0BA0DE6A59392D5E557A92A4C85BF8C01AA
B67EFD5E2D38B0F0CF2A37B1A08665D4F8E687F4ACDB414DC123B4615791B07E
B542990B715140A972037A8909560E5E33878408EAA317D42BF6A57E133A9F87
C13BDEEB728CC5B35F809BBFB7B1619015721D86487E038A1C08777303050AEA
3DD3DAC909E82E704A9A75FFBB02895059272A8CABF4BBAB8F1C55953B609CDB
2D1E7DE23E7897C840F0FD02636C6E88644EA492A29758C96DFD61D86B750ECB
3FF760A74B81E8A551858FA4DCA3B61C5E91A79F9E1AFDCEC589B2047FA3EBEA
4F5827DED76A72B92ED09A432F3DD63AEBC0D7BD97DDA7DB5C1A2EA6076F219B
4340AEDCAF4A667BE9DAFB2DB1AE2F04F0683F62C13FB907E24B2DD92C790656
CF3DDED9CF55491E714B5B055272D21764B1DAED1A4BA75CB58BC1F341E7B705
B7CA581792342A5AA48B228CF68EE0032B1968EB88119A375D4B645F1A43C197
D8A4A106E081B8C84CFA963FAC7913F932C0F62203E7916A0DE9B9ABFC1CAE96
574724C606B592BFD76F57A7241BE8D5539053B33B575F8DFBD647117534B480
670DA17E8877B7E4BA934BC09B369E119877DA7E19A54567760F544027D4C871
AF60A198511DE9989BDD8997DC11A417D465D568011888C0AE6FBD012080A4BD
18DE9A545BE11590A9AC4572DEC5D21C6B4911636437CFE2E14C91BF41D55A0F
821DC790916F079F8A073BC8647C10A0CE3EFD71F5E0E92C97BE79DB3959206A
A35C40EBE15D44A1B45A7C4CFD7F5B78E76367774CCA96660E29A76141D7A01C
F365788A6BADBA4C014A2D47DAF5E6C402E542BA0F1B95715815D374AF376120
60EC405D5F5803ECB15BBCBC91EA770F09F41705654905FCFE90753FA1150538
C2CE85D1BC32532A0EF4E66C6F9C5AF0FDA995F18EC547BEE106C4A76732B849
C631D6EA43DCEECDB65E177975503EB5562BEECD5C8A5BC1850FEB164C7C4A4B
362143F510C94C26647858F142DD380FC76E6E35CC33F093D691999445F23012
B797542CDDFAA27A3CB0DF014785240013A05FB9262024E28822E7347B5D39CF
05DCFFEEEB60A6554A2CEEE102468F7074CC688CB5A6156D43448785A4E8D37F
324672C38202768B5547E0F6E680964F6E8B18EDBBC2F3C01DDBE5379D72995C
54460950F5D63D7B0673FE46AD216329B8A6461B4AF8F39048ABD56A90620F70
F9EB3BA389C21CEE927D70ADC345CB9E69B98F3D809AF264B8134FFE2614F216
8883983CCEB8311132579EF7430063A09F6ABBFDE4C7AC466E898A32F8B178FE
FBECB1DC8F5EF9A4D90F05077655A717B4CE1DF474799C7449FA8F57459D1A81
3A22F039CACA201AB5BC51D79FF8D818EA9EF8FDFB6745EE855A521224E66982
10237A1D671968EACDB7D1F9178B9FBEF8F92279C09A16DCA61253374490FBD4
C542A99509DFEA200B47DB074DAA905D56C94D02D54E32A9F8AF6F4BD2E3A16F
3556412CD6159F95EB65CDC20F1633FDE4105BDF3ED63BE2A1B8530B7E691151
48CF54C8E0A9861F88FE982C7C8890636CDEFDED3CA00B86C57DEF55FC12424C
E5BECB71FB97DF1E62023B85CFE6D9AFB6B920F584CA73B436527795BAA59086
831567FDD5B3BA69377D81EE50A6841F5D5EE25C7E2E64A48E777AC427513909
AB8E3D55A6CE7372786CB694F07B727B22568413E0C9E8BFD9DEA11A7F40194F
1F34337F91206CF3C6083E1C394FD8F483EAAFCB3154D4E76A3D60A8560D22E7
9EDE12CB9EF19C0E6ABE086DA00397DE6F997A2C844E3CA36BF2E06E890D15E8
480F5B8A2AB1B87FCFF3DB74466F2D1A2E8D3BBFE536690BAF2076EA3BECC672
DB34F953741414E9B852E338D1319E306C74E9EC49D853CBB1C6E0B89B60CC14
84DF3FD24A970D879ABE43720D2AF09AF42D8D89987577D6A89BC5357C7C34E3
ADCEA02135EEEA3C2F1FFE8E96BE43BA6E9D5C9F615EC830A0E2D1ADD6CB4CB9
A908E48303B890A765398364610582A909CEE2B32A96C4287E5E2A32382F44DC
BFBB4EAB754C067CFED2148D56B0F1657E674229C88C5988202411D8C37C1266
1535A41E4A13B86D8956187F7594C04DAC7255FA23AF1A3261DA7EA54C29F02C
3DA92DC11D189991132BCA0E393D7094CE10985634CB23828A19AE9315EF2E13
CB3A32A712343AA5772845A518108C5548A8E05862E0BCC9E12B66291A897CD4
913516074BB8FEA967C6F4515DB817F06D275119F2FAED3A59CD07C9B4207AC6
ABF4E63443E2B9C1DDA99403AA889A3F7DC6AB2ADBF7466ABAA071D88FF4B62F
1F694D447E567BC0CC23D62F0D971486144AB09286BE3822152C0D6EEEB97C95
09C9294C6FDD6D4FDB75FB0AE3EDB8B6C01CC56F1D1EC252F26F852E1B9114AB
B6758C430E61FFC06D2945F28F1190BE3F8D684CFA590BB18519931847688D15
B9EDC3CBBAC317FC3CD758EFA4C42869FFB4FC7902AC5F4DF3F67BF796191786
703CC123DD5AF84E8A0338E87782378832294BFBAC36BA750A8347F0BB7C8C28
CB07E3C1BC8E20988FBC416EE9E9757F438418A09605DCA1C039D918A075AC7F
0B1D7BD037983D6B19A9B435B32ED668C1C6C7FE7B2A7028571A18CD85381841
0F09C3D91B657AC9F358F403B3AFEFE1605A00ED53DC87281E0C1CC2AE690291
CB7DD120AA1FA5BB3318C13932342D8E641A48A61BF736D55580930C606D899F
CA1556AEB8E16DCAABC31B2733F80AA1938F0353103DB83CCF9143F3A1A432D3
CB2CD8A8EE1FBD1281D2591A7753D7CEC7109C7E2E01F5595D3F802419999D15
5EF5966B0AB6796986258F452BA676157DAD8A37DA9DA77A0464AE6AD10FE499
5ACDFB6B9B9F8C023C36103FC23C1C80C151C459ABE929BAE59DDD207A308B95
E6FD08B08C286870A60C38F60C315723B65F76D0A2586694A33541BC81F868ED
D3BF6DDE186C3374415F03766156316B868B2AAEF98E5C7E080127212E2F5E30
ECE4BDC627069F2C9F4572DF1D04F6EDB9B8FB49FE4E419405B38F3B9EE4A8F5
2C2E9680FAD8358C616D0FED1833762663C45F598F5D5317F666480C767EFCC3
FE9D030CEDE34DB9DB213B5F13570EC0A3012701B060002FBE2916576E84139B
52B2FD416E0C5D3D1DA27D32B0FA56E15E1A73CBD1077CF02B3025A6FE6681D1
493C791D1C2AFA276EF3F763740A509A389A23504C8499D399C285B9842D844A
47DEA47C4BECE431296905169F6059925C4545443B3E2EF9E7158083E47282BD
8DE6399FAEA7484F17687D2F3900B9524B578BCF2CA6C2E2230C8FE27425D2AE
291D57D931114C65F4BE3FBD5390F2014DB52D650029AF22167A5DA9F08FCC37
27D2412980EE910E0CF540BB459E4C13C070931C27705BADFB24DFCA8F5F69C0
6C718EB5816676A5B6D7BEC0ECBDA8333196260A19A1BBE5F56FC10A1C2CA34E
FF3A7D45FF76590C884E614679E4B884C970AE06F84A6E15AEB2EB6F54C8C966
0620918D7E0E09B5DD6F9B0A6BFA45A834DE0F8FCD8275213C8C1B07F633B27C
2D9B8DF847F7DCA8C5827DD663DE27685C870CA99F0FE70B4244BADD57DA5905
0AA8E0DA2078F1181D774D8A4C388D8A44A89B029D2FF15FA1B918096D1C4368
AF6FE4819D9974217860D39F4840441A5F43ED33D07334DA82DDD7F18526F048
8EF4BE79971823F999AC75C817E289263C344C7FD3D4D3A68B7C656EC8DBFF7A
20AB9970CF4226B84C5662274AE08FAE204D25246D8BE271D65F3C028D630522
F6FCA9A699860A45F89A3D3FB22B1B2CC2A0BFBED737086190D7A666CF77AB9A
7CB55E7A6A779C818189E85F40787C827B010DE6B6DE8D837E88FCE0583FEB6E
DDCF7DCAEEC844097AE82971EF32F630910D66CAAE8C725DC2AF4A99BEEBEE78
066D669B0CAA80B3AA3DAF20F048EBC576E16E367D09E7F61B5646999717D017
EBE15B9E377CFBDCFE76E6FEB4895C004945746273908CC3DCB743F9BC023D5B
537218C80AF1F6AA41DD950E75CD9D233C1D0F499A729C460744F40CE49C090B
7741051E8D90FFFB08528C68C1D0401834C34F96A6458F4AE670F29E066A1DED
188D4C9A33138DB5C42500696B7E92567B0EA9C7F00013BF9997611ACD8B2253
EE29D6495AFAAAEE7FDAE05199C717C8C05CC40057006A5B49F8F8EA566F1B37
0B20D5BA9FEB2AE4DA9D044FCF60A4242C02527DB8F2875516515FB538D24947
3396A8D1AFDD26E05CA5058EE84D1258EFC236E042A2EEF5D51BE02AC50855B9
158840F97FA94CC1EA81CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C35F3C23
C14C541A79AB344653C18DDDF57E5E5435E5A6F73EB37548193347AB77051B3C
E85340294535D4C10F41A6CC1D737A647B484728F2D914417B7C4273FDD95DAA
7B908EBF55EC09503BF1AFD89227A574BD8D6F6283BB2417CA527546F0599F09
77CFDFA594116E4FB1CEC55B67CF7327EE8310F8FC87A29AD6D75C4863DCEAD5
EA7DBED4EA57ABD941DF37787D29BE073480DDD048F9023B9E8F8B0ECFC8BF46
89E4A980A46C44610716E621852A2130D424024BE6E1DF231C377FFF80934EBA
66E1E7FA46F945C4FF86DDEB869363529378D1D1D08EC12B61830348A64CBB66
55A0D7BE6CABFB55F8D58F2519C65DE8720FC8F26AAE54A03922C00875C0140F
5A565F4C8AF905DF2C7DCAFD911428468FF6A49FC017D50A9985A13B16D05812
1778E93631D91E3BD5243C9327EBD7479BC8780AD28B96DC113ABA4C4528E9DA
B46AC7768143FC961DF131B7BA764E5CC20F3FF194C0C9F8E3F9EB42A6F34280
12077754BA3854A60A3676CE5C8724A845297214868CF511A1B5C054CF08BB2A
1599031CA7DBDA97D6000031341B9DF942E732F5332C61623B68F52754AF15E6
F66D5889AA38107618EED26B3A0F96AF6989DB526CFBD3C7467A1598A876ED18
B65ED8CF27CCC43A99DD00AF9BC17825D628BB987F54D6BC3E448C791D4C0428
E260EBEBBCC328849DE8616C5404EF1ED5CB1B79794C591355E90FFC66727806
35C6573D004183AD4708743F782E7A052C43649233092326D45CA563E0E7D188
BE0FB15BB46B51ADE5F6D4A30E73C8888AD44C29C75FC575E5270DFC3E7F6C19
5D979E9E98C9A7924CE582EC2347A9D9D53021AAE3BA67931A5909052548D3A5
96A6C6C6AB77CA6A946D2F8CD69B4ADF316B992F547DE9372FEEA0BE40578356
40A13AC25D5FB37CD18C66727A37A358B1683FB93C6E4B8553CD9E2B63F94550
4D950C13B31CB7B479C07699605E25049928B01E78C6FCDF84C299FB8EB041D3
A61C5A5BED2E119D54A0442145871C992BF29730D0F05B462C2C9856A2861F81
FFE0C80460840375221778C3C662B9F39D01C8BF7E6E9FFA65B51FABFA3F4CE6
68212EFB2D98065633682780027024E74BDCE3D52BDF2D1F42E0AF6612B9B6C0
3DA278F84B3E6DF0E50878A0B88A4FF676DA8E4482D32F31B63B81CFBAD9F538
912B267CDD3214F4245AFC3DA3BFEB37BA41DB55892C790377A634F66CEB6939
3E13A341F0BBF146F4F08236E03BB3326E18E11C3513C180D4178062E8D1B5FF
7496E4BDF67F6946CA1A2979652D78EEBADAD5F5FD79C9D2547034D2A5186838
FD3AD3E900D8F2BA8FCDF6D79CB5FD8950EF78BB309D44E3EF64B149014BB6E8
E6BB2325B2533A424749DF165FBB48D6EA1C3ED515629C1490462A713E65D217
1C0A7A46AC5C4C4E41624D728F4A85CA3AD1E0F026FC3AD69634A43C5D42182A
2087CC39A4D9B855AA0BC6B25828B0BDD5CB6DF5AAE5D2A7A3BB7955E13E6B25
ECD07CF3708B06CCF135E5CBF90D8E628F255D86D689B2B2ADFB9F006517285C
19ECCC8476B3B9F571CD7D45B99EEE57397E9BE444CEBD8416161FE31633A6ED
A118E563BDC1C42F403BECF47B73BD5D654BC8C65B8093213002159730911378
5FBFBFE4793971B5E645C82E92F0EE3C024A399080B048CB67B787A6D4D68AD2
1EEE59C2A0BFCD32DDA767098E8BABEF2216DDB0FED91BDF6112F8D224CCE12E
9802E231F3AA193F9A7D7B7EDA5BC497B2618CAEA3A6093171F8299E90FEA179
E6AC2EAC2BBF7A780F68DBF95FB0AA9FB4F17B36EA3E0AE6D94408A4AE14D860
B8CDC55BAA5DB0322BA2D82DED7D824AB909553DE8F19B87DA828091DD45A216
DE6E228DDC4C2C32C9634B0B2322BC1A8B40D3229C18FF667927694F7EE4C1FF
02C1A7A700CB421DCB4EDB88136BA7154069616ED04C38A2CA9968A695378AEB
969DE580E6CAD93FA3DA3CEEE9338A9A6C2C8A5175928F24A2B168AA5506DE6A
2158BD85DAD457C8351CA765BA358247310D2D65F7AA1474B9C83406A402F3A8
3FCE9918EE8E8D4BBDEF36BCEA0D9588A398780F0D7BED62F3C026F1745F8986
516497E78000D8C6BB07B717A6E7AE78D5EF53FB8CC9D91F83A19DE8F44E70FF
842306ACCF65C0AC9673859DB9C3A3EB24BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B6D80C21DD48C10C8ABA3F9256FEC0FE2F17E6C5678B8322DF402994
174EC1DAA29E4717CA1907AB351DC8A0012D1E2932898719493BEC545829BC2C
9C99BE09D7BBD4DAD9F3ADE59460C435361B9EE2378B0B2365178CE4FDAFE1E1
23C3FEBF42BD06F669C0CA2187337E87C6ED74197F21C6F13C85932525DED921
FC99690F29D3BAF19A27CB63E2491E08728CA78BADF8FE14C87FDFBDA4C3B06E
5D9A896BFF4F813FD37521392A12AF3901C740440388646EE6BDFE554D9A297C
3EF486FC1153C84590672247F6EB7DE01E820CF9FF3E71A0DBD8FE97D3B64D07
9A3BA85A5998D9EF56B007C60658B32E7506FA8FF9D9341282C6C24A59C65B26
E3CE2B07DEEA3EE21D899511D7D9821DC6D6592947498C1AE1868EA4CB50DE9C
8C387F15F064F37A9671FE388DC2BAA9230C3B2C5670B30415068768E0B90393
092A38414103A9E68C9F9E8D25CF2178BDFC322B73C87D259ED1EB57B32D5228
47FE67074C2BD3C722034FCB3436F7BCECEA17F062BB93646D707E48E7D337FE
C7836A4F86877F72E52070BBFB99CFD9F2274069CAFB5E73AAE332A20258F33A
0ABC62AF33BBB90636C3A82D9A6F526FF7550B580622C30CE7501A3D24386CA1
EE3C44EE4DDC284529BD620C0868AFD6C9916FF4F83185A2B9793C0F5FF73C8D
403C373E5CDD5962599AE3BA0D086EE6BE16833091C0BE7F9B8BB4BE24DEFEE5
CE1450101DC19C2CE1CBCD45841D5015E66E2E97DBCF36AEC67DC41A2E0292E2
1FCA8BCC1E6CC5CB6233F359EB21E8DA829B4C0F823586C65C086DA548062226
B47B9CB5B4C9E1577865735764A008962B85EE25AC8F955F56F001380360DDA7
DA84CACEB72A7B264EADE07FB9F289C58476AF0081C7787B17C4355953A0E9E2
15DB734BFED217033F0CFE295EA18A05FCD3ED1F8DF59E54159905BBE268086B
D61F8F689834222C97BACB0177B21B2EE4E58B389B34D56690527FBD54A66F3C
8945B25CED8626AFA20246D5CA28C03FCC13CBF06EDF7DF34E5D54C655DDED37
B3EA645A788DE6DD3C5D3CC6ACFD50E5F08EEE47A28B527111A343610D9C5A55
F673D2D01215CD98DA3759D8A45DDC9D2B0D731BA72CAF550064AECD059B0D0B
A52EA550DD2D0DBFBA64279BC875B8EC2BD73CD9605748E623594256A1BCC1EF
5D73A717A8C8CE64DB95085911926F07D9652BCE264B2155B519C411A105ECE2
74333DA39233CD35E595100EAA0D263948E296B132C6DC0A1FF2E1E492FC69C0
A7367B644D1FE9809B597DF1BB2FFFE27651139FA5FCBC3D63E4F21ACDBB23BD
2E98052E108002FDF101F655A1E1D9740A81015DA2E00FC9F9EA4EA1A61F7120
396F7F52B7D55F101D0FA8E1CC861B8131DCEBC3DD83D4918D2C6FF35AD1ABB6
AA47B9E976DB2E19A8E62ECF20810BD4778FC79408E9A6A7B44FBFF4AADC09E4
A7ABA41A9531D037A5D17D98D6E27AE8F1D1624F794AC61D21FC4BD8EFB61414
F6E13EE500835D79D5FE278516EA983936A6CC19509F13373CC0516EE29A951A
FF37B1F2BBFAC2A01E8E58C19AE1C9482B5B3354D11ADBF08F25707D84CD2B89
02568507837B08EAB0D8359A4B835D2D9BCE76781B0672E7B3EE78D4C5714622
E75955FF3E78C4575D810E7E0501C48ACAA03E1E72C0D37CA7DC832D75FDFAD8
1AA210A59BA2A1DB2E4C4AE4356CE80939AFF6ABE72FF971C3635EDD7322C3FE
EA48C6B4DFBDB48F7FFD497736E320C57B7A8F05208127F1FC35DB9CD34EBC68
4818AB259FFB0A681D5003C3E14616874AD27F62746DEFA061897A388477BCB2
C306FF50B5AD4EDB22C7428DBC01E2C1C3AC836B5F8C222043B78BF4AB1730F0
381F04C9D784E5B70B4B99B3754CCB377CCDCF829AACCA112458555CFAE68436
99E4BE8128037F7FF6BD37DE33BDF91B24F553AFCD8B720E95ACD6176F1FCE54
B4BBD6AC3015460EC5E5ED97969B913E1212959E4599F124F7FC2D039AF2636D
9E901FFF05FB869188C14C268C3BD17A7F6557EEE167D204057993BACC39248D
4348467EDE3A8D5F87C12541AB4CCDE8F79F3B51C476287897BA6BE3AE9206F1
51777329B80547BA01F3DB166643C310ED9C8FCF87BD112CD052FB5068FFE584
012272E231983CB5E976DBDB2D13A7F86812DA6095367DD0CFAA01DAB72A6C72
312B8D4E5D4C6599D549B7AA211FC94B6C8AC00C6F6B7DAB3AAE8B63CE9280EA
1D11A2F51DCFB153BDA48A35CF5967243C7AB3B421A7100D9A915D2A8FED81B5
B14B98C99D2E5C078B5199D6BC0401B60C553B8136D719CC8AF6C47B4E9EABA8
D0F4350EB62FAADA6D39CDFE3F6C9BFEDB4A940A58BD4C8A602ABCC89CB8A021
5797828A9661A7309F5CB64D19B2D50C3CDB4E43E6D9185F37A0B20E85D8FE3E
386888D2697B5AD4FF8B20DACA2B448F933ECE24936FF8F23B446DC18803E23A
DE51A93D54C85D4464800EB969C33700F862999D20CD6BB979980521ED35A948
8016DC834C3F251F5A4E3AD99E401F5E29473A8E735D338B3AC3CFDB87CDBC9C
9BEF4E5BBF6F1FDA02B22AF2A316937A37662E5A9F62E131E8C7C4A2F47F997C
4288AA1C8CDA5E3C6F89AD4B030980891C0002AF3247216D8F96EBD8D1EC18D4
8FEB29E968BED835F811BB49D9D9D49B9CB9426FAF6E291D5DE81FDAD7881D2E
B9172B9F36BECDAC83817A3DC89841BB51B517CC357AE76D235E20FB07E49A8C
7C9150FD27B626BD3726DBB66B6C093DEFB117119D86DE3BE569AD7B2D642394
CC199B25594A32D8ED40B74CE00FEC089D6D74EC4D6938D4F3516915A00DE503
9EF119D97C5AD3F494E59E191AC79F4F06B6C2B0FAEF474C709515D6A6557ED0
9C2D3244859C947B511B1F01835DCA3F58D85D6EA39739C3F5ED88C595EF1EC0
DDBACF21A37FD2F94980B771FE693F15FF4FB56BB34C7136E69B3F433356099F
CEC318224D07AF1DDC35BF7074ACEA54B605DA2DB425FFBA32E865636E5CFA75
7A55C44106DC51273590D7F853D87CF4CD1FAA1B60014C65A358AD5450F87BB4
B4D9356D4538283BE515CA086249649C0567CEB74AAB78797EB9381948B2E1E9
DAB2CE7AF6787D67921FF8DA47CF97D4BBA0064B7339877DE9B4D3E2BC1BCA53
F78E8F619A6D4BE86F4F67B2BC065A56AB2D34E0E6DA6DB26A2B905FB8E060D6
F44488612A2DC61ECC2ED95F569A4FE63CA3ED1247AAE09213C286AD9210E107
B6BAA114E4F2616DA6C766A2D241AD2F9E685665C5AA3D8E7009B621DAB35992
D9A0152EF4B011625E2DF08668C26FD29AB6E849715BFCFAC2784D902D6CD763
BFEE089AF2C6CC99FAD2726E5180693C7DF6E186332E8F148A17EF4A4CD214B1
23B2112202761FBF8EDBE2EF4A5B08A98A05DA37D8F2B76F82DF1D2DCDA032E0
080B0C93443F0FB9FC74E637DF7A7C47091724D0FDEC9A69F5CC3EEA35AB8029
43B5620855049556AF1A9BF16917F5320E33DEC2B63275ACEC8F6451DD2F1665
4EC5FAE90C2B1A99D0C6F98C72AB9F84F3C7AD8A061B6F44475375C49819775F
2522B9208A27D9CC916924A7B6E605242727E8CC4149D01BA99468207588C3BC
2DA1745E4F1EACB4D6A50538653A4591C923F2CF24B8838FC0B5926498262F41
8310539EA4CFCF5990D00ADA4C7A901957507D4B848AFF203EC104AB6EF99A32
9C22CFD6BA64E896EDB2ACF366069ADBB1B9CA71D372BCBC9B15E401EECF257B
1E9BA40C4E049D5AAF71221E5DC990A71F9959B801EC723898959F430E8EA9BD
513F4C955B29A68F2FD8A40F41E91238E4D55EDB25BE97316CD29DE3D5E84A07
0772AF9A660127AD8BD7514C89CDA3C719DA2D9AFB16D8A9B9AFD9BF3904DF21
8B837FDE0271B310BDB076E1E5D2187136E1E88EEAA9A1DBE19DFD88B3993CAB
581A7E340178D6574F6B5E238309347BCB3C08C522B5705D78441901F4B7ADD7
67A34A66339B839947E1E27B03814F81700A47C3C770407CE342E543D607556C
BE5A9089B86D1DE768F27D73FB1112A41EC3DFB3D0E6ED4EA7270F783D6D43AC
0066FD357C34829903FBF1D34D8D6337A32D5F06CA5583D1C440DFC6E9A7B5ED
A26186578223C50EB478AC4131EBED6BF5CDFAAF3113D089D7C85E5859F27B8D
C4C5D86658A2C89ED4BAC0C5A0DDEF52F121996E2483E9C4F22D259BB8C6985D
CC2E4B1C631F0015E7A0224E6896706A9A6BAA2AA88A814F52323DF635321F68
AFBA98D95CB22E4CDC784F6FAFE9866A6E4C83D0AD28B26A81A28F5870230E9D
A69ABC80788F2F72CEE5F5594B3260150A6BE7D5B70D927B84BD24A98ECBD21C
D3A62977D0DFF41DEC0187D666FE6E2BA190ACDC2672680624C1CD651FEC48BD
B300B1F6E6E85321AB77549A2BF49BC2E564B74B7975EA4DE6F4237FC68CAB8E
56076D0A923F4072013D02D833838258380F6E5A5F1EF119777AC48E4BEB6452
6BBB44FF5743B83AFC78FCF18A9426488A5BD4DFA9953126FB8B256C974F3B36
78FD6C1504519AB636A3DB3CEE8787EFC7FAF8A4229D8BBDE5F2C814BB0B2E1E
D423A0AB74BEFC05A359F73C311CB3F5D7685E6841A9FEFC112A4646327AFCA6
D3D74708B3A800C7DBF813A96D33773AACD4000D71140AE55ECD88689C8934ED
CA599ACC5C1EA7B60FB79F8113DC7D3FE9CAE8D6A897962EBECEDD21DEF42A0A
CB73580AF7401986461CDF084B59B5786859662242E4FB891859F172E3FC168A
C57D5611ADE42414B45B9B2E8BF75D01559F3851381BEFEAE26D641D49CF164B
8532C475A8A77CF7E85754737E7668935439BB833F49975A1BAA7B0D8E48E4C0
3161E119557691F665B6EC24FD7B4DE02168F2D78009455ABE520B354D612D6C
B6CAAAA9710DC306F3EB190DB13ACC949B23FE48A1D615F1562325F9E69C1E31
FD5E5C2C46A6AC2854462EB31D30223C3E2593B4F664CD295E292A0477E6E739
C546037F50C6DA8EDF8F2CC8E69C5BD7E229CF4EDAFFF25889365D6074C29D3F
8AB39A5A2AA3AE147AEB5F47B903998448FCF0B40CBB79D3FD4B4F9B90F27861
1441CA0852B59B5AB356C89B6FB24221539F3C13CB01810DC7CEF2B13B03CBA0
C37EC2510F9E5252BE053539A37FF493FEB05F18004996657DD4490DB5D8D8DB
5C3DC068773C3A3673AF8F53025763C3D3D9D20562309C88640CF4D081B6F1E8
A38F8AE157270CF78722865F782BBA70193003526E23A85BE29E113D06CC87D8
7F7F8F9394281EE90448387D46D1FFD2A9445161F5E036F9D04E84118377D0C7
35C7D05A67BDBF4EB722FF4A61C233F3CB897AE1DEF890B7294168C39592C74D
17AC945D00882C720C27834570C10BF892F79B30340EAD853311336BCD751AC2
AD65E979A31E979859ACBC25317F266EC52A8AE6C6850B71E88A2B049A7DF399
12C7815443A62C566A104408EAC417BDB461014FA86C383A1C9AC8E1A6A8CCB0
C007F4C50242E48324E9A31040AE138A86CA0F6820204B83A1EB775861645239
EC6EC6B59F4711C5C851B4AA746B4C7A1B45353771645C01C2E1A15A86DBADCB
9E85A6904AAFB352F840F8453B0B5FE4F66723E312B13B088A9324093379917D
C337D433376EDD4B4105F6E15946610E9F323CD7F2A9CD574B60FCDC337883CE
9C349207CF80241D991BBD44DEBFDAAF7F5C4D795A80819EE18DD301AAA69044
E56DCC291482EA4A2A2642A41277A2811D8B0F466E3BE65C71EF5C8A27FC5EBD
55C48F7E996A753C18E5B97C00E64A5E824210531E56CCF19A7AA030A4A937C2
65CC28A83EED8F3C971D6DF5A50A67724B92D103CCED885841ECE762E3C3BE03
C7C33CB54BF1E2FDDFCB905ED833E2A2EC5E9FDA641FBD4D0508C0EA1D5015EE
909DE8C5040FE630127AA49FFB7A3DE2FACC483ED42080A61FABF5BC55F64719
4FA910BECAB50B9351A0FE860FE1A87EB4C6188AF98414ADA57B34316D07DC57
0EDF6AB622BF61F60A71EA8AF73445F2B3D1AFC47AB85E70E7A91F23167A69BE
0292D4FBEB504050FD0E50AF70AAB831F5C579D1A790E0CF241F15E10AD8E505
9AADAB0E4C346EB4910831DA175E3CA1DDBD998867C8557C4FAA1A50456F5386
BDFD564C289FF6CE2EB50AF4A283B2092BF7990562BC3635993666B906721C68
2F30E2510D9504401853598171DB110C069B1F5585167EF6C2920C00E03C7CB7
DDACCB72A0FB506FCD5A51F4D95AA1618380D5DD66986E77AC8BDFCADE480C93
D61D6BF8490DA0C23DA20AA9D9393FE96CFDF138AA237435C07A36DFF50A39CA
35030D3FA93D9BA0711BD9C0CC25B86E6B4C0907C5366EC729729FA64B31BE48
5124D80DABC4D736411942BBA8CF08157F21D63C1626174AB4777F5CF0EAB449
8E850186C54C646AE8B5E4B09BD9A99AB2E4132A970E6112A662A9BD9F46268E
CD03EB4698A8F713AF8E1E794620125B9B7C3BA55A7B64FB9DB341259E200E6E
6DA17D2763E1E130164942DA5F704DE35D9839C3E7D9111F7FE8777746FC09EC
B0D9D8A6F6A1C0F6ED4CD5203C86D3D32879A5F548ECF75B9807C8A60296C420
6311E1096709BDB6D8C9510DBF277B31B8BF2B86706A8C602B294500CDDF5BAC
CB908074DD6E43A2BD427288EB3CC98D1895694C8445463E3AF6C54D5D4F4DEF
D959E669C4A18B68A46889B0D2DAC7CE9E40D84F17B6ACCD87432F33E336BA7A
1D1C0F5D1533474C1D92757D1EAEAA55B1DFF3CECB8F3ACFAE9D36CB7E06F9DE
A2FF2EA4BD68A04CF3F88D9725FCEA44A75FEA44CE4C991729C5792E1106D190
488CBDC82A51AE32A41F185B68FD07C22F29F239CB211F81404A39FDB273B64E
D685BB2F05E6532BBA20FA5D678008FAB0329BDB6AF0F2AE4E41457830F8D71D
37DD7500238B4EDC669BE3E7B3D64B9BC13B7748AFA7550EA5E22A42E1C757C9
8A897BFAA14A72CBFD23D3E0A8981BEFA1A50D5EAB46B681FD383F35D1033E40
0B739195D1014B39441A15A6003B39988E6D14A40F26EBE9EC67ED4214615425
9263EE8ABE3AE785499CDD7B144A9C0240926797C0FF3963633223EE144CF288
96B00F680CDE223E7620AD1E77F2C9F7045257D254633BBD90256F11B43D8560
1ED4EFFB48E83B9BABAFFDF4A50902BBA7969DC1FA04ABC51B7387109C1185AD
5648C12F490CD0575CA478784ACE8B90A7EE190F692D11BCF43C8E08DCD1802F
2EC862FB85A143D7B299223ED8525202C750485C14BB5FCA67D1E215EAAE959E
27A01DBA71BB60B4E8330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE132A107
746F3D79D070C1F2D0A021D02B02DB6D083256BCC310795827B89FAD2A00A0F8
89750779EE7AAC6F33EEE64514D41218CD20852B1A1B81EB3C314D217432E9C7
6E6BAB18773EEFDD49C8198FDE7A9D94BD943944C42B0DADBEF2B78E28956477
0D0A5EEBDD74D2D16404776CFD06CC2C60C822D0040F09AA256D9EAE86799774
6F9169D791FEC393045C294762580CF95CBB3570FCB0E6D4AF2E318F2058CF93
CA2D9FE4A26C85BDE8790096CA6ED817BEE4C52F01B4BD94A2105FC2D898DF59
8A86832C13FDE34C570D7BE76AEB67D1FCD480338D69A50E0414DC78AD16F485
FA15EAE62D1A74313C4E0BBEB419AA9B6CCE4ACC8208F22F9FBB6713BB8306E5
B5A275B22E7A1E745CB4426C0B58421A76F7F4C0C7733A6AE0601FDA02B22AF2
A316937A37662E5A9F62E131E8C617B9EAA6C9EB29885A11D100A90234BD59CC
FF4ACC2703CEC8F33A6A8B3EAFF894F96265F086BEFCB1F65AF4CE741D85AC54
B15223A6504CA4D488DA5E53356EAD6B0AA9F924EC2EA92E82C3BCAACAC78C04
8FF5AD8A475ED04DCCE94CB08A37B9FA7332AAF569948EC55BAD355BBD85D66D
6166FFBB636679016B1F58EF688D9D4A0B20D870EBD744A7C5FF16A19D01FD88
7AAFDF8E3D15A4C0AAEF7E69DA6CEBD01779B45E4C387ACA9492AEB601D13C01
F568CA8236BDEECC24E831883FC9107AD8C633ECBC2EC7B55F467F12BB61BD3C
208AAE457BE71903E55F76FA4EC3273507A4528B2444C07653783A51198028FF
2C46980F42821A0BC9D23A181F47D178DDBAF6E0971324F72468AA5AD6D13FFC
9D19BE132CF741AD7BCFFE1FFFFE8F5B34581BAC224F887E7EB6DC388216355E
B3A8B9340262A8C36587DE049C2249E7D5AE01AD98606C248E44B84DC951140B
2BC79D74105FAAFBF6AF7757D817AE1624A14774ADBEFC8F6D83FBAACF3E7748
43DC696631017979602FD84BD707388F91D104F883777AD1CEF090731BADE633
72C9CE2B148A2DB83C04304A1DCD537A9778DB191103CEF30D6A4394689FF65A
508C0C7C7AAAD6F2FB7131282532DD01FBC064B3D265BFB3ACE8AF23CA2BA555
B454D5B8653456D97B23E5061905D02A46205EC3BA815C37DDBC9AAC9602A59A
66B543E2721FD493DC71793E84BB529D1CF0565E922342B25FD8D98EE0567C93
6D03766AD21B45CB502E37F3B44D45A17324DE0B244D9ACBB806761A1B1FC81F
9DAFAC70764396554249FA79E5557A2D72161631D322161500E15A67D03B2F5F
6EA2ED95B19D92A122F7E3371B21DBE909FA19069BD6E994F0B14E423BE728AE
A69FF7096A26C332020C62E356A0158E033735771AF666CE848D5C620D583392
9CD19E78516CF0A404F527122016DA6946BBE19DDB7815379CD18FC6952721E0
E0E6A9002BAB552CA87B1904428B3A385765CCAFB33A26AD86D5EA5E26A71E04
2C2F7389874FB291469D8CC70C8D2708F83758C4A34FCE1947A2F33077E631A0
5A6CFBF6A3E54C3ACA097703239EDA638534150D272CDF999EC5EB5745285413
11A7D4FE08CA836AA3E382199E126A758447096D5B913D1BEFA7D862AABCC9AB
4A3CDC1746AA3EC6A8FB25545279ACB2E274A327710F6E01C3B3710F1566F7A5
54443560E08BA11FECB9689AE667845910BBCEB2A48CE370E42FA91811B818BF
23BDB449645174BBABA6E39B0EAE6489CD6C8FB15477E230E1FE2745E993C500
F14E9EC49D9280520B90DF574F85E2C962FF21D09AA2AED976813385389C8877
F57B32CC54ECB3985599A07415BD6B0B3C79E72BAB6A1091E76BF72CF354FC6C
EB056DA1AB50EA64479C2CC684C5EFA94B115F88C205287EF2089F80C86AF554
96A64A51A455A7020621A03D24600386A9D86A26BEF7B192DFA3848805B867EA
CC4A1C946CA90DA317563F8DE9ED3FDDA6ED9D99F4EC9825ACB28A2044B80ACD
7848FE8E8FE16EBADC6E27F03C500952BB41AE2444923B971B5436F7EE60A5CC
BBBA0E924628ECEA1C4BD215D26F3CCAF8992D221A17E2C395508903CB8C9A39
BC58DEDFA71DB62165F703DC4378489CC8555EEB55A2F1FBE5680A4013C9D23D
AE54771E1BB284C8478645CFCAE7A748EC76D7E0633C8085ECF572719278D351
0CB6F55A20AA58349D96B533794A29361FA9DF5D39B7C341AE49DE248C1EA647
2B994806D090D087CB983A3AA81C60CBBEA60BFE254D20CE2723B1829B218D5E
936B885912A19205BCA9813131581CC56CD391B4EDE291A7B3E389EF89ECB09A
33B3C252457DF5C8E5F2C2DDE392F11E4610298B90FC995E8C609612DB529305
68279DE9FED80AA4E1961F4468E0D2C62329A19C706E1E4E7E1709FF9F038134
45A940B9527F81C49CB5EDB5C762300F134BAB8F483A8ACD7168267C7B45B269
BA09BF6CFB2F12301D9F2B1059E3648871263C33A7644C7EA14DC7722B46416C
6D0D7EEC05E7E235EDD656B0333CC6C277134E2D1F0C379ACD11EACD776DDE10
64AD2313B09C6560D2F2E6F46B45FBB939FD0CB35EBFF081068E28411A7DE857
D0AC21C359008782462EB8CA2073C827BECED0729CA972F2AA837AC012EA535D
0F6796A9116CDFD551C26A614691D409CA58F7D99A2812BAA355BE4239B6EF72
6D92999A911ED616B91D7811F1A7EEB85F6243DC7DE085F5FD245FEBFE727B94
1541F7279662B54E347070B42A05B80A4A1D586075113C104D48D002AC32DF8A
8F96EF14513A8F00099F0EEB02839E0DE0D3F9FD87F6425D00773607BE4B048C
FD8E2FA866C606B07790840D73AB4C0EA09D1D303B82288940D67AEF4D53009A
507DF9160005AE9FB64005695A3893E543B1B0B2BF395083092E8EC2885AF5A7
24A13E68181BE7638EE95F7A40B5191E07956491AE0D19DC57B1381BF7E38C61
ED3E8057D3D3AB6A87CB02B9D718827CF41845BE0BF8017E4FAC41873429FAB0
EE053C2512F845D556E504A3BB0D5229B7E9289EB15056D8CA93FFEB20EAE88B
BF1A915B1D12158DF78D313A8D481F793A9969C4853B580B8881161594D5CEEB
06FD8145ED7CD7FD0B0CE36542DFEB15321A58B26D75BD09E7109228D1225FF9
37370B577168AEFBD666E61F40E88EFB0BB32B27F62C7341D5B2DE39F362D7B4
9262716E576D714AE6C500CBF5AF590E70F355FA4A0D955678270A3139BC3767
857E82BCBD9EBFEC6879CB32FD3AB10826AA7F8D15F50A736C454B0619A39453
BC889A6C2D9168BAED4A24161073718B854A1AD40E70670ACEE095787C7D9D3A
1F6F8A6D0DCA0D860D0E0D82C0CBE445C9127E260C52996BB6729C5E61C2DF2A
C4361A0B967AEC83CCA6C6FDD1853F0C8EE9827BE3A0BF53DBC1301A24A15FD8
1585B3BC12F2132F23E65AFC6D052F79B8FC8F4CED09477F7EDBA453D8265965
B84F048A53972F01B6C21D2D343C65BA4D7EF3E6397BC3FA8E921876BD6B28DC
0361A65282301E94037552448EFA03F8E126F5E31DCDBC0A232123CDF1F6FFB8
50D7EC26F576D40943715A6952C8AAAEAD10D3FB3E4FC6E2A11C70DE2AB5229D
B16A8B2C4150FB6630CBFAF0BBB88AE284A8A75A7897DBB3B1D6C6E0033DFFDC
75BD8D36F3DE102A5862028ADFFD27860846A4400D74C83A4C6F6537B059148B
2BB2DF202F868CFCC802951323C12DB37C2D17DFF6C5E588FCB6347F96D546DD
5645302D34256EEFE521828F835ABE7434F4737B7428B6DAC90965ED8DF4760D
4EC9E2972D3847BAAA59D98B3715A411D218B8E1AE80285FAA7D87F7CD12B5C6
89DBE39DCCB1799DBE56D72AA54E492E1A7B66AEDE8706C4A7D70764AE6E78BC
4E97908F896ABE3C862641C55652E18C45640DFC73322D1ACC4533CDB1F14BE0
091B9C52065ED9868B66A97AE814EE385EF1EB8980D3AB2C88D604E134912507
FDEBC41D0B3D5D96516AD21933CDD35E57F5FD9A5300C5E2145B81A0DCAAFF8A
169DC6ECDB5EB83563E334EA6ED55456B8B93A7A5B98855AD86ACDE49FE8657B
FC6008F2EDFC9DD49DACB6EB3600CD1886F96526896A0D6A252487F3C4CBC13A
EEC625851E6926D18933B1217E1C733B72AA380D82D47326D14E817F47C32D57
E349891AE5F5667E4CED9EF52A24858A522B9E47D415538161FFB636B937EF25
2E85C638154436FFEA04001DE61DD9FAF490734DC0750B81E9D71CD2165067FB
E4CE5FA18C826C0630E51E6FB0A3F69D55E28F1C35B052F7309741A779E20416
BA2C48806B4F49AEA43ECE255950E9E6BF0D1AAB8077E2F61ABF0670A743A1AB
B59A0D020BC59FB56C8273C0861D3C1BA0F0E5220558F85E1537F43828B6A47A
CBDC408DEDBD33B40B89493DECFC795EE82FEC8FEAD0D353F95FB21C2E80F955
29AB4EF4E90DFE749485377D92A2E1844C94539B6F1A472BBB0215FA60BCD874
88C12A2FE99549C4D14CC0FEB4CF0B3A0B11DC13A1ACB708BC106772DEB8A309
C81EAF9849667DC4584758C91D115BA2C90D27B285A58DDE9A1E611CAF388DF4
DC4A99B64CD309E167F715D89ECFE31E10C81449256F1860291E2293F8B1F34C
2A39F1823F85C72A12C711904FBD60C4EE2E4469513DF5D461C2C0AEA8CD5776
A7CAA8BC1C5FEE76FD130BC8A8A29BA01F505FDA7920F3CB1D275D20E9B1463C
2D99B306463CC434B66AC08B52450620E9AF4EE88CE23E3FB8FA362A589BEB5F
6E0721866409EE7ADF63AE6FB68FA92110FC88E003A5277982B355EF3230AABC
269C07E1D7463304B2F702E6938875ADC1FC3A4EFD8A1E1EFE4B6EDFFC6E4583
2B9B53700181074E5D0D9A5D23909D5AA5777AFAEEC8F6EEB2036463C0E66FB5
B27E9D2EC32A2563E910A35802ACB8704854AEECF985EEFA2AF734FCE8D1778A
5DFAE6FEDBB2CED1E1B9C9A0ED112429EE382ED46B809CD93DAE1E96DC036A57
39C7DE58B5A03171D5636F1ACC2A154FE636FD01BD14C54B31B9A38D38837A00
24707C40805E8883524DB603850AF9512EF0B927E23A876DE97539DC16B14731
BE9FA39CBD96AE7D48F2336D01ADA8A2F8A443BF4C7A01C00E5948B90883DBEB
D57951C31BF033215349F50C1F629ECBB5CC5BFCE1559BD6D7A413092973BE65
140E015F6BB12D775C4B8DD19EE15B33E67425D2AE291D57D9D8A82255894792
6D28ABED02018B5E94196C02461D3B6A0062F4EDD525158682DC0961E41992C3
DD5416AFD729F4C5349F1158B4415FD127BEBFF64439F09F43A70AA8742C3355
6694B30303681803AB906A99908F9BAB5A2E64F0AED7F4FCD9650884F320F13E
B20CE24B279DF3C399FD5B497F4632B1E182A6E3125EEBA25800CB3A3860FCF0
6E1E22F050934074903293F7FA25305AFF380A09393B6894A31AD05F6D414867
C46E1D87C3C9D47C0453E4E32BACC525C63085DD9AB1E4FFC61BD93FDF28178C
2DD108844F44A99CC78878788279DD265AFE55D2FE3103F20D657E86E4949999
41F87798E3C30D2D0C944EB63369E61AFD2EA4F966E6AD1E03980EEAFCB112B8
E5E484BF9276194F292F52ED78219595FF0EBBA12D9F526BCE3F6AD83ADD0BAA
D77287DA34A83EF4F9DA82D4DBD4F072C51CEA612F1F3EB51964D7C48673C115
A9086F14AAAB8ACDCBCAC7B6B225B4B78D16FDE1487F472EAAAADD10614AF660
6253AB02EDE352750F3B394C59B57E35FE43EE35F466E2B5C1491740E5DB0F43
18BAAA725C64EAC7FEE09C6B19F62F7E83F529B1EA4FD2B8F631D225458C660A
BBC6E67CC3D18A58EB9C8ABB1D3F3B0E0C12E6B84D74F026E63A78C155699646
0A7741A18C8E66FDE710A442C83B1ABAE31154172720E722AFAFA80845706AB3
CA98B00CF3D946F77C597001F3B1E3D6639C3759D3C866FD55928897AE51BDA4
5050F269E568C57A1E28F7A693ECBC531648151F67CC971EE4D4DA5CE4078F9E
B3825281FC950C9A5CACCBE3D5011D2DD1223A7DC055AE23652D551B9B5DAEDF
E4F9132BEAC1EB396048F1CEFBAD81F32793FDD449A7BDE3BB360FD2AD7F08D9
67DEB17D8767587004060D984FEEC2C7DE55A158C5C110975EA96CEA58EE0A0C
E86A24C52DA1925EF71F321583B42DE5E0F967A490986FB25F736C0F881651D5
7E24B9AD60E9F525295BE51EF1A8465AC671095AF8E4B46627287956D1442C1A
1DB3F3E6C46BE191C9229D5D6BAD8966E2BD0A067F95F6A2323B6D38EC812E6A
DB66047FC736E410AC67295BBC1A9A208454D65D51E18F9FF19EBA9D243E7336
A389DDAB3C1AE4C40EDD6DBD115CB6766A9D508D3954DA0FA82F2C906B46589A
32D76839894D94F71E56D19A5F712F6054EF3EECF122AE62590D44B54CACD010
44C7F8E92600D0BA1691E376E4912DF1A34F35C22EAAF65D7A66FF0FCB5F1C45
3DA6A749192A0F1DE6EEC1F05D18002E540A7B680D958694247F628DECB37285
5DFE22E4F1E183AFF074A711DD0677AA79614668598196291E07277D77FCDF7E
4E94A214A4E6A32108A9F02C6C6C9F8FC97417B14342B3F07A2B441B5C20722E
B77D01CEA50E0DDA255B155D3063CC22DDF93950E4D0152B8DB9C7CE5414E5FE
70B253EB597DAC7BB931F562E455847FEF4A7C2944D35418E9E94CBBC98679A6
018A426A60A195E93ACDBF1B95F8DAF457AAEB1220A813FA579A83A1E89ADBAE
B42D46EB6313327205526DE3F27179CFED8602FC6F1651BE97ED3066CAFC0C45
CDB669399557C1CF481BC0953CC2C10B0F01260DBE5DBBB5A9D9F9FFDED9416D
F4045EB597EDE8827DBD387DE2058BF1053872992D01DDC44956DB7B1F375693
42DEE478988520903943205F6C7A1F1D0C487A15FA9FE6689F8D1C72DC75E619
7EDC8C718C0B96630B1ABE70376496214EC0A36069C7E93155AB9E825DE8B68B
E11B9B1E465F6E8E6C9480964DCE6C7564305A68A8FD791EF37E3BD1D80639D8
B0D27C4443221CAC7145A9B58918061E91BB33BC230943516F85D57C1BB517AE
88E77F14353847991F494633BE134D95F15426F0FF8E1C09618CBA0F42D0CBEE
87AE6DFFED5FD6222DB2E3E6BEEB314A78B1358B7F89B9A683BEC46252D4A6A6
306B05FAEDF76FDBD2831766431F576D08B40EADC1AD2BD1C98E1984E8EE23DF
34AA7F2009C68F1D1C89F8B9E1AC1D1496753AE10B6A28FC20D8C0D5EA8039EF
24D5D50CF2DEB4C1D576ADE616F144C05F00E54EA06CFD6EE81B919EAACAEB6D
9CF1D04593919FE85B31F3B685F399F797A4303663559275C9C378C9E639C8FA
A21B53B61F292DE88DB85FB3B82B10928F5C03BC386DCE6667656015780F6EEB
AE42C25A7696FF1884AE0F1C4C78CBC645D50A963B1FD07C639EB263743FEC09
5FA6852AF7CB1A8A1B3CB1B9A586699DD4856564CEB0513E30900BE293FDB751
7F02F4F215061829B0B910F91BA73C950447BA6C50E5267EDCD5136921BB91DC
0C7F9159228DE63E38964B0192A0FF3CEB5A4612A844EEF3CF6CF84697FE434B
3FB40FDED4ECDB655A888B34418936F3D6674AA76F40142FDFD34841FCB3F5AB
C1D16CC1CE79B5D8B10B4E46FD2162536CDC73091FAEDDE6ABEBBA650C441D64
86A4C5AF62F7FDA48A9003197EEC6BFB8CF58449656988FB6984D20C14AD349B
B3D90876614B512408F9009DD47621E9254286DA95702B18F9561E213BEF3BB0
8627437B2E9750F0C23C59512C5F4818531525398CD3D2D1FE2E09D8DB327A2E
0FA6D0C2BA77416D3AB486AA63E1BF7B9A7F8AB144C6371DCB7C8DA45DD0F670
DB759444E57AE737DAC8EABC5FEB1D8D1D35B78D3C82FA101F000BD7FCE47EF8
A34A47BBAD96DA5C771D8F8D06EDB4F7509DD18C5ED201CC4070B7A4480A0E15
6A0E9BA31F748DE9B66D3719F5DA6107FCA9A7E5258ABB652C577A4232220155
6073A691D0448A71465EA425499D62D07857A03DDF0BBEAA28E8994826DCD534
B8B5F75FDEAEF74D114B91561516446F9538C0E80FBDA29AE7BF77A726E29921
3CB5629892AD7AAFC99AE3D4143461A0577F63BCF0FCF95A7F655E9B1093D26A
1C8DD5AFF501AC9E3783DF2DF2A24683F2370B1ABF18C773B66C8E96FD6D0962
06D1A076BF3124B31FD28C94B914946CA3CBD1CADAA1C28D1C93F72BD152843B
5D28A8B18CFDD94682045C6F4D6B947E0524B7381A3A5BF22578A5B1687DE97E
3E05FBD40708F6E4BDDDF81ED63AAA26CDE5FD0EC25B9B7A376B2A24121A1CF8
B8D690DC286F6EED87015A055DFDD95FED37E08343F99CA7D1793A2F5FDA8910
8EBC07C8A60299185E240A92F0AF3D687A2CEC2C46709F3DF1EB16602B676EEA
417C8775E92317EED7C979238FE2294FCBB3EE55D29A5A75418A878138A8B79C
AC16C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5E3E00BD661
6EA0A416902D3AB5EC977DFB9A5ECCECE360FCD3B1A04F16826F1B2685EF82E0
928B3862C03581AE7F5CFB6E28E1D1C86D9C66ED01B855342AE4DB0F802C1129
6A0BBDC33436A35995B50C42EAD39029814C8BCE19DE1D6EAFE04776A6E23862
E9212C1F00409F1184AE358D6F5C5432DBA9D9E35C0C8D10D99B443B1CB9294F
D84C265B934A0857ADE490147C5AB8EBC973CD8D3946E50D5357E57CD8F73589
E001EFE2B853747CA6CF900D3224297F610CA3F3B2629EE272DF9530A35FC614
5232C379D553953F21303DA3CD71A95070A9FE43ADCAD26A4C067109780A8488
50FB9B3B0285C7FADB28A3711C06273B79FBD3438B9C18E6F4E851C2F2033AFE
6DA413A1873C063202DEF40DE082B544B4AF7127EA6D5B8FF5A07351987E5325
EA8D2985AF7B9F14EA2C7C51096681B7712C92271F818BFDFC8AF8099CBCDDCD
FFE15EE19FBB79108A5969895654C00A5F30A5F801DB4597333718373A3B8F96
8B1440C691B1FA7176E0CE92270D872A5B65E2A540432B97CD7F69F767A67AF3
BAE02C93A4D69F7A08162ED8FB6C594E1B6C10BEF2DC54827C9A368306780B31
793DC3588A170E5A20B20B7C7E7B74D57A23326CD8E2332276F32283CF0F7169
EE52BD767834B73D8592C922B8284C6C64525B4CB3EBAD79CF5CD41A9E52E33F
D14670C66F070D8CF7E7607B46F62671C7313D8B9CB50AE03AEE952DBF1AFC9D
DFC0085EEAEF9D3EE785E863E59BFA94A109026D51F307D91E6B6F27C39FEB34
D964638590E25AA60E8F85B838B54DA955E93C086058929DFF243AC5D1CFAD9D
4F6AF98B958755373B31D9075B4D37B7845D09239536885042D248CFCF793C00
46E35392177AB664F4C54CEF25313CD7BF2F4750ED01F4B4644642037EA3BF11
CA27B0493E7015852E7EEB380DF5047B980880EF29384A5AAB483A5B9E87B17D
39B03D2D140E9FFD9A209A618687FE1AA258B1DB611AB03FB142AF606A02FE2D
7F65FC9B12C8E0531F33227904D8D75ADD57BA0C39ED94DCCA571CD82C6E0BBE
3DE51344D9858159DDF19EC5D9BD286173EF785037A4B6194E126C2D4029B943
D7E93FD4820BB64383828603A743E6A247B213A287F8D31AC4AC1788A4E78E36
5F57B64282A21BBF80EC93F7FCFE82F4DADC600746F71F34AE560664A99038D6
9D48D76476BF5010E5E251A424ED1DBA9FD950A59116A399EDAF32BB5631E179
7597F9DC20C8D6E6B127A3809FF2D5693C2E7A4517FE0C8CD4719C81BC5432D4
5BD5453B13AB738A6562647129B529E218150497C5EE8731DAAFBB2445723D58
97B8A68D8348723DAF4A7688F8FA1276B030E8711E2448B72CD876F5D5A2FDA8
A6B734CC5C8B3EE785597C70106A35F92D8DA29782A1875C6C8E74B0C86C0D3E
BDC56B10452C321698CA1B72AFE725CAAE98F627C7CA550C3474DA68CD751A72
05A62ABBFC4747757AAF16ED795A328AFD5D4AC5CA65062E70F4703BFD1EDB25
889665258B1F0DEE651E8832B68598FE1A396EC7237DCEB653A5169889D0DD08
D5DE58AF6B1179B269F92432BCD7CD512C3A56197483E2AF97C83D3FB66F981F
F9642CBE065FC6CBFFCAE540630679F6544152B087D6AB8309F01AB97EC059AB
78D65D4DA48D36959C47B0218392F24C93D7F9FC8D64D8A2A8C346EB436961C2
AF7784A47BB023B3ECFFF53DFC3E68160AE0D42A628E9CEC9E0B59788EB9B9FC
143A796B8CB995B03EE89D82185B3B4E77769007C7BDD5D857CBBC9A49408580
D7A5BFC889CDA4EA23EDE3C17E19F74D596AF4348A6DB3E10FEFFD5C307A7C87
32E9AA44ECB7649E3347035449BCD936328FEDB5C06C1CAEB8B735C214614FC1
82A80EC7377F7EBD25E0D42D6CB3F0B9E70D33C9A5AF8605160D259331FD5F38
793B4930B2DFDB4E6C7F70B76CB486438D247D05595E79997CFDEBAC31E26DAB
725237AAF4879364055D942419C67A9EB8EB3D1F5B0524B381B623616470A4EF
477BE13FA0D8C8B03C7E9561C08C78B82824775C8CA090E60C409D96FCFA4637
EE0055EB8288CCBF791038203E4AFB32361ACAB13BACD3E465D094B64D4A4CE7
F52144B2D4AA133851EC30082831A288160FDA2A53AD5E8DEEA70B9D144D3E1E
E72343AD613C09135BA5F8F57AEA3AE6C833943F4A88DE2D7515B5B3967CEA26
ACFEF57ACC243EC74C5DAC762566AC9955A2BA5B1957B2AC35ABF77E1625C50C
8D4D86AE19E69DA26AAE7F316592E7DE134F775A835D46A69D1C4820D4835821
CB15EFD2829E58B3F2115557F9DAB68BDD5D6909EE7D51FE5378A0BFF5A15ED9
D04A7D6DE3B35161262BC8B0012694C3EF26452F9B772CD7C7A420D60AFDEA20
9F39609EBA0BD1FE89234DBA4AD8E2676736EE24E135047D1D412E289BBF35B8
0F92DD03564F2C662A9898569E109DAB60B870AD2E7DAC2D91700290DF568B81
8F514EA832662C580500C0575C9451B788E528F0B8FD58B23F21FF9FA508C699
D4590C50A57260CAE36E35E6CDF1C75CFB93CF0F6B4392F22E77077108CAA90B
D20054D9B07C0474EDA9C21EBABCDFBE0D5852C4AB7901F50093D77E83CDF905
D1B866D26F5671725C1EC2AABB2746280FDDDFC1EE81028E13027F26BABF3AE3
8AFB98A4A2A46FAEF9273CC1C02223B545B466DAE292D4D17EE6D7BE7A1311BA
3AD03B0A0B872E5EA8412EB3D9C9BF12FD6EAD401F43601BCC7F39E89FD7D5E9
E67FDFBE08A8D70AEE51EB0ABD6ECCFA3EF49CE8BBF6EC7DAA0DADA3095C755E
45A2A9573F0ADFF57607D1EE51B084AE9319C95757ED0A08DC6C5E1A644D9C19
E8294721AF852399414A0B6247739DBFD8DB8B19E152524A12F8C4B27C5C38B0
E85CA476C09617B1CEE6A2B48CDEB0450B99E5E0072F271280ABB91D54CC8196
80322EAB72E1250A76052866FE65ABCDAA308258FCDDD13DCBB18E462B56F956
BD863F189B3E4F336841E8CEE0825DBF87AEDA7FD1194B2E9107BF28D8FA0786
B28FAFD19C449E201F291156308F2DA28C1651543DFEF356678A01249736ACEB
129EAA614F701BB7EA01E8978F788BCA69D42290F62CFBFF58D44E2590664FBD
DC6FE2646B6845D9D4835F7F3593FE97E596363AB8F026A562E25D24081C0B5B
747F93C1827FB8D07AFBC9394BA9313FE3EC851B9D085A7DE138399862046476
ADED15087DA8D19A2C3B7260FB6208DF16A738E3585CFBDF46AC09FA17B14F61
D5378232BAEB5D8361363AEE238D66A94BAD615F1FD662DAE00DB617B126EF5B
2BFEDF4CEFCB3FAB423EE2021A2D8761AF7A0F302A83B960B624C72D86913A32
21AE9CE1E7A234E7B458542C45F05748B1A1A133EC7DFFCC255E05EB634DC6F9
D23E1EEFE8ABB3D2BCA23E38220307855AF6BBD84C39D2445A148D99CF927CFF
C29347169DD7181880277CB66884B64E50549BF800D55543FB93BA5928AD3879
ACA54C6A4EA4A96C696D220BBBF185B88846C6C253E91AB2F9F226770D6220F6
063DD3A4400C4F7C4C1120F3064297CA2C0EB02E8BDD6BBA9BAFE2B424344CFF
3B04FA6D3578EE5CD2A4644EC087D61BD7F5F5E0AC0AFEEC8813DB5D61979894
557929B520846932D3A26B7E8BAA8EDB46BAC6C7FF326B7000CA970B45792B01
AA2DA24F585E717C6FB15CFB3C815F4EF44DD5BAF85A8C46162D1D7A306DA770
682114E8629D27C2D02EA91900F6E7B049B1C432F36CDEB42D646CFEDAA09CC2
51C84A48B5AB27BBC9E57AFB1E658E419759560A51607E66B968F8E8FCD31C57
E5951B7CF21F7DD3136F99DFDF0A598942FA060B0610AF7C86DB5424750CEA57
9D039411C1E91001090A4A7DDAFD3D75F725FF498C30ADAE8FB6E33CA153EB71
1DC5317BE622317120AE39713EEC28B51D1A2970F7C8A6467170CB00A352AE3D
E5D771C66E86F97387D4AE97D6ED2F391DC1EA42375BB856547B82DC006747FE
5D96855511F8497FCBB7C1220C5FE36799601CE72DF8F2762BB91962F2CF41C0
75C4DF19A0F0AD8A46F5BCC2BA12C4D182FEC37141AA375205EFA30478065371
7F1B35DBBA46A84D64F6311B3C8D1E4067612535441EC025CBC15E21B63F4B05
2DE83EA231940B0E8A371C290CAB5A02047ACC9760C91E86284AA685C37DF7B9
FDD312B5CBFC4A919649AEAE9278DED6958DC3FDB4A810F2DBDCC8F5B9E6E9DF
CA889F03CD4763A99A22E04AB5A2690C4319C7570BB9D80AE754261B7BF3F773
3C6E3988307BA01418F578D9AC9A6782205426BA7B5E2246AA9E837F39F113D9
35DB9E74C2E94E8F914E2ADCB4A04DDF34CB499EC864B2332429C9661A9AB11E
7ED874D3948549355B2C66E26CA8608765C46EB392B26FBC6CBB27085F3E9FAA
ED13D06E7AC97A386E33F7F5E5E0F97FC9B58B6A605314F854A16AC3011DA8D2
758388C1B8088785EDD9C1DA4F9E9A3C57F31A1B74983085F6E298C4F428617B
ADEE752997B94093316F759CF4284ED126A95DBB4FA2D09EF80D1F2C507DF980
D3D8374B2E91552AABDA55CE5511542F816C40D939A89C352150C62369484B10
11EA7C2B87226EE6A4C6526AE5DA409166C84CF5342B479A465137BD820832EE
94D79A8D0012EBBED95BB3851BC1CF1B702A0D7427D4CC503EE02EA8AF374A81
764C798409B2B6A8906A643CC18D86E7213C0FB2CBF3D51FBDBAC9706CA8B4D3
FD1F68A5290E441BC2DA8F5E3A027390810C044FB4980C9A4340489FE77024DC
C582B1430A73587F1FD58F0E75AE419A2BFFED0749F36BDBDFC5AAAE4AA18B10
6C43E65C93925D9AD9DE402C1877C3D4245559383AA105B03EEDBD2E68FA624E
E003F902FEBC471AD6C6DB3CD6BEBFBA593CE34982287C39A5099AF1EAB36522
98663A5761A6ABEC5BBDFDD7646ACC2984A8A0BCA5058EE84D1258EFC60C681D
53BDFCD4A1FEF82C14CB57CEB27382EDC9D92DFA4E4A780D4E8C2E7C08210E5C
A3853F09523028105984C4435D8DE1064D3D38BCFD0A94DA868981A99E2441CC
BF790C5FF425189D7A118CF52B78C79AD664A57F7239E2DB6077A009A078C7EC
B146F7D048955B1E118978539DC9FA48D9DA309EC266D02004403382F61847A3
CF2C52C5CE19DB05CF529A5DB0DFA4F1AE311FF2EE131501CAFFB2F624E4904F
97DFF64007B9D1CB2029F2EB9E476BB84F3329A245521FF9BA03A269A0A87029
002555A582F558D0EDD67F350C9C4105F867E2AA3F10C3D70451AA63555F598E
184CE235D436D37D31BCED986A271515B8EE98918AEFBCEC22D36B8EA3252024
93FED90E9AE1BF1ED5D23AF5EE50405693B495A202036ED0A0BD2CE5690BF4E9
25AB2CBF5FC0FFB63CC567A69429EA3D1EB13216E74C658AB5C555F50B3A93FF
5A9AA5FE1F40E902654A5104DA36595630B818CF24DCF8958A0218ABC12DD547
B3914B126BCFF1310CB34A64391848B2F91E669D10F1A040AB36BCC8BE8F2E42
F6B821E75DADFFFC89DF965CD18FABECF6253EFE1E6EDCE9C0A6577A87ADD181
B7E717F3ED85E49FBF0428125639D0F9FE44C80AC89AFC593F00644D679B9F17
FFED44F44192525D19A81DD225EBE4946011655C21E22D5420119C91515AC8ED
F7D1EC08F41999337A57A673024DB8853E0DD4E1EB97521562F1C351596257BE
6C7E12033F41BF6EDC2A3403E798B8941D9DD88FCC4E42496EDB05374C2AADAA
24486F9A831BA1179B2EA3602D00448D398ABC61902608619D9DB9BDE5755BC0
041577D104E40DA2C7842FCAED2E37773813AEC6F95B1351603BB3F6F3383B80
D637D761A7A992CF58188FB0A04FD6CD7CCBD1C137BF68BAE02943FAEF0D36E3
CF03D2E7C6B34EA2CA4021C282B09B20BA9B4009B3DD6A5FE918CF3B8E4A8360
44E309C58AF1F3FFF3B351EABB8331CA5AC5811B9027FB4B449A39B1ACC05BA4
66540F38E107A2E5E01076149E59A402E89436B180E0AA2FD9ECA512F9C5EFA0
0CC3337A8FC5B541D8F2FA4654D530256D5C3198D90814F5DB640CFDD8221C04
34208142C0B9108FBB03D08B6063159C32943F0F6E73D8A0F7EF263E1949E4D6
47B9CE4FA973134372970A35FBF96123FBADF96FB82B2636CE6A7D12A16E34AD
90D4332D31C2662EA19C66370096B2536E30A5E1758B293E6B721A13DCA21512
CD24EAC2E0FF72A920A5FEFD64E894D64D1FE6765657E473384D110F0CA756B0
8A0309EBB5E3A24A887082172A11E21FE2027EDC6E5AC069CA19048F4C440B5B
AC980CFF66BE9DA2BD1B660010CC689DD89D4D62B260CB91C49ED918419931FD
A3ECF14AC8A78B0C4A2D65D5505880FA2D2455CA29C343C19C499CF281E5FE4C
18CA96E889C36DAF2D9A65E1FCF4A6659557949A5EF4DB1C8F9E3C8D8B59B5DF
3D3E3CFC313D966C3BA93EBEEC332D0D2486A441BFF7B95FF8DB7354BD70CC6E
69FC7987E3727E1C47059F4FEF3A983B84C7B062C8B8305C72B31AB0E0721BF6
B14C2F3295817E73A24020E4EC149972C29C0B7A875CE9AC11C85D90DF254B1A
20124E93CA512F527FEC90A0764E9027D61CE5938B121FD76B329FABA0182637
7C35067A7C6785ECE0C669C03860D0130ABAFB058534BF9B357739886C97C345
9D8EC0EEE00F1271CD61BBAE0B6A6CF275EF7628F546E9B7F805E3315C928543
6E5868E756EFA26237F1F33881825DE187C16328AEFE032A82125BFC780B67E7
6CC1454770E00BE029042A6C6A5258CA8ED3E730F889E0E6A6BF8226CD32BCFD
8326248FB04666282E574E03D11C268D94698C65A82A1D003242430EB6FF1DBE
8C3D96F2BAFCE65DC8BDD5F0AAB6C7A4A26946E9BD79B50A9825D71AED8DD51E
3297DF93CBA6EEDDC1BEBC9536C17D7F7254FC0C1D63D6327DD36287EC022666
3360C910CBA51D8EFE816F5476BE47AD79B88BD1B66C5C3736A07B54B45D9476
D7B191DF57AE3A4492672A3B30BB7DFC8DF26DA8FC797AE7062BBA9FAE457A25
E67407D800B810916A7AE7813FDCE776AC8AF5D3A9DE88C7D61C01B842371D58
6BA2D5D79382F68E3993AD0B93A7C03D1020B9FE9F780E35D60B46BB86D33CD6
6D069CB847A315262F8F4F114E3CDC597BAE4D4700A54726D906264C82E8AED7
E4AC8444892F18AE4EAE035C8E95661CBEBF373488BA0ECC2269F22425A26341
AA5AC2DCE2E64092DCD8A43E34700E655453B3A955FFBE9EBF4BDAC587E59837
487288B55B88FFAE7DEB6D0BEE5087694CA9A46CDBD8A513A8E3C9FB1392592A
D968CB3E74C7CE0C692A00E53F59B1F52A498798D13F2F465616F7949B5DF28E
DD3FBA26D6EF2D9300722338605C1F9131277EFC800D5737FEF579DD922BEEA3
EE02D5836DD04F03C7AFCE7E1BDC7457501B41DC0A8A6721F1A2E86CD1994F41
60582A6C5097EC50C1BF4965079538C1F9087E6FC665136B7ABFFE8DBF118279
1E9B9877E7AB494E1AA44C47A3C883DEFDE65E02A9BAF5CC1F697487C3F64E52
F280D21ACEAE6F4E4B0F75DBD4A3034BAFB367CE721AA7121C80D154E0955DF1
19351BC660DF6EBC642EDEA4A13F646345C5A43825AB1F68CD90E0EF638B2109
31772B298BD43EDDF7277EE2929A8F62796AA4E86A0917C4EEF9B96EC85F7F61
CC55FC0F7B18013CF71A53C9B51115B533559B56FB9D2DC3F59EE1018EA7C3F0
81F5A258A6C41B6250DD77B44844920B47DFAA0539291B9B8004F29F21B2A9D8
EA7F0DAD24976F6CB2835B77B564586905D558A3CFAB0F1F34265EBF666A9447
0FC8ABFD342B6906A5399825EC884CFCACF48CDDB2FB1F77DF9779C16B2A621D
818752BE3E0596B3D441B30F0D5C736A02317C8E07C2A4258E17D658258013D5
18A5849CB4888A353080A6446C0D86A6F09F1D5CFAB01B4C39C37DE56BA2662E
21344E73C74148C1EFC87935A8D8A8E583D3B87C35933A35DF08B512C2ADE4DB
E57D3841B9FD401A469962DF6BE268D3CEC78F0CD869CDE7898553FFCF7C0D78
62FBBAA3043BD6D5775CC79CB92496A39EA1E3B673DC2BF79331E978B15B5319
DFA668C1D51ACF5AADB51C830D3375A6841B9EEC3438A07CA4E9B1E80979B748
7BA2CB786018E20A5E0355AA32222F9EC67D91F7299AAC56823CD4BE926D0EE4
E8CD015C29E716CA34CE544502ABC9526DF48B0762B57F8AAC85B60E73DFC16F
8386E6F6D836836DFB68ED5DFBBCCA844014E9BF0DD2185ECC3E598C88C8D611
168403F65916F3B592DF5019EAF0494ABAC8B0D0FF9FF6BEB14699F2B4C7043F
7506DB4D41EC266CAB04302739D7609FAFD8DAA2ACAA5B048E484C6E37B73BCD
2097A2385344CE80EE7389CAF1DABBA1BF5784293E7380AF786BF3954F5B5C6C
BEBDBD569AA58665682B10F810536A999BDAB4683EA838449C729ED9CE31E8B1
362BA3A2DDF29C622FA55D54800823824AF62DF3469EF0B85800ADD0A308C5B8
3AEB4164DB120EA260E59015FD53827C84050FACE29DC5A593B40E732D3C162A
9163D796AD65EEE0ECC9ECDC61FB079040BB113260605E766A1BB33298840D0D
678CEB623240957A1B58ED7AD9A9522AB5851F8574AD1CFF3581FBBC1DFC0471
F892F64E6DFA4B45B6E42E316220EFE099455232455A763398971925C9DA4B0B
2A389C938431ACFAC8EF87F8BE10EA3274970D0D828005E45C4BB02388263213
846A61C260DEBECC1EF70DD55434CC9289EB54292D44D3A7CCBDBC747B40045F
68CD1E40099B39A5AD2AEBDC1BA589FDA02FAF592594C24061197C10CFBDE16B
5CEB1A5EE1716186D33A8F414FC06E57BCEA8B7C35656B5D80A209D844242A20
E04D153A1E154433B69D00747415A1CE767F96EB6EBE6688309F6D9793FFFF35
D0C4166E42246934DD00C08EF218B03254F35619A59D42D0FAF6CDE696534896
406A8A5234A8AC19BFD6E5868CCB64BE12367732A1DC87E9352A8CA1EDC755E0
EAA0D6F3EF87869378858BA7E6E918D5E46449525A4A5BD3E1E4C1597DA77B79
DBD87A4C7E777E76F039C4EAEEFA6017B703F3F57C153783880CFA8F10AF0867
C9AC52436FB12A196D5920D78A27E9586755EB41D606A11079AE8279C14C46A1
ACCBBC65B129EAF7528F8332383568F2E35C017C5A11590CF98B21FDB892905C
3FD4C715E5AB1B0AB52A559569A0122AD6DD7CCE9374D76DA1237A4FBCC9FF18
05B567E1972072997B44078FB848FC05312B9E3CFAD4FC3B56C5E375216712C0
5FEC43047BB3E45F75ED39C3663BE62BAE720812FD302AEB076031841EA02C86
7C6435A5C5EB6A15CDE8D599A97E0DEDE478C1D8862421B30317AE86A3AF6399
4EAF506CE9F0B8CD4CF8552EC4AD3377675F361966D3B408BCDEA06807127625
D2616C2571B6413523BE590AF5861B23069B20C9F30363291678A7D920F12885
5CDD17E51BDC4DE0B17CB6C82D7263DE921E4F22630D3B3B95B790F60E314B0E
303F96F1A7DA6410CC5D3F84EC5C9F615653B5061692AFE293731EE7455CCC4E
D0ABEF6C73B6DAD0ED398880D5E2B1D9C87CDF16AE86047B3D6CB83D9A7BE409
F29606D7692BFC294417B1766257EC2C4BB1C2FE86E76EBDEEACBE2D711F4EB2
4E6647BE39F450F9473501BA08876048521F937A458A63396A578F0213154793
68EDF9185FA9D6EFD6B7F8165A6437F7600D061DA9CD43019C40FFAF612CB8A2
CACE0B6688CDBD0567637ED1F3BF6F0D74C8BA15DB4002E1941504FE6D3AA62C
4F58B43EA3AF14DD0F6D8741C2E06E6011FC30FDC6532FC8235E15ADC71206D2
84543B6B22F3D56B15719B27BFBAF406D5BFB0418A0E4E57B13B956E26191B12
F8E56F07CBD04EE2BBA631A61C5CC3289354D143CD1A9EDCD1749B98DC6A984C
0E944711C77542A66680C9339C7F2D58534CC7BDDCF92439A3AEFCF1D503F67E
5C1F345C050F20B1EB989213D8E0FC90B21922BC40DE6DCCC4380AFE17D2A912
E47FC61D09F44A31F7D88B072B10C44A60DDC2D132EA808C4DD41C0FEA3951EB
2C8D17C29BA94687A4A82219DB34347F11DCA2502F3C813D6EFACA3A66EB1056
199493FA6993CE202A5DBF62902B101F1E2367B5B1997AD2FE08FD8FDC9833D0
2D1FC2A86FF6D34DCF21BCB464FAA0A0287C5EFD369886C06689DEC694981558
BC4DA9DD5DB92D0D3635E130D4DFB3EB1E58EC97A30A815F1350985FE13F6F38
2B1EA90C7EBECCA4690B8D39695D096825DDB3043E1D9C2B34040061729AC45C
161324DE429A78B12A2CF44E7601B637E77EAF484C24B9E1CCE19FA7B3BA9FA1
400F1A17B257DE3F0661DD7EB216B88E20F71C865A3C7B1B589C0B5BA0C81139
0F978584D318A75C5CABAFCB69898E3BBA20BFD3AF672D546823C27547BF62EC
B5E25A0AE928DA1E4073F2400FA8547B8FE7ADDEE2A72866497FBBF49B8FDA5F
F5956B73A81583AFCBA8006CDEE4B2BA27DB49DBC6B0F3E4A594736B01A14005
F524A46A9757D94335F9AA9F42C133097418459942B6D22E4C45DCCB51687CED
6E30AC81F9D59B90CCF68645A68F72285FB2A586B7F622D5A2C8DEC701238E60
60A64682DADC55C79F30CC5F2B3D73FD3EADC8CF320DB89681A5A80819BA929C
CAC4B35B07FCF17D92182EB98A957D3DAE33E425EBF9D5BAA0923E22CCCF62E0
67EA1BBC87F668804CDB79C6892A0B3803DF546C2E408899E0717B818974CE81
77FFC49AB05B4228D7404756AFF80ED8A409962B34006BCB62888AC8539B3244
BAD8C63B4FCE2D86964B7DF30DB1230AA9F2676882932DD5B440190F11C953C3
C8FCFCDF5C20A99F85CF1943CAF2031306AEC35BE49D9FA599C7AA78251241B4
6979598057567BF58497ECE9A3914678EE3A7C7BE835852BA0B7FB0314FDF45F
05106CB4E5E03072C214A0BC5210C061D8BC48CC05727B71589342370F8A366E
11B363E6B6C1C003F982B905BD7D67725C83EF7119C2C4ABADF4438997642898
4A7DFACBD3FE28A8903CB42EB0ECB5A96B5DE3587BEBD9AD03DDF11A158B4370
BD2D1AC265975D11D4A151152979A546051AF86E03D22C944CF66D42B0745478
EBEEEAE799E3F0391DC6E5BA2C45BA39068EA2E242E67E22527BD17C13D14367
D478A2DDA733AC2F9A5DD9AC2B500B37969F6754D6506FB87D745018E79AA571
5FF788491FC617BBFD0D9AC8B0FA7CD4D5E91F4808B5E0E8706A72A69CACFE93
147FD30EF2AA58DA3714E13CB0EA22C63AD61CDEB4C007B05DE561A185D8128B
320F2E0F120015F227B82075B6CE6C90F7420DB2470B25B7A0B21827300062A9
EE8AE41F5838B45DB9DAB558FC69B86672F40041DDB160BE6CC01F82C7F80A97
3DDC9DB6DE7E7596528D2582B82FBA9FE336EB298246E7CA384F311F23DC5A7F
7DB374E0E3D066CCBA8F74416319D720E3C79EDBE00878008538C79938E3BC41
3C54B911D61724EA6C5F87CD37B3ED9960F3EB9D607189D55B7579A895A905D0
DCE8A41DF8804A6F855C354EDD5C79D026CE9F5B78A5923B07946AF750F7C23D
B999FF8BC53C16D34888A41F8C3108AFD4ED24D99E1AD4E7CAA8B511A630E814
8A51C1394C7C321156CF52EC983E459D3ABB1719EFA24171D3E508B67D68BAF1
0B957A16AA315E2E1C635618BBFEE940CE89127BD552B9E6A9887CD3C3C9D8C7
2E516C2E80ABAF4F6CA5ECF506FFC2775C25DB451DAC56B286F6007FB8746865
55FD056DB2C4BF20560D772C14FED32A6D10966242774A0E978AD29054981D7C
999B88588E3BDEA834A3B0F64592C48AC119167FFB8DA6D0FC305210268A94F7
87E3E726E23B2A3FBAACA5F6565B966BF65083A9120FC2606A9025D1793D7A1F
365467D56D210B185F12F8DC154E4B79B165A6C0E14826785042123F578404BB
143E60CF3AF1721D7B1C925E58081E32B98A6F0F70430579F5FCF839B2EDD264
730D24D8518117AD200014839545B1078F38D7297C5E2D18AE3897CF65C83896
17F534EC699BB12C33F002570ED8B061E82530D793EEC3E5EFA20896B346FCDC
AB899D89D948BE347FB9399A53FFF0065CBB51A3A16A45A27B2925CD49A17404
9A2B5B3951927354864FA39FC7DB2BB4988068260570B2884738F247821F243E
8DCA9185B932FDFEBB8A80ABD3372BF7B61D458BBC8CB554192DE6821291164B
14DA11FB16C0E671A610408294D10D15DE24BE0003908E91DFF2043E53242B1D
8E6D23554B51A68791DA15FF5999A8A0A26A1C469440C75A4BACA7EAB319C569
DF3CD3C053F6CCC206CCC848A8A56F924D14A4F4719E66EE3C64292C209A832A
F504B1BCEFB09ED521E46EDA743CE5D7BCA65AE29C4F00F2FB20F2C8614AC927
DF8321C365A5104F1AEAF8EBBCD44A60F2BD36125F653A26842C9832772C15EB
82E86734FF9C269AB357BF0708D97515CB6CF112C2A89D2D44816E907417B16B
CED7EE928D24ADD7FF8D9918C339A8E8B4138366534682735A79BD25FADDAAB3
20AB4B9278E652C2F30BB60FB3A800C7DBF813A96D33773AACD4000D71140AE0
67021693306E17DF2D9686FDF1F0122A886D3AD63FF12C0BEA1FC1D27CC6A4A1
E67DD67ED59060159FBFF46A000FBB22DD1B68A0A278E02684B907CEF368DD83
6DE73EC2D5F930F3B3F5C994D3214A2D0851F039E95FCB1F09963D0238B5A726
EB20D1E59BBE57020406D0770CABA77E7F8E621902C64E72635E4E341C068360
C704174E61D49566FE8DA498537127B74727FCB164F21405F98E3E0CA8B17C7B
ED0D9F20225C3C204A716744D3D19D536357D4F8AF4636303DDD37A8AA4709C1
A1F828B222B95DE8C182CBE1F42E739B6485473B414FCCA4D5C10FF2C9A4F252
DFC48E9DD4953A244E5AE73B98F8203B2AE5A12035A7D112AA3F39BD94F21DCD
05FF887330D1BBD502BB8746E4A57BDB39F02F686DE4B50AC46A084588FFE9C2
1487CABA9CCE19ACBEE693C2479D8DC2C87998943A41DEB2FA6018E0221B8442
3F478D768046E0B65CBD4BFBC85EA632F544082BBDC9B77C55B4D4E68066D9BA
37B653BCDF199F90DF5B338501403614E907DECA018317D2CB2366289E8631DF
20496C661A34CA47CA1A93C7B0E86D2D407C0089818E3F82FA42E9473ABE2F9E
0CE90EF6F3A6713E67E7C08467C617E31DFA524A30DB697FB18C53797B53E64D
40555EC96E760C8245A1AD9F508D0469D6607AC0C67D552DDE51BFC9B0BD6692
A8644BA1237A7491B0486E7CA427857946D2F3D0E22E018CF12EAF0CEBD38F0D
B5BD23B4507496C95A57D76C2C39A36CF050D0F43F9A1290E91C463895BD12E8
A831DAD661E367A630D4EB72A67C5DB42A014CDBEDAD13C5F886C67DEDD22722
ECAEBA773E594003499F0F90FD53C30FDFABC25E5F5D93A16DAF98DB46AB8984
55AEA46E0B4ECD8BED6E81146E0271E215FB6C52D696C91C62C88CD8FF8B0392
6442CB14BD2C5658C938BC685FADEC8C6514A72F93B2476005CD54B4B48A9E30
4D4B6BB96893386573FDB7B057CD97B141546FF52AAE673C3A8FA461F426952A
D00CCD3BBBE679793092790055198EFCA05EC6C3E0C10A644825822602693C07
1225D0A59742608FFD38593B5D8E3DD09EB442AEA8A8F2F13427439971B8428A
FE5EBE140A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EC7EB382C58106F3A6
67930EA8EB9092F0767F0D6903981A0B806774F325A94413CA311EA41C84EB8C
661706FC3925BA73EC097E978C1A3277A9E33B6810E923D71617B79AA1C6CE5D
16A2FA826A806C0D781DB6A0FC125B7A43C97014196EF241654B81CF0C6959C0
77BFF8C37BE5ECB59F18E5AA02000F39551C3DCEFE8BA4312F687013E6E575D6
4BD63E250047E910F5587847B9B4F6BC43824480EDC16BCE4B2884FDD3298130
92949948BE9F32EE386DC2CB7205435589588FBD166C47CD29BEC5AA33AAD0CC
17645EC1167969BCDDEBF9C837634AE662E06B4FA4420F33AF7305F28FF3FF34
DF7BD592A865F81614B4FD5B0BD9E6F5A06182C3B9844843B36660FB31D933B9
9543040B5255F62BD2B6A93C68B79E9026102990E062B7176E7A8B26B0F41D78
74110FB0AF4CCCA650EA7674F4311A6715C3AAB9D7A991233488B2D41B812A11
DD57D4CD493D65E6834192E0853AEB5B7643FC865E74410A6C395BBD0F42D0CB
EE87AE6D68A4C0336BE904ECD3172966171313F92A306D1A7DD5FCA29CE22313
8B98E6C31211066E0025917D1BDB7E9E37AD935833B94133FD5C62F1F3D42FC2
29CE2A91FF4FE435C3E56A8EB57949861E8D2091EB36923F31341B9DF942E732
F5332C61623AA56AA021D3CFF14894FBB509021AEB395418E202D9365E72F02E
CD0ACEEA511B20D4D5F72565C43F022989DDC64661239D8E8052CC15B53B907E
17802B8F1B15359C026520E3BD7EF1CBA472270B4D082A1E33222F1F99A1E8C5
66F3B78C18DA0320065A0DB93B732BD6317212EF1E287B95D693D287C2B543AF
840091D69A3C1C428F1E383CA2E68B180CB1D3458F56F419ACD8CFCAD7ACCE8D
3BE0E2EAF70680BE2B3D13B9ADE40F20C67E07A91DA47A26F208D2B653B93AF7
6866E38F6F5B4953BB6790B85CEDB9592241DD136479A65905FD0062C91DFF73
49824793902761F7557FEF701AA67B20A9B019C760B2BBA8B55FF1ADE67D3AF7
F5940E561FDF3EC104AB6EF99A303B9086543ED82DD7C0F29D3522C88917F450
648A58E80F3B92566EE90D0ADD345519DDAA4EFBF1D0D679917F67A6D65314D2
BB69D35F3F089F755BA04D5D03A83FE608C5496EAB8EF09A09CC7FBBC0008CF2
A70C000FC01D34AA7158471CDE2C3225FA6E393C673988CAF05981541774F96C
A49D0F9A5A63AA4C9451B3B017C0C2BACDA4B013338D0846106385A46770FE5A
F066F6B87A2BE3E0B88938F525793AF97A9CE3BF875DC5D845C884413A4459B5
E30180F132FBE37AC3236AE99DB944D7B4B835FC865549ED37FA454ECC45F776
3C6D8F71BEB6CC5282B47BDB6C3D1F7420ACB51B0096666727E6C21ED7BD158E
A46AC98CB112889DD3B16E3C2BF4191D7947DD3A946374985AC9DD10D3BB974C
0C92B89BF728B6BD03C5A92D2A5F0F6F6F786A20316B992F547DE9372FEEA0BE
4056DB853E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5138F525AA731ADC5E2
0D30F30CF0625DCA254C16904F766422E66F10354BDAECB0ADC7DC3FA7B24303
B3C291BC16A4454EA21F3593B0C11EBAE00CBFBB83E60B190C331B82BA417E57
1F971527F8EAC9209C8B1C22D03E525670DC4CC83FD73A6DB7D18CEC44CDA8E8
7EF74592B6FD941D655F5AC07D7CD353D9A69D62C98039BCA169B6BC507C144E
5291FA4017E674E4E3F6B8002890F8CC8043E815044111D831971C4BA33E9FD2
06A7B97E69443C9128000D26C8811D02A0A094F82E5E522C468C4529613941FA
39B2C1A064DCCBAB9C238F3064F04C6C0364BB57F1390CDF22BCACAC6B2846EE
200539F53F833F07277E96BBA983D7B5A446BF526A58DA4682C9F22549FE68E9
CF1466E398C58FF8074C8E860FE132AC46A5AA4DD334BC86EB8A78789EFEA3EB
8929EF655F1D5D2918BEB0494E3922C76818637B5E9824473883374833E2C4E3
EC1141347AF88E699F7437339478BE40C39D57DD280BEF8998B600EE212446E7
0A536F162CB22D6B6BB85AED82C355BE73734418A4A802B852FCD1E62A7C5035
38F9EB690773528381C4E322949AE90337449F9C55DC86637A130BBCE4679B46
C25E44BE0A77A52F49B360BDC5FD87477DE7D77F4D887AFA0963BA6A1CBB1FAB
162679076CA492B5B8BB46BA0B2A96E810DECF6C6DB8F03151EB9F0232BDC56B
10452C321698CA1B72AFE725CAAE98F627C610ED41ED4A22883CC403C4D9B365
6E83BF407D06A0FF27FEE8419E3B471927181FDF059244CE34C8E2F3833FBED0
601C7627DC1A93A9046F0061D3564D2044E9B8D2E8FBB3E522663B82E2544A6F
ECEFD3D8A2B222301FD1782BC722E7211327F13F8133ADCE7C195BF3B07AA2B6
F7A69A50E08D6C4810474C709515D6A6557ED09C2D30EDFB78EF61B49981EADC
4427DF95F15FD7D1720ED8777A40CAE9A68F64D2CF9B4EE95672C13F4D709C28
9E569CFF941839F600F61C14247EFF780BBA3E5198D37CEA36D481C301215DE7
34D791692C5AE0C53DB380ABB864DE28EE4ABA3633A9BB597D6161CBB2BEDFDF
7850C36C00B2A1A61D2630647720CDEC8E88CB07BEF7E8CBC0AC91F100738261
42850A881648CFF2BD247BEED5D3B358E22C9473F3E526DCE9D1B2A6BD6C83FD
2951E67E0D9A69321B8EAEBE2A5C045F15019BCB7289A51605671FB74FEF2B41
0940A6DFD0667DC444D6342205506A827D24F2BD41515FE91E1433A56A4B1C71
7A38CF9C88CB71E5D4AAB8DFEFDA12D59DE5A8E2A2AFD63B328775E3B44ED328
A90F69D361C31826743EB62C444271924C89E11846FF86F61DD7C7EE5F015B1B
AE83E79E3BB86BC0CFF59068065ED42EC037F2FBC40DCC16E9E68985E1FE9D32
A0914489A4A227F60027459721E0E7D5BEC1C0E35C4F3C947E5325EA8D2985AF
7B9F14EA2C7C51096681B7757F3C9C568D564C1EADCB680887270B731AC3D919
1E1B69A72E983E07BFCD447294B1F96ED4AC5B1BAF7B88821C33D6D75C10FB83
D7B0EB9DCE189314BFC6A12892486CD9CACF4A77D3C395367C6D3242A71CDD4F
4AF7C95F8809C632D409DADF45FD193E6EF5F8491B730E6F350AA7B80EC0CDF7
0F847861AF5AEAD56C58A80E3B3A61512471CF776840DD148024FB210E217E08
52031A7D7F376A79262F0FC065D56EB983207F1478ABCD112D3ACD5F843D58DD
B55C8651D264798761C4EEDE4626686759847C28ACBE1FAC3CD9A004F3ADF4F2
DE14E190F50D27737E652AB021E1FE2A443AC56DAFE0CA144AB9E02C217AD381
3CFF43574FB0FCA1D202E8F9D29C5A367C2500FD1B6C14E08620C282FE1094CC
0EA2676BA81D5448A78C5DE2EF180045498D9DFFD86AF3AB5BE121A7157A4263
D35FA964659C86241FE188A2B151D9D4FBA51E499C40A1BA94F6C7F031E02AA4
01E30A909608E8C4C56CA2E95B0AF9CA03F6B4CA4588D5430DD9943FA6EE299A
4FDB875A76D7CD1E602793B950256F25871A9760C80B1EB274BDA98152D3CCD6
7BFACA1F6DA762470D545CE6B8DD78591A17C87D7082371D3D4884B50E1295C5
17FC56BE0602F41E9F39098B65E43FD1227A26F6FF812CE452FF14FB2A984DA9
73A1690BC030E6B9994F0DB9A2BCFB820F7462E42758C78552E5B1B77418EE03
F4BBDB2F7C431BC3E636D5951411C6F46CF31F03D3517A96309E02D416E0ECBB
553C90B4F7FB949DD094EFC754BFFC1C0AB45B4E443CE79BEBA97AE481AD4AB1
DC86D8BDB89DADA1190305D937E15529BFC43EA631B1A410AEFEEB515FA8F395
5B5CA2F739C797029BAA9D1FD7EE9405CB29E408A2FDE0C938782A18FA9A9882
C955044A55AB970C2E605067C5955C8503A6BCEE71DC4F50B5B3B4962E06D987
19DC68A827AE2AF8E3798F67F176F1BC9F2B67CA60F2535907EB59A046D1AEC7
9030AE60BDA3395B9FCF935C750BB0C8A6C144DBAC1FC39DB9BAE78383486A34
CEE2F5DDE6CDEC1757543978CCBC74C7AC23421B58D7A534317CB09CDA782DA7
DA169A703543F9E8685749426E9EF20505A9F537DA7E77180E3F45775EDB7263
8D3F81F0678BC0ACCEC903E9ABCB6ADFA4EB07AC36443DC19A5D4534EA5EA1DB
1FAD71C69F5C5C9D103BC2051857423B23C85330D3134DE8F40C716B11D0A6E3
96D355576B996E9CBFAB15FA42F2F264CE7FEED86A019485EF31E401AA0687CA
33028129F4A085AD9DD05C3A4D0001737F969C62B390E97E52B81F3057209621
E7A2F40B50A4BC27DDF42C0DCA22B640D87E79D24C2B8F38438B6E4F142966C5
7F92D2E6F78D08128C27B99705F11276660C3F6A8FFAF0C71892A3BD971AC9AD
345A4E00C5190871F5B0C484DB96F62E89B545CC8CE8B786D388BFB00807370D
A3915A958D9250B329ED72DFFF1413E660A1ABCBB98364C1A7626D3300516B97
E001C995F0187583FEFC0244657AB41589565E2B3773F3C4B8EE7C2B5AAFA17F
C1691164911A67ECEF5717C9E7F7444D4CE486A4C106D773543870BD35AFE5B6
999715A87719F6377069804874A52E6E0D411569AE5605FE82CAED658C145CC7
F67F2D7BEBABEA26C1EA55C7FC558F6ABCF90F27DD3EE2979C4707D16181C16A
DED356C423E9B53ABA36CB1E33303D3DB21FE395A576C030CC0DD166D4DA3842
2CA5D60FF6426CE50CB1D1034E68C09DEB2137CF349A904DA9AFF8D4E5EE30F8
8B6C38BFFE534470905E388FEA182D1CB1542862C59BD0DA9C906400CE29DCEA
B5FDB9516E8F04567E70E8F2AC629B39946D96F2AABAA935C0E086E03D6A47ED
BE0DC8DB890D11DF87B1E0A3E10B009E48968EC723C6DECDFDE76C4A7E72B8B7
DA4DDED557FF9ED386DA52D10615E700751C842B603BF140CA7E8892BBF6CCD4
2AE86AA222ACF21781FBB4712EA6E109CB0C7CD17D94D85644B1EEF3318B83B1
55265CCB13156B025DF2E5182DE426255FD062D11B79ABE5ECA5BFC73C09D362
74C91F1149C89024DA3E3E047DBE754D51FBD5CD958AC9612B37E2792B04B2F2
B9CD5C761E4F80ECEB0AFB5B8AAF6FAA30BC7DDFE923EF6C12F826C20B56CB6E
A8CAB5AA5ADDB48FC116C2FD2C96A7C5727F47571EE97DA061F1658ED0991819
92FBD393B7223C99DCA2BC98255B6D1451F7F76855E16E603736A691925B8B6E
EE9E75356115B40706BE5D5A806778309FA28605033A119AC5092E2956202912
ACF0A08BD3388A23C23A00DE17713156CFAC7BE33C1F1686D0AB2FFED64D7801
CC04D1837103471E7AAA85C87D19F48BA9A53162C95DF8450DDF72E6B62507BE
D1251E4EE61363C4CBF28F9C917A16AB20AEC7563535886E28292A42226389F7
E79822D2E558771160CF7D5B4C1DF1F410B1B4BB813CFA62F8BBA320A942EDBB
45A07A97A220217A25715354BB4C2C720ADBC23EE2024F93F343C6CCA44E9240
0490AEA6C7C24CE1C6C08D077D340DD31B820E7D29CB81EC0B5916E65AB744B6
FD259CC8D48D85F6692F098E0DDD6627C386B7D6CA5327DB81FA7E53D4B086C7
18C13135B5CCC10942AFC557EA5F982371233F4EFD8BFC08C737E385C3CE6FFA
4F82DB79302F5938DD437DE190B0467C469E7A3B9DEAD5A5A31DE545951F5CE8
E43F91F3DAB265BA0E3BF2608901F81928CE617258A8A5BDF0E1574F6B060772
F8E547CFEDDA9C7F0A4E33288FF3508ABFBC38F3AFD684646C133950DB2F8F15
FE4F89517D4C07531E5FAE089A21C1D49A8B4712DCB8EEA91DF3D3DA82309D7F
8B25CDFBC3EC2E6D2C5AB635C14CE937E8E6D9D3545AB3DDA93F1701EF6B1D92
14D9E0E6E79F86DFBA81F68F8C745EE041F16B15867CD72C3BD154AF9052CDC3
205DB03D849D2D1EBE4267F32438CCC1953B78E7D9D431A1B5A04A73AF4A83C7
EF02C3511147D1D52CFD0BE15577382B9C03DDD4398B8647FA7B032CCF3FB05B
EFDA95D1AB78B3486907AFCB034A9B25B6C9C0D5BD9EA7140C1D527AD3AF25A7
583C6B55548959C1603DC70751EA623954B13173A64565CBAEA1DC74FBAC1F58
7E9A49E0CE4D18FCD554C06EED98A1B9F55A2AF1985AB17813E296E18F7BA39C
D40B177652B9AC48C74156468DAC1BB800B2B30D034A954454CD26548C24AD09
6915F3D1256D4F620A7CBE60DC1AB21251B3DB82E6E6DBAB14516A2C4CC67DEE
79BAFC94E6B9AFFA3E9950914CB0781D5442DC61E235A20A5B72F571B371ACBC
2940E23F8C868043A8FA5C6019589914BBFC288C96AF33F7367E93B0F4733515
9A7950784A94E0AAE1B617B2C927139528090DEAF7366556C7213F568BFFC10A
AE40FD1E86139D471C6F780D32341A641DEEDDDB0B26D455EA8EA2DA2D1D94C3
A6BD10D4C383DF0D98FB3CF2F3B8A50C96FB21ACBFB4DC8097C0D9B0FFE6782D
1DE8C9A6F35977B13748FC54F228DFA267308F9710860F6F26C51D0AD9C7ED1D
D3C552753211F538C86376B6DA216E33244B839FA71A9FB15C2AE6F34345456F
D6ADC8AE0A3AA511C9AD42A10AD82DE0BE088537DCAB6B227FBF57D12A499291
D19821184AD1042278267F7427AB3F8309457FBC1911392190C90C198C827B0C
B35295B57BC0FDBA02C370C4B5B1F9BD420961EFEAC66C941D153CC7E1F09844
3DF235B91FB4943D7FE4D2A2056618EF791FA1456CACA7FE1D27CA5855B0AB7B
4B379424BCF1D8FD899F829B30DFDBE349FB331AE9EA757854481CD1B3B8E5ED
B31C298270EAA54F518FF6356D0543D1C17BA3C86CCE613566FCA121F0579C86
6039493948FC40E678A128E3A7E0E42FCDFB3D5F8890DB1672D9CE8106041421
10B05FD7344A2603478CF5540AB4D50E6707660323515C1CB5D9F3FA0A7727D0
261D81E60324D6F7EFB49D4E73C99A65142A8075002AA1EDD586896DD383D821
7244E372B4723EF405EB64223ACD2CC43614CCED7CB4388979C1453D6CA88C56
6BEB75A386E514A8CE8659607A1D826653AA62D8B63D0F0EC4198C7AE63EE63D
34A6E5E6483031F98EF3E464AD5F51CDBB30DDA29F1C35F212F6B0F09087C4B7
FE525C5BB6BDC6E34B39ECDB9E553D55C2BA698AA39CBF8249DE862D483D9F96
A1F4F682E459B541D649EED48657343003508B80110978F9F78CF9DBBF08B251
7131404FD0809138965C49460AC313073EEB273948116842D86762B0579E8AB5
BF751408EBBCABD465F27BBE55B994DB8317D3267FE9EB63076703B29D8D4DBE
BE215533641C047FC81218629AF962EC95FBA423CCCD94DAE6EDE99692B02641
AEDF05CA40B85CE365D038C5388226AF3FBCBFFED109A5323B8C050C2A38EEA0
22F492ACD8D6C62549EAA8A89275D3947828C6A9675B8FBB5ACFB75A80A169F0
2F0B10EE7934C215451BC9D441EF8278B9D00EA80816A10BC846355944F75938
15BAE9459264BB59E8ED0B9E9854999E7AEBDAC87D5E25B998284A6F868D9A6F
9AE824003E55C2421FFF27A307C6408362FB3463EA852140A205320DA238B4A5
CFCBAE29E7FC68066FAB5F63561368A73DBE56D97D3769FFFDE27281BDC41BB2
9593A5B46D967EFE4D4ACFA92D157783307BEC0CF21031255DF0116FE5E4F03D
45FF8E50DCB7581C4105E61E965C7E938AAC8FDAE64CE2CA1E5A43A81826D8B8
9CC1E950D5DAB70AFDE9391FB1A1FAD711D08E92F50233C7053C1912D4A6D789
623362FCAF1378112EAB97A68E09B52339D7F25CB6C67C1C19E770F653BBD000
41CC8014C2ABA315FB8ECF1F0681480B2D686478F81DD9E0BC8FED377D0B32DA
CEC7A2CEB327DE55259F640F02E1DB7C2871E4C25A1661E48C8D82FE4DD9EE46
7FDFB65DC014C50E8CBE23B5C8302500D3F3C9A6527C65948E4FAB5ACB5A67BE
3C024322E78A1C6544945BA436FFD98B468F8EF0B0153E6572542360428B468C
584F2D9808616A77B68DAB6110D1AF7AA3A5ADB195854141F0E0EF2E26D4E216
659D80E74763046D71E2ECF5522DB627ECC89434A9607C35E7A4E0F6B43343E0
28041D1CA723188D8522B798E4141DE2EC6E1C7FAD6BF0AC3B5B2820F473A397
8E3072E64942BC7F338EA8C1DF78BC053A65AE1FF5AF16A75B691A44EF78C167
190FB3A844DD7A08F9867D48B76CEB36949E8DC49442AD96E51B20E27C82BB87
5C430068D0726C7A3889255EF8F0A64E5151B7384981DD94022226E01EB8E920
7A5B21B57E705B66BF6F2C5FF5BE525585C563ECFBED750D7E89987C020DE287
428526603208719151DFCBE08D7F586D940403B5D2D2169C302432D9A862BB6C
2A3D683CB60333CDB2FE0C9F2C5A78CF4149F3CC15B8359A8592E4E78BFE3440
3444AAB369125EA226A4F01666E5AB27F302D31F74E3B09631F2D20AB5A7B20D
C7352F57C70ED2E46182D39F65A6F56EC07545AB05B3175433ECDF6F8FDC1316
E6514B449BD4B457703BF4E49975A0D5DCBFA60D498F805DA9CBC0A3A921F9A3
F5D3257A3826849F4CCB1E303E5FA9D3DC7BCD4197AFAB8E2692F9CB60DBD4D4
874C37E1474DB43E0F9BFA188C54168062592AB6CC3CBB423F54F083CF810DF9
5D06817B626B93AC328F025EC388E01F5CE1742F8FD99C7731AE9A2C9355F74C
D2351AF96857B5C5661DAFDBFC032CCBB03DF911EE78A6BED9B5F2101B8CA1D1
50035F5080B90B1B12932175EA8D8886FDFC099A5CB7BC0A66262B09A8A6EEB9
3FED5CB0E2A7492B2005D011A115CFEF85B66F1CF5269E87B3C3B7F101018CD3
867DA0B653BD28B7D7315232A33F8FF6CA1079FC8DCC158108BE01B14747369E
037C24B770C1028F44347CDA0C2E3AABB4D0AE6285563D87A1A6C4C52CCB460E
7D37F4F3FAB67FF5C6BF23015220827016645FFDB0B1EEC921620E668D20A9C0
4B43955F989DF00D0CA4B0D9C960AB1EF0B82A4941404FB4F24004E9BD1DDB3F
3EDC5FA135479FC9FA2409826AABDB63F064BD97C5E735F069C3B10D43136404
E769109A3CEF052E04FDFACCCBB612308A6A0ED3AB689244CE539D0F8C10A397
FEA6A4E3B9D38C9A68E23636A15FB82CE0044178731EC605C2C85F79D5C6DD74
0FA2EAE0C2119F4E3C0C6E62753E97CE1C0B152D66E148E1C5883A9EA1563BCA
9477071DE254CF21F2FF330371A05043979BC6B8B52C408AFC7DCC2CA049A219
BBA2A7BBEB5558AF8ADFFC7D39BC6E42371E3433877BB838661A4780D87806BC
7F3CDD8E6B43C6C243098D494EBF066CE4E6A9D2F25B4D14BC6589B20A16C2E1
CE69B430C9E868EBEEAA1DE428E5A6D81AB943797023065C738761800AE621BC
23C845374B37A15434CB76F7128FB43886F401B2AC04BA639DF2E40BF35B7305
427BD76AB895A81BF7E020B69158AF5B34D3A08E56233B350982F96E92A05EFE
5267B3ACF34E64046524BABA69BBBB8DCF7D8EA7CD75BFD294135BDC0E125346
571C44255ECB0139E36DFBA994688F4F1BB247A2F5FAB02A9D4A3454814C54B5
88DB9F9CD0A534F6DBFCE4AC3ED53D644A041281C5F154A5F4D11F068A07140A
355A7129EDBC2DDC054C1C360D5512BBE745C7711602983C0FD6AF466D8A69A2
E15060265B49FF43718EE18DFB0C744F65A3995974E47800FAA33EDCF9D04164
63C80B22E64B31388226B5C052471F24909E5601B3451F1425FA34FE48E2FF71
600543A190EA827EDBBA095978D8CA0DCD75FA97D44786495D9900EBA4A0B387
F7C0D80F56814696108C8C7F7C75DB84EAD302709424DF049891A8479190CD04
4880D04A876D862518C12DD5F849263DA8B6B2C38E4741212395169AAB89922A
1A2AD0610467E040A6399719FE1F2563A3CA5D7CE7E75A8F7613805064BA22FE
6411CFF2DF507B7332B523A27F53933C6B62D8AA75F2D6D1DAEE7C768BF03946
F13666CE4476840B8938C7EAD7E49B3D8B81C9A253881B54620432B266A48D16
8A7B15993737BE0E68EBB2A8DED24F62FEDCE93A17819A13DCA189C24257B790
E0512F6B53D0AF465F7316E568E305EAC163090F35C3E88EA347E39809F30562
D10EE8992F88624EFCE436F6522AA52EFF3D6DBAB167D3D5F8C9E32673F71909
51C141CED07ED01BFADF46DA47A77998C831CEA17602DCDEFEBDE58F5A87FEBA
30C9F69F91F3313696F1B71E67D3080F7C555721D258DB8C4DC732ECBBCB771F
BEB282DBE1A92A3A310D956421EB00D5E9FA2169518A8C7570C248B2DAC75134
5E5AA0E5785F2E4A9B0F7E4498F6D097CC21E82E96046449A558A88D426B6C04
6E9A088FA5FA90CB9256C0CD4CCE3F8060B700822EB157C4BE8DE416A00AD677
263F336ABCDA936F1A9CC881DEFE4AFA5EC11DD4F7A808F1DD37AAA08EF4F57E
A64B4B22737986D21F922BDF2E74519F043C7CD8FA2E6C749D88789C52F5243C
A42E8DB58351615E25EC8A5BBB32C7F72B6E43E433D0EAEFB6404728FE0BF72F
3C1A524D853CCE654EE72EBE01C238BF64AC9744773985CAAA4156DC39F284D4
13C1C46A4E3FE8B2FD75220FF7FBA30F47B3948F7CCC8FBB4A518522A5EE6D6B
8128E02F330AAB6481AE2919A38D19CB084ABA99F093957440BA536403899F78
2D7C85211D48DFB521FD1536BB06F05B67594FAC20AE98EAD48AEDB936A29293
C517E33727F94A43288B69A9E79012C9C5064D6804B4B23E1F31E112A3F1FA8A
C72D13019A4A0C7B838BF2BC337754ADB573EFAEEA5D8C588DE556745DA3E386
BBD0254353F4BBA96FC7F5529206548AC78713D07238DCF799ABC6F6018630CB
BBBEE85F2CE3636722B3367C1932A110D6128072DAE9C7FCA9F7EA5A376A808E
B33CB9E6053A927DCEE36203B758F1F30B2302A7B09C784A38A53B50198398A7
4FC76B0B3F5C8CDEC0A5699977AFC9896FEC1874CE5127C11BE754577D583A96
0A07DF7F35124511CA0E91CC8D32D4CADEE0F6BD92728822062F6206344F3220
1AEB90DCDDDF2859681D7C2974F7412CB0C75888011D8444873085DBE7789317
1CB11196863A96F358D7C3DF0CBC0C2ECFF8DA92489E968CDF90C9D73DBF1223
D080E154DEF491DC7B4F3B43E56D439417455C5DF33EE2663AAFD236FDD824E7
C71AD69173FAE067B8FC146F8EC2FA9A72C364D0FC44D1556A57DDA0E73A6DE9
6E4E0DF33F6BF4DB1217F996539D799C1F2BA294679C8919D571B677009B860E
4D935429CC99B6A1051D63F6CD38EC4FA610779DE56FAF0E6E738B7FAC8B9B0E
66A127D651FA49628CDC2A8FB41FBF08C850C509FF5EEB4E8BFA5AFF7A0BB1C5
9B638E677A4FC26F9D9A17F28132BA1FB3AD47D03CBAF47C14B4B93BAD310343
816BDAE9EA669134C2258B36645A69B984232D6AA25E4048E24F5FB72362EDA0
4937D942CDCD2E72FA641FD63F5FB1C7FDA9FC56AB26E7D56D440C4C4AFC84AD
3C0FD804C49181CEDF3ABB3347BFDCBAAA5E39F23E7AC708487E9581529975E3
911DE00FBEDFC74A3EFD48023BDA94D6FD95D334620CA91E8DDFC12F0CB4628B
ED6A0F57EC8D1AC28C89A5642728AA0EE4C89C0EB56E845BE1581BC0E605A1D0
942D5E483171E1C0E49642378FD9C4078079DC3F513AFE0413601576117EACDA
8787FF9BACD78AD9237044496B30E5611979BDF422BC83B4B51D1A0AE3CE1205
40E9B657443B4BADD5F8D34B7D484F76524300580E09E87995312DF7ABCE4380
5F7AC940DF416E92C18053D35CBC4C038B03DCBAD5E642443974C301141CDE62
52CEFD8BA69807BB5E85372356CCE40031D66724E959D8FAB7BF047372EDF021
028D8240697E45A45DBCFD9EAC410F8DE3724D440B5BAC980CFF66426469E1DF
9E891CEE459F66E32C72C6B6F85CC8C2BCF4869255392E6BBA26B262276FAD08
1FC786C38A5C22484C423C59443867F95DB0A4B4A25D3043FC047E17BBA4F8F3
4573C38FBA8107608BAFC9DB86B570FDE7E6248B6EDC735A4912E1DF953E18E8
C8355D66B32DF73B6BA4CDD9B588B7B41CE33E468014DA1E2925C9442D6B2E5E
4477109904C898AEE1CA2D6ED5112A7E67D718A1691F6A9C158676CF183C5CDC
F006E69DC0F5DF0E67B98332731CC59D46A861156D5BA53D2FADADE60352C1A8
13AC57789D0F7EEC4ACCC74E2369392079F86B33B5DE06DD2FBDA19D5C3A07DB
82A01E8A4351D750AC3E9D73AAEBEF116F025878569BCA2CA3FC9F90AD593FD7
A37CB7399BCFE42A925AD428839F865EA8D0AC986594E4C39B51275186AC69DD
79D334CC585E9158AA483FBF2D06CDD4D82A6B974664DB655575F7128B6A0A40
B3B362AA3B778CC7652251E38691E6A5E3BE32E0834685855195DFA7D9BDAAA5
2D63AD4C943CE0048F928DE1A0AFBA1997ACD042EE7D5B73FF318A14A720257F
FEF42BE32F060655DED219AE758B5A5537E8AD1DA5DD739DCCFAD28FD6296AE7
6BEC4B0044AC2984337F2EA913D7D283BBDB361BAC20A85E1E9B8163B2344045
7B886315C8DACA9257FC6F8AB4327A93FFD6DD41384C155A789B657B789A9BD4
7B5D0DCCCFCFF2C34E70591A1A14D96F6973646DF47F999BF6FF6FAD1450F5FB
9B42ACAD360B1DC5B0A6C62788EB05AEDE8B26ABFD71523E5A083C38ED46174B
1A2EAAAFDAE8BBB54C9F7092778849B9887C0AB3EB989213D8E0FC90B21922BC
40DE6DCCC4380AFADD1EFFD39B1742918B32AE929B96D9BD9060797845C0A45F
7ADEC0F87BC43B7676E7928DFFDB5EC6106C4A104195016CCCF8AE794B156F8A
765F5298B12F0902609AFBC1EEFCC10F47FB671C91A7E12A8BAEE00B6C5F3449
D9671D8DAA61F415A48B0F77F4A231F76CF009FC101D265D45FFEB9BE81630C6
73E4900ACD628933083F0AFE95773871502CBDEB3982F8572D8519BD24B691FB
11A4E88C72DF46095F63990A29877ED1DB307A71C06148C0A3CBAA7BA9CA8C66
082082F59CF21898E6BA379EC4CD8552DD719B1A3516840B47AACA7B4ADC4B13
EF2A8D924A18AA739F871F556948DDF0ECF3A0B89222271DC7E6EE3F0F650B7A
806A692DD3F25D5A9F6202AE158816AE66E3ADF7DAC32DD39DF0D88B3A35AC05
22C97412E9B5B69286A7D7CC0437B31B70F6E84F08542160DAE864B8D04EFF9D
DD51EB830765E344776BBBB5A7964685AF8582A52E69F9A855FFCBA0AEFE76DC
C89196C2B1873C725A32705ED237569345F676ECF81AC3D3C4CBF9F6CD7D353B
1C596EC63ADCFC01DC4E23EE35DF9BDC8DA4DA92745FC4B7ABA8A658ECE9E355
790EB93AEA254F7742B066A23BD439E5109C4256E14813707C96C369F883A6E0
9D15D72FB808E047BF014BBEAFCC7772F7F63D27EE5372CD6F04D1CE34CCCF4C
FC655DB5818840D39D041B26E75B19BB8E91D060E6A3F499A8D73E6333353366
96BA03E8DD236D480D9250A1EEDEC54A0D75E0C853808E0E47D71CC2A8C80A9E
D14A027B59CB9A0F4115D7DABAD25FF9098D655A8ADAFA9928106AEE7655662B
6F1658F14B00E75D64C777FBCB70707F4F0F088114534F6D36E4D32B78B20211
3B79CC12A12989639419A74EF73F08398077284CBD80B54A2A0ED46D0BB7510D
B489EE3E66B9F661BFC2599A0067E435D943360824B4348EAF26373E93142523
E57CB61535E56121B3415C2A0B4BF9699DF59CCD03CD7819748F082C19E6E79C
B5DBA7164BC3B644E9A352C72B094E60F2C49ECF4C8B9A546F4AC7FCA094F324
99C0F8AA33D2C7D00283867E58EF54EFE72CD0D2BDB735D18B4103C1DBDCD8EA
CEABBAB80E04623D0517232107B05D32C2DE49274D4F82B425861AD4EDD4FBEB
504050FD0E50AF70AAB831F5C5782F6B7ADA3AE06F801E6C37B04B18441D4497
E178FDB09B96C93F0B98BB42BAD91B49944F470716D1A0B738ED7C7A92B47FDA
3B422C1746B07A3D38C7762BE22971451D4604F9E5DC94F893FA48FB736E4A67
8BD8857D17699BB9BFD96112F27F9B4CDC7DC12D52AE6A36620F4FE48617B7C9
950EC394D6BE34C01E2317FA5E3C8FEB7D7A582CEAF7057213611FA533723F75
76FE07C10202637A51F034845C6313BB0B4C5EC4889FC8C0F634CABABB7D250A
0E1BDD0190AEB798B8DEAD9C354D1ACFA95F85FDAEB270C2061BD48E6FB8014B
7D771C23CDC5B31FA66AC5B08BB720CBE08D7F586D9484EFF2E090F2B7B8349B
0C9F1EAC33605FFF98C7D011DAF6ED1AE0ECE6A43A7C83BFF56D90F7CBB7FFC7
1FC82F22010019DB2F47EB70B54ACFE2C48070374ECFDD1C50293ADDAE109FC2
EDA20E5CB5EC21A80C59908E6BD23218713C61B64DAFFD7E650438288069D628
D6C6432B3DB333A394DE0C1AEA9C0ECC5E1787985544273ECCB27B5D1115AAB4
03EFB479D9B166D442B6646A0322605CECAA0D4725D83493013E427C0B9B50BE
A3B0C350B950E0172426CA2D0CC3CE0F47775DBD85B3C26A10219FC6017D5CE4
AEE92C35EE39162364DD30E6FD18BABF43809C925254830DA1CB099A6A86FDFE
62A9FA3A22300877CEF345E6A7DF0D81E0B7E7A8BC125505ACFA3D838E3DCA68
43B76B9B3F7CC59BB58B40D7496882273FB569F8254D556F1DB811384DE04BED
453ED09D98769F099C8FF9B12A99BB88B018D3A3FBD7527AD905D0E50A525C31
CE5BCDAE757E052FB41B36BCB5684BB471CD800A378306459C022F4127F2E220
758C31580E4E1F22551AEE8318E6DDB981C45E137323255F524485E59DF38F5D
6FF092E1498F8AAA6846B39BE93BCBC0936B813E3BE2A9303C579CA1031E1026
549AD20F5EA297FF423AF24B9E1D2443EF397EE0AB134571CC8EDDF09607F277
57905BDC13FC37F566F4BD5B50B88C551EFB12AAADEF6E32B9C3CF98DB65E06C
257CDE0DBBCB722287FAC65EB8AFA03089FB64A4276E5D5B346A7EFD40CEDB40
9FD479D9E3C3C95CC7C4015634EBC80694A548D0E97E176F7F355B9084B2C6F1
E7C20C3E0668FF164EFBF2FAB5F4AA9666FD919D83DF85BA4F4B14D6A7704476
7539C402B64B23005C03657FA91B02D5E8D679C227DA8E320135C40A3DAB44FB
AFA8A975DBB3644ADB1037620E73AE3EEF6596CF31A30BD6C429490F0CC59121
7AAB40D20D4ABB070B375651B78EB1225E80E7FE7FEB756BCA4697002A447386
548FB1A363298B7DCB08D13D9F1F96DE53F4A2C4AF6E622825DBC52DCBC0278D
296FB8094DF33E7E363122850AE868779D6FEC4A4E1B2715664F98F1E30C448F
2635704D5FF4976CA349681441427029FBBDB3C15F29520D0A4A1CC6FE81A467
EF04DD34B736EE7624134C834E49A9CB422F30D2C90F524A24FA470B97E5C354
CE44423931DEB499C71ABF2573FC7B8F62B96A3D9F7C3D18CF9FCE7552546BC4
F26E22D76D9D1546488B7E05ABAA458C5CE797A327685C3BE9CE8C60473C239D
BA7010D3C9B6F79B12C6005B9D3B7E30FF26A1AB03592F9372AF27DDEAEFF8B8
0E1A4B6731888FFDB0450D15ACA03D07E8C86C3A2495B3D53AD7D485558056EF
DE8757BD40D52FE71FB417926EE7E44FD04669F20BDB3CD1453C092943FACFE8
DF1F7B0A69C53A8606767394157BBFF48C1CB6341FA6E33C3E6D70DD7FB67A99
07CEED8885526519C86BF5A1FE8B03CDE89A0BABF35EB4282D2F75EA560896F4
A6E11278AC3AB78AFC7469678EAF325E7F5EE733F3C2D65261C9D49C04819363
FD404331A54B0372E170BB98B788174CD4E283C3032C3BA529635C152A68C219
789727030D9FB082AB4FFE58DDE529563C06915E595CFAA3E93280D983A4CA13
1B6EB15B46437A2C8861B304696DDC7CC881A1AB590B7E461DEF562606BA7BD6
A9F971DFCC0433D3116D7E782BDE11359DD537617E269E4E9516BDC07982DEC8
AD1ED4C507F89783E8F2E125D61FB011C8BF9A79F4DF0F83D532C9C5884E11CA
57AE78AC688EE28C31D597BC0184963FA54A88750949F134FD616325A383D88E
27041E38FCE81A6B2072C7C424B7A487A48EA5B567B07AA8D634C702038C74F9
61A1B5466D742363F38ADF7937A89EE47EAF9B93FC4CDB6700D6A10203D03263
B1C28B26EADB953ED292A2C5496505105669122D86E83B18D074889EBE0E123F
92D2CB928E284E50261CB50149B5DE3DA8E9FD9A8AE3863A13F660844638B9EC
5214EB8B4F3B900C34193E943F940292FD7D332DB4097FEFE402D3DB0E617B12
0CB7F2A9E50513060E41BF0066259FD5D04BB13EECD9C288757AFE321A619B5D
06C1992CE9306E48A69CDDB3ED0D2D0A9DDF6FFA5D51B1DC534B753EDD570AA5
DB18A649C442AA4330527E37856C4D35E27563D8F6EA7CCC0E74977CC53CECD3
E9122482F87852C2F3EF87B7F506B8CD728DD9822EA3CD34EC6F25EBEDE4E717
2DF87627CBA95D010BB83F3A38F84181C189EDDC426FCD71E1B7501D923482BC
125B28C0BCFBE8435E3C8AD9492E221363EB254FC019CBD229669156DDF6CA9C
06832E0BCD4D32BD1E57DCCCD66D37FEC7B0BAA8E172A0E2B0F3249928BCD8CC
2723D1736576A2D18DA69F9E45A47B5FA35C5E30A79F2EF46AF98FF43B1D23ED
27C41B3364DDF27841AF31E9B33EF2389DAF682A41B11613607AE26EDFB90DA9
5B5899C9FE409D491DB422E2CF315D305A458DFCAF52515D04608A497AEE74B4
003FEABC96A8D29C3C72EDED884CA9321BDC6EE944C5EE7644A8DCDB87A4ED62
00918A3EE18F8871B662980B19FE107EBF5E2471149D489523CCCCE97E507942
87F68D389A4BA12C49D10AADA23516331D6736688B150E779FDD9DB73AEEA116
15E7DEF726AACE3F2CCAF768EECF460CF82F033635EB5B3A4F7DF718E0E663BB
0F25113B884DA2D1596E14FCC7FE2B528806F4DDE320CB133A407D1599B367D4
6C34D3F5936C49BFBB7E9B55BDCDE4C9D0A7C62D6C1EFFBC6C7281E9FB6CC617
874CB47AEC73C80694D689D1E39F29B4A22D9E9AD13A72D1AC495ABE520B354D
612D4D03C34258DDC4D380196619E3F51F5EF7039DD184011B7B7F6505A11E46
49FE1B92394A21568AA5756B2072DB14584DFAEC37FF325290DCD493848923E6
0F7C67FA6AA8062594F122A48C5DEDE10E3AA6696E337699AEB3705F20CFCD66
7AB094E9BEC4B83E7A2B47C10C95FFFF6F55524C8964CE1CA8AED3E08B78CD9F
5858F7D48E2C2AE2EBA74E3AF291E4A5FFA7CC5AD1F7670D21E0C8AF63E52099
11CB9A1304AEB53780D05CD84569BDB5AFAF57286E78D8BB50F22611BEFD2EA5
3EF4B980683BD817FAFCFA53893D1A325A4C1E1DBAEEB25061E4D5AE67DA3476
CCE84832BDA1B6BB5244DF4DCD65A4B12C1A6951F120944F679A2F52F8E18459
0223348E5157A9FB9144E9162A946DFAAD95EE0B346EBBB899F1F9110BA7884A
E4336F3FEBD08B7B93B550CC6D1ED120A5B0C78839DA1968122EEA8D652BE747
9621A99C4CA4F1D939115B4AF2D9DF46E1E5B36E223885BB7E1E8B28B161455E
C87D4534463F25D7CB2811EC8ED1ABF088F6345971DDDF2883A35FFC9AB61368
D28649DBD95933B9929DB4D74803CFAC6A5F3EF9A9280384C5533F7843E6670B
249FC94583544EADB79035787CA842053C119ECEE2F49FE78F035705610F6394
B36FB58D6D2AA14D81F492A56958D54B04DDEFD817355D4F877256023ADE33D6
EE10BE23CD982FFB6FF72A3429C7FA18DF2FB726AECC1832A0323902F72C44BB
28674A8BFBF0EB1AB5858D30F85D2BD466BC5948CC0C07337E21EF5CFA00FA64
12F6D7A5FF18687770DD11EA6E1A14EBB1BBB062CE726E106E133715FB91A530
6D2EBD3AA0CE027E4703A2EF8A43EEAC60446E7B286705F0751F9A6B4962EC51
C9B22D9B72E83AB6B00FA143FBA1C9F662A35F3BEB5A529B512E85E0C64EED3C
7ED00AF98514E4E9108CF2724F58E6BE85B49961DBCC3396B200AEC477909C2A
7CFACF4E2DDFA16383B5DAA8B38A6CA58290D557AFA6B2F76D3C2C0D7C2FEF3C
F26B0C69348DE5BC5F443EC06A1BBE8E6481A48A9E06A3010637B429285A06EB
EA61BBF6EC76453CA7C1AC85D6D660DB3776E0914B9B19BCA8B6926435119FF2
129DE37D5200F5A884569120ED4BEFBBF77C6C32B88FF3F1046E4EB2CD942E70
7BC6DFE1149715178A46263EFFFBE20CF045D1F128CA4C30C37A4589A0257051
C54716D2440C2CF4262663EA2D33B95AA2F7686797569D918E9067154248AEB3
A2D309C516BAC5D3BBE5694204AE852E6BAA8F264F70046B4E998ED31335BF56
C3BFA9A6819731D70E62616DE499708777FAFDE14EE8DC4F4D6AA70536BD8E66
FEAAA8CE3158780AFBB0C1A17F2212E2ECCA6B7A70F334457413C9EA8C26C595
53B24A5E545B722F9739885A994617FC3881DA47403BA7FCD1B57B6C8C3E0553
729B37E4FFFAD89F4C6F1FA94AE02BFB5505446BFEFD16A9D3990F29B15191B0
8E685011F9CFA02DF1DB3206AB65DD1F7D423FAC6B0DFEAAD917E7F290E61790
3792223A2AA23AE70D7E62F98026BBBE228675A553F3A56FF81A199C05409868
98437A237BC6601800B0175C5AD2F830F8E6AF124C5B0B2955E11E876917EF04
AC9726CFD14D0972140876895385EF78B1D0F72CE3FE6E475E5D061105933646
F63CD05D9EF8FD2C6179997EF1FDBDC270D25CFBAF152C310C4C22CB71BA2945
50D4E89C73DFD6CCBAF383B707376027A186EAE15F637D7E107FAFB4619EF957
D4A702F9571AF68BB16C329BD7A7DB1F39AE3B36318ABAC225634AA4F98BA4B3
05319CD4E0E700B6E524774D43991D2CFFEAC9E499BF4794FA3293666AF2774F
CABCE014DB884FB1E038974CA38F894F03A379682124CD29D18414DCAFF1CF8F
38923B7507D06C197FA0962EF63BDD5B5DF918728F397A677D32DEED9B4896E3
72CFEBBCFC66CC62C867A2675F595CADE6F1EDAF41242AA9979029E9DE43C436
CEB22ADD8B818024C2DD0E54896B27E37FD67F410274BB8659BDD5FDA7B8516F
F329578F0D1D2305EF03DC81CC69A7E6F36EF011F614CD8EE411C90A03F6A844
8E4DC63C15F8FD1EFE4ABCCC1CF5880FC66196E8154F14BFA88347A2660B90A7
0AF8CD6851D9CE14520FA59596331704854C8986291502472AB380428B9B4702
DB64E87A7D8634FA00555ABF0FB10CE961AAE749990832B66726295FFFD009BD
54F3BBEA5BA50E91996BFB0B0C03C1C5C5251A24A1E8237AE8F501B143987724
653A6EBA1FB0EE447FFB54EE86F83E8A9DF1F957E7B7B72FFD2F1D9C1D3C3483
C356475D352AB276D2F4C006E86B76142F50AE18FC858A30CAA51E7D9B890167
EF0AE33F4A44D160E6097AB084C7D073E57F6588D2A0FA21B65DE5250DA19587
19B659A264F0986D0096F0216A6208F4EB7A9F8E7674F98902AB10AE84CA2A46
6118958FDDFB3B83BE405C14B97D4CD1F57564EDFB4B9EEF9C483A74B3C98AF0
F34217F6C53BDB3316CACA6CDF3934728915E76DB8070E1DC89B217950D73208
D41557BB186D8CD20FF5410F390E657B90A197445A6BF05A8CE350FE5A27BB8A
22BF322FA596A6712BC99E4EEC3F2CF6D0C964CB99B9E091DD7409603A82A52F
58CBF35519D84ECD4BF24FE0641A8704FC0B84C4FAE7A7B39EED5B5DA9A7E2B3
86EAFB9FD8D5B7618C3E5F0745A077054B441943F565132495C19694D694A5EA
409007804175AC6BE1B34565ED598B98014D353139EC2F6F1693455D4534E28E
B375E0E3CAD19F8FF39084FE1117959F7C775457A2B3D5FD56E08DBF4BEC6117
2F20F2AF05EBAC5D4AFE97D7B1FACE74C3EDF9B30772D24DDBE7B4DBF83922BB
37745227D87B887F89103E0B07648CD16296B38A2CD96C0FC50AF4333D2578D6
4D7598E1AF5DDE1E295496B98AC824046C9A074EC59A1A614D3134D6D8789902
84E192FFCD09D0B934EFC86EB1B37D57E8C22D5D76F047FB95B4E7B2954C692C
C037007A5FDBAF5FEC2038DE981234B69484C237E27DD7A45ED18E70D6561FD2
D13643B5FA1638F14A0F012805FAA472290BEC54D3CEA469E789B70EBD3A6760
506F060F598431B4459951EF3C57225A0481940794310C8D75A2639634E3217F
66AD5CCB153EA5056E9D974A113AB51536624071D557E01DC272BAF3B122D5EE
3913A9257D300501C484B93EAB42476F6BC4750D3DCD28F97C96F54494934D5C
12959B951F4BC88A639B5D0B6DCF49B598D1F00612772770F17FEFE2F50C78E1
EB3D7B3673B104C9A5AC3E2701D3509CF8AE2EF4EDBF829069EE6E306BECDFF5
C8187D7658D7D836AD02211578678322760A0DDF9C82161BF2AE9108C3DB16D6
4EBDC19DEE98C52EFD5C43C57F524BC8AB8A730C0E99E1D5E7F39650C8B2803B
42BEF9E98B454F86A4DFE77919D7E58D777D53156C0AF9AFD9DB515E83AD7582
8F25EC843D1CD89A49467E57D52D7748F7E612FFEF5B0EBD555637B9B6AC23B5
A859814DD198F93DA0D1613B3727E096741D95EAF1B371CDCDC742A20A9E6A8C
CB210132CEF77D41124D3B01A99C90DC273A1EDF6BE77485EF086B525F9A017A
34A18A0B045AC27EFCC01A08DC8DB7FBC92A165424C7883605EBBE6ACD638A57
F4243901744B60FF0271D6039F7E33C33B3ED533F47952149DF638FF72D734B2
BD91CA01303B59945528A74FA4FEF33173363F8426D66B133A11F9E4BB0569BB
46BAF59ACA0C68FFFDA87B617F6B961160F6E7523E6288AD18D1D8E44A73B8F5
4EB5EC87B4135B68770B6FF3DE0CEC3C628F9A334F62DF72447AA79B400C915F
9FB33DB7E4759853643E29747098048FF999514731E3E106B4B9F0E8A86C9E72
ABD036FD6AFDEB8D188700CEA49DC7A1505D35B6CE59254C971406919567763C
AC55F4D5236628DF1A4AFC045885815EB16B87C1D7912BA8797FBAF5B67AFFA2
6A0079DDC4D274B3DAD8C6D84EFD9EC148AF428D7094CC476A239A485E9F6DF4
80C878D1B3110A8FA04C8CA056B20E5927F395C3249F32491E3DC87F4C89D6F2
1B554EFE0C11947F9926B8E215B68764E6E6E5A1688BB258CF46775A61B0BCA5
00B39C5269E94B6C49D0749E9A1BC692E809E0C72380B99156F12FF1EC5A078B
91B08E958E0A6DE74E0BE3C27E0602F3DD17A4C4A0951F09F5CDA897FCF55C75
0053F5FA1A669CD83AC03C400839250212223935D75A17BDEA947042DACD2834
4FA7564CEBC7B93621F1F2C8A0A15E023313F936AE64D4230E2CB1689D10F335
D9DB3BFF1C5BDC3913693FCE9A0185C5E1CA0860173A819607010B2EB42067D1
75C3B1AD4FE4A0377851DABA2E338848FA67E14A6C550D7AE0D5E08DD4A903E6
FA554DC1B358CE61FA4B2C5D68BA7FE68889DD45E9D7A1306839444645493DC8
5F8040ACFEB43DF38C8E49B5A732CEE9DA808DA0F15C8CCA366FA86933F8B05B
923610F598674C02AA9779F39DA3DEE9460B1CEFF857350237400CDD9238281D
D00C79A01697F62C42B5D18CEFD7E63C9957BD21972B389D817DEA06C232A124
D171C2A2252E604CEBF165372555601E4B5AA0902662EF817EB8D972FD9DBD99
3ABA75E1C017E33650E24FA028FBA52C87E3E77E4984FD1731D11C81B323864D
62B8C3807F8CE5B8680275637B24F59DDD8AD524F524EE18489DC71AA9DF3E01
EA3E5F4027DCAF06564003F0DDEDECA98666461AC9DBD5CA428D29369C5736CD
B86FFD99858E1D17B8B808162AF3D6F5CF102B37E9627A6EDE6C5767735703C4
314220E9FAA07E2BEDB82625C133C4BC917C3FF2732D0D1797B79CF3FA3FD843
C658BBEA2788CF136D7491E3157A99E4F6AB14EF7F550EAC8693F1D50E35C4D1
E0FB445349CC15F9AC5391AC1A85EAA5EE0450E4C446AB05C2234A0DF1687E90
68E1902845C6283CCDBF2461AF5DC15DADB14826CD95F02199EF4586E1A2D41F
E25ABB587F6061520DF18BFF45165E55F7518410E56E0516AC9B3445CCA53AF7
614AD0FA1E948C6FFDCE01CEBCB342AE66230A599D63659ECDC18C00BEE64228
990E591650E924E4798AFC612C9D5A74369D78D3B0A0FD384250049B6C0F8A9F
882C1E1D09CBBA07828840A5A2EADDC8760F31634A0628CFFE26F871D2F1271C
C752F4130F63CC5ED81BB2DFC629E99932CC1F0EED1F78D362827D757EC60D66
E05E60CC413040B4EBBDCC2957CAA23DB1654456A4FCA327
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrschein)
@start /Fa 196[252 59[{ enclmmathit ReEncodeFont }1 664.176
/LMMathItalic6-Regular rf /Fb 198[406 406 406 406 406
406 1[406 406 406 10[664 37[{ enclmrm ReEncodeFont }10
664.176 /LMRoman6-Regular rf /Fc 136[632 437 510 316
389 2[486 2[777 243 437 1[291 486 437 1[437 1[437 437
486 15[729 22[291 10[486 291 46[{ enclmec ReEncodeFont }20
885.568 /LMRoman8-Italic rf /Fd 3[830 134[830 581 1[610
3[830 1[415 2[415 830 747 457 682 830 1[830 726 10[1128
11[772 3[939 12[747 747 5[747 1[747 48[{ enclmec ReEncodeFont }21
1328.35 /LMRoman12-Bold rf /Fe 240[664 15[{ enclmmathsy ReEncodeFont }1
1328.35 /LMMathSymbols10-Regular rf /Ff 146[1138 9[560
32[988 975 65[{ enclmmathit ReEncodeFont }4 1328.35
/LMMathItalic12-Regular rf /Fg 255[732{ enclmmathsy ReEncodeFont }1
885.568 /LMMathSymbols8-Regular rf /Fh 3[449 129[363
1[427 578 427 449 320 324 320 427 449 406 449 664 234
427 1[234 449 406 255 363 449 363 449 406 1[595 4[492
2[811 1[595 578 449 587 621 5[617 1[294 3[544 608 2[595
5[234 234 406 1[406 406 406 2[406 406 406 406 234 277
234 2[320 320 40[{ enclmec ReEncodeFont }53 664.176 /LMRoman6-Regular
rf /Fi 3[523 5[470 17[470 105[418 2[680 497 523 366 371
367 497 523 470 523 784 261 497 288 261 523 470 288 418
523 418 523 470 3[261 1[261 3[966 705 705 680 523 3[732
705 862 1[731 483 339 705 738 2[718 1[666 705 6[261 470
470 470 470 470 470 1[470 470 470 470 261 314 45[{
 enclmec ReEncodeFont }58 885.568 /LMRoman8-Regular rf
/Fj 162[361 1[361 29[1012 1[361 2[650 650 650 650 650
650 650 650 650 4[1012 5[1084 37[{ enclmrm ReEncodeFont }15
1328.35 /LMRoman12-Regular rf /Fk 154[966 101[{}1 1328.35
/TeX-feymr10 rf /Fl 133[492 4[615 430 437 434 2[553 615
1[307 1[338 307 615 553 1[492 615 492 615 553 9[1138
830 2[615 8[569 16[553 553 553 553 553 553 1[553 553
553 1[307 369 5[307 39[{ enclmec ReEncodeFont }33 1106.96
/LMRoman10-Regular rf /Fm 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fn 203[993 52[{}1 1328.35 /wasy10 rf /Fo 198[470 470
470 470 470 470 470 470 470 470 10[784 37[{ enclmrm ReEncodeFont }11
885.568 /LMRoman8-Regular rf /Fp 650 2[723 5[650 17[650
7[975 5[1012 91[578 1[686 939 686 723 506 513 506 1[723
650 723 1084 361 686 397 361 723 650 397 578 723 578
723 650 6[795 2[1336 975 975 939 723 957 1[885 1[975
1192 813 1011 668 469 975 1021 849 885 993 939 921 975
1[614 4[361 650 650 650 650 650 650 650 650 650 650 650
361 434 361 2[506 506 2[1084 3[361 4[723 759 8[613 1[613
16[{ enclmec ReEncodeFont }76 1328.35 /LMRoman12-Regular
rf /Fq 3[1196 23[1046 13[1616 91[956 1[1136 1554 1[1196
837 849 879 1[1196 1076 1196 1793 598 1136 1[598 1196
1076 658 982 1196 956 1196 1046 9[2223 1625 1[1497 1196
3[1616 1682 2041 1293 1685 1111 801 1682 1[1353 1412
1649 1554 1530 1625 7[1076 1076 1076 1076 1076 1076 1076
1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }56
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fq(WS)717
b(1.1)g(-)g(1)h(Studiendauer)c(-)j(MC)h(-)g(BIFIE)p 0
TeXcolorgray -741 4800 a Fp(1.)p 0 TeXcolorgray 651 w(Das)483
b(nac)-36 b(hstehende)481 b(Kastensc)-36 b(haubild)482
b(\(Bo)-36 b(xplot\))483 b(zeigt)h(die)e(Studiendauer)f(in)h(Semes-)921
6792 y(tern)433 b(f\374r)g(eine)h(tec)-36 b(hnisc)g(he)432
b(Studienric)-36 b(h)g(tung.)921 20580 y
 currentpoint currentpoint translate 1.43535 1.43535 scale neg exch
neg exch translate
 921 20580 a
1355 20580 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 279.1578 a add def
/d 0.0 a add neg def /h 70.06035 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 20580 a -33840 17623 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 597.09863
 0 317.94083  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 317.94083  597.09863  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -26.71829  def /maxTickline
43.34206  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 597.09863 0.0 317.94083 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-34075 18968 a Fo(0)5829 b(2)g(4)g(6)g(8)5594 b(10)5360
b(12)f(14)g(16)g(18)g(20)-63696 b(0)5829 b(2)g(4)g(6)g(8)5594
b(10)-33840 17623 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 398.33841 8.5359
483.69664 31.29819 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 31.29819 341.43292
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 569.05487 31.29819 569.05487
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 426.79115 31.29819 426.79115
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 398.33841 19.91682 341.43292
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 569.05487 19.91682 483.69664
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 32256 20580 a
currentpoint initclip moveto
 32256 20580 a
921 20580 a
 currentpoint currentpoint translate 1 1.43535 div 1 1.43535 div scale
neg exch neg exch translate
 921 20580 a 855 25117 a Fp(W)-108 b(elc)-36
b(he)616 b(A)-36 b(ussagen)616 b(kannst)h(du)e(diesem)i(Kastensc)-36
b(haubild)615 b(en)-36 b(tnehmen?)616 b(Kreuze)g(die)921
27109 y(zutre\033ende\(n\))431 b(A)-36 b(ussage\(n\))433
b(an.)p 1062 29810 44260 45 v 1062 32873 45 3064 v 1770
31670 a(Die)i(Spann)-36 b(w)g(eite)432 b(b)36 b(etr\344gt)434
b(12)g(Semester.)p 42912 32873 V 45277 32873 V 1062 32917
44260 45 v 1062 36061 45 3145 v 1770 34858 a(25\045)h(der)e
(Studierenden)e(studieren)i(h\366)36 b(c)-36 b(hstens)432
b(14)j(Semester)d(lang.)p 42912 36061 V 1 0 0 TeXcolorrgb
43621 34821 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 36061 V 1062 36106 44260 45 v 1062
41081 45 4976 v 1903 37621 a Fo(1)p 1903 37834 471 45
v 1903 38602 a(4)2846 38144 y Fp(der)339 b(Studierenden)e(b)36
b(en\366tigt)340 b(f\374r)f(den)g(Absc)-36 b(hluss)339
b(des)g(Studiums)f(mindestens)1770 40136 y(17)435 b(Semester.)p
42912 41081 45 4976 v 1 0 0 TeXcolorrgb 43621 38926 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 41081 V 1062 41125 44260 45 v 1062 46003 45 4878
v 1770 43067 a Fp(Mindestens)386 b(50\045)g(der)g(Studierenden)d(b)36
b(en\366tigen)386 b(f\374r)g(den)f(Absc)-36 b(hluss)386
b(des)f(Stu-)1770 45058 y(diums)434 b(zwisc)-36 b(hen)433
b(15)h(und)f(17)h(Semestern.)p 42912 46003 V 45277 46003
V 1062 46048 44260 45 v 1062 49111 45 3064 v 1770 47908
a(Es)g(gibt)g(Studierende,)e(die)h(ihr)h(Studium)e(erst)h(nac)-36
b(h)433 b(10)h(Jahren)f(b)36 b(eenden.)p 42912 49111
V 1 0 0 TeXcolorrgb 43621 47911 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 49111 V 1062 49155
44260 45 v 47992 4800 a Fm(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Fl(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 53183 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(WS)717 b(1.1)g(-)g(2)h(T)-179
b(agesums\344tze)716 b(-)i(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fp(2.)p 0 TeXcolorgray 651
w(Die)479 b(T)-108 b(agesums\344tze)480 b(\(in)e Fk(e)p
Fp(\))g(eines)h(Restauran)-36 b(ts)478 b(f\374r)g(eine)h(b)36
b(estimm)-36 b(te)478 b(W)-108 b(o)36 b(c)-36 b(he)479
b(sind)f(im)921 6792 y(folgenden)434 b(Diagramm)h(angegeb)36
b(en:)8775 24836 y

 8775 24836 a 8775 24836 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 8775 24836
a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -70.68663 -17.65697 ] concat

 pgfs


 16629 21452 a

 16629 21452 a 16629 21452 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.19925 pgfw

 /pgfsc{0 setgray}def

 10.08012 -12.80052 moveto

 10.08012 140.79814 lineto

 20.16025 -12.80052 moveto

 20.16025 140.79814 lineto

 30.24037 -12.80052 moveto

 30.24037 140.79814 lineto

 40.32051 -12.80052 moveto

 40.32051 140.79814 lineto

 60.48076 -12.80052 moveto

 60.48076 140.79814 lineto

 70.56088 -12.80052 moveto

 70.56088 140.79814 lineto

 80.64102 -12.80052 moveto

 80.64102 140.79814 lineto

 90.72115 -12.80052 moveto

 90.72115 140.79814 lineto

 110.8814 -12.80052 moveto

 110.8814 140.79814 lineto

 120.96153 -12.80052 moveto

 120.96153 140.79814 lineto

 131.04166 -12.80052 moveto

 131.04166 140.79814 lineto

 141.12178 -12.80052 moveto

 141.12178 140.79814 lineto

 161.28204 -12.80052 moveto

 161.28204 140.79814 lineto

 171.36217 -12.80052 moveto

 171.36217 140.79814 lineto

 181.44229 -12.80052 moveto

 181.44229 140.79814 lineto

 191.52242 -12.80052 moveto

 191.52242 140.79814 lineto

 211.68268 -12.80052 moveto

 211.68268 140.79814 lineto

 221.7628 -12.80052 moveto

 221.7628 140.79814 lineto

 231.84293 -12.80052 moveto

 231.84293 140.79814 lineto

 241.92307 -12.80052 moveto

 241.92307 140.79814 lineto

 262.08331 -12.80052 moveto

 262.08331 140.79814 lineto

 272.16344 -12.80052 moveto

 272.16344 140.79814 lineto

 282.24358 -12.80052 moveto

 282.24358 140.79814 lineto

 292.3237 -12.80052 moveto

 292.3237 140.79814 lineto

 gsave pgfsc pgfstr grestore newpath

0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.99628 pgfw

 /pgfsc{0 setgray}def

 0.0 -12.80052 moveto

 0.0 140.79814 lineto

 50.40063 -12.80052 moveto

 50.40063 140.79814 lineto

 100.80127 -12.80052 moveto

 100.80127 140.79814 lineto

 151.2019 -12.80052 moveto

 151.2019 140.79814 lineto

 201.60255 -12.80052 moveto

 201.60255 140.79814 lineto

 252.00319 -12.80052 moveto

 252.00319 140.79814 lineto

 302.40382 -12.80052 moveto

 302.40382 140.79814 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75
TeXcolorgray
 0.00099 pgfw

 /pgfsc{1 setgray}def

 0.0 4.26659 moveto

 302.40382 4.26659 lineto

 0.0 8.53317 moveto

 302.40382 8.53317 lineto

 0.0 12.79976 moveto

 302.40382 12.79976 lineto

 0.0 17.06635 moveto

 302.40382 17.06635 lineto

 0.0 25.59952 moveto

 302.40382 25.59952 lineto

 0.0 29.8661 moveto

 302.40382 29.8661 lineto

 0.0 34.13269 moveto

 302.40382 34.13269 lineto

 0.0 38.39928 moveto

 302.40382 38.39928 lineto

 0.0 46.93245 moveto

 302.40382 46.93245 lineto

 0.0 51.19904 moveto

 302.40382 51.19904 lineto

 0.0 55.46562 moveto

 302.40382 55.46562 lineto

 0.0 59.73221 moveto

 302.40382 59.73221 lineto

 0.0 68.26538 moveto

 302.40382 68.26538 lineto

 0.0 72.53198 moveto

 302.40382 72.53198 lineto

 0.0 76.79857 moveto

 302.40382 76.79857 lineto

 0.0 81.06516 moveto

 302.40382 81.06516 lineto

 0.0 89.59833 moveto

 302.40382 89.59833 lineto

 0.0 93.86491 moveto

 302.40382 93.86491 lineto

 0.0 98.1315 moveto

 302.40382 98.1315 lineto

 0.0 102.39809 moveto

 302.40382 102.39809 lineto

 0.0 110.93126 moveto

 302.40382 110.93126 lineto

 0.0 115.19785 moveto

 302.40382 115.19785 lineto

 0.0 119.46443 moveto

 302.40382 119.46443 lineto

 0.0 123.73102 moveto

 302.40382 123.73102 lineto

 0.0 132.26419 moveto

 302.40382 132.26419 lineto

 0.0 136.53078 moveto

 302.40382 136.53078 lineto

 0.0 140.79738 moveto

 302.40382 140.79738 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.00099 pgfw

 /pgfsc{1 setgray}def

 0.0 0.0 moveto

 302.40382 0.0 lineto

 0.0 21.33293 moveto

 302.40382 21.33293 lineto

 0.0 42.66586 moveto

 302.40382 42.66586 lineto

 0.0 63.9988 moveto

 302.40382 63.9988 lineto

 0.0 85.33174 moveto

 302.40382 85.33174 lineto

 0.0 106.66467 moveto

 302.40382 106.66467 lineto

 0.0 127.9976 moveto

 302.40382 127.9976 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 10.08012 -14.21794 moveto

 10.08012 -11.3831 lineto

 20.16025 -14.21794 moveto

 20.16025 -11.3831 lineto

 30.24037 -14.21794 moveto

 30.24037 -11.3831 lineto

 40.32051 -14.21794 moveto

 40.32051 -11.3831 lineto

 60.48076 -14.21794 moveto

 60.48076 -11.3831 lineto

 70.56088 -14.21794 moveto

 70.56088 -11.3831 lineto

 80.64102 -14.21794 moveto

 80.64102 -11.3831 lineto

 90.72115 -14.21794 moveto

 90.72115 -11.3831 lineto

 110.8814 -14.21794 moveto

 110.8814 -11.3831 lineto

 120.96153 -14.21794 moveto

 120.96153 -11.3831 lineto

 131.04166 -14.21794 moveto

 131.04166 -11.3831 lineto

 141.12178 -14.21794 moveto

 141.12178 -11.3831 lineto

 161.28204 -14.21794 moveto

 161.28204 -11.3831 lineto

 171.36217 -14.21794 moveto

 171.36217 -11.3831 lineto

 181.44229 -14.21794 moveto

 181.44229 -11.3831 lineto

 191.52242 -14.21794 moveto

 191.52242 -11.3831 lineto

 211.68268 -14.21794 moveto

 211.68268 -11.3831 lineto

 221.7628 -14.21794 moveto

 221.7628 -11.3831 lineto

 231.84293 -14.21794 moveto

 231.84293 -11.3831 lineto

 241.92307 -14.21794 moveto

 241.92307 -11.3831 lineto

 262.08331 -14.21794 moveto

 262.08331 -11.3831 lineto

 272.16344 -14.21794 moveto

 272.16344 -11.3831 lineto

 282.24358 -14.21794 moveto

 282.24358 -11.3831 lineto

 292.3237 -14.21794 moveto

 292.3237 -11.3831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 -14.92645 moveto

 0.0 -10.67459 lineto

 50.40063 -14.92645 moveto

 50.40063 -10.67459 lineto

 100.80127 -14.92645 moveto

 100.80127 -10.67459 lineto

 151.2019 -14.92645 moveto

 151.2019 -10.67459 lineto

 201.60255 -14.92645 moveto

 201.60255 -10.67459 lineto

 252.00319 -14.92645 moveto

 252.00319 -10.67459 lineto

 302.40382 -14.92645 moveto

 302.40382 -10.67459 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 -2.83513 4.26659 moveto

 0.0 4.26659 lineto

 -2.83513 8.53317 moveto

 0.0 8.53317 lineto

 -2.83513 12.79976 moveto

 0.0 12.79976 lineto

 -2.83513 17.06635 moveto

 0.0 17.06635 lineto

 -2.83513 25.59952 moveto

 0.0 25.59952 lineto

 -2.83513 29.8661 moveto

 0.0 29.8661 lineto

 -2.83513 34.13269 moveto

 0.0 34.13269 lineto

 -2.83513 38.39928 moveto

 0.0 38.39928 lineto

 -2.83513 46.93245 moveto

 0.0 46.93245 lineto

 -2.83513 51.19904 moveto

 0.0 51.19904 lineto

 -2.83513 55.46562 moveto

 0.0 55.46562 lineto

 -2.83513 59.73221 moveto

 0.0 59.73221 lineto

 -2.83513 68.26538 moveto

 0.0 68.26538 lineto

 -2.83513 72.53198 moveto

 0.0 72.53198 lineto

 -2.83513 76.79857 moveto

 0.0 76.79857 lineto

 -2.83513 81.06516 moveto

 0.0 81.06516 lineto

 -2.83513 89.59833 moveto

 0.0 89.59833 lineto

 -2.83513 93.86491 moveto

 0.0 93.86491 lineto

 -2.83513 98.1315 moveto

 0.0 98.1315 lineto

 -2.83513 102.39809 moveto

 0.0 102.39809 lineto

 -2.83513 110.93126 moveto

 0.0 110.93126 lineto

 -2.83513 115.19785 moveto

 0.0 115.19785 lineto

 -2.83513 119.46443 moveto

 0.0 119.46443 lineto

 -2.83513 123.73102 moveto

 0.0 123.73102 lineto

 -2.83513 132.26419 moveto

 0.0 132.26419 lineto

 -2.83513 136.53078 moveto

 0.0 136.53078 lineto

 -2.83513 140.79738 moveto

 0.0 140.79738 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 -4.25229 0.0 moveto

 0.0 0.0 lineto

 -4.25229 21.33293 moveto

 0.0 21.33293 lineto

 -4.25229 42.66586 moveto

 0.0 42.66586 lineto

 -4.25229 63.9988 moveto

 0.0 63.9988 lineto

 -4.25229 85.33174 moveto

 0.0 85.33174 lineto

 -4.25229 106.66467 moveto

 0.0 106.66467 lineto

 -4.25229 127.9976 moveto

 0.0 127.9976 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 0.0 -12.80052 moveto

 300.4113 -12.80052 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 300.4113 -12.80052 ] concat

 save 1.99252 0.0 moveto -1.19551 1.59401 lineto 0.0 0.0 lineto -1.19551
-1.59401 lineto pgffill restore

 restore

 0.0 -12.80052 moveto

 0.0 138.80562 lineto

 pgfstr

 save

 [0.0 1.0 -1.0 0.0 0.0 138.80562 ] concat

 save 1.99252 0.0 moveto -1.19551 1.59401 lineto 0.0 0.0 lineto -1.19551
-1.59401 lineto pgffill restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.92654 -26.55591 ] concat

 pgfs



 0 setgray

16629 21452 a Fj(0)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 38.69441 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fj(1000)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 89.09505 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fj(2000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 139.49568 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452
a Fj(3000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 189.89633 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fj(4000)16629 21452
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 240.29697 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fj(5000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 290.6976 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fj(6000)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -47.37021 -2.95554 ] concat

 pgfs



 0 setgray
 16629 21452 a Fp(Mon)-36 b(tag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -53.12775 18.3774 ] concat

 pgfs



 0 setgray

16629 21452 a Fp(Dienstag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -56.79988 38.54802 ] concat

 pgfs



 0 setgray
 16629 21452 a
Fp(Mitt)g(w)g(o)36 b(c)-36 b(h)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -66.78502 61.04326 ] concat

 pgfs



 0 setgray
 16629 21452
a Fp(Donnerstag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -44.28232 82.3762 ] concat

 pgfs



 0 setgray
 16629 21452 a Fp(F)-108
b(reitag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -51.34145 103.70914 ] concat

 pgfs



 0 setgray
 16629 21452 a Fp(Samstag)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -49.65065 125.04207 ] concat

 pgfs



 0 setgray
 16629 21452 a Fp(Sonn)-36 b(tag)16629 21452 y


 pgfr

 restore

 restore

 0.0 -12.80052 moveto

 302.40382 -12.80052 lineto

 302.40382 140.79814 lineto

 0.0 140.79814 lineto

 closepath

 clip

 newpath

 save

0 0 1 TeXcolorrgb
 /pgffc{0.7 0.7 1 setrgbcolor}def

 9.96277 181.44229 0.0 -4.98138 pgfe

 9.96277 191.52242 0.0 16.35155 pgfe

 9.96277 120.96153 0.0 37.68448 pgfe

 9.96277 131.04166 0.0 59.01741 pgfe

 9.96277 201.60255 0.0 80.35036 pgfe

 9.96277 272.16344 0.0 101.68329 pgfe

 9.96277 241.92307 0.0 123.01622 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 8775 24836 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 921 31336
a Fp(Berec)g(hne)433 b(den)g(durc)-36 b(hsc)g(hnittlic)g(hen)431
b(T)-108 b(agesumsatz)434 b(f\374r)f(diese)h(W)-108 b(o)36
b(c)-36 b(he.)p 1 0 0 TeXcolorrgb 1054 35087 a Fj(4)221
b(800)297 b(+)e(5)221 b(400)296 b(+)f(4)221 b(000)297
b(+)e(2)221 b(400)297 b(+)e(3)221 b(800)297 b(+)e(3)221
b(600)p 1054 35675 24947 45 v 13202 36896 a(7)26502 35985
y(=)369 b(3)221 b(800)921 40522 y Fp(Der)434 b(durc)-36
b(hsc)g(hnittlic)g(he)431 b(T)-108 b(agesumsatz)434 b(b)36
b(etr\344gt)434 b Fk(e)650 b Fp(3.800.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fm(___/1)p
1 0 0 TeXcolorrgb 47905 6792 a Fl(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 44256
54804 45 v 0 TeXcolorgray 24746 81281 a Fp(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(WS)717 b(1.1)g(-)g(3)h(Bo)-60
b(xplot)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741
4800 a Fp(3.)p 0 TeXcolorgray 651 w(Die)437 b(Nettogeh\344lter)g(v)-36
b(on)436 b(44)h(Angestellten)f(einer)h(Firmenabteilung)e(w)-36
b(erden)436 b(durc)-36 b(h)435 b(fol-)921 6792 y(gendes)e(Kastensc)-36
b(haubild)433 b(\(Bo)-36 b(xplot\))434 b(dargestellt:)921
14214 y
 currentpoint currentpoint translate 0.55235 0.55235 scale neg exch
neg exch translate
 921 14214 a 1355 14214 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 658.09819 a add def
/d 0.0 a add neg def /h 105.08359 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 14214 a 4345 9691
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 631.08208
 0 -27.01611  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -27.01611  631.08208  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -40.86174  def /maxTickline
64.22185  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 1 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -4.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 631.08208 0.0 -27.01611 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 4345 9691 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4345 9691 a 4345
9691 a
tx@Dict begin  { 631.08208 64.22185 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 4345 9691 a 4345 9691
a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 4345
9691 a 4345 9691 a
tx@Dict begin  { 0.0 0.0 pop 631.08208 64.22185 exch pop } PutCoor
PutBegin  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4345 9691
a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 113.81097 8.5359
312.98018 31.29819 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 31.29819 28.45274
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 597.50761 31.29819 597.50761
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 199.1692 31.29819 199.1692
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 19.91682 28.45274
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 597.50761 19.91682 312.98018
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 4345 9691 a
tx@Dict begin  { -21.8562 -7.11317 } PutCoor PutBegin  end
 4345
9691 a 925 x Fk(e)650 b Fp(1.000)4345 9691 y
tx@Dict begin  PutEnd  end
 4345 9691
a 4345 9691 a
tx@Dict begin  { 263.68802 -7.11317 } PutCoor PutBegin  end
 4345 9691 a 925 x Fk(e)g Fp(2.000)4345
9691 y
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 546.03339 -7.11317 } PutCoor PutBegin  end
 4345 9691 a 925 x Fk(e)g
Fp(3.000)4345 9691 y
tx@Dict begin  PutEnd  end
 4345 9691 a 74203 14214 a
currentpoint initclip moveto
 74203
14214 a 921 14214 a
 currentpoint currentpoint translate 1 0.55235 div 1 0.55235 div scale
neg exch neg exch translate
 921 14214 a 2545 x Fp(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 3699 17726 38985 45 v 3699 20800 45 3074 v 4408
19597 a(22)g(Angestellte)g(v)-36 b(erdienen)433 b(mehr)g(als)h
Fk(e)650 b Fp(2.400.)p 40275 20800 V 42640 20800 V 3699
20844 38985 45 v 3699 23918 45 3074 v 4408 22715 a(Drei)434
b(Viertel)g(der)f(Angestellten)g(v)-36 b(erdienen)433
b Fk(e)651 b Fp(2.100)435 b(o)36 b(der)433 b(mehr.)p
40275 23918 V 42640 23918 V 3699 23962 38985 45 v 3699
27036 45 3074 v 4408 25833 a(Ein)g(Viertel)h(aller)h(Angestellten)e(v)
-36 b(erdien)g(t)433 b Fk(e)650 b Fp(1.400)436 b(o)36
b(der)433 b(w)-36 b(eniger.)p 40275 27036 V 1 0 0 TeXcolorrgb
40983 25831 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 42640 27036 V 3699 27080 38985 45 v 3699
30154 45 3074 v 4408 28951 a Fp(Es)433 b(gibt)h(Angestellte,)g(die)g
(mehr)f(als)h Fk(e)650 b Fp(3.300)435 b(v)-36 b(erdienen.)p
40275 30154 V 42640 30154 V 3699 30199 38985 45 v 3699
35328 45 5129 v 4408 32059 a(Das)434 b(Nettogehalt)g(der)f(H\344lfte)i
(aller)f(Angestellten)g(liegt)g(im)g(Bereic)-36 b(h)4408
34051 y Fj([)8 b Fk(e)433 b Fp(1.400)r Fj(;)221 b Fk(e)434
b Fp(2.100)r Fj(])p Fp(.)p 40275 35328 V 1 0 0 TeXcolorrgb
40983 33095 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 42640 35328 V 3699 35372 38985 45 v 47992
4800 a Fm(___/1)p 1 0 0 TeXcolorrgb 47905 6792 a Fl(WS)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 39400 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(3)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(WS)717 b(1.1)g(-)g(4)h(Nationalratsw)-60
b(ahl)716 b(-)i(MC)f(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fp(4.)p 0 TeXcolorgray 651 w(In)728 b(der)g(folgenden)h
(Abbildung)f(sind)g(die)g(Ergebnisse)h(der)e(Nationalratsw)-36
b(ahl)730 b(2006)769 6792 y(\(linksstehende)486 b(Balk)-36
b(en\))487 b(und)e(der)h(Nationalratsw)-36 b(ahl)489
b(2008)f(\(rec)-36 b(h)g(tsstehende)484 b(Balk)-36 b(en\))921
8784 y(dargestellt.)433 b(Alle)h(Prozen)-36 b(ts\344tze)432
b(b)36 b(eziehen)433 b(sic)-36 b(h)432 b(auf)h(die)g(Anzahl)g(der)f
(g\374ltigen)h(abgege-)921 10776 y(b)36 b(enen)433 b(Stimmen,)g(die)g
(2006)i(und)e(2008)i(ungef\344hr)e(gleic)-36 b(h)434
b(w)-36 b(ar.)921 38543 y
 currentpoint currentpoint translate 0.79137 0.79137 scale neg exch
neg exch translate
 921 38543 a 3089 38543 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 493.84802 a add def
/d 0.0 a add neg def /h 286.64555 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3089
38543 a 7070 34879 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.4523
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 457.88138
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  457.88138  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 253.5497  def
/dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 253.5497
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  253.5497  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 457.88138  def
/dT 1864650 abs 65536 div viceversa { neg } if def /DT 5. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 5825 35165 a Fo(0)5825
32015 y(5)5354 28865 y(10)5354 25716 y(15)5354 22566
y(20)5354 19417 y(25)5354 16267 y(30)5354 13118 y(35)5354
9968 y(40)7070 34879 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 48.36957 0.0 48.36957
200.87326 19.91682 200.87326 19.91682 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  [ 76.82231 0.0
76.82231 166.7305 48.36957 166.7305 48.36957 0.0  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0 0.2  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 133.7278 0.0 133.7278
195.1828 105.27505 195.1828 105.27505 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 162.18054 0.0 162.18054
147.95197 133.7278 147.95197 133.7278 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 219.08603 0.0 219.08603
62.59506 190.63329 62.59506 190.63329 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  [ 247.53877 0.0
247.53877 99.58305 219.08603 99.58305 219.08603 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.2 0.2 1  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 304.44426 0.0 304.44426
62.59506 275.99152 62.59506 275.99152 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  [ 332.897 0.0 332.897
59.18074 304.44426 59.18074 304.44426 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.8 0  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 389.80249 0.0 389.80249
23.33092 361.34975 23.33092 361.34975 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  [ 418.25523 0.0
418.25523 60.8879 389.80249 60.8879 389.80249 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.6 0.2  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 19.91682 200.87326 19.91682
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 48.36957 200.87326 19.91682
200.87326   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 48.36957 0.0 48.36957 200.87326
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 19.91682 0.0 48.36957 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 166.7305 48.36957
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 166.7305 48.36957
166.7305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 0.0 76.82231
166.7305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 0.0 76.82231
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 195.1828 105.27505
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 195.1828 105.27505
195.1828   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 0.0 133.7278
195.1828   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 0.0 133.7278
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.7278 147.95197 133.7278 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.18054 147.95197 133.7278 147.95197
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.18054 0.0 162.18054 147.95197 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.7278 0.0 162.18054 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 190.63329 62.59506 190.63329
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 62.59506 190.63329
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 0.0 219.08603
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 190.63329 0.0 219.08603
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 99.58305 219.08603
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 247.53877 99.58305 219.08603
99.58305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 247.53877 0.0 247.53877
99.58305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 0.0 247.53877
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 275.99152 62.59506 275.99152
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 62.59506 275.99152
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 0.0 304.44426
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 275.99152 0.0 304.44426
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 59.18074 304.44426
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 332.897 59.18074 304.44426
59.18074   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 332.897 0.0 332.897 59.18074
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 0.0 332.897
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 361.34975 23.33092 361.34975
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 23.33092 361.34975
23.33092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 0.0 389.80249
23.33092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 361.34975 0.0 389.80249
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 60.8879 389.80249
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 418.25523 60.8879 389.80249
60.8879   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 418.25523 0.0 418.25523
60.8879   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 0.0 418.25523
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 7070 34879 a
tx@Dict begin  { 38.81166 -7.6508 } PutCoor PutBegin  end
 7070
34879 a 1111 x Fp(SP\326)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 123.97583 -8.17014 } PutCoor PutBegin  end
 7070 34879 a 1111 x Fp(\326)g(VP)7070 34879 y
tx@Dict begin  PutEnd  end

7070 34879 a 7070 34879 a
tx@Dict begin  { 210.17848 -8.68938 } PutCoor PutBegin  end
 7070 34879 a 1111 x Fp(FP\326)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 295.34265 -8.68938 } PutCoor PutBegin  end
 7070 34879 a 1111 x
Fp(GR)g(\334NE)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 383.10349 -8.68938 } PutCoor PutBegin  end

7070 34879 a 1111 x Fp(BZ\326)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879
a 7070 34879 a
tx@Dict begin  { 23.2329 215.64183 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(35,3\045)7070 34879
y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 51.27493 180.84976 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(29,3\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 106.83931 209.41042 } PutCoor PutBegin  end
 7070 34879 a 996 x
Fp(34,3\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 136.95834 161.6362 } PutCoor PutBegin  end
 7070
34879 a 996 x Fp(26,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 186.83226 76.99269 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(11,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070
34879 a 7070 34879 a
tx@Dict begin  { 220.56433 112.82333 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(17,5\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 277.68689 76.47337 } PutCoor PutBegin  end
 7070 34879 a 996 x
Fp(11,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 307.28667 73.87698 } PutCoor PutBegin  end
 7070
34879 a 996 x Fp(10,4\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 362.3318 37.00769 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(4,1\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070
34879 a 7070 34879 a
tx@Dict begin  { 390.3734 74.39622 } PutCoor PutBegin  end
 7070 34879 a 996 x Fp(10,7\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 34.13799 8.44704 } PutCoor PutBegin  end
 7070 34879 a 0.5 TeXcolorgray
Fo(1)p 0 TeXcolorgray 7070 34879 a
tx@Dict begin  PutEnd  end
 7070 34879 a 57756
38543 a
currentpoint initclip moveto
 57756 38543 a 921 38543 a
 currentpoint currentpoint translate 1 0.79137 div 1 0.79137 div scale
neg exch neg exch translate
 921 38543 a 2545 x
Fp(\334b)36 b(erpr\374fe)373 b(anhand)g(der)g(Abbildung)g(die)h
(folgenden)g(A)-36 b(ussagen)374 b(und)e(kreuze)i(die)g(b)36
b(eiden)921 43080 y(zutre\033enden)432 b(A)-36 b(ussagen)433
b(an.)p 1062 44047 44260 45 v 1062 49298 45 5252 v 1770
46103 a(Das)317 b(BZ\326)d(hat)i(seinen)f(Stimmenan)-36
b(teil)315 b(v)-36 b(on)315 b(2006)i(auf)f(2008)g(um)f(mehr)g(als)h
(100\045)1770 48095 y(gesteigert.)p 42912 49298 V 1 0 0
TeXcolorrgb 43621 47004 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 49298 V 1062 49342 44260
45 v 1062 52601 45 3260 v 1770 51398 a Fp(Die)435 b(GR)-36
b(\334NEN)433 b(erreic)-36 b(h)g(ten)432 b(2006)j(w)-36
b(eniger)434 b(Stimmenan)-36 b(teile)433 b(als)i(2008.)p
42912 52601 V 45277 52601 V 1062 52646 44260 45 v 1062
57897 45 5252 v 1770 54702 a(Der)f(Stimmenan)-36 b(teil)433
b(der)g(\326)-36 b(VP)434 b(hat)f(v)-36 b(on)434 b(2006)h(auf)f(2008)g
(um)g(fast)g(ein)f(Viertel)1770 56694 y(abgenommen.)p
42912 57897 V 1 0 0 TeXcolorrgb 43621 55603 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
57897 V 1062 57941 44260 45 v 1062 63192 45 5252 v 1770
59997 a Fp(Die)i(Anzahl)e(der)g(erreic)-36 b(h)g(ten)433
b(Stimmen)g(f\374r)g(die)h(SP\326)e(hat)i(v)-36 b(on)434
b(2006)g(auf)g(2008)1770 61989 y(um)g(6\045)f(abgenommen.)p
42912 63192 V 45277 63192 V 1062 63237 44260 45 v 1062
68229 45 4993 v 1770 65293 a(Das)406 b(BZ\326)f(hat)g(v)-36
b(on)406 b(2006)g(auf)g(2008)g(deutlic)-36 b(h)405 b(mehr)f(Stimmen)h
(dazugew)-36 b(onnen)1770 67284 y(als)435 b(die)e(FP\326.)p
42912 68229 V 45277 68229 V 1062 68274 44260 45 v 47992
4800 a Fm(___/1)p 1 0 0 TeXcolorrgb 47905 6792 a Fl(WS)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 72302 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(WS)624 b(1.1)f(-)i(5)f(Median)f(und)g(Mo)
60 b(dus)623 b(-)h(O)-60 b(A)625 b(-)f(BIFIE)h(-)f(K)-60
b(omp)60 b(etenz-)-2331 4515 y(c)-60 b(hec)g(k)718 b(2016)p
0 TeXcolorgray -741 7823 a Fp(5.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(ungeordnete)g(Liste)g(v)-36
b(on)434 b(19)g(nat\374rlic)-36 b(hen)433 b(Zahlen:)921
10368 y(5,)h(15,)h(14,)f(2,)g(5,)h(13,)f(11,)h(9,)f(7,)g(16,)h(15,)f
(9,)g(10,)h(14,)f(3,)h(14,)f(5,)g(15,)h(14)921 12913
y(Gib)e(den)g(Median)g(und)g(den)f(Mo)36 b(dus)434 b(dieser)f(Liste)g
(an.)921 15459 y(Median:)p 1 0 0 TeXcolorrgb(11)p 0 0 0
TeXcolorrgb 921 18004 a(Mo)36 b(dus:)p 1 0 0 TeXcolorrgb(14)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fm(___/1)p
1 0 0 TeXcolorrgb 47905 9815 a Fl(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 21479
54804 45 v 0 TeXcolorgray 24746 81281 a Fp(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fq(WS)1030 b(1.1)h(-)g(6)g(In)-60
b(ternetplattform)1029 b(-)j(MC)f(-)g(Matura)g(2014/15)g(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -741 7929 a Fp(6.)p
0 TeXcolorgray 651 w(Die)607 b(Nutzung)f(einer)h(b)36
b(estimm)-36 b(ten)606 b(In)-36 b(ternetplattform)606
b(durc)-36 b(h)605 b(Jugendlic)-36 b(he)606 b(wird)h(f\374r)921
9921 y(M\344dc)-36 b(hen)639 b(und)f(Bursc)-36 b(hen)638
b(getrenn)-36 b(t)639 b(un)-36 b(tersuc)g(h)g(t.)638
b(Dab)36 b(ei)641 b(wird)e(erfasst,)i(wie)f(oft)g(die)921
11913 y(b)36 b(efragten)329 b(Jugendlic)-36 b(hen)327
b(diese)i(Plattform)g(pro)f(W)-108 b(o)36 b(c)-36 b(he)329
b(b)36 b(esuc)-36 b(hen.)328 b(Die)h(nac)-36 b(hstehenden)921
13905 y(Kastensc)g(haubilder)433 b(\(Bo)-36 b(xplots\))434
b(zeigen)g(das)f(Ergebnis)h(der)f(Un)-36 b(tersuc)g(h)g(ung.)p
0 TeXcolorgray 0 TeXcolorgray 3168 32997 a
 currentpoint currentpoint translate 1.29338 1.29338 scale neg exch
neg exch translate
 3168 32997
a 3601 32997 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 278.83255 a add def
/d 0.0 a add neg def /h 102.43085 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3601 32997 a 8011 24493 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 41 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 0.0 0.0 -76.82314   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   0  setlinejoin
1  setlinecap stroke  grestore grestore grestore 5.69046 0.0 T } repeat
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 238.99933  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 238.99933  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-149.23373  def /maxTickline 0.0  def /dT 1864650 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 5 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 5.69046  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.99933
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7776 23938 a Fo(0)2679
b(5)2444 b(10)2210 b(15)f(20)h(25)g(30)f(35)h(40)8011
24493 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 45.52368 -34.14362
142.2615 -17.07181 0 Frame  gsave 1  setgray  1. .setopacityalpha 
fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 22.76184 -68.28723
113.8092 -51.21542 0 Frame  gsave 1  setgray  1. .setopacityalpha 
fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -17.07181 0.0 -34.14362   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0  setgray  0.3
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -17.07181 182.09473 -34.14362
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 79.66644 -17.07181 79.66644 -34.14362
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 45.52368 -25.60771 0.0 -25.60771  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -25.60771 142.2615 -25.60771
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -51.21542 0.0 -68.28723   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0  setgray  0.3
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -51.21542 182.09473 -68.28723
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 68.28552 -51.21542 68.28552 -68.28723
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.76184 -59.75133 0.0 -59.75133  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -59.75133 113.8092 -59.75133
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8011 24493 a
tx@Dict begin  { 159.33289 25.60771 } PutCoor PutBegin  end
 8011 24493 a 610 x Fi(Besuc)-26 b(he)314
b(pro)f(W)-78 b(o)26 b(c)-26 b(he)8011 24493 y
tx@Dict begin  PutEnd  end
 8011 24493
a 8011 24493 a
tx@Dict begin  { -39.83322 -22.50104 } PutCoor PutBegin  end
 8011 24493 a 610 x Fi(Bursc)g(hen)8011
24493 y
tx@Dict begin  PutEnd  end
 8011 24493 a 8011 24493 a
tx@Dict begin  { -39.83322 -57.33588 } PutCoor PutBegin  end
 8011 24493 a 610 x
Fi(M\344dc)g(hen)8011 24493 y
tx@Dict begin  PutEnd  end
 8011 24493 a 34467 32997
a
currentpoint initclip moveto
 34467 32997 a 3168 32997 a
 currentpoint currentpoint translate 1 1.29338 div 1 1.29338 div scale
neg exch neg exch translate
 3168 32997 a 921 36982 a
Fp(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an.)p 1062 37948 44260 45 v 1062 42745
45 4797 v 1770 39808 a(Der)g(Median)g(der)f(Anzahl)g(v)-36
b(on)434 b(Besuc)-36 b(hen)433 b(pro)g(W)-108 b(o)36
b(c)-36 b(he)434 b(ist)f(b)36 b(ei)434 b(den)f(Bursc)-36
b(hen)1770 41800 y(et)g(w)g(as)434 b(h\366her)f(als)i(b)36
b(ei)433 b(den)g(M\344dc)-36 b(hen.)p 42912 42745 V 1 0 0
TeXcolorrgb 43621 40679 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 42745 V 1062 42789 44260
45 v 1062 47844 45 5056 v 1770 44649 a Fp(Die)435 b(Spann)-36
b(w)g(eite)432 b(der)i(w)-36 b(\366)36 b(c)-36 b(hen)g(tlic)g(hen)433
b(Nutzung)f(der)h(Plattform)h(ist)g(b)36 b(ei)434 b(den)1770
46641 y(Bursc)-36 b(hen)433 b(gr\366\377er)h(als)g(b)36
b(ei)434 b(den)f(M\344dc)-36 b(hen.)p 42912 47844 V 45277
47844 V 1062 47889 44260 45 v 1062 52685 45 4797 v 1770
49749 a(A)g(us)376 b(der)g(Gra\034k)h(kann)f(man)g(ablesen,)h(dass)g
(genauso)g(viele)g(M\344dc)-36 b(hen)376 b(wie)h(Bur-)1770
51741 y(sc)-36 b(hen)433 b(die)h(Plattform)g(w)-36 b(\366)36
b(c)-36 b(hen)g(tlic)g(h)433 b(b)36 b(esuc)-36 b(hen.)p
42912 52685 V 45277 52685 V 1062 52730 44260 45 v 1062
57785 45 5056 v 1770 54590 a(Der)434 b(An)-36 b(teil)434
b(der)f(Bursc)-36 b(hen,)433 b(die)g(mehr)g(als)h(20-mal)h(pro)e(W)-108
b(o)36 b(c)-36 b(he)433 b(die)h(Plattform)1770 56582
y(n)-36 b(\374tzen,)433 b(ist)h(zumindest)e(gleic)-36
b(h)434 b(gro\377)h(o)36 b(der)433 b(gr\366\377er)i(als)f(jener)f(der)g
(M\344dc)-36 b(hen.)p 42912 57785 V 1 0 0 TeXcolorrgb
43621 55589 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 57785 V 1062 57829 44260 45 v 1062
62965 45 5137 v 1770 59770 a Fp(Ca.)419 b(80)217 b(\045)418
b(der)f(M\344dc)-36 b(hen)417 b(und)f(ca.)j(75)217 b(\045)418
b(der)f(Bursc)-36 b(hen)416 b(n)-36 b(\374tzen)417 b(die)g(Plattform)
1770 61762 y(genau)434 b(25-mal)g(pro)g(W)-108 b(o)36
b(c)-36 b(he.)p 42912 62965 V 45277 62965 V 1062 63009
44260 45 v 47992 7929 a Fm(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Fl(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 67038 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fq(WS)696 b(1.1)g(-)h(7)f(En)-60
b(t)g(wic)g(klung)696 b(der)f(Landwirtsc)-60 b(haft)695
b(in)h(\326sterreic)-60 b(h)696 b(-)-2331 4817 y(MC)718
b(-)g(Matura)f(2014/15)g(-)g(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 8124 a Fp(7.)p 0 TeXcolorgray
651 w(Der)415 b(W)-108 b(ebsite)415 b(der)f(Statistik)h(A)-36
b(ustria)415 b(kann)f(man)h(folgende)h(T)-108 b(ab)36
b(elle)415 b(\374b)36 b(er)414 b(die)h(En)-36 b(t)g(wic)g(k-)921
10116 y(lung)433 b(der)g(Agrarstruktur)g(in)h(\326sterreic)-36
b(h)432 b(en)-36 b(tnehmen:)p 6538 11747 30490 45 v 6538
11747 V 6538 13739 45 1992 v 7246 13141 a(Jahr)p 20509
13739 V 12183 w(1995)p 26000 13739 V 2892 w(1999)p 31492
13739 V 2891 w(2010)p 36983 13739 V 6538 13783 30490
45 v 6538 13783 V 6538 19759 45 5976 v 7246 15177 a(Anzahl)575
b(der)f(land-)g(und)7246 17169 y(forst)-36 b(wirtsc)g(haftlic)g(hen)
7246 19161 y(Betrieb)36 b(e)434 b(insgesam)-36 b(t)p
20509 19759 V 21217 15177 a(239)217 b(099)p 26000 19759
V 1375 w(217)g(508)p 31492 19759 V 1374 w(173)g(317)p
36983 19759 V 6538 19803 30490 45 v 6538 19803 V 6538
23787 45 3984 v 7246 21197 a(durc)-36 b(hsc)g(hnittlic)g(he)1227
b(Be-)7246 23189 y(triebsgr\366\377e)434 b(in)g(Hektar)p
20509 23787 V 22121 21197 a(31,5)p 26000 23787 V 3180
w(34,6)p 31492 23787 V 3181 w(42,4)p 36983 23787 V 6538
23831 30490 45 v 6538 23831 V 0 TeXcolorgray 0 TeXcolorgray
921 26527 a Fh(Datenquelle:)275 b(h)-22 b(ttp://www.statistik.at/w)g
(eb_de/statistik)g(en/land_und_forst)g(wirtsc)g(haft/index.h)g(tml)921
32503 y Fp(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an.)p 1062 33470 44260 45 v 1062 38525
45 5056 v 1770 35330 a(Die)378 b(Anzahl)e(der)g(land-)g(und)f(forst)-36
b(wirtsc)g(haftlic)g(hen)377 b(Betrieb)36 b(e)376 b(ist)h(im)f
(Zeitraum)1770 37322 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(in)e(jedem)
h(Jahr)f(um)g(die)h(gleic)-36 b(he)434 b(Zahl)g(gesunk)-36
b(en.)p 42912 38525 V 45277 38525 V 1062 38569 44260
45 v 1062 43624 45 5056 v 1770 40429 a(Die)435 b(durc)-36
b(hsc)g(hnittlic)g(he)431 b(Betriebsgr\366\377e)j(hat)g(v)-36
b(on)434 b(1995)h(bis)e(1999)i(im)f(Jahres-)1770 42421
y(durc)-36 b(hsc)g(hnitt)432 b(um)h(mehr)g(Hektar)h(zugenommen)f(als)h
(v)-36 b(on)434 b(1999)h(bis)f(2010.)p 42912 43624 V
1 0 0 TeXcolorrgb 43621 41429 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 43624 V 1062 43669
44260 45 v 1062 48724 45 5056 v 1770 45529 a Fp(Die)h(durc)-36
b(hsc)g(hnittlic)g(he)431 b(Betriebsgr\366\377e)j(hat)g(v)-36
b(on)434 b(1995)h(bis)e(1999)i(um)e(durc)-36 b(h-)1770
47521 y(sc)g(hnittlic)g(h)433 b(0,5)i(ha)e(pro)h(Jahr)f(abgenommen.)p
42912 48724 V 45277 48724 V 1062 48768 44260 45 v 1062
53823 45 5056 v 1770 50628 a(Die)383 b(Gesam)-36 b(tgr\366\377e)382
b(der)f(land-)g(und)g(forst)-36 b(wirtsc)g(haftlic)g(h)382
b(gen)-36 b(utzten)381 b(Fl\344c)-36 b(he)381 b(hat)1770
52620 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(abgenommen.)p
42912 53823 V 1 0 0 TeXcolorrgb 43621 51628 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
53823 V 1062 53867 44260 45 v 1062 58922 45 5056 v 1770
55727 a Fp(Die)378 b(Anzahl)e(der)g(land-)g(und)f(forst)-36
b(wirtsc)g(haftlic)g(hen)377 b(Betrieb)36 b(e)376 b(ist)h(im)f
(Zeitraum)1770 57719 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(um)e(mehr)g
(als)h(ein)g(Drittel)g(gesunk)-36 b(en.)p 42912 58922
V 45277 58922 V 1062 58967 44260 45 v 47992 8124 a Fm(___/1)p
1 0 0 TeXcolorrgb 47905 10116 a Fl(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62995
54804 45 v 0 TeXcolorgray 24746 81281 a Fp(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fq(WS)477 b(1.1)h(-)h(8)f(Anzahl)f(der)h
(Heizungstage)f(-)i(MC)f(-)h(Matura)f(2014/15)-2617 4622
y(-)718 b(Neb)60 b(en)-60 b(termin)716 b(2)p 0 TeXcolorgray
-741 7929 a Fp(8.)p 0 TeXcolorgray 651 w(Die)350 b(K)-36
b(\366rp)36 b(ergr\366\377en)349 b(der)f Fj(450)i Fp(Sc)-36
b(h)g(\374lerInnen)347 b(einer)i(Sc)-36 b(h)g(ulstufe)347
b(einer)i(Gemeinde)f(wurden)921 9921 y(in)385 b(Zen)-36
b(timetern)385 b(gemessen)h(und)e(deren)h(V)-108 b(erteilung)385
b(wurde)g(in)g(einem)h(Kastensc)-36 b(haubild)769 11913
y(\(Bo)g(xplot\))434 b(gra\034sc)-36 b(h)433 b(dargestellt.)p
0 TeXcolorgray 0 TeXcolorgray 3170 23972 a
 currentpoint currentpoint translate 0.51146 0.51146 scale neg exch
neg exch translate
 3170 23972
a 4037 23972 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 707.11163 a add def
/d 0.0 a add neg def /h 175.84727 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4037 23972 a -508442 15190 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 1 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 284.52744 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  4609.34445 0.0 T 25
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 5336.71503
 0 4629.6034  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 4629.6034  5336.71503  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -79.33302  def /maxTickline
96.51425  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 96.51425
 0 -79.33302  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -79.33302  96.51425  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 4629.6034  def /maxTickline
5336.71503  def /dT 3729358 abs 65536 div viceversa { neg } if def
/DT 2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-509687 9176 a Fo(2)-510419 21728 y Fg(\000)p Fo(2)-502378
16536 y(2)5830 b(4)f(6)g(8)5594 b(10)5359 b(12)g(14)h(16)f(18)g(20)g
(22)g(24)h(26)f(28)g(30)g(32)g(34)h(36)f(38)g(40)g(42)g(44)h(46)f(48)g
(50)g(52)h(54)f(56)g(58)g(60)g(62)h(64)f(66)g(68)g(70)g(72)h(74)f(76)g
(78)g(80)g(82)h(84)f(86)g(88)g(90)h(92)f(94)g(96)g(98)5124
b(100)4889 b(102)h(104)f(106)g(108)g(110)g(112)h(114)f(116)g(118)g(120)
g(122)h(124)f(126)g(128)g(130)g(132)h(134)f(136)g(138)g(140)h(142)f
(144)g(146)g(148)g(150)h(152)f(154)g(156)g(158)g(160)h(162)f(164)g(166)
g(168)g(170)h(172)f(174)g(176)g(178)h(180)f(182)g(184)g(186)-580467
b(2)5830 b(4)f(6)g(8)5594 b(10)5359 b(12)g(14)h(16)f(18)g(20)g(22)g(24)
h(26)f(28)g(30)g(32)g(34)h(36)f(38)g(40)g(42)g(44)h(46)f(48)g(50)g(52)h
(54)f(56)g(58)g(60)g(62)h(64)f(66)g(68)g(70)g(72)h(74)f(76)g(78)g(80)g
(82)h(84)f(86)g(88)g(90)h(92)f(94)g(96)g(98)5124 b(100)4889
b(102)h(104)f(106)g(108)g(110)g(112)h(114)f(116)g(118)g(120)g(122)h
(124)f(126)g(128)g(130)g(132)h(134)f(136)g(138)g(140)h(142)f(144)g(146)
g(148)g(150)h(152)f(154)g(156)g(158)g(160)h(162)-508442
15190 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 4666.24994 14.22636
5064.58835 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4666.24994 42.67911 4666.24994
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 5263.75755 42.67911 5263.75755
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4836.9664 42.67911 4836.9664
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4666.24994 28.45274 4666.24994
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 5263.75755 28.45274 5064.58835
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-508442 15190 a
tx@Dict begin  { 5183.19716 -39.32527 } PutCoor PutBegin  end
 -508442 15190 a 915 x Fp(K)-36 b(\366rp)36
b(ergr\366\377en)434 b(in)g(cm)-508442 15190 y
tx@Dict begin  PutEnd  end
 -508442
15190 a 82311 23972 a
currentpoint initclip moveto
 82311 23972 a 3170 23972 a
 currentpoint currentpoint translate 1 0.51146 div 1 0.51146 div scale
neg exch neg exch translate
 3170
23972 a 921 27624 a Fp(Zur)928 b(In)-36 b(terpretation)928
b(dieses)h(Kastensc)-36 b(haubilds)929 b(w)-36 b(erden)928
b(v)-36 b(ersc)g(hiedene)928 b(A)-36 b(ussagen)921 29616
y(get\344tigt.)435 b(Kreuze)e(die)h(b)36 b(eiden)432
b(zutre\033enden)g(A)-36 b(ussagen)434 b(an.)p 1062 32316
44260 45 v 1062 35461 45 3145 v 1770 34258 a Fj(60)221
b(\045)435 b Fp(der)e(Sc)-36 b(h)g(\374lerInnen)432 b(sind)h(genau)g
Fj(172)221 b Ff(cm)435 b Fp(gro\377.)p 42912 35461 V
45277 35461 V 1062 35505 44260 45 v 1062 38568 45 3064
v 1770 37365 a(Mindestens)e(eine)h(Sc)-36 b(h)g(\374lerin)432
b(bzw.)i(ein)f(Sc)-36 b(h)g(\374ler)433 b(ist)h(genau)f
Fj(185)221 b Ff(cm)434 b Fp(gro\377.)p 42912 38568 V
1 0 0 TeXcolorrgb 43621 37369 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 38568 V 1062 38612
44260 45 v 1062 41573 45 2961 v 1770 40554 a Fp(H\366)36
b(c)-36 b(hstens)434 b Fj(50)221 b(\045)434 b Fp(der)f(Sc)-36
b(h)g(\374lerInnen)432 b(sind)h(kleiner)h(als)g Fj(170)221
b Ff(cm)p Fp(.)p 42912 41573 V 1 0 0 TeXcolorrgb 43621
40425 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 41573 V 1062 41617 44260 45 v 1062
44761 45 3145 v 1770 43558 a Fp(Mindestens)433 b Fj(75)221
b(\045)435 b Fp(der)e(Sc)-36 b(h)g(\374lerInnen)431 b(sind)i
(gr\366\377er)i(als)f Fj(178)221 b Ff(cm)p Fp(.)p 42912
44761 V 45277 44761 V 1062 44806 44260 45 v 1062 49942
45 5137 v 1770 46747 a(H\366)36 b(c)-36 b(hstens)351
b Fj(50)221 b(\045)352 b Fp(der)f(Sc)-36 b(h)g(\374lerInnen)348
b(sind)j(mindestens)f Fj(164)221 b Ff(cm)352 b Fp(und)e(h\366)36
b(c)-36 b(hstens)1770 48739 y Fj(178)221 b Ff(cm)435
b Fp(gro\377.)p 42912 49942 V 45277 49942 V 1062 49986
44260 45 v 47992 7929 a Fm(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Fl(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 54014 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(WS)1077 b(1.1)h(-)g(9)g(V)-179
b(erurteilungen)1075 b(Jugendlic)-60 b(he)1077 b(-)h(MC)g(-)h(Matura)
-2385 4515 y(2015/16)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 7823 a Fp(9.)p 0 TeXcolorgray
651 w(Jugendlic)-36 b(he)459 b(sind)f(laut)i(Jugendsc)-36
b(h)g(utzgesetz)457 b(1988)k(\(F)-108 b(assung)458 b(v)-36
b(om)460 b(23.3.2016\))i(P)-36 b(erso-)921 9815 y(nen,)361
b(die)g(das)h(14.)g(Leb)36 b(ensjahr,)361 b(ab)36 b(er)361
b(no)36 b(c)-36 b(h)361 b(nic)-36 b(h)g(t)360 b(das)i(18.)h(Leb)36
b(ensjahr)360 b(v)-36 b(ollendet)362 b(hab)36 b(en.)921
11806 y(Die)511 b(nac)-36 b(hstehende)509 b(Gra\034k)h(zeigt)h(f\374r)f
(den)f(Zeitraum)h(v)-36 b(on)511 b(1950)g(bis)g(2010)g(so)-36
b(w)g(ohl)511 b(die)921 13798 y(absolute)390 b(Anzahl)g(der)g(V)-108
b(erurteilungen)389 b(Jugendlic)-36 b(her)390 b(als)g(auc)-36
b(h)390 b(die)g(Anzahl)g(der)g(V)-108 b(erur-)921 15790
y(teilungen)433 b(Jugendlic)-36 b(her)433 b(b)36 b(ezogen)434
b(auf)g(100000)i(Jugendlic)-36 b(he.)5423 42092 y

 5423
42092 a 5423 42092 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 5423 42092 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -40.51985 -14.86554 ] concat

 pgfs


 9925 40440 a

 9925 40440
a 9925 40440 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray 0.4 TeXcolorgray
 25.35765 0.0 moveto

 25.35765 210.2876 lineto

 76.07297 0.0 moveto

 76.07297 210.2876 lineto

 126.7883 0.0 moveto

 126.7883 210.2876 lineto

 177.50362 0.0 moveto

 177.50362 210.2876 lineto

 228.21893 0.0 moveto

 228.21893 210.2876 lineto

 278.93425 0.0 moveto

 278.93425 210.2876 lineto

 329.64957 0.0 moveto

 329.64957 210.2876 lineto

 380.3649 0.0 moveto

 380.3649 210.2876 lineto

 pgfstr
 0.75
TeXcolorgray 0 TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray 0.4 TeXcolorgray
 0.0 0.0 moveto

 380.3649 0.0 lineto

 0.0 80.87984 moveto

 380.3649 80.87984 lineto

 0.0 161.75969 moveto

 380.3649 161.75969 lineto

 pgfstr

0.75 TeXcolorgray 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 25.35765 0.0 moveto

 25.35765 4.25282 lineto

 76.07297 0.0 moveto

 76.07297 4.25282 lineto

 126.7883 0.0 moveto

 126.7883 4.25282 lineto

 177.50362 0.0 moveto

 177.50362 4.25282 lineto

 228.21893 0.0 moveto

 228.21893 4.25282 lineto

 278.93425 0.0 moveto

 278.93425 4.25282 lineto

 329.64957 0.0 moveto

 329.64957 4.25282 lineto

 380.3649 0.0 moveto

 380.3649 4.25282 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 0.0 0.0 moveto

 4.25221 0.0 lineto

 0.0 80.87984 moveto

 4.25221 80.87984 lineto

 0.0 161.75969 moveto

 4.25221 161.75969 lineto

 380.3649 0.0 moveto

 376.11266 0.0 lineto

 380.3649 80.87984 moveto

 376.11266 80.87984 lineto

 380.3649 161.75969 moveto

 376.11266 161.75969 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 210.2876 lineto

 380.3649 210.2876 lineto

 380.3649 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 15.39488 -10.37465 ] concat

 pgfs



 0 setgray
 9925 40440 a Fl(1950)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 69.70789 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Fl('60)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 120.4232 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a
Fl('70)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 171.13853 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Fl('80)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 221.85385 -10.96393 ] concat

 pgfs



 0 setgray

9925 40440 a Fl('90)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 272.56917 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Fl('00)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 319.6868 -10.37465 ] concat

 pgfs



 0 setgray
 9925 40440 a Fl(2010)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 380.3649 -4.10085 ] concat

 pgfs



 0 setgray
 9925 40440
a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -9.95395 -3.7643 ] concat

 pgfs



 0 setgray
 9925 40440 a Fp(0)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.76512 77.11554 ] concat

 pgfs



 0 setgray
 9925 40440 a Fp(5.000)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.61824 157.99539 ] concat

 pgfs



 0 setgray
 9925 40440 a Fp(10.000)9925 40440 y


 pgfr

 restore

 restore

 0.0 0.0 moveto

 380.3649 0.0 lineto

 380.3649 210.2876 lineto

 0.0 210.2876 lineto

 closepath

 clip

 newpath

 save

 0 setgray

 1.99255 pgfw

 10.14305 83.30623 moveto

 10.14305 83.30623 13.80727 83.05005 15.21458 82.98271 curveto

 16.62192 82.91539 18.8788 82.88828 20.28612 82.82095 curveto

 21.69345 82.75362 23.95033 82.4301 25.35765 82.49744 curveto

 26.76497 82.56476 29.02187 83.0818 30.42918 83.30623 curveto

 31.8365 83.53065 33.38972 82.65619 35.50072 84.11504 curveto

 37.61171 85.57387 43.53279 87.53635 45.64378 93.82062 curveto

 47.75478 100.10489 49.30798 114.37036 50.71532 129.40775 curveto

 52.12263 144.44513 54.37952 193.22206 55.78685 202.1996 curveto

 57.19417 211.17715 59.45105 194.33604 60.85838 194.11162 curveto

 62.2657 193.88719 64.52258 201.92863 65.9299 200.58202 curveto

 67.33723 199.23538 69.59412 189.56812 71.00143 184.40604 curveto

 72.40877 179.24397 74.66565 167.41716 76.07297 163.37727 curveto

 77.4803 159.3374 79.73718 157.75812 81.1445 155.28929 curveto

 82.55183 152.82048 84.80872 146.25702 86.21603 145.58371 curveto

 87.62335 144.9104 89.88025 150.21208 91.28757 150.43651 curveto

 92.69489 150.66093 94.95178 148.99681 96.3591 147.20131 curveto

 97.76642 145.4058 100.02332 139.29123 101.43063 137.49573 curveto

 102.83795 135.70023 105.09485 135.8316 106.50217 134.26054 curveto

 107.90948 132.68947 110.16637 126.62141 111.5737 126.17255 curveto

 112.98102 125.72368 114.53424 130.57648 116.64523 131.02534 curveto

 118.75623 131.47421 124.6773 129.18332 126.7883 129.40775 curveto

 128.89929 129.63217 130.4525 131.07187 131.85982 132.64294 curveto

 133.26715 134.214 135.52403 140.05762 136.93135 140.73093 curveto

 138.33868 141.40424 140.59557 137.49573 142.00288 137.49573 curveto

 143.41022 137.49573 145.6671 141.8531 147.07442 140.73093 curveto

 148.48175 139.60875 150.73863 129.40775 152.14595 129.40775 curveto

 153.55327 129.40775 155.81017 139.38431 157.21748 140.73093 curveto

 158.6248 142.07755 160.8817 138.8889 162.28902 139.11333 curveto

 163.69633 139.33775 165.95323 141.67522 167.36055 142.34853 curveto

 168.76787 143.02184 171.02477 143.51724 172.43208 143.96611 curveto

 173.8394 144.415 176.09628 144.9104 177.50362 145.58371 curveto

 178.91093 146.25702 181.16782 152.18547 182.57515 148.81891 curveto

 183.98247 145.45233 186.23935 125.80853 187.64668 121.31976 curveto

 189.054 116.831 191.31088 118.03804 192.71822 116.46696 curveto

 194.12553 114.8959 196.38242 112.24095 197.78973 109.99658 curveto

 199.19707 107.75221 201.45395 104.33089 202.86127 100.291 curveto

 204.2686 96.25111 206.52548 85.3686 207.9328 80.87984 curveto

 209.34013 76.39107 211.59702 71.08119 213.00433 67.93906 curveto

 214.41167 64.79694 215.96487 58.68234 218.07587 58.23347 curveto

 220.18686 57.7846 226.10794 63.69391 228.21893 64.70387 curveto

 230.32993 65.71382 231.88315 65.28824 233.29047 65.51266 curveto

 234.69778 65.73709 236.95467 66.43367 238.362 66.32147 curveto

 239.76932 66.20926 242.0262 64.70387 243.43353 64.70387 curveto

 244.84085 64.70387 247.09773 66.5459 248.50507 66.32147 curveto

 249.91238 66.09705 252.16927 63.98402 253.5766 63.08627 curveto

 254.98392 62.18852 257.2408 60.0755 258.64813 59.85107 curveto

 260.05545 59.62665 262.31233 61.0198 263.71965 61.46867 curveto

 265.12698 61.91754 266.68019 62.6374 268.79118 63.08627 curveto

 270.90218 63.53514 276.82326 64.36722 278.93425 64.70387 curveto

 281.04524 65.04051 282.59846 65.73709 284.00578 65.51266 curveto

 285.4131 65.28824 287.67 63.64737 289.07732 63.08627 curveto

 290.48463 62.52518 292.74153 61.91754 294.14885 61.46867 curveto

 295.55617 61.0198 297.81306 60.29994 299.22038 59.85107 curveto

 300.6277 59.4022 302.88458 58.34569 304.29192 58.23347 curveto

 305.69923 58.12128 307.95612 59.15448 309.36345 59.04227 curveto

 310.77077 58.93007 313.02765 58.43463 314.43498 57.42468 curveto

 315.8423 56.41472 318.09918 52.77306 319.50652 51.76309 curveto

 320.91383 50.75313 323.17072 50.45297 324.57803 50.1455 curveto

 325.98537 49.83803 329.64957 49.54698 329.64957 49.54698 curveto

 pgfstr

 restore

 save

 0.5 setgray

 1.99255 pgfw

 10.14305 23.13162 moveto

 10.14305 23.13162 13.80727 23.34294 15.21458 23.45514 curveto

 16.62192 23.56735 18.8788 23.82822 20.28612 23.94041 curveto

 21.69345 24.05263 23.95033 24.10684 25.35765 24.26395 curveto

 26.76497 24.42104 29.02187 25.02786 30.42918 25.07274 curveto

 31.8365 25.11761 33.38972 24.47525 35.50072 24.58746 curveto

 37.61171 24.69966 43.53279 25.47757 45.64378 25.88155 curveto

 47.75478 26.28552 49.30798 26.6014 50.71532 27.49915 curveto

 52.12263 28.3969 54.37952 31.22975 55.78685 32.35193 curveto

 57.19417 33.4741 59.45105 34.68938 60.85838 35.58713 curveto

 62.2657 36.48488 64.52258 38.32855 65.9299 38.82231 curveto

 67.33723 39.31609 69.59412 38.9214 71.00143 39.14583 curveto

 72.40877 39.37025 74.66565 40.48479 76.07297 40.43991 curveto

 77.4803 40.39503 79.73718 39.2712 81.1445 38.82231 curveto

 82.55183 38.37344 84.80872 37.6536 86.21603 37.20473 curveto

 87.62335 36.75586 89.88025 35.69933 91.28757 35.58713 curveto

 92.69489 35.47491 94.95178 36.62035 96.3591 36.39592 curveto

 97.76642 36.1715 100.02332 34.19395 101.43063 33.96953 curveto

 102.83795 33.7451 105.09485 34.89052 106.50217 34.77832 curveto

 107.90948 34.6661 110.16637 33.94626 111.5737 33.16072 curveto

 112.98102 32.37518 114.53424 30.1267 116.64523 29.11673 curveto

 118.75623 28.10678 124.6773 26.21819 126.7883 25.88155 curveto

 128.89929 25.54489 130.4525 26.46591 131.85982 26.69034 curveto

 133.26715 26.91476 135.52403 27.83578 136.93135 27.49915 curveto

 138.33868 27.16249 140.59557 24.37614 142.00288 24.26395 curveto

 143.41022 24.15173 145.6671 26.01703 147.07442 26.69034 curveto

 148.48175 27.36365 150.73863 29.00453 152.14595 29.11673 curveto

 153.55327 29.22894 155.81017 27.94801 157.21748 27.49915 curveto

 158.6248 27.05028 160.8817 25.99374 162.28902 25.88155 curveto

 163.69633 25.76933 165.95323 26.69034 167.36055 26.69034 curveto

 168.76787 26.69034 171.02477 26.21819 172.43208 25.88155 curveto

 173.8394 25.54489 176.09628 24.15173 177.50362 24.26395 curveto

 178.91093 24.37614 181.16782 26.69034 182.57515 26.69034 curveto

 183.98247 26.69034 186.23935 24.82504 187.64668 24.26395 curveto

 189.054 23.70285 191.31088 23.31966 192.71822 22.64635 curveto

 194.12553 21.97304 196.38242 19.7478 197.78973 19.41115 curveto

 199.19707 19.07451 201.45395 20.44437 202.86127 20.21994 curveto

 204.2686 19.99551 206.52548 18.35464 207.9328 17.79356 curveto

 209.34013 17.23247 210.18968 16.40039 213.00433 16.17596 curveto

 215.819 15.95154 225.40427 15.95154 228.21893 16.17596 curveto

 231.0336 16.40039 231.88315 17.45691 233.29047 17.79356 curveto

 234.69778 18.1302 236.95467 18.60236 238.362 18.60236 curveto

 239.76932 18.60236 242.0262 18.01799 243.43353 17.79356 curveto

 244.84085 17.56914 247.09773 17.02963 248.50507 16.98476 curveto

 249.91238 16.93988 252.16927 17.35782 253.5766 17.47003 curveto

 254.98392 17.58223 257.2408 17.9731 258.64813 17.79356 curveto

 260.05545 17.61403 262.31233 16.28816 263.71965 16.17596 curveto

 265.12698 16.06375 266.68019 16.98476 268.79118 16.98476 curveto

 270.90218 16.98476 276.82326 16.17596 278.93425 16.17596 curveto

 281.04524 16.17596 282.59846 16.76033 284.00578 16.98476 curveto

 285.4131 17.20918 287.67 17.56914 289.07732 17.79356 curveto

 290.48463 18.01799 292.74153 18.71455 294.14885 18.60236 curveto

 295.55617 18.49014 297.81306 17.3214 299.22038 16.98476 curveto

 300.6277 16.6481 302.88458 16.06375 304.29192 16.17596 curveto

 305.69923 16.28816 307.95612 17.68135 309.36345 17.79356 curveto

 310.77077 17.90576 313.02765 17.43362 314.43498 16.98476 curveto

 315.8423 16.53589 318.09918 15.00723 319.50652 14.55836 curveto

 320.91383 14.1095 323.17072 13.99194 324.57803 13.74956 curveto

 325.98537 13.50717 329.64957 12.81136 329.64957 12.81136 curveto

 pgfstr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 329.70056 45.78268 ] concat

 pgfs



 0 setgray
 0.3 TeXcolorgray
0.3 TeXcolorgray 9925 40772 3483 1501 v 0.3 TeXcolorgray
0 TeXcolorgray 1 1 1 TeXcolorrgb 10257 40440 a Fp(3)217
b(063)p 0 TeXcolorgray 0.3 TeXcolorgray 0 TeXcolorgray
9925 40440 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 329.54561 9.04706 ] concat

 pgfs



 0 setgray
 0.5 TeXcolorgray 0.5 TeXcolorgray 9925 40772
2616 1501 v 0.5 TeXcolorgray 0 TeXcolorgray 1 1 1 TeXcolorrgb
10257 40440 a Fp(792)p 0 TeXcolorgray 0.5 TeXcolorgray
0 TeXcolorgray 9925 40440 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 /pgfsc{0 setgray}def

 save

 /pgffc{1 setgray}def

 /pgfsc{0 setgray}def

 29.19315 192.98984 179.56686 176.68852 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 182.5557 184.9831 ] concat

 pgfs


 10036 39040 a

 10036 39040
a 10036 39040 a


 pgfo

 save

 /pgffc{0 setgray}def

 save

 /pgfsc{}def/pgffc{}def

 0 setgray

 1.99255 pgfw

 0.0 0.0 moveto

 0.0 0.0 6.14426 0.0 8.50412 0.0 curveto

 10.86398 0.0 17.00826 0.0 17.00826 0.0 curveto

 pgfstr

 restore

 restore

 pgfc


 21370 39040 a

 21370 39040 a 21370 39040
a


 pgfo

 save

 save

 save

 [1.0 0.0 0.0 1.0 -49.59245 -2.55362 ] concat

 pgfs



 /pgfsc{}def/pgffc{}def

 0 setgray
 21370 39040 a Fl(V)-92 b(erurteilungen)370 b(absolut)21370
39040 y


 pgfr

 restore

 restore

 restore

 pgfc


 10036 40440 a

 10036 40440 a 10036 40440 a


 pgfo

 save

 /pgffc{0 setgray}def

 save

 /pgfsc{}def/pgffc{}def

 0.5 setgray

 1.99255 pgfw

 0.0 0.0 moveto

 0.0 0.0 6.14426 0.0 8.50412 0.0 curveto

 10.86398 0.0 17.00826 0.0 17.00826 0.0 curveto

 pgfstr

 restore

 restore

 pgfc


 21370
40440 a

 21370 40440 a 21370 40440 a


 pgfo

 save

 save

 save

 [1.0 0.0 0.0 1.0 -82.01314 -2.55362 ] concat

 pgfs



 /pgfsc{}def/pgffc{}def

 0 setgray
 21370 40440 a Fl(V)-92
b(erurteilungen)370 b(je)f(100)186 b(000)371 b(Jugendlic)-31
b(he)21370 40440 y


 pgfr

 restore

 restore

 restore

 pgfc


 9925 40440 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 5423 42092 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 855 48281
a Fp(Wie)603 b(viele)h(Jugendlic)-36 b(he)603 b(insgesam)-36
b(t)603 b(gab)h(es)f(in)g(\326sterreic)-36 b(h)602 b(in)h(et)-36
b(w)g(a)603 b(im)g(Jahr)g(2010?)921 50273 y(Kreuze)433
b(die)h(zutre\033ende)e(Anzahl)h(an.)p 18483 50981 9419
45 v 18483 53707 45 2727 v 19191 52763 a(792)217 b(000)p
25492 53707 V 27857 53707 V 18483 53752 9419 45 v 18483
56478 45 2727 v 19191 55533 a(3)g(0630)g(000)p 25492
56478 V 27857 56478 V 18483 56522 9419 45 v 18483 59249
45 2727 v 19191 58304 a(3)g(863)g(000)p 25492 59249 V
27857 59249 V 18483 59293 9419 45 v 18483 62019 45 2727
v 19191 61074 a(387)g(000)p 25492 62019 V 1 0 0 TeXcolorrgb
26200 60988 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27857 62019 V 18483 62063 9419 45 v 18483
64790 45 2727 v 19191 63845 a Fp(258)g(000)p 25492 64790
V 27857 64790 V 18483 64834 9419 45 v 18483 67560 45
2727 v 19191 66615 a(2)g(580)g(000)p 25492 67560 V 27857
67560 V 18483 67604 9419 45 v 47992 7823 a Fm(___/1)p
1 0 0 TeXcolorrgb 47905 9815 a Fl(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 71633
54804 45 v 0 TeXcolorgray 24746 81281 a Fp(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fq(WS)723 b(1.1)h(-)g(10)g(Sc)-60
b(h)g(ulstatistik)721 b(-)j(MC)h(-)f(Matura)f(2013/14)h(Haupt-)-2331
4622 y(termin)p 0 TeXcolorgray -1391 7929 a Fp(10.)p
0 TeXcolorgray 651 w(Das)553 b(nac)-36 b(hstehende)550
b(Diagramm)k(stellt)e(f\374r)g(das)g(Sc)-36 b(h)g(uljahr)552
b(2009/10)i(folgende)f(Daten)921 9921 y(dar:)p 0 TeXcolorgray
2468 13020 a Fe(\017)p 0 TeXcolorgray 650 w Fp(die)434
b(Anzahl)f(der)g(Sc)-36 b(h)g(\374ler/innen)439 b Fd(n)-42
b(ur)435 b Fp(aus)e(der)g(AHS-Un)-36 b(terstufe)p 0 TeXcolorgray
2468 15565 a Fe(\017)p 0 TeXcolorgray 650 w Fp(die)613
b(Gesam)-36 b(tanzahl)612 b(der)g(Sc)-36 b(h)g(\374ler/innen)611
b(der)h(1.-4.)j(Klasse)e(\(Hauptsc)-36 b(h)g(ule)612
b Fd(und)3734 17557 y Fp(AHS-Un)-36 b(terstufe\))921
43433 y
 currentpoint currentpoint translate 0.7091 0.7091 scale neg exch neg
exch translate
 921 43433 a 1355 43433 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 569.05487 a add def
/d 0.0 a add neg def /h 284.52742 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 43433 a 7654 35559
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 21 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 512.14938 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22636
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 213.39557 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 512.14938  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 512.14938  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 213.39557  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 213.39557
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 512.14938
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 213.39557  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 213.39557  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 512.14938  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 213.39557
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 512.14938
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4370 32694 a Fo(10)157 b(000)4370
29545 y(20)g(000)4370 26395 y(30)g(000)4370 23246 y(40)g(000)4370
20096 y(50)g(000)4370 16946 y(60)g(000)4370 13797 y(70)g(000)7654
35559 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 14.22636 8.5359 28.45274
8.5359 28.45274 0.0 14.22636 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 28.45274 25.60728 42.67911 25.60728 42.67911 0.0 28.45274 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 85.35823 0.0 85.35823 21.33955
71.13185 21.33955 71.13185 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 85.35823 61.17322 99.5846 61.17322 99.5846 0.0 85.35823 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 128.03734 58.3282 142.26372
58.3282 142.26372 0.0 128.03734 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 142.26372 177.82964 156.49008 177.82964 156.49008 0.0 142.26372
0.0  /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq {
0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 184.94283 45.52455 199.1692
45.52455 199.1692 0.0 184.94283 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 213.39557 176.40692 199.1692 176.40692 199.1692 0.0 213.39557 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 256.07469 18.4941 256.07469
0.0 241.84831 0.0 241.84831 18.4941  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 270.30106 0.0 270.30106 68.2864 256.07469 68.2864 256.07469 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 312.98018 39.83366 312.98018
0.0 298.7538 0.0 298.7538 39.83366  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 312.98018 125.1919 327.20654 125.1919 327.20654 0.0 312.98018 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 355.65929 19.91682 369.88567
19.91682 369.88567 0.0 355.65929 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 369.88567 86.78094 384.11203 86.78094 384.11203 0.0 369.88567 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 412.56477 12.80363 426.79115
12.80363 426.79115 0.0 412.56477 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 426.79115 36.98865 441.01752 36.98865 441.01752 0.0 426.79115 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 469.47026 92.4714 483.69664
92.4714 483.69664 0.0 469.47026 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 483.69664 173.5619 497.923 173.5619 497.923 0.0 483.69664 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 263.18787 170.71646 277.41425
170.71646 277.41425 177.82964 263.18787 177.82964  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  0.6 .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 277.41425 163.60327 277.41425
156.49008 263.18787 156.49008 263.18787 163.60327  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.62745 0.62745 0.62745  setrgbcolor
 0.6 .setopacityalpha  fill  grestore gsave 0.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 7654 35559 a
tx@Dict begin  { 284.52744 176.40692 } PutCoor PutBegin  end
 7654 35559 a 610
x Fi(AHS)313 b(Un)-26 b(terstufe)7654 35559 y
tx@Dict begin  PutEnd  end
 7654 35559
a 7654 35559 a
tx@Dict begin  { 284.52744 162.61774 } PutCoor PutBegin  end
 7654 35559 a 610 x Fi(Gesam)g(t)314 b(1.-4.)h(Klasse)
7654 35559 y
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { -2.84544 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121
39585 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39585 a Fi(Burgenland)12865 39585 y
 currentpoint grestore moveto
 12865
39585 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 62.59595 -4.26773 } PutCoor PutBegin  end
 7654 35559
a 8121 38534 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 38534 a Fi(K\344rn)-26 b(ten)11493
38534 y
 currentpoint grestore moveto
 11493 38534 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 103.28358 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 41041 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 41041 a Fi(Nieder\366sterreic)g
(h)14767 41041 y
 currentpoint grestore moveto
 14767 41041 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559
a 7654 35559 a
tx@Dict begin  { 160.18907 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 40562 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 40562 a
Fi(Ob)26 b(er\366sterreic)-26 b(h)14140 40562 y
 currentpoint grestore moveto
 14140
40562 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 233.31241 -4.26773 } PutCoor PutBegin  end
 7654 35559
a 8121 38674 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 38674 a Fi(Salzburg)11676 38674 y
 currentpoint grestore moveto

11676 38674 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 284.52744 -4.26773 } PutCoor PutBegin  end

7654 35559 a 8121 39376 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39376 a Fi(Steiermark)12592
39376 y
 currentpoint grestore moveto
 12592 39376 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 355.65929 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 37513 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 37513 a Fi(Tirol)10160
37513 y
 currentpoint grestore moveto
 10160 37513 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 398.33841 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 39296 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39296 a Fi(V)-78
b(orarlb)26 b(erg)12487 39296 y
 currentpoint grestore moveto
 12487 39296 a 7654 35559
a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 469.47026 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 37612 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate

8121 37612 a Fi(Wien)10290 37612 y
 currentpoint grestore moveto
 10290 37612 a 7654
35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { -42.67911 142.26372 } PutCoor PutBegin  end
 7654 35559 a 8264 45700
a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 8264 45700 a Fi(Anzahl)314 b(der)f(Sc)-26 b(h)g(\374lerInnen)18405
45700 y
 currentpoint grestore moveto
 18405 45700 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 64347
43433 a
currentpoint initclip moveto
 64347 43433 a 921 43433 a
 currentpoint currentpoint translate 1 0.7091 div 1 0.7091 div scale
neg exch neg exch translate
 921 43433 a 812 45978
a Fc(Quel)73 b(le:)341 b(http://www.bmukk.gv.at/schulstatistik)921
48524 y Fp(Kreuze)449 b(jene)g(b)36 b(eiden)449 b(A)-36
b(ussagen)449 b(an,)h(die)f(aus)g(dem)g(Diagramm)h(gefolgert)h(w)-36
b(erden)449 b(k)-36 b(\366n-)921 50515 y(nen!)p 1062
53216 44260 45 v 1062 56279 45 3064 v 1770 55076 a(In)434
b(K\344rn)-36 b(ten)433 b(ist)g(der)h(An)-36 b(teil)433
b(an)h(AHS-Sc)-36 b(h)g(\374lerInnen)430 b(gr\366\377er)435
b(als)f(in)f(Tirol.)p 42912 56279 V 1 0 0 TeXcolorrgb
43621 55079 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 56279 V 1062 56323 44260 45 v 1062
59386 45 3064 v 1770 58183 a Fp(In)h(Wien)g(gibt)f(es)h(die)g(meisten)f
(Sc)-36 b(h)g(\374lerInnen)431 b(in)j(den)f(1.-4.)h(Klassen.)p
42912 59386 V 45277 59386 V 1062 59431 44260 45 v 1062
64227 45 4797 v 1770 61291 a(Der)429 b(An)-36 b(teil)429
b(an)g(AHS-Sc)-36 b(h)g(\374lerInnen)425 b(ist)k(in)g(Wien)g(h\366her)f
(als)h(in)g(allen)g(anderen)1770 63282 y(Bundesl\344ndern.)p
42912 64227 V 1 0 0 TeXcolorrgb 43621 62161 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
64227 V 1062 64272 44260 45 v 1062 69327 45 5056 v 1770
66132 a Fp(Es)424 b(gehen)f(in)h(Salzburg)f(mehr)g(Sc)-36
b(h)g(\374lerInnen)422 b(in)i(die)f(AHS)g(als)i(im)f(Burgenland)1770
68123 y(in)434 b(die)g(1.-4.)g(Klasse)g(insgesam)-36
b(t.)p 42912 69327 V 45277 69327 V 1062 69371 44260 45
v 1062 74168 45 4797 v 1770 71231 a(In)427 b(Nieder\366sterreic)-36
b(h)426 b(gehen)f(ca.)i(3-mal)g(so)g(viele)g(Sc)-36 b(h)g(\374lerInnen)
425 b(in)h(die)g(Haupt-)1770 73223 y(sc)-36 b(h)g(ule)433
b(wie)i(in)e(die)h(AHS.)p 42912 74168 V 45277 74168 V
1062 74212 44260 45 v 47992 7929 a Fm(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Fl(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24421 81281
a Fp(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fp(11)p 0
TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(WS)919 b(1.1)g(-)h(11)g(Computer-)f(und)
f(Videospiele)f(-)j(MC)g(-)g(Matura)-2385 4515 y(2013/14)718
b(1.)f(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray -1391
7823 a Fp(11.)p 0 TeXcolorgray 651 w(Computer-)430 b(und)f(Videospiele)
j(m)-36 b(\374ssen)429 b(v)-36 b(or)432 b(ihrer)e(Markteinf\374hrung)g
(ein)h(Einstufungs-)887 9815 y(v)-36 b(erfahren)595 b(durc)-36
b(hlaufen,)594 b(b)36 b(ei)595 b(dem)g(festgelegt)h(wird,)f(w)-36
b(elc)g(hes)595 b(Mindestalter)f(f\374r)h(den)921 11806
y(Erw)-36 b(erb)577 b(des)g(Spiels)h(erreic)-36 b(h)g(t)577
b(sein)g(m)-36 b(uss.)579 b(Im)f(Jahr)f(2009)i(wurden)e(3)h(100)g
(Spiele)g(die-)921 13798 y(ser)484 b(Einstufung)f(un)-36
b(terzogen.)484 b(Im)g(Jahr)g(2008)h(w)-36 b(aren)484
b(es)g(um)g(114)h(Spiele)f(w)-36 b(eniger.)485 b(Die)921
15790 y(nac)-36 b(hstehende)432 b(Graphik)h(stellt)h(die)g(Ergebnisse)f
(der)g(A)-36 b(usw)g(ertungen)432 b(dar.)p 0 TeXcolorgray
0 TeXcolorgray 5828 19775 a Fd(V)-125 b(erteilung)501
b(der)d(F)-125 b(reigab)42 b(en)500 b(f\374r)e(die)h(Jahre)g(2008)g
(und)f(2009)7667 42980 y
 currentpoint currentpoint translate 0.69809 0.69809 scale neg exch
neg exch translate
 7667 42980 a 8101 42980 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 403.49094 a add def
/d 0.0 a add neg def /h 288.3602 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8101
42980 a 12624 33496 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 362.63268 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 202.68315 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 14.22636 138.28857 28.16837
138.28857 28.16837 0.0 14.22636 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 42.67911 0.0 42.67911 149.38579 29.02191 149.38579 29.02191 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 85.07385 0.0 85.07385 41.25893
71.13185 41.25893 71.13185 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 85.9274 36.13712 99.5846 36.13712 99.5846 0.0 85.9274 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 128.03734 55.48615 141.97934
55.48615 141.97934 0.0 128.03734 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 142.83289 49.79526 156.49008 49.79526 156.49008 0.0 142.83289 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 184.94283 30.73079 198.88483
30.73079 198.88483 0.0 184.94283 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 199.73837 29.59259 213.39557 29.59259 213.39557 0.0 199.73837 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 241.84831 14.7963 255.79031
14.7963 255.79031 0.0 241.84831 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 256.64386 16.50357 270.30106 16.50357 270.30106 0.0 256.64386 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 298.7538 3.9836 312.6958
3.9836 312.6958 0.0 298.7538 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 313.54935 3.13 327.20654 3.13 327.20654 0.0 313.54935 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 128.03734 170.72662 128.03734
163.613 119.50143 163.613 119.50143 170.72662  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 128.03734 156.4994 128.03734 149.38579 119.50143 149.38579 119.50143
156.4994  /Lineto /lineto load def 0  setlinejoin false NArray n 2
eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 362.63268  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 362.63268  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 202.68315  def /dT 3729358 abs 65536 div viceversa
{ neg } if def /DT 2. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 202.68315
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 362.63268
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 202.68315  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 202.68315  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 362.63268  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 202.68315
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 362.63268
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
10437 33804 a Fo(0)158 b(\045)9967 30654 y(10)g(\045)9967
27504 y(20)g(\045)9967 24354 y(30)g(\045)9967 21204 y(40)g(\045)9967
18055 y(50)g(\045)9967 14905 y(60)g(\045)12624 33496
y
tx@Dict begin  { 135.2786 170.77985 } PutCoor PutBegin  end
 12624 33496 a 571 x Fi(2008)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496
a 12624 33496 a
tx@Dict begin  { 134.65385 156.60056 } PutCoor PutBegin  end
 12624 33496 a 571 x Fi(2009)12624 33496
y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { -22.76227 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 42775
a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 42775 a Fi(ohne)314 b(Altersb)26 b(esc)-26 b(hr\344nkung)23513
42775 y
 currentpoint grestore moveto
 23513 42775 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624
33496 a
tx@Dict begin  { 56.90549 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 38023 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38023 a Fi(ab)314
b(6)g(Jahren)18027 38023 y
 currentpoint grestore moveto
 18027 38023 a 12624 33496
a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 113.81097 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 38430
a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38430 a Fi(ab)g(12)g(Jahren)18497 38430 y
 currentpoint grestore moveto
 18497
38430 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 170.71646 -1.13815 } PutCoor PutBegin  end
 12624
33496 a 13152 38430 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38430 a Fi(ab)g(16)g(Jahren)18497
38430 y
 currentpoint grestore moveto
 18497 38430 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624
33496 a
tx@Dict begin  { 213.39557 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 41237 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 41237 a Fi(k)-26
b(eine)314 b(Jugendfreigab)26 b(e)21738 41237 y
 currentpoint grestore moveto
 21738
41237 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 270.30106 -1.13815 } PutCoor PutBegin  end
 12624
33496 a 13152 41270 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 41270 a Fi(k)-26 b(eine)314
b(Kennzeic)-26 b(hn)g(ung)21776 41270 y
 currentpoint grestore moveto
 21776 41270 a
12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 9.10507 145.11763 } PutCoor PutBegin  end
 12624 33496
a 499 x Fb(48)p Fa(;)p Fb(6\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496
a 12624 33496 a
tx@Dict begin  { 28.45274 156.21483 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(52)p Fa(;)p Fb(5\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 66.01056 48.08797 } PutCoor PutBegin  end
 12624 33496 a 499
x Fb(14)p Fa(;)p Fb(5\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 85.35823 42.96622 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(12)p Fa(;)p Fb(7\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 122.91605 62.31519 } PutCoor PutBegin  end
 12624 33496 a 499
x Fb(19)p Fa(;)p Fb(5\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 142.26372 56.6243 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(17)p Fa(;)p Fb(5\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 179.82153 37.55984 } PutCoor PutBegin  end
 12624 33496 a 499
x Fb(10)p Fa(;)p Fb(8\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 199.1692 36.42168 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(10)p Fa(;)p Fb(4\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 240.42558 21.62538 } PutCoor PutBegin  end
 12624 33496 a 499
x Fb(5)p Fa(;)p Fb(2\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 256.07469 23.33263 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(5)p Fa(;)p Fb(8\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 298.7538 10.2436 } PutCoor PutBegin  end
 12624 33496 a 499
x Fb(1)p Fa(;)p Fb(4\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 312.98018 9.38997 } PutCoor PutBegin  end
 12624 33496 a 499 x Fb(1)p Fa(;)p Fb(1\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 52766 42980 a
currentpoint initclip moveto
 52766 42980 a 7667
42980 a
 currentpoint currentpoint translate 1 0.69809 div 1 0.69809 div scale
neg exch neg exch translate
 7667 42980 a 5068 45526 a Fi(Datenquelle:)315
b(h)-26 b(ttp://www.usk.de/pruefv)g
(erfahren/statistik/jahresbilanz-2009/)316 b([21.05.2014])921
49510 y Fp(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an!)p 1062 52469 44260 45 v 1062 57524
45 5056 v 1770 54329 a(Die)h(Anzahl)e(der)g(im)h(Jahr)g(2009)h(ohne)e
(Altersb)36 b(esc)-36 b(hr\344nkung)432 b(freigegeb)36
b(enen)1770 56321 y(Spiele)434 b(hat)f(sic)-36 b(h)434
b(im)g(V)-108 b(ergleic)-36 b(h)433 b(zum)g(Jahr)h(2008)h(um)e(et)-36
b(w)g(a)434 b(10)217 b(\045)434 b(v)-36 b(erringert.)p
42912 57524 V 45277 57524 V 1062 57568 44260 45 v 1062
62623 45 5056 v 1770 59428 a(Die)342 b(Anzahl)e(der)g(in)g(der)g
(Kategorie)i(\022freigegeb)36 b(en)342 b(ab)e(16)h(Jahren\020)f
(eingestuften)1770 61420 y(Spiele)434 b(ist)g(in)f(den)g(b)36
b(eiden)433 b(Jahren)g(2008)i(und)d(2009)j(nahezu)e(gleic)-36
b(h.)p 42912 62623 V 1 0 0 TeXcolorrgb 43621 60428 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 62623 V 1062 62668 44260 45 v 1062 67723 45 5056
v 1770 64528 a Fp(Im)350 b(Jahr)g(2008)h(wurde)e(ann\344hernd)g(jedes)h
(dritte)f(Spiel)h(f\374r)f(Kinder)h(ab)f(6)h(Jahren)1770
66519 y(freigegeb)36 b(en.)p 42912 67723 V 45277 67723
V 1062 67767 44260 45 v 1062 72822 45 5056 v 1770 69627
a(Im)422 b(Jahr)g(2009)h(wurden)e(w)-36 b(eniger)422
b(als)g(500)h(Spiele)e(der)g(Kategorie)i(\022freigegeb)36
b(en)1770 71619 y(ab)434 b(12)g(Jahren\020)g(zugeordnet.)p
42912 72822 V 45277 72822 V 1062 72866 44260 45 v 1062
75929 45 3064 v 1770 74726 a(Im)g(Jahr)g(2008)h(erhielt)e(et)-36
b(w)g(a)434 b(jedes)g(zw)-36 b(anzigste)434 b(Spiel)g(k)-36
b(eine)434 b(Jugendfreigab)36 b(e.)p 42912 75929 V 1 0 0
TeXcolorrgb 43621 74730 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 75929 V 1062 75974 44260
45 v 47992 7823 a Fm(___/1)p 1 0 0 TeXcolorrgb 47905
9815 a Fl(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fp(12)p 0
TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 7116 a Fq(WS)759
b(1.1)h(-)g(12)g(W)-179 b(anderungsbilanz)756 b(f\374r)j(\326sterreic)
-60 b(h)759 b(-)i(MC)f(-)g(Ma-)-2331 10139 y(tura)717
b(2016/17)g(-)h(Haupttermin)p 0 TeXcolorgray -1391 13446
a Fp(12.)47613 b Fm(___/1)p 0 TeXcolorgray -50901 w Fp(Die)546
b(Di\033erenz)e(aus)h(der)f(Anzahl)h(der)f(in)h(einem)g(b)36
b(estimm)-36 b(ten)544 b(Zeitraum)h(in)f(ein)h(Land)921
15438 y(zugew)-36 b(anderten)579 b(P)-36 b(ersonen)580
b(und)e(der)i(Anzahl)g(der)g(in)f(diesem)i(Zeitraum)e(aus)h(diesem)921
17430 y(Land)433 b(abgew)-36 b(anderten)433 b(P)-36 b(ersonen)433
b(b)36 b(ezeic)-36 b(hnet)433 b(man)g(als)h(W)-108 b(anderungsbilanz.)
921 19975 y(In)485 b(der)f(nac)-36 b(hstehenden)483 b(Gra\034k)i(ist)g
(die)g(j\344hrlic)-36 b(he)485 b(W)-108 b(anderungsbilanz)484
b(f\374r)h(\326sterreic)-36 b(h)921 21967 y(in)433 b(den)g(Jahren)g(v)
-36 b(on)434 b(1961)h(bis)f(2012)h(dargestellt.)p 0 TeXcolorgray
3147 46077 a

 3147 46077 a 3147 46077 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 3147 46077 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -36.72902 -16.22862 ] concat

 pgfs


 7228
44274 a

 7228 44274 a 7228 44274 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 [ 2.98883 2.98883 ] 0.0 setdash

 8.14871 0.0 moveto

 8.14871 179.10362 lineto

 16.29742 0.0 moveto

 16.29742 179.10362 lineto

 24.44614 0.0 moveto

 24.44614 179.10362 lineto

 32.59486 0.0 moveto

 32.59486 179.10362 lineto

 40.74358 0.0 moveto

 40.74358 179.10362 lineto

 48.89229 0.0 moveto

 48.89229 179.10362 lineto

 57.041 0.0 moveto

 57.041 179.10362 lineto

 65.18973 0.0 moveto

 65.18973 179.10362 lineto

 73.33844 0.0 moveto

 73.33844 179.10362 lineto

 81.48715 0.0 moveto

 81.48715 179.10362 lineto

 89.63588 0.0 moveto

 89.63588 179.10362 lineto

 97.78459 0.0 moveto

 97.78459 179.10362 lineto

 105.9333 0.0 moveto

 105.9333 179.10362 lineto

 114.08202 0.0 moveto

 114.08202 179.10362 lineto

 122.23074 0.0 moveto

 122.23074 179.10362 lineto

 130.37946 0.0 moveto

 130.37946 179.10362 lineto

 138.52817 0.0 moveto

 138.52817 179.10362 lineto

 146.6769 0.0 moveto

 146.6769 179.10362 lineto

 154.8256 0.0 moveto

 154.8256 179.10362 lineto

 162.97432 0.0 moveto

 162.97432 179.10362 lineto

 171.12303 0.0 moveto

 171.12303 179.10362 lineto

 179.27176 0.0 moveto

 179.27176 179.10362 lineto

 187.42047 0.0 moveto

 187.42047 179.10362 lineto

 195.56918 0.0 moveto

 195.56918 179.10362 lineto

 203.71791 0.0 moveto

 203.71791 179.10362 lineto

 211.86662 0.0 moveto

 211.86662 179.10362 lineto

 220.01534 0.0 moveto

 220.01534 179.10362 lineto

 228.16405 0.0 moveto

 228.16405 179.10362 lineto

 236.31277 0.0 moveto

 236.31277 179.10362 lineto

 244.46149 0.0 moveto

 244.46149 179.10362 lineto

 252.6102 0.0 moveto

 252.6102 179.10362 lineto

 260.75893 0.0 moveto

 260.75893 179.10362 lineto

 268.90764 0.0 moveto

 268.90764 179.10362 lineto

 277.05635 0.0 moveto

 277.05635 179.10362 lineto

 285.20506 0.0 moveto

 285.20506 179.10362 lineto

 293.35379 0.0 moveto

 293.35379 179.10362 lineto

 301.5025 0.0 moveto

 301.5025 179.10362 lineto

 309.65121 0.0 moveto

 309.65121 179.10362 lineto

 317.79994 0.0 moveto

 317.79994 179.10362 lineto

 325.94865 0.0 moveto

 325.94865 179.10362 lineto

 334.09737 0.0 moveto

 334.09737 179.10362 lineto

 342.24608 0.0 moveto

 342.24608 179.10362 lineto

 350.3948 0.0 moveto

 350.3948 179.10362 lineto

 358.54352 0.0 moveto

 358.54352 179.10362 lineto

 366.69223 0.0 moveto

 366.69223 179.10362 lineto

 374.84096 0.0 moveto

 374.84096 179.10362 lineto

 382.98967 0.0 moveto

 382.98967 179.10362 lineto

 391.13838 0.0 moveto

 391.13838 179.10362 lineto

 399.2871 0.0 moveto

 399.2871 179.10362 lineto

 407.43582 0.0 moveto

 407.43582 179.10362 lineto

 415.58453 0.0 moveto

 415.58453 179.10362 lineto

 423.73325 0.0 moveto

 423.73325 179.10362 lineto

 pgfstr
 0
TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0 setgray

 0.0 14.9253 moveto

 423.73325 14.9253 lineto

 0.0 44.7759 moveto

 423.73325 44.7759 lineto

 0.0 74.62651 moveto

 423.73325 74.62651 lineto

 0.0 104.47711 moveto

 423.73325 104.47711 lineto

 0.0 134.32771 moveto

 423.73325 134.32771 lineto

 0.0 164.17831 moveto

 423.73325 164.17831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0 setgray

 0.0 0.0 moveto

 423.73325 0.0 lineto

 0.0 29.8506 moveto

 423.73325 29.8506 lineto

 0.0 59.7012 moveto

 423.73325 59.7012 lineto

 0.0 89.5518 moveto

 423.73325 89.5518 lineto

 0.0 119.4024 moveto

 423.73325 119.4024 lineto

 0.0 149.25302 moveto

 423.73325 149.25302 lineto

 0.0 179.10362 moveto

 423.73325 179.10362 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 8.14871 -2.8349 moveto

 8.14871 0.0 lineto

 16.29742 -2.8349 moveto

 16.29742 0.0 lineto

 24.44614 -2.8349 moveto

 24.44614 0.0 lineto

 32.59486 -2.8349 moveto

 32.59486 0.0 lineto

 40.74358 -2.8349 moveto

 40.74358 0.0 lineto

 48.89229 -2.8349 moveto

 48.89229 0.0 lineto

 57.041 -2.8349 moveto

 57.041 0.0 lineto

 65.18973 -2.8349 moveto

 65.18973 0.0 lineto

 73.33844 -2.8349 moveto

 73.33844 0.0 lineto

 81.48715 -2.8349 moveto

 81.48715 0.0 lineto

 89.63588 -2.8349 moveto

 89.63588 0.0 lineto

 97.78459 -2.8349 moveto

 97.78459 0.0 lineto

 105.9333 -2.8349 moveto

 105.9333 0.0 lineto

 114.08202 -2.8349 moveto

 114.08202 0.0 lineto

 122.23074 -2.8349 moveto

 122.23074 0.0 lineto

 130.37946 -2.8349 moveto

 130.37946 0.0 lineto

 138.52817 -2.8349 moveto

 138.52817 0.0 lineto

 146.6769 -2.8349 moveto

 146.6769 0.0 lineto

 154.8256 -2.8349 moveto

 154.8256 0.0 lineto

 162.97432 -2.8349 moveto

 162.97432 0.0 lineto

 171.12303 -2.8349 moveto

 171.12303 0.0 lineto

 179.27176 -2.8349 moveto

 179.27176 0.0 lineto

 187.42047 -2.8349 moveto

 187.42047 0.0 lineto

 195.56918 -2.8349 moveto

 195.56918 0.0 lineto

 203.71791 -2.8349 moveto

 203.71791 0.0 lineto

 211.86662 -2.8349 moveto

 211.86662 0.0 lineto

 220.01534 -2.8349 moveto

 220.01534 0.0 lineto

 228.16405 -2.8349 moveto

 228.16405 0.0 lineto

 236.31277 -2.8349 moveto

 236.31277 0.0 lineto

 244.46149 -2.8349 moveto

 244.46149 0.0 lineto

 252.6102 -2.8349 moveto

 252.6102 0.0 lineto

 260.75893 -2.8349 moveto

 260.75893 0.0 lineto

 268.90764 -2.8349 moveto

 268.90764 0.0 lineto

 277.05635 -2.8349 moveto

 277.05635 0.0 lineto

 285.20506 -2.8349 moveto

 285.20506 0.0 lineto

 293.35379 -2.8349 moveto

 293.35379 0.0 lineto

 301.5025 -2.8349 moveto

 301.5025 0.0 lineto

 309.65121 -2.8349 moveto

 309.65121 0.0 lineto

 317.79994 -2.8349 moveto

 317.79994 0.0 lineto

 325.94865 -2.8349 moveto

 325.94865 0.0 lineto

 334.09737 -2.8349 moveto

 334.09737 0.0 lineto

 342.24608 -2.8349 moveto

 342.24608 0.0 lineto

 350.3948 -2.8349 moveto

 350.3948 0.0 lineto

 358.54352 -2.8349 moveto

 358.54352 0.0 lineto

 366.69223 -2.8349 moveto

 366.69223 0.0 lineto

 374.84096 -2.8349 moveto

 374.84096 0.0 lineto

 382.98967 -2.8349 moveto

 382.98967 0.0 lineto

 391.13838 -2.8349 moveto

 391.13838 0.0 lineto

 399.2871 -2.8349 moveto

 399.2871 0.0 lineto

 407.43582 -2.8349 moveto

 407.43582 0.0 lineto

 415.58453 -2.8349 moveto

 415.58453 0.0 lineto

 423.73325 -2.8349 moveto

 423.73325 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 -4.25194 moveto

 0.0 0.0 lineto

 40.74358 -4.25194 moveto

 40.74358 0.0 lineto

 81.48715 -4.25194 moveto

 81.48715 0.0 lineto

 122.23074 -4.25194 moveto

 122.23074 0.0 lineto

 162.97432 -4.25194 moveto

 162.97432 0.0 lineto

 203.71791 -4.25194 moveto

 203.71791 0.0 lineto

 244.46149 -4.25194 moveto

 244.46149 0.0 lineto

 285.20506 -4.25194 moveto

 285.20506 0.0 lineto

 325.94865 -4.25194 moveto

 325.94865 0.0 lineto

 366.69223 -4.25194 moveto

 366.69223 0.0 lineto

 407.43582 -4.25194 moveto

 407.43582 0.0 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 14.9253 moveto

 2.83487 14.9253 lineto

 0.0 44.7759 moveto

 2.83487 44.7759 lineto

 0.0 74.62651 moveto

 2.83487 74.62651 lineto

 0.0 104.47711 moveto

 2.83487 104.47711 lineto

 0.0 134.32771 moveto

 2.83487 134.32771 lineto

 0.0 164.17831 moveto

 2.83487 164.17831 lineto

 423.73325 14.9253 moveto

 420.89836 14.9253 lineto

 423.73325 44.7759 moveto

 420.89836 44.7759 lineto

 423.73325 74.62651 moveto

 420.89836 74.62651 lineto

 423.73325 104.47711 moveto

 420.89836 104.47711 lineto

 423.73325 134.32771 moveto

 420.89836 134.32771 lineto

 423.73325 164.17831 moveto

 420.89836 164.17831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 0.0 moveto

 4.25189 0.0 lineto

 0.0 29.8506 moveto

 4.25189 29.8506 lineto

 0.0 59.7012 moveto

 4.25189 59.7012 lineto

 0.0 89.5518 moveto

 4.25189 89.5518 lineto

 0.0 119.4024 moveto

 4.25189 119.4024 lineto

 0.0 149.25302 moveto

 4.25189 149.25302 lineto

 0.0 179.10362 moveto

 4.25189 179.10362 lineto

 423.73325 0.0 moveto

 419.48134 0.0 lineto

 423.73325 29.8506 moveto

 419.48134 29.8506 lineto

 423.73325 59.7012 moveto

 419.48134 59.7012 lineto

 423.73325 89.5518 moveto

 419.48134 89.5518 lineto

 423.73325 119.4024 moveto

 419.48134 119.4024 lineto

 423.73325 149.25302 moveto

 419.48134 149.25302 lineto

 423.73325 179.10362 moveto

 419.48134 179.10362 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 179.10362 lineto

 423.73325 179.10362 lineto

 423.73325 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -4.48325 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1961)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 36.26033 -12.90805 ] concat

 pgfs



 0 setgray
 7228
44274 a Fi(1966)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 77.0039 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1971)7228
44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 117.7475 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1976)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 158.49107 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274
a Fi(1981)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 199.23466 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1986)7228 44274
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 239.97824 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1991)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 280.72182 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(1996)7228
44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 321.46541 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a Fi(2001)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 362.20898 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274
a Fi(2006)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 411.42093 -7.77176 ] concat

 pgfs



 0 setgray
 7228 44274 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -33.40845 -3.13689 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(-40)186
b(000)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -33.40845 26.7137 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(-20)g(000)7228 44274
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -8.50119 56.5643 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(0)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 86.4149 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(20)g(000)7228
44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 116.26552 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(40)g(000)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 146.11612 ] concat

 pgfs



 0 setgray
 7228 44274
a Fl(60)g(000)7228 44274 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 175.96672 ] concat

 pgfs



 0 setgray
 7228 44274 a Fl(80)g(000)7228
44274 y


 pgfr

 restore

 restore

 save

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 415.58453 -4.25194 moveto

 415.58453 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 411.10129 -12.90805 ] concat

 pgfs



 0 setgray
 7228 44274 a
Fi(2012)7228 44274 y


 pgfr

 restore

 restore

 restore

 0.0 0.0 moveto

 423.73325 0.0 lineto

 423.73325 179.10362 lineto

 0.0 179.10362 lineto

 closepath

 clip

 newpath

 save
 0 0 1 TeXcolorrgb
 /pgffc{0.7 0.7 1 setrgbcolor}def

 /pgfsc{}def/pgffc{}def
 0.4 TeXcolorgray
 -2.98505 6.97394 0.58739 59.7012 pgfe

 2.23878 6.97394 8.7361 59.7012 pgfe

 7.46265 6.97394 16.88481 59.7012 pgfe

 5.97011 6.97394 25.03352 59.7012 pgfe

 15.07455 6.97394 33.18225 59.7012 pgfe

 28.35806 6.97394 41.33096 59.7012 pgfe

 31.34312 6.97394 49.47968 59.7012 pgfe

 -8.95517 6.97394 57.6284 59.7012 pgfe

 7.46265 6.97394 65.77711 59.7012 pgfe

 14.9253 6.97394 73.92583 59.7012 pgfe

 47.76096 6.97394 82.07454 59.7012 pgfe

 52.23856 6.97394 90.22327 59.7012 pgfe

 50.74602 6.97394 98.37198 59.7012 pgfe

 -26.86554 6.97394 106.52069 59.7012 pgfe

 -35.82072 6.97394 114.66942 59.7012 pgfe

 11.94023 6.97394 122.81813 59.7012 pgfe

 17.91035 6.97394 130.96684 59.7012 pgfe

 -13.43277 6.97394 139.11555 59.7012 pgfe

 -1.49252 6.97394 147.26428 59.7012 pgfe

 14.9253 6.97394 155.413 59.7012 pgfe

 44.02963 6.97394 163.5617 59.7012 pgfe

 -34.32819 6.97394 171.71043 59.7012 pgfe

 -2.23878 6.97394 179.85915 59.7012 pgfe

 4.47758 6.97394 188.00786 59.7012 pgfe

 7.46265 6.97394 196.15657 59.7012 pgfe

 8.20891 6.97394 204.3053 59.7012 pgfe

 2.98505 6.97394 212.45401 59.7012 pgfe

 19.4029 6.97394 220.60272 59.7012 pgfe

 67.16385 6.97394 228.75145 59.7012 pgfe

 88.05928 6.97394 236.90016 59.7012 pgfe

 114.92482 6.97394 245.04887 59.7012 pgfe

 107.46217 6.97394 253.19759 59.7012 pgfe

 49.2535 6.97394 261.34631 59.7012 pgfe

 4.47758 6.97394 269.49503 59.7012 pgfe

 2.98505 6.97394 277.64374 59.7012 pgfe

 5.97011 6.97394 285.79247 59.7012 pgfe

 1.49252 6.97394 293.94118 59.7012 pgfe

 11.94023 6.97394 302.08989 59.7012 pgfe

 29.8506 6.97394 310.2386 59.7012 pgfe

 25.373 6.97394 318.38733 59.7012 pgfe

 47.76096 6.97394 326.53604 59.7012 pgfe

 48.50723 6.97394 334.68475 59.7012 pgfe

 59.7012 6.97394 342.83348 59.7012 pgfe

 76.11903 6.97394 350.9822 59.7012 pgfe

 67.16385 6.97394 359.1309 59.7012 pgfe

 35.82072 6.97394 367.27962 59.7012 pgfe

 37.31325 6.97394 375.42834 59.7012 pgfe

 35.82072 6.97394 383.57706 59.7012 pgfe

 25.373 6.97394 391.72577 59.7012 pgfe

 31.34312 6.97394 399.8745 59.7012 pgfe

 45.52217 6.97394 408.02321 59.7012 pgfe

 65.67133 6.97394 416.17192 59.7012 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

0 0 1 TeXcolorrgb 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 2.98505 lineto

 8.14871 2.98505 lineto

 8.14871 0.0 lineto

 closepath

 8.14871 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 40.74358 0.0 moveto

 40.74358 0.0 moveto

 40.74358 2.98505 lineto

 48.89229 2.98505 lineto

 48.89229 0.0 lineto

 closepath

 48.89229 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 81.48715 0.0 moveto

 81.48715 0.0 moveto

 81.48715 2.98505 lineto

 89.63588 2.98505 lineto

 89.63588 0.0 lineto

 closepath

 89.63588 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 122.23074 0.0 moveto

 122.23074 0.0 moveto

 122.23074 2.98505 lineto

 130.37946 2.98505 lineto

 130.37946 0.0 lineto

 closepath

 130.37946 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 162.97432 0.0 moveto

 162.97432 0.0 moveto

 162.97432 2.98505 lineto

 171.12303 2.98505 lineto

 171.12303 0.0 lineto

 closepath

 171.12303 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 203.71791 0.0 moveto

 203.71791 0.0 moveto

 203.71791 2.98505 lineto

 211.86662 2.98505 lineto

 211.86662 0.0 lineto

 closepath

 211.86662 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 244.46149 0.0 moveto

 244.46149 0.0 moveto

 244.46149 2.98505 lineto

 252.6102 2.98505 lineto

 252.6102 0.0 lineto

 closepath

 252.6102 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 285.20506 0.0 moveto

 285.20506 0.0 moveto

 285.20506 2.98505 lineto

 293.35379 2.98505 lineto

 293.35379 0.0 lineto

 closepath

 293.35379 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 325.94865 0.0 moveto

 325.94865 0.0 moveto

 325.94865 2.98505 lineto

 334.09737 2.98505 lineto

 334.09737 0.0 lineto

 closepath

 334.09737 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 366.69223 0.0 moveto

 366.69223 0.0 moveto

 366.69223 2.98505 lineto

 374.84096 2.98505 lineto

 374.84096 0.0 lineto

 closepath

 374.84096 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 415.58453 0.0 moveto

 415.58453 0.0 moveto

 415.58453 2.98505 lineto

 423.73325 2.98505 lineto

 423.73325 0.0 lineto

 closepath

 423.73325 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 148.7276 190.53828 ] concat

 pgfs



 0 setgray

7228 44274 a Fl(W)-92 b(anderungsbilanz)370 b(1961-2012)7228
44274 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 3147 46077 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 4527
50593 a Fh(Quelle:)276 b(ST)-65 b(A)g(TISTIK)277 b(A)-22
b(USTRIA,)278 b(Errec)-22 b(hnete)275 b(W)-65 b(anderungsbilanz)275
b(1961-1995;)g(W)-65 b(anderungsstatistik)275 b(1996-2012;)h
(2007-2011:)f(revidierte)g(Daten.)21003 52198 y(W)-65
b(anderungsbilanz:)274 b(Zuz\374ge)j(aus)f(dem)h(A)-22
b(usland)277 b(min)-22 b(us)277 b(W)-65 b(egz\374ge)276
b(in)g(das)h(A)-22 b(usland)277 b(\(adaptiert\).)p 0
TeXcolorgray 921 55179 a Fp(Kreuze)418 b(die)g(b)36 b(eiden)417
b(A)-36 b(ussagen)418 b(an,)g(die)g(eine)g(k)-36 b(orrekte)418
b(In)-36 b(terpretation)417 b(der)h(Gra\034k)f(dar-)921
57171 y(stellen!)p 0 TeXcolorgray 24421 81281 a(13)p
0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1062 209 44260 45 v 1062 6998 45 6789
v 1770 2069 a Fp(A)-36 b(us)337 b(dem)f(angegeb)36 b(enen)337
b(W)-108 b(ert)336 b(f\374r)h(das)g(Jahr)f(2003)j(kann)d(man)h
(ablesen,)g(dass)g(in)1770 4061 y(diesem)377 b(Jahr)f(um)g(ca.)h(40)217
b(000)378 b(P)-36 b(ersonen)376 b(mehr)f(zugew)-36 b(andert)376
b(als)h(abgew)-36 b(andert)1770 6053 y(sind.)p 42912
6998 V 1 0 0 TeXcolorrgb 43621 3935 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 6998 V 1062 7042
44260 45 v 1062 12097 45 5056 v 1770 8902 a Fp(Der)434
b(Zu)-36 b(w)g(ac)g(hs)433 b(der)g(W)-108 b(anderungsbilanz)433
b(v)-36 b(om)434 b(Jahr)g(2003)h(auf)f(das)f(Jahr)h(2004)1770
10894 y(b)36 b(etr\344gt)434 b(ca.)g(50)217 b(\045.)p
42912 12097 V 45277 12097 V 1062 12141 44260 45 v 1062
17196 45 5056 v 1770 14001 a(Im)434 b(Zeitraum)f(1961)i(bis)f(2012)h
(gibt)e(es)h(ac)-36 b(h)g(t)433 b(Jahre,)h(in)g(denen)e(die)i(Anzahl)f
(der)1770 15993 y(Zu)-36 b(w)g(anderungen)432 b(geringer)i(als)g(die)g
(Anzahl)f(der)h(Ab)-36 b(w)g(anderungen)431 b(w)-36 b(ar.)p
42912 17196 V 1 0 0 TeXcolorrgb 43621 15001 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
17196 V 1062 17241 44260 45 v 1062 22296 45 5056 v 1770
19101 a Fp(Im)434 b(Zeitraum)f(1961)i(bis)f(2012)h(gibt)e(es)h(drei)f
(Jahre,)h(in)g(denen)e(die)i(Anzahl)f(der)1770 21092
y(Zu)-36 b(w)g(anderungen)432 b(gleic)-36 b(h)434 b(der)f(Anzahl)h(der)
f(Ab)-36 b(w)g(anderungen)432 b(w)-36 b(ar.)p 42912 22296
V 45277 22296 V 1062 22340 44260 45 v 1062 27137 45 4797
v 1770 24200 a(Die)435 b(W)-108 b(anderungsbilanz)433
b(des)g(Jahres)g(1981)i(ist)f(ann\344hernd)e(dopp)36
b(elt)433 b(so)h(gro\377)1770 26192 y(wie)h(die)e(des)h(Jahres)f(1970.)
p 42912 27137 V 45277 27137 V 1062 27181 44260 45 v 0
TeXcolorgray 24421 81281 a(14)p 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fq(WS)723
b(1.1)h(-)g(13)f(St\344ngel-Blatt-Diagramme)g(-)h(MC)g(-)g(Matura)g(NT)
-2439 9817 y(1)718 b(16/17)p 0 TeXcolorgray -1391 13124
a Fp(13.)p 0 TeXcolorgray 651 w(Die)532 b(nac)-36 b(hstehenden)530
b(St\344ngel-Blatt-Diagramme)i(zeigen)g(die)g(Anzahl)f(der)g(Kinob)36
b(esu-)921 15116 y(c)-36 b(her/innen)511 b(je)i(V)-108
b(orstellung)512 b(der)f(Filme)i Ff(A)f Fp(und)f Ff(B)579
b Fp(im)513 b(Lauf)f(einer)g(W)-108 b(o)36 b(c)-36 b(he.)513
b(In)f(diesen)921 17108 y(Diagrammen)435 b(ist)e(die)h(Einheit)f(des)g
(St\344ngels)h(10,)h(die)e(des)g(Blatts)h(1.)p 9416 21029
7126 45 v 9416 23021 45 1992 v 0.9 TeXcolorgray 9460
23021 7037 1992 v 0 TeXcolorgray 10946 22423 a(Film)g
Ff(A)p 16497 23021 45 1992 v 9416 23065 7126 45 v 9416
25057 45 1992 v 10124 24459 a Fp(2)p 11439 25057 V 1373
w(0,3,8)p 16497 25057 V 9416 25101 7126 45 v 9416 27093
45 1992 v 10124 26495 a(3)p 11439 27093 V 1373 w(6,7)p
16497 27093 V 9416 27137 7126 45 v 9416 29129 45 1992
v 10124 28532 a(4)p 11439 29129 V 1373 w(1,1,5,6)p 16497
29129 V 9416 29173 7126 45 v 9416 31165 45 1992 v 10124
30568 a(5)p 11439 31165 V 1373 w(2,6,8,9)p 16497 31165
V 9416 31210 7126 45 v 9416 33202 45 1992 v 10124 32604
a(6)p 11439 33202 V 1373 w(1,8)p 16497 33202 V 9416 33246
7126 45 v 24758 21029 V 24758 23021 45 1992 v 0.9 TeXcolorgray
24802 23021 7037 1992 v 0 TeXcolorgray 26248 22423 a(Film)g
Ff(B)p 31839 23021 45 1992 v 24758 23065 7126 45 v 24758
25057 45 1992 v 25466 24459 a Fp(2)p 26781 25057 V 1373
w(1)p 31839 25057 V 24758 25101 7126 45 v 24758 27093
45 1992 v 25466 26495 a(3)p 26781 27093 V 1373 w(1,4,5)p
31839 27093 V 24758 27137 7126 45 v 24758 29129 45 1992
v 25466 28532 a(4)p 26781 29129 V 1373 w(4,5,8)p 31839
29129 V 24758 29173 7126 45 v 24758 31165 45 1992 v 25466
30568 a(5)p 26781 31165 V 1373 w(0,5,7,7)p 31839 31165
V 24758 31210 7126 45 v 24758 33202 45 1992 v 25466 32604
a(6)p 26781 33202 V 1373 w(1,2)p 31839 33202 V 24758
33246 7126 45 v 24758 35238 45 1992 v 25466 34640 a(7)p
26781 35238 V 1373 w(0)p 31839 35238 V 24758 35282 7126
45 v 921 36942 a(Kreuze)559 b(diejenige\(n\))g(A)-36
b(ussage\(n\))558 b(an,)i(die)f(b)36 b(ezogen)559 b(auf)h(die)f
(dargestellten)g(St\344ngel-)921 38934 y(Blatt-Diagramme)435
b(mit)e(Sic)-36 b(herheit)433 b(zutri\033t/zutre\033en!)p
1062 39975 44260 45 v 1062 44772 45 4797 v 1770 41835
a(Es)h(gab)g(in)f(dieser)h(W)-108 b(o)36 b(c)-36 b(he)433
b(mehr)g(V)-108 b(orstellungen)433 b(des)h(Films)g Ff(A)f
Fp(als)h(der)g(Films)1770 43827 y Ff(B)67 b Fp(.)p 42912
44772 V 1 0 0 TeXcolorrgb 43621 42705 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 44772
V 1062 44816 44260 45 v 1062 49694 45 4878 v 1770 46757
a Fp(Der)434 b(Median)g(der)f(Anzahl)g(der)g(Besuc)-36
b(her/innen)433 b(ist)g(b)36 b(ei)434 b(Film)g Ff(A)f
Fp(gr\366\377er)i(als)1770 48749 y(b)36 b(ei)434 b(Film)g
Ff(B)67 b Fp(.)p 42912 49694 V 45277 49694 V 1062 49738
44260 45 v 1062 54616 45 4878 v 1770 51679 a(Die)435
b(Spann)-36 b(w)g(eite)432 b(der)i(Anzahl)f(der)g(Besuc)-36
b(her/innen)432 b(ist)i(b)36 b(ei)434 b(Film)g Ff(A)f
Fp(kleiner)1770 53671 y(als)i(b)36 b(ei)433 b(Film)h
Ff(B)67 b Fp(.)p 42912 54616 V 1 0 0 TeXcolorrgb 43621
52509 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 54616 V 1062 54660 44260 45 v 1062
59797 45 5137 v 1770 56601 a Fp(Die)435 b(Gesam)-36 b(tanzahl)433
b(der)g(Besuc)-36 b(her/innen)433 b(in)g(dieser)g(W)-108
b(o)36 b(c)-36 b(he)434 b(w)-36 b(ar)434 b(b)36 b(ei)434
b(Film)g Ff(A)1770 58593 y Fp(gr\366\377er)h(als)f(b)36
b(ei)434 b(Film)g Ff(B)67 b Fp(.)p 42912 59797 V 1 0 0
TeXcolorrgb 43621 57561 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 59797 V 1062 59841 44260
45 v 1062 64977 45 5137 v 1770 61782 a Fp(In)326 b(einer)g(V)-108
b(orstellung)325 b(des)h(Films)g Ff(B)393 b Fp(w)-36
b(aren)325 b(mehr)h(Besuc)-36 b(her/innen)324 b(als)i(in)g(jeder)1770
63774 y(einzelnen)434 b(V)-108 b(orstellung)433 b(des)g(Films)h
Ff(A)p Fp(.)p 42912 64977 V 1 0 0 TeXcolorrgb 43621 62741
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 64977 V 1062 65021 44260 45 v 47992 13124 a Fm(___/1)p
1 0 0 TeXcolorrgb 47905 15116 a Fl(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69049
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(15)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

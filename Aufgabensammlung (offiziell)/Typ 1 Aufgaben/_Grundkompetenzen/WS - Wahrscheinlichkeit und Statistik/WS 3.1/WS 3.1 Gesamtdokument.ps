%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 3.1/WS 3.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:53:44 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols10-Regular LMMathExtension10-Regular
%%+ LMRoman10-Regular LMMathItalic8-Regular wasy10 MSAM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 3.1/WS 3.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0853
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571D8192A287F5074A8C012E6AD53C85A735816E815777D18C511AE5
913FD38C2705B78CD907457A5F085EF70FB8DAD2E73F158978ABC35805453F84
CC5EEC991A5CDC8C33DADDDF82939669A03C2A9AFA9544CC0C8E8B145BCD2D46
280FDDDFC1EE81028E13027F26BABF3AE38AF0FE01279F319172E380341CAAC7
984BF444AC5EABFAB89FBF8430C4611B33767D29F06AE02C06A97C3D5DBF67E4
84DCBC5B8D181BA465EBF86C3D7D138B055A428C37CBCCF98EE1D718F90E93CB
3C94F88A97391159BAD4859E93F1DC7319A763EAA1742A6AC281F366713AA8F4
357DA140DA36809088C7611B6007BCEE49BE02FED5DFDDFB605D2B33C7EF460E
1D021D51718A417DAA97A6EDABB96FB9630C992EBE4459BA32FD6F2388CBCF7B
8C77C82EFBB3F20111A723C91D5A38E126A9D6A0BC27D576445C5771F654256B
890A572F0F200AB0C1CBB4861EE21C44A50141450F30A4CC2E47E7188A6EFAE6
B5B1E768DFD487638393BF3651F9EF9F9FDCD4DE5EC298FDCF68B138FCFE2DE4
4EF169BA5095A056B44DA5447F637CF0FD7DC2CF302A5CBA4416DDE8B7395961
F4D135E136B7DA5CC8D58DC72B26FC15538F6A6DD37D9E8BD7CDBCB7EDC82283
697425E75CD601899674D075D2B3695E94D0F04444E4638C4859752F4ED1FF51
1C5553A44DB38A63FE8716248DC8757E4217CE89D33120BCDD6AF0124764EE52
BBFEADC0798CD595800D6C7BF48AD7F51C1D18192118876CBB2CC8F7897C28C6
19DC092DA220CDEE31D2672A482F02277F4E560DB6615C06A38CD068E50EB4D2
E8EA0026ADC0F6FF850CFC78EC08957D1E08DDA11D563AF073DE1A801861E512
1DD1BA261D66CEE7D9B07DF377A2381A5379B5FDDE529E096565DF3079B17C02
DF19EA254EF6E1BBAA37EA8A2DC4796FCBDBFE790D52F1B1F3A2A325ADFD3EF8
84871D8CBD5F91D4A35C697F95A077EA52A825DAEBE9EB0CCAFECA26B5D24A86
CAEA629576A6F2C4107AC55B57031C80CC8651AEEA5416954C04EF8FCC98C662
303132E35DE89F1C45AEA59EE3D16B9DF4E41419E71ED7A8091F41531211CCE2
DD8514B6510E18041E3A063CEC3A1EEE071641F9F1AD2F506BF571D2EA906B0D
198E64FFD9895368E3EC84B2A4B80C127B65B703D765286F4480F463D795C2FD
E655FA2440041F0CAE4C4300008CC7679627A46624DAAF8F60F0B9F60EC52DA6
1D5C4C7A043D20F3425D53E13F8AD9DF692A724C1ABFC2FE3CAAE3D0405586E2
B48B8A32797A2FAF04BF96A4A356D1FA6A10DA51584467C8A4A940ECCE0FE69B
2F26AA32B488E650E28B9A223B81D169925B44E4075553A5CE26D403601912D3
A99576E1DCC184F5C602F5D4B1146B23182CC0BF958E674606AC9A021853194D
E5F819CCC3EEB4573777C1D0647EFFA0046765A2E5E65AA3E30ECEAC2E7D9638
2578FB9642530075BD59BE723607AE2375550414AC431A0D0B9E055FB33E1A4C
D6359400DE1CF2637FB8871D713440B517B19116148B86BC316F8D6B11D90EBB
74B0D9D851D8EB323365804E55BCA29B8185C6B5962B814EA42A9CFB185D070E
42A6FA4F0D600D19F5666EE9A1FAD8B06ED6916B2FDADE6F8C5F5F675683EC8C
6C346CF107C0D4A130CCD0D26E6EA969416106C0BC96948EFB0B69E83AEC8F8E
D109B93D936F5F589D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /star put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22A31B165EA
8DE2F2534E57BC3E63D44604D095AAF56667F587FBFB99FACB6315A21101C80A
6029178A3D776FC5BA160EC280FAF8EE500C2C5AF142719758FA9778E4311B9C
D053DBCACCAB665A5E35E285DA61B954A983329404A4C93F9762D45591F2D54B
8126C7FD4B92286D89D5626F6CC41C75CD1D89A38F8E78C44C52C6D84B539ED4
3367648D5E9342EB55B0CAC57E3BAAB8329216CBAC05655364FDDB1A35D65486
463EC0E9A48833281E1F1399495A4B40B1039B0E13A223640756F6C10FB9AE57
A8B1709BC8995FC5F24638EB1DC6DB4D6CCC18332058C5D72DE1B7BFE40D8978
92E7EB471883D0361813092C14E4890A529D9124DD6DC0429BD0E7A79A9FDF5F
E2808225B6A5FE6A7C9D9629385F28E3361BCC3DAA7FD5F0E255CA7D5D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872F691DC4E6728A1CA7B24C909D0B9C03E26
CAB4684ED3C2800D3BD58F5D44F0B16C88AFA1A33F9A3D8C9DE24F4A7FCA9801
84A9366A77EB2FA0E1CC2465A9480156AA5A7DBE1AAD4FCBD9DB2E1289308A60
706034F1B137A05F4A962CF1C22D83316A517000F1073FEBDBBAE2FD98BFA9D0
8818AF6D6B1C17387237FC958B93C71C4811B87B71B83887423C8EC095EF9E42
8F956DBF5B86F15244E8940C2F9BE4BDDA2E4322C052851677B2EE5DAF403311
F039C6218F4D2882FA95447F839D92C164DFEC115BCDA359B58305C56E941651
E322F61EAAB2F0BAC298957E4172F101A12BC5F2734A28F53C105348362C617D
60BA3678C8215B9F542D8116D8DE31DA02F9E80970020F8C4C9D94ECB95428EA
06164D1C97A638B4620E485A996CC84306CDD2D6B4B05BFF7AFE7DC3807891D0
39AECEAC3F500A09579E6559EF6A8492F020E67407CF321E01EE8F2811A9C0A9
32D2107D819094CD8E14744B571776B1D9BC9C544058D99200132ED94495BC18
92BB688C4FF28BEFE9079DAAEF7187DEC15CC897C563DC4BDC3F482C8C3736C6
7A14C6F913E666C27F082A4720C63E0B47C3BA1D271E523BCB1AE8B9A31FAC39
8FB4643E2AA1E3A0E850B45EE08928CB8BF491119048F4C4CD320B25BC0091D0
4ABDE47EFEC71E4973F629B392CE3475109E28E5E695E526BF8394BE7D685F4A
E35AA17151913D70E6CE39361C97C925E515EB39632D220FC1BC93C072AD07C7
DC28850415D9AFC1C8A868801B990CE2D26305027E6F9C6592605A206046CDAB
D9D54EA413DE45322C948CF1656FA97A05A937A3AF22EA39978F1D7A44869AF2
4C16FE3DEE57917017C65752C45EE8EE604915C3734157442A161BD5A9818A95
AFBD19A4965831C6C0F2D5F535AE93682E855B1BDD6CE955627289962B531FCA
B29F4C8E7D591AE0494A4BF14767F03C210FD5B0BB7F5B0B954E70782CF804D7
B15598E487B95C4B13B77932132FBD3B811C142268AB891AA0006AFDE4251423
E691A305D0F0EC36018ABC98113FDEB963163D85E7E3F8C28EC36BA0E34C4A7D
BF32FBAE5882BF067E07B5FF02ED325AE7AEF68D8EE037987A9526E492876E68
ED7FA2A86AD8E0382E1E2F291F270C8B9233DF92842C7EC50271156B4E7C01BB
D70995DF003B7F6A6B3B9FE10A0E27F605C0005570FA47070FC79D8E0B3E1E05
6F8239952812EF8514C403FE3558E431CCD6ED7CA83241B091503FE2B00E5F75
79AEF49A3D4F2126544C4D5B05FC33F83790ECFD7641DF3FB94289E2A79CEC3D
7C3A9742F8C5D2AF2FF88BE40D53E49DD66D3B0CADDF6027B020024CB98169C9
FAF20B76D6CDD0DBA9DFAA5C10C35A95B63056A0ED3DDED1C8764477F6328DC7
C9F81C18D38FA1BCEB3B9A5006CF67560A58EA246F114E110FF47A42D923C153
F7A83BC1FFE67CD11FF1A76508916C002B02D9B025971A01FAB3FFB24E6AE36B
4BF3496E2D326C0BEF4C80125934B2FB9D7EFAA0A98BC83ACC13AC9569CE318E
21C11AE858AB0BD573C2E4B683E33471DF955001433FE00D93528FEC9ACD0038
9398C49DE13E3D0CB6910A4072C474AAE956C8FE085053AC08399F34937B2703
445943EEBFD15EACF4EDEB082BB0856A2FFBF9287B75346C3864B99A0C16F468
BE1E3146E3DC3D4950D905D6AFB4390B62A3173B522240F0D3AB725CC2FE8CC4
F1A4DC3169C25CF63F91D69A3C1C428F1B901C3353CD23FAC7E2B86EEE2936DC
FD6F0539158D3304F1CDA62B59D893A5959E924476E93CF7DCA4E9552BF0708D
C92C1620641CC75AF1F20897BD0FAB1B2FD02446FF750D2373F997362DDA16A0
D73B178FB7B67307204933527F6A177F5C15648503E34EAA16E2E85FB09BD17C
1FCD55BF7C85D411526108BE065D249A68763850925A457E17802B8F1B153599
F99E1C226B06E838F7245B13476E954151931B6BD142F7C7AF437B8AD4F2F150
0AB0CBABE5BF2E6C34ACDCDED7FFF4837E72EE7A9A0A3AC5B6A95A1958EED1B1
A35F21271D10FCE1045F5237082237C6A6CAD180902058A1295986A3DFD904A8
A301C3757FB28F8FD39312BA79A229868F2C81C2F455F34620DCD561C67D2DDF
B5451451F3C27E48B4CDD5F28E727F728B417168EE9C32721CF77B0BB8F785CB
0FDA4BC989C00F2CE00EC61E35AE94632F3BCE064A0E572C68683C6F54891B2C
02490D0C06B8CDF38105C15DE2FD011510BDA7E4AE474B2BCDB5FC24A7087B8D
7CF10A3706652E7E77E8F048365EB42B825768AFE40381C7005CF7EDC01C4E4D
CC86D3C62FE9E069A1725AEBCC5CB1F7AC4505AF03E93373736FF863282261A8
6067AD7E76C12BBC92709CAE17E12419D4535D0FEE85D7AA225FD64BF93BFD28
420EBA065CA35AF942E6CFC2646D50949425D15471002A6BAC67DA45FAC0B133
9E63A2DF0854ABDADD0F3CB4CC1AA1F4E87F1F184F6819F4D26416C3F9BAF3E9
0343B692C3529814C334576810697A6DECC9F689CD7DD6D6E842A797547F96F9
206935478D5133B9E7614AD6E07D3B39BF4BEFFF935B48590EB00726C0670E76
0B34923882D94F90EDEAC8A3A8DCA72E26C987F09AF3C6030021D991171DCCBA
54503EAC4692D81CE4088F3E2AFED79561508B1E19EAFA4C676576BF1DAAEDE3
20A05647EC632B1319AF7120EC53549A80FA0B8B14AD07A99A7D5A9C02884A71
2216A564384E3C32208368A9D04208C7626736EE24E135047D1D412E289BBF35
B80F92DD0A3E769A7D0D3FCF1DD66A83FDA1094245139346C89EE39B8DA56B2D
D3F25D5A9F620224A0A463B7BC2C470BBF1546F65CD42FE47F91FBB7C0F560C3
477C6632BEFE3882ACE0AB1944BDDAE1FB609F621928A3A51EEF532687396575
59B9F38F17E3877053BCC3F004DB440C37234D1869592E57250F65306A1666F0
02A9B36C608B6E3EE3E6478661A78D313F992FFAAB3025042BF1D23348428995
7A4A69649F0DFD0046D570186DD59BC538502D18ECA4CAE179C9CD6222EFAB77
68AC443B35B63BFA956368397A69D41DD7156C5ED84AFDAA5D775F54B78C794B
35A41FCAB99493DBECF6620D191AD7809E872C87D13F9DD30928904494416E3D
F1D0110FD5BCF8FE0BBB3027FEAB1C0E29E1FB46C68793445A2DC6CE183F72C2
571F46E81CE317A0B867554FC41A1BCEF5E19646935341BD381BCC0919429B21
C62F2B7B09E6FB51D65779019E678CC8BAFC026639CE00ED9FD63C0B6E6C6DA1
4E3A1B45E8AECB82954502887B4732C4162219A54DA73A385F9AF86EF6E3F521
1BBE23CFA17C8B22922419B3D635AACF51D5A44C841A968C8DE9FABDE25D7F41
812A143B802D3951B6D9026B5D97D33027BB8723813D247827B40DC36A2CBA4A
701C45942DB1C919EFDB6A13AB49D23BBBA5D38653AAC7B813F29F450710ABF8
B347CCE0D73E5DEF603D68C3984D89641875C81891266884AAD6751AA3C570FE
0E4F0239E05BF6E98C99CC1F0662D1D1E9C9DF1DA7866A772E358CDEA9FBA4EF
131019DB87C73771A6CED0715EFF43475A0FD680DDA601EA17A90E1FBEF6E377
8DE10A910F346C4ED33D753CDA1E5A13BD10638D8471EF80438FB02DA52997D4
3ADD92EEF762FB6ED54CC9E41E6562CBB4F3DF32AE563384C962783B4A2CB934
7E2251CAF08F5D36DD56EEF77CE8C8B0CF6804B66C3760BB3AD124FF837C7D4C
084DF2935AF3382B30B8E4CE1B5234EE229AB74E5782C65AF4283889D8B276DD
0727FBA60EB6C2BC70DE5DADB4EAC4652DD0DCB6A0F346F55D8055D4C7E7BA5E
A1A04E90C07BB12CFCE4F97CF8D7F3E36B582FBE0844B418FF71389F1E4B1D4A
8DA1D0AEE7CAD195AEB8A07828702857EDDDC1030D19928F2E260434D9020CB7
624E0116CD08A59EF79E5D7A9AF1DD9809395FA29D6410F723F127142D077194
94F1402183EB49EBA761BC8B07A7EF81F6212DA66ABADE88654BF8FB8E7C6217
F631697A12FAF69318771383D3F2349AC7FE93539F4574338950F885151F0383
F5188E09A9E1B8C023F7E0892E6F8B9161510B36B230EF3E93590FA686661BC2
390E183E2BED41CE8DA5C50E9EDFB70047B6D2CFA4ECEF0674FF7EC3E81A5DC5
4529103ED8E5126740D42167621D9EB939BF23B27B2DF046F314DBFE68DDB61B
2D4B9E77254A19A265FA093B594288EF02DC075445138B79842389F19B47E871
B05E8ADA834E775AD6948BE41E7CE3797656459053227D9D94FBA34793243644
B8A33EA339FC2A1CEBA3DB1E042443B665E915991D932209B3F4CD6472FD2DB4
00DF06C70397503DF67C10B47377A99EB9666612C77A23C8C3364DAD8E407319
772C9B201C49B75DE8E9DFC0F91FD52CDEA7FAF96105243EDF44B4052F8C25AC
BFE0C0E5F2D242B83CCC05D2B4BC05B37305E806D20CEA876880C4118254A191
47D1389963C41CFBA67B5004D67B63178165101C27F5EBCCF59911E33447D905
BAAFC334ED030FE2D062F8A73FE6DE425C2F627DF5E7573C369946C3BAD31883
5D4707E90A0340BB7B6AB880122DF3F9D6BDE77DD5870ADEC8900D6346957B84
C9F5FA4745740AED1FA5436E30669CDA65742ED08E4654FE4843DB29155D93CD
C05BC0FE45B681C73C50BA9A429E868C8736888C82493407221B7738CA5A266E
761DC301FB3CE13E54945B0A6BCB5633B1D580346D913BACD84F91E2B4714126
024DD013CCE6E2B4DDF83466480BBFE3D27E0497A23689E18F83C338EB243ECF
90B8843B2E917F59882DA0C544168426B788EB1B0561DB4C9C60E5C5D5E84B4D
CE802539446CCC76310012F65E0C3E7EAD30E08F339676D7BB9AF94FBE12AF54
88D4B3F5B529A5F41FEB0D5D70532852C4733623491D66248801FA6BFF9B01C5
D0C6BEA07E93C31D65E1DC16DAD28887F7E237E040956CC325DE59B3AF1F9B1E
9716FE4475B8D5D13F5C6ABDE06D1C710136B98CC866379DE46AB431EC70EB72
91A55077C7300F05F14ED6FB7A3ABD911EBBA0E88E2ADF3C8F7C36788CD9E3DC
CAE2F30D96AC6A25FFE9F98963FC566AE808AE20CAAE74590B3DD20DA962755F
F507A56FEF98CE576CCC29A76055C6764C666F0F453FECCD0AF58C15FBDD5D36
338CB0ECF40BA2322F8559BBDD2767549450C6803B603B312979604965F454C0
57F3D5586DB8783F06030B0E5C758F7A279110DC24F752EEE7E7FE9B2134E3EF
4DFBE0E746C1915B6A73DA59C34794E92CBFF4EFB16BAC7698C9AE38C9028C76
98C26DE73E5A06C67184BBCF69B32C4F358A707613C641B0F19550A337E455DC
BFAFCC8413D1EBB0AB672BD01D2A5267D426490071462F24E9823DD5AC2A249D
44E76E91F887570B3DA85186B878777DED4FFDCC47019E59292BB6EF8FE6D2DC
18EB4C02C6BFCEC3E71E20E6D986746CF04607DC96A66E8520A4BAB58141A8AE
9C4E28C6F04D2D0DC9065A549730A059B4021CE25A2EE7EA03B6A1D7FD764D8D
52A10182F141F0FCC1A424E5D70B1875A655DCC3B4CF0008880A1663932AC35A
A2CB73748ECEF55B10F6315D432DAEC05785E0611D82A36F9FC00D0F38248E93
A8F3342F0347B8EC0280AAF49289DE4F4865F46F102FB29ECAAD60C12F5A1528
63097FE8153ABA67BE2CB9EE0CD684470469798AC194B31AA1E693DE59D3FE3A
5C905313A67FFD96DE21A4872C7A2E643F42D81EF34BF4D37C1876C615489F76
449C05CDD1A3E631366E219C71F2E138A6E29C9022DD472018166F27FBFA72E9
3D3E2D595F3A3E6DB94D42D2EF8BFB8514BF6888BF540B49C04ED9FC46A680DE
6AD3D0BBF5EF644A3A2A34D2EB6F4E37946F0C146B9D507EE79DC7A715CF4D65
DB2611A714A654509D31772F680E47CE4FB77C94C9D4473CA0B1748549A2EEAA
996F4CECA9D43A2BAFA4423177A81B2D7B0ADDFF5AC82153843C6F7837AF311F
4FF876AA0669D8B9BFC58740A672F6547AB5723275A2276EB60A30DEA2F96633
1B52ACA50DB8C6437C945D1D7CCAB29BE95F06206B00C684371EBCE5B655FD47
D19666640C711ABF3A01379C262518BE40090986629E5D42BA4C5C361F62F2CF
41C075C4DF19A0F0AD8A46F5BCC2BA12C4D24A73630E8CD6A2E4D13A42A534EC
7EC672D7560AD5C157DCF9DD97DA09905C0BEC0EBEFBAFB779344C1DEB9627A6
863023430A727D50DFB8D021C3FA1F371DC668BC58E26F662CE8868C1CF7905F
6286FA59341E68A6054AC03039C6F13F534DDA1DA88A06EE36401A2A54A603C6
FE4820DCC87145B9C3C3C5CE0F22D4B5DEC2A17886B3FCFD6D88D94B5C171A29
4A2A8C26324832795536528644D282F429B57E1C863719C70EF2C8B862EE3578
55AB311EBCED07FC274A5222CF53239497211C13D02F8FB9DD123741A724CEEF
08DD9F520F03E5F54901E7D1914840F09BEA09B37359A4EF5EA889861CD9A704
8BE25A717292A1A2A5F44B948ACF6C46F5357CFE54802EBC92CA3E7B873FCA0C
01F737DCE787E36540498DDA516D47B4CF7D14FD15EFBB2589A3E222390A08E9
0B60AB594476A6AFB290EA1AF0A8EE76D79BE9F2C07CB7B9CBF2CC3FBE064922
CD09E76AA9AAF5F82272BE6482579AABC91DFC66BB2BD6CE0EFCEB51C3C63436
DD46B6D3A3EAAEDBAADE0FB704C5DE06C86869BDE4B8F35C341C90E60DB1AAFE
A7DB9D25F0BA34EA859BF991D0354BCAB97DA3AE374AFC3929AD9700B3205A43
3016971AF248EB2572298AB67A9377C4781B457EDB416C6FE608C928A64DBA7C
AFDE5DA65DE65B00A629EF3A9C3CDE8D3C9B3740FE2E9D8D012D2D358ED89B92
58E67B29E101264C0E29FF5FD9870CA66A1C03ACE9833CEDC888CD5D2968FBCD
39A24463D3E0A87CE9D5214EBAB9C299FA31AFF925AB8F21B25AD1B105C89EDE
A28E7C1EDEC044D9422F1B1537040858EB3F562CE6856CE3860D1254AA7843EA
D0B3EABF78597793E38143219321E41EA5FA846C05226796D86CF4415C5B72EA
5DCF9DBFCC96B5155C7598D6D71114D161E132C418C1617ECB5B7E091D1B11EF
F73F0B5E7A5748C8AFB5537B7C946387E6DF677C977AB426EB6CF686087DE12B
3E1C464F1019BEEEF9DACF5F60C8D9DB5DFC8201ABE06BC3E44E4F919BE1FA27
8AD38D40743CF176A9C55F64CF58FD93F08C5B690EDF00F3FE36C9CAA4C56E41
279AC72D81B1A5C2E93E324FF5545D0CE8972C2431411F730C6AAB4C0400EC00
1E45AE4B4DF40C4E3C5AEB8D2592E5AA4835AA996E5BB901627FBE024354ED42
84C85137F8872BAFE19691DC2CDE1797990AD8D3C18DBBB5E7F5657D54380FD3
18AC45D3E7C4999D50AC93B4DADD8E3D4CFBB60F46F6FE4E7E6C4D1AED79C614
4B1C9BD22D737951BCEE2507446882520611165AAF4A254A38785D48DAFBB19F
48C55F09FF92E2DF9B35F469ABC8660176F8C33FEC0D845F72BE9148067BB63A
9677148E32333761183D0C720073C05A2F6D7CE4EF45440710D3999635B7CE63
0194962E4183C3838D9401260A7437D895153D16C17CD2F83B971005CA4FBAC0
E247CC0DDB1492E6BA65DBA894F62D4F977DFF168ADAE8A1716BCB6AB5808C57
55EA09921F05567101BA4EAE81E70AE161B9B885DAD457C8351CA765BA358247
310D2D65F7AA103382475C093525EB5729D8AF505B26F99EAC72A872C052B2E0
A35453EEC505A64E4AC9B0D19B39BF010C614737D1463A65E24FEA77CBD29922
E290A8B8D528BEC8582C2CBE3733502E1F59F53F8A82820CBA3C57AECF77F264
0937FE1365B3985DC2DA7D7E68619337185BDEC00884249ABFF386E03D9C1C9B
A3F119A8D3E1CA21561EF128B7222963DBAACBD071C3701EEB814F06635F9B5B
E729C852A9BE85B84CB832782FC5B0B22B70CEFA573666D8EC508502215C8BA4
DFA1E72BBFFA5E1F1070AC2FD21F8F45D4B0DBF3B4F29F053C44053E14ED09E3
E7A0FD59B9252EDC8C38AB822AB24BB0E068DF816983D1F2F1CCB5577DE32847
B3CE5B6F1B549B9AEBB0B61DADB95FBC019074F56DBFC2992CBBF2D3BE43FC7E
8CE14C9FF61D45EF897355BFF6E213E8B7FBA1F6CF98CFC60EC5316647DFC4B1
1F89A33FAA0EBEC92FEB04C3A6A0FE09FFC78DD1978B6BA40D5F8F12BED39696
57670228721A60EFF590F10F9FCD090D1108CDBCE3878E032C863869EE7D5078
8245B1B6AFD86D04C4F84FB9CB9BAF821700E6405154C561A20205E725588F3C
BF187360F7F1D3AC6CE64CE885B786A3D5D0C5AC216EA68F8F7D3A5BD929ED20
5786C33E3C5580FE4159D0CA9287D40B271BABE42500532AEB53ADE69B38794E
048CE0C6DC07949849C1EF9EF3A305BE5821CFB8DA9DEC9B6DEE0EC34592289E
83AAE3DFF54CABC2D268C833BEB1FCF4564717BA1FB1CB9645008E8990705B36
E1C1395BEF33772ADD6BD3AB356D8DAB7345B6FF2ECA67070E2DB614666E8290
9A1D8257272EC336771AF17841FDBD5D61710D62F50463B47C8F8B5B731D6019
ABC39591932DAED3A136ACD1C9780AA0F25FA907699A94684125A385AA66E0B1
49DD482B26C72BCF3CC553E5E8A17FFA5B8282178F295C1CE0B5E19A665BEA62
8E5C361F4CA0CB88C20B42506AAC676750DCEED099E66D428930A8484AD31609
50B4F8ACE22418F08755BD425D00D1D5B53BF9698124006815BD57DD5CC15B8E
5012293173A587311A3D30D48887461DF29B23AF194E8F983AEEE17A046E6D05
7AD2F90240610A27244970757F3C25CFC3E853E2FEAA61FF602BA288D241AFAD
9B21B8A7567DA118DB4E6B866931CBF8C2255DE4C035D2303AA66DF56526A41C
B14462AED0E4D3602126C40D56F36B7B275EF7F771B6DC2A48A7D878901EF29C
8C1E3662B336F249CA6F816E510783229ABC3A605343DF722DCBF1C27AB8A802
6A725FAAD1B427C361CD8E3DE146AEC03E2E23107132137A314B58D2F731B547
7840F1FC1BA2ED183B5106346EC0D1CB77A7482BC6A803CD7CBE7297EDB0D63A
166BDA4DC1E9C27A4580AB02B561FF49E6D9BC9858A3ED3CAA1D77C99D5E6674
263F62D3E6D262F980CD3240CACFB36B9EC74CB1EC2C98500772D1B72B841C16
91C07BEB2428FC644043DC61AB7CE2363FF6B65CB9752CE148C3C8CBC4676C9C
2AC31EE36F887D0CF61A575444B3118085017212AF53848AD4A1D16EDBB8CB46
67B1C9C8795E869B9B7157658E26E1676A8CC9AA4B720B9068649C2FBC1FA4EA
344854CD26548C24AD096915F3D1256D4F620A7CBE66883BD07A191CC377126A
41EA96394170A5BF25824F7CCA33B64B7D1A70D83A06C101AB379CB47D6A7283
9E715522072F126379A165479BE72057F0D6D0311BF204A4CA27B07047B80849
C0A77BEDA560ECAE3FCD7FF41BA708B5EB9820A92F8C86B98A36AB956ECE9F5C
562071311088E6D0DACBECAFBFEF8E1885081943A757218D16DBB976D39B3C4F
7F46C54E3861D4049CDEA0E641F2476A5E37BE9DF8E2797BB52CA05603870FE7
C734D80223ECD48EEDC69939DA7ABB6B1C7AAA577848C5DA4B9D780F15576F10
A2DB1E51E1CEAEABDBA2C5682E398A10519385B6B3338F446210484C1AF9ECCA
460F09EA1C8257F5A710F4290FC2675B83E9CEF6EA95FD665B591E12E4D96FAF
BD8AD9994E963269C3DDF1A67170CB45F2AC14C9CFFC5427F212AEF710C921B4
896D04E61B913B6C41741C6196BF025CBC117087F0702F0B228D76EE3EF3F92B
71954D34DDA062E9154DAB0A9643DFB1B2883387C7571D4057D87CABD63E5D22
9BA73D9CB7FF02A992E25150895E9DAA99A1932A49161F1028074EDB17842C95
BA06A4BDA5C97B6B8F4763D21E005D89FAEBBD7D8B06F3FAC229C6C95DE1A7D7
574828918BABA81A5F36CC8C1A97564607EB59A046D1AEC79030AE60BDA3395B
9FCF935A925EA2904FD702766B36916DBA8F9C96141BBF4788F8EB80CB87F0B7
3A502C34012F783BEE1DD3D04EB580E47E38F09B4884979D611382D96BE1124E
7ED7538635E8489839F862F6E38B26B827F6E45D260A96273B951CE1DA8B9FD8
E30152DD5AF9200F8AC8B8FA39413858E8A8711C01072168C2C33A1025FD82F5
FE833D2187685FC378D9B1AA787428233F8377E4E03E6CE9471674E5EB3BFE08
D8EDBAD8D74DB6E9698459E3729274AA08B9E76FFDB4DE017D2EE6B73A28813D
FB7765742E60E70E5C5CAA3FD0AB6AEEAADB72DE788D21EA16D247D6D3A4545D
46298919CFB897E834D81079750511F5260974E84B5F4EAF748888F24F4FB46F
07CCD2FB9583937F0BE8B4184C4FACCA2D429A3F91352AE88ACF1CF225B164F9
2ECCBA00C4E5E9DC24349F29614784C3339DBF4C4D4D9525ED5B54AA8023B11F
DD5D37C1B60D5582E03F083CF711C8D4C4834A5A1D1078DCC4444EE308B8A5AA
AEEF347AE943A668262623D6A60F543D13185DBDC938B5A37FA28CCB1F4CC63F
2B9EA92EAEE2AE999771B71AF9B30F28B07689A702EE7999C2A97A199035EAB7
BD49EEFBEB6FF02B9C5BCE6B0E9B760FAC62828B9B2C3BAC419B073BD7C039A3
1644BF123DA78DD615C4287ED7DD43B679C08C186613FB795FC468D39CB8F3E4
69F9D141FCA217924A8D36EDBEC14C5256B9940F0800E6DD26001BE1FD4D5B9D
CB6110398F577234A79D34F58AD6DDFFBC47882B0F78C99ACF93AD672573419D
E238AFF3C64D29B8D53A9282543D83B3EBB1F1EC7A558CD8D86DAD66D3EC9331
7EFA50612695EFAFBC424FC5CFDA2EA2EE5BA19AC90D6880C5F70C2E00521348
9EA21075A3BAB4C488358207F8F6641AF333A71119C04E7C670E03482CC063B7
5142DB1BB7C813C7EE435E6B39AA70A9F61CCC446F6FD2D3927A16854567F886
7AAB0196AAE40FEDCAF3E4DB41FA41CA0E24908FC65500C95AF2DE68429C1654
F4C983FFEAC74FCF60D33CF0386F6A52C8265C910AF297CDEE38A1103E2BED41
CE8DA5C50E9EDFB70047B6D2CFA4ECEA0678C99ACF93AD672573419DE238AFF3
C64D29B8D53D265BB3C8A312666BBF8BBFBD24D39377A7E86AC489685EDA38E5
06B7B19AC38E4873F69C5F96D2A0373BDE40802C4566363B820D857B334F26D5
5DD2E97AB66BE0F2706D04006224651DBA0CB230AB26891B0C4679B0963D6CFD
EE5CDA220987161A2E2BE7F4212FB8E2A9BA738587D552A60FEEA3CC3D11A56D
1CB957F27AE487F8CE7522556200DA33D13BBBD899E1113DB8E9E10BBE2AAAF5
FF86EF12C035039A8AA12C719C0339F766BE627551185343CF673CF8BF91B124
40D8F2AD05DC5B65B3AF62856C93608B289F60FFF8C732825DA065D7C9599260
7C99330712DE5D58BA9334E274E26C9B301BAAEE8A0237BD6A342C96C41E33A1
F66F931F2A9A50D2857A8AD5CECD4CCB5FDD62F98D8CAAECD64C7D8468DA6DCF
2767A73767C2F5EC442E14391B45178DDA235B7A07AB6EA76230A72E68859E77
1835EA607E168019FF408B3C783D071E095FC87E63BADE1A9212BDB101703F91
2E87DDE05F28ACD81B331A026E3D72A9FC0E15EE51F97141125A74C48D7B5231
55BB827311033820B0380F65B3AA4F3E837EE8C2FCB0803869718BD527D78209
8E0174672BEA355C276AACCDE1295B615F37F1395827E29E3A1711FB2B69CB6D
53EDE445DD11FF240B19F6FB6C514D23A7A4F5455FF10AC25471C19ED3B2D164
93293F09EA311F492954C0212AFDF226137440909566CB411F6EAD662D6BD127
75D4F85BD47E3C79CDB4AD769ABB374D1B705D61C42DA2C800300E4C81D9D739
DF88C655165C148CA55C7A1B993F205AF784DA0937C74083746CA9A8557DFC57
3A2514A39057F1BEC82D844D2D51514742D35B30B867919C2493FC2B351212FC
B66B4CE90406085978F8EAEEA93BFBD52116889221A826EC20AC4384A8CFF8CE
CF07A5963CAF1BAEB952053C409CFAD43A877A7C420006CE3E9BFF4CCC25E609
7A206C9108935595DA856256A535618196664AADD69471CE6B07099AF0E0F724
0A1B663AA363025837B8F67721883BB280365F5DA1C9A7DF298B8C23152C0D6E
EEB97C9509C9294C6FDD6D4FDB75FB0AE3EC8FE0E78D7D547A1C57AACB90A8FD
5C40FB22842FE645F7AF26D6841809D5F0B52D59E6AF662CFDA9AC18A33B2ABF
2F5C93A198B5A109CA9D14EB30F6F4C1B85C7C52B673D6C884CC8A93D55990B0
1110D3FBD341AD6218433B5E00B6673118F12D7665C52DFB2BCF103AC9539C29
408400DE02623D52D3FC439A3F6CEB92442AA9CECE35C4719E6DDFBF4CC6E06F
7F4E221AA17F75D36F7194C419641CA9FEAAD87981D6DA72961783F252E49C55
747422DBADA7496A1D611D5D428A63460826B6BEAA35BDCCAED4705D73C2CD9A
14C5396873DCE47441B413975C0BB5A399722233B220056CFAACA8C087B4C0BC
C2AAE1F726FCC601277E9638D8E6E6B9718FA0DE6988F4EC2095E4E68D184BCF
6A5C4AFD15904D68C140C6CE231015D9395ADCCDAC76A75523184F814ABCE4E4
F660952474944C38B8502A8FB3642FC273354710741654704A4035AD4B6A7C4D
00623F8A7C29ADFBEE0043D4664253B09D5045642C8CD853C485813E28C40289
360E6C4A9A5C31196F7CD20B41AE6B28880F9C43CDBEF790281699E31C3F83FB
0734C14F8F8D31B1B2C357FAAA44467CB2180AB7F73FD0ABDD83226C25C32643
FDA7E4F9F5DA3AFE7424FDF8E81393DA14560C1643CDFA74C575BAA216CEE3C0
E5459E5F85685735F0B0A47B75F63DC4559D32A3155DD2355BBC8DE4D1B2E641
27A9EECAF4EA40816B2D83923BB9034808F6E4E32CEF72DFAD9C60730CDB6C87
A6D07732B9E716D79199A4028F1AF8776256C0E934F6A012FDF194B19E966F94
B1F3FF879474E9EA34D55A9EEB49B792D0B491254DF65FD37B110A735BA2759F
F48783B22F3BB3BB974692770856D2C163DF16C10F38588227F4ED3BAE507EFB
C166E9384CF36503CA353055D48BE8BC1C88668D17B5DE1B8D5A413287D9E221
BF6768D98EBC14A56B4FDC1DA224656F15133D61C144DF45E747C961FA362A5A
A48B228CF68EE0032B1968EB88119A375D4AB1DD29782BF033D64E97DE753933
AA83F37FD4D440CBF1154DE33DCEB8DC36446FB24D63F66122E702CD92A8BECF
44D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AD7CEF39BBAD71C9160C4F9791
0CDEFE67643E4CBC6A28EC8661015B69882D5EE1176D9FC173C6DCBF776CB6B2
59A230D1B50C8AD964B732576A4881AE9CEE27DEB401B9C266F63AA2D015BF62
0BA53B1985060B8735BBAF575F7C136AE676E52680371D036D1801406A3A5009
F8AA441ADE4517D2F4DE84F7193A22C569416F518B0DC25625EC9AFE2D1C6101
95FA32E61F5D12E43E43F6E039436FB9AA13D89CEE02664EA934E0777BD01EEC
83BB56727DA030EB4F11749324C15349A500674AA342E00623EF2FD5EA807D07
F16E915503CBEBD83B173D6AEF2574AB800153F3D80F49365D5006829FED63CB
9571B219B38430D6CFFA37FF627F4756AFF88FF10A172C60310C10FB6AE2E695
E526BF8394BE7D685F4AE35AA17151913D7CB8275C940ADDDBFCAF37BA250021
3239F12DC7E00B64BE342449D33F89196645962942DEBDD82A0C4A86F0366C50
CD447ACB8FAA2F5A7CE0F51CCA3DBB2DEDAB0670C65B522FDD1A87B85850B6C8
CF8B22E6CC94F1660E4C07722D1C66818F676D0D959F987B4513F382042F8031
1AABF4DFAB0C651407A58102F825D9534F2C1768DE50E54699A566F6E1078F7B
9F348954D59A13BAECFADDF1AAD049346C3079B29055B18C857995ABABB9715C
492EBB3403668A042551B0799A7646D4BA5BE8ED3B3DC02DE652AD3AD70EE12E
A881FBAF0BDC35DA213A632E310A73E8FAC30CD882C2D90B88390AB7712AC342
ED568844CB37AB5D309CF795520A8122F5EFBE0D7F58C0B3B310A6A8388D0521
522008CC7E3AB92D3244762ED374AA7EE8D919EBF3CB07A25182E3F959D47283
B193B4425174F71E60D7C2D3174873F55307E929B392CE3475109E24A1BE4844
F2E31995DDB0BB2E743B02F39638287969457F58B9C453592938E50753358D10
6FB48726A31D7C1528C92C72E8CDDA3C6402606AD16969621B7B86948DE9FADC
D6BFAFA574C89BC62032F460C2ACADF218975752E94A0AEB0AAFCF9F9D25AB74
D45946C4D4099FA355EDF2F32D64499E6F41E0452EA291471F6AE12C9B18AE12
447BB2BB9862EE64378E0F25D6E5B8A689FF7104DEED781C70B7ACF83DBCFB12
980956BCE2AFF75C864A8B5CA3FEE20277695CCC2E54A25041A959AC738AB6CD
EA64814758532D7DA349A085E560FA3A13FFD612BE78D9077FC27B0C5E6F7F3C
437BA65A9CA6FF7677680B4C9523B7602D10372015A8CDA28AEDDE6E02E37ABF
96D6709F7750E252843CA29B55BB99CDE952E807631756B1FB6CB37FFA4138F1
AB7CBAD5433F32E0B087B698901CCA4A90DCC09238374D5BC908EF970D0E8D37
21CE0C6950293E87F135BD8E491D8F710C5F31260C5AD761E6DF3CFBC88BCCFF
71287C18CC525EC8D73AF17F67AE52BC831079F5DE95A4B84027DD9CC23388D4
65E53466FDEF6E4D475F8331F31E58AF3A560C46F0F9A0A0E9FA210EE2595408
725D72263B2F7FB6E3B7ADE5124B2B60E132114FC4070650AE7BFD3C6B73BACF
76E1E5D2187136E1E88D3D47C5661CCCBA123B2C56BCA4F1724FD3C64E1B66C4
C8F1E542E38B64D473A4A2410CE61ADACDCE2CA7DDE82280B29BDA8B9B5B38E5
48162584D2EE4508EC7EFC0B6556553E8660DF4FC881B1B290AB76EBD11A36DF
260F40B29C0B81390C67B61C835FBA29F185C0181148D2DD8D49A96FE2EA1990
E5255A4690269FF727E31A60107B1545EF3A42571D128FD0EAFFB955EB75BD8C
8B15B695811895581A3D76B9F387D719B0005323B20AD59BD545E53DAF14D447
E9492F907BD5AD2F14BA35BB6E9431F02CE03E8050A97238F88827E75E2F5133
9FAD5776CBFCA949CED07ED01BFADF46DA47A77998C831CEA17602DF66E27E1D
AFDBFC032CCBB03D0964DF8D25F7BDCDE785D6F57EFF3C879DDEB99535E53084
DEB4536386594E75D8312686761A7C070EA75140331D7A0DD5731F0E395EA42C
8AAD42D9AB73076F309317F7FFBDABE56B4CB2B40CCA63E51AC2C563B89563D0
254194DE000681912B142EAAD59D6E77D53634C137AE6A6E83FC0D04CA55D146
BC5D88EEA830BE0E622CB3CE8347E2A199E9F45B0999951FD8F8AC93832B0AE9
E5660F58AEFBFD489E95ED60C44B66D86BBC45F71A9A9CDE4364CD69D506E7D3
C916AB979449FE10A4FAB74EC7001C7FA5C9A5623B07973E25FBEB23AF2E2070
2F9888B531CABC31F73E1809D29490EBA4C090854DD806FF8CF8D4707C3B6CBC
968560E43C7516341DA64093C33CE11E30603EAD00851CC85FB553618752CBB9
7A140C81DB516E544E04813437A0B89305D861C021B0C41758B4122E88E5C8B5
1F141EF35AC113C7CD0F17D6D970709230DC5CA56455632AE7D77D6C6E9E32D4
3FB4453D0EB7018DD843C98D78633017283042D9176672F0A4D5521594016530
D62674C843E300C2AB4611B6F40B275CCBB1A5EC6665F7123E3D1E7D536E5C37
2A06D195C3A456743FA79B795C5479F9E9ED52CCB922C8E123E36BE8CCA5BD0B
704F3664D73DA6A7100ADB8DCCFE2D1544A68D93CE36CC3596D0E1041AB82266
948572097CD369812672C37901600050B60444AF0562897836EFD474FDCD37E0
A045B43930057D198AA0F2FBD627B6907A18FC8507C8BE926D0CC551159531DD
06E4D7E02762A656C43FAAC86D8E92256042E3E88F696D4EBFE58F6512707451
5B1FAFEBEA4F5827DED76AF27796B35D19243C562AF625BC4FE38AF37D16325F
B9929DEE8C2848745C4BAB416CB9A6B340F5BB512DC333468FB500D860BEFB09
2E856CD10417407AC6A0DDA1E77D37AC83F0991A4EB12264FAEFE6E2B12759D8
76E93E78E14FD76B97270E30ED97901DFA0D1383C50BB3E6C3DF078ACB88DB37
ECB38AAF90FDEDB2321F0A36B1B1C0E935AC84696C5AC192C44E320690DD2DDC
C634D3D634D7CC06195116DFE7AC8144AA9B19697682E4AEA88E2C9D3762C911
AF08BA10D0FF937A6EC2FF53F98821703295813331DA7761B1A0D126F664EE47
49A7E86F7E4D048E65CE4F49F4F52DE53C037946E3DA5EF02E5AF8CEBFBE4C8B
26445AC6E7DF95B2DA1DFED4B02520A7690C27E19C27E21C4E44F1DE0A759DF7
DB8B0A6E1A7C5EA4EE3A4A352236F33501E761B551479D688F8057BCB4898540
A7562EBF1093E2F77C9B4F4DAA44C0D1A11F192E05E0AC30A739A18A7087F351
C285708E2AFC8CBC33EAA438EFBCD2A87AC4EB4D13ACF22ED108A50FE4E229FD
41C4BE117D38227741ACDEFCB6D5053D2A39855BBD96E88FDE5C1A8038539CB1
88D849C292680DC0205FC2580EF426EDC0F3BAB54EE46C97533DE11EEE3B9FE2
203DC6C75B27040BB9EBD541AA9FBFDDEF1F775BE0C411788B054AA9080035AD
11A2AFFDE3C954FF3FF9CA1CB2D8C5A51C42C71AD0610D98BA6661C0ADF2CE49
8B72C709FA1C06F01E4FC285CC72DC550BFEDAEEAD411DD89A32CB8A923E22A1
224E1ADA533BB2FCA2267F59BFDF4BFD1C7725A822839C5AD11AC06AD060684A
2D03C6B87E4C11A06FF233D55916D3394AE917E1CD1E2AB1045315DC5330FEC9
B8D0DAF3A73DC548822A77A8F26B5ED5C3B76837C7B75D1B42E6FC672638F8E0
6DC03253F9DA5E9A6FC65FDA29EDFB3AD6CAAD30A52AA3E631B7417F217B0BE8
6CEC32409D8B6784B37CEE9E6B7DC7DF1BA50119F71AB4967291D8F4C1CFF138
2FF6A474BC95D164B029EB8875677A3C0E43D867E93E3D0CB6910A4072C474AA
E956C8FE085053AC0C7676E2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D369
A33E7842920D073CEFD986A0584E020CB5105DD5E9D310EC9DCB0572AB667F33
FE709E3DDBED5D26699EC0593CFD6CA218A1CB03FCB945FC24376A45F2DE0C21
334AF429D2CAFAA9F401092E1814D53EB57B30F6D489811E5B9C00516C846CB9
4CC3C3D49254DC87A9C81E9DAB0D32A517B69BA20D99EC2E8AA1464BBE41C0C4
25AC7745A4B6585967FD23717BDC34137915E839D5E2BD0B0D0C7C2443555805
6EBC6B9C1DE4DEB85CB85A5551069F6D5DFC50F578DD766561FE12AE6A3B9D17
D9020A3E859E9B0354B437C500B5AE174A0BBF4365D9C9574F09540485BB3BAD
3E68FA5156719AF8E823F31C50F5406B17CB03C86DDBAC3AA2E36D6D9E2D5F20
C67A71436062B64C1770F371145495BAD7B6C32B93B36DC34FFF3749BBF1AA29
F3CFB26DDDFE22BD9618E23C7FD95CDB02DC661ACA0D9FA5DA0B387CCFC7CF7E
387414E4A017F9FAE43F47C36E5544A1F251479685AA9AE8DF53A2A21D951A60
E73E67169DC41EC459CE994AD4BD0065D122E44FFE52EEFF539E3EF40A7B7772
C16BE5309CF91E7B9440BC8CE2D95FA1D83CC08F1F3AC128FE6CE93C051E13CE
2DFE658B0A72CFB20917A8FE9026B4F9F6FA14603226BDD342BE1666E63F9983
209DDA78F22714FB9DE80D3833DEEC7848D7C0B82DA11620868D9032C34BE24C
D59ADCD6CCF4D19716E824E39B0D02A840424A84EDF65562A18C3204A5D5FB67
2927178C7AE024E79C6163F8A74C8738FC3DD1ABF151724B2DB809496CF89ABD
F642D9E191449727385DBF12F6ADB74EB358437D0CEBB9E03109C593BAC09CA9
96240E2B74A0CECCAC565C16B53C7C5E1A202F5363892C7370E3BAE8CF73F5D6
0BD9C4958040D3EC1CEBE50FBA2346FA0FFF9D966F224AA72C22207BCA226752
B21D219F474821611A35FF2E1FB51FBFC7B27C86A5A58A0F460A90B3B6601794
E5B4C81CF3F7384A29702F0BA28FB2F0CFB48D826B3BBEE1AFA053BFC374A5EA
56B4A72566DB6CF6EA75B2839C6BC2D526A7E9DF95F4FEB4CCA4F183945D1BE4
54D15D375E5D27973FCDE87E185B96619939EE41AC7A11138A785172F225BB69
F11D0F361F199774B9A0F86835A4D7868D7852866CB22595590E4999A373A0A9
7EC0AF4E853D65DB474E4CEB981A1B8AF7422C37C37CDDFD742CF9A7487D9D50
D7817C71F6C04E2C8FE6E080B4DC810E1707A191C574AD599BCD209C9784DF6A
802C8E790FBBF8BA9998663A702D27FF94C63C1DCD3B35A348F6BDD5605EB23F
7C67A83B20DB01FDD9B21BC2CFB46A86BB29B6F7B848728590D83709A986887C
7DB8DAF0F445E6CAD771D59811D25FDA43865CAB8E8A20A9326D2B50BE61172D
F7B0803F1857DB3A61D578E4C7014E46B8B233536D2EA725EB7D6A9086084296
C4A1D7BF82A9D569A455C2B2927D7F063EF3322F29255941774EF076F4DD66A3
0B30A7BAA9E25A8BECE17AF116E2A6AB8F239D94C1E902C46946DF4FCA64CC16
E318ACAD367833CE22FC43ED671A14FE6E519F3DF7A42DCD2CCDDA95F37929EE
55B032A5FBFE5991BAC2556AE99E8BC2AB38547FFF70A5B6DFBF7DF68BBFEE25
456BADC26F5496D377219DAFD0E416EEE81AE079D8FB17FDB11A848CA28F5870
230E9DA69ABC80788F2F72CEE5F5594B3AFB25BC134B927467A32C20AC38D1F0
CB9EA474CD37BED86D11251F0D8BD58651E901CCC6BD34A540CC0B87C0CCFE8E
3C283C02A4655C579BF21B53D1FD37996C6F899A85CD37431DFDAF370FBC0313
D946B09DCF30329499AC36E5FA1E8FE0EE6A8E81E6A3BBF9C1524C164F2EA740
8B1C0471F995FF9B16AEB06EFA17F88C1BC49F08D754873A91A8C256CC17087E
43475627CE5C40467BC18783CE90CF308FEABD6947A9C315C657AF20D77D0057
3329FD36DE08A63AB714709C14EB85869A09552C199AE1E41DD7C45456CB361F
3E4DFC92F8E22872CF885EE7D3EA8615119754DAEB4C88C6F6D2CA046B557000
AEE2588BF0A0D1B0BD37D5F03F931477D764AEC8B93E6BFEFFCC2B643CA0134B
3CE6231CE93587C67879C9EB1BF1CF6EBB1D86127183C9297554A68489A23C8A
FCE50BA3E0A56557DBC33B9E32FD7D590FFDCF40B4E88E7E4568D4D112C1F7D3
503EE1431CD088D5F2D606382011449525D7A632344BFC1F60C355698E307A36
2413502B1F128D874C1D119798EBB0E11BE341F6DC96933BFDF5A9F44ECC5B23
462B2312B87322DC2D7C3F9C78E5B2E05B20D542B7E6459FA2CE8C1C8A16918B
B7BFB44B8B81D92F63481CCEFBF4264ED8900D17D96094A779D64952A6D39CFF
DBA38C11C7238C738370C4881B9C666EF6308772F76681769749CBBAAA03FC80
D55B6DDAAB3B5903F65176285D4E6B602D25520914622B04BE2DED51B9123DA0
DA1143CA9AA32E28424B735BDFEC2659421DAC67295BBC1A9A2021B064295C22
677DCCA50F1DE05A4AF2145FA0FC5673FBD1F0E09303F8F6B66391CDC3C3F9B0
1526D9D71A74984522CAFBAF6CD275B25B2B404A3CEFB3AD50732A73133F6217
17A771A7A61B41C7B6E6244E5CC893BEAB521275D0108121C2D778E26F448997
6428984A7DFACBD3FE28A8903CB42EB0ECB0A1D7B0B3AE8CEBC1461957D7BAA2
0EB9168C6AA9E420459A76AE8021045DC09C95C9AE4B4EF735A5414D985F6880
B1A441900C9DFCC0F7FF114C014E1DA800226FFC34EDD551DD326E58FE258D0E
268FFFDAE1393586EFD1231AFC764EA8585BF507366BD3ED3FCC2FFC35152250
149A30DFDBE349FB331AE9EA757854481CD1B3B8E5EE6B8EE54B4F73CF066C2B
9C5DF63FDC0ABB95E0C51F56AEDE5B160039346F9156826750A779DEC0047602
E7D072252999CF429D4E3BEFAD5341A8E0A19BEB72BCCD74EA801348A46784BE
9BDFD1AA8BFC116E09414E329D0B322C661DA6A7C2E6C5ACB12FB054A7F7E298
8C00C40AA83CCF0794DA7C613DA219E8687D74411CD198DA90520F76E25FBE78
A989C2561B5474AEB9877C2786C19E2ACFCC56A8D0B4D6FCC4A69DD51D80866B
FBBCEEDC4078A4B0BFDEEB9A13F41E3D10F9A61C9B8F56EA17FBC2926F051D0E
E5EDD68840C6134EB89984A6F10865ED6FAAF4200196EA4BCB09F019123AB920
02863D00F80A1ACFDF65AF0146DF74E0240022D6B75361C9DE43C88B01AA6ED3
EA2BA9EE7756AA03B0DC87E4A39927BFE1E941C56750891C94A4B2B51C83CED9
FC4CD766291C78537D12A19A316267E1B0C1452F196D8B206ED266C2A7A6D62E
447E551D1193D670F151AA96F678ACEA70003248437B863AC7E6CCD3D272C580
211B33A99DC5E168EDA2CB4A47A9FCC007F910998AA28D18D0C0D347BD4A27ED
915F43FC0EAF8C7F57EBFAE58F6EF2147CC1E00AD1B1F9FF479612753E3B373D
0E5E288AC7CC5D3A75109498A8FA09018EA13E7145AC5BD6439930D168D60FD3
5D56D0073EB0BE646E41F0E12E0C0729E5F10461A8DDB90321E27B888606031F
DD3014D53E32719381936CB07080BFCF6804B66C3760BB3AD124FF837C7D4C08
4DF294092C235A982963C9B2584CE149A22CFE128E5DFD3A429D84B9CC334F85
5CB82EB7DB98B627A35B9DF506FDFFE34A89015B64AA83699EF8A0B78ACE0816
0A5815F0111C158DDA35981929CF4F600F677601A35722C36EB5BD214957FCC4
FF52507C34739FBB4F7C8DA144121AA04F2046494AC2224E7075060A8F018EBD
0285AEDADA45B5D4E966EC28617A8CEF36DB73A288F768D4909498FC079868D8
8C6FA455EBDD917BF17E5C6E302DDC4403A087E8D0AC3F20707869C5FD40D940
A885310CD6D5CA9C3518E152654DE99E0AC88121A279AF959FC3BF0ED249587C
EDA6B9310742DC47A084620AFE85289172711778FD9D4C3555DEBAB6116D53BF
50D681063EA6A439F193E4F510ADABAD7E396F1FCBC05A0C6DC542FB532DA36B
397C5C88DF3950EDFD6CEA20D0649071442B2916EBCE5F4AABB526ECE28D9E58
369BD6AD8A796052070F4C57807318A33199BD45A3407A477D1A7D972649F1E5
AAA05727039869AA1EBF87F75FD4FACE6AB8A46C5A7A31F4D96DC713C2DB10CA
DE05ACBC6787BB5EA465FF0CFACD9BD496D7A7903F91BC3985070ED99A566625
9191A1A11479E278E62E97B16645D354E54ED6792B4A0CC14DCFE904CFBA6632
2757FE6ACC7C4292C453436B85938B117D8376DF619B6DD938A80E640D283286
1FC4D38C36834B9B073304A241AAE56C846E8A491F1748B88111EE5C79A76F41
E902E325643F78D02419611D50402BDEB3A16A92F48665E4BB5A18DEA609CF8E
E7973ADF7367A2C182183B88E0CC21CFF93B0A2F6C710B9DF66B6377F7AFBE59
2FE43F8990973DBD05127C52F8C590E9B0ADF4D5EF841A395911BA428CD87225
C7FF28FDCD4FB898A052A0B1A1687F845CC5FB1EFA0FA399B62F4D5CC32B5445
B1A53EFB8E082619C089CC36ED066250AA99949CA91F15452AB7DBF6DCA40206
6DFAC37A4B73916AB968204D34D6787CFCA86D1E81944C5799AA78626137F8D9
85DDAE015C636E3620836DA8BB5CE31BAA722DDB36BA5642CE4115C57CC63948
1AD72268CE454554DBB8E693716D9FFD953B7B6514AEED350F45EB766C4ADF2E
BF18F155CF537ED9A178FC479350B20DC2EB1DA38A4A0DC468308590E1006BB1
F9CF94C24746C3FDA17F2C848A47115838262A37F4F77A5EC6E370B94F19A54C
3ADAF77BFC22A20736DBCB96F07CC74AD17A93D3206EF4D481A294B8874E065A
21F6CC868ABB2CE5B2C145DAE2B6128E6C913C88155D334C31E6AF2EAFE4760B
0C7A7823081E4058437BCEF4817FBF8D3AC972C91E47BB642A01E0C4E0DE1F5F
50A4B51BA6023F692249430BFC3D84DD1BF24F80D09758BFB6BA24101CC96B6E
C14A211B85FD78B94FF98D62801DB0F4776280F669E93B30BCC7B4F999BD126D
2F0B0927CF41A5F11E5AE7C363134DA775544B63D281D68BDC4951553E8660DF
4FC881B1B290AB76EBD11A36DF260C3FDD37369DD094770C1A1B8477244E8695
B6DAF079BD58A9585CA35C2C450B5929783DA0ACF374733D744707E92C70131A
55B77E3CB0CA12010DEB5B132FD4C5CB825A016D083CCD272E8A5BC5FED4DFC5
301B554BC721F5DA4BCEDF664BA6DB13755321233449C37F2DA97E67DF10D2F7
30416FC7940668F722EFB7E8ECCE37D4138082D5999995470C2ADA7DC66857AE
CBDE1D3BD3710A1EBF2062108EC36BDB46E5704EA4E95BC91194E2A4F97456C5
3750243B70B07A7F9E0672714E2AE73E4139D9E1523AF0F4CEFE3B4245E98107
4B8637A89EE47EAF9B93FC4576BDCCC82C60376236C2126192A7326616CD44DB
FD6EA2CAD6BD84A5074B5832023E809B80408BB9B61C2C2F6107E32195B8310B
D109A1ACD027A29847D9E293613BBC323EA586CA1B50B9C689AC813A3838FBF0
BD10A193725AEE55D7062DD9A9AF99461B1F89B3CCB0149CE1A47C5BC39C5BCC
EA527FC5AB60891BBD258ADFB0B4B8A9104702C42C30D07D729FD4F2FCC3A6B9
7E1F5FFCC375C7C9DCECAB53F758648FB82B7F4B32EEC804BF057DBFFD989C8E
B6A211AB55BEC11EC6AFF814B86D9D5DD7FC4E9F96085A372BFF26D3865358AF
166718E4B1CA2F5969798D1B7F38C7734795D322D9CF120FAF88391E1B6BFBCF
6DC68B1B645C5CFE109AC7A355699319C74C3F859B9D4DEC46A4E3530340F834
7DB6277982BCA979CEE6F9C59A6684134925909155C60AD3A77AEC843DC75C97
EACBCD28E95F0705BE16EE2E8CA3CB7BD913A9FF9C2E549539C355AB03395693
38D455D8D355DBB8548F0D58ED8419EB9CB1002F04C5A67AE11CFFFEDC9C8C75
95F0E4A6F4D8BC40C214E62974B83A5A5CC369CE9F3DF01FD605501BDD6EBBBA
ED8A49B82FF79AC6EB0B36E2F4794FF8D71B56E86D8B7303BF3EBF660879783E
563E5FD42AFA287771C9340589046D29896E8D1807150C2282F11907184F4C27
7CE3950462318057F893A50B1BE89222348D7A061BD9A2DED98A79B1993FE3C7
F50F9AAC0E3EBD9F71A7007ABDA1E71EFB7075790A3AE2BDD9E27A71D3EB4D33
8FEB0AB118E08055A437B9D501FECEB50C30C15340A22B15E6DAC8C7C1DF1F8E
57F207A7A6C9DD70F59D5BB1DA08B0E141873665917EF38084D649289E4600F5
A67256788F406EFD35D1A7467119F1E155676D10A8A35955BADB667DB10185C7
2B16AA125501337D3D039AF45D8E99BBD874DD442CB045AF9525279536814044
F4AE7DAABC43A230FDAC3F7A147AB521513CD600F052831A924C5DC9771CB880
E3A19E3854C9EA86DA22AB40A3B3886A6C0542C01CAC64ED1E3E485982631047
6781777382D05A089F2CEE01CA979633EB001C3B895E824DED43C96305B0D042
E6D59B0716F1B49440FFB6EE0B0A7D70523C2DFB6A9CEDB463F91D861DF98981
7BE1B392D36E3496D0238DD633B9DC6AECE0B50916D1A2FB7D69AEB5F1B82598
8EF44CA9EB453D3994AEE4FB12D9EB4B069E3C6460A7A1DFDFC053A837941862
6BEF4DD08E57DD9280429B46221987A70CB1E13FEA5EA1DB1FAD71C69F5C5C9D
103BC205185742394D94412E4EB6B7D7B2A078E26A1657650D50CB35C74DB898
E3DFC435B3374F45AF41AA09126CC46D6C604DF8961518B7A460A2DE4498F25A
81DEC9360CB9AD88152A5A70EB77B4E6CB8006740B0AB54A7784D3EDD40001A9
8BF261B818F2C930241C04D38E77E93BEBAED663B2296A5B5C21638900C3AF88
825D444E3C0B1C0983B448D76BF88BAE37BEB1482EAB2DA6DFAEF53253549A5B
D51CE37B38C7734795D322D9CF120FAF88391E1B6BFBCF6DC36BBE88E0F05541
F9D31B4518C67024DC179AE59E29F4DCD854121ECA94D1953CFB6C2C6B96E9ED
756FCA82C808A50044A2E997DB689CE85F6312A6A94F0B83CA63F831465393A7
DEB7DA08B3012A99FB2FC7F6FF7AE574FDA372E2C284B9F6E0CAD92C3E68A715
763FC442E8A230C5FE8FBD210694BA937FC0B4D6B53B53B9E8A4E78DC2C1DB25
F5B010131BBD91387BEBE127FED3E0DAD617D69ED7BD7753B5583F089317A25B
1C777C39B0EA1311D05D99D13E33BFB7FC73679A38ABB22E10CD76A8825064EA
9F94B5A63D96B1F47E96AE5F10E07D9A75E9F4AF54FAE1598763EAC0A67899AC
FCEC2032F4DEF78BEE2B5A97ECB51FCD5962CBAB6CEF9C79F14FAA47A1B9EF94
49080DFF5B50250FD21BEA735122C136ED0C6ED7F6245C0559045C91E1147873
400FE01EBAF6D69C3F970F89B6BA6E8B05DDF2B538BC24B526ECDC0ADA060DF2
C32634256EEFE521828F73C7359848C1CF6BCF0BAFC22DA5FD7DE96F97A00D04
175C885D92F17B84D6256CE1DC9AA6B0F2A8DBDC17A5FFAF17078CC55DE418D9
573497D3911B0C5F49B26F7EAE7593248EAD1CD481275603ADAA237E257A2E0C
8B15AE961C18799F033A6441ABDC64704A961D41AA00EA0B699088915CF9F722
52A06449C43E8A3F98100A686ADB740C45D0CB167BEB8857F526D1B56B485C25
76912814545EB4C9191CA240C9AB79C85E7B324FF5656D24E0DA26CE769F3FF5
65C7069CD4D840AAF25F7B190EF15AEA7A75F7C114E62D234EA997904CC8C0F0
0248BE459F80EF067A8069A068E7AF13A738879EB779D89DC565746F129EEAC3
CDF33EC8821B56DADF435F118C799C34B50840E0DE2ABB0DAA2463EC7B5BB9B9
928FA04BEC5E4D82B404A97DC2B00BCFCAEA652D98B4B0A63597D1BCA0C4BAA2
BB8528C34C369BA3D1CF2C16A88E8FC0194CE3B471CC2C4DCD7EE8DA67D9BA8D
0D50E67175C8EA5084E4FED0637D79FC8F79C31584FCF6834D1BBB4D7213FED3
D871DA69398973302455860CB9D29E73A85071558A0F760B41AB559982262323
1065BB9032C6A3A9CE03FD8D7995C36D487F4473BFADEB87B56BFE61D8947254
747CF9848901DD600662AA1240C29A34CFED328F3925D3721996296E34BAE5B2
47D73AE65917E47CA00E739BF74AE092DE641609B79E1F1932EBBA4D734BF44C
ECB039B86F475DB68A6AFA0948DB4C2E95636EF8C890D69230D0C80EF1256980
4A23475AE7AF24BCFFAA6DA004A90F53E78B51B4294E3DCE916DF04CA917D591
BA5E7D65FB18BC5BB7642593932C9E0DCE8138F4F2C664871EB1A07B3A6946D4
5571FC760DFF6A5ED2076CBB9E7F70CC4ACE14D54BD3389E38DA769C53E49FC3
D5CC60F3F1A0E8B2BC9AFD5067315E4118D729461112B8FC3708B3E83D87F3A3
94FC38E69967833C0E58B25E36FB9674ABD86A83309CFE771F4A5F8ADA324715
C75A5662DA978663984B2C0395E5756C0B3675F3C93506D73861A4BBE46CCD92
B9807AB6223C634AA476873C6E9815AB3FEB37E78106CA0A3441735AAC9EB49C
CE02D5EBFA9023144D99A71EDBB90FB84380ACDDA68AD7F3730A2E41C74ED565
99CA1B203671F2DFC03B251D8ECAD2B28F5FFB14DA87DE71AD3ACBF7022B01E1
7C53AB73675841F161C0AA7536E357B4C0AB014DB7971751975AC7A57F25C391
94F9288B318E8D3296CFD6AE32E51AEFB4E69ECA9364E5FCFA9D92F96615A592
2333D102DDB3F48F2ABD34CCBD047D6A14598F301B6A7E97363ECBB7CDE475BB
633CD017C23E3F6BA6E1C44B5135397B9529EF8743BE82856869B3069E84EE1A
7A786E1000B59EF234B71023BC83F4C60D179347DBA9F2647B2B48C445FEF243
2F102EBF27E02DAF7C12EF47D801DBC67D95FC6E9D36A82FDB69F62E8E5B900B
8591E0336E37BF4D4D9CEBC3315ED3584DEB30F7979CB5494CD195A10BF52ABA
14FB1BC21A4E6F8EE197ED4CF058FAFA3618571E12A203B72A1CD13BDC286050
54717CCAAF6D21DB9F7DEF9890EF9F0C943861FEAA6E2EE8957F58F6549D7189
9874A3F85E82C396D9E2891D8E0D6E5571D4EF1830683981D4C7797575C9D319
B53086DD9F4FA1AFBE7AAFA01BAAC24515355F9825C843D0C6BBB366C7058037
A814FA8B150CEF52C48C478EADF2E58D3CB1CA23A33DFB11D82AB98A10F43F95
EBD82229A14EAD28B99B763FDFE1A92A3A310D956421EB00D5E9FA2169518A8C
757E70FE10A36032D13BE99BE23D9030CE41D39C20CE46C22920274390AF5779
1BD9AB85DE31338F5131E0F8E91EA06D18EA72F20358E40044BA7B82BEACCD10
49EE3C4C526C77DA0A0ABD46A72802B0912C5C20B3BCDCC053D414AD548500BD
FFC20DFA02DCA07F57B5F1164FAB22AA610E4F824E914915376A127DBE3085A3
C56EF42335757B923C2A6E03DA735F5DEF39A01E9C18183C34B5BC8ED3EF6591
1469F5DE55D0282AAAACD9DA3B1559BBA473A3479DCBBF4689E4A980A46C300C
64F68C4167272564959D27621A455029BDFBD93B732C349A6E9AD21AD8D3A004
B510CBD2D376519707417A6049A4AD8CD66849368EFB4CAC068A62E2B9D20DFD
D5A0B1D64C656EEA8A48184EE61FC357754093C51EBC67E1499C66E969C0D0E4
1E32306A316F2A64A8F469397D214FA4A1DAFF1C095D35B14B27F7370B134CDF
FF3FC74BB62F8FBBF658F5D2F0B3975D523B7CFDAC57C03F5C5296CE274C1155
5E0AA348F40312B91E66F516835B7EDF02BAE8B740656A0EB9F99AF1FB5B7B75
73816388541ED991DC598699A43BA13D57F84723738E1B94C3029520C1F8D787
F99305EED1DEC90F998103A821C35734F0153950E5F72FF6A8A617C22EE55AE3
ACF0B696E4444DE0BB3491FE84A63151B5F44CAC53C721060702EE12C6641799
994DEBD48FCC16D11AA97312142611205589FA84AD15836C555BB6E1D45B59B3
DE7CBFD19E040E3E4CFE2419DE4C034350833FF941E30A5D2EE095E3608C4038
1381404A39FDB273B67749F5A93ADF2644237532D6D591C1AF52457E448803F7
12215F562F31C628021C6E686D329D74455FF83DEA9E8662C77024836D8865AB
F8DFFA5E8F2625A3E11EF9BA85A5458FA4CBDEAB9E33EF3C0E61BBC2A97D9AFB
48071BD6A27A06771ED4840F93C7C4AD5B083D137451B3C8A312666BBF8BBFBD
24D39377A7E86AC4896407606B895C8F3034F885A299EAF758FAE0CE7863428E
10647AA6F926172B8E50CF991BA7BBF67DFB9B5AFA3529B822F94DE028A8861F
BCE564DCF89B36A5F1C621FCE1C4DE9CD7DB5138D126CFBBF0DF8772FCC956B3
7067F0AE8585A7183C9A597C9CB03AF17631F9A02FE5ECA15D560501A4A39A25
BD397C84B6388A842F52A16C3549B9CF47DCECA8F2F7921723236F5F33E63C91
15F80624303534894DF0C0E381E69A28D43710781EB7D551626AF11157521937
7889D903CD27DD1FDF56247DD3F1CE4AAF3A3C3E59B2D1695F1387636BECAFED
14399A3C13196138C2D5C101C3186C984397085B1317D50229D50FDABAEA021D
86D68B0FFDB927C361CD8E3DE146AEC03E2E23107132137A3140B94965079538
C1F9087E6FC665136B7ABFFE8DBF1188146DD02255A7689A824B564B699D4851
872CBC01CED22DC3ECA2BE88D881CC03929299117F82FE4F8D747100BFC81C1C
78A8800AE691524E1C6FB25F41A15D8BBEC30AEE4BBF2B0C0CCADB597E641054
899B9DF267A4626B5C2BB888E40CA4B33A26CA98303D0E9981AF8EE6A59E8218
456871FFD26EDA54268F065ECEC16354EDF507D06759A297FF423AF24B9E1D24
43EF397EE0AB134571C3433D4D42D381A46611D41A85C2E946551D2A98F35FE4
580A8AC3A6024A63AC8953FBD8C38A02B7EC1B1DD9378AA3BBF9C1524C164F20
79D1A6BA57D2A7432584FBEE46BDCFDB91688BC9DE1EA33C494FE5453C7EBF63
971875D3BE9D34E4E1F158018673CE9BEBBF34DCED833C98E119B4D94A715B2E
09382A7AE20E03602AADEB44D40D708041073B93AB8CEA60D95B440E1A636516
C6190C96816FFAF579E4255C8665D501422F7B0D981339A9C2D391DEC576BE9B
893A99B9CA5F1E6B2E35823D44C5397995730DA04D1BD946F4701F5CB340705E
F721D67681D08A54CBC1BC8E335DA6703FE09A96DEEFCF81C30A76087592A9BE
74D88E10D6CB0968AEFB7F45C850E3D2FF64140454C7B5D152F6224F98E09EEC
609FDFEE06012C650397CD93477274F36DC3679C2BAF0B60D081FCB280CF3533
7D7987F3040D71383A96593E3A281E28C6AC68EF3FEB574390780C0651B50C65
3F448142EFC0771E034AC141A9AB277028C2BD74CBD41D34C4C6DC04A2F83D58
FD75154497D13D16150FE4664E897E60E0EAA3A072E5A7C5C65842AA0E4DD304
8947E00BE09D438052E27B75DA5FB7AD9946AC45E7610B15EDAFF673AED3BCD6
DA07B1B72102DD4C2061948D5ED631E6FFCE4683E0F9CCF77BF7D98A1FD5283D
D0A6F7B6BA6C4B79C9207DD0171BD9AA3BEA8191E73874602E29F93459D9A3A1
D15E4C8787DDB4E6486772588759D8017C1499B7E1C65AFB38F89FFB34FCCD25
C66DF38E1F65063B65B26A95C303913F5C10EDDED8FE6BED3E0DE0620A36C010
77D26D623DCB95B59AC50950FEE6CE4DF6FDB7BB789E82ED2E3FE44930CCDAA1
3F12E1E9FF0EADDBDDC4DEE910D485E61C8871E06B108ADA6D61722D3C043FDB
2C4C6C2DE8CB4B7C1FC1DCD12CDCD027F49066687DEC07042B7150E8F38FEC14
69F8A4A71FED1B0E1C8507A04E31173B39F3FBD6ADB74FA1DC3C2FF48AAFD885
26504EA8839CDF6997920AD67D36155144EDFC19502B6F78DABD527ED5AC7099
0D2385AAB0872EBB9A41B5F84639A1936A5E8B3A03BBC5C90C6F35DE4D41335B
B22AADF318C3FE7DCED1EA729FBBF3D90EDAA55D589407E0E66BA5AE7D8201BB
83A361E37064153AD473B12FE7D0374D8AD58E28B151ABD93DD74C7892F5725A
D7EB71B434DC1CF074BF2C971EB817834446D5752B220BEDCBD9B93F5A2CF024
A8E41E62F759A68472D5451426AF6860E07C0315C4F1B2D60634E7720C4DE55A
DFA15F93230CA72E140BD64AB6CDC615EF48C5622843D768209A30A227C3803D
64EBFA9F9EC28F4A1E44516A874C5C6482461E0B5960997AB5BE21A305BBE0C9
EE679003C7449B158E59919CB424D1A5884FA717770DE579CD32E513B08278C8
8BC01610EAC6EA6FF2A0CEF6DC9363045DD62F377C2583377A8955E370051161
02499A38F5430A7EC5545724580519CD8FCD7935F17F40DFC22DDA6ACCCD11F5
8E7764E81BC810573FB1137256162F72DF3F160CE46AC1499E7BBB9BE8925F35
9EC5BC40EF1D36E527912C174F142E7B4D3EB4C3E25B8FF2A49C4B83171B03D6
0E7D3DA9387BB9B2C0306B59498FAC7E79D945D076CD5A4DDF7CD782527E9148
74F797F8A78BDBFA82BD9A0A1ECC2433DA664AA4561032425AFE643A33C88480
FE4036E8A042E068118F3352659297716462DCD0F173B3A48831F928DE675B03
FEC3368EE5E8AD3C596F19982007F35424495B55847F390A0384C13AA3BA4A39
E39B5025BBA3B6A52103F121AAEDAABF3CA0D1F07DB8D5C9AD141C8C7DC1A698
B24B1D3C3DAD6CBCBB6C48347D7C6128550C2AE42A241645B688
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3695D634CA0684474DF6319B365E4A64C90F206C9482
B87592ABCED68E71CF21347EC1299AD5C3E089B07B4D82789221081D1C75F39C
BF89BE5BA6C53DBF61FB3614B78F4A8FCD6AA69212F7C45D50561C28368FC5C8
7A4507A5A16BD33271BB572126735E72BE44078D1F71342A97678A63DBD2B69B
E0D1124BDF8EFE3FF6FF5A943CE835E6FE57C59ED52DF91DF9A97F17108D4EA3
AADA25B85BFD07F9BCA9D7C412F535755FFA6B31BCE8F6DAFDE2CD6CAD4FFFB6
9A018EAF4E1ADEC4489276D46A89226F820B309E311279955EBEA24DADEF30D4
B53885899BDAA0254B708B440525163FD5EC1B97E073026515F10BE924CF9FA5
9FE0FA8765619363B21655F6F293D14230591A731D24C72D595CBA1C1DA945C9
A23B5CB2D2456970CFE1D8A1FE004BE8A0E7FCA182860C639094E35D8E97E518
127E38AA43238FC881601B9EECD1EFE20D2490677C7E3646FD697FD45E699A18
CE39B3FF85AD7FDC46FFF208660EC066319191D8B164C3CD8810A79C26BC130E
DC36D1356B4A492ABDBB6E6BBAB0E40ACB031F0472D540C816795C7441A77024
24F475540FBCEC97CB580C5394C6E15069360926BC81871AA291B636CBE7AC28
F95752C79F6060A64682DADC55C73F3A0531BA20AAEFDF3C1A8C7A0C3822D852
8F0360265FD633B4DD39695C345BE2D192E50812AD622A1DF8BD43A2A467D3F6
A11CB346EC4DE9FAA1329C78052CF521057FEAFB7FBD7CE32033112EF610D06A
A911B43777FE7ADD69A51D2B8D3461B81D3495D6E1C3ADFE56F6552EE4B0EF55
586C909EA0FBD0610D9DEEDD97C76632CAC9C41ACAA1C63AFF7BBB67EA436703
B71C8D3518927329E9ABD874F200E805E9A7A509CE7145C5D3C1D547C838B2EA
3ECAA2D1614A14CAE2D328B6D0DFE95034FB9840113C9289C6C0270A05C33617
A9397C2EDC782173CF0B8FA401B2DF453040EC4C58E950CE2F69547D246B8B22
F8DAD709D5BBE02C6A3AE186602953175B8C4B498A53AF7BBEEFBF170D23F50B
CB0F98979C4C8E6D836D46A9D4D63009D8334D72118D35BA1A3FDC9999CE820A
1694C2EB5EB1A3E3CF9D823E87FC080E8E06F1934736F800587AA728843CC69F
0CD30F159497C3D8F2EDFB2DA3F862C677A306312F0FD135791264F94A566C93
C5188563E26A4E67238CEADAA32E386A3ECB3266C14295CB925A67A9046A5CCF
2F8348F8C6DC441A5940EEA9D222E5860E806AC2AD5C11C06840B8B752AA16AD
1366EA83E700707334224B460B27A5AA9494CC2D388697FCFEACB552FEA5C058
58350CAE83036F73889ED856CC94936620C9F5CD536DAA1D5EB1F33C32B0D659
BD56336F548494FE3EBBF39CACBAA8DD6CB5B24CAA722C5336443EF29F0C2FDE
2EDBE4BD24B237A5DCDA94E1A2EB391B5212025FFAD55CDE0ABC5BB3266CEEC7
B2E6647D489E1F9A5B5E6E6C8E4BE2808834335CA4F819DEF0C61098569FE321
C1AA0ACF877770844EFEE561F8EE83C1935417B9F29C83791BC4A31BD306D76E
97D8D7F876371A2D788C3FDA605AFCBD122D5B2940D6D057DEAE3B202FC0D230
F2E4259C50D33A026BB258FB898E11B6CA33B1B37B2BD9D6BE25A752D01AB48F
DDB9DEFE8229CD24FA953252C4A554B16E4FDB8CE26370C16E02F400774C920F
6700A667E6B2FFEE703C1B51D84C1AE3B9F1941359
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE27995D78FD99C5784B2B7C7C509E9B93BCC29
35CD2714C50B246A7DC70C99B7DBFADA1E01B81749EE49A70853CD45FC323019
A45BCA3DE39C3E7618C6322D264556FD657D9270933D8B167D2575CF146336BB
1C76735F3B09470E40B0624E52F21809704749F6D81E3B829D163D9F61E070EE
D8CA803E56CF227F71EB8061B83E035C7138A7CFB6D6CBAFB766754C0E8934F9
AB738930EB75A2713CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BBFBC61D7D
25524B08C70599D58E7521F58D26AFECE212309BD7BCF62735379ACF3309DDC5
C3F30DD7D3A37804BB23274D7B30DD69E1B2C3CA70F2F79FA29543F526BB808F
04609B43776382C4389362AEA7FE4E03637B4599D176F103143DC04D5B5E53D8
568E7911839EB05C8F4A9E9C911D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D4
7450B1FD87B119E547047F43E9CCDE1C1F8645DA03EEB02B27E36BB6C87F39D0
505579B2D0FF4DA9D4AA971DB4C82693DEB59FAEB3A14C1547C6C46C24FF3513
EBC97357AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8330499FB4803EAF74
920BAFB89889071729076D755021515BD8DE5177013854B10911605F872456B8
F504547AE968C323B85DCAD9AAD5FC33F29A921D427EEE0E098E8591EA7F2D7B
A5CD8A91C01AE80B672831C286C900AD20776B50D4D2004F7295D860A2974B73
A9E8B594BC8BCA8356DB43399E6A6918A887A64B2EEE98060E47C0F371681713
13F92A306D1A7DD5FCA29CE223138B98E6C6BE9F3B305E2E4ECE098AEC270F11
2CADA74CFF4BD78C5DEF4354211E3953CD7AD90239C1FFCA061A21652104F54D
4CE1C6B388B901F937A299F65C3217180D4BBDA87A96F4C31014265EFD9206DD
DDD45DD3F56823BF8236F0E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0B
1D76EFC8D22A8E991888FC44FF9ED2954B7A9DF5CF6F256C8A86C3D98CADF1E9
24E6C6725EDE1262199758B2B070504BD81147F35D8989D2CA44BEDE6B8BA09F
511388851B9D9865887D4EF8AA7AE6AB234B252A506EA2EB59B1AD40A04BA972
EC6DC7C9E4ADEB7E40045F10F38E0C8D50CD28D96A028BE7C67D1CD148404CE3
0DE9213AC26B82EB823194818E6DE249207343C37BE9B926EEDF21E1D52251D4
37D555CB1FEF227CD15A08CA2A245C3C6508DD3592E809E0C72380B92F4B946A
7BAF34835CAC375077A843F61978AB4876871FBF42DF8EB5F877033452F08D41
970883CD836D1668B85BD642F7F50AE117B3ACD1A1372D5D4D2555A2E8E23E29
D8C8C5F39807B5A01188DBAA07A27A116C80E837DC740E86068952F0A57E9027
C39A603A4886213EC782000DEABF71EAE1B8944E2EEF19E1F7FBF442840845EE
D13FA9B4C5CB1FDE6F0DE20AAD69160BFBDA23C2D29311C4F82514DCF27C6B94
A8E727522E182DAB2869CD2C2B0F39016EB778060F35A6FE085A1BDB04A65CBB
6605D4D72E11338D87D5B0283A4B81EC83D03F502E7DBF202BA558B4EB271C57
922F0CF3980A02A40CEB2FEE42B631C999B71EC234FED7B269E5D91564F0AC54
D70F8EFC63B94F73ACBB4CD279716F68783C493794BF12502E04FC52064E63D0
05F2034A1E7E4192D1193BD94E99C0CCF702D9EC100066E1490894F5ABC92A92
C3F42F4101AC88024884C018C7D0DF65F7CEBDD46FADABA26B5433D34C2AEB07
6031841EA02F1C9622E0B64CD190A4AF3020654123563C5D6ED62F112077A1E5
88A8C8499A8917CAB23F00BC124FD93096D2603BC6C1734124CA3176AB14F488
26ED2E56C67571DB18177A07E082CB873440C4648D3FFF06A1499A5C7EDBE172
1759C1BEA3DE43B426C5E175B059005BF2911E685D076FF12D01742E9AAFACF2
CFCAF0517858C28A24FFEB5A26E46BB5B788713FB8009CCFE62C17E001C96636
A8DC58B71D4BC720F615D2873CD11E06DDB3A7788888A8E713D0E82FC861C0D9
ED98E873821095C6BE6CA909BCEB6C9BB1B0730BCBCB20E22D06AD1AAE225D51
25AAA901A78E86386D29A7CCEFBAA8F35B4813CC9D289E5244483DFEC10FF237
E38BC8E19B81502A19E0BD113AFF02F4E365A4708189A7BDEAB2D32A6E464AAE
B3505AF669EC3FE5A7C9320D907438DB23A82D8CB9777BECA40890C137564EAC
CE768714D7430BE1825C90D88DF40E753607A06AFC0046335F97A2FF20EA44F7
94C1DFD6B105FDFC6EBC6D5745C10D2C3BD560C939B80707B471D13D7A910F23
91FA6B63F2E6A01890368EA8F0D42E7A93B343C664BBCEBDBC0C99138A50E5C0
F57977D929DC9CC159568FBF5523D79229E9BA352E4193A44EE745F76035DBC9
34588B2B8FF44C8368C9C69AD17E91BD78559AD4BE219C8B110472F95FD5CEE1
A7EC2A78941AFD0B102C6CEF9D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF
9FC06879D91DADEAA25F850083BE6CC26AE7437664ABB66CCEEA19D0BDE898CF
328861C3CB4423FD2C0C1AFA95A6195FEF30511D5C87876C863364CE4B089A97
6F9C29A14A61785C42D2C746A98194782D9A504B2A0A92D4E4B5062855A33404
2E14145F4684AD22D461E740FA8DD232D18E559DAB50A977CF474EE1410D7097
785D120CA5C6E051D096CC40E931BEB074AA9E32BBFA361593C78D0D2EDCB1CD
D560A14E93017099D24663633B06BBE3C20A2718C044731B6DB8007749D1B605
F397413DF968722DC03BD138B0559D3E5887B7EA9C9C54F8335F55CC3F1B9135
C70CD0214CF04A4EC5AD120D492F25CD6E1E80CE87C5709112938ACF9BB2E011
87FC035CEA0FD5C1147D41630F1CC9B82B395BDCE1885A1D5F3441B03AC321C1
5CDE681DBB192993B553048C58C55F0E420DCEA46CD16B75173C5D37047E511D
C980EBD803E01C35504C4092D93AE476AB15324149043E713261671835DDF160
4B8DA000941FC5F85C754D5132402A0A94EA3D0E37D6B9890461CF1C65AB7C2E
E42288BD17DB983600580BB1513D30983C4FCDD1836FEDC80308316401D8B181
EE2A3B114F68DED3488EB9ABDBCE6E73EC5A0AD42D7735045D594C43A33EA29C
BE2AB98CD0305DD935D8F0F5EE3205A7576650887883B3C9AC23E217F48154FD
6CE1454F09486B47A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF8B10F578B9F
F66D78D738FA85FC454C23236FF4B665EA0E6210060F6439E9CCA612DC7ACE7A
D12F478F25D40CDF7D23E3E543B75A97A7BC960A7F742A2C89212832C36801A4
C384B89A91D53E0CD886C7BE0692CEB0CF29D9B4BD53E08D9FC1A863599BCF9A
717F4DC319B4B59AF009C11A91ACB087542F94750DC53232E62ACC3C660965F4
5849011BD76FF8489964A7848FC6F3CFA44B7F502649EAD20FD32FA1999CB88E
A646C764BD2088A3EF00A4F1862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57C
EC6D4CFCE0ADFD99BDC3BE161F4C1FBA9B854899BDB7E9D09A1E25A95E9789BA
DC6967F96E550903DF9B81969E38FA3DE2A058EE2076C77C33A93F2FBAECA0A0
EA98FA4C3D1F8700B04CEAEA603A0833E91FB4A44AC83C4E86308B6E89C99A84
8AAAF1BD143560B559176CAF28B1D8B2C8370CBAD5873329B24AD4A743F2CFD1
8B26B1128AA48F72767FF2268BED8317FAFDB532191FA35C2984AE7C50481FF3
126BAE5309893814BA28263EB863D5E6F01C423E6C5D3289B152CE19FDB55A11
282FEEFFF3E262F26041CB1AF30804A3CC34C06C6FBA8AED582215711B0A17F4
1B505FA0B5F906C537EFCDEE4C69AFFEF89B74C5B83E2DEE7642AA85B1615F9C
BA1C3C3197223C98A1ACAA495A6B8B8F1919AC158DC63FF4600FDF993CE8D2E6
3DAB7E352BE200322BBAF6DDD2628694612A7790EA8E1836533738405E9B7AB6
9DC77FE9A283B3A8C6A3651DE8AF71499D39CE0567AEA286091BEA9D6A443A5C
D35747785C433D4E18A02ABA38F55742DC36E4FF07A656AFDC3D0A32CFC097B0
5F9D90CC4B614AE7F58F3BFAF22EE6821291164B14DA11FB16C0E671A6104082
94D05830E44ED3E9908B59DB3B3506C60D3F766ECE69AE23369AAC3B5951B557
D62C7728D6E3F13BE05939C2A6FAA336EFA57001DE299223DDBB333D71003681
B4A816B378AFE37543607554F1F1B427784EFB366CBFF1CD7CD5FE3CB61842EF
56F134AB25DCAD2BD08AE61E233FE6FA79017D1883C61EF0334681CCACC5D024
F39309DDAE717CDDEBF80C88974D717C4539732DAD1226FE504620FDEEEC6266
41060E55159270B4794F9C0945FEAC295D17B4E252D015910B847534A519CFC3
2D52169510940A9E9AD636AE141331BE35D1D5308C927BA3940B773F20E5B3C7
813663D33205454A1A4B2D9173D593615C4459845E1AEEEE1ABCE3E5328D3F81
11610DB32C86FF6F9DBA1B8D6BBA3C4AF64523F37F176F3256E298D22DC5F1CC
F1A67A355219E2EE13D5D6369F656836EE0A77206E8236649E81A1F0E02D8D3A
3C8FAAECF7839D20329CBC5ACB43482D3A3A1E9C3A426BC7FE406E89FF25FEB2
34CCD7F3FB3C608FF37988C7DE6A41FB1020DBBCC762F2BF24BF424BBB2D3207
9DD408226AEAA0C4DCB8DF16CC6767B0BC73EBA052FAA5311407ADDD4BDB1061
3A860B10D2C219E96E61050B98FB04425912F484F5B79B9C0735F92C1B4353B0
76358780D1547206329F302AF6853E5DCFBFE199A76734AEC487BBB103A8547A
0090F0342D48DFF9EA9821454CB759B3D82921AB4B9278E652C2F30A8A121781
8CFD111E32142FFB160DB6422A5884151A4671D631260FB1758BAC67E14234D2
5747F1E68E0C36FEFBD535FA5C64B046AA8835817140B76DC22B5453AE8F3F76
C69B9F10988BE7D061F539CC8711030D2483F752706E27D43E3102CEC57B8A58
6D3FF862999D20CD6BBDB23762249BA7031D4D97DE2280C10756DAC422F0B747
E427E5DB0B265FDD57193B8E7F00C2162FB111DC4972B51E59320793EC60AA3A
F4A3F68AA5E11F657F898F59F67E0D285167231B9F444D42F17CB182EE584117
FC81DDB5BEF8EB957F817C5699C7293E47DAA4EAD6D47F00FC6443EFCDCCACE4
627CFE80E82179579BFE305B9AA1770E8E8970E70524F9F7AE081E64AD1F71D6
CC6FF054661866B68CCC383E5403F0A734ECAD86937D32FACAB6B04F3F9ADD79
94C11CE94999A3F38C88115D6082DECDC2125A4643102DFD0AFCD8682BE5CA11
AABA54285DEB171209CC4CF8879A65088C7381B9029B67CE9029093EEBBAEDD4
403C382D29751340F63D14C45D0C8ACE829FC3034643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256D29AE0E789DBA81CB4DDE7D4A970A3162D903EDE2880C20DD
FCB205309DA145A55A2C6763E0D8BC8A0BF42461DCA1CB7E613647A93FAEC756
3535886E28292A422264BAEA373D5F1AD84FC79DE23E2BA52D8EE1B1D3F80318
8614D6ACD81856288366086F50154919E5C99CF62A7700E896F5B69456110B9A
8BBCDA8551C3C14F979F3CBB597AAE41210AA7A444428DD055DD35D91A1DD465
3800988005F542BD304D2D1798BABD827BC8A689C3C35078CC3502DEF40DE082
B544B4AF7127EA6D5B8FF5A0735257BE29E36A29B707A51A697A4D8A360D4017
19C5FDD791A1C640D47AF86948448DD00039DB41E9C5BE1A7E6BB48920932280
BC552ECD04E2C33B76A0F6172098AA76CD4660980EFA1C84D5348740B8A4885A
BE1FC79E81913524DB238155870C6B9819E5842664A4049499CAFA7351D3D3BF
FEB9A51236038D4452E44A34F25718B7158C40F12ACA152F1EE78072533F8900
CC3A1869BE48305DA62447B28A45D6F516078C72A4B155A2715B713EC359F680
FCF2663644C985191135F0156722F0BF1DFACDE42BEFD5278ACEC4A55F1A082D
537B3C1EE890A6FD2ECE0EF3999DB161EF7DB88DA4B0C592385D35F705BC2A9C
CD7351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0AA69918932E563C8827CC
340AC4350DD2FF1A3EA9F8F3711A16CCE9A37170F0C02A9C7143D722CFC08677
6227901157114767FEC20D2DBA71C87061EE8BF523D591180D29A8F8E14A7959
731A74DC4B215D7EC095EBE86A3CB7C28C2EA7E6A19A68B64EAF236A3468C0F9
453189A1DFA55A9459D1C5B8CDC769D992269E6EC4631B1B75F7E6A511DBD978
F3032D2FC6BD54FD7664FAF472BBF13AC7F619FDC4AD5B38CE04E4C555757F69
C669C5EC403770F681C400FAEA98F62F02633E0F85A780A61DF255239F9BC3EA
AD652E6D5E754B9ADE46841E52DF90C3F0D7CE5DD684566DCF0B43A0B0F975DE
AE2F7601EB63C39D6EE8C54611D9D515EEBB7192C63D22D02BB2A5A27270225E
C95173C09068553725ABA9423F4B268C58072241D2DC5C080E7881848222220A
63605F00205C205B35DA93F4D000126B2CE72AC322B4D962537889CF225B3381
6EB449BF2C28599EB66F071FFCE3410C547A9B74D216032B72854A0B8A6ADE15
EBBFD5CD2BA9FAB7E75099FF1B68329FABA01826377C35067A7C6785ECE0C669
C0392E1C02A9F69CB191E2F8FCFF6FE23A3ABC8D6EE13773BA099E9F33DE6B1D
442AF96EE9B4EA9012AD3D9EF3C67E4341383124196569481872D2637F7C4006
1417CF942117F2DD286236367D3FD6206DF1B2B7701C20E811C3B65FB8B29B70
C0831ADB61A92C2DB592CF08B3DE2FFE5C4AB1E7A8E709E36725A1250C5907B8
A7B5D6B23DA27838D078225DEF89BFE7329F2B420491CAF1794C18EA07230E40
7DC950C01E31D915C6626F6E421543DC7754F1AA11748EEA4132F47399C1241A
A3613DD291F5D1D046FD9EE8832D60E91796C916FAFE58F51818B80BBA556C14
38BBAD22C404896C6490EAFC75CBF6CADA6A6B7C7B6E01A7BCF422C9A4A46BCB
3A9089D8B41B2CB3007B8260783AC9A3A8A50D9E4040DC6ADF8979C2C77291AE
9C13D9DC197DBFA7ED11B3B415C97314D28889AEC6BEA809470BFCCFEF0C622C
FEAE7F4AE740D9D7E24185FAD3D7048EA67AB4E1DD05CDD42DA117D5956FFE71
11F3426ABA50B07E0C853EBD237F5F284CDBEE82439B418703036305A7184A00
FDD7F36FBE5932DF128FCF4C4E5CE4CFE0904353C10378E611ECE652B37E911A
E0E16EA81274C5AB5F77B2C4564899F5DF9BA49D9D26DC2FFC59181147EB065D
30A883FD14933F4B11CC112DE73301FD9118CFA0BD6F3615B632568E0EA67288
F7AF12B051C4E298AEE276B5FF364A289222E6D4251DF41E0518AB7B1BC7F70A
162DAFE55AD7817AA62773CE160F630FD00345C1DD91C796157A282D8BC6524B
578BCF2CA6C2E48058A8D65B74900DE1EA95B981FBBCE8D846DAE64D975C3746
50DA926F24CFC1AC7172514CF1F4CC942F4B9DD6FF29A0F681BB7C42AB16F3DC
305839233A6D79FF1C7CA9DEBA71EED8BD7ECF7829B310429383B5497FF39974
7A568AB4C2B2317D3C80B1A70B71AA537516A6AE9516D7DAA2DE6C0097EC1BC5
52EBE9B4BEDDDDF27B0F06F006AF07A0FDB7C9FBC784A1C9E0506142709DA997
1E950373E5B501F24B33988323DF970D0D828005E45C4A8C4BD625056509BC9B
DE9DEE1E8951142A28319378A3B3EFCE8C60473C239DBA7010D3C9B6F79B12C6
005B99E6F7F3A6713E67E7C08467C617E31DFA524A30DB6978E8EFEA63DE4D8A
AC6484D208FA185432C09B97FD98032422B18100BEE64228990E597E21FC63BB
E8685F31189067F87F494CC6B431BAF0804D83527ECE7ACACA59B8688F63822D
A479E4279465A6CBD43EB5B5DB8B72E96257500EA7D9EA5958819F5CE03BEF6B
59B669723240EDE1525C5C1331150CEE1B942E6A555049252B35E961494C96DE
DCC822B75C8DBB2F8F03639A13E6F3845521A3F14AF26B04B69FB1E640A4C091
91F2A840375C3B89738B614AADD69471CE6B07099AF0E0F7240A1B663AA364CA
7EB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C046B8B5D24ED5D673E26A25
811D4BCA9D693EF8ABE786B61C7B7E2D7A8185EB91514A80F81FE7226F672089
0FD2941250CC5A3B60478C7CD7C2D18483F808522BEC54D877EF9C47598585ED
0C78B4D7E5B9422B3CE88E98C87926F208D2B653B93AF76866E38F6F5B4953BB
6790BF383CF2A56E4E746EE98B9667072874B21A5F98225AE4D547C925E8C00B
B3E642A64685456B6BAF629AB8085CEED1CDAC6B7AC4296BCDC0A475363BAE29
98C2FD754A65945A958D9250B329ED72DFFF1413E660A1ABCBB985D94ABEE7C5
95B123A580A6D198644049DED12F4BC6817CAFFCF66BD9DCB19A5853273485E7
2F65B9817B90D23D92B264D2A274CD739F6A9A8920C2DF579A8C1E5ABC2E74FF
ACCEC903E9ABCB6ADFA4EB07AC36443DC19A5BE5EC10A5E013BD7D621A9025FA
A444DBC3E4C66B4530CAAF0E79D1775A4271DB221ECCFA25639CFDADABB26CB2
5314E5FF7110BFC9D5E0419ADD2F5CC1C09AD68EB9A83F51EF690F901A50B844
41C4DB391255574BC6C5F36FA9DC30E799BEDE4F80E5CF50E44B9D8319141D0F
640C2FAB459AAFFBA750A16A4999D5A59AEB5FAE6FA51EA6EB68C744D6880714
44C6EBA6D73FAF4BEB8741396750BE8416A3F738EC0C9FC2350C3EF29619FFF3
F800B8ACF3E15E01BCDB6D4CD8D1F8188BBAA1A71A96F1A32525FB3485903C00
361D3E72B126ED17CC167AF71471686937FFEB7E81904730359D72FB1F64E3B0
41A69B2441AB076D0A741AC388F04B00DE2653B18C99512BDA1612DB547D75B1
47C85088703C68C018951631F2EA80DF2F50241D796DC4A59A6A3159A5DBF34A
90316A3FAC59C053364AE5CC71BA9B8CEA1FEBE62D888E525888557F6B064CBA
5D4C249535659573BC504F7BD9AD7ECACCDEC2CDCC7D47FFAD34A12895B6587C
EADCC469FF3B2A422DBF3A339BF3DA423C82A9EF28E83FDE0C3C995E7B4F9755
F6C52B2F1E9E66AD9E7C3C3C96F6FD1D2A69856DE1ADA86B4EE8FCB5924E01F7
3A956FCA977A5793953E2790EE733B4D4C76A47A1335CA1AD3C2B451361DC744
F4815256430F566A6DCF28A6675A0EB20A8A3263C17D6B79FFB92592316FB237
45EE6EE084196CDBAE8F16946D857CE704F4293D1D7D5BD0405A163AC9894C52
4D7ABA6326C39829DC8A2ABDFC584BBBC8AB8932CBFDFB9FBE0FF0161C8AF487
9CEAA37352D164013DA9C1D285F1589F4B98172F185FC890116846F6EC00754B
2523E1F4D80ACF16020091018865E23D6C0C9BA0696A6B6CCFE54B6B1DEB0F94
AEB1E311381ACC86D0856C90A91D904C918800DA6A271351A831E47B7741A1EE
4FF0706BCC02E25EC3124E538CB207A3D156167BA2B5BFF816F894ADD3727655
612374EC339DDFEF0101A9CAD4EFEA168F36C55A6E9F4F58E4908EFA20B7551C
67CB65DFB3A6A4F462BFFD7FA6F55790E477C71A2F7CAA6DF3E02D22CDDC8EB6
6EFD45A16A26F5B8E1ABE5009BD17D8A90C410881A96F9B40CCF15567797367A
96A03D3AC106E06F828E9615640596CC91711D12A4155E5D1DCFDE9F4ECD69FD
31EE19C5D98A6566CB91770EC7F8004DA518F5ADAFBC89A00C0681726C4D377C
A89ABD1BEE3C9BD84A05DD11CF10D6B777A6AFF563AA3CF9B4F1B0A3A5B0F48C
D2BF96F92CA5FB5B497F4632B1E1826CFE046796B89912BCD6B7BEE52FE335CA
9BC02E9932C4295E25982DE1DC5A7E47644E6175E9B3AF676603DD8C5F5B0370
22B38CB7D8F49636053E2BD0287A3C313E1F43F07D3DDDDE40C2AC635ED04731
C461CD14359427CE75FB0E2B46B3E57B2E14CFE2728FD062DED1FC4552C0B714
EEE9BF2B469ECF927A50E97BD02496F62FB0778169721B3F1714B1B627B79606
E15D1DFB6E3E5386A1D75068986D021414BCA08AFD84BAB090E3434034B8BF9C
336D7991B97D2C102D99F17118D9CAC94359426F03AE236B9B02B7EE66A54BAC
3867BE0389CA1678E09D9D2EBD374BD0E2F84C30594EFBC77AF9059895E49154
05709607F4B3FEDC85A3A7380BC80D15DBD5160922AAF2C11B32778159AE6E49
89B3E184DAD4004F875E8048DD691A98B1DE92D88DD77B8715D6A220A3B1458E
A90D68B2B13A5D4A79B827C93FC2322684F24F3418F9B6CC9AB5C8DFE79E4026
7EE1B15AC390E3A7C5FE2404D7748075F07DFD48CEF6189F13619637A90BFC57
B1A5CA1A11C56146853BEE469B08171BB5ABBB29858F65E937CDE31D67C84771
9779DE0B331E51AD8846A82AF91F44923F25BAC6773C8AD0A81075F9B4A3F72A
50F8C443BB34DE842F3EBDE357648BB47871A70137CB99E97048161FDD3D79BB
1648BD39E15558B38FDB6563CAE2C57548E0182F692E585713B5FD22FD41E4C8
22E7774D2E36B7DC679E91F344E2181C9631F0E3F0E9D10C6306693FE71BAD27
746BB08B22018E76272937A91A1CB9421DE1DD7BC5D109B52B7093D785F4380C
E7E2D15E9763A4AF799EB15520B2AAE41F05B4B317C454A0F5F54B21DD7097DC
BDB747D975077B37CF09EA6F16A1452EA51C9AB784C23CFDAF6F044A5C2AAA6C
CA36A436B73CE97C83E306D223CE7774FA5AF973D985C02A46E776365CDF9B6A
32D8427EDBDEF885B59E018386AFA462D3FC884E32841E6BE12817A12E65BA65
C7CE675E399D4AAD46370C76C3162444F3AA3672C66C81B3B00D9D4F0432AB3E
A1F5D8579CAAE0CBFD02AA25E4E522F1AF1AB4EAC6FB4A789EB88F31D5F2337E
AB4F70211EE6DD75D887C411A4C185B878B8003E1782E9A3484F8CF8B3DD20C7
3B220E9E8A694F5AB21C2E9BA2D96F527B19FE75037804AC7C59F192653317BA
26FFB09FD38C60C117C441E4160DDE659F85ACB1F058AB549FBEAEF52AA3B808
61CCA95504DD63423BF603B14459B7C691BF68F5854FBB70F3F5EFDA7CA047CE
71B49325EFE87D508AAD5DAA2F732B12BA10B7B6B0263B8B5CE6EE63CED9FF7C
620329667BDB2B79A6C97B54B8BFE82A1E6D7F3FEB2DA1454935E38C1FAA3A22
54B70BAA79EA27CDA4EE2247F7B8CFD1429C72E269A2B8FBA0D207B75B05774B
DF89381798A1A62A0A6F8E820ECB5FE4ACA6A493180E0B5E7FBCB90CE9D7EB19
13D307114496116FF0087A487D8130DA7AC5BD0F503D3ABE63C3D4530E353E52
70D5FCCCCB54E7F0C9CBC54BC4CD46657AE3FFFBB204C6D59B5DFCD3E19A4F5D
703731C17E595D0E697FEC6C9A25BA86E49E0C7247962F244E4B3EA74280B710
1D384B1B4FD9F3CC4C007DB73015E52332A3685589F3ADE54C2F30B0AE131698
FDF6B55E5B1B11C5AE8BD7FBDB7BA6E909226523E23AA93628A6B5887CA2263B
F3F5A696EE8686AEEDB31E73863967A4FF7FCCCD04CFD61476B4495F926D1F42
39B2702AAA0A8F27EC86192E30A5239A449B68FE52808798B648EF2E5A7F38F0
1298636F8E1A427D4AE6F0DEA8CE198ACD51B48CB8EEFD48E705F80B009AC980
3066E498C82811CDE551ECB3C8DCC93024F925D8D44389868B07F5431C973C89
C949FAD868DAD4334BAD9F343C0361D03B248E7E7501BC64297D3C8BAF3BC9C0
D33067D50AFE8646CCF705322EFC4802EBEDFDEA9EB53E3804510BA9F24361EA
4C88733185E2FC5BD3720DAF7999C66F6DA0468D5C98B4E9C99FE1B4DE04B482
145F3CB7EBA49C7009564214078E4A64A95F3973DFEFFFA71B3B2BE1D5167D0E
2E82D385830EAF3992E4D8C863BA7C9E05717986CC8A452AE463C1E004348320
6B2C87D3A3296D84F61FEF1A5C7C895EA1EDA6A750662B898F6533036D413777
7EDE774B4792EFAC0D84C06D3D1AC023AD13814FE8FAA4A4E29ED940E9AB5A98
1D904C44E2AAB473137ED9F52818FAC02AC17A1D5484A8ACAE902CE9F29800BC
B01465B2BC0429162BE040639F2EE9C0FA967C96E8E54A1BC5E7269F5317D031
A400EE8C4AD035FFAA196A95E598C9C34E74DDF7A657AF1327EA3EC00A555758
DD88848D48A7E98A78F95DEC58D847DC65E9CB0E30B28A72DEC59D297CC24DB8
9EC76930D071A679EDCE7F36826C7C0C0289A1BAA29D4467B2EDB0A303437071
0E83C814854602CFA5EAE2D3112D43FF22C4723429BCDC4268B1F9CF94C24746
C3FDA17F2C848A4711583826284AE6A9495B072911CC814C19D53B95DE0071E3
A439D65A75E6227FFC6637647F60685A0DAE8F715731AB8EAC7DC648C5C31523
B52641B2281242D1E8539722361272D9A50C5C4C7A725889284D623CD8E5DF6B
C4ADF8132D9F85C7C229F5140D0B98341339A5470B4C89E24C9D753811731297
11D3BA7C52C08E87AF023C833F2E36C2977602AEFC5579B8123C43E8AC022D2F
38D2C47100AFC4401601E1EE4498B7F8AEBF68A600694C245667C46D5213F053
C32E9EF3DE510D05F01B979454C6280A58F8BE30FB98DE2420B3E3A28D735CDC
6DAA8E1A598B5A1519F8F01D006ABF646D25C4A9B937FAD5CC305A0836C5C198
E51243E50DBE5DA38D700443A638FB7F35261F2A09032C9F3A272B7A987888C1
E9D50C054CE99B9F7530982C062593DF513D3154E07738A2E39D6AC9429F1A35
9113F89A45395CDC48DBB13D7618F4FD6A066A4DF35F8BF28C680E7C90DC710C
4909D50036BB8CEC5766421818C10E6B336804C9D88F0EEB0C993216CD336AEC
EC76C438F1859B7494E26582C63DA46ACFF5D5CA41BAF982AB046F43B2DA7552
C98FEA1ADBBB93C025B00E220389962060DD83522D571226623E88BBEA686CCA
DB88397DB2CEC4EB12C2BEA2C26F768EE4BDC1C612B31C7A4A924DA62AD153A5
15079CC4F3EC104592D3D38E10A40C93CA40F8C88F69F5F803FC20B59D8A94F5
9777FF203C063AE8D9EA873AC7B461E0FB63D7C1CE62B8FF34647199204C3406
C65BD371F2E48C48712ED6CF7509792BD183F6711A994C31A54DDC94C9A8E862
5557BFA0C123C0DBC628D7EB2B2787C65B147FB7AA49FD7B056D8E1B1611D4B0
2E05A0FC41A267943125A76D7886A4E6E5F674F6AAF028CFB851E1C22E111F6D
B9A7F8D9F240B8532A91268E9AD2571CA84F117D8558ACD6BA0098C6EBB1AD2C
0A04BA1E0069833A45342B060EF38B19B97882E8F13AB1EC270722A28D29245A
4AFD3AE32BAE8DFD59DD21624E295E5D05CFB53BF7212E2933DD050FB0820AFA
1B2AB99EFEC6D112762B8527CBE3381953B0908617A28D2D6A522B49382C0377
8F67FDECC3DB4BBF0897CA4B909C878C935A958D9250B329ED72DFFF1413E660
A1ABCBB983608D0F5AC9308B32343F2A9CC22EA7D87E512F1249123C12BB8964
D3312AFB91898526FC628BD2AA4BE6827C91AE15997127DFFA9ABFF8C858A51C
83CCCC572024A7D128D2D567877FDDED97FD7C9E73DE4D6D4ED370EFA66156E9
15C6FEE8103DA73B5D782BFFAD7F7C029E12E5D24D547E35CDF1465C249CAB87
0818FA5CC7B9DE515CE6BBCDE3633FD159C855C4CC46FA71B56A2DA46A21D10A
567852020BF0C27F175DE9AFC917F2D783A0838DB0BDC5DFFF8BCFDF1D312FC0
FC0162F47FB4D8D9034DC5D3CA48DB26F515B6576AE85A29BA65112121E1DEDF
8597ED4F734B0AF63F7CAE541F9D511E2DCE82C4C641402C6A9A97BED4C33668
C231EF31A4D5750105FEB6F0C532000809CBDB3C5DCCE929A32C7F0DCBA32F57
AE6C9BA2FD61BE07C5DCCE8CDBE1C6E174AD0D12926D48FA5F6E1D7AB4A025BC
216C928B09F06332844EA9D12718D41C771BE6B07E1C5BB164A3361765B4356C
4E2C8E6EDC84FC313F99904E29111C174A42B49151D18C1047F69B50F6742929
09EE79FE294598B8493F9991DE93CAFEC8A86650ECB240F696BCDDD1A9F0465C
B43B8244578528A86BDA20C9BFB9FF931ECEEE556BCC9C4374EA6B2CCEDF09E9
3A469326883DFB3EB9B157C4EEFE7B4C2CAE4E07F76321A5D3A5906E2108DF5E
38FCD9C55FF4147243FDDBFB594E0FCC622BB066A369CC2474D56EA9D08FC3FF
7CCEB0DA2442304FF353060D4326034A5CD9EC8F73E33DFD982D182E86B3CB63
C968430895741B98CC31540F0B62F18FF86AF9B2A5B3E2A8E7AD8930C9777AD0
ABC8D24F75CA3925E9D2221524462A1F98761B4E749C534262169923CEB18025
FF4554899EF60A69BA10A8E42255598A24FAEA2264AD9C7AB786BB30C4007538
6C8F15EBF8BDF8396177D83B6AE2475B45961043BD8C7908EE9AA670671F12FC
2A455157B1BF595EA3E14929085DBA19DD5D6F37D2BDE9E18C4A49EE7BBC8F82
D8EBA66BA2F0C51C4E4DCC86D3C62FE9E069A1725AEBCC5CB1F7A80951942419
C67A9EB8EB3D1F5B0524B381B6236164733DA8E7A8C1AF60D163801D296860FF
ED817B1F5B4DE32894AD125502A33F3E65A94AC101903963A84EBD442BDF3B49
515AB10DFBF0BC3B537C3B1E57934EC351A8FECB9C6A2D42E04AD651074A7FB8
EEAD846888F724105E9709365231D609DDDB0964A51388C81CDDFF4DA1926B65
7225002331798829B9D72775996ECD8788D9E72EBE4912456D1A78B7076ADE3F
E148F1E7466E6F151D914B01F3BE6B9E21D8B933BFB3BA4F733A59F736544D5C
9BCA08C7C512DE231F44EC16EEB206287FF5F52F63541E76948E91D70112F8AB
A949F5BEAC192A4F0AEA4103BD933B08D5E68858DFB59BB3ACCC436E7CA1DB4F
D788C12F342516093022E01D500E1249B3CBB49C339F430D83A82090B22556B9
04FAB0230F5FC603B307B32E6B502A124CAF3E921871EF6A3E598C971EA81D99
AEBF76F5A9F0B2784E050A11FE8B1B130B758010DF14536C1550920C90992636
2E4CCF5B8AA7EBB59A09821BD121F361A0BB39E02217B34E09C287152425C6E6
07C1EE5D38720004E4858B624AD50EF95F68AD5FF201329AC69D41775618AAD8
209A2A32E8F4AC7502B677A74AC48E341259FCDD1E8D932840FCA372775F1691
CA52CB6583FA4C6F64BD28EC6F839F95D74E2EFA7D25364396F37130C0E488CE
C4339C9309BBA8B4AD3C40F938AAF88CB18CFF74FC89AE9A0B32ECDFD0BF97D2
D2940D54DDFCF2DB627140ED8AD5DBF7D86C88CFEF46D9C126F05A3C85F4400A
796D49A47AF2111C9A3A61A7F07D84B51D8C3E4B86EFCFF1C0E19F4369AD260B
A77F520D10EE8C58E25A36BE601E06A1739387577D67DC35BBA3417520FB95FE
B69D59AA5BBFE3F1CBBEB778ED8BAAF227D57119A0D31F9156AF4D76E60EC293
11F260C358AFC4E6F63A24B5A2CDB4EF4032DCA5CC6D1E11BBA2AD0259A9ADBD
D053FFE120C493DFF9FD4972DAE07D1E9900A649B80FE0359DDB6BDCD292EE03
20B1B6AF535B0EB7624E0116CD08A59EF79E5D7A9AF1DD9809395B595954DB44
D5A187F806B5D7B12FE096BD13F4515A4C6E25DFB42C4810D2FE7BF278B215DB
9A61885A88D88E1BA6936151A76B2D60E7A7AD55991FE366E1D0CBAEAA9F136A
A5E7CF174EB3D74860697B255C72846F1570C72A22574C85B1EF68F2EAA7AF1A
87A4C89E096B415A14A4F9A3D5E9CE733060E9A912DDFC06BEAB5782F56BE5D0
EC84DC549418D190B1C581260C7A5203CB5C00D65653E95361250C0812522FC5
B9B91480D75B36CEF1F239378A1C3AC2B15DB2DC33012FCDDFC8ACF206EF6A61
665BA860242A4A4EEEC6955407F7993C2377B237D57817D51DB3743D39359867
8351E78A1EC2AD1A9046778ECC7BD32D6CB3F0B9E70D33C9A5AF8605160D2593
31FD5C9ABC5B55AB8B57D38DC282390E735CDB7DFD57D62B5131AF784357B8E3
E7B676414CF22CD112C8DD5A99D30EAE2D0B10EE7934C215451BC9D441EF8278
B9D00EA80BABB86CD3A85C53DC3E9A25C9DAB9C9167F560F297B6B9242F5343A
0CE0D06EB59CD75260255563C88D594B9568ED078529DE942340A40AB1CBBCCD
ACF0046027231052719821DF82B89E2DD0885CA956529EA49D7B91337A89772A
EDD4A948F8C10EDBEEAD8F91EB13E7BB5FDB2DB0BD409CC94D3224E75B5764B9
DFAA97EA454B7FA5E442606FFF53F447D44E968A8B29A84AA5CE3B1599710699
5F141A58CC2A46228F2F642101F5B23CE1ED3A79FDFF8C1B97E405C045C305C9
970551CE63E45D74F8B7590837D46BF9E112781D53309A054F063DFF43BD4DC9
671084061B6F44475375C49819775F2522B9208A27D9CC9710FFD2192CA82959
36A18B42F96BE5854A7003C280319223A8BE84A42B32247BB1741C133467E8C6
B76F7329FF1136E5C76F823D29D35078412923DBB3A32176EFC49EA6FFA0C2AE
BFAC9216FB646FACC2ACCF7936399A28F962921A8D17FA331966743BB807BC62
ECCE310D899D22813E9A8F6B24CC94A37ED7FE37D7D03026506C2F7A28616642
225A5AD8C4FBEB07FE262D75AA093A73EEEA99FC29FD565D68BF89BD37A2E4A0
B6BE71A47B686442F01F8EAC3A9319C5612F3D365D1C76077A53626EC2C38433
02600BC6A6F743E66DDE8A3A4B59E35C128E574F8EA188169C7511C7B6038D33
F5C864C45FDE300D4538A4A19676DCB963CC0CDD1F1D89DCAFFEE79149D8A24F
C46597956CCCE3EC6F585D9D69A4738D11C6AB5C7324154983AE067420B20806
8E4FE13857F9C838D08CE835765AB686D2EC1DCE1B89A21179F9BD147086881C
D9C9335856F5F195FCAFBC381356C3B94ACFB1FE71C614310AFB51163ECE573E
AB9DC733E8E751F91924855405F02213933F1C51AF2CA7A39AE6B118A725867D
8C47D291939025EE8A893CBCA72533236F1C0A26CA59DDA6D011F79FEF550DF5
2C435281D07E3B0CF4EDC6C3611ED38BD648301224DD7BF58E565C9B64FC3CE2
F571E3F3C9C616260C0CC2F30246CB9BDA7E5ABDF56FAC14CC191D57882855C3
939CB6FA9ADA4A6B8B08178CECA5DA7318457F729D1DB59642C4BD425E3CFA54
0BE401DF40F19DCB5B4539E43B2A8C896EB74142C62BD15AE3DC5D6A5D3A9783
8766FE358D17B2CF7B04A1707A89E39F1CCA7A7132BA0E80162BB1A9E2E99992
6D3B31247BC0D7A142B992F5C8790B3CDDDD49AEE50FD825E0E3569B6514C107
D7B3A614A650D5AF919E01757021B319D0FE32E4E03247DA02407E59921FAB9E
D7F964ED314D50CDC06341481153D90F48C7DB88C6D93DB82004DB8D9E8A2F16
1A38FEB95062E603DD36950A8F3D2E430290A40947B84A0D64CB893C4EC65332
5868F716DFD2933D5F0B14A0BB45AB5F7647D0A93B92F543A985027FD2715F41
82BAB1640F3919963CDE4268F5B7DE41DE1B4C2586B126B14238710305670839
93332E3013D3E482523B21A48EDC745CDEB78BCDA3C7B09D495A7E6CC4D66BC9
992C652E595D0E1650C555CE1292C4C58A506BACE306D07EF4328E10849820BE
6948B237FA5BC71B77173DE79A0DADBA7500ACFB3DD815224F7E256A4EA0AD52
5F30EC6D1B1ACC33E45D087963C8B579466D5A3237732F80C4ECF89E1C49A957
0C6CB87E4289332A867E6D4535F7635E337E367BE1A292DE76EBBDA80AC0E8C4
B87B1B8775256428028777102C6CB4EC40857946FD8AF62FBE99C8E9E6F3D32D
E03D64DC71629D041E4669A05B6754EE7CE90EE8C3B2AA9EE3ACC9258CA206AB
5A10743AADCF4829603BBDC23C9F41F24A479F827532A008C4373425A53658E3
D5CDF2825B23E8DC250FEA26AAA18C12EBEB518B524263D61E2FEAF705721361
1FA533723F7576FE07C10202637B079B049E4438354CC6B692896971F2851359
2B2818D64BF6F9E601EDE032D124162880AFD39EDEF8B54FE04C38FAC85F27BE
DECACFC93D5466237119A44710846BAA3C0E28CDCB4D31C8E5E6DB585C2DD28B
5C0305C968BA01168372D8D1ECA5A32CDF25E34A95065640E188384CB618A3C1
122D1D8A14A05A7CBCF9E5DBAF7FAEC6E45444E6A61B9F3B463DEE44CBA80C23
4D6D7E0D6A70DA9697A655299F5D047CAFDD08829CE775C1F5D2A21749E1289E
706CDE820EBDE531A007D8D7FBBC3C55D1075B6E852A43F87CA64CC2F7B1F429
8B24B4FC62AA06FDCC5D800DE0FE9CF57C6AFB258F73816CC190CAF25D9965C8
8F94C5833C98E7E802CC91B546F554A4B9785B4E057F011F3661B2D8DC640B8F
2494EC316A5C574393F754922011C0809474D611522E42438EACB09809CF4419
424CAE3F771C7F5ABFF5C667E681DE349EB88B977D15639432B31DF296E51991
008C03514B0F8F4C05D9FA435C61AFB687422C3CF3ADC3A1BF06F1E787DEF42A
610E75281447D1B20F0D8EDE5E0BEC400A624470B80644208DCE7391C7DE43E8
7335570FA82647AAAF3DDC1CB2A8C54398BA00BFD398B6F41DAA0D6861C66AA7
F5E3299C87A15CB357C2ABE940D44DB17131A820C6179A8F984CA14059B62F59
10268E28689F546805A26884C73258346B536931BE93C0DC2EE33F6F8D4F3AF4
B2C7D95E63DA3C2949D6149F60EBE5178026FDA78096A06C0BB879D45CE22606
7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88EF8AB97D72AFDF3784DC26B85B
DDEE6500EE00260B500829D7DDDFCF2C960CC7D5E2182D31F96F99C09696A838
27FA6B0CF5C0E809C17938DFB01CBC782B05978D992E98804FD7D591A617EC74
03730DC7FDC3F6298C4728CE310104B6D8A1012797CBA8969611C3EC64543291
A495B9416E208F20774549A2D4DAF2AB5AC55D031A2A37B652ABE5F7552F82A6
C3CF2AE1EEF0F6378AD6C04DB0CAE2B540C9D6B45614ABFCF417F6FD17A704C4
668F6F80F90AB1507C765B5E26179F4EB2D5AFBEC53F03AB51FC8A49BFA49E73
E527E9A6488AB074BA7E1908A83110272C851191FC3D85580E60350C3A635A2B
883261095DED9C73630F0D42D0185E7FAF033AB7AEFFB9D6B061E38C41D5BF38
ECCF14EE2FF0443BF77799E457D5902471367E4FA2CBC269D90D21B62674F16A
C59608F55AF52A70D84B7ACC5DE6C22DF58627399F63ECFF4FE661FD5B546F1D
0D83A41379B0ECFF59CE398BBCF79F56450208CE849B2FFB6FF72A3429C7FA18
DF2FB726AECC1832A03C2287B65F6148263D3133C7200962174762F97B1EA411
C1B8981A6EA85C135F60246D47ECC90571044E7021EB41DD8C8A820D032D68A2
AAD8941FB7D8C5585C31DA3AB77AB0CD9E6DB66F4979A1C73E9CE4E8B2ED99EB
20D844D0320480F771183B302FF55667390AF2E314BC8E0AB736989DC06DEC3B
15060C553536AFA1AB550740F72AC56360C25E80658F0CD842A0503F8EF5442C
290FABA63B910F501A93455644ECF8414F66199ABA373DB1AEADA9FCF9B77F98
84F052D1DB422D245201FBD6463F31D421A29693C973462254BC1B1501FE2295
3A7743F8782BC8B2DBA7164BC3B644E9A352C72B094E60F2C49ECF4DBE55F1D9
72AFABF04478516C42AF46BBEBC7271938CE2D21625A631D4636B2687B403955
31AE88840CAA741E88F8BF6CE7C365D68A64D44FDF8C65B8FF34647199222AE0
EFB4DBC694919D4F41D01894C91D8E03F68DB551451583AE4A530FEAC44A63E2
B90731652CCDDBEEC5807B261A985F7377BEAA49275B5E62BC871BCFAE9AB641
783BD2E3D3B333444BEAF07554BCE0AD72E176552EE863E10B8CDCEE93DDCDF5
BDEFB5F08872C77BA070C12944DB44B28CCE75B08EC85DF704ED1096FAA03E32
EB7446EEB0E9E4470A70F8491873BE43639CDB2FF3B1DC5D4516A9D2E305965A
A02B8A67AEB04D915DADC1B84A55FBD86ED12309BFBBB820595FD3F8C6B22C87
D39591A07849F7BD81D1A1897D0D79E3058C84E75904A2D372069861B0601BD0
EE2AE975849408D3A7D043213910A9621B1CA0CA8E192532476CD8EA1F5AF507
CB853A32E8C79340838490E80AFCBB1340C523C7E247273704AF5EFE5BFA05FB
79F31A554D8BF98B8303CFD661ABF9A72CA619501FAC20B24CA1AA56B084704E
D9C833CD633680C4651B72D81CD058330680AAE27267A119885770C59DE7FA29
68D4647A526E7133745F72BFDF24F67EC83D687FCB4D1D87CC406BF76BDEAACA
47D04546EFFD1AC386043D6E178EC606C8B9D7D6BA0BDFB13866FDEF0C1BE93B
62AC49659B3B6867FE7E2AC972EBC0BF7AF09DB47C9634D586570D092AFBBF50
7E6262226CE73BEB52C2B8F5123551AE8EBBB2A9818EFA495DD7323AD188214E
C435BDEF282150CEB7A8F0DF69981E9492DEA2B5C5C11F9AE7F2F8CAB8A9524F
8E24ABDC6DF356C1DD844D9C65C3A5B0D92FD836D6D75C10FB83D7B0EB9DCE18
9314BFC6A128924AC8762D4CF64802A82227ED89B7E927DE87A8D4ABF3AC1E79
AD315CAA69F4DB314DC26ED5B60252DD152E0A13099560387BC6B7C2CCCAED34
7A6C741B8976945E19AFB35AE83098F89FF38B30D840A9079480F30EB64479F6
BEAD65DDA53F44B6905704CF35D7BF8C3CB2AFBE30974900CD24D7090BF490E9
977036461B66EAC5BB976C6CDA48C562A5BE309D5D926AE5C673625845E1981A
3317AF9E32156D67F7A6D7B5F711E2B3A8146BB249CF5A60FF387D2E516520C7
21520580C863AEB9F26D0EB2999F1D23C2A1D208C0429066EE18CB0870B0DC25
F2E3490F98D5B64DFD240A527264178991EBBB9338766F05519CEDD80DCFF585
F81454AC7D54F59C5D94588BB274601A084A49D5E120C8C3C96A3D38A88E5D4A
9559465191633CE38B7C706A15EA93F5FA7800171D760667E1336DDEA8CB227D
B52D3E7748E7BC0B19A3C64DB376D4861E861D493D49DBB6803FD753A9E42699
2ED6BC8BEFEEAD49201F5939C9A1AD845676304587BCD57E944930DC45B3A6DE
A766EBCF15CA68D755C30E02C012629BB5113F915EB1034808F6E4E32CEF72DF
AD9C60730CDB6C87A6D3985FA02BCFDFA7B2AEEB52D242448B756464160CC70D
2A8B16FE17A0A07AD7169CF5C854AEAA3FC89F4F032696728CD790989027AB90
43E20F807BC9C2A57259E7486479878FFEAF3702A7C45E4B09188CFB4AC98BD8
AEA47E49D5C54658E35E1A0E9807D360DC5F76FE4F4EEF7953730290DF568B81
8F514EA832662C580500C0575C9B3D97A8342333B1C402C5557E376495A1AF89
7DC7D31D93C6FA6BA49EA0881583D592358BD2E97DC820D7C917B3F33C12D7E0
B65E32A8EEA690C33C850A8BC6988EC285C91B3A101C9E6496AB07A84B35F034
8428B104B112BFDD85257EB6A2C747CF7113878FC1B0947296137880FD3FA76D
1FBCE0045C8F147537B7C2221103C664299A3E517523358DE4A06B547EB33806
C4F943CC8F1342FC9B8D75BB691459DCCCC211E44D10C0CE6B2EEAA9BD1DD661
97614EF00EAB92CBAC25AAB048F0EA0B18F47C1E9E569829577BF4A90C0A7A37
16E46F464A198EBEE6C791480ED863242A2203F226507612115330743692D0DB
C70707FB786ABB0F9A79907A37B4A5F808BDAA36990570A1FD4BE5ED75D83C81
74AB99A32FB1ADEB641E165133338B689AF6978D929610EB3B5B3F86179CB516
D7287C54E86320D7836FE742785B93336E939EB40A8E211CB5E4B0E9313749E4
36516518542AB92BC063CB94BEC63AD625D400528D5160C7E9F656D93EB214E1
FA04F01DC568F4E88D7C1F3AC239ABDCD32171C7377F7EBD25E19922011EF603
6096398D8D10ADD46B3FCFC12980C2E944AE9E2EC05BAB0E04758C7E6989E631
EEDAE0D53E90DFE6959011C9F6AA26EDA302B3191CECF5AE2FE329B0AAFDF00A
0A3C2A83A328B249EBF2C31AEA9D19FABD566C70AA8FF8597B279B8FD1B911FD
BB4D30735E62DDADF546DFC4B11F89A33FAA0EBEC92FEB04C3A6A0FE09FB8BC3
793DDF6D268B4C57CC51D4D02D3708076C63A492573963E36348F98BD220C176
86C03DCF62CE6FDFB4DA6EE4A4F8124CD521F9CCF02C0C514755632292854186
F14A6519488064018E5A6DC2AE4C627276365855F11CBBA6D747BFCF40BEAE35
5DC4DC23DCE672B0B37D0C8F4E9E27D5F96361BA1847D767D4558876E85ABB0B
8396FEE0C3327CFFE87733BC45355460BE4E0C5D87B5B3B91F8CD458C787BF1A
6298477272F3571958BB8A5A5588FED7F69020B67F532BDE5DADEC1223353192
A043D952F5CB93C8A1FDDC2DE18252CED93785F720E4DE92960A101294ECE75F
FDD0EFB23B07EE7D9EBB4B4121CE793F3E7941CCEBD1DBCA6DB086FC994070DF
CB8299304A5AB02D643D8B74E9D7A6776A594A9275834F2E56C9A5C9BD35B8B2
88FACA03564F2C662A9898569E109DAB60B870AD2E7DAC2D9EF897C7DE43E873
35570FA82647AAAF3DDC1CB2A8C542E79771FD1BE21B1AD5042B5AC5A138AC97
5E2059FE4BE5FAF5F1B4DE109C3E06915E3461C79E71BD7FE5E522400BBD7E58
F62CB64109E9856CFC5D2A62DA183B416ECEDE831960C3DD7B0774DDACAD3CE6
8D323BA915C109523A9DB78795CC31B01C879BB44632D8F9D8196B6AD25728E0
23C49ADD3BB95D63F623F56F201FF299364225E29BB235119311B9888D0BE96A
C4BFD340BCABB8EE5CDB039F52D3308C57734B39E016FDEDA848A63B7CAD7C0A
2F5871C03E1CC8E03D38E2DF046BD128D38054B6D0BAF61C28ED46A45A1DEB1C
93FB1AEE54042F3750D1F480040BEAD540967E39CFD1466F6E84C2E08AF87D35
0580C816D2DD6A791071EBC06CC24C5BAAFCBDF5B3F16C87E2E8174A8495A573
F01807A82D6A0C634658F1BCAEEA043D893C2BD21FB9293BD39BDB9385881913
1F3647E51B8F29EA26BC23A46914E13ABBD241984CF6E0EB61792EBB3A7349CE
7BAC7CD903D0AAFEEB0DD8B306E7AE7E80DF9BE7062DCA91768C2C9CB6EE2741
F28F26C0FE936EB5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4DDCA41E75AD
0820BB68EDCC2143F284391BBA9910455537E53820815555A1051370EFCD4B05
86BD44046D11FFB7E04CC3409440737FCCF58A9899769EBE684B749A17A443B9
AE2ACFFB374247724A3901FD546D465B4A494E8105B9D13B930E62909CED0EB1
8DB2D17A7C0FEFD23E818C9577AB8678D40C3B58D8A7F65D9BA49E0247C27FD1
1908078F25132450F9540DF8438A07647427475D1BEBCA266753287FAA1AE38E
B626E9A41CDC6BE62BC7BC9D62D7F3EEEB60A6554A2CEE9C22560739C926926B
7A16A4418A1C3FA3F71244C924A486B70892B289F75F5777972A7F5A8E1ECA63
FC9A5ED285837271FAF6CC61167CC3D6024677A39CBEF701D77D05FCB64F261A
D82C47DA394592CEAAEE1849027B06123A1A004D39C1DD6D8086F7ECB0658FF0
99EE65B791C63EC6AF40656D93D61481FB63F546AA676CDA522409846E8C5235
8CF3EFBD549B2B38B435327779649370B565AF4AF38BEE8E5AA5E09325C6C95D
E1A7D7574828918BABA81A5F36CC8C1A9C5A9DC7ADF08C5EDE73C5486C3A0006
086B85593950165238FD9FEAA5AA98B091AECE8681999D7C8CE7081C6AAD644B
34DD12080D7BBABCC56B4CC24011214CB26E1441A1ABDC4C1D212BE976064F17
6A9CA3768590168A5A72E13F140863D5E14C5C8B11895AC0E79C0B211C49ECF5
311A6715C3AAB9D7A991233488B2D41B812A11DD5B13F2E8F21AB1CB20535674
6638CDD9FD68E308DDAD1FC23B917C6C2E033240C86703508D2380278FB9B8E1
24FCF0BA1AB7FCA5E3B9A0C63FADBAFA0F37397279F2AA0C35D2B3900A8A6A0B
93FD79ED65110B0037C9B5E51F9C778BF56A9F9CA83ED2AA40A257D5D2594D1B
D29C5695CA9B97CC29F189CECB3C8BE1C98DFC8855270D7C37776F70B8E51E12
F0AD378B8583FF1901B66615CC18E10CAFB985B78B6479035DA7CCEA54AE68B3
54F7978C76EA1140A78AFAEA913AE1C7576E2B10FB4EDC1C8E833686E124BE0A
5584281A2A331FDCB5970A75A2102905B8CCB2F61255AF45BDE940DC778D6F8B
2EF579A535CE2816498D130303EAC1F42151470F6C5673D7CEE75B91B36DB308
1871CDB3987169479C4D6825FFE9F98963FC566AE808AE20CAAE74590B3DD207
F1F254F78FF9D34A41EA24E7A2ACB665959298984C7776BDCC393738E3CEE817
0E3E5917902340AE06FF50AEBF8AEF424F2082FAFDED49499FC805AFD18DF56F
31BB926929225D3F1730662979FD709E8ED21757A638B2E76FB46FBEF11DC1F2
19E5F31DA8411BD601E70786FFEE4C4FD87018D4F17E60D3CEE00CC979AD410F
813119CA479E0C466DA9C531E1F1D1F093F794EA44C40A9D572FF1AE3E7D6EE6
3090EEC569D8FBEAF4E5CA52AF81F8F2FFDFB1AA787428233F8377E4E03E6CE9
471674E5EB30DFACC70B239D36D31E5808B877D069EDB2E2ADF1F8C6A9841A02
F0EE31E786B24EFF373C9DAC05DD3217C873861C7195B72AE08A0D398286B2FB
9050CA34766751BE83C8493F5CA6351ECB3F8570D5DE3EC220C719B63A99241D
6795BEDABC7C47532B4B80F77BF6EE43CFD08C9CD1F57FD3C2604EF52210F343
C793DEDEFB0A2B19553177632E74DA5ED29F290C37D03C0EFFE15D0917BB65C1
725BE19241996C2FE81439067979C5720508AAB6B59E6A742ED78CC0B5926498
262F41201EF43B925FA620025E4159FC4A6C89B54220134BD601C53369C5C54C
6379105192186BABC97E4C5C07911B3D5879328A68C16459A941EFDBFF08C8F7
92271EE9C90B85A9BD24D2510F29416FFCF7B4C92A8EA9C060291D0A00F104C8
75F42666FBF55506187EA7029300C9E7B5CCFAD4EDE9D07514C0DFE8924B639C
7E9D119A9E182646DB93A34C6058D7BFDF2C536FA78E50591F23802AF633800A
A35114F351AE56CAAC815DB850B08C1CF29C5F0DA0ADCD89F76167282477D4D9
1D9A68EB9C62616182A171EC01A441484B74E77A542ECC85D2B3BFA99F5E6438
A97F2F8FB45586935040E889C11DEB3E84C59C74559B378847C0DEEAAC9BCAB2
87FD70FCA5341948B40779FD7BF2C9579D2ADFA38E07BB733626913BEE60D66D
11F17D655B3524B3BE4CCA2120F5B010131BBD9138C551008B5D8CF5EEAD804B
9D084FAAD4A398EA1EF91BAB99F653A491ABA52B3E358AA1F7D066CCFCEE2464
5E5B7DADA2CA4E9EF1352A5C24C2862B9CE347649AF59281F5D884990D12A619
A30E746CB68E0FFFDF91A571119CC1E488627F48327E6424E3711707A61E177A
84043B79ECA4CB58D1A0084045083745CA0600B47434B13BBA570F0A4B9B2B9B
F0230B5D6AF941AF0D1C9D020A9026A98A890AA721B6EF5AB732D7BC7CD32499
DF1A8173B339F30E985154CA1DDB4E00B46D907460F0B1573DDA91557EE5BE4E
CB3CBC93A5D50D1FA412D9283C47DAC054EE6002D0453B026032F2AA0217FA1A
FBA7506FA70D8C18004EA974AAF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D5296FC1D3B96A166865C2FCBDEBAB3DB
6CDE74F5FF556BC9358EFD0B43F697D889D0331D1EBEC40C00DAE0BAC2DAD9ED
755E5FFAD0632FF3D5CE92C7E1D0DFA7642329EF410BECC288F0C4D1D0E6FBDB
1D2F7DC87DCFA3E12F6EDC2CA29FB19DE4183834020D1D5EF3C8297647447CEE
E330B23D8B1E1FF228FBFBE9C3CB8228AF6F5670423AE730740E6C8729B71F3D
32DAD5793A80FD1B6F3321CD3296C52F9330B735A0E65D7C343B1A03451B3A9A
19623C4B099EA0177F6CD6CB3BEB1F72FAC3A0D0989E1ED1A2EFA01D70A9C4C9
29F4BDC03FB1E4663874849B532BE5D89A4DCDC978BAE505BFA5D94B9F85270E
EA10883403D78F8ACC16D78A071DE8BC0EBFFDC300D331F427017089C77550E2
CF35E1093D08837A23AB0CA867D97DD34218260D2B6B9A4E247A71B41391B55C
0237DA0E25D4B4313CE372668A4B6BD7362B99A641E690E301E06C561BBE6ECB
41B1FD9922DFACBD3C45554A6F59E19BB0FA6BFBA035C07D0D10084CA3724040
1EE3312EAB85F8AAFB0991CB7B5831AFA6298E43DD37CFE29072A6C9BFAF41A2
FB4DC4F80E20BBB9C959B78F2599E4068E7E7F3F825C6C28562E37D841F7165C
7E17C8FB438AE8E402D11CB5AAEFFDAA439F668494BBAEBB53B2974E20BFC9C7
3C2D56B0AF69956685D2F7B9D7C0DB95FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC673B6BB38C9AF59940CAB5680A26E061D2F6091
3A4AE258C4D983DD924FF553E5B12C707C05D2FCB11CA6C96A19EB6A3E1BF76F
90C6FFC27B544A46BFB42674F71B807D539C91F3FD1AFB8E35446EDAB21346AF
2FEF93F6548AB5AB1461702C16DB6B9FC7A6BC09A67527FE42925CE4722801C4
4B73F72601CDFAE5FC65DF37FD5B4619235607EC39E49ECCEE0FEF9BDCDB5024
B0A0542130D26DC873AE2FDD4A72EEEE8CA21707B3DE017D2EE6B73A28813DFB
7765742E60E70E5C5D5BDC3F1D01D1487F4031379DB5C7666F555041C9F914EC
54FF90B4DADD8E3D4CFBB672948D6CE6FF549C179AAC235D8F5B912FCD30E0A3
6D1F72019A09393FD526BC32540C6C6AF3F1381F095C03F918532C41F7B8A1A5
51D5D6738847CBC436C8E761E295BDD7D0CE95FA51E9CE6F5E366C4A455C353B
7C4E59A633B5520AD35DA8A544F253ACA01F7DF1FBC74556BA1D6050A8EE0769
70EB7D5E19A9E738A5B85C27A89285E0FAC1E69C54CBB3D5DF44E01ABD547CBD
B6BCC2F87A80C1DE282DE613E28E0AB1E66551CD456CA179E313C19ADFA5D0CA
2792EAA9B3D183B5F501E3CFB25426AFDAE364B249DD482B26C72BCFC0190ABE
88BE00BCA9ABA2533EB147F95B5ACFEF157AF713BD355CD844D0F88C47B267EA
FA1585B4ABAAA80F155D2359AD152CAC44BEFD085CA5CFA8294D816AB165AE27
CB98A914D22E25B41FE35179D5E020790534D5825031DEE791C64EA44DE30162
31B72467837CF7FBA911AFE7C86504CA41D3562F89437CA7CE8267C80C7AC5C1
1B8731A458EFDACBAA48397E97284B8A8C849D61C0208212F4ABA9ABF1ADE79C
00350F35CA47DF4C4C6CE0F6194D426E46FDE470D568BC4A17A44A31E61DB881
C20437E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C76B5500EA460E36E1FCC
24D0148C458B745876A5FE59181A278216A45C23F6D07CD4466A31B0CFF132F8
AE3AC5B1E86BA1E22403433D97EF143C518E3BE33F0B75634DFD834039B3D944
6D6F27C2CEBD637401A381FAE7F3035643F6290E265C8A88331305E67BEEEA9A
0395059363EB3AF9D85D052DC85A50080668D9F648ACE56F31BE56702835B978
9FA83E1FDAFA7FF188F74F08626093D94D5A70CB0D91FF42EF52D058EC4F1CF3
E1F346E742529B6D950E55190F83CDB687408F072FA39197584C3ACE029FFE31
D7C09F9B727A027C5055BF60A81E14EE3230FD368EEBD32FF81664545BC32BD4
61939C8BBDDB40AF670FDC930AC84CA865044E86FD1D4E42D1749C19EF3163FF
394FCC8DFD903B4024745A9E4418DB109D3925CDC344089CFDD51972D8DBD2AB
C7D011C6D2D65F03B4F7AA7905C1E12F9ABF4E0DDC231A02CDD4EC14DE67DCD2
E501677858F156E9EAC6EC03872BFA8D9CB1975BB90751B692EBDDD9C64292AE
5E1BADBF96AD2D61D9FD8AF4B5DA28D5BF0F0F1E39055E86180C7D70697B73BF
ADEE28F63E9C85E6BBC957E31B7641D4C53DF245937308E8651E778AB9AE3082
F13883F9D6EEE678A2D7C1969B03B1A68694832C766C7F7ACCDEF81E59321F01
48F932557CCC2FAE2B1691AE16FAFD94635268A1523DEE0FC929F9DD87211E88
511D6215FE06323FA1528398BA1EB061AB58683909B0D4B44FCEC7CAEEBD3857
D30C70D5ADD8BBEE977F9C240C15C95C97C114F3B5536CDE53D4A4D505682DEB
CBEB6ECC8848D17A8CAD80215767A67AF3BAE02C93A4D1857442F0D239185EE1
A37965201E91840763AC80BF4E42159CEFCD800BDEB4E8A4B6523D92313C397F
0A208E31913B97E9D3760A858901DD600662AA1245C97832CAC2D5487DDBDC27
DCAA73799D9308C7344ECB332EDA92F22341D7ED9325C5E3AC9790D355444F1E
F9BB2602A3C381186F39ABF5F90E52A284053108EEA895F5B0A1BAFB1B6E4F4B
BED8DDA2B596018CCB25ADB0EA69D07FAE6D0CF0B2BD75AFA2BB38DD97C6F426
AC06714B0B7F80FC9B4384EE6F9A1528F7E58A9CB23E3EDE4023FE499DEA1407
9C31D65CD98FA769BDC5386A266731F34BCC5528FB85163B2E2D8F055A5D0964
6BB6027B5416FA4F0CA9A2241619C4B2F00E32C603FC2A137FC9C38C0D60AB33
B369EBFA1BABC1CA2D5134F45D29A6B34C186E14E37F10FD04479236E61A1F8F
270BFD806FACBA28D1D217ED437B23DE309A360FF60CA82A8251BE5671A1223A
8DF6D5EB3D2751503D159D3782053293E9ED0FAF2DE4B6F41316B3B768C81C0C
A3DDC57409B25DE986D21D0D8C8EB11C4114060FADCEFDF326E2FA25F24D796A
F7FDD85B80344D2F92CEA5ABCA369A6C9857B8186CF363ED173A46B3719D7280
A90EA7038A2F6390BC183CB432710CA44BD9587ABEA3DB9951EE94DC5F5AB1A6
16FD3DF03FBABA548EB67ED18D437A2AFB114183DA45B72F3A32A71FCB2C6626
79D6B69220D4100EEC1EBD67AF85BC1E6D57DF9F0427C6FE820EE594D64D1FE6
765657E78062F8DF1BE13CC06BE30D434EE42C60407656EE331C272E879C2455
A1A1A35DCFFBC0466A81247D0D69510A67DCDCF81DB674AF26BD3389F8ACCDF1
DCE3D915F0FC99515C532ADDAC4883F517B56CEAA33500D6497B38B4D2E5CAC9
5B7C0F0BF79744EA95363F54A5B19FD37F01D02FD609FA48078866C7B64E60EB
F783EE5FF928B84859D6892AF19D50CFF1C8E6F121CE477BC13FB3235F52E7EC
1604738285C8AF5812C45EE88C7CC13EDFFEE6B14ADA06DB6E122547B3B8A766
71E69A4AEEC0DFD78D5F48E8BBC4518671B8D6440A282859DB641ED9F940FE4A
BB222712CDE44538376F3F6DE9B58E8220749D58D423E16E2A04D26899399FF9
1F4FB98EF6E228ADD22D093BBF785EA0700277DE0ED84321CC016331B03B13C7
45D188F286227B12FAA9D620113A18D118B979650E646A05A0E84B1ECFB9AA7B
9F0E4E6C466BC0F5343D79F05E97208617ACC3D4B521916C7DC872CEADA88202
7B22AF77C4678AAB2A9279716CD037E0BE94EEEDE0F75C993030AC6F634CB6AF
599713DD1E567F2853184181B65EE0DCF0830C02BEA2CAE21DFAAFB537D8D9F3
C6749B839A4B1ACFEA93279C7247486D79A3B628783ED5431FC2EC1724DBCF6E
42D06B418F7CC6D43D43344E31C52D816A955259A1419C8C25F4F8378BAA0E75
64DA5FE706A23361C0DD06828CFB7991365B0DE01F3B42F08862621E161F8CA3
82D2869FCF8FA0E81B4533C04CF0B51E574ED111E6813DD6C846D77AEEE4631B
565CA5149EB72643B4AE94DF0B25AB6C9FC24425919B38849C108DE3495306C9
98127D976DDF58DD9027AC28D80C5DA6F15581B40A07068317B975E878DD5C69
4C6020CF4CA1C92B4BA8F8C3CD46A47764358D7E1974A8B29838E0ECB7366458
1B515998ED64D011DD48D7068AB293AD8E2545D0BBC786CB8401765A3EDCCDA8
B1329836CC6136E0B2DC8292E36DC444F34A138A0979A0392D5BB3A270FB0302
14674EAB94B9D1735921653201A8230C66DEBA105E89909D76D034C9A85E553D
82942B1302FD3BADDE29F623EF50C9B12A3005796E87D240911DF09A7B362D7C
BEB0CA28A1E598EC4278F4B48A3A9830ECD85E92A8FCE76F32E61F3DBA34151F
3B1D9412E42FB01F5D430B2D8E7FC93E1AF8AACCB2BE827CF6452875BADD2BE3
4A5C203539D1F5B72FF2EC71264DA12698E42574B3738108A19EE8828765AE66
51D18A644CD56667FAC7FF3740E5C09933C8B22E643BDD07F61D79F78746C523
8C5504416B1E24185D522FDD1A87B85850B6C8CF8B22E6CC94F1660E4B4094BC
CA48CF7562D5D69CBBA4F21660E0A95A841DA5B7F7826E6964A1B3C9B2D82844
A39AFF5F15E60E0F8154CA7B02A60319B227A40368158EBD90EA17E949ECCC26
88CDD344748ED15C9F359968E28BC6A05471D5CB6A71C2B58CEBEE82D396F2A3
B3276D8416EA2DDF4471798E28ACBDA9EADBAD6D7267995C72ACC0658E69A52A
687312B0C567B17E1E0B3EDC325FEDD473DE05BEC164100C9ECB6D7F352A877F
875BE5113B3CC5C384E1FFF89BC83C0D852582BDB1EB6971F2EBCC0C538B9F47
47E6F3653993E526F03E2AF8328791A97E1F107FE09C53EF74C7D4C0CF2B8E9F
C3FF3B65E9B480E59D1FDE2AC1E481A4AACC22E480CD066D10196C05A0EFD97E
E57F50C5A33A11142109F06B678EE10A091B29D3A9A54D2224EE0EFA9914A910
801C278365895F0BE4511A6A0DB25F6E9F01F1AB9C6BD12A8C843DA6CF1498EF
18BE533ECE9AF59EF670560C0AB39BFD238A0859BA570499CAAA419F54A17EDF
A6452E0BAA0519CB64DDE6282787A7F448D78C3B80BAE1D9711F4E4088D6466B
65753C25713CF4D6887CF81497E97C252D233534F47521E168D225F364D6DC97
A550734A6FA75DBB849279484E894C016528933378FDC74D20462258D5DFBFD7
DAF32CEEA2096AFE70E804C25481FBA297938A3C986ED15B14730C7BE5794100
261478562AE2A9B800166E14E49DF641E5329F12B7A6E161EFB224F1772C9C96
32A517073D4E8E1C205588BDD280493473D73B85EA118A1036DDF61B515C7E8D
D9DB763ED698C09FF8CD54B3DB005C33AD91036672A632BF4C17BEBEF8EB957F
817C5699C7293E47DAA4EAD6D47F01ABA3B290EA1AF0A8EE76D79BE9F2C07CB7
B9CBF2CC3E89E91F21A754E413C55D5713C9D3ED528247757063E3ADD2B92F8F
73013AD9CCB7B29C953456EBCF09E563800F740AFFA63FEA9445FB1EE103D9BE
C6DD6699F337EF5455E0A410FDAE034C078C7208E4569620CEB3F86995C281D4
4D9AF5AC601F550D8A22ADA1AE22778230E2D5EB6497E5FFC3F42F921D984841
389946F115492C8F03055C82927FFAFA6E43AB2424597503F40F4E3D39ACE81E
6816449AA859A9754CAD99EDDA37871241EF7A195D4747C9FFDD581537610B95
B7A76FCC99CABED0A49CCB78273C3585F37FC059FDF17E12D254F19FCBAE6C1B
B500C839DC25CB07FD277A265340E2E8110E700A8CCE20183026D4B921C47328
9CD30B7069BBF83B38E149825FCFFD89AEC9CAFDB57DC0C4C51CDDA3D6EB4CE7
AE86F0DA8AEAC48426982C0CDB79DE4F169AD06FAE9113F3D8561BA38C75DAB5
2F0F1124DE827DEAE0F6DE8434EF087320F134579D9E18D1E0A10F0200BCB784
75E4BA09D03745D763AD531A9573CC39EA06FD4C7FBCDE46F1D9E6E73B1BD662
B3C599792AD66B5AC898CF87A13A3A9771054905A58B78CAD093CEBAE35577B9
DCE91B5AE82CBF821D0CA2394715CBF564DA984C20B4310AE24068B586C679D0
9BFE9CA36B46B1A4ACAD869EE18DD301AAA69044E56DCC291482EA4A2A2646FA
DDF903C17E5B0BC25F89AE84006216080ECAF450D9A02CE809E78AF0299948B5
1235A529766FE954E0D7B2F73FAB21BF4D1ABE0CB264EEDD6BE0658FA2747C56
814AD6A1372D5D4D2555A2E8E23E29D8C8C5F39807B5A2F752845BC5F4C4C487
917187C1967BF3983FCE912039E3CAD13A373A18A001810E42B57078E36F74D0
3028962EEFCB5DA1D8CFD55EB82E0C85A089269EDD6833F4E66CEC4CC2FF8759
11D7F9DCF56786FCEEACDB83FB1ED1380E3D8A001880D27C0F7D73029F171028
FDDF8B550FEEE2C82C9F43A749101509FEB31E38C10077F1BAFD0E11EE116DE8
A806A98D112379C8DE23C75AF530BBACF0694A920693615747CA7804791C610B
B1ABB2DCC1FC2A40AC1BAF3ADE6EF9B4205BC43BA3CDA488E512ED42BBBC63C0
4DD60F4A12976872F59B63BFA4451E0260FEF21E4BB1B12A15889917716A5491
0E71FB6278604A4003AC3287D89BA1939D7E997D0D0045D200A4B5D7338A9E17
2197DD6FFE8D8B8EC081349683FC5E1C323236F7159A4E3C25F8D3E3D79B6AC7
1A3913971C253B5A055B94A3261F05A2B5F750ED1A437DF6480BC21F9903195E
AF28E7FA7297AB17B4D2307FA2839FCE196D5BD93BED4773B1500EE02F9B9B87
74237EF1899A326BEAF8EDE7C91B616FFC9A23B8BB4A46413D6F2AEF5FD2BA95
D15B8812DE9AEDFF832696F5CA0D4BD71FC54A1D783BF1258D028BD7A1DC0430
AC5DA38AEEBAA87DC3DC4E5149815DB30A40D534E795EF9019F887473996793F
6FC92DA11F5526E2AA96012837CA40EDBAAA2ACD2B44574480A0701374CC66CB
C040648C9619E4EDEBACEB1DCFFF624E05CA96E07311783290A0EA08384809CF
652F1E602E7F25681A74773B6175E00D6236F113677A591DA6992A609736494A
798E44625D054460A5E12BAF16E3919F29F8DB5FE3CCE0AB011371A1F3477648
500238C40EDAC04F03CEB0E0D1EC6BD197D2FBC30A1D6064E2957B001530E3B6
599CB0CAD5FE88FF780E752C4FD8E749DBA0FFB2CAA73FA9E8C2D786CB4E75B9
CED103496C03093961B8215977E57A04DA8A7CE4B86C16DAF34D8EC2BAF04A0C
94F53B6ABCBC147491A0EB8BAE82C9F14E9F3B744B51DEBC6C8756826B7786F3
5D21E3098DC9CF8BBE54D707AE10F51300CB89C57B1EBA597184F5E0582C2DB2
09479F00C4F7392CCD4C3DBC3E11E2D6A185EE6A8152A3119D11999FA7597579
F551F0450F18DF8EBE13214E89E0227FC2D7977A09FAB0C4870C8E6F613285A7
13A00574669A052C81B8CDC9315FC86703508D2380278FB9B8E12F94BD7B5967
08B8642BB1BBDC37026546E6537F776BC6F12ED2054A61BE3CF773689ED45069
B436AD8E947AF4328AE54DCF5364857EA20DB515C86F99D9F39C0C4E34217C98
264D9C9D22F16E40184A3697C368E4E09A0E24F43DDF16D6CA98017C7C118D8C
67F71A4BC3C8794BD9A11989E93AF80E182633300AB8BD06D067F53E41FBE43C
F84446797CD20753F196A12A09781F4BC06848F7FD6D491344E414D0D88A66D6
B4F56BEB9360478E29A0274C8B627E25E329840D68F0ADF43FAE666EA92F348B
228E23372FAA078DC8AAB00146550EE703A14B531D522D2341CF66BB4C006E14
1302BBCAE765F2778C34894E1AD847DEED68118F3352659297CEA9BF5FE7C022
0D844C5BA84E89C36AC72560140421800FFBFCF4372B123AB5D2705B72B4368D
643CB7D82BA474B175215A540A6422DD758D7B70BABC5FFD5F430DA7E226941D
3C4B6C268EB100BC068A00B757D6F9DCA2AE54088311ED782D682EFCD8C840D4
896A183FF4E395EB7A69DCE16AF779DB5C3C76946FF72DA1DA89CF6F9FBFACA3
A735ED0119A05B4E8030D2B8FDB828986367E2C4F0243B2FEC24DAF9FE469EE4
36D6B0129745977065519D41FEA05DE277A2B0EE90D9277A7ACB3C766C747C19
97953D2DE0551410F28EA1F866227EB063AAA1E730C86B6E9220B796DD1A8F7B
8348601CE72DF8F2762BBCA403E590AC0C65C7D792B49F53AEDC755475660D1A
FEAB231200BE54B387539858F28C3C108C0E6FD94CE8C0B19F9D6967AD053D7B
484EF5E6955F9BBA365964A126510C7EAD6A5C182C775FD8878D39F160B10D4F
5E8E6A93CB32BE355EDAC9632EB2FB3B0007243F409731FFDA563AE576453559
91B4511E39D8B71F1B8622A7A5D19F103FB6E81F96156EBF5B7D624A8032161D
54A462A9BF6EBEE88E3299560DBC638C18325B5098B04BA53758C08A361376C4
7B399F2136B6E9A563BB6CF6EE049BC37E74E79D4469DC7E5A9141AD2C56C395
D1B1542BDDF61C0B67A3306EC5B8DFD78A27E926494D5F4D94DFCE0A737C7BB1
F50F4FD191DF5CB22176634BF8015CEB70012B2B8769CE7950969557336AC8DB
3B61E01D64D56E8C4AD45FF3581FAB9FBBE250F5A649FFF45DA2C8C78EE355C1
DAA4617F3885E9F571940346E1F33FAD7716A5520271BD1FC960603870583723
D3E94A3269EE3FF46B759BEA538D3091C99DD2D487D033EE9A75B7ED9E43439B
69D7075AE4E6BF0D1AAB8077E21BE3E767CA6BFC0A34A28B9C5B2267C747BAFD
5934D95FBD2640BFF7E94C4C210689521B47C6DA9DBF0F87E5F9CC7BE01927BD
85A77A2F046C41B5B2AD6BE04FA169800228BAE3E6D4040A1A4D1F5C9F8815EE
6D17F25A1C8B7DA42FD174A42C50B316520BDB6A833969FB57320155CB1B5B58
6E2C8AB305A7A9473726E1F3D6DA978D71BB0A50519CEC6E1EC233F6710B0388
4B153308C0197A5AF0C7005F6503160BD95409E236D848BF0FCAB713EDBFE54E
4BA5BA08543D871A35B2F746F8517795ED6B0BE7AA1CD29495FCB31167E14BDB
D260753B64030759472D938C84A71C114A5626804BD8A05A139AC2C2C6486D26
60348916BF68357886FB43D10F3A4FCE7A438E9129F4DB2867A9FC6F3B6DA3A6
72BDC2CF7A4927D841354301EDE00ABDCE8BDA33B8BF3B0CA12B590B9F0FAAD5
0DD14ACBB98EF7FEA5F5451495019B108DE3495306C998EEB3A70D1E4575718C
F2D375C99D4577A5362A2A8AA3CA6CCA54B86EAC72D850AC2F500060B19CB5D3
F27D47EA230F6AD9EA30214411A8EC22E6D306A76C391F9759AB2B9652119833
995EDA4207BF15B4BECF94937CE559ECC41CE1BC35087D6FD299F593C8B9AAF8
A89DC4606E778C3721EF5E4BABA9C7632E6AEE83738BEF36982B7B68908FE784
444A8879B3E25D0FCADD4C7520B11492D5F71759040A1E996245BF51EB4895D4
358CB69DCD7880757CB406FA04FC210E9E3DD63F00738AFFF0F2903EFF7F87C5
11514EE22BFB83C77161145FC0E4FC155733F1017FEB6595CC97E266BEA49D45
404044876DA6C1BC54F49C3484CEED0DEC3FD062A50C0E36B85BEAE85AF88A22
3943C2844B75D062880309987DFE73C7357DF3C02C18747C9544C94107DA1B4A
6EE178FE71B207D088EE8EE8CD8C4D3C542F83821C56B4F44B70462F9975A6E3
14A0DDB0356A2ECEE5118D86CD0DC85A9A53BE7E1C0683550AF629A27AAFD876
E1D5EB11DEB30BF7A3CC1FC21E73912F795969C302215684E0A2A8A1CFFAB249
39D4C91664F461EB13C3AB22FB3F3EF644B5B47DACE807262DE0C2F1EE5E5EC8
E91FA2E4FB940228C74017D2A82AB72405609157A217BD7A0F49DBCA253B5A47
F447584457069CEFF3DE2BD2DFA545A711B2BF58BAB1D382CEC2720B290D53F1
53AAC4D8526D51B72E18F4D38022545893B243C019E83AA5F2D8120ECA4EED74
ABF85E3E44D28B0D2344AFAED7520BCF31E3CBE92822A51A8A1745A6A820EA7D
3788C5644A80765F3F99685FCA54566CE2C6E026A977FA4CC2E8AD8530A5B8F7
7B7B64262295B57E2FF4257921D8A287F3B32559F5E5BAB87E1B2CAB08F56337
C36087DD1D42488CEF01F15776FD7BE0593C9B6167A82C162B887F5985EDD229
FD0E55EDC6A944B8B2630CA13BA034B5CAF1009C5548B473E68201CED8C563DF
3C79B2FA77157B2A33E7EB61A2FDA8B84B593EC8EB38DD406DD3BC5B6B2EAE63
62DA4037ED8361D42ADCF0A5F9197A695C8EDB00FEBBFEF051806B0984B004F3
D2E93222EBB7D8C7BC445E500C128AA2B10494823BE831209ACEBDC4E975D7CD
A6B6B8371E23402A6FC3F35F3E3D6B4E66740F646A568BDBB13792861B1CBE47
D52B9BF1AE0E382E0D116C03EA76BC43A6FFEAC320C9393EB3248F493082908D
8EF1D37DCA63287CF07F5DF58AEB829B24E8A2B0063416F914890A7B7E1BF4D9
36CC2E56B5F1C494331CB56BC3E7C54D3ED7994F2D2DCE4B18574849120444EF
295332DAC41E63D01C9515466AA2CCA6D741FD8DF4A42E77E426EB2B7A46DE42
B9B260F09E2C0B7FDAFD481C671690E1308818A1AB590B7E461DEF5567CABDEE
47BC43CB8103899EA851FA564C1219E5D0E34277990D1687E30E234A5C3A61E9
F846CC02D962A0634CD57E195ACE3DB418EC8FC8252DCE4EBE944E094F732341
09615A3776C70BAE7A4AA8648A03198876B0E57BD6B490979E2DE42AAD95C588
3309589115DAC12BD15E72778F901F3F3012FF53FE0BA42D819DB82212973EA9
E0A6A4381235135912BBD480A4E9C0CF5246AABBA38A59DBB927E4D2E39BFE78
809C33F3C32FE9EFC2B844A146D2FF0F563B06696BF9C5A50396E52E881E1FBC
0BBAE28C43823837747932D98A74A8D4A15E634E1680852F3691104E2B9F07C1
D9511B1C936E686090B814B703F3F57C153783086E7438522CC104494582F729
CD5D86B7196462C572873E1D3E64CEFA5E823C692676EAA0B06F6D5CB177EBA5
A0FE2E83CECD6AF1266228251E0618A8015CBA50FECA972611BFFC080FC72734
FD5073CF4FCBA2F181DA953AA0EDF491D5F5B1D4FC8B7AA9EED5CBB888DC4C37
8ACBB3C620882D343E5B4B944F252ACD28F9082DDD5F3416A33CA4E15ABDD9E5
B71ED6D884CF81FB4A2119A097F75AD615D4F1D64DACE53701A47652A5EE448F
C27A899D157A802EC58FFBE00952AB81F652437C7B7FE2E7C825292D74BAF3E0
7F08EE662B209DB93C54E6AA7CD7CABF4DCA4C73F043108ED4AEDD4C6226D571
806AC2F68D34B1CEB89FE3235688E3A4B62DD312F4A9766DDEEE64C59152EA4F
8DB7D9ED173A4708D5C352F4ABF60B595D58D324EB3F7E381E731E6923FB916C
0AD288DB641B6A8056398FB51F5B1D34EAB8A1583EAC332611F0C7393B2C6237
233E32A1A83753CD58EA3C8F0251C0C3C0E4339C8A666AA1366A8866890098B9
C7FDA07B45F930743532D1F529BDEBB8078EFA0350AE8ACA0FD7424FE19B98B7
E83220C2CC0F46DE8511F0449E0ACBEA6BD82B6F2CC241BB4CF95503B7AD97EB
59EA5EEEBE6A995CE739B19DF4589570B10C98E5B158FD794DE0156BC110D513
0243708002796878073A50C7F5A64A95B54699426D47139D498F7A9661B2259C
F2639FE6A5DD7DF06B261A27E2B75FBFD80B6176AFCF43A543B488B0E288F21C
F5C740C4039AC89881886FEEA4897AE96227488EE3393B63A707344194FE5779
E11BBCFEA385F64071FEEA6E931694777083F7E849E563828CE3A138183F3162
7C860BCE73021AA36DFD4127BAB6E89FCA1AD980B26FFA9C944764A535242D60
E7CDB8D4A40FF286591F6C914B8A96291F86CA1A8D95ACDFD83095F387BB168B
7CCB53A1D3201066F4FE8D02407177ABD6058DC83C036D6D31BE6393730E9182
A7E9846B0C9C8DBE90359DB3131D1D07F60234951FF60A34BC1806B1010E5C78
F4C9EF9EAC7EB1CA228F158D5962CFCFB891093D05806C455F82CE0895CB53B9
B1544AD1146F158C9279290A4E370EF9317FB6285091D5970C2A540C53E2D6D3
C51D3DBF67663566152A7BFC17DC702973AFD414CD4B54EF36BF9C8E1C96B1F6
8C08D927E8235D3C93D1E5339A7046496321244A6C75E12B75FE01501A8E7987
D2681FDF72703C1DD91907A984DE3157E83A2470914F33539FBE533E1F04CCD4
434FBCB81E84C5A771E36F44AAE457AAB8295D69DFDA1B16A1CC1E782C4D6B2B
2BB53954FE480CEAA97232D87B2EAC3AF63591276194DE6B98BCE6BF68E4F210
2DA8A4B7BBA492CD5E90BA890C18508DC5749369F152F1159E17FDEDEE954BBF
74FF107E33EF660EB1E7676FAF289CC6E4B042F3A785C2518C680BFE85F46736
DCB38EC3A2446D109844CF1EA60AA0E4B7BEAF4A7D16F6000833BAB7CAD09FBC
D6507FF7D0959066BCE68F88B94758F89004450847AAB602E9889CA3D242524E
CA75A4130B81E97C2A9BC215A2E2A34BEB5AC456C10785B2C3370D4B6CAFB8AC
F73F6BD38780066CEE3E64CAEB388E8E4C9A85A7B305FE1B6F44DC3C64C88DE3
F69088759562642BF99BD9DC209B89CCFC26E94BB2C87A24C33AE70E31DA1009
4D58DEAD911BED5E25F4D15F261BAF46789E74D70035DA98E51AD7E27E0E3DE2
AF2C4223BB4EBF7CAB4159EA734E4F4C25B8431AAC292467663C5BA8C64777F9
7207AB3B49C77E267A6FB9D30A4FE296952F0ACEF3C4C8B7D4EEB6509557D010
DC24296EBFD7DBA6FF9FAFF1F876596373A7B8FCAE1690E08129584A2F4D5F1D
BEC9A5E384E2E27B5DA1A32FF03F2B0335B34C7586352420262A6BD8C8C86B43
C34F7DD66171FDA5E29DF4C794243B6AC26F2627CD2E8BACF5E7EB940C4CC1A3
985192F02356B437C10F1CCE709FAD5734EEC2464E048197DD40EAFACA6FC2A5
AD2477102BF996826E269719F3250BEFF5D50D7FF0BAC51B0CE48169A1729D9F
E99213AD3D3896E6C3D08B06D06C7D857847F6106EA3512E221A2290ACD2C213
DE1B30608ACABEED6F28D3AAC04BA8A338F3EA83094EA0AA4DF20998014260A5
4F0C9A4521F8F2BB28ED8950FEEB7AC755C64E1E5CFE53534C4ABC74AA0F86CC
C53E4DDC5900CAD4696EADC207C2ABA2445ECDA93F903ECE1332EE1CD5660F86
2986FD0EA3E152EBB0F87B192A555407CD539FDA93578145FB2E187B22D78F6B
08DDBCC839F8FBE57EA187AD694287197B1934757589D0D7AFBEE24A387F3774
331C15D453541DCA47EBB9D1315278876AD766211AE1F75DD1409CFCF704016F
D6B75BBDDFCF2743A15F8A964C001E285ED697D69314BF897C98CDE5B9CAE03A
7B36E23B9C5D025EBFF341CDBF4A20257ACEAA3438FAC6FC695D50D41B54CDC8
106E47AC23B920F7B535193DB8FB1B625220D5AA23C2866945E4698179B1FC5B
2B87DE6A13E6EAA95182834C02350EA3064A0353A7DAA2C637EAAE006690F9CA
C5BB7746D475ABC245A52F76B2D3E8F2E78230B39CB00D8ED211E30F4B7E0AE6
AD7C966CEBB0B838A960B622F8ED5DEE0663274CBD1820149B0098F39B13321C
40A5093F5EDA1DA2D38844AFBCD33CE6D9659CD7D9576504F93935D056E2E2E5
BE073A95ECA822A236A9F644AE16DE1A24DB3F1D952BA7E70AFF5B14B02B08AE
36E1291F214B4C7B505932926CAAB42033DB48622025EA0936679CBA6B59AF00
25201D826F0B7107A6B03601F68F0D3327E6B5C7C4AC0D23503359E6167FB949
ADAAE159A4FE731725A15280161BB43A31B191BDCD6D4C5CB2DE18470F73D7F5
7CDF55507E2FFDD3DA951FBC30DBF91A5229C0BCFFA6366CD8336018B981EAF1
F927C1D2038B6FF4D2BFDE2F0820007D3267BB5D04231BCECFEAE776FB2D04A6
E73B21EF6E369D52E3A53155BAEFD7983E8B82475B83BF315666430C72117051
F4F26BB682701D554FFF921D549B7619E4FAAA638CC108DBAE56A30A88971533
0F55617F9FC5A8294CA2BF573FAE19D1881740AE691FA5494C56D4D16DFB34E4
0A4AFDCA42101F16CE133FDE67A92A4EBF689E1D425D159BFBAA460802CE4341
213265C179F4FA0AC2F2DC701C42E853DE286F4DFBD13815DCDC675CEC58EEB5
D5AE5274C223DF459A74DE621669E0D271F30024C0488C71FB30791F330A89AB
163ABE642BEB690F901A50B84441445D5BF092E5DA3F0A8B442DA0EA2ABF1421
3131361954F2A9CCAB6FFAB65620259B5ED1C40C18501E3A27F7E6CA45A5C0AD
E7FDC9B571041B328D34A54AD914F09BF5A0416FE7F08B142A3675798D931F68
8A78FA2867CB35F579FF37E4489048CB085D44DD5AC3570CDDF7FBC39A726ACE
162B875AD0F65DAB1FCF270A8F302B3CCB2C1498EE5644E2EA70EAF25E9CB61C
461413CFF149F643EC607E69394CA5141B1DD5E631C828E27EE648E5A154B663
63BAB6B21ED483B130D1500BE41861F04DA6477BD0FF952B6F2F412D3F3BF98E
15AD84F67BB10E752267E479FE0E172A0C972B4139D578289CBFAD353B4C8090
8DF1F512A1EC5A42AC7369D2B73D1EF6567205D4515CB219EBD8E8D3DAA77CBD
24F3A6CAB7D2761BF0A78FD9F4D859DBD5523887E267C7091B175B0248235CE9
7A18C7721BA0742B46ED8DDEF21FAE3978F76AF912A7C41A5ED6AB07863F8450
85A3C1617EDAD67E6DBBABABC6D370BAB5749972A7EE66A28BE9483B3AEB22DB
D688FDE15B65E59C6435D54A6053B0E7F5CE5D6A033A1F7191B5D827FDB79256
179219E78DD0CF9396B36F1715C48EB575EEB47A35091FCF52A3869C90FFFB0B
271416E564E3B3B20871D87D1A245BFED47EB4FF55C7BA546B255D13188E825A
8C4F34BA48019506EEC709C4F2B25832107BBECC4E114D01464F125E0A6B762D
3DCDBEC9D164046476ADED15087D2822712636245429E2E2AB93CFB5AEA89D35
588316687C6F0FE46754FB405E4F443349AFD92D5CE2F3AFC8ABD09C7B28514C
1E5AD0DC2F2A32ED2D67C1EC7B9CCA2DCDFFD71A63AE60962E4EA98EE260229A
C32A5DB8536A681399EDCFA4DE0684C67BE542A45CD9DF12110515E090148AAA
C9F3C2A26C00FD63316B1338F012EBCCCA3FDDAA06862E0BFB5C0D788E57D2FA
B457DAD3CF23C6607AA77A5290E717C80D4A3C7CDB7EE5C2F883659FAB9B2D7B
0DF59776013881424905E9FC7B48B08F60F3F93E4B08F5E72D058AFB91DE0325
98D320DF10E4AF07A0EBD15B55338AB07C63130CC0D0664EF6191BE603B72B4D
48C62DF30C9601C5EDBCEA7EBF20116D6BCB03AE784C2E5C8E9943B4C6A067B2
9227B05F959709B6DBC19F25CFE9249345581F5943488866C47E60A3176D1F24
D77894A1B4054523670FF1D513706F630EFACBA3E05E555B7B1FDDB27FE8CCA9
6BA7BFCBFA62794496BF3E38F3D86F61EDE3925484E3FA45344C7FD3D4D3A68B
7C606B595F8CD0EFDB354F6605B75B5CFC005FE6EF73F789B1644745FE21E3DE
AE4EC6BEDCF9C13751778989063E9FD7DA238CC1E5DD8BAC2B6ED00B65E2313E
6F4EAE92B3608385074170AF7B4C3261FB5053E72B76431E766A78381131A5AB
70E6B1F68FF476F81100C304C12C8050EB3E4C247FB6FA205C49A2FEE1D9C395
B141855BE88DFF74875D837DCF883A4C8B322971F6A0B8C2FA02A5FEE5AD6857
56D693ECF05FE2D8516E3A3DD861BA23E5C30C471E43263B4239B175642BAEC8
14A1F6B4DE89484938D53E66BD5254F00395E5D91CA5F17AA6EFA965141B10A3
511264A81BC42D2016404443533C8945E0EEEF5008EC28100FD926B3B53CA699
C2B75B547568C70FB842D58FC97E89ED5CD37A5D94280A44D4D05416A8826F2E
C9916C40EF790232B6D1AF6A8D801DA2B44D109D7F3700004773178B61E74A45
2FE31848A3A34CA27BA189441C2115E0DA5AEDDD12706A25DC247539F7267B72
660B31AFA9FEDC74F5BDE4C1063379BA4F4F051E7E943846646713A319FF13FE
F3839B1BB2B26DC8A7EA976B82A981543A1745F6EFAE9C62151965CEB95B0B8D
50FB35F76EE1819C6FB5B17F49393F76BA5CE298C1259BA8F85961B560D84364
5D4D7001A2A931511C21DB33BDD28C7C852792869F024482F278C140DB9EEC66
1F3F57874194001BCFE83C4581B54862FB23DD14D6E87F9526CE1EB70E28DFBA
973E8C107BB64E214268C49CB35E8B62DA20DF9C3D32E5549AB7724B95C2976D
3C222356E75680105FEEAAF50AA56C985636E5AC3E45E737712ADC79D07AB06E
1983B84C15688C616528F02E3B6B8413A152F4848F3CE0F3D049CE08B2867F65
6705E2558C6845CB546F821C251ABC8A6EE2CD43CF881856584E703D4B091364
6FA0CEC364D6DFB1B257594E161413D56126745F73C8B2D24CDE58B6571ACE5A
E65A2C788223304406652219C2C67F6C2037E455BF0095264043E6D5CC6C8A85
349C3A72C5F7B479782C00EC18B98587870147414F35384A5247CC08127C60B9
CAF7AB2E46604E7FB844B9D6730E6E14C9E1CD53B2720514651ABAB4ED3CCDDA
F028B676F0FE360CB6B342ED9778920F0FD8914C4C67D9D7BFAA11B07C6DB062
8E63D2AE0367EC45AEA622EA72189CF0D41E5D4D4A1360CDDCEDD19C2E157EEA
A884499C77EACBBE3D271C3D52BD6946EE918969F1D861A68AFAFC9E3A2EDD22
C3B8B29EC12215EE677B37834845FDADEAF9CF849C61AAFBA099D414B7BA7740
3DCAE29760656D56C0F12D332EB413C4949287CC40B313E39290201380F44656
9B49BD447B3CB813FE22A5B6BAC6405CF68CD921766A4CB1506D3589E7B11B55
1AECC3692A38778E34870D52D97A6280CA830DEC524749A6C5C0F20571C577ED
03D63028C64417069C0B0ABC6B5C2A2B08E8F5AE4C1E037041529C7164D9CEB2
9539BDA71BBA7E79A8A11520BE2B47FA5EEE5468F3B5F4FCFB4ED010744C0D75
3396941A903A9D30F99B08C9033A1E95F5F8A1717DBBA7AAA1EA72855CD624B7
C3E2C53CFAC71CF2763EF26955F5809F8EF09A0666F0F1C54F38D882DDE8DEE2
8A07A9E0A42143E0FA373C1E89F29B1EFECAFF31922A16CB785948643D0590CF
BA5E968EDE4B8D2EC13F789CF1A4AAEB28A369B464C257E314D98DDAE50695FD
089FE59892324F3E7E251FD0E0C4F5FE407A8A3359ECB2C89B8377F76A0ACD94
FD8228429DD9C5B6E2B1E12E7490D8068B339F27B4443D8BBA28CA32FEDF3770
4FE69934CA33DB10737117862CB93726E9186BE87A795F08AB34397B5327E1E8
FFE06F947E964CA3FC7ECAE9AB08F482AB5ECC9C4B071E1829C80F378EDD3B74
7D7D6BFE8E0926F7900A5532436678ACFD5EE1D071CBC92F5C0A15FAAA48C281
0DD8BC66C2EE96B4BF2CCDF1F317F6414E46ABACF3735FEAD4FDE01A1584FB63
1EF70C67438377539B73401573982BFCDB573E1E117F82FE4F8D74710D366B92
17AF501057E3A9FF7B3D9AC5850EB2A7691F5F85FD4D278AD6221FF10594FB5C
08FF50DF31B43470DB95C3A15D60CEA3BFE0FB669A1DF93533978144A1D4CA59
8F086C8D943F0D8D8C38C42795015A480011F8A2A427E9550ED33DBC9526FAF1
C446468FBB8D55A983BB46DFD95A1AF9A5565E1CF17841FDBD5D617107403C5C
13A449FB321F0C4651C3771DCE23BBCF4FB96477D450DB7DD1C6A47FFB7EEAC4
9A7483F3A28A4B4522EFC1CE8875B26B623A2B0703D9B20A7F4BA80DEA1BA435
38B650D64CDBED658B9C99FB4D97FFAFF13F100A67E548F3E36E0735276177BF
62F73CD1D00F3BB4F1D0D9FBD78656FDF647646BB12B699A2FCA90DFB3DD730D
96D100DC5B1BBB12E2505B74330B9CFFFF0802EF9341ECD22A461595D5754FB7
E567BEBED2FBAB14087715FA246BFD8B88E84CD90C6538BB99DEADACE708FEA3
E1C4E789E707745A57E964EA01A79373393A76435393719FE89C932135BBB33E
6D06B9D68E2BDC5212801CD80257751FD053FF0F727EE7A62C4A4C0C8D10A934
30C7FE12F0E677B8717DB0EE7B2FE3B5533061616F0975B16DD83C167C618562
DABD7DB8E7F470F6E99952A176726A9F25181F3F7D0BE90B159049496C00EA11
D5107B149DA1F6818292B43BBB1FB3C4C6A267352048EAFA4BAB27D9DBA3C541
741CA18F38CD6EB4488E8A121E8FDD6041288830D83011C3964BF75AB5BE7634
C0C91C4992B14CA7B8F884CF0B65E50AB3E501CB5D72761CA39DA80C440A6FDC
9D19E814E17CB856AD1A0558AC6CDD10ADCCC9F85959F80489335AD7E0D8580C
DCE69B1021B0BE5A465F78D2251929201B999C409ED464346A0DF2A5DD098627
D11685CFE1B820114E21BF3715579E51DFF7A60253F8A8446BCA2EBA98DB5FA5
C111311744B77AEBA5674EF5FCA770729FEF0D198E94EA9DBA2BFA67306C1B77
0B94639D1CEA0763EEC708BDECF6F21DDFEC10A69D2C5789796F6006E76BDF90
95966D52B90CA710E964C177C519A0DBE4EC3A17A084EF22FD4D3CAA983BB70D
D42052096D69FB5D03F0CE3E9318CDD983EE4C43E2AE2465717099CB5414CD55
9F65B1728DFED9A13E39976C99B380E2CD1541C618EDBEBF74CDD68340D52E13
7B1DB6FF17B6647D8BFD4DAA2ABE187EEF62A1776D6D837DFCB5910FDA22B734
EB0855B35DBFA18F104C67E5476576437749208063CA4750A971100ED22F92B7
50F680A4356C790955F43BED8A256A95255153F8154692F009E4F971BA3DEF62
814F083B1FA19640B3121AC66E9887F507FE1163F6343B92F1B67E0B0B131E71
4C59F8AD63A8AD7109796506DE303657F9A3837EBFCF92F03AA60374AD0A8466
A9B4332902B7C73422EE09A7475DEA1D8CA76BCFC85EEF66EF66157A470DCC31
E7A8C24ACB62458660A01C4EC9D275A9F5B96239829EA5771254B62C99275025
90AC4935026215EC675BF3F31325E6B3F84D362136D36F0B0755BA39708AF351
C9119355D5C7304FFA804319305B7CBFB2AEE28CE031D2246D53C8BC22DC7C67
7976316C9ED2CB60D2E022319734564566D69D6D5BF8B24AF382484337EDE6D8
46886EF1FA6A9556A104A3ED4DED4B0752327FAABA1B604C266E6B78FCF822E3
F8417201F0D2CDFC53EFC698DE410AFA0B3F973FFC5CE00881718F516AF20305
9137654A56428A0890EC7BEA2926024E788DF1D3BB57BA6523CC7BA1028B2BD7
82E1BEB4F794E761508A8D2F54830E23648C1E0DE6D2EF7EE297FABBA2C4A61C
3CC6C962C87A8E0F46EC226D68D479474ADC2C380DB3ED70D399C2D3FDECB68B
4DA3A90B337EF1735482737A22AB0E1818B2B007A1A315544D7158234CB30353
B47A14346166C4F892A2F092A3E45DFA76E4D32170A9DF0ED814B56FA36CDCE4
CA26E456B3B254488A18E338578927CBC76F06699BB084F049E32B6F90781A39
AB47D4BF85FFA623B30329DFD94BADA553787D2618A6DF85798294149D6BB482
23FAF9C4286B7469DD83DCBAF6FC7C10F12E318FF920AF6720296DA142FE4AE9
0AADAA722DCF191D7A48635E3BB70ABABDDAC20A2BE508F6433BB9F2BF304D1B
82355E48BCCE920C979763D1BC2A97B82446053FED111EEC796595709294CCAA
488C37CAEF08DFEF5DFA13FE0CC52AF57B2EE7205F707023A5FA5306CD8C2CE2
CE951FD4284A9E2896D5D3D5EC77EEBB34695CFF4FAA8DCDCFED735340520128
FA651D9D3C0E0412BF82AC8070B232865D266DCA9370B9ACE0CF7871E8E10FD3
B494836C65A11E88E61F04E09FBFE6153662B6A487F14B9D9A5B20898C25C34D
D931F1B1401222C9A40E3253F2D48149DCD7FDF13F5351E6C89F1E46174814D8
306E06BA24BF10780ED60ABD9581F43BA5C7EA24B0C9920CC4A8F933F7D7E715
05B73C16EAEE0ADA037CE9EB308D4EB08F41F3C2AB7B1D4EE45BF11965BF95D5
F9D95F7484B2B05FCB49861F7EA05779AC0421685002FE74B02B3D0C6B9B201C
3AC5CD3117B29105C88830DDE420CFCDC65ED602F729B35F40CE459B572D4387
FC436E46428080D75CDA6BE00EF406B9A1B84FD90768E1AF14B3069F980F33D5
DAC4161988A58D33A6F01F2BD90136ABA9997D68C399B7DAAA19086D99A0D3F8
6F55E50A47AFC5E83733B3BB479E3F976473773994553E96AB44C85BD7D10A9B
7940EEBDE64CAE21DAA81A956600A43B18257FFBAD638529CA6207E8CB56DD16
A891DEC6B66C54FAB59B75C3064E8F923D26AADD15D431A70FC1CA00F7B9E8BF
2C3DAB0BF069A90CB6BB1BEA9D226D8EB21CB81D28CE330F988A4D89D60619FC
7012142611205589FA4C2263FAF831B150E963C89B34910363D0CE8E5689A870
F7DE1140DE6AB73E698FEB8D184BCF6A5C4AFD15904D68C140C6CE231015D809
2283B9FA7CFF6F898BB56E5C40B1D2D23D99FAE307B8403988CB308AD7FF6297
A576398B0ACAA04C99BF3F0BE8D83F9119567424B26FBE1E287E038AC35FB8C5
2FF1DF402A24FCC896C4BBE6E0A72D6551FA585EC4EAC214CC0422CA463265A1
62D9922AF9898759F5378B933C76384DF7B9C09AE7D17038A04604ABE5ABAFA0
8D1B283D0AF0BF2571C3C0209F5C2A4901EF103A9F9281F73C93A413FC97F6F1
331CCD89A3E3543FE2A4894925D73396FBD0305CC58E312FE269EB786F9F7BB8
62DE9557DBBABF3A9BDFD6C700DF6EA6560C188EAADF0DF449FB9D09F917E5CA
703C7E944BE38F601F6F8A63D0FCF3135BE7E4461907C8EF7DCB17CB49336D7C
AFB9D8C0238645C253E713E1AABDD1C890B5383526536E742D1F299C73BB93E2
8D89714B02CD07469E8E4F6C6C497F5FFF1FE02CD5D28E68876A5B9EF2DD82A2
578707496F81C000ED127FF1BD376F7A7571B65BCAA07D24751D46475632A184
956C482EBCE043DFBA61917A80A8F14FBC5B5194C17B4859F9FE6D3C67E6A4D8
64621813BAE9A755C791DC6B6FBCDEB930E76ECDD5EA7DEAEC6C06677C28B1A2
3885320544FCC78B1F93DFEA61002F47EFE4BF0529E8EE050786D6599A49AF94
B6B56C50BD81B011C5B308DE4B15BA978CDA8A87F21359CB48516D264C08F4AF
E461E5A2EF030046700B475E00D41EFBFF9EE86ECA278DCC38682E1B363328D6
CC448A8A1FD78DF7AF41981C5A6C0848B85CE07CA3A1D579FC9530C7F5351C2B
772B221059E7E88196E8238130FFECDA4AC54221936F13388CE0AC08ADC3134D
1F38F37B0253043678F105940210209779C16B2A621D818752BE3E059147FECB
3F679EE10B69C9188D59A7093F9A784236EE46E0C23648C1C5A9F69FBB5F56A8
9BBFDD958C4EF2736D3FD6EF9EF1277AF65B91DE153695BFAF27430274CC1207
18A9ADBDB1EAED6C07D533D00EB4386870643CA83B5ABAE16CA37F4931C01450
286FC19405DB16C42D1F5F66E7F073ADA6FB16E1F0B1BC2E13055CAED6A60225
2FCBAD90465AD17FA4D9A468AE76C00E684ADEC24F51E8F2AC97185C502F8B01
2864EDA78800396D97AB4F16964B7C350170DCD944CACBE34657F00B6A7B1518
11AFEC83F4EF8044A8D2A91E8664125C1BA4E06CC1498A56F34EACFD2A75F2D1
DAA35F9880387B45785C2A6FED25180F4035419F98FDA0D4A35701BB16F608B9
140813CD7A18CC4AEB863375186A9DD81D6742280148394210993F7D8FFDC1C7
5276A551EEE6C682B25C98A656B85F9661431919003E1782E9A3484F8E59B50D
EE8C41911D8273D0046F9CD7B7528EB0A09D44D413CA505E8E9F27024CEC47C4
3A3FE4B59C71307EE101F01B3272065E8DFA8618B496A31CA19AA94108FAF933
7186D56A87AE5841A7FB7F79301019F93C7A065C7AA672BD80983C60F2A341BF
41A595EB76C7F154D5AE1081304809DF523EFE64D400BA4D22773667B2B0B2A9
74E898F62BFE90F132A37E2DCA4F43E13DB6246AE25D3EB90ACD0A2157892D65
BDA098161F82569D6C93E2FA2302597BFF0F12D7DF5CE219716715073170BE3D
C054FD72789EBA34CC609FA509C6886BBBC3E732382A7AE66778893BA825CD9D
66D68C6F4A847BFC903128D772CE2772DB7D5B3A765D09AEE0F0178E20124CFE
F255FE00F867731F2800A33133B8B9AEF03A70F4AC6D15AB058EA55E58F59C37
4DC6AD4AA8B125F40114881A8F07425F0B74B94A95A7DF70A4071FFB954502C4
F9482216949D71A65AB268AE00C38A661CE75FB6FB185605733E9E26C3D68322
78FCA09ED4509FD80AC1C7615629F53AFF1E195C50F246011B63AC1A4A96CFBD
EFF4DE11AB022E33B2765DF15FC2AF3AE10A645C1B6EF1661A4DA77B8192681F
BC7BAA8845410DB8B11F19030CB9E988C72C884FC8C81B7F89849E6CEF15DA03
F589D11E2C3F63D851795EC26644A7B43D53D59FC0C715E570EE206034708F51
FB76E7B1CF387A35DF5272A9ACF6FD1B5D27DF360252D3AF40658C62E0A22843
1A6B73F89A864C835D697012E2650AED0054EDEBE6BCDB4BF8F7400D65A6A8AA
F2C2B3DC03235240299623E3941AADFDBDD65D203AEA97259581392B675561CA
C3AAC11D3ACC0272247466CB1B8A7AFB41FB9511BE7BD338454EA03710BF10C4
8A28D8F457EF31AECDC6CAF77EFD38166AD67E1336891ECA5A53B73A1FA96E48
97BBE80E8C8D9AC87926FEC30CE2BA0C6CCCA12416589D6A588EFFC4E2DFB76C
AEF16CD3EC1B045ABD80A941EAB026C6CF89A064E0AC4EE68A7C0E4EDC470C3A
E80883E42C0F6F15FC53F043009F1BB996EFBC686A447708DA3E3C35F43BA86A
59E03C7428661C1680297D7EA536BC8953E18F9FC57905F16D765BD449CAB445
5252955542B51E2F294284A00B539A55941E830E6085A42387E6272ECDFE48B1
5694C6DBD2786B4B70A8ABB3D5CDDAA510BDCA199E70F66CF5A54B58C5691D5C
6641402D762DC4CEE8D9A2000D502CA7D8CB954B8D0C0FB8675F6B674F4F4626
A30647A468C90BFE30DA7B6AC0BFAAE8085F7B5604652FB59DDF48A9DE916F2F
4C95B524600C92BA09D5421ED1EB2337073C1B16C29BD37A34F7B2E0C36E1FE1
5AA93FE78C651EE6AF9187E298CB7AABA58E3FB5B4C7E86616C690892B45C1BB
D0A6D3F1FC4D60EB480DC7B96CDEF6ECCC11A9D138C885519815287BB4F80A57
60A74F1DC21EE04E11153BA9952CBD2F7ED23F89DE86293FB47B327C99900046
165BC865CDE2073C10219D4D5B7DB4FE7B74967B9CD3E5580A9B0D0479143FF1
F2A9D7083D6ACF1B329332C7115669921C6485C84EC73E89F8CD98AB42547B66
A5EF5B9BDBC53DEC23A4F4F0A8F1AFB3A1F7CE95BA79032814BBABA742ECE84E
C3C70C8281FEEDE82014AF086984B51D8C3E4B86EFCF64E05CEAD0BA36B1C0E7
AE3113609C7A8268E01D9738304A8F1A7759C6D4002AC115DE87ECE4DDA03899
D7B99A1DB2A7E90AA7B2D29B3D6A0508F7C936125DDF4B6D79703CA2EA9E35C8
597EF4E828F6F4B08C8598AB2A6C197095D4306C7E758262B48590BF85A11264
E88C95C3E26E626EBC78AE9A97749E431D72B7CC1E8E10B7BE51F4AE4D2529C9
B9A1CC1DE872C730016968AA3FCF6D4C15FC110A14C6B17D85CDBEABDE837B55
1650E889285442AAB9A29D15BB66547AA8F221993D48754421E6444BA9551586
2E744155CBD92B8130733C5BB74352D824B69B2DCE0A86AD85B58F0473D9AA56
B6AA8C7DDCC341E0DD06F394C35AFF997D506C77D96DB14EDE6AAFB6ABA029B5
6AF24EE50F275C2B8C1A6920B6E978D5FA22AA8538D7ADA0BCF3BF9C30CF99A9
5C7E091A13B176C354F11DF50997650CEAB5C21FAD5C940160136BEE30A0B658
2E85B1A720BB0DA163D9689FEE1C5BCA6853F08D053086747EE1E37AD9400C44
4BD888801FE2911C62E97B65DC7A5541CD3F3A5AC883F2E155237A26FA8279A0
A213C68D99F35FD7661387BD194A9637AEC6875DC89259D8D7E28F6EBFAF8A51
0C59E62463B9726C2C01AD1AB2CAC1ACA73FD1E6619B3AF0FED028F1476A4407
20BE08EE3F85A9A56B67CE9950ED02F846BD4CA8C5E8CDEA55C551C9FD241B61
B1ED55413B318915D1FD1EE6DD085A0ECE18D7E72957717DAEF3986D4055EC3E
5238AB3271A5B75ECE9721E484AEA8DEFA2A7587A241F53EFF9021D9D4C491F2
6BE8F54C61165CAD797DCB74E90D7857E9E1724F3FF606758661A8EFCFB068FE
7F885783C6CA8A242AA96633971CC8E7DBAFB0FBB8B8845EACC63829C8B8BB28
5F41ECC0B7AC575319F64760E7C48956C55E2AFF9E1DDE9218F631A3FF370EEF
BCD540395EB16A76847AD75B9C65E5E4AF04A8EE8577FC59062C65B61522017D
30B61EEF708F894D1569C52526F0846C1FA90A996AEDAE024884C018C7D0DF62
63E6DCF166E1670F2EE9B93192C92AB0367DA074BDBACE42A5963E1B4BC0D6AB
383EF2BA91F80C5B2F6614C9C6A164D7F8A258E107589087582C21F53A1BEDEB
51293AAC5CFA4E50B132CDE66F20BAEC04E5183FA2444334FB5421F839B7FE61
A3E58CC805DEE17AD380B889F83B3CAD005996A6309A63BEBA0FE32D74A1972B
24DC6056DFC1DC238085DC4E78C139FF3A8FB6A038C768562B4ED040B0507213
00E3A2A43B7CC317DC777BB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C54E
34081EB66054C2F450587BFB5B96D8720C9C313097D639AECC2BDDB906D2AD26
04968C755BB345432BC30DEA50122CA39D60D35A3B37D02E0BC35DC10DBA9A84
0E37A7D4CAC3A673972D9EA66E8AB516C9FDD029A96FD2E951B698828614834B
28F3FC7331519F393E1C60FF41FE8EE0BCDC1B79C404A0F6A82D99D5DEC64A49
22496D357B65AE91316F6A01DA7224B06AAD1687DBC419EFE2BDAA0B71E2CB83
54689553B44350D7ED817EA6E0F32747280757FAC3BC429E4FB2882192A1C2CE
D5DAC9637693738A847B56FA4A9BBD23250F324FA5E2D47AE98531A574C42BA2
F296A2166926C9D207751DE0BBFF18504049F64B20C24ADEAAB4FD05BAA04526
8D4906FA966AFD7E2554F74EE0E616F4F0BB7680FD143A878C818D35560BC5BD
0597BF37F598B85755F6E45A9A501F5CD99DE77FB500ED2E8F5FE7FE5D7AD765
0467CE8809C394033B8ACCF9BEB9FD8F96E8AEE39C62FE4A5748ECB4D1A19602
8414E78C7DED728931C69862724198A139212F05BA154584DE6279F89E00F23E
52B21AEB784EFF0E1DB37881759E386BC3F960861F4939C7CC6A3261036ECCCC
E54B558798FF83A81BF40F229633EF42DE8BD4C3C7EF12F44AF94C20929777F4
35927C69BFB99F7716681EF9C6CD9C8D30EFD2C9A5C42B82897A6D76C92CC564
1A02B18174F1A579D7BD85B9A80845B563220566FEB8F341AACA7A63B90A0D81
EE204F09E4ADBE5BB5BDE8D8B0F73B4A0F733B8B3217E226202117CFBE3DE2C6
DBFB0BB25BB13DA6E9E420FCBF1716BC831084180D01341A77F5F142B44D8C31
85DEC6C4F8EF454A0A41DEBAE7BF7A16F17D7093299886C0FC6ACCFCA617E5AD
605DBB16D9F01C80991EEC508C18BC04982AFE73A74C486829A10DD83491C800
8AEFB2D762EAE98C8E56CF86C591B3C120003885443D4B789F3B5981DFEDFED1
46296AA6AFAEEF0CB2CD741475AE26EEDF1FA520CB01BFB6C1B68EFA403DFEC1
0FF237E38BC8E19B81502A19E0BD113AF8B864E3115F1CE780310E83A90F29E6
D56D9F0D1201749638B618349FC6ED24879F02A9B2C2924CD9E921B8493B07B1
5EE37DC5F4533724D785C22C645809C6B3B4BB5E1F9F5FC3B11F89A33FAA0EBE
4D2401F7E356EAF0A177FA6B9534C127F7D8C4491E83BA1E2DCAD7DBC8AE5BE0
4CEE85C8B8CDDA6D70022E0D5A8E570FCBE99461753A09617854264999009C8D
902ACD8AEE65407DDDADB6B31FDB14998C197C0126634E2D4274DD221D7C817F
DF26B95211DDA7C94F44637ED9DB8797D2D9AAD7063D5D20A302B51CBAE24382
CB3A07B64835A2E7A77A9E51EAD2D9A4C9C6B49ECBA54DD1C476AEB599908715
56064A55FC2CE634031B2D1759C1C252686162FB4E561B4413C38DA740160973
3F47D9990B238122AB323DABF1E9B1553BC56666646FB94D3EAD77C5E88355EE
AE331AE204F3A450A0165F894AD136561BF06769FA9CAE3CF1DDD1138FCD3D81
33FF476197F30B005D700490BAAD5A7ACB5C30A9E79E85CB8BF53846F45871E0
89E75817FB9397AC08625C202E9BB2A81577A0BA6A227BFFBA7CE2C7A10E33FC
1E611BC35DEA6BF035BA193D40F003B3B76DC121E74A91E99BA77B3D28558B41
8BBAD5B4129FA073ECBD661891DE0DCDDF2638DD9EEE9AFA29111A71BCFDDA20
BCD6006B0309EF09261B74D32BB4988068260570B2884738F247821F243E8DCF
97A1DB083B676BFB63735B05E07AE83DDCA5C9FFC1EAA7C1CE0383FD7B94CA30
99296065B0F8593303BB00F450E9E2BD683A1BD9D51F202DE6294C2048F8ED7B
B70B59E6CC257CB562195B1D1EE8477E634120D88EFDFC0EAF2842CBCD448D0A
47CC2EC7B816A5E906041871BED0FF2D34D3A01F757A70E97063941EE2DEF2F1
6D65647584214282468217F4AF4C6D56F638DA08C9A72B020154C1EF06F506E9
676789C55C8426F50AD7C3C324156C681BBC58F54A36B847E467C443CE8FCD93
E7581FEDED9A2A1841400CBA00202C1803739A8B97CC2128A57CD458DF6ED9F8
FAF6B0A70F46877976C12C647970037BA5661166F3898963472CEE9BE4D23379
2BC933A79F266F540642EBA7AFC8BB260F79189A85CCBC41B24AC2C007C9D8FC
83BCB2EA05A9C4D09B9A6A983458212BD5D24D385A5E94F1221407B7FA564770
BBEED00BE8583F708031FA8BA34DAA7004D32BAEB7B05B749C2BAFD14B14514B
1CE83B3D433CFB7868A7FC61E6AD2BC63E8911E4AACA4ACE065E9060995AD396
2C07E51D31ABBA3DAED981B145430509A2AD423A8FE2FB4AEDC15F4591F15A3E
C8E44363ED00547844826FDEFDA37F52B7E3E586ED45194655E9B5DB04E97A3D
6841A046331DAC027262BA56EA7F206B02BE6FE0B04249A4840C01D4236E2FE3
366CD16105E69C65735FFDA908C8BB708C937901C5CF9C3AA40B4ED4127FEA7C
A362CDC6CAB15955667D37EF7F33E5D0304268805D73BC1F5DCD70D140B498BA
4334774DECA81B8EE8E0E0A90EC8853F023744A0B9708CB05EC85786C96DCAFE
9638EDC44ACA65EFDC40113FD87EFB8FA0222FE0783CC1E0BE7F763A6B5AD556
02CCAB41C996D49D1606CA157BD40714239FE23AECC99FEC69C3B041AAB604A5
F4B6230D3123380AAD415D0B06E8765CCAC9A2F11CEE8A9C240C1439792DE53C
986F039EB567BFB06BBAB11134E6FF73120542EA25681E01597C9A8068828C2A
D82F0A8E141775ED7DA74734480B48D114719BD5B35A12C737840C73294FD627
3F61247E9B350B5BAFEED9557DBF3EDA4CAFB3DAE3C39B1E9D5222A83F9E39E4
E85ED80856532E19C10201720A898BC1D42C79E65214FF62DFD6EFBE89ABED3B
1422A124751EDA0CED4C3D2F1D518271EED109C2306A4A8DFC475F01E5A312BD
9C984EE3B31BD39D700E23CD325C78530B4647F4462F88BEE48FCADFAA7450D2
2A8FF7418B1748B2B229488CF16B268C00DBB4941370B9CE7E88DDDA40AD9C0E
D36BE45455A833ED668B24430916ED58EF36404E3B912BF4BFE16F000F33BE92
8C00E066A03A5781A4173AC93C0F9C6B05D50E89999F367E6A91EFF7C6143422
78BADD6DB0A56639426407B4787F0C493522A4B26045DBA22156E17068EE96E4
42084171207E75AC56BFC9CA64202B5683587B8F7260592C432811954A219779
92FFCD30F1D33330B151C5B89EFC414BBCC9C581C511E03F16516C2F90E2A67D
5E1E526BF8AFD9374011AFBE3B5417B07D10B751B4D088DF70C7CA3671377BC9
C451141309D07270DBA476B7F016E71CF80ECB45E46CBF2753664C2F32334BA7
F357E7661C133467E8C6B76F72799D0FF6310EBD4306E2D9D1D13E303C932EDE
C28969E59F4810AA52A1F23C34E4D3AA860226603D6AD584EB88CF7983B9E801
68018E04A84AB47C854C73FC58A395739C5F17AFB488E7045DF339751FBA01F1
8D0FE79CB28C52108E3BC469287F9F0C0CCDD6B700AD5247DFD6F915C90C8C2F
F45BB03EFD1554FB8103BB404B5DC59112706B19396BFBC0CF9D76942AC5633F
6AF029F9244F59FA146A933FBEAF913E2510BCD56C81B53C34EC117E52951149
1BA13542C3067958346BF4C4B8B877F6850C5D13503F892E2AD50A227EA25133
7321D82B49DE3252E633304A195A581C15C84FE4AF657B3224ED692864F0B0B5
FEE065335688C472812EFB9F870174F4D1BFD11019237C11E486C3C1DC94083D
AB365FD0BA5627F16A08E0D1A2BFD79F8F3B765514B3807D05F71CD140B7E52D
33747219CD17A9A34FFD70E15860CE612D5D7C6273E5411A798A7FAA03DB3E75
DA4B8AC846E0581F3B8F165270E90C727DB9E454670D51D7F88668FAB892905C
3FD4C715E5AB1B0AB52A559569A0122FC50DB2B129796ADFC7E958E434402D7B
35FC32C14EF0193A816FEB195E5FB218CCB914449B44FB92C6E63D18E226FA30
319B8C68F8F7DCF39E5FF7ECDAE3884DD8E0E276DBE1B16004D5550F42CA25DA
076CE5EDE4846DB45FF752940183D4E7ED9DCC8C5330A526447CD0BE6E013D6B
B6B02C808401C9F67679D26D08019521E472CCDAE5AE384512114C3BE3EE5DC0
1A9FA9D3613E04F4B21AFAB6EDAA4EC59F9E64756B4B5F2119B20D5BCFAB2728
9A93B310E09C14AF4CD433D12A603BCCEF925F9DED97AFF68EE44435B881EE32
8FEB0692AA733A3822D3CB26ED9010D81D68B5BF4D15A945E047E5D444BA9F89
D55B5133EFCAE9EB40457962C3723BF6E61E3C3E10DE25AE1908F86542CCF0CA
56073465C30981210962424D9BC090DA2B2356140D327C52C12A5656C7B306E1
64DA6EF5EB040C516DEF2CA4ABB8F6729C0EB1FBE8C013A0A5AD5CB4578403F3
9EEA082A9C50A057776D363F68E42CE70C176512F552F624CDFE1EF9A647275B
A31FA3B1D4E0739E94D38BD3A30CC2AA08330B9FC2E2E28374916E358C45A337
1109CD3BBBE679793092790055198EFCA05EC6C3E0C23C74946C3E8F46B9C2DF
790F79269566BF9C9A6E54E29AD7DB369626DB03244237C980DFECC233D46354
6CFE92F4996E73B7124871AC35FB114E9AF4817386472C83017264667D2D2A95
344A9BC70F312A1913B1F0770C1420C22A6F5A06375FA3C7A5301071EF0D208B
F4D06C00A20F0278602EA080B5312A8A7DF21FC21CBED006BB1A6EACC2F90CA8
E188BB124D0A18B40E952E098614C2DB3FA57D400530CA6FADBC5DFD2B3476FC
2357E9D9D6F967C5983037BB6E9EC5779C3AA8456B96EA9E36FFFA2C831FA96D
DA659F601FE818FBC89A9FA5772BD7C4CCDCB4168FCB4B125EF346F608EC3FB3
0C760C79D56405175D53EA644741E7EC8F0ECC29B5C6731CAFDA72B606A8923D
70B08E611C123CC5A830B5C5D5EDDE34867D239793682AF0B9FBFC00931811B5
23DC8D747D6B6FA4121E1ED7FAEB59A57758165ADC4C980F34991ADE0E27CEF7
ADF672EAD1B64395DD2034B4A283405347D1B44808248E7CA630483E57CCFE59
E7F6DD9DB5A351BA573C8B225528E20B3CF3774E73AD472914ECE74EF34F35FD
D09656C615245BC66EE8A493F99CE2D3DFF0982549271B429927D4775BEEEC98
8955BE49E6E2C27C0E78D11D16AF8CFE9373FBF31BD7822007395A5D78C698C7
366C1C453FD7CC6E94C1EB22BDA32D12B10ED201A9F192758B996B3B8750FCAF
39BF43AF5EFE9FF1743C357A09FA4DDD599A38B3E3939B5DB5075C0AFBDB5FA0
B27E7CE3787FED70B0431D336668E311A6BCF182CB1FE91856A52036D9B1A374
ECB01D5A5D18BD8EBA40897A0CD1D03ADF98C42DEC04DF35DC49777BD37ECA18
5AB61EEA65500D048E11CB8A8E505E9E31AC0992919D5589C52B018E46EBE636
B6214175D6C3850D90723A62249BA7031D4D97DE2280C10756DAC422F0B742FE
3FBE9189E6DE0BEC9F0D07A47A715C1C33C5C566603DB34C1B985F03669B546C
110680DBC9E1DDE716C4A77233DF121F8F41E58435168EC78444117FE734A959
7506A32E6CB30732E502C92D35A0618E0A1BE754949F67141840E954DCA4A666
7BB22C84F12BE7C093B0306BD8CBF49B51C6B231341099D564C91C1B998EC309
DFED343F64C6CAC65D8218E75ECDA7292A0F2FBB4CCB79913532565720F61FF5
AC82024A7660BF7FFA5101F3E044441B35C302388F7E3B8816D90377750BCF1C
3E8D79F46889480745A22C402150BC596930CFA9E4FAED5C0C785A4AE19E1712
E0178F7B534313C95B13C59BF422F338823A129B94B833C2324DA5A38F6C4481
988ADEA0BA1BFCED941F5EBEDDB05DBD1C09FD0CDE4DE840ADF4251B461FD866
2CC4AB59423A6DC1B312FD6EAD401F4360BD4BBF6AFCFF6DEB99428549E629F7
013A0C0030AC540EEAEE16936DF5F5D0E8A2AD4D68CA5C0F1E7BBD793FE35ECD
C454411C1C417787D6B80C70F651942AC16798E3DCAB7ADF1703078222A0ED41
3D7931523DD01B79EBF87182388A10566B563DB811DAC31B610435FB227521B1
39202BB9100F7B2C9754CBCBAD1C460096C7EA19D6E211127DD80E498A517173
40CEB6832B4FE95A5B989C6BE1C066C9240CE09562A3CB20727C1769532139CA
F98C82CC4EC10E8903C33482D55366033F7A1C232BE7D907B00CBF9D04DB5DFD
8A26CE43453352D5C5AB3EC371D98FD2B5FBA237A8C2A3402E4D7D518757254B
73FECF2EA6782054AF88C0D269FFAB5F6A4EB63E56384DEB59D63BF51C859D6E
813D9223A95FECA63E97372D411977D61DE1280A09D76A142FD40540D10F455A
C0DCADFD07EA6CCFE64357753A105D7FAE24FB13A290D573378141C0D5E65482
E186469488812409CDA10E02E95DAF8773008936CDD53DEBAFBB5715DD63A14F
E70B56C10BE3E116C524809B53CC3A3E240AAC2D537C1384A2C5507997D56C3F
5002220AC95C023653C1293AABF2A0ADD41395A1C0AF8D4DCEB4D37A2EAD368E
F3B873C2946DB0A7E0D87CB76EEF2832087652CE3D1C0072C387313F820939CB
F2AD2FD25F46FC14936AEB6196D30BDD20B599BA621460424EE9C67478A84A2A
FDD3AD0B180277A6F56EC07545AB050D7C6CD146B15AF98ADF937463948F2595
BD0C1B5ADE7C2A84EA37559682F3F619F885A836A6BA5BF5D8C91E8F5EC4E10E
6F7BC5C1A31DD8800B9F910A4E9607FF67F24EE58378481252F54D512FB405A5
FEEE3F5E9B3EE149554EB952DA8C14B7FF5C0345AEAC566AA02FD32C9BE5A479
0F184E1542C798619C3A65DC383556587665F4B3086D942BC9E37D6515AFB51E
B00EAFD142C4613B7CDB38AC5016AF2DFBE3F1E270CB926CB39298D19EF29ABD
D1DA0E268861B3E2A64041E87D9F04F4FA78EAAECBFFDBE43AF792FA734DBBFD
0B2C0A6DC175D9ED7BDA3AE06F801E6C3712048303D58F0083A98D27F98DAAB7
C901BC6B2BF7F18066CF8D591E1BC3F6B425AD15E7D2A6BFEF709D1544B030C7
0EE7DF8431EA9E4C4C7904EE8D6F58D172C97026B510F0E513DE556A3EE87A23
91F058B790FB4942870603D2AD96120057DC55C18B4EE8E66BDCC637463186FC
6F563C82A55D19BB83DC187484D6B141104DACC176DB3B1B1A4B32798E49BEFF
C4449F8328A6C2A93AA980AF6746B1E3EA247617291AB2399219EAD29B1645FD
A84738BE165ACE4B038447B603F7C2B6A9F64D48548042F3DD390C9CA8BDAC8B
93A31B923FD9B577F829C89417CE9CAB1A91674C2893882C7687DD1FD2F12290
DF28FBAE76B209BB8926D03FF382BC5AABC03CA85A14C599109ADB63BA397182
7747D4846FD6E552571813EEC9CB6D77C5458F8FC34A906A53F8B91371C96E7A
69DCA142E8E20FA84B2D40C997892789BA9B3285A1D217C83EFE5B3626AEC70D
AF814FB3ED00942154B67AF27D44D1FC27CD1F4273EC8F06DECC819359047DF7
0D949F6074F63C3C0876D9D29AA1E5409DFF0E21C221E0F790522CD9B68AE316
ACF8C67328D75B24BFF3F8864E0C6300FAA181F442DC1F8BD253360545C562B6
109397CE883421D8B2A966AD5BD7AE960ADEEE428D5D31BC41F20CCD8A05E35B
399390732761D23C497DE7583312B9518B94644D9731E89F3C2CAE30CE571798
C3A4A696EE0B76279082CA860C491C859F62F8D64C6392E1B1594269EA756FCE
A6710787195EE90CB56875EA0E1456598370EAF48FB7D25BD0B8DB1CFB1C26D6
DC0E8213A781133A61717C10EE952784539F48B1700CBBE374AB4B82A9690B22
7F45C4D2150A69B59572CFD1DE213E3225C755D9567CD73BFE36273B366C404B
8A7194A8A779DC136D2A635F3870490DFE1D6CCFC490F2396215EB2EC8F3737D
9D4C70C633CBEF64287F63007EC0CC1CA50012A03F2CAE5C07B8D42C5CD38705
D414CA48BB080172FB96FBB2035DA9717C5E56FF3347DC0356324F2351110345
E99C77E87F23BD5888251A0992009EAFF2F78B823BFF349E88FF345DAD75E703
E70C184BF20BD0AA025D8068C543911445ADA383663E113715EC48DFBE136772
930BE4A5C68A0D164F5A6094119BFF508631A1F4004B2303959050A19FE08672
A8D879E5057FF06C9E33054757344FB07CFAACFAC364C1E3891F1D8E0D07586B
8E6CDDFF1F11CC83A1F8CE504F42AC97803D26D4BC34845B115891AFDF969711
0DE83CAE92CE114617815AD1841275B2A71B7C8E73F19B4A34FF8D9B09F189AD
19BAABC02BA332DE6E9D9C54E77C04F4F1496337B204515790DA803B5F747678
988274CE2AE09F625BA6FDE8ABCC4C48F8C1512C0EBA8DCCD3913B2629425748
18D8E2E3304670D4CCA3D5CF348A84AC8B1FD4AF6F10E7226EC3390D24D93ADC
EF1102BA511A5F8EB74DED52BB4B4D681253CC0F6524CE919E0C5BE69F2FB9FF
D46BF3601893A6499E1A09F719E0DB038CCEB54D031C828D3B6CFFAE3E98B62E
890F9311C6AAAFCCE8FD6DF85040717F77099FFC7C46D4885A093F5D5469B39C
EF72D6A2468AA85CC43004D6D4F40BB33103CC7AD524BC888443A9A99AC2E7E9
616B871C7AFACD584546FD67159B062F7406F3B5943D011206A1FBF5A591DEC0
FA0586506B9D6AC29F5E69D436D79F1F536D4CE6742FE9025DC2A906F72E2997
96B1B37C1F702DD1293392290EFA830DEEDC851AC79059F70027162B8A884D4C
CC2F9A6DE618CC9E3D2BBCEC1F2518F8DEE14A3BB74A87F59C5C482349812E6C
A7C6BBB3C9D30EC003D21AC45F472E8AC886D6392070311617C7D12D449CC5E1
106E126BA91AFCB568DD463D535C8A313AB9EB6E49115EFFBEE2DEEAB2B2C688
96E9C7F430328045478BF6985EFF3F477D1F39A73F7CCD8975000A48A1E8C924
989D72FD9B54B2313E9568A3CC5A255A7DF6BD8BA147AD7CFDD6CF70E3A422B1
9F6D640BD45355D3D798373413278622DD023D8E5C550EAB1E936AE01976B4E4
74FA39BAC689CCEB3B7ED45E1563DA6FB462B4BF718A39DEFB21825ABEAFC545
2359D7199F6EA88CA7A3295DD9B4277AF78F80178D4AF4DE88A411E9422ABF2C
65283A18160DE73D4DEAA1382A4B3708E7272F428926024166A5C10B7A1BEE7A
00A32C22B87F7DBCC0832017B1AE7DAB8C88CE78F09C53CBED7309AD4D4CA3E3
5ADDBF46E0017E446E92EA64D2923F814AB9457DFA42FD0AA4F5CD0F7E56D521
4F49D7DC0F5098BCDAA010E0DD7416B9FB8C8983DC2F2C144FEFF28F3E8DE5A9
D243F217B08CEE5C931E8975EC824C1052D0EBF84B62236F24DB03155AA02319
3121AA5CAC84CDFA2399EF738F780E476016EF0B89F2236B560B7B464A5D54FF
139257EB6FA4C7993DE9C4632BF645EB0AC1C6476BC83D68C8619C16CA53ECC8
D85883D5B9D14761A834976A8962A5B7DD3DF01AE7303C7BF3708BB0A91459F2
94A31FA400DB25AAC7FF1EC283ADB2F62B5E5B84B1609BAFC0C3586F306AC483
6DBB60A9A1D3902CFC9AA70BEF424F021A29B743CE5C2E92F4A9C746F8B895C9
6726A5AA7DCC2FE0FB58EB83FF332A6BE0DEF9A3BB5F2B41FA3CDFFE75D9C305
A06E8D48A56739975368A262B4A01A1D1A64E340B2EC5C068FC8A3861C43383B
778B7611053D310503C50DDFB9A67B432B63BEA554AAB3D1607633F8BF94601F
FFB9B748AE0C07AC63D3CD4E6574C55B8D75FF9873C20A5F142D1C611E412EA0
B6C37536076D97D1B8F9435A8C1FE14B38C368088DFD12EF3FA25E65C19700AF
131CEF5BAC00AE4C96E4899664CA77945407F24DA620F277BE8C5EE125EF0854
AE5FF057E25F990D5DFF0506B00DD80CFC2C86831E87F4D649A7C7ADDF90FD35
6394DCE74510F9DBDCEA473C6E028D62D1733DCA02EF71B1C76385D38A02CBD6
C9C8D1462383FE8AA3128F33137DC450208F54F5B1F3E56323698B9157A6F6C4
D3BA4FD97BB014F7E8D2C22CA3ACF60D65812B134FE589070BB4A1C027EF1A7F
14E08F6321D6C67D90D3E1489973BE681F1C5135F63ECC7937AAA574294C1708
D631DD1DCD7FEF19AF5EBAE15B04FA84C85518CEDE6DF676AE85F52B804C67C5
EEC91A596852645277417DB50C931C8D48A357514059D3544273EA5581A482F7
B355E8C094B7368A2AE167ADA6A280AA3466E2032B9D656381B2ECE57926CAAB
70974B235EB11EB69FF1AD058C188BA2BE9478CC18042AAE3257F821831F8F7E
963F2B4E9D7EB2BC5DD5B3D46DE19C8FA3CE89357A139C719A826F7CE2E31640
F1A2BC76BFBBF9059F7F8FFFA8BCBD4D5D91879B85C073BC5AFBD9528DBB7F0C
657DBB91EE438E66489E1FA850D9FFC65FACDAAAA94358384005B0987FB1A4B7
1949754D013C105E7BADD22A1BEF882C7D98E066BC9100443FF3B06F90CC0334
056FA124D160E26C8902AAAF6AC47FF0857A69389C91FB26DFA8097495589CFD
D970C4BA231FFCF568DAE44D3876C37ECD89B214F257DC0C872338693FD51037
67DDF64927D72B9E0606D9A0AD44614BC6DB9C9894C319A7DEC8B9CB425DA6C4
DB4D382F584A2DCBCB0BB63351499E8913BCDBAC1D919F1BCC7BCC9D70C78EC6
98ADCF8578459811D6104CF993EA6BE4D54E1A97F7184CDFED2E028C6675AE3B
159BDAEA7E5E181958A24CD218709F2EF42152D2D7764A9C316048C88FDD83CD
2217A109048851161D04C73A6A3623C4DE9AAEABD75876AD2AA877D016837637
FF3A8BE7005103519006175B44155A6DDF1048676EB802B096BF2D24E941A76C
9EC415744B84F27A33AE9C4A211C4604D4A8DD72B66B8DFF757D937B76074CC2
56E6B0B1F5517088286DDE28B1495780AE6F429E04A3466041DBD9A65C53D302
142645DDC7801E77B18B86A0B1DDE68E24271DA0BD652A300872BB56956E55ED
57DF220F903005B1380F58DA21CD2E4C28D23221C31FA9B7B5F9E628761E432D
2C4AAB84177E50B5824F1EF15306DE8F84173568B7DEEDE1208C54509E1FA259
AA6DFFC470204B8504FB88BA82D73DFC43A2C107349EACDE8BE4D015F43ACF5E
651F75F1C4E95F965455DF1BE9C7176CA6C7AEF3C745B28C0321613433AD3BC0
392B050B3F72D9E87EE332F43F9DE9F47CCC0C2D253F251647F3EFF443E85109
C9189B21436977843194987CF5D185AF037BBACAD38BA25EC2B498AE5A027F93
A90892AF6FE0001C36A1C728978D2D31480B78857FF3DF772167CE1160F78D35
502DF21C0E3C623B7C81F35BF4D553A1EF320C47428E48FA2E49C3B47B77D1B1
F1D6DC435F71325CCF0DC581A2F6F9A52E9C03C3C5ACC0EA05B26D3512F20B4B
6A0E5D5C73FB1A6A8D09F6FB251E191AF46388EA839057D43F9995B4F61D3D75
BE87B42B91E2778DDC1AA450BE316E28B075682E627B75F1383C3AA2AF0B2DE4
6DBE5135A01DB030EF334DA25162C5E28D3FA2B32AFF255A02E788F6D726A04A
5D90087836A502A52BD0F87B23B02043D2BB60569910C7AF3F98F46B15F5DB74
F0457F80C899346356F5AD9B86894AEFF47BDA08651E36046B5DD23AF13BEA03
FBF8E575D5DB6D25876CE7213F5BA713C89D58B2BB037C927F524EE70A7F2714
2E66F7FEAF69A37D51841FF244109D453362B876456365FA9D4ADB75BEA4DF8B
AEF74EC913241F09065DA1A27D4CCFE405695E8A7DB0BFC852454446457A3096
FB95BFB0AEFF056200B8785D1826664CEDD89ADB07DE01A58E33A57E8584C3E4
1DB3D4B0D22DFA53836C31357B4BE7CD5857D0493FB37DCB56BC349E66E3FA8D
6E0AC58BBCF5F68B16C5F1963EACDC7E3F967B699E88D35E52043C62C3D8B727
36FC5DC2C8EF874279C50B677BFA4153973817244855024624917E378761B5A7
1D4AABF10C74F1ACE642A53D7EB8700C1E2452488E9297C555E76F7ACE87ECDF
20ACA68CC431FF4E7585237553E0AA48C54F43D0DD61E703E3164CBC1D567F96
43D44B6981778C71D0658DE0F93BB03F52E4F60081826466B05A75BA018F1C33
D5174481A43C9BD5C8799D47BA146DACC90B20EDB37953452FC64608397FBB9B
CACCAA30F6FA8C865D02572816F347D1696B05EBE02A20AB348514B87EE28268
FA3F210170BA258989DAA2F4C0613E0F11218FBE1D2D56D1281CF4B224091D3C
AF6F97BBC87BB7E7ED91CB43236F54A2C54DB987DDA1C00AD874BBD331B71542
CF9F589D3526E4525CDF817487E4DE2863C76972A804C2EDC524340DC2776261
9E5F5F8C08AFAD84593AA46C527A3880EE8C81937A7DF7235DC76A3AFBE9FE84
72721028CC4951A80C23DF0B35232F9F3549FF484C56D4728761140174CDFC60
38E63B6531E660
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977C9F4AB20F3D8C391A5FDDFDF5B67E9BC3976D5E50B
846FD2CADD6E5C3689987A6BC19336039591AE9BF280352F53526F7E07CD703C
93CDF2B76B90F055096EAE10BF6794F563F2AD650671AB36C99BBD45E7A8CE34
CB792A606A7D9EFA0F25751BDCE7740D2BC14DF0A3538EC25105BD0CA2485783
361EBC52149C5B9660C0FCC847FD80F67BB3A1F3237F7522F4084B7BC486BAD3
557C8A5956F4ED1B59F70E3721742F99F8F271B2B1EC80832C40E532FC4AC9C4
88F12D88391F3E317A31B5CF413C5AE1C0833A46996E3A4F8A4B2DE2AD885DBF
88E6114724E7ED1BB145B0F970DB565707DEA9C5DC1EAC2C92456833AF7B32DC
A305095C729785E52562098F9C1F2E43FDEBB58E4FBA7C92DA29ECC7EA25E35A
5F0F81B80C9DA0EB028B84A130FDF9F479A7F323F1A17FFB4DA0E728C6AD8DFF
966E4EEBA228D5FAE581E04BD937DB4BE342FF23E08F149D9FCCE4BEAD82F29E
BF3868C433557DCE99A57593319318973CD849C0C1DF204931EFC44EA46FC4DF
E1EDAB7160F878880B5771FD94A98A9A8315A129CA4424095F36ABBD6939CCD8
0529F5CC4C1292ECF80CDD36565023276111730CA08E449585C3DDF1AC0067E6
A77C1C797CA2B87921FD1B07E4FC9079E9D1D8ABED125AB870059B0F26DDF6D9
F3B9309B62AF4FDF0D7C5500A05DBAA0C671065C069B7A80127C683421B8382C
D43710781EB7D551E55C032509EE5D688CAB94029180040ECFBE049BDF41973D
051A80D44AC41A465F9FDB26E9F28141BFF4B4CA57DAF8EFE4936D0D000FB339
19FA540D2771073186E2284A9BCDE26A5D0B2058668CB4EB663FD7959C6D4910
10F976D4C7EA2FA6C18923931ABF77E16D1B0387843CD39A2AF0EC9B51677305
C9960F4AFA057FDF163D854EF6C3A694BFC4C5F0B49A33344959BAE4CB57E6FF
0CAB1468DC84FE0F3EECF6BE77ADAD22FF83BD861FCD07E1302D6A3AC105F29A
46F0792B732E027546FDA56BA1B42B0007490040875E4C45763B67768AC52678
D81E5647B612575B38450141690AAFD4470EFB600683B8BF2A4D05724D7D65DA
7AC4FEF437CC027352BC7C9612CFCA419812F73D55BF7E9EB4330844CB6AF35D
2AA9116E217C3842551319EC75577D484B3AF7B1F129E5AC87ADAC8388A0264C
6A7AF6071B2B9AD4A7D4E71CF7EAF54692CD8E915D11A05CE124A4E833606410
FDAF94DCD466B82F3F53CE916B65496DF9FE3E1C4CA1744860DCD8A6FBA49B13
80242647C6CDFBCEC8E0449D1847D91384BCB598936A89BCFDC81042B7C93575
0231B57876876BCBE79A796658A02B1D6AA743F25F1440AD5F9C08E58ECE376A
040C42B1555C02FF1978CA452A6B692BC4CAC7F89BB91BB22B54C2F289AAC06E
97EED172F71AD3FFF9DD2675691BD38DC21DAB4EA8C71548510B8F36BB152276
E53EC980272DB2D1F927D150EA49D5C543A92552261B3D571BF9B8BF87EBF0F3
11C1D0238353084F6B4330B0A81E5FE47167A388AB9E09E4F2118E3B44FC4650
DDBD6FC75E6FB4A8A467AF3BD8EEF81F267709849103F125FF4ACB7C6DAD9445
4C4696164024E4EB87870EE7B5AF8FFBF327689C93E7DC94B3E9774C857619F0
BDFCA0D2D48FE48171209BC8DE33202DB078AD60C6A948CA800B127F9C569900
9981CDE62667AD8DE012D09CF71786217AF5421B819575C8F91E88265D677446
0A43733E319EA1353CCD70BC049AC396C40B7560A28C5C3EFD8E1BB1A17E8296
2B1D7241A835CDDFECC3A6EC447DD23D081276F873B4A58A7CC6A624071AF5B2
6ECFB73BCC7BE0BD1D0692F04AAD7037DC35D00A5892AF9F005812E7AC67C295
E51C18CB957E57729690F492DEB4A98787000BC26CE158AD08E292D4C2EC5489
F2F20CBF2CD01485D42405C9C245923DA4E1FCE1B1819AED74737620EA2AB453
24B1DC329E73332991EE5743A7D4B5C56797A66FCB223880EC646BA2E6C90EDD
C8ABBB8323DE560509EBB6F6FA749D0F37F7A6A93E29F117F33FD442F1057092
A2FDEDB32E01ADE9F3F30221AC0FE096F9E78930F9E2BF2F0D18DFB8B01DCA66
87DCC3E8CE33F5428006F2E83D954EDF14BD4AABB5C553A23C7C82C1C2A3D8F6
76BC152A96E4FBCB1C0D293239D92ECFFD71656108A384BD57874B71662828B9
35799E49FD6CD161807E3BB9149943623FE139302CC2F8A6D49AA4EBC8936ACE
F5778478438801CACE908FD56ECEC3DEB20CAA4A51EDA0A94C20716A185003AC
9068F7273209F3E4E79C37A046C2B63EA33283043B997685CC40990F04097C64
8C32ED64A2C07C474E45A80B4B6035B8B7FBA1D2132CB56738283140F207A936
F417973CEF62B2802CE5B7D3D20A8EF3DB494AA584D137450D42CDEF8B094CA4
2B4A964C11BD4F3EE5DEB3C76926C587CF508BCFBA1966C3326653595E778CE1
5C4618A267AC867343BCDA683D8DE239293884F9AB212B9E07DA7D844A6280FA
5DA23BC59DF13E08692F01F60495D5F421D392DE72E862609582A7DD2A358283
B02F6DCF9905C7B404A874B93D4D19F3E7286DA552AB0CEC564BCFAE9910FDEB
01F9D993EF12E16B27C0A65AA4D5CA5A41B203FCEE9FFB8CE111D03CBE0B2CBB
DE99AB9B4922FBF2448887BD38446C021C984B417712D84D944DDE73C949370F
882F1854B2C0261C8E2373D410BB276D12BFB3F9533244035319A4F58FF86AF9
B2A5B3E2005FCC1550AAB100700AD01B5D3D0DDD6DF825E21FB01978011F3B24
6EA81DD9862504864108E01C164C84917E1198897CE161C4267E462B3EC5E036
E493217A1FADC8F0B8ED10356AFAF819446A3D02A0DC0ACABC898D4378AF2721
11FBAF518E53D801140218007A649701C9159BB559578E935E22746277BF6C84
3E0494615B532ECB54B4EB12097AA905A3575D52179D3906EC1928B13E467F3C
0FA12125D057AA30DCA79004D45EFC47F706A4E6E94A5CF11E7E393930678803
6D4580CA3FF246E7428F227D8ED1CD61A4C9BD8FFDC37DB47AEAFEDD0A12CA08
8220D7CC2B8575130957300396FDF6D986D4658A9CD4713B167BB82CFA7E532B
EC8CCF6F6BC38B1CC2098DC1233A913BFE998BBA910C7BEB3333E52226439F4C
FD53B3254831D29B249151A62E5009951D0ED57F835A66445B97670B975F0716
C8B23951FC0E557B5B889CF89375E49B86B6CEBEA5CADCCF39EB220ED558C10E
9A140F66E7F6189A20C8FFB40BD6AEE77FF634A4431D99B716CE2FBCF069422A
4E37FB03C4DBA43555F7BDFCB35F13FA213C1D22AB8C5F24735B73BA1E20A2BC
352D4F66E115D1BCFFAFA8F7DA29D692AD7FC24EF6040C315719ABF3ADBAB11C
5AA31EE51DB699E590865580CB14555386AE32D44143FB2B4A7A194422621CAB
C726468E58D89A160E82062C6CADFAC4B7394EDE76EF102EEC593AD3A24B43FF
05F642E019DF01675EB1C828305FE4AB2FF26BE3D65FBF726EB98FC7CB2F4609
7801657A2BCD40444BBE217A7BFBDB08E5E9B682E6E5893742B2D313C7A30C65
1CF2F07084FE7F668CA56DD4F0CDF4CFB9D0779144EEB2771C0C6F2321C587D1
E953480A666275A6FCAEE7C29C1C3C026FC3A8FEDDE7CA8221B58C906FF6DA47
72E3B56BB0998F72F69951EE8AD978F3894D45A6726F97D5ADC67A764243CCF5
08910D889A73D435D31EC2D91A3D04CF7682DEAE9BF95302FD5D67D9015C1D8A
E12138641EFE070EBF829D2168CDC27BA02E89D1FC6171D734F5BAD7A77E4990
C467D7E43E4875B82F1CACA8491E2AC9D2AC1663EE1A7DA786DC74F8AE350091
DF747A14409E3656CD435AE4280828AE7A64B4FE13C8BE5049E53B58242D92C2
D40FD8E161DFB3218354E410354CB033CFAB8FB64DA43E077F5CE3D475949B1E
922EAA2BF5DC4AAF1DBE8D4830C6B6CFF0135B9C7ACE01E0CB11B3D59D82AE58
9741CC47BB939D10F4671547F6D74901FE79CBDE11FA7F0AAE08A64A05DD5125
7104E890BD48A11AA163BB5171A7B1E95F26A0F17077C187449649F36041D971
12D96A27F65415FC3586FAEC4394218112988415331A83DD927A3D26A83F807F
09CDE68F1B06D8F91FA9DF5D39B350380568E486DB5D57149B8A656333A08AB9
B7D278A827B50E95B5FB20395ADC874C9CE570D747D213D0B65BDA126395318F
323C354BC338DA24FD00F3C49FBA6EC7E6EF9C0F34F5AE07838D47DD23E197E0
28B547C2C11246FC3101661BF7DA6AAD87ED7C47B597DC134727CA7332E5039A
2AD339BBD5AC9C3F725F3C5189AD00EAD5300716D6D3DB05839F3F0DF5CD6159
C123005B9E3D53EE7956E912E731E9AE96DBF0BF3306E57AC8E62513E9576E25
EB201C38635E6E7E07E3A0105D36BFBFA3BE9C8FF4303078420D7A45E84A5385
A85ED111D694E14104BEBB25BC76D1CC0AFB27FF6703567567ADA86E020D020A
0EF442AFA758E4A4FF4BE14EEE288142A34053333535345573A6BBA84BDA8ECA
E980DF1FB61EBAEDAF2EE31A035A2C4D4B7473F78D3905A600374E867F28BD81
54A9ECEC231E4DF69FE23ADAB2894FC7DB1DE2007E8505EAF712FFBADF90F6AB
6C0613934349DC7D1A48540A555B1680B4CA98B501DDF6EECFFA62BB41B46BB2
1425643AEC23DE90889F3B4B88BC157F84BC7A28F36BAC0146F7445125A6ECFC
E7385C5698BCAEC73155C3275885620061EB8064E1D7A1ADD6D312ED303E4521
EBE8A73547A52C86599F0B5E2175845A11A4019977BDCAF9065BC4B273C3E5D5
4C997F68BB46CEFC257092A3D8EAC329C7C22CA6942F282E7119CBA36EDD9216
BBE875478EC4ECAD8291D2911E7C24D87709EBDFB03B1E95E71BDAA2C1D05E15
0E9C9B098CAD2CB084863B20C0EAA189C40F32F62EE63551F4CFD3054045837C
3962C5F6C853A8E6E3175812387D68CA46F466528832F5C0084C308FAC7AB6C3
FA5E935E282888B3124A1A6441FB6754433650B5FC812DB14ECFA94F23FF1255
7EF9C645314BAC0C3A34C7FBDCC3BEBAB775CA7256EA875056173E2356B29BB0
A4AD86F5345175681B9D6219D95F42878A59B111B318B6F64D8E4E88E89029D6
0CC11344BF3B66DCEBC139C263A12C0D9C06DBD23B8B1941089ED35EA5DD4A69
5BE55E9F4AE6B8C726AADB702C4C9E5B970CD407D440E4CA364C88D7FF67C49F
6C47DD89787E7BC8D22A858900900305A32EC5BECE4D9E98B715F68DC46E2A57
4FC783C8E9EA1EA56AB0216244C238E602925FD411B327D924FA04CC25685EAD
53A2B6ACC67007AD9B56E6159F41EA997A22B5C93C144FD17EAB196752712617
092D7531CFF77A96313E46871ABB2185979CA409D4DF68135EAC6129DD40E495
96D2EFDFBA9EF073318429849F3B991B4D5F0330D243811E31CFB8099F46C846
07BB64963271C99502DA2D2D008D4DBF284C7678D53845AE245CF4F60A91CCD9
3902CBDA785D6F519EA6612B85BC26C04EC43B6F8AF8CC9A032B45D12F40DFDA
04B82A78CB66930182C4E4503F4C4959B69C147577B01E66DF7373BFD6B5AF75
6EED05EF4FE6FBBEDABCA9293BE3007990D64DD6120126DB722DF679411F2DAE
9C92593466E48D26DA0DC9615FCDA9681027C54844E0AD1DCF42133C2F9E6F9F
4E0764F98CB091B751A520DA8FC0F1F425D2ED292FCFAC1977EEEAD64B946855
72728D59948E6AEBDE51F03527100F1CF28AA2635CC8EAB5E5A44CAA2AE9398C
07495EEF88DA89301B8BD206EB11A0E6DD09691DB23D1DE24E3161CDF1FFC160
B95D2B0EC2BAEFE36FD4BBCEB2923E0FF48B074C063D7CB8A0DA3093AD2A97EC
89851BB82F454AA724C6726B6545893E467419EC57DCD53878E1AB4EB2A93D61
51C4EBB24CD0CFF4DEA1C7F69DDB3E66D65A32292E17E71DB7F1854884FA788B
3BEF484ABBCB90964EBEBCD99E69A7E2F51D0407196DCB67570C079B9BC62CD3
ED6FC6592BF04F37B9BD4DDEA87671D80294DE34291EFBE79F40F2859303A65C
597DDC76E81B8FA0C4468830302DACD8D2BC4326621A7025B5627CC1D2A2A913
E1020B20F7AE782FFB53336654512D205AF4C97A76AA262527B879FA48A3A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39829DC8A2ABDFC584BBBC8AB8932CB
FDFB9FB917139ED02FB419CDEAA892CDB606C133DAA908377AA57FA5E2A16FE8
F9DBC207EDEAA72C2F7D4B7B7112BFDD1A5BC950F254FD477654C63037748411
037887C4B65D8E1DBFD8BC7F2661AC6E39CB510EDF4CCABC332ED1A5E5FD49AB
7955B7A0C9770887DA7B5A123239565BB1D04FA90E615D06A805EF2EA704243F
B382621C073D18FEC9D5FFE44F8C791C47B490C8E3D8B586D529D30A9E40FF7B
C1C8059928ABE24544F41569DAEB26F1186A550FAC789DC46BAEA1D028891BCE
072BC4077D5280C8337FA283BB4340DDEBC4D256E13F78F42DDED30EC42990D2
D7674A62EACD13CBBB381247F44161A0539A035AE3749991DEA439FBF139A16A
553429E039046EFE39B6B9B33D252B140142EE927CE5E607C1F2BC03785EE94A
E63B97F0E34213A1B0A55054B02E9C5BCE6B0E9B760FAC62828B9B2C3BAC419B
073E6FCA10420F989127A04BDE01D71D3C32869196A7C486DD1CCB62FEC5AE72
4457E9628C077A0C7218B75BD86AE495A872463510543EFFE5DD50FFC2FCDAB7
133032D62176E87C9CE253A193BFAD2575B7B23BF4B47D1997E6DC26B83665DB
71ADF03DB565CB3278F5B72C3E42823F4F7EDDA13852C3D2523C98C6613FBB7C
5DFB870023C31C1FD013E274504CF62EE88454734AE583D443130A9533C9769D
375E5A0DFE646D603F49A26F9E5F210B120CA7EE5A3EFD38C40BC343C18EE38A
6E5EC1E16F206873FFBAFA03266BF0D28259D561A56EA1DEFC0D6891AFA3D1E6
DE83FBFEE99829CAAAF9FE809C13BE788C42E74A8A162BD9BB26137253BA8B58
1941E759A7CA7AC42EE55AE3ACF0B696E4444DE0BB3491FE84A6315E3725A28A
20C7E32793E2DDA8ED6D90F8041298B7A4C1E2A2D16FF35C3D8F5FD37B1D5760
3AF1ADAD3760CFBDD46FADABA26B5433D34C2AEB076031841EA0296AC711128C
794F77BD223CF144C0FDBF1576BC1C20D6A4CA7FF78D906699CB9C2B43FD2042
ABADEB88D3FB46627EADDC9F2827BAC12E0E45B310AD8C11FEB1DE5440585524
AD00C04BA139245E95B76F3695B0BE5FEDE9A0B810C0D8253B244EE74C47F8B2
0547A2ADFAA6E40432CB09DCCF5C286D5EB04E5A7D952E7167268B30DF26FC38
1D8D871D0D96566F0E4910D1712E7151AFFBF5AB2C8A5AF1CB6DBF0B027ADD1C
2409375ADE1F82292CA07F3948B726E9D3DC6F3AA19E84CDD50D789E56263362
340FBA8CA49B9AD210E2B4D77B4553E8ABE6A6FBD131E1691F749DEBB18A5B5B
90DC695349522715A6B6AF951007027352BC7C9612CFC105C8BDDBDDC8BAD0B8
7F3BA50D36D20926718FD37D86663C2F134BB4B5EEA3039CCD3F02DB45E13804
E3B7B4E4EE45019BA6FF7DF40D9FE58108584C65DAC1D387D9CF2FB4A626EA3E
546717AE6E23981338327681221810546F0009F98531353C9A8EBFE7DB9C9A1F
83F6E3CC814D6844FF1A23AB32B521C1A09010973B310CD03A0ADA22C6863683
473B13FECAED39B923980E1691F99CB068EC99B0F5292E5450773EE1769530D9
051181315AEF884EABB76C5B134E7E0185E7D5929C128293EEFA925E555E77E7
2F0216B34D71875B4FED0EE2874DF99ADFD2E19382CC90DFFB25E67F6FB762DC
D3C3A8C76F4F6F7298116E7FF68A8348389D3052344BC6AD77FA9B4CA05CEA57
E184293362DFBD0B5D90A7909896CBD0A038B6BA98B6078C9FCA1556AEB8E16D
CEE96FF74BE92989C382E8FAC254F543E8D3E7146C9A0600F9A0BE530EDDD8A9
01220A971045A9A8FC9239809D764B6036E658222897A77DC3394593C5B714D1
EF72E72786BDDE985D872823D8DDFFCCCF5ACABF850C801E14FB8153C749EF79
3EE03A1199D0A9EF4C5D26725C6A658DECFF150A9D0FD7AB1F56F507EB972BCF
356EDF826023098738D40D1E2F1976A39CB1DAEB62F9F7729E6E985765D126CB
E7FE55D3E2DFC75C0F145FBECF6A2D130D4840A799889CB9DCCD3FC716139294
FDE93AA5F2D8120ECA4E117C31227384B1C5B443F68FF78E4CACACDB36B7C4BC
FD26A7241379C2955D9BA1921169B16ABD7E4852648FEB205E020B27F5307E54
B6F4A4858CEF9F21FE9A561AF418FD9D6B8576F8DCC579206AA9F21A1C50D38B
556542BD5BC0BB3EBCE2E7C56E180C73756CCDAEAF24840E6C6A01AF6C1A517F
86D2C6190AFE9B31BC89297D17D4564C28040B982EBF82D0914F7C33F549D305
58B5E8ED6D88D23E7530C2BB5B2FADC5B34ADE0644C0F54B03AD9E14CF669C7B
38CB2D16EE53FCC59444A3FDDB80E6632FCB86E990AD1C8A0331513E0B6F2A90
442F6791C4741A0ED35AF47FF40F2DA0B75EA8C8FB72576304008495771DFFCF
89E918F1702F5867DF3636C4F5C221A18AC30E1CC4C35114DEE607734D0910C3
0DE2682CCCDB283F082A7EC77AB52B21BA9B8D4A0B9D7C5926D1B554B27D7667
FB385C61FFD25725C9AC23F19267358C01277ACD2BDFFDF6C33B5F6934EB0309
218D450C2B313029FCE2CF0251EE1C689CA70589839EADD20F9A8937CF51FB16
F1C47539D72BA1C4B1D25AD3B03234E859CC8B2A72266D6DADFFBBD1D06ABF2A
905EA2C1A854E05F9811643264D84794B53E78FFB7A45A990CF0F174511A28A2
99E8106180DFCDA1E7CC4ADA95093D064B0E6917561D7DD13F68F7BD1366A3E9
9D1D6124A3B4D95382B4EAE5B353BC6D9643E64B8A3796A3043842D5E8D3C026
93DEB59FAEB3A14C1547C6C46C24FF3513EBC971E0EE222D4B369FC3919EE24B
8CB02E12CFFC2AF1BD142036C87B6AEB753E58DE961F654E12385D1EC21D1A91
A03C2377D779DA1F0DE6FC09910A13B23860D75CE377E967E216D0BFDFD8EFF9
C41FA280CD6F62F72BACC9B4FDDAD562E249FC2F1392F7F378BB1754A2E80DE0
D9F16599E907FE5C491EDD336C6F661DD25A5D56725C7732CC830280F33CF486
D55618FE6BBBBA1457A7B9AB98F76F6A94470FC8ABFD342B6906A5399825EC88
4CFCAF1811F2A2BA4CD7BF56A6A10DEC60C98145A281C544F8B842C9265E8ADF
DB8B4CA7CD4E69E70AB0073D6C92F19F6E0A1170816ED400EFD373D263AA62AC
5F6B517959F2F94382E4302DB3EDE6A964FBB99F8AF170A5FD7DC048F85C0B2D
2810B26906E9E6BCA2757CC7FCAEC0C164C6A5D0E6D1814CCB0EA56FF036A434
FAC6E77F6A0B96C34D21C73BF7B55D769E02B6E09BD7F56D0235ED49576AF71B
A6A38E10F51F646E6A282516B7800BA8ECBE1A671D3C420526F9A0BB461B4C6C
0582F6DF048C0037592A5AFDBEB9631776656663828AF4AFADF09D8FCC074085
D3EC4901E6A1582683A09AFA8562972C5181D180B9BD26EDD6D2075A3EF22C10
8F4E44649AF6BBFBFA1E09D6B8C8131539566D7BC863F004227E862427E6DBDD
DBBE101270D15AA6590DA4E9FFFDE23B9AFBDC82C3C8FC7641CD8C4B451A4376
6C89DEE2E639514CB1CF6E1FD870D2A628392368D68C28ED60CDCE0CD13F54F0
F6F9BCF0DC2BA3169B38137F026528F5A2C526F147B5A3E7FB5A2572B1FEE2E0
E999C6052FB2F4C661672919A4E35223FA2937BB5AA042CC8FC0A8317E7AE5CD
3390D061C2FDBFDA95B4D949450224B287FF05556CDD7FAF7FDE2799170E21B5
9E05661E646D8173A5BE71EBC504A63CCB5FFC3569911E100A036EF590EE09FF
D84314D9394E0E227D1243257B02B8CAFF2AC2FB7868A7FC61E6AD2CFB6EB203
E65CC1462B7C3E811E4FBF589BFD5C15D966FC84C490B04B0CA0A969E41E3F04
FA629E2B6649661FBA1C1C0B922F821C28ECD4340F6C8EBEF4BD16060B9389A7
211AD7173A71ECACCF4E002223D1B4ACAB454C6CB74F0B3E87512A6237605D7B
E1D821C6FC022FE1731DEC1CD1E149C6D8FE899D287AC34EA039D94933409D49
1DB422E2CF38247F553154D22FEF718ECDBFD7503A0750027042AE2827F172AC
4C6B37FEF23A47B5A4038752E723288E6C559819F448337E748995A74E9D3DE6
0DE90966B9A2828946DE70F22F8738FE52A7252C221F88F1846293F4F56DE1F8
963CADC84DA9CE87D81D4F2306F0F4CD8882D55D5723D5E5514CA68BB67B6D0D
AD8CC299A8CB22ACF60A9294E3D854243B2D272CF5C16F0AAD1815A417E04377
715BD2CDC00635411C8F8802574F7C72914BBE9E892BE746547E35CDF1465C24
9CAB870818FA5CC7B9DE5158ABBD215534DDD10D943833A0D213E955D2550A1E
22227BE15D33B938FCFE2DE44EF169F237FF87C2D340EBF5AC170988E763C2B1
A931953CB0EDF31C3D1675995DB61CE89F8184AD68C29359BA34A76C8D0D5425
759623A9EC97CF7C183FA6844ADA6C3E83A31369277E9FD612C7762E866A6E4C
83D0AD28B58A619844BAE8B3FD4009BAC6562AB8309895AA3F6C1D805FE2200A
5873FDADBBE53F14CDB6F5079C10E2B962DC71B1F613DBD74DE4AB848D5C8A52
8C92C8225AD84F80F8239798DB5F75ED2150480DD677F5CCF1CEEE6350FC773B
D1D3D9675E23EBEE3478352EAA05DEC5A67729BDEBEEF0934AD0C63700B4526A
98631477A19FE5E16BC289EDC69939DA7ABB6B1C7AAA577848C5DA4B9D780DBB
3C1094338DABEB6D84A0136B85A552A80AE3E6451C0622AB8ACC2E93B1551E75
0DB24390D7F0804F28A5DD4C3263B5D810DE8F57625819D86D7AE834D7135E30
F2EC0C63B8163B3830C989DF40F9ED122BE1D03D9328B13965334076DFF12DE7
2E6B99AC66A919321FFC39B4523710B82E0E27702BF83306A0C3A89D9AD2A517
E03614C70620FA526840EF5367946F3DF67C10B47377A99EB966610A4FB421D0
79F3741B296A58F0D5B4E47DECF583B5CE7F92D2E6F78D08128C27B99705F112
76660C3F6ECD18CC7FE20FBBC297B1935A3A5DE94E8681FC68428328474213B4
FC74A1DBA9ADC2B4D6E38CC1F7D36D1F00FE8D7D3382959C18A903DF75F4A3D5
762C29295E43142D4CF17763694941FB4E2282F97FEA50082B956F1457E54212
907A0811E8EC4075D24EB0682E7602CC252BAF075A9F4234B7ACFF3C578C6363
014E8C987DEC8B3BFACE967FE85F6072058BE81ADADF5A3B4F927CABF282C205
B89E4132E2BF7FE56CF6503EAC88E8B4F4DCE65152443D05B3E0C76AEFB69565
A7B7347B45770125B5D86C68E6B62A581199E65B1D8E5F59136D8FED9BEF89C3
950435FCA4597AD76B6A7DCFF860C3CAA881B9D885A0C0FB5580832196D27869
EE01D169FC58F743CD16C8F0A690993F8C15A7E232176C51FAE62F81C3D8E55A
F010FCF92C891528A4FF537B0B85B7EB377EE389508C28BA77CFAF4745DDEC90
7CE0F42652CD47E05FC7565793E8665E1581310C8DB07D33E27B3BA7CDD616DD
17877C265E77F708D49AA47248A9C2193D8003DECEF9D76FDAA33B1AA9CEDCB2
1C2A3B0EA503661B25AB58E9494F503B4CB5024B73C130A7853A78B912859424
AF93DB66C9EE07FCAD6181F82F434EDF6558B665507B45B50783C0B7F2B149EB
C1EBB02C3344ECF1D538637FEE65804AD9F47FD5D09FE551F142955862BFBD26
9418B1FAEF148615D78265BF0E0150053C6C3A56561C360675567594570C1D1E
194D5602761EF93D1D7DD752928AEEA1E61BC9AE1093546EED14DFE8D5981F69
68FE648FF1F57DAC9EFBDAA60B1ACC4627E104C1456DEDE5E0FC00A2509E14D9
A5BE53CBFDE07B162D1D4FFD4692CD8E915D11A05CE124A4E833606410FDAF95
8DE213EA8230F0AF49C0A222FFE340112C6C063B2F9FF0F89043CD9EF07F9D95
7AB251D62164BA463DC07140EE243E46D03CF4D270C2C6037CC365F8B761A852
76F43C8598A66A0CF1DBB35482658BB9D32B03BE83E191E0A86BDB4F825D18AC
DF7E2D344284A17DEBA187C8407C106556254A8A71F70C8CF982666287346459
4EBF58A0B38A156331EEAA0D0BC5EC0005DCBA60B400B92DF30A2BC7B06C5679
A64DB5E1CE4FC658B8D7EDBF8D085F082F84A35063986A42B547E01DD15A5BF8
28FA3BA2E3A39502476ADBAE3D9D97B7EDEC61DF2CB89CCCC1B5422E7D2C8513
35C54AC440688818B0C3E73DF25106052700653849C02805E1C56025C68ABF9E
AE16CD83AA19B621749E3F10736FACA7F6BE9694300841AF0F3A67E1E6093BE6
DCB400BDF8C5B29E4D360972EEC0BAA7EBC8A05043E18E63517FB66E333A25A8
7D78EFF8A0D27FEF34B60223FC6170F5DD66C147D970AE464E0B88E5C5DEF5D0
A094FDD4FD1E74329214194BAF79410A422B9831F443C48DD0E5B0B2C42BBE59
56B65C1280BF19FC952FF8D47D06E578072D7CFB63C67DA8F1116935AE1F1D0A
982AB1C0D49991267DA81ACFBA91FA58E49F57376C1D61036AF2A021F912FE30
C7855C59CF9E782CFB09DF52F10FD3856029CF6567E25D3EB90ACD0A2157892D
65BDA098161F82569916D47AF24E4C7549D9368741A55397560E0BA139DA8B29
47D5C3C6C486658937E811DEC0282EE3D0E3C1A31AE20063D57C1CAA5CFD9004
575AA9F1AB91191B962D64DF825B24792111F4B06818ABDFBD6266DA984CE4E9
71296648E8AFEED5D3BE938814FFD31B793557C5CAC81C8B082E81EE08E8A799
90E53335AA8F57084E3E077BD92A3421988EA0AD8207120FF35E760AD363F6F0
9B66DCEEA83512FC056DE08CF3D0853660E2E82BE420C38F6B56168AEB971AAB
A03EE2C4F614E59B395D1D9823D7D5F126D93214B50A300F1E28EB8F78745A02
DE46B994E5768BCBD4A5C0925507D42E81E47337DCAA2F7C8594264A6EA23E30
B3A8DFFE26C4608660ADB1585D75CFE24AE35F45CC9BDDDACA4E1264EF0894D4
5EEA552A958A5E014F3A686D4B70F86A1CAEB8B735C214614FC182A80EC7377F
7EBD25E42EAFDF621FBD84163C13A65128994D74CAD21F2BA380381221A54191
27E391A832F3888DE3257BEDF187741FAE08C5A3071152823274A655747C9818
C9E722B70AC64D791F7478509623114B059BDE45E06DBAAB8396B470D7D675C4
76E7792B57EE11F02EF002DB3F4900B22B2F54A0ED08636CE9ED580E26311769
27E5A6C12109CA18909434937B2703445943EEBFD15EACF4EDEB082BB0861F0D
51D90F63043196BAA257EDDD055A37FC3D5A6F2BF4E10829D59D8CD75108CDD5
C40A6F65086B80EA65DA2C3EA0C98C9BB1216EDA7BC3094324CEA4FD5A951824
1AB8669D367C6FF13C336537B67F235795800CA8EF1DF5C228B9DB6DEAC8754A
E29EAE5AC87616C0C26855C6E8C8BC40FC0F4228F77FFCCA2F2F7CAFD93CA182
B25A6570D995F4154FDB773A7D9E29FE46E464E602CD2064B8EA0E8CDAD78E42
F9D49AE24D11B9B064801D47F418AD49BC0BCA3E40FF22E495086F99086BA2DB
80F56C0B30E9269796032ABD4C90337D680985AB4C18FB39B1F0382A01128706
F71D3A9C29B4295B55CB4C6F62668E67D22B1FB4599FE5AF10E3513D141C31DD
7109BCA7E9DD256C7F23E21C499ACC7B5B6A1A3749C1342AF400984A10FE56C2
AB5B6E22B801EF92E483A2B5ED9F240435313420692E464DE4CD3E76C93397F7
998AFD5A64D6903C9A3D410E8086EC1A5B402BA96E89B6554CCB395B0DBEE893
2328D5386E95896163D0EB54324916232BF441A92595E818473AC05D726FFE40
EC0335374CDC7D91BCC87A394A093E36599605A7EF3CAD09AD5ADEEBAD678B5F
C60992F80A916C9B0F9340F6C78747E608B3B71474C3E0205E0BBE039E05E283
3378762504B757BE89CEEAEC56A35B878719C1134B1DA6B14C860141DE2974D6
4CF20AF491CE10C53D272ECDEC1C574EE68933D239BEE3B790E1D778EA2294E8
4A32791E5E96831E704E3700C49E10091FAE714F63A24AA98A5781F2DA450527
7FCB0D067F058809C206D19C54BC03C10FA55CD7BE06259C56C31EF2B8E056CD
AE4935075FCB35CCF7928C6E76B038AF7593F65FF2B22AEDB55728E97167510B
82A07ACB5ED28FA1E9FCB1CE83942637B2A6BD6CF81E311E139CA93C9B8C01ED
EEE3271B46771A3374FD4E524DD048A6A2075F675536A3F0AAD19C2EBD390AF2
5F8D94F7D47A1798199D542502CF3455678E261DD2E5776CF059FF67E1BDD3F5
A6455087145759F387B2E8551B42BE3527F8C9D7F9F6934B3D8E7C4719D0C3B1
84E4743E04457B56ABD8AE83CD6836A2A624A32128393B9D463EAE365D513528
65D0BDD0BA604453176A4EE3ADEC52D32685757CC9DADC195E944C609836D5F2
BBCA2C170F3042F22DEB8D151C7135AB91D977E445DFE0E7484FB30B628295F9
41E30A5D2EE095E913774CF132253C51B9E6E27E63511004A58EFD38E707FB19
B2E97528F74126A18BBC64A9339472A2311F9C77809C0F5FBFF0300C0F8188AA
A87D4A69365579571DE66F500A75420DCB24BFEBECE6D77F004F7DC1CCC96ADE
0D02904BF3E689B2B2643EE645ACE597058C23D84C0FB8BAE6E8B396D944701D
7ED06C9E359039CD693DBE128ECB081CF766695B7647FB082F67009817A28C28
1C3EBE5C2C46A6AC2854462A7AFE0A974AFDAD1A5ABCE8FA93A340D6FA33885C
9B9DCAC6ECA33F35F17BC136551AB9E354C905FC9C5EC7423FCC457B16FD9FA2
606CC3C0740F437DF5F1B361E2AC364F66AE65B5B3D05416E7635B913406E7DB
2B5F5DF1B59654999E7AEBDAC87D5E25B998284A6F868D9A6F9FD263F74BE929
89C382E8FAC254F543E8D3E7146C9A04A33F7C34829903FBF1D34D8D6337A32D
5F06CA5583D456A1B3543205DFF5A31866735EB1A931953CB0EDF31E962D296E
3BBCB4231674EECE12A1E10E7805DCF438CD9EB27AC1A10E33FC1E611BC3142D
4A9B58F97102E7AACDDDA79577580F5799C825BD4B9786473E2C20F6F8C83435
DAAA559BAC06FE38E3D3AFB6B950C284946E38EC08F8D941EF5C3B1C10287CB7
87EFF59E86B4A72A199E6684134925909155C60AD3A77AEC843DC75C97EACBC9
D18C5E57E07CF0A0966ECF94F269208FB8CC628570401BDC5B10C476E24A4FB2
8E8DAB6E2F8437B384E23D011C45EF897355BFF6E213E8B7FBA1F6CF98CFC60E
C531659895D1014B39441A15A6003B39988E6D14A40F26EF27E640F776F1EE9F
81371ACB9AF0819EEEEFF1853D601717E57F7DD45F7724B451F6CFC8748E8D2A
EFB2509558C45D836C1893A1463C96AF729C75B5BA3DFD65E2AFBBA08E488D59
6E212FE0A67ADBC2A0CD63EA4F9107687B8F4C08F359CB4473250995CB6F5DA6
838536F3FE0D979C80FA6FF61693FAF103AAC05C4BE35E62AE2E8112562CA3CD
41B29EE521879E4FE07A9BE5700C1367B3D9CEBBBB1A69877EC2E790D0E6C923
3DF8DDFADD039C013821DBF0E61093F3FBD296A576EC3B622DA3DEAA4353AB9C
FD0DAA5FA394260A3496C4C35E5FAEEDE6A3DF250F567605AB2800530F414B89
D4EEC51F0CB7E9D9A86146AB7202F91D76B565BC0A760A0DE668232978D1FC43
01C0238281C41D9387A29171C53E99A6C68B84EB9051C938D2E656A1292F7205
1FCB9B24D117ED792DA48B7A334FC4DCC1467C38F6BFDED12EA66033FB688FF4
C0EA4086CFF58110607A91F8615190DCE9A8F87B4EE44DC08C6E47C34467F9E2
C9A038545B2C9E6A18CACF57593F417950B52C9CF390791BF3F65C1031B15490
89FC76A5718969CE7950969557336AC8DB3B61E01D64D56E8C4D65851ABC614D
A8C5DE3657D1A80350032D19862612DDA1DBB7A7E8EA484E2B9BC3B4936126CE
A5662629D66AD941F7B208519979ED23271B6AF2288430995CF657CB2E37F78E
4E2174E4CA868698A7B0FF83E348376C2354CE254F66E2585DD7181AE09F38A8
152E34920B956EA0917F873D93D17B5F45A358A7A162679E52850A292A011566
E4A5D20F55666D0C1357B0953D8E9950803E1A58423532D3EB9DF7477A180FF3
D6F876D5E3064BB81E62A49093556A1DF4CEB57A1882F307F0EE099AF080659F
01DDD5F7A76DA1ADF692B8DA6E68C40FD16885A589F6E3EF18523F07BEF10B0B
B14C4D4DE4F2AEDF89BD895789B58577C2A05B4D68FFA0100BF564B3DB31B4D4
445DFC402883F1ACBCA8789AE0B8896B8B3A774DE18558D3B5E4B170469C3378
D351024653D623663F0C3CE8A596C32ABB3A7349CE7BAC7CD903D0AAFEEB0DD8
B306E7A539950ECB3D525C0F83815521202FAD111B1E7CC95734273201E5A6D2
3CF1541ABF3B301F226510EBF89944E4EC55B788329B50602BAE656CA4B90BF3
E7B1D0F320ABBF26661DA6A7C2E6C5ACB12FB054A7F7E2988C00C40F91BE33E2
55DAD15F08252EDF5979C14C46A1ACCBBC648C9B09E798C85AFDA5331918B4B0
19B338AC46D63880EF5614B56F8E0190FD4FA2A0A6266B9A9511819D1F2CA93F
51EF690F901A50B84441C4DB391255574BC6C5F36EF835F3A681733DAE65FD33
F5535C1235C62F5FA082692BA6A396F42A330D1B6C3619E2C081F4DE7D2AD9CA
46631EE1F45A328D4D4CEA17E02BAE7A41A8435066154ED619B7A344550A1D33
ACDBF5636346E0A2A60A0D4E9D600A1DEDED6F24CFC1AC7172514CF1F4CC942F
4B9DD3652C529DA22A5A9F0AF66B44344F1DF681219626C9ACCF0062627895DE
ECB32E5BAD12A1D11EE312E98686FA8F324E2AB57D00D2AB94AC15D29E63BC4D
26CE4802F05FF32ECB811357F69CCACACF897A7A1B155C720BFE11F48F9C917A
16AB20AEC7563535886E28292A4222656CA652FF07008ABC73E686EEBC2C1064
5F2CC8E86EFA29589D9538E5897256EF93E55E3119ECA4FAE72F7554F6DC0DC9
C6175EF0A6F4686548EC650147C6C269FE12289B11CE71D9034EE8704CED9534
746FB31E330BE53DE326F9A99CC73A8823086354F120209525EE410DD0FE5F5E
B06A1720430E0DE1278C559D42176DEA4E100EA1153702D04DE8A06DD65D6909
629F782FF974AFFC8100E87BEF9ECC22B5D7B4E8E9A11D95EFC71B5A6C6EF7F1
C15FC4086C4DDC5626F8096F0ED00AADFCEE0044B158D44AC9F45190E73B45F7
8AC1CE5BA5CFE547A418F6F39713AFEEA0B92BC6D1851F9133071CFF77F6B7BB
47F308F18343B0E8DC830511BACB7F2255206DC7521711D35DD86F9CAEC0D5C3
C68A433198010C94B88ABB8D8D02087545812C8E9EE7A622F66300B69C5B27CC
34FCE070E772ED4DBD5A2DF213D85A56B1CA85DEA53ED0299C18E7B22A76A177
E4C9629776782C4D11EFF6063FD1B74BCA1773E44218A69F41A55F3C8296D12E
ADD820721F4B44834422D0A94B0B67068836AA1469771E77444A470CC17A4520
9973E0142B0C866367FD92E407301632F4E5E1053965683DCBA5BAA51ED9F1F6
01F0F088C4C285920753135C3A2E737A9DC43C228782BC17554B290734AA2D9C
A586108E04BAB903A27ED406444AF8B04DB5CFF8C1FB65C3DC78F1CB1154E63B
1B89213BDFFC5F1C26E3DB670596CC91711D12A4155E5D1DCFDE9F4ECD69FD36
DF2C7AE02B2539F6DACD88AD99A2B686FBEC34A6F9EC4705E23562352D63B00C
E64E574010172423BF5A5401C964BCD370455A98A239D58B788D47EF32CCEA3A
2702449A85C1C7E1F6B3D953A6FE422CC55B18F85A93203D45833DDC80D805CF
E4868E62C90C06533AE6C9A73E834634E69B29DFA844C6B2085D6A445D1F8776
35AD1521456EA35114D0B8D5DBFA2F1CA5C38629390622627FCB4A1EDD96A7DA
AA193CE2C271F8A7E2F7706FAD28430F01D0E9ACB79888AF725FDD44F3B23F8F
BACF1E5FFBEC238ED6FFDE1C3877469E1E28DF94EDC5D3AA4B388E5100E9A949
5B072911CC814C19D53B95DE0071E3A439D652E129C5526F99362C7693B01E7E
CF132C62BDF74FF9B7E87D3B39BF4BEFFF935B48590EB00726C0670E760E5A23
1843E1F16F6C67D01B97392F95B302B8CFF733E372B55AACEF937632E8E38364
F3FCC08853CDCB028B1CE68B48B40AD9A7B337F96CA3C6E1D860526021EE04AA
0FE5889DA5E1D5B944B8FFAAE19B188C5CD06352E7E56F6AFAFA9FAADC31EB42
76D688354BC5F1CE123DC8A59430236B15BCBC0DB53FC2C548880DE426AD26EB
F22772C2B4A83F47864D1624747054CC3E674581B8E889616E838DFE4356AB5F
2F38D70FA75397E8127FD3D47DCE545EB2D14CCD6F6EEC6B703F4300D5557019
CD90C60B60CAEA24B0C9920CC4A8F933F7D7E71505B73C16EAEF395FAB01C17F
7F53615F79D689B6B02532EBE7733695150996B78BD1D5A73E157AECB9F3F59C
0D736946734BBF79E865130948DC92813858A464130EA68615B1B71A79979A8B
5F2E4DF2F0E9273EC494E37324F68F2914E2EC06E8728B9458990C7913426DEC
6B5C057130D3F2F5DB6B0EA766F146FB68007DDC9950CA2C63425D1BCC302CA2
5DA0713E92EDE9E4D41577EF58AC70B402A4427CD8220B13F44F655AD6FC4095
5A3EE68C16EF312027D107417B5473B3DE1F4A38916E55055891BA976FCE898F
18AA2169DFB86A6693CC2CB6FD995D95B1FED23A9547DCB00AEC09B7B7D697A6
CC355BE29D6BD5706D9F0A6CCCAA8321871A09D6ECAED6F3418A66D35D6940A3
FB517059D1EECE54FBC7B5A887C3478EAEE8720CC128DCAEA242B8B7D33B5583
9F745424D22BA34F1BA11FC742A486423C25F8D3E3D79B6AC71A3913971C253B
5A055B93F596E7C3F3F02E3B8751E078517F614A52C9CF58B499F22E7C6EC024
BBCBDDA2519088F3823665B10806DB02FBA0707B0A9B94E0BEF9D47D21527A3B
1D808785CA310F3560EF18E5C7FE2EFE91C42900EBFFFFBB7464003BCB709A7E
118BA9C5900EE7B1E8CE89A55C0BEFB530C7C62EF7F7EF76DFE5D49BF413AA1A
5444502CCF78BFF5ED16E6503D4DC2FCA7AE4C781A2AF6751AC2366302A19897
56D54BD4331E99B92136EE97A6F8588D8F6CC97A0A35A8F06A7361E0635EF78E
E2521C2A29418764E4E0B90D2F66BF8B28CC148252E90F6E7536E42E562D8032
0AD93F1EF73F820B00E188F569F66DEA6D6D320CC018D4B2CD12C56C7856D4B0
ECD4E415CC9290C79FE24F1F8F350E5893F1942DEF04E981DFB5879B9FFDAC29
EB7836096DA5585F9EF8D12FFF1130B63D78F0A56D5902AAB912D757CB6EDB44
AE4BF87D2B397F2CAE33909142C78CC08288519739BE3029B530AB99921E6EB2
9842A5B221DED91C1A57EC7ED634879371972B69D0EFAD4132CDD1B9D93CD89B
84F14D18A2C653EF52DFD5BD5FA826A95FDCF3C1DAA7F1FE10CDF6C081F3345B
B234239D34279A66C235D83B848E819175C4E9E5718AC249802208760C1D09CE
83D67D926816D58D4E2306026405D970EBE3EED19B705CE3A205C3F298250755
74FF2D8B1042DE58337C8BF61AB70AD1C6615B51881FB83E438FA71159232390
A95A7E5AB85DA35A4A00452DBD61ECCE286F7D11984CC3287761E54228CC345D
7C5AD72C7EB3C42AA351F897E55A395DF0E9989EBD4CE838CCEC1AEC33A784D8
469A62C51134B7EF26D10EE05685EA4B31E5396C4284C148FF99AC5E8ECAE123
89B1A302E16B7DB5970B85A1E7D816BB65D88A7AAD93961976DE90E40187EA77
5CC1E76F093F2F1386A15CEBD69E49C8FC7AE15E6B5255957D6F27A4FC47E0F6
6B1018EB89CA320F74C91902C56330BEA29CBE661AD52A63710E4F7D1BD8857E
C3B612582083B323A31BF1830B1ED3BB924EE2CF3F5C7528E7A50BC975AFF4CA
62754B465E1238245E283972604E3D5911C991762C0D278229448995F2681C34
040A107D9250F20382EEF9893042350E8125A6FC1CC6271EB7B2024B4B88A923
049847881947ECEBAE94FA366C4D482154A3C09606B11BC67975A2DA68BFAD52
10039E61598ECE5A0703A9768824045B88C5088B012E82869A09552C1998045C
ED19831A142A95840FC5849DB4C1990E870E808812D8B61202F272844DF92CC2
8D8FAD80AD511F464AD61EF8CB892CD8541D4066FFB88BA2EE4ED4246CA0155F
5B089B3D9EC972D59920550497162B435DEB3C8C4FCFEC8958430EBB1AFD7F47
CD6129B2FD9FF30E64CB7CDC3ABB89CBB4AE7B8AEDDC17BDF457835F33BDEBAC
1DB96E11EA44D35D45ADFCD296F82FDF5B7C98854899BDB1396B948731E7908F
16B9080FDDB4E1E86D6F0ACC65A9E09964127BC951DB04055489DBA72C24342D
68B5C888B4E95974365DF26E91230B193B4B81FF539DEDB60DA16014BAC309F0
C45331C30D2D0F08BC86FE82016AD52A068B60B0D5E416338C01F79E3D5B88F0
07C238F4EFFCA857F0637C887394DCCAECBF0D0BBB0FC95E6D10FC979DEA4AFD
BA5634D0F9A03669CDB735FCE3DF1DFCF78A42BEFEB1F9A6B9E975BBEDB6B48D
93829E1EF56B8AE2CB8D9044E83F34871821BB775CAB9E07CE851216340AE5BE
39BC8B34ABA43C56795E94CA0E98771C8977B1F1FF77E418B725DE15B4AB1C2A
D57D04AB9C6CD31DB50E420B78CB31597114FE6088E34D60E7880F75854EF98E
481C0062CDA6EF5CD186C4D58D2EE79752696C97B0D82C1477ECD5B63BEEC3BE
41F7BFF286A4AA0EA3945166E86EE0CA366EF4D77AC4A8C7507F874289BDA096
3D940737B8F68E06D232928F9460E609747B76F1891F26CDBD688D35EB9C1AE9
4214404822A5481455B34EDA4DA743B14A9B0A28212B9A2334253BE8EA60D965
CDDCC893A46BDD72E498B517D1A3CC981A8E15E72D43CAF3A0213B2A01213218
4E3A04C294DF90B8115DC058CC4CF1EABF2B11775929B129676612C77A23C8C3
364DAD8E407319772C9B201C49B26448EF586267439F149549A6615B4315E82C
359BF2EF8130B1674D3DA70BC2C81185D99C11CD132102B38E42B3BB9891B3EF
EEB4CE717E20AC53097759580145C36069D5D6C83B19D356CB7ECFFC7C008C67
04B930BE7CD52635EA83F61D2749F96C258BA7FE8CE6610925F1CBBE975F1274
5C67EAAC2C6F5DB56BE26E391F1CC88B081A8363AEC9DECF5D3B1479B4F542EC
A56AADE71AB9B86887429594E0C015F7CD4C2378E532BAB9685185F1D150C850
DB13A9796C1EF50644E1164CC8F8EFB765F9287908600C992C3A52093DA1D6F8
9FF2652453807C9DE6C60E8B5F08A98A05DA37D8F2379E1052BF55E259FF5600
46E4CA3EB168D886DDB3E6C32AB88B306419D2AA111D897C1A7B79B21D134D9A
BA595921FD4CB14956FDD62FAC223EA68FA82E6FFC3B053072021B5070DD4255
004E58158FD99D6388BCA97B2982DEE6404498564483A32405EE7023421C6F51
23C5D9022ECB11D625026F716F60ABD4E00D7898C2A629648EC469D7CA9719F5
EF6ECB208D8F1122C799F51ADB7281ACFE0DD55F68CBCF05FF7E9C92A9B905F3
246AEC0CFDECB4FE0FC562564ED0B6A26E6EAD61DEB08255D78936151C5462AE
BB3EC1131CC000971149BCC7B255C4D9FC503218D76BC35C1D23DA9D4C35FC2C
DAB2AFD1402A1C811948EF8047680F5F00015C13D7AF0FFEAAEAA107157CBD3F
E39EF1BF02552581C14D17A5958DB8D39F93CF52487CE3867BBA2A0588C9E939
38397063369355B9605EB9EC40EE4616E005963FD363F7B9F48FDB274FC9B5AB
5F925F7641F7F3894C81554768C20FA34208D6DEBC100BF089396EFBC22A8D0C
5598EB372D03D26986E16DE1E3B4F4246277511E2FC575A04AAEC27AB8A8026A
725FAD74637490BBFEFE09037D981E9E7F673C14DB9971955B62AA1D058E9FC3
655D51C7083660DC62A000A3BB8F41FCD64EBD7F6B9DCDCE6574BAD75FA4A777
7ADDA704BE2C2ACB1816B36823F13ADA4A5625101FBF1BDAA99F1F5BC0E51BE6
27A0901B900046DCBD3A74769961671C0F0FEBB1652E44B1110DD8E0672AA87B
D20CBC6B4FCCE6124785EEADE1F0558980DF2027B4FF34591A7ED88F3896C1F4
0F1E43CEA6C904D6ED6DDAD42EA92F17018499046316173C3E69F47405BF0462
B14596130968AFB5284AA776CDC3942819204B312DF7060F086B4D3A1CAABB2A
29D93DAB8EC44A721548D1D15E46DA68B14FF28B55E34DD20166769158B1B01D
619C77A98990CC4A3C78118C51DAE9C696AF037677B5F2BDD18874DC3CFBB9F2
FBBAA42B8F6C0801354B843D885D70132EFD6002B1A3654ECD99C9362B079EFF
74E99136FC5CE00D3CEE3359E1381175446EB1AC183B716106BF4A01F61CD173
C088D6B8362CF2656B46F14799CD98B7B9072A35E1AE36A467337BC0917FE7EF
34D5906721D0BA4E409FCF9613FF7C29D200489B7ED9AE2B329FB39E06D96284
CFC51CF319C4ED3557DB07F7B8EE81AD36E509DCC595D09538788D3BFEAFF84B
19A149AE0478BAED0988228D56F068D2B7D25EA1CD81CEAC4D2982ED98260DB8
43B7660EE343B19B1B013F6C9CF31F2CF814AF647D202E43551E98AB55B117E6
1E1DD574B3F65476B7893C129D24C8D510620CAC5A48633DD5334B9A9DEFC173
12B364CF55156F7E90807B0E3532539D0EB865F5628C7449F305AA32C66A20AD
E029C5FE002F76B1C671474B04B5F9B9E5316F97C7138C7D3095EBF2715DB97E
D779846885DFF899CD211C58F5243C4E6488D2D3CC1C56CF7D932699EB038884
F9403E4CA13D3777296B962CAAD17D2EA7F56F0144DC30E33DF242D5C8C156F2
BD25D32F19DE52A24CB6219DCC78293A2127ED650587AFAE7FC3F17EA5653A84
75A02377BFACAE3316135FD43231FF4DDEB812D9B58FA8CF8E922DD52A84F7AB
21F6E2C8D53F35023E37321AEC8998C9F0FBD8C2C37F4E4805528AD7AC4266CC
ADF5182E7DB4938266F18F7C2B8810D01F7456C58AEA498BF279BEDB0CA335A7
A8676A83FA6E29AAADFD82C6585E084B83C219F4FBB1CAF8E7A179628E590256
5EE38D5F437D05098088C044D049E9EDA646051AF86E03D22C944CF66BE4C73D
62F3882F8972427A47CE6545C645BD55343162DFA9003E53A7201A4F407A3341
53274C6BE2C3AAA51CA48B5C3961C11FCD67E25C3AB2D25A3DEC775DF79C7D93
8E029ABEBB1B3FF7BD7CE7B5DC6997DCD4D71D91534BF937ECB9E299FAA9DDEA
953E047BAE6558D96B96201A0255209A47672B2772D16B611CB2320556100105
1A26F319680DB37FFEBA7F649AF87AA556523AA6991F6EE897A838F2E1D7A860
5CB9B576F4A07C53B4CB1B91F60C618B3388F739B2C1A064DCCBAB9C238F3064
F04C6C0364BB56C860875790806480F5C02A3B5CC089C47397CCF4EF48355664
8D9771358BC75BDF3807D0D1E119D267BD39CD6D786CFC73BC4F61902E43F5CA
1BD469375DEE9277881B033ADE3A7986B1B725F44FC2E3160D6058A4AFB94A1C
7D47431770F75819E79DC1799403D29889C4A0EDADFD1F06925D97118683D2E1
6089FA72462A06B422EDEAB32EB95D5C4BBA786E0FD1FEDFA811655171A036C1
8FE10C45B9134FE6A184A396BE460168299F7892A711C1B56CB5A29F919EDF28
20F810A129D41264A039D4B882FFE5D7E305A01C6200770B1A84C068C7968AD1
6ECC7765C4FD0F70BEE9E7C87504150CECE0D45E10BD736B633C8ABF38171688
28BE591457E26816643192F6AB4C4265A5C2599F55E134AA4CBA89C83B25EA44
68506521BD156050A1B532612BC4C0D404618385BFF26B2917B281B96411D1A6
BCE56F54451BAFA87F8C0B1E0D4B958B1569BC30F9CC9621362D9BD92DC891C9
0E3761A7424B9685E6C0F4F47ECADF5DD0DC900C63F85A6FBEB8ABF6EC4FEA32
48A2C28131B1F889588F380541C130824BE561FA87212728C19C09232F7AE51D
6624C8B15D84C4B7B1898B44F3BCE71C6E4D3DE65D88CA60D30F9BEAB0C838D4
A8B9872AF546AB78693C639B5AAB5D013CE6B3FDBA7FE73DD949FFDBC1EB5419
A9DD28A2554BEFDC96EA81EF0053405970223332F61BF1660842463FD6E80288
BCF0F0D0D4A296BD3A75A2F670122E31741E8E43863360AFC636922454246DA6
3A560DD6B991139C0E5E413AB51A0AFD77A7BE808E03EA79F13A7F1DEE4EDD2F
F441DE36459987DA7428A624A70CC693EB3D73D54638D68470531D25A47C1AC5
8EA83CB59917B0177C746BFAD2F6A21099FCF86EA0B92B6211147A3CBE3BF365
6D431EA78CADE546A60E293CEAFC08F7CBD5A8F9E658BA3BEB0D5B7DF994A67F
E127A823F2B82A16026F9541FAE7108CA386CB77A060B5297FFD888CB9C34479
A4006741D824F7B5647A4142CC009B07C0449008B367E8F0A80FE7EEB65A1176
933BD38F0B4950ABC2271B85B355D08C805017382056E51F207C02F2B6086DC5
B183DE52EB88CFB13C6B14C2E0913C81F4810BF1CD93AC6AE31A2FA117BB5675
16C9B27F48D09D5385BA92658B5C4524594DB8C909FCA56EFD3546F5E38D81CA
266E621F2D21847A702489B28CF62768651196F757C2B9357230AB37C02E1203
39A1BAB7493AE33853F181E041FF8923FB82D1C752C7499C54B4784DF9896B27
90CCC6554DA793044AA4A7F090ADAE3FB781C6580DBECF4D6078A97CC8C165D4
7371FC14E56AAAB01F70AD759647938445008E5FDF9C86DE6697E60438DA76A0
A508D8A0488BE54C4E5A1318F12E614AE73E51EF48603F4053F3CA25798B3017
39E51DD451D8071BF1B58C840313AC9029E75397A39E769DF23C1D07FB9A61DD
B92EC67EC42FF5550922A191239DE0D26635EF19DE46063E625CE290E9F6A471
3A85443D4B789F3B59014EED2EA14FC14D05E2040135F55B4293CEA23A485254
0C18E55D53341524C72B318CDF89CA4C8584648CF71A7673A1A001FD65C01449
676E6B6989A45552627E01C2A016C5208B7EC4D0CB90F0D1DCD755B727936319
0DC57F6E76D883C492E890228316162A20AF3D8CA197EB10B290F201874D9DE7
F43FF60993FF317E2A0B71D337DE2F7E98001FC6639823BAF2248AD544A48273
795FF8EC6F39CFF9EBBD1C557EF9C645314BAC0CDDBB86036F34026C908C5560
2299B272379CAE742BB363329912AA9C1E303A1746FBB5B21690F3245564F4BF
BD25721DDD90A29DD297093B46D90CA216A79221E17FA7C20448EF693D48BDF4
4898CECC2091F8D43484CC453EB703C2B2784740A2965564459C7B5D453E54C3
583A1F2E074FF1B534A87823EF980F2E1857AB2363B2F067D644B8AE2BFFA485
4481DA7C5782B87DBFC1B7D6EA74CAD0B37FB0E0F8442AA6C0EEEC7430F20FCE
1F834D77DE631A039A30ED5C683A9A08431146321C3EB53AD2DBD4A844E7B307
71CFA7C4C7EDB2B9F46B82A1C852654E070919A734F426D447CDF8EFDCC1C8AA
92340FC15EFD0858970DDBEBA58D71854ABA6BABB05B04A446312B6B86C86983
C4F6C7A55DD17959BE6CE86987E8F351DAC8A30D0B0703ED1DA57EA50A0F2BF3
4E099DB9469F000C3E087BA0640F730871D275927415768B26459E68D82E8AA5
359BD89BF3F0FC1CE332B2C4FBB6BF9AFC7D9E5827299A90FD378D8C690C5447
DBBCE0697805F97F0EFEBE1E4C951506EEE5CA31B692B9753803027D8C332256
DAE678029CC028DB4B4FCC351F8C78E4B9A0F49AFF1B3302A64232D15AE1BE7E
81A562A62D12B10ED201A9F11280F66BF660B5F3BC066F24ACDA6C7E7E141EA6
D5BE95838F72B032A7E5665E69EF5DB91E4BA095EF5CE0D6D75198F2C51758EC
CD4CE6AC4233CD77ECFBA47BB9A69331C0EFB1062D0718ED72E5E5AAA77A4B38
AA93217E0852031A7D7F376CD8F6A9BBDCBEA397E35C7F91ACB16A34F85EB36E
54F6CEFB9D80B8F2ED1CF1F2D8B81ED20CEF43E22E50D07C56CB44956A20D269
EBF1C631E78ACFEC540DEBC9C262CE668B1C101C1BE1EE147A8E48B772DF89A0
5B09D90FF1AEDBBEADA1D2A3DCD6C6D50E6919CE1C310239D0D094E51D3C1280
DE60023973114A728CBF0AA8C4489E239C17E34B89E8018EA7C3F081F5A258A6
C41B6250DD77B4484495970372520647FA07B7B6A0D06F3C5A9923AA703FDE11
085F477A93B93BA8E0E0B086C29AA069A41EEED25AABE4EB6F7C6FE1F6DE8434
EF0873207F170FA02F401D58EB63A11CBE7BC4971DD42E53AD9A666650BDC91A
9098F8B15C95875E1878EFF95660F387AF983A7F3B4281E8BF1860B4AA3063D7
595196AE12D0AAD31FDA5B5B45726FB87D2EA05CCEBE68224C43C055DC0455C2
EE9D2CF5270EC61642A71CDD4F4AF7C95F8D0D0356EC46A4E7754D3BB9B25BB9
A929283621035E7789963D9EE29CD932034A3C0C79EC41C88EED4E3F8A886E0D
71274D4127EB74D33FBFEFFABADF197FB3555776BC84C2BD120E81F1651AD574
F516DB8391DBDC4D7FE8A7AD5F41ADE1BC82176A61D42023DA4F47CF4384F921
6B8E07B7117AC6A6000FA785B966F2F87215158556BF97712C13FB088783F01C
7FB18036E3FD3CB3208BAEA9B26022A4645FD10EF79CEFA8560D944BB2B155A0
62E17335DBE7D295F6111790C553D05DDA5CC68120D1944CACEB04CE3A194D0D
05C3E52C23571C437ACDBC56D765E2C7F61226CFC5613463D8AF68F930A75A13
9AC2C2C6486DA6F0A23020B2A08FEE1D2646CC80C1D9CD90E6AC2C90A9CC09BD
75CA78426E0BE47A41DA637A1ECA8B1973AD1E4D18ED0D684DBC64B1AEA34424
6D87A0E530353ED6E04E4143720B4A424DCA2B4A1EED5D81F52BB8299369078E
03BF9A1BCE4E44B4BA2DA3ACE7B900150A7374920D6F63770EEE3797CCDA89A7
A52E476B322B43D601DA540CAE27CA6E332E04C5457D5C51027FFD39B9380223
DC9394655FA3843276C3B0FA8289E1E340C5E32917F7845360E003201F690B0E
C998116D3C5CF133FED50133FD41345C5F23910DAE08D73A6D525C496D39AA72
83D43FD9ED89B8919A64A1217FE1C67BDE0D385104C7C0730BEF94DF3D9BB216
1F9A9C445C23CB74DB2CC2634138083C5E9E61335967832ED4161FE963519D37
F286071E64A1EBF0CB27E7C45BD0E8D5A4C5C5973BE0FF9102C6183F414C6BEF
A2C9648DCD12B5F75593562A72DC214C83A560333458DD227E655147AD5B6A8F
65BC17C850FFE3F79117E27C3F716B5AACFFCDC5EBDBD65BC0C71F34D050DA2E
F821C4634E28BACA47D5100544044DF914E6C29F0F1E169AA7A57B0628FD8C05
E5CEA28DFAF4FAABFB469C2367EB56D3AE0C1F09BAA7693B3CCBC8BE6E4034B5
0ACAEDAE9D4562ADB10702F7667738D5DF0DAEC2FFBDF432F8A4FC13459A4602
CFA5EAE2D3112D43FF22C4723429BCDD7DBAA340F4B45490CE22EF906079DDD0
8FF521506BC85C6107E1EA0897B4F8DF63107CA946BF97F48184A0C6DA3377EF
6253A3295C9651FAC6871362150C3524E59F42B8586A0FFF6BD2983A840B68D6
56FC15842D694DFC89BA353D336B3A86FB04163ED364E9E1F6D7FBA93AB65FA0
443D48C13DBFFC7473C79E92B06B2ED120DD45AF1BC235736A1350377FB06B4B
E228D599FF26230A2913B3AF6B6CE3D1B6A8B2D44252634B51B80A2A0ACFBE03
8E1CFBEBF39873EC7CE54E159281F86E24EE026D335A2D31E65BCF3BEADE7CB6
4D36984DBEBE215533641C078D269916C34095298EDCFA5A017800691DBC9FEE
451B10C7EA710EBB087442277C82DC37F60DDA9A72A9032780E060D84E6FD581
D261CFC7C44CD433F0459744429367CF4603642F810862D71EF5FE64AE3584FB
FF4F845DEB226DF86483B9ECD6FCEA6DE11DB23032736B224A15234A114DBEDA
9F2679B8893D45E26BA8185B0F7E752BA3991CC9C118E4F0040E4DC4C654B31D
CDAEC57F2B652B98C5FF8FBDCB0104210D64B30E2FF3C39D2AE7EFD62580AE4B
C310A1EE9748E6177179019E68F1E806733008D50EA8F8443D443431828453C8
E8B3AAA4853986043F15602A346C1667DC625491A42A8BF5D93876AD65020F18
5B10B98514C1FFC6EAD7312BEB7AF06E6AC2BC2058C407F125EE256A951D8CF8
95A44E006FB414A0E5217C0F69D4D0C42D85063F79EE76B68F6328A7A52E8F44
CD9D5F5127D99FA2132E6C41628AC3150F9FA7ED663B305FF97E0E67C3DC15C0
E44E8010F5D4D89D7B3692837AE695F08C12A56EF81F36DE3C68165796EF8466
8EF494D17A439067508590BA42C25D0D6F49D4591FE7CDDBFCD51A4E1260CFFE
758ECD59EAE9ED878D0022776824976B790F553FB24087CD6504E6961B63F20A
1D466E5152EBF506F0D50391833BBC2230B8BEAA3ACC278AE2EDAC7231BAA719
B92786F098949D8C3D82E14A097E002B5FCDC1B9E7775D3F365C784524E0BB5E
C020D5D3F1241E39637EFDC805B266B494001747473ED6CEA42020FF8BCFDF1D
312FC0FC0162F47FB4D8D9034DC5D70BEEBD872519D89ECB766FAB70ABFAD26F
89E61707336DC579F770CE2937CB185B4D33770EF2E07B6974D6542249244EB8
BE2259642C943BB5E456F818BD729B794DA25184CDDA4958F9C9892C91CD6C0B
452822CBE54F4CB48411E8B9CD0EE418F274BA87144994469B724EBB697EE62C
2A2A65CE330E80517256C2ECB6269D49C448561912B93067B327601606A6D5C8
C3F294CCCBB0CDA26C7C0872EFFCE44FC5224F35829B3986C68827F3A7E41BA9
9D9AFBE313E2AA15FE976027B15E24EC8B8568CE90B9BFDA248AB9968C77CFAA
50D23A38BAE28C339F98F7294602396C1F01DA7B2150F396168D12EA5E6ACFC2
55CA4FB61CBC8CD4FDFE38433A62D0A89710C67075ACAF89DF61C1C95925DBE8
A7DBD18A8B9AB974DCDB1891447ADD56FB17F5F9A3914709C3FC1A104156589E
0980EEF27FF33ACB54F0A6AD8849F98CF9A70AB53F388663FDE92797BB16CF12
A44DD6922E03850023D0AB8671BE3366206684D3DC14147301572DA095AAC5F9
FEA137DBFE341C4471AF4F486F6D8509486FAC939F0CEDEE370BE125B89BEBBE
8DE40F3595F4E750B348042AB69518088D2756D1102CE3DD87627B13F2313F33
98B49238168BF99EEA1BEA72A6897F5696C1A7AFD25A202EC956E94BF6F70B0F
F9D74FBE5B04A00F1D2AB62602E9A38ED4F22DFDB20C9718671A02955055C424
035142242CCCC3BF224D4C21D1F3E034E2160F15F3A79225FB98E5732484C6FC
1C68D71437F71C381E4D26F24F0DF0D44204E2524B171BBAF8DFC5E5E913E24F
944DF0E71A1F3A16609E7BE31EBA87D4CC1A7DD250065F3ECA5C4583845A6E0F
89C9EDC63F471C354D26C28195A1F4C4CC623B30B076D4861E84A8685ABF4755
42648A4DFB65D7AD4E0C08A5B355BFF0DD49945C60523BC0392B050B9540BDA7
E41941A3FCB7F35DBEF081A0222207E864C7F39773638E3BD2FDDA151B58A05B
12F842F1D6B9FD26377E37FECC26324BACB98957387DBF7F59869CC9A2D5E699
820F4CF92C09C7BFD69B2C18AFD70D490F20A4305479A29C6F7C694517265052
F0F8FBE4B0AC369070B3EEC04549DCD60CB7B23075AB55FF06BBF51728AE6724
360C97CE27BF0DDC5510B25832862141083A67AE2001F137F7BBC1C5B6821792
967F51A2583CC1F6D4C1D2E5EA316A091C458AD39666C5904DC83E3B37D07E57
1957BCC050B841774BC20AAA62AC7364A56FAD9DD85AE2E3CDE1A4CFFA3B0123
98F653C312B5BE83B18FABD32654B2CECB901989FD377E923A4C87FF0E44BD61
90F8D9D5E20B023650E88FD119A61B77DD572CAC9C73CE32CF16D59A88DA6DB5
F22983E2CD134B72D0C92704C1097001BDDD759C0CD4DE5554EDAF64C79C4E7B
77F70EC00BEE834AA6EAAA6AC1C3C44CD71E21CC2C1E619079CAF908D9C17F15
D490A70F55BE1A6C135C1123CB216D707BC9CB285E6824592D05C21DB7C059AB
EE3E36E4F1802942F39FC4902F019D45C242E4BF8B0E7E4A5D4288F95221EC48
134A0E0E983475F812A4C16A6898471E46FF5CD5A93E1EF62EEA51B201D3B14B
F4775728E63A08EC0A1C9AAD283809A935DE0356C702F538EB099C5146034674
8DF6F2348D53974F36F0573D00544F9AECBBB7464966DA6D4D3C67A1F5D60F9D
4C78148EDC103BBBDC9CE8937288DBC4F96661C812D31312FDBD0E681EEEC15D
F4DA4120AE6BB7424A76B49084DAA4E5997101182C638DB1DD2B545FF4B9930D
51C5FC65D0DD2383BA5EE100AAE179EF887CF9DB2FA40156FF6E2FEEBDB88DAB
C28C37560ADB72A5AB01854639169FD55873AF44F47AFA2641D68424F6111384
FC28C5F150E6FE5936B5A6D8D1B145A52BF3CEB35AB3DEF7526DCF870DD35491
4CF2AF779A1181B4DB647B11B5705721DBAFFD72FA47E1D2A4777FE0A45EA608
1A72B17ACB7E327A0896128004F1F7556888745D8383014568AE8E16B95190F9
68B5020BE907015DC75A9513590A63CAC8F29A7A3F013DC69BC0DBC34755A509
9F0CA84BB201CF6528942904D307A292EF2BE0378196A107DAD0FB7702DF3A85
195AB6AD13AB3CCFEC63A901A9B3B9A5C5F4347471B27CEF1F940B751C6D635B
EE91E6913B5581A0EE53B16346ECD2D0B8968CA4DF727B81349C63A107E7A2E4
E6428804940BC3CD56BCB91BAE1B19DB4D0966B71F70D9EB594100C484EDDB05
F9D9B8724EFA5DE51DECD78BAC9C0E2C687D1D9AC963C8B25D3852A5684CAA59
C47CBD2124443B79DCE6C459EF3385B6E65B73F1CFD95D1A4CAF77C57F373A5D
44B6346714902B4D2EC7D8E3EFBC38B6E13D9A843489F8963D45A7BAEF21FDBD
4AAA271DDEC0F7D5FD905C59F0E7BC1EE0E3D75FC27DF6045169129B2D3A5545
D51116183DDFFFC28A1EACA89275D3947828C6A9675B8FBB5ACFB75A80A169F3
B020AD06744BAE758B478EFE5CBBAB5138D6E4ABAC44CA956848A2AF44371CA8
B9A4B93CFC0B65890982FFAB9AE47FC93E5866F81206A2595239889A8A926520
0A1AF9E5791944B2968689F186B60B9345DAC334501EA44EBA4529207463D3E9
3304DFAEBBB30D8EEE4A82642D30068F608C0A2F9EB522FB7F6A8E3CD56607FC
58349480E0EDFD4F36B228310EDA2CD6391A1706169A03E7E3760010DDCCE800
9580ECC3F49A40C1CBDBF66EEF501EB2277BE837B55086E8EE65C0A5FDDC4AEA
160F30F006E1BB2E9F3E4AAA7AA9EB7E46A939D6C253F4D15F219219825BEA06
8392E9EC17F98F324E2AB57D00D2AB94AC15D29E63BC4D26CE4807FB6054A209
28917BC496D6AA2AA99F2FD91BC4957C7DC46F5B64C90F206C9482B87517AC36
F53EAFF0911FF401DDB494A11BF22CCBCFF847519FDD0233939F289D71054818
738B957C21F9F65A1E0E99276392472EF7838DEAE9FAC30CD882C2D90B88390A
B7712AC342ED568846BAB7DA4DDED557FF9ED386DA52D10615E700751C8428DE
E0079A8BC565D2CEB7E3B896593D720DBF66CDB26C83DD3A961B2D26278D146F
96867FE1824060AF48581495B45BE3CE87BD6178768676BC55537815C433B113
85F8462D0CDA1D4BAFEACDC3240E7562AA10DF6AD44CB54A5089A5478F09A350
08BD13AC0F04AEF9D5FAFD9E20AF59DCBE1C4E27A628C97A8307C47400CCC6BD
D00D747D919429877A4FDB25038E3DB47C371F184263487447A8101460B2D9E5
13FF942A11F23CB5180297498D0144712074C37EA7432985E8EF4E98BF1D5888
DAC41A3D9C2190DC1D987F2D63018DB16A626A773D2452687D3AF6A81D815ABB
1F31A89E1F1F3F3712315F712F70E9CB19BE5A1AA944C54DB9518F931EB97DD9
D881E50D83D5051181315AEF884EABB76C5B134E7E0185E7D59DB6F965706F4D
D2EB18FCECC2FE44C19959DF9D1404A57F7BC10197DD9E18801779FBC35DDB21
AEE1379237BB274BC69CA661D52E82F87A0C145237DBB0175FD9E47E70DE1CB9
F5B26AB52B668256F3C8A4C480391FE072A14326A0A7D04FD05BC1821215A28E
5663D89FD17ED05868E556C18D0866E97EC8F77D6F54DCBD09321B2E2A253AD1
25B82674AF983FC223A55FBF610CF2B349BC85D94B5C171A294A2A7C8112713F
D13E42984AD8C9E71C31D31FF6D5157380CB4C687F9D7C7A9202649079091E33
FE3A23E68BEAAF6D3BD817FAFCFA53893D1A325A4C1E1DBAEEB2506F16043931
2188F9BBFC753A9491E1B70FADDC7800CF62CA2A0D6EEEB97C9509C9294C6FDD
6D4FDB75FB0AE3EE6F09B6DAB80FD9B553A5206ED35EAF92015BF312EAEB8F64
77C070216FCDA30F5723F772B1764D9E2C9CD6BDBB8A48B57E30DCC022B26EEA
ED59B188DCF08F2838AB571D07408FC790D933E2773A6A3C584457B1565FE029
3ACEEFD2FE0CA35B333D281640515BF9C595EFEC75E3F1F0A6E40432CB09DCCF
5C286D5EB04E5A7D952E716998FD0E6BB75FD52D81EEB6FC227022120BEF4803
811A27E1D1C835F495AC07199FA8529BD3DE570144ABB01CEB13B6D793749DC1
DE6582BA2C0D362395D985CB35E1F1CA84F858F9C4B19B9AD0AF82DB21E6F3BC
CCE3243333F02BB66EB727253F9B5E45A5F6ECB7224FC5E7E4377C6E1F717DD6
5F6A274994CB9383DD12D2896B73C164C32DBBBD09CEF33DD42F9126BDCEE630
2A65591D0EF3D501D901A4EBDEAFBE9FC0E68A1854ACD148EAA06651933D5F65
054CB9C77A9D2B76586EB25C06795D12BDCBC20B45B7356973C2FBABFDA96B41
60DA342B14BE2EC24890684A1465FEDF4891ECFCF5CD3D6FCC75A63F17A3C4DC
13E2FBE104EE488385C954AF46D90692B49F7A766B3DF314F1B24A651DE4DDFB
5A8F647CDEF44ECA5AA01BC415CCBED7AF47448C6F34C6A8ED4630A58A2C73C4
D7DAAD0AC6745916FA18BB7F7D0DCCCF62D091D527646065FB2FD643A7B82B3C
D8138BEFBAAC4411B52392A0D9D91816A84B5A0E61B4A96FAE7439D74DC29EBE
A8F31D89BFE6D74D11AB2D2D8E197A59BA2BC1A5B1352C55DA151719BCEC7407
A248870FE02F00F8F1692EE0041E54B33747D285F3848BB9FD0FD12F31C064A3
C4B043D1B33BAB8CF7D678D9916169393F84630D51AF810549A8CC4E07EBBA65
99DB6A9E6D157E7FB615FA653AF27A74D7E6936425CD45C0A5A4197BA038ADB3
6BFB0B0C5766DC60E2A8E037290EACAB5FC3D90C30A01449D0F3E8710543E098
CA65841533DE0242731B79A1A82CFCE9E179C7CB5B20DC64095D442198D9D530
581F1C40D357C8F24EA96F553212C06967548E00ABF534D4380E4BBC06FB4AD0
FE2E1DA96256A9C8141D0BA0CFB68828DB11F68DB01BB9C93253B6FE669654FF
2F57FE5DDAEF20A803C1EB4C4A1E09D4671353EAEB628E09FF7F84DFAD139136
2961160C191D76693FBC62A5184C4BF062EC5F4F87ED5697146F66B9C5BFA541
5ED1D6DC627CB8D85DDBFAE74BB27AF07B164374998F867ABA7A5DFD196AC277
685D3E0ED910DDB31E7B4B4B6529CF2EFACEC94B27EDED812379B00A5C8564FC
9A915C85B66EEE33EA460AF7CB56C981B51F8E8451802D4821A82B8A241DD366
C39B170154EA2E91D9940D8CA147C1035893E2D1C6AD444D589D1583124324CC
491AA909ADDCD2D038C3174BB48E59B0F7D42C6FFAF8AA0B6CD15D4CA8C3B522
944E2DFC07391064F0916BDD424F82B5E00FDCE505FAC094D131B4C64AF36B6E
54543B4114855461C83881CDF494C2B69438440806E12982F5D6814AB8101153
8DD052B2D4C532BB6A31F1D55EDE81CD9A7D0E6D0C50C487C5B20C7F89B8ED6E
CDCA71E6A26D2E772FC0B81CC7668EC6C05D972E50A5C7FA6D03D9CBD78CF067
0144E0F0B601560283DF55429E396C9C0AF8D0AC0CE02F15E45F1353E2CC1912
BBB5C8F3CE43DCDA76D261E3F7734DE2DB7D9F38C509D91DC2C88A955A6054DC
107A810224678D17AE304D75296D037EA1AABC3EE4769F398AA345BEDD4CCB91
A7A245C4A346AF0FEA6F7664923CF9E8C2DAB8CFB4A81105C9E2AF6A8A1388C4
604675EA7384F3398E49404AFCE19B4037928CA4A0EAF113D7DB46692DDC50A3
7A73A0FB82659CABC7EE49F007589A2A08E976226EA7F091A006D239D1EFBE89
ABED3B1422A124751EDA0CED4C3D2F1D5182785314CE71EB6B2296682F1C9796
565869F375D096724EB9781F115B15915E5E2A33809D8394DDBC9ED8399B6410
5E812C4EBFD009662F1F9D8441F843626D9DBD06DB55D276767A9A08694D5372
880BD170D1DE6F2E2F162C190659D67A62E275EE0D342D2F351C2713146B7A6D
0D8C047553D96C8FA33E8E0E41CDFE8F7B9DA3660AACD877421873C28F74C389
3EB349C62DD13A54841EA179FF4245668DD99D49576E3B82026088027770565C
E44093B97327BFCAD617463B1D8D5CB6770DBDDFD8C0EC2F434478AA510FF811
AFF97366C6142BCE4473932308A1D1C8214B7ACC50373AB7D47B509A1AB5715C
96BE22185039ADEB136B7710EB00775E363FDF95D7F1298F80536E7DF4B0E7A9
83AF06FCF09E37E9D83826C7818048068108803187169DC6ECDB5EB835DF7B00
0BBAB0B84DC6868AA2E77C767901E67943792F7344FDEC2A1324ED781025D420
5DACF00BCE930F6409136C1793AAD1ECAA2A3D8FA9EFF4491899540B30F28B84
06513C7C1DB5FCB993A56941313B2A3FE4B50F3B2D61230D26B72776C9E82B12
E9D8809DEB8E04A2EA0661B96E1A4172B9D4452D29E5C2B178B121D38CE79E3A
D729E30028E43296A054894996439402454FC951E4319A04CEF2E45C67D82B81
14DBB5A40681ED8E00E63D89CA32AE0687DC232178A07B67410A1867F2DF1CA8
21C65995B9EFC114DA73DD33BDCB454F40E99C0F28418B2C29117FD2F121037B
11163FE1130EE510C1CD4BD3F70BD38D7374A987FEE1026813C11E61C89D81B3
C53C5B458EAC70ADFC54810310CB0AA3076ADEA54F1D1B22718DFDFC59EAEA4A
33B0EECF51DDE4E78B34BACBC1CBB32F277CC7C44162E06FAFC122E8F9802683
2E629AD4BD0A5D047FA11E7EA5CAC1BE4E5AD2BCF5FC26C4608660ADB1585D75
CFE24AE35F45CC9BDDDF33F2AC2302C08791F29A7831480E17EF470AA749FA5E
75BD9E46ED8A27ED6D85F54C29D524819DF6BCF9D320E18921F58EC322B1D86E
58CE46F9982113791C051AE71FEBFC185D96FB5BAFD9B0819AB0E0CE1270A2FC
838F72825122BB3360316F9612A29FE93C9E784860E50494A97135947A0E57EA
057A9973974AA074BF8FEAC4F0A1B49B3A0FEA2B8B3BA7C089CCFA75E93D1235
97254F8A7E1E4DE1C6C63C0ACEAA1B0280C4A7740C14DA2F7B6DF006AE23F427
36A00B539A1B3D810EBDDDDED6C81C898E5466779F26081CE1DCF8FCBF985B41
005EA0771D946D765F36FB252F0335FB50B3370C94D0AAFC1CEE5C12B5C79E71
535DD7B4C68A3F7946737CC8FE997F73D16A318F0C3C99B5ED5675D319124A50
7833968FC3DE641609B79E1F1932E6B6104F1852A9A37AD5CEBA8E5637AD8E40
F35181762140232E361BD15E592A884C31535448C20ADED2D0DD0BC1B80EC514
976A747B233165C20FA08F8C7BD3E0832E6674D258A811947FD934F12E226131
1E0B6B84B610225E9317EE1D476F629EAD2AB3BF6CC4C98AD947814C0D161C55
1D9613B0F5BC79D73D1C04C8703BABB88C3D61071868A4CE3C018322E9AF223B
7EA064DFCCE952BD014A5E96679ABF0D2B6F25BAC550C282E77B265156DF6B78
9ECECE1885C8B8DED75739A29DDAD519705EC0C3A425F84078E97A0C10D6AF91
2DC4ED243A0C650136B8EEC999DA93F9BE8DE421F2D9971412E29FBE30049247
EC92CD5E35949F495404A4B42F39A4935E10F10BAABF5FAAAA47A65D37407E5A
E99A990B727C6C7020F14175225EFEA39202B49F8E7BF840312068D7236450B3
9F6F363E3AB6F8FC5FF4AE195D6AAE6208F189D8CB0EF04C951E95714793D5F4
F5088AEB39EE217541A4C17DF1A012D2896DFBD321609491ECDEFB26726886A7
5650C3919962B0139409A79992A95987EF3F0C71E90DF4B27EEF84A36EBB74CE
5D2E04A335F5D403518871BFDEFAD857968CB89756E1BACC17DCBF1EB1C95BBF
FA540EE5710E884911F452C33D3D5CF32ECB811357F69CCACACF897A7A1B155C
720BFADB0D6F44EA6BD3CE8D3F778FE87CE2C2ECA811C2AF6C64F9A2F41421C0
4A609CE77F62F4630DE6EBC456E7FF3CEBF3302B5E53B36B3E59E7F500A493DE
953FA6A61915D8C5B5A6EAE517CDE929F6E5DF7E097E47D26E7AB252AD0D0031
1DA20C3D092BE8CE7B2C126B84EE04CEBF96CC356C99FF864D7F6506CD18EB77
1306DFB8454F8E34CC81CA45AFBF576377A48059E6DECA5D00BA874DF01CFD73
34623409DBC3224E615E1A621D5784661CDD396E09557EE7668528DB21619514
3E8CF31C5D103CA1E5A8899052B7E802445AA7F372F527344AB7B4970CE001B2
B0785A6C7D106AB4A2CC33E43346938178BFB8E2B20D1FB7C813C7EE435E6B39
AA70A9F61CCC446F6FD2D7DC519B89DA648B919EB362176B83298EE2D8B405DC
6512D865CE89251F14C55ED95BBE35ECCC3FE3684393D2B3178FFA8B1F91DB49
F181F0A15E0F04FD0D8236E1A5B699DAEDB801F01459540E1BBAE50115918754
7775931400F7F9498E9BB0B84A445FE62400BAD60BF39933E697A97934735AA6
D41C904131D0BAA4DC405142F20472FFC353C7A741F03577E7AA7BB45F8A4501
D71837FB78CD002E654904B1AFCA23812AC6A306720EF064573F5703F91DA91C
814B18ABD2C55F1A5F648E130039346F91568267F7C86831C5CFC25FF70C01DB
0E791C0563AC78C448029C2A638D68037014979D53F054504E95B0362D5EE714
2C7158B007F05A7B0A945045F8249CAB73FC1D660DFD69E18FEC2C9D4494056F
F407322C9B0A7995497A06C1DE695CA6AF240F17A5EEE35879A2D5106D8D02E4
13348D05516EA296CBA1CB52BC5F22604D380FD357A459A77919B16199672BAE
CA67D7E0370280ED0923737D9E046D799819D017F3C74103A9144B087A25529F
2A45F9EDCDECD6B5F690D5DCB5E5B7F8BECDA1CF7A33F99549C1A29A3F7C58E2
0F59BCAA5B12A10E023B88222494C19FC6C11E5E8EFB471FCE69347BBB4AD765
A9A179DCE9497893FDDEE3C61F3E1AC6720C179BD87CDE5459D4AA5C070E5225
5D25583C05545E7E00E7848752475E11900F04974CC248A5CDEB06A9F47935DE
C1AC1087A474CB9570061A96FEDE4E72DA9CA64413518419C43DE2A778742823
3F8377E42224DB5C15A89CE9CBB2A855BE02CC09239F560E00B5F40014FE1DC8
921C0E1EA6346294994FE065B859ECB0B69F99B1C0DAF5E74341B83B5AA2FB5A
A677552473D3299A8EE16A4433F4221F5A714AF94031B7DD991886CF00B01D5D
3349B6F86897CDC1FC6480214BE2748E7FFD9E6843CC2B2686B8CB0D63396D0B
0951011358C467EE03A993169B5422CA9311448820579FCBC104BE95A3136932
4BC2E1FB844429E9047FEB4E3D69EBFB6FDF2EC38A7FC95F8934E29A9281829E
ADB3B570FD1FF3EFBF7C1A3E397A028DBA25F4858D2C94410FA93C34B9E7194B
A042B9B9F47295C4C7DDDAA8424CBB1560CD7966C99AC938F7C6A0B42EC39EA7
4AB282BEF7147C3DFE5600F75CB080EB559729BAFB5049F156CAC81C53A3D9DE
C4C336F91FA7039FCAD474F707512C0806B9F5F0EECDEA1EE716777DD2C7C501
81F990B37CFE75B7AFE662AC6B710659F583CBAADAEB36133C452A67E5A02765
50795C2CC15F309A09F1338CFE314A52CDCD570796A084F1B4D852FE6EF747BA
5D9240AA9A61DED2E1DE6219F99438DB37A410F28224C727018867D67C0AF989
35C37F69405CFD65E851F90184CA54B674B6945DB6B1916A2D17BEC4831DBA16
03E21959DC0215CE46A46FF4D7C5CC1ACAA4BF2A26AE992EF55AC66FED39986F
50645410F3C05F14F73F215EC34D0BDA6B6332ED69CA20BB73F9C5B76C813835
2C1713477F26D91ED0C73A84246D594A9275834F2E56550B147F77798D8E5487
8D6ED036F87C009DB00F337979DA041A4D74ECDAFD9321CC37A0E80A9502B7C4
72F44474CB357380CE74535DCEC8E6C26367AD97DEE50DDA451C83E44902212D
4B369FC3919EE2EE2DD32DD6A4F5CF12E3521F138E765A6BAB83ABEDBAB6B00E
EB89D83632AFFF5293E04DB6D572880B691CB83633A9EB90E31F259A1FD29AF5
288D215FCCC9B856B5A574F41CEA60D8E1D2C64A0172C772624A8523B3F1EFA4
03A9C5E8546E530DD792386D99417639358D4D0FF42C65F15406BC58682A4038
50DF15CC74F86CD53E8CC9DE6B928307F88C799CB2E0CF87B0553C19A48F9424
7F8AA99CD2E324E8B75BAFA9D92BB0FF3165C25079AC4DF95F9FAD2D6380070C
06DE30946FE2688AF9F0E58E532056560EC584879569F3B9212476A3B3B3C14F
CCFBCA8EFDA7EA83D9418504BD590495992DB0E5A541E45ACE4778644CF230DD
52E7850E7360DA5CBC10316F6EC48063A8491C114A563B2737909CECEB712341
B3906F2E845F97B1028A65B30E41645628A87949CD0D4D5DAD636DB7FF61B373
858368E23F952420FC86607407A7D3967C70CDE199424322A572476FDE77A5CE
92799ADEEB061B539E689B6A1FCEF61CD2A5097C25577FCE1307D7388B4C7924
A367E7D3F9951A8682AD45111EE91BAE1BB93AD9E8F1812A1DB5113A4C8F739A
FF94806BB56D60E32ECD3D30CAE1DC870D41225EED085704561522450AA63EF0
32FBD9833EB5F3DE0C47F254AC40CBB2D230A14EE7B832DD09B616F7F57BF639
5A079C0224FC37B4B2187CF78CE35F117186007929E52BC37DCAC4693C4F3D42
DEEC3629EC75CD4DF8D219E347D87F942815282787594F9B1F87AE3AB6C22FB1
9FA082D9F73737C2DB33CCD366D8B2FFFF507F292D45F7EF6BBEDD9A98D298E2
BA3257FCA1EC2E1196C226DAD94DEEE670BDE0278BD212E03893B0E24CD7FB2C
F9E854F52A910E71CD2CDDEA7A2FEFCB01B35A95D0E998BFDB7EBBAC5499B64E
5A4FE3EA330103132CB0E6B614DD03888B93DFFFFBDBAD326DE98A17CAA3640E
0F9F629A733CAF56FC2E91CE877269598023E794E92E026DBE9EC6182E94D0D1
53134E9C86E11CA31B3982ED46A95FC65A07AEA45051FCE6F80921F84B45E5E1
6CD2ECD5030981C16B27EE92B88A06B069C5BB80849B85FC7AC63A3FC92E7EEE
85F90C20CB9F5525572CDBC38ED6498174C2AA327DB960B9B67275C6B36611D1
5BD7BF15A561E27BF468C1869D19F55EBF6079E355F61714551C2356DB2DDCF8
41E8640CFD5E84AA27525728A74E920C70FA67F311EA2431FD229183B1E7766B
0597322F92709CB94728AA0078EE24881E1239CB2FC3E95DE1648CFE11AD48E6
6042102E7F25A43590C6F1759DCBCEBB1E6A2F83E49FA7AFD7D698FB8E5F069A
33B8D4207E2687B58F90EC2E3335DAAAB4C518391E36F07A92DF568B818F514E
A89A32065FA098C7155979E7D16A7C4785D35042B93D19C012E9075D0B95A8A4
C4EF2439169B1640C5AF05B98D7E6FB5B12AC33B98E4321FEAF9E968AD471D6D
A986E6AF2E36A41542064443000CD1CF891BA05D43002489510FFD596CF68EDE
CC32777D04D71175DEB1CC9D669A91CFA1D60F14AAD3BE25A38A89DA648B919E
B36217C18FC2BF69792B6F93B29B8BAB5AA295C39BB35608A98A05DA37D8F21E
2EB0EC9E5118B5B469AEB236A0464B185515C5F16EEA2EC49699BE53783482CC
6B97C482D6B631195F72931E7FDC4AC2DF4B0F4ED1250E3A78D2AC9F35F6F364
F9AEE1B6F7C61AF3BBA78AC1C72FA5D56734FE9E124F04E0DE7895544B561AA3
21BD6F456A2A97CC30FE181C99C727E6156363DA75291132E1B7B1AB74B9B80B
1C439793750E4A3301C3416190B9E4FE8D377461A5F2088F0DBB39A54C93DCD3
35AEADAFAA4D6A2D4449B944FF2AA8AEB8C64F8A30CA2612D6B2095400F78BA1
421F08E32F25F9718AF463C8A77FC6B38FBD79364F45DD9E9607A10F311D7EFC
76209630A1C906681B9B503D574FE612F0FB1A4CF80B0F1BB457048ED4738471
21918D23B021DA4792A674B6BEF543380DFC8F0B7C147EECE12C34F81121B7D4
0A578269261C5A89CED3B11607C605623C29DD9D1690F648AE6D3B93382279FE
38239B52583F98344764AEF2BE823A59E241ED321DA656E9915BE505955A153F
38D8E3AE5383C636C1D7F8C4344C7DB712131F993B40F19FE018F187462B3D7F
DBF6C83695A8600CBBC77772ABB3967705424D0023ACC9C9CE2B68B41517B9FD
EC62D4DF9A76B9137B2A6B4D9657DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/WS - Wahrschein)
@start /Fa 241[1148 14[{ enclmmathsy ReEncodeFont }1
2295.84 /LMMathSymbols10-Regular rf /Fb 185[1255 70[{}1
1328.35 /MSAM10 rf /Fc 148[497 18[705 7[640 18[732 7[470
470 470 470 470 7[366 366 40[{ enclmec ReEncodeFont }11
885.568 /LMRoman8-Regular rf /Fd 203[993 52[{}1 1328.35
/wasy10 rf /Fe 150[320 15[545 774 29[261 58[{ enclmmathit ReEncodeFont }
4 885.568 /LMMathItalic8-Regular rf /Ff 168[1138 3[615
31[553 1[553 2[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fg 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fh 238[661 661 16[{ enclmmathex ReEncodeFont }2 1106.96
/LMMathExtension10-Regular rf /Fi 143[1107 8[664 664
51[886 48[369 1033{ enclmmathsy ReEncodeFont }6 1328.35
/LMMathSymbols10-Regular rf /Fj 198[470 470 470 470 470
470 470 470 470 470 48[{ enclmrm ReEncodeFont }10 885.568
/LMRoman8-Regular rf /Fk 162[361 1[361 29[1012 1[361
1[650 650 1[650 650 650 650 650 650 650 4[1012 1[506
506 38[1084 1[{ enclmrm ReEncodeFont }17 1328.35 /LMRoman12-Regular
rf /Fl 134[634 739 7[653 1[776 2[676 1[444 7[683 7[755
1079 1[758 1[762 3[838 10[963 6[1012 1[1012 361 31[739
27[{ enclmmathit ReEncodeFont }17 1328.35 /LMMathItalic12-Regular
rf /Fm 650 2[723 5[650 17[650 105[578 686 686 939 686
723 506 513 506 1[723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 1[975 1336 975 1[939
723 957 1[885 1[975 1192 813 1011 1[469 975 1021 1[885
993 1[921 975 6[361 3[650 650 650 650 650 650 650 650
361 434 361 2[506 506 10[723 723 759 8[613 1[613 16[{
 enclmec ReEncodeFont }67 1328.35 /LMRoman12-Regular
rf /Fn 133[956 1[1136 1554 1136 1196 837 849 879 1[1196
1076 1196 1793 598 1136 1[598 1196 1076 658 982 1[956
1196 1046 6[1315 2[2223 2[1497 1196 3[1616 1682 2041
1[1685 1[801 2[1353 1412 1[1554 1530 1625 10[1076 1076
1076 1076 1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }46
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(WS)717
b(3.1)g(-)g(1)h(W)-179 b(ahrsc)-60 b(heinlic)g(hk)g(eitsv)g(erteilung)
712 b(-)718 b(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray
-741 4800 a Fm(1.)p 0 TeXcolorgray 651 w(Gusta)-36 b(v)554
b(k)-36 b(omm)g(t)555 b(in)f(der)g(Nac)-36 b(h)g(t)554
b(nac)-36 b(h)553 b(Hause)i(und)e(m)-36 b(uss)554 b(im)g(Dunk)-36
b(eln)555 b(die)f(Haust\374re)921 6792 y(aufsp)36 b(erren.)519
b(An)f(seinem)h(ringf\366rmigen)g(Sc)-36 b(hl\374sselbund)517
b(h\344ngen)h(f\374nf)h(gleic)-36 b(he)519 b(Sc)-36 b(hl\374s-)921
8784 y(selt)g(yp)36 b(en,)396 b(v)-36 b(on)397 b(denen)e(n)-36
b(ur)395 b(einer)g(sp)36 b(errt.)396 b(Er)g(b)36 b(eginn)-36
b(t)395 b(die)h(Sc)-36 b(hl\374ssel)396 b(zuf\344llig)i(und)c(nac)-36
b(h-)921 10776 y(einander)394 b(zu)g(probieren.)g(Die)h(Zufallsv)-72
b(ariable)397 b Fl(X)499 b Fm(gibt)395 b(die)f(Anzahl)g
Fl(k)440 b Fm(der)394 b(Sc)-36 b(hl\374ssel)394 b(an,)921
12768 y(die)433 b(er)h(probiert,)f(bis)h(die)f(T)-27
b(\374r)433 b(ge\366\033net)h(ist.)921 17305 y(Erg\344nze)639
b(in)g(der)f(T)-108 b(ab)36 b(elle)640 b(die)f(fehlenden)f(W)-108
b(ahrsc)-36 b(heinlic)g(hk)g(eiten)638 b(und)g(ermittle)h(den)921
19297 y(Erw)-36 b(artungsw)g(ert)433 b Fl(E)78 b Fk(\()p
Fl(X)104 b Fk(\))434 b Fm(dieser)f(Zufallsv)-72 b(ariablen)435
b Fl(X)104 b Fm(.)p 1 0 0 TeXcolorrgb 921 23835 a(Gleic)-36
b(h)g(w)g(ahrsc)g(heinlic)g(hk)g(eit)433 b(liegt)i(v)-36
b(or,)434 b(w)-36 b(eil:)p 0 0 0 TeXcolorrgb 921 24801
46294 45 v 921 27789 45 2988 v 5004 26893 a(k)p 9728
27789 V 4790 w(1)p 11837 27789 V 3549 w(2)p 18127 27789
V 6488 w(3)p 26113 27789 V 8183 w(4)p 35794 27789 V 9879
w(5)p 47170 27789 V 921 27834 46294 45 v 921 30821 45
2988 v 1629 29925 a Fl(P)550 b Fk(=)369 b(\()p Fl(X)474
b Fk(=)368 b Fl(k)45 b Fk(\))p 9728 30821 V 1 0 0 TeXcolorrgb
10570 29402 a Fj(1)p 10570 29615 471 45 v 10570 30383
a(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
11837 30821 45 2988 v 1 0 0 TeXcolorrgb 12679 29402 a(4)p
12679 29615 471 45 v 12679 30383 a(5)13577 29925 y Fi(\001)14374
29402 y Fj(1)p 14374 29615 V 14374 30383 a(4)15346 29925
y Fk(=)16860 29402 y Fj(1)p 16860 29615 V 16860 30383
a(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
18127 30821 45 2988 v 1 0 0 TeXcolorrgb 18969 29402 a(4)p
18969 29615 471 45 v 18969 30383 a(5)19867 29925 y Fi(\001)20664
29402 y Fj(3)p 20664 29615 V 20664 30383 a(4)21562 29925
y Fi(\001)22359 29402 y Fj(1)p 22359 29615 V 22359 30383
a(3)23332 29925 y Fk(=)24845 29402 y Fj(1)p 24845 29615
V 24845 30383 a(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 26113 30821 45 2988 v 1 0 0 TeXcolorrgb
26954 29402 a(4)p 26954 29615 471 45 v 26954 30383 a(5)27852
29925 y Fi(\001)28649 29402 y Fj(3)p 28649 29615 V 28649
30383 a(4)29548 29925 y Fi(\001)30345 29402 y Fj(2)p
30345 29615 V 30345 30383 a(3)31243 29925 y Fi(\001)32040
29402 y Fj(1)p 32040 29615 V 32040 30383 a(2)33013 29925
y Fk(=)34526 29402 y Fj(1)p 34526 29615 V 34526 30383
a(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
35794 30821 45 2988 v 1 0 0 TeXcolorrgb 36635 29402 a(4)p
36635 29615 471 45 v 36635 30383 a(5)37533 29925 y Fi(\001)38330
29402 y Fj(3)p 38330 29615 V 38330 30383 a(4)39229 29925
y Fi(\001)40026 29402 y Fj(2)p 40026 29615 V 40026 30383
a(3)40924 29925 y Fi(\001)41721 29402 y Fj(1)p 41721
29615 V 41721 30383 a(2)42620 29925 y Fi(\001)43417 29402
y Fj(1)p 43417 29615 V 43417 30383 a(1)44389 29925 y
Fk(=)45903 29402 y Fj(1)p 45903 29615 V 45903 30383 a(5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
47170 30821 45 2988 v 921 30866 46294 45 v 921 35514
a Fl(E)78 b Fk(\()p Fl(X)104 b Fk(\))369 b(=)p 5907 35514
25197 34 v 1 0 0 TeXcolorrgb 921 38059 a Fl(E)78 b Fk(\()p
Fl(X)104 b Fk(\))369 b(=)5907 36775 y Fh(\020)6568 38059
y Fk(1)295 b Fi(\001)8310 37536 y Fj(1)p 8310 37749 471
45 v 8310 38517 a(5)9209 38059 y Fk(+)g(2)g Fi(\001)12258
37536 y Fj(1)p 12258 37749 V 12258 38517 a(5)13157 38059
y Fk(+)g(3)g Fi(\001)16206 37536 y Fj(1)p 16206 37749
V 16206 38517 a(5)17105 38059 y Fk(+)f(4)i Fi(\001)20154
37536 y Fj(1)p 20154 37749 V 20154 38517 a(5)21052 38059
y Fk(+)f(5)h Fi(\001)24102 37536 y Fj(1)p 24102 37749
V 24102 38517 a(5)24705 36775 y Fh(\021)25735 38059 y
Fk(=)369 b(3)921 42596 y Fm(L\366sungssc)-36 b(hl\374ssel:)409
b(Die)g(A)-36 b(ufgab)36 b(e)409 b(gilt)h(n)-36 b(ur)407
b(dann)h(als)i(ric)-36 b(h)g(tig)409 b(gel\366st,)h(w)-36
b(enn)408 b(die)h(T)-108 b(ab)36 b(elle)921 44588 y(k)-36
b(orrekt)434 b(ausgef\374llt)h(und)d(der)h(Erw)-36 b(artungsw)g(ert)433
b(ric)-36 b(h)g(tig)434 b(b)36 b(erec)-36 b(hnet)432
b(ist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fg(___/1)p
1 0 0 TeXcolorrgb 47905 6792 a Ff(WS)369 b(3.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 48322
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(WS)717 b(3.1)g(-)g(2)h(T)-179
b(estung)715 b(-)j(MC)f(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fm(2.)p 0 TeXcolorgray 651 w(Es)314 b(w)-36 b(erden)313
b(zw)-36 b(ei)314 b(T)-108 b(ests)314 b Fl(T)13708 4999
y Fe(X)14920 4800 y Fm(und)f Fl(T)18164 4999 y Fe(Y)18974
4800 y Fm(,)h(b)36 b(ei)314 b(denen)f(man)g(jew)-36 b(eils)315
b(maximal)h(zehn)d(Punkte)g(er-)874 6792 y(w)-36 b(erb)36
b(en)407 b(kann,)h(auf)g(ihre)g(L\366sungsh\344u\034gk)-36
b(eit)407 b(un)-36 b(tersuc)g(h)g(t.)406 b(Bei)i(mehr)f(als)h(f\374nf)g
(Punkten)921 8784 y(gilt)581 b(der)f(jew)-36 b(eilige)582
b(T)-108 b(est)580 b(als)h(b)36 b(estanden.)580 b(Die)h(Zufallsv)-72
b(ariablen)582 b Fl(X)685 b Fm(und)579 b Fl(Y)869 b Fm(b)36
b(esc)-36 b(hrei-)921 10776 y(b)36 b(en)403 b(die)h(Anzahl)h(der)e
(erreic)-36 b(h)g(ten)403 b(Punkte.)h(Die)h(b)36 b(eiden)403
b(un)-36 b(tenstehenden)402 b(Abbildungen)921 12768 y(zeigen)434
b(jew)-36 b(eils)435 b(die)e(V)-108 b(erteilungen)433
b(der)g(b)36 b(eiden)433 b(V)-108 b(ariablen)434 b Fl(X)538
b Fm(und)433 b Fl(Y)288 b Fm(.)2683 28908 y
 currentpoint currentpoint translate 0.53793 0.53793 scale neg exch
neg exch translate
 2683 28908
a 2683 28908 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 319.49422 a add def
/d 0.0 a add neg def /h 205.94556 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 28908 a 4686 26654 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 301.40257 0.0 -18.09164 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45448 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.58371 0.0 -20.36185   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 301.40257  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 301.40257  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 185.58371  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.58371
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.40257
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.58371  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 185.58371  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 301.40257  def /dT 3729587 abs 65536 div viceversa
{ neg } if def /DT 0.1 abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 569.05511  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 569.05511  mul cntTick add def x abs MinValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
exch moveto cntTick tickend exch lineto Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.58371
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.40257
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
3441 26939 a Fj(0)2708 20640 y(0)p Fe(:)p Fj(1)2708 14340
y(0)p Fe(:)p Fj(2)2708 8041 y(0)p Fe(:)p Fj(3)4451 28000
y(0)2679 b(1)h(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)4686
26654 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4686 26654 a 4686 26654 a
tx@Dict begin  { 301.40257 185.58371 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4686 26654 a 4686 26654
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 4686 26654 a 4316 26940 a Fl(x)4686 26654 y
tx@Dict begin  PutEnd  end
 4686 26654
a 4686 26654 a
tx@Dict begin  PutEnd  end
 4686 26654 a 4686 26654 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 4686 26654 a
4686 26654 a
tx@Dict begin  { 0.0 0.0 pop 301.40257 185.58371 exch pop } PutCoor
PutBegin  end
 4686 26654 a 4686 26654 a
tx@Dict begin  { 5.0 51.52182 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4686 26654 a 1834
26986 a Fl(P)181 b Fk(\()p Fl(X)474 b Fk(=)368 b Fl(x)p
Fk(\))4686 26654 y
tx@Dict begin  PutEnd  end
 4686 26654 a 4686 26654 a
tx@Dict begin  PutEnd  end
 4686 26654
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 0.0 28.45274 113.80928   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 56.90549 113.80928   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 85.35823 56.90898   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 227.62195 85.35478 227.62195 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07469 113.80928 256.07469 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52744 113.80928 284.52744 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
38050 28908 a
currentpoint initclip moveto
 38050 28908 a 2683 28908 a
 currentpoint currentpoint translate 1 0.53793 div 1 0.53793 div scale
neg exch neg exch translate
 2683 28908 a
24324 28908 a
 currentpoint currentpoint translate 0.53793 0.53793 scale neg exch
neg exch translate
 24324 28908 a 24324 28908 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 319.49422 a add def
/d 0.0 a add neg def /h 205.94556 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24324 28908
a 26327 26654 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 301.40257 0.0 -18.09164 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45448 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.58371 0.0 -20.36185   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 301.40257  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 301.40257  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 185.58371  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.58371
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.40257
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.58371  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 185.58371  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 301.40257  def /dT 3729587 abs 65536 div viceversa
{ neg } if def /DT 0.1 abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 569.05511  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 569.05511  mul cntTick add def x abs MinValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
exch moveto cntTick tickend exch lineto Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.58371
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.40257
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25082 26939 a
Fj(0)24350 20640 y(0)p Fe(:)p Fj(1)24350 14340 y(0)p
Fe(:)p Fj(2)24350 8041 y(0)p Fe(:)p Fj(3)26092 28000
y(0)2679 b(1)h(2)g(3)f(4)h(5)f(6)h(7)g(8)f(9)2445 b(10)26327
26654 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26327 26654 a 26327 26654 a
tx@Dict begin  { 301.40257 185.58371 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26327 26654 a 26327
26654 a
tx@Dict begin  { 5.0 6.15965 5.16667 2.33331 140.  Uput UUput } PutCoor
PutBegin  end
 26327 26654 a 25986 26811 a Fl(y)26327 26654
y
tx@Dict begin  PutEnd  end
 26327 26654 a 26327 26654 a
tx@Dict begin  PutEnd  end
 26327 26654 a 26327 26654
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26327 26654 a 26327 26654 a
tx@Dict begin  { 0.0 0.0 pop 301.40257 185.58371 exch pop } PutCoor
PutBegin  end
 26327 26654 a 26327 26654
a
tx@Dict begin  { 5.0 49.73776 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26327 26654 a 23574 26986 a Fl(P)181 b Fk(\()p Fl(Y)658
b Fk(=)368 b Fl(y)48 b Fk(\))26327 26654 y
tx@Dict begin  PutEnd  end
 26327 26654
a 26327 26654 a
tx@Dict begin  PutEnd  end
 26327 26654 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 85.35823 28.45448   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 0.0 113.81097 113.80928 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 142.26372 142.26378 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 142.26378 170.71646 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 113.80928 199.1692 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 227.62195 28.45448 227.62195 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 59691 28908 a
currentpoint initclip moveto
 59691 28908 a
24324 28908 a
 currentpoint currentpoint translate 1 0.53793 div 1 0.53793 div scale
neg exch neg exch translate
 24324 28908 a 921 32479 a Fm(Kreuze)488
b(diejenigen)i(zw)-36 b(ei)489 b(A)-36 b(ussagen)489
b(an,)g(die)f(aus)h(den)f(gegeb)36 b(enen)489 b(Informationen)g(ab-)921
34471 y(lesbar)434 b(sind.)p 1062 35179 44260 45 v 1062
40257 45 5078 v 1770 37121 a(Mit)295 b(T)-108 b(est)295
b Fl(T)7609 37320 y Fe(Y)8714 37121 y Fm(w)-36 b(erden)294
b(mehr)g(Kandidatinnen/Kandidaten)f(den)h(T)-108 b(est)295
b(b)36 b(estehen)1770 39113 y(als)435 b(mit)e(T)-108
b(est)434 b Fl(T)9737 39312 y Fe(X)10635 39113 y Fm(.)p
42912 40257 V 45277 40257 V 1062 40301 44260 45 v 1062
43106 45 2805 v 1770 42161 a(Beide)g(Zufallsv)-72 b(ariablen)435
b Fl(X)539 b Fm(und)432 b Fl(Y)722 b Fm(sind)433 b(binomialv)-36
b(erteilt.)p 42912 43106 V 45277 43106 V 1062 43150 44260
45 v 1062 46368 45 3219 v 1770 45091 a(Die)435 b(Erw)-36
b(artungsw)g(erte)433 b(sind)g(gleic)-36 b(h:)434 b Fl(E)78
b Fk(\()p Fl(X)104 b Fk(\))370 b(=)e Fl(E)78 b Fk(\()p
Fl(Y)288 b Fk(\))p Fm(.)p 42912 46368 V 1 0 0 TeXcolorrgb
14209 w Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 46368 V 1062 46412 44260 45 v 1062
49476 45 3064 v 1770 48272 a Fm(Die)435 b(Standardab)-36
b(w)g(eic)g(h)g(ungen)431 b(sind)i(gleic)-36 b(h:)435
b Fl(\033)25080 48471 y Fe(X)26347 48272 y Fk(=)369 b
Fl(\033)28467 48471 y Fe(Y)29277 48272 y Fm(.)p 42912
49476 V 45277 49476 V 1062 49520 44260 45 v 1062 54656
45 5137 v 1770 51461 a(Der)434 b(T)-108 b(est)434 b Fl(T)7905
51660 y Fe(X)9237 51461 y Fm(un)-36 b(tersc)g(heidet)432
b(b)36 b(esser)433 b(zwisc)-36 b(hen)434 b(Kandidatinnen/Kandidaten)
1770 53453 y(mit)g(sc)-36 b(hlec)g(h)g(teren)432 b(und)h(b)36
b(esseren)433 b(T)-108 b(estergebnissen.)p 42912 54656
V 1 0 0 TeXcolorrgb 43621 52420 a Fd(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 54656 V 1062 54700
44260 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Ff(WS)369 b(3.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 58728 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(WS)717 b(3.1)g(-)g(3)h(Bernoulli-Exp)60
b(erimen)-60 b(t)714 b(-)k(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fm(3.)p 0 TeXcolorgray 651 w(Beim)500 b(Realisieren)g
(eines)g(Bernoulli-Exp)36 b(erimen)-36 b(ts)499 b(tritt)g(Erfolg)h(mit)
g(der)f(W)-108 b(ahrsc)-36 b(hein-)921 6792 y(lic)g(hk)g(eit)469
b Fl(p)f Fm(mit)g Fk(0)428 b Fl(<)g(p)g(<)f Fk(1)469
b Fm(ein.)f(Die)h(W)-108 b(erte)468 b(der)g(binomialv)-36
b(erteilten)469 b(Zufallsv)-72 b(ariablen)921 8784 y
Fl(X)518 b Fm(b)36 b(esc)-36 b(hreib)36 b(en)412 b(die)h(Anzahl)g(der)g
(Erfolge)h(b)36 b(eim)413 b Fl(n)p Fm(-maligen)h(unabh\344ngigen)f
(Wiederho-)921 10776 y(len)508 b(des)g(Exp)36 b(erimen)-36
b(ts.)508 b Fl(E)586 b Fm(b)36 b(ezeic)-36 b(hnet)507
b(den)g(Erw)-36 b(artungsw)g(ert,)508 b Fl(V)797 b Fm(die)508
b(V)-108 b(arianz)509 b(und)d Fl(\033)921 12768 y Fm(die)433
b(Standardab)-36 b(w)g(eic)g(h)g(ung.)921 17305 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(f\374r)g Fl(n)370 b(>)e Fk(1)434
b Fm(zutre\033enden)e(A)-36 b(ussagen)433 b(an.)p 15162
18272 16061 45 v 15162 21543 45 3272 v 15870 20155 a
Fl(E)447 b Fk(=)18660 19323 y Fi(p)p 19767 19323 2389
54 v 832 x Fl(n)296 b Fi(\001)f Fl(p)p 28813 21543 45
3272 v 31178 21543 V 15162 21588 16061 45 v 15162 24806
45 3219 v 15870 23529 a(V)289 b Fk(\()p Fl(X)104 b Fk(\))370
b(=)e Fl(n)296 b Fi(\001)f Fl(p)g Fi(\001)g Fk(\(1)h
Fi(\000)f Fl(p)p Fk(\))p 28813 24806 V 1 0 0 TeXcolorrgb
1372 w Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
31178 24806 V 15162 24850 16061 45 v 15162 28068 45 3219
v 15870 26791 a Fl(P)181 b Fk(\()p Fl(X)474 b Fk(=)368
b(0\))h(=)g(0)p 28813 28068 V 31178 28068 V 15162 28112
16061 45 v 15162 31331 45 3219 v 15870 30054 a Fl(P)181
b Fk(\()p Fl(X)474 b Fk(=)368 b(1\))h(=)g Fl(p)p 28813
31331 V 31178 31331 V 15162 31375 16061 45 v 15162 34649
45 3275 v 15870 33372 a(V)289 b Fk(\()p Fl(X)104 b Fk(\))370
b(=)e Fl(\033)21649 32890 y Fj(2)p 28813 34649 V 1 0 0
TeXcolorrgb 29521 33344 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 31178 34649 V 15162 34694
16061 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Ff(WS)h(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 38722 54804 45 v -2331 44023 a Fn(WS)717
b(3.1)g(-)g(4)h(Erw)-60 b(artungsw)g(ert)717 b(-)g(O)-60
b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 47331 a Fm(4.)p
0 TeXcolorgray 651 w(In)428 b(der)g(nac)-36 b(hstehenden)427
b(T)-108 b(ab)36 b(elle)429 b(ist)f(die)h(W)-108 b(ahrsc)-36
b(heinlic)g(hk)g(eitsv)g(erteilung)428 b(einer)h(diskre-)921
49323 y(ten)k(Zufallsv)-72 b(ariablen)435 b Fl(X)539
b Fm(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 11152
51728 24513 45 v 11152 53720 45 1992 v 11861 53123 a
Fl(a)12544 53322 y Fe(i)13353 53123 y Fm(mit)433 b Fl(i)369
b Fi(2)g(f)p Fk(1)p Fl(;)p Fk(2)p Fl(;)p Fk(3)p Fl(;)p
Fk(4)p Fi(g)p 23482 53720 V 1881 w Fm(1)p 26517 53720
V 2384 w(2)p 29552 53720 V 2385 w(3)p 32586 53720 V 2384
w(4)p 35621 53720 V 11152 53765 24513 45 v 11152 55756
45 1992 v 14253 55159 a Fl(P)181 b Fk(\()p Fl(X)474 b
Fk(=)368 b Fl(a)19394 55358 y Fj(1)19920 55159 y Fk(\))p
23482 55756 V 3765 w Fm(0,1)p 26517 55756 V 1373 w(0,3)p
29552 55756 V 1374 w(0,5)p 32586 55756 V 1374 w(0,1)p
35621 55756 V 11152 55801 24513 45 v 921 58900 a(Bestimme)434
b(den)f(Erw)-36 b(artungsw)g(ert)433 b Fl(E)78 b Fk(\()p
Fl(X)104 b Fk(\))433 b Fm(der)g(Zufallsv)-72 b(ariablen)435
b Fl(X)104 b Fm(.)921 63438 y Fl(E)78 b Fk(\()p Fl(X)104
b Fk(\))369 b(=)p 5538 63438 15749 34 v 1 0 0 TeXcolorrgb
921 65983 a Fl(E)78 b Fk(\()p Fl(X)104 b Fk(\))369 b(=)g(2)p
Fl(;)p Fk(6)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 47331 a Fg(___/1)p 1 0 0 TeXcolorrgb 47905 49323
a Ff(WS)g(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 69790 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(WS)480 b(3.1)g(-)g(5)h(Erw)-60
b(artungsw)g(ert)480 b(-)g(O)-60 b(A)481 b(-)f(BIFIE)h(-)g(K)-60
b(omp)60 b(etenzc)-60 b(hec)g(k)-2385 4515 y(2016)p 0
TeXcolorgray -741 7823 a Fm(5.)p 0 TeXcolorgray 651 w(Die)949
b(nac)-36 b(hstehende)946 b(Abbildung)h(zeigt)i(die)f(W)-108
b(ahrsc)-36 b(heinlic)g(hk)g(eitsv)g(erteilung)948 b(einer)921
9815 y(Zufallsv)-72 b(ariablen)435 b(X,)f(die)f(die)h(W)-108
b(erte)433 b Fl(k)414 b Fk(=)369 b(1)p Fl(;)p Fk(2)p
Fl(;)p Fk(3)p Fl(;)p Fk(4)p Fl(;)p Fk(5)436 b Fm(annehmen)d(kann.)921
43718 y
 currentpoint currentpoint translate 1.56857 1.56857 scale neg exch
neg exch translate
 921 43718 a 1788 43718 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 199.40451 a add def
/d 0.0 a add neg def /h 179.96141 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1788 43718 a 5947 40613
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 161.82932 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22723
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 151.91069 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 569.05487
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 161.82932
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  161.82932  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 151.91069  def
/dT 37293580 abs 65536 div viceversa { neg } if def /DT 20. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 151.91069 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.82932 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 151.91069
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  151.91069  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 161.82932  def
/dT 932396 abs 65536 div viceversa { neg } if def /DT 0.05 abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 284.52756  mul cntTick add def x abs MaxValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet
exch def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add {
/dx exch def /x dx log OffSet add 284.52756  mul cntTick add def x
abs MinValue abs le { false { x minTickline exch moveto x maxTickline
exch lineto } { x tickstart STsize mul exch moveto x tickend STsize
mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth SLW
subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 151.91069 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.82932 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 4702 40898 a Fj(0)3500 39324
y(0)p Fe(:)p Fj(05)3500 37749 y(0)p Fe(:)p Fj(10)3500
36174 y(0)p Fe(:)p Fj(15)3500 34599 y(0)p Fe(:)p Fj(20)3500
33024 y(0)p Fe(:)p Fj(25)3500 31449 y(0)p Fe(:)p Fj(30)3500
29874 y(0)p Fe(:)p Fj(35)3500 28299 y(0)p Fe(:)p Fj(40)3500
26724 y(0)p Fe(:)p Fj(45)3500 25149 y(0)p Fe(:)p Fj(50)5947
40613 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 21.33955 0.0 21.33955
28.45448 7.11317 28.45448 7.11317 0.0  /Lineto /lineto load def 0 
setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 49.7923 0.0 49.7923
85.35913 35.56592 85.35913 35.56592 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 78.24504 0.0 78.24504
113.80928 64.01866 113.80928 64.01866 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 106.69778 0.0 106.69778
28.45448 92.4714 28.45448 92.4714 0.0  /Lineto /lineto load def 0 
setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  [ 135.15053 0.0 135.15053
28.45448 120.92415 28.45448 120.92415 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 7.11317 28.45448 7.11317 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 21.33955 28.45448 7.11317 28.45448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 21.33955 0.0 21.33955 28.45448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 7.11317 0.0 21.33955 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 35.56592 85.35913 35.56592
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 49.7923 85.35913 35.56592 85.35913
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 49.7923 0.0 49.7923 85.35913
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 35.56592 0.0 49.7923 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 64.01866 113.80928 64.01866
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 78.24504 113.80928 64.01866
113.80928   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 78.24504 0.0 78.24504 113.80928
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 64.01866 0.0 78.24504 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 92.4714 28.45448 92.4714 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 106.69778 28.45448 92.4714
28.45448   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 106.69778 0.0 106.69778 28.45448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 92.4714 0.0 106.69778 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 120.92415 28.45448 120.92415
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 135.15053 28.45448 120.92415
28.45448   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 135.15053 0.0 135.15053 28.45448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 120.92415 0.0 135.15053 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5947 40613 a
tx@Dict begin  { 12.16283 -4.83647 } PutCoor PutBegin  end
 5947
40613 a 571 x Fc(1)5947 40613 y
tx@Dict begin  PutEnd  end
 5947 40613 a 5947 40613
a
tx@Dict begin  { 39.74466 -4.83647 } PutCoor PutBegin  end
 5947 40613 a 571 x Fc(2)5947 40613 y
tx@Dict begin  PutEnd  end
 5947 40613 a 5947
40613 a
tx@Dict begin  { 69.1356 -4.83647 } PutCoor PutBegin  end
 5947 40613 a 571 x Fc(3)5947 40613 y
tx@Dict begin  PutEnd  end
 5947 40613
a 5947 40613 a
tx@Dict begin  { 98.07417 -4.83647 } PutCoor PutBegin  end
 5947 40613 a 571 x Fc(4)5947 40613 y
tx@Dict begin  PutEnd  end
 5947
40613 a 5947 40613 a
tx@Dict begin  { 126.56035 -4.83647 } PutCoor PutBegin  end
 5947 40613 a 571 x Fc(5)5947 40613
y
tx@Dict begin  PutEnd  end
 5947 40613 a 5947 40613 a
tx@Dict begin  { 73.20494 -19.06372 } PutCoor PutBegin  end
 5947 40613 a 610 x Fc(k)5947
40613 y
tx@Dict begin  PutEnd  end
 5947 40613 a 5947 40613 a
tx@Dict begin  { -34.99457 93.03932 } PutCoor PutBegin  end
 5947 40613 a 6612 43918
a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 6612 43918 a Fc(P\(X=k\))9917 43918 y
 currentpoint grestore moveto
 9917 43918 a
5947 40613 a
tx@Dict begin  PutEnd  end
 5947 40613 a 23861 43718 a
currentpoint initclip moveto
 23861 43718 a
921 43718 a
 currentpoint currentpoint translate 1 1.56857 div 1 1.56857 div scale
neg exch neg exch translate
 921 43718 a 4538 x Fm(Ermittle)g(den)g(Erw)-36
b(artungsw)g(ert)433 b Fl(E)78 b Fk(\()p Fl(X)104 b Fk(\))p
Fm(.)p 1 0 0 TeXcolorrgb 921 52793 a Fl(E)78 b Fk(\()p
Fl(X)104 b Fk(\))369 b(=)g(2)p Fl(;)p Fk(8)434 b Fm(-)f(T)-108
b(oleranzin)-36 b(terv)-72 b(all:)435 b Fk([)8 b(2)p
Fl(;)p Fk(65;)221 b(2)p Fl(;)p Fk(95])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fg(___/1)p
1 0 0 TeXcolorrgb 47905 9815 a Ff(WS)369 b(3.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 56600
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(WS)623 b(3.1)g(-)h(6)f(Zufallsv)-120
b(ariable)622 b(-)h(O)-60 b(A)624 b(-)g(Matura)f(2015/16)h(-)f(Neb)60
b(en-)-2331 4622 y(termin)717 b(1)p 0 TeXcolorgray -741
7929 a Fm(6.)p 0 TeXcolorgray 651 w(Nac)-36 b(hstehend)598
b(sind)g(die)h(sec)-36 b(hs)599 b(Seiten\035\344c)-36
b(hen)597 b(eines)i(fairen)h(Spielw\374rfels)f(abgebildet.)873
9921 y(A)-36 b(uf)342 b(jeder)g(Seiten\035\344c)-36 b(he)341
b(sind)g(drei)h(Sym)-36 b(b)36 b(ole)343 b(dargestellt.)g(\(Ein)f(W)-36
b(\374rfel)342 b(ist)g(\022fair\020,)i(w)-36 b(enn)921
11913 y(die)599 b(W)-108 b(ahrsc)-36 b(heinlic)g(hk)g(eit,)599
b(nac)-36 b(h)598 b(einem)g(W)-108 b(urf)599 b(nac)-36
b(h)598 b(ob)36 b(en)598 b(zu)g(zeigen,)i(f\374r)e(alle)i(sec)-36
b(hs)921 13905 y(Seiten\035\344c)g(hen)432 b(gleic)-36
b(h)434 b(gro\377)h(ist.\))921 28300 y
 currentpoint currentpoint translate 2.02617 2.02617 scale neg exch
neg exch translate
 921 28300 a 1355
28300 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 28300 a -4425 38817 a
tx@Dict begin  { 58.25917 140.2718 } PutCoor PutBegin  end
 -4425 38817 a 920
x Fb(F)-4425 38817 y
tx@Dict begin  PutEnd  end
 -4425 38817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-4425 38817 a
tx@Dict begin  { 73.10464 126.04544 } PutCoor PutBegin  end
 -4425 38817 a 928 x Fk(\001)-4425 38817
y
tx@Dict begin  PutEnd  end
 -4425 38817 a -4425 38817 a
tx@Dict begin  { 87.35013 110.39677 } PutCoor PutBegin  end
 -4425 38817 a 1021 x Fa(\016)-4425
38817 y
tx@Dict begin  PutEnd  end
 -4425 38817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
7015 28300 a
currentpoint initclip moveto
 7015 28300 a 921 28300 a
 currentpoint currentpoint translate 1 2.02617 div 1 2.02617 div scale
neg exch neg exch translate
 921 28300 a 31504
28300 a
 currentpoint currentpoint translate 1.88956 1.88956 scale neg exch
neg exch translate
 31504 28300 a 31937 28300 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31937 28300 a 26158
38817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26158 38817 a
tx@Dict begin  { 58.89738 139.41826 } PutCoor PutBegin  end

26158 38817 a 1021 x Fa(\016)26158 38817 y
tx@Dict begin  PutEnd  end
 26158 38817
a 26158 38817 a
tx@Dict begin  { 73.10464 126.04544 } PutCoor PutBegin  end
 26158 38817 a 920 x Fb(F)26158 38817
y
tx@Dict begin  PutEnd  end
 26158 38817 a 26158 38817 a
tx@Dict begin  { 87.35013 110.39677 } PutCoor PutBegin  end
 26158 38817 a 1021 x Fa(\016)26158
38817 y
tx@Dict begin  PutEnd  end
 26158 38817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
37598 28300 a
currentpoint initclip moveto
 37598 28300 a 31504 28300 a
 currentpoint currentpoint translate 1 1.88956 div 1 1.88956 div scale
neg exch neg exch translate
 31504 28300
a 921 39049 a
 currentpoint currentpoint translate 1.88956 1.88956 scale neg exch
neg exch translate
 921 39049 a 1355 39049 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 39049 a -4425
49566 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -4425 49566 a
tx@Dict begin  { 58.89738 139.41826 } PutCoor PutBegin  end

-4425 49566 a 928 x Fk(\001)-4425 49566 y
tx@Dict begin  PutEnd  end
 -4425 49566
a -4425 49566 a
tx@Dict begin  { 73.10464 124.62315 } PutCoor PutBegin  end
 -4425 49566 a 1020 x Fa(\016)-4425 49566
y
tx@Dict begin  PutEnd  end
 -4425 49566 a -4425 49566 a
tx@Dict begin  { 86.78094 111.81906 } PutCoor PutBegin  end
 -4425 49566 a 920 x Fb(F)-4425
49566 y
tx@Dict begin  PutEnd  end
 -4425 49566 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
7015 39049 a
currentpoint initclip moveto
 7015 39049 a 921 39049 a
 currentpoint currentpoint translate 1 1.88956 div 1 1.88956 div scale
neg exch neg exch translate
 921 39049 a 921
51120 a
 currentpoint currentpoint translate 2.02617 2.02617 scale neg exch
neg exch translate
 921 51120 a 1355 51120 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 51120 a -4425 61637
a
tx@Dict begin  { 58.25917 140.2718 } PutCoor PutBegin  end
 -4425 61637 a 920 x Fb(F)-4425 61637 y
tx@Dict begin  PutEnd  end
 -4425 61637
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -4425 61637 a
tx@Dict begin  { 73.10464 124.62315 } PutCoor PutBegin  end

-4425 61637 a 1021 x Fa(\016)-4425 61637 y
tx@Dict begin  PutEnd  end
 -4425 61637
a -4425 61637 a
tx@Dict begin  { 86.78094 111.81906 } PutCoor PutBegin  end
 -4425 61637 a 920 x Fb(F)-4425 61637
y
tx@Dict begin  PutEnd  end
 -4425 61637 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
7015 51120 a
currentpoint initclip moveto
 7015 51120 a 921 51120 a
 currentpoint currentpoint translate 1 2.02617 div 1 2.02617 div scale
neg exch neg exch translate
 921 51120 a 31504
51120 a
 currentpoint currentpoint translate 1.88956 1.88956 scale neg exch
neg exch translate
 31504 51120 a 31937 51120 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31937 51120 a 26158
61637 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26158 61637 a
tx@Dict begin  { 58.89738 139.41826 } PutCoor PutBegin  end

26158 61637 a 928 x Fk(\001)26158 61637 y
tx@Dict begin  PutEnd  end
 26158 61637
a 26158 61637 a
tx@Dict begin  { 73.10464 124.62315 } PutCoor PutBegin  end
 26158 61637 a 1021 x Fa(\016)26158 61637
y
tx@Dict begin  PutEnd  end
 26158 61637 a 26158 61637 a
tx@Dict begin  { 87.63449 110.39677 } PutCoor PutBegin  end
 26158 61637 a 928 x Fk(\001)26158
61637 y
tx@Dict begin  PutEnd  end
 26158 61637 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
37598 51120 a
currentpoint initclip moveto
 37598 51120 a 31504 51120 a
 currentpoint currentpoint translate 1 1.88956 div 1 1.88956 div scale
neg exch neg exch translate
 31504 51120
a 921 61869 a
 currentpoint currentpoint translate 1.88956 1.88956 scale neg exch
neg exch translate
 921 61869 a 1355 61869 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 51.1347 a add def
/d 0.0 a add neg def /h 50.85945 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 61869 a -4425
72386 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 142.26372 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 99.5846 99.5846  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 99.5846 56.90549 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 99.5846 99.5846 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -4425 72386 a
tx@Dict begin  { 58.89738 139.41826 } PutCoor PutBegin  end

-4425 72386 a 1021 x Fa(\016)-4425 72386 y
tx@Dict begin  PutEnd  end
 -4425 72386
a -4425 72386 a
tx@Dict begin  { 73.10464 126.04544 } PutCoor PutBegin  end
 -4425 72386 a 920 x Fb(F)-4425 72386
y
tx@Dict begin  PutEnd  end
 -4425 72386 a -4425 72386 a
tx@Dict begin  { 86.78094 111.81906 } PutCoor PutBegin  end
 -4425 72386 a 920 x Fb(F)-4425
72386 y
tx@Dict begin  PutEnd  end
 -4425 72386 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 99.5846 71.13185 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 99.5846 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 128.03734 56.90549 128.03734
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.5846 113.81097 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
7015 61869 a
currentpoint initclip moveto
 7015 61869 a 921 61869 a
 currentpoint currentpoint translate 1 1.88956 div 1 1.88956 div scale
neg exch neg exch translate
 921 61869 a 4537
x Fm(Bei)475 b(einem)g(Zufallsv)-36 b(ersuc)g(h)475 b(wird)f(der)h(W)
-36 b(\374rfel)475 b(einmal)g(gew)-36 b(orfen.)476 b(Die)f(Zufallsv)-72
b(ariable)921 68398 y Fl(X)538 b Fm(b)36 b(esc)-36 b(hreibt)433
b(die)g(Anzahl)h(der)f(Sterne)g(auf)g(der)h(nac)-36 b(h)433
b(ob)36 b(en)433 b(zeigenden)g(Seiten\035\344c)-36 b(he.)921
72936 y(Gib)456 b(die)h(W)-108 b(ahrsc)-36 b(heinlic)g(hk)g(eitsv)g
(erteilung)457 b(v)-36 b(on)457 b Fl(X)562 b Fm(an,)457
b(d.h.)g(die)f(m\366glic)-36 b(hen)458 b(W)-108 b(erte)456
b(v)-36 b(on)921 74927 y Fl(X)538 b Fm(sam)-36 b(t)434
b(zugeh\366riger)g(W)-108 b(ahrsc)-36 b(heinlic)g(hk)g(eiten.)p
1 0 0 TeXcolorrgb 921 77473 a(Die)434 b(Zufallsv)-72
b(ariable)436 b Fl(X)538 b Fm(kann)434 b(die)f(W)-108
b(erte)434 b Fl(x)23463 77672 y Fj(1)24357 77473 y Fk(=)369
b(0)p Fm(,)434 b Fl(x)27922 77672 y Fj(2)28817 77473
y Fk(=)369 b(1)434 b Fm(und)e Fl(x)34622 77672 y Fj(3)35517
77473 y Fk(=)369 b(2)434 b Fm(annehmen.)921 80018 y(Es)g(gilt:)921
82564 y Fl(P)181 b Fk(\()p Fl(X)474 b Fk(=)368 b(0\))h(=)8418
82041 y Fj(1)p 8418 82254 471 45 v 8418 83022 a(6)9021
82564 y Fm(,)434 b Fl(P)181 b Fk(\()p Fl(X)474 b Fk(=)368
b(1\))h(=)17313 82041 y Fj(3)p 17313 82254 V 17313 83022
a(6)17916 82564 y Fm(,)434 b Fl(P)181 b Fk(\()p Fl(X)474
b Fk(=)368 b(2\))i(=)26208 82041 y Fj(2)p 26208 82254
V 26208 83022 a(6)921 87101 y Fm(L\366sungssc)-36 b(hl\374ssel:)921
89646 y(Ein)472 b(Punkt)f(f\374r)h(die)g(k)-36 b(orrekte)472
b(Angab)36 b(e)472 b(aller)h(m\366glic)-36 b(hen)472
b(W)-108 b(erte,)472 b(die)g(die)g(Zufallsv)-72 b(aria-)921
91638 y(ble)416 b Fl(X)521 b Fm(annehmen)415 b(kann,)i(und)e(der)h(jew)
-36 b(eils)417 b(zugeh\366rigen)g(W)-108 b(ahrsc)-36
b(heinlic)g(hk)g(eit.)416 b(Andere)921 93630 y(Sc)-36
b(hreib)g(w)g(eisen)431 b(der)h(Ergebnisse)g(sind)g(eb)36
b(enfalls)433 b(als)g(ric)-36 b(h)g(tig)432 b(zu)g(w)-36
b(erten.)432 b(Eine)h(k)-36 b(orrekte)921 95622 y(gra\034sc)g(he)500
b(Darstellung)h(der)f(W)-108 b(ahrsc)-36 b(heinlic)g(hk)g(eitsv)g
(erteilung)501 b(ist)f(eb)36 b(enfalls)501 b(als)g(ric)-36
b(h)g(tig)921 97614 y(zu)433 b(w)-36 b(erten.)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929
a Fg(___/1)p 1 0 0 TeXcolorrgb 47905 9921 a Ff(WS)369
b(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 24746 81281 a Fm(5)p 0 TeXcolorgray eop
end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 24746 81281 a Fm(6)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

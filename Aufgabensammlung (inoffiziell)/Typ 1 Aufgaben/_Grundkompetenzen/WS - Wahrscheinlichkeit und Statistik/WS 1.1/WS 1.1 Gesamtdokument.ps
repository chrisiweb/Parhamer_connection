%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: C:/Users/Christoph/Dropbox/GK-BSP/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.1/WS 1.1 Gesamtdokument.dvi
%%CreationDate: Sat Jul 29 08:43:03 2017
%%Pages: 24
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMRoman8-Regular
%%+ wasy10 LMRoman10-Regular TeX-feymr10 LMRoman6-Regular
%%+ LMMathSymbols8-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Italic LMMathItalic6-Regular
%%+ LMRoman5-Regular LMMathItalic5-Regular MSAM7 LMRoman17-Regular
%%+ LMMathItalic8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Christoph/Dropbox/GK-BSP/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.1/WS 1.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.07.29:0842
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE2039C3501C39A9BA928B1D8659DC61EA8FFAE3EF62
6E8DFDABF455CDF54137FD5767DDE33F596FB9092ECA87A3C469F9DC2A963BAE
1D62AAC7FCCED1E324FDDF9D8F218A4582B7A960AE3348951B354102F98ED6F5
CECE5E7AB94E4C153F2640352EBA54B29D78CFF190A9A579019521AA7072575E
04ADB576B153695BA7A1E5CE46859C2DD7FDE2A8A29D9B363576450FFA66C49E
1490EC01CE4136D822D1417AB863C2615FD14A8660B38ABCA4443ABFF10E768E
8F7111B56497589A27735FF35E7B24046953FF85DE78194EB09326163E0BE25F
EE7097C1E3E30A0E951D01191A5AA3F9C85EEFEC49D94E6CE014A1ADFAD5E55C
E850355395BE8CACE75623A92D174676B5E58B6E729BC52112E16D2D247BFA66
3BA69C8A18F607F86BE6A1662353BD71C98ACA71B28D8D4EC078B97C4F0B2AA7
E5C17900842424E029E4FB6984F61FEF1A5C7C895EA1EDA6A750662B898F6535
E1A25ECA90D105D3EE27FC276277140155EAAE420BED23800AAE1F0B28330E00
E9D210D7B972D494AFA5BEA7C9B47E579DA191A63FAB427A45CE4DB5FB80350D
BBB23230E36963118A600F83AF3F1902CB9FEDC0DCD19B1B812CBAC472813A6B
AA4F7CF2CCD726919D46FEDFAB67F546D20BCF6341D12694AB9C0F48855D7130
9D3C2C7659CA9D81B3C53C5B458ED1B685AE1B3BBE52A2860499616EE5597AF2
FEC93BC0EBC8415FAFC12C5777A08712792D1B44EE1C72727E7C3558821003D6
3EB45C70E7FCA7037D19B5F92FD6CEDCBECA38F7FA6832074BDE7BD4F485A93D
8FE2BCAFD3BCC4A79CA837E900EE8C130A72A092F8113FDFF381C8D237D6035A
F6A1FA178282D91A32ECB4733D35471A43C4AC733BB92B64091D3187C8FFB809
52629B43A269AB241A647B9B3C214F7042C9AA001D9B560A2465A0565E91E89D
1335338DDC277E4101026E3480A6619960C0A619B8A60AEE8382D921A46D8187
AE70302C030D29FEF6FD6AEFC263C2A95E45CFD448458C7E679092147F5BF9CC
0D4CB358EA58704A8EC8929230EA9FC04D479C6F4123EA812EBBBAC6B6F48D53
0BB1ACC78E7938A0A43221BD62CB3E9919166E4C5685DB225BD5B0B3AE8CEBC1
461957D7BAA20EB9168C6AA9E4248272F38FD2923A2BA43BA9064D59C171AE87
BB22E470702E25AAF41A24D9B74A0FE9BAF8DF5F77D27542FE4429423ED09D98
769F099C8FF9B12A99BB88B018D3A3FE7CE15CD0C1369B201B4DA7CE2B719462
4D33B42527A69C4F3E70CB6437C18A6FE63341D099B30191D50286634EF21C29
21B15AD68CAD72846FB5068313E89BA11B99573E4347FB11B98441AC98E80F6F
1927389F1E876DE04B72EAED243A14E0C5DBBFAE10F980A73FC2ADB01C926F1F
6CD0A92517311A1DE6A3DC8F7A01CCEB9D08C73F222FBE9366B3243C408FBEBE
D5B2EF67FB6AFC6817C5A43BBF3753353BFA8E9BC4034FDB3743E12BA469BE32
DEB307102D2286A4C1A7782B418578622E6A4E50B5E14E1A8FB5F60EF4722AD8
8C8B10C5EF052E53560BB2B7B7F0B1E400E9F96CC34E7E2C3CCF88A517FE6F9C
5E8CB76033CA32952BD67B6EF0BDA8CE6C8BDDB68BEA3E59ACFAB83995414E9D
3900926FA8087A61383E01E64C0E31953FB4FA6EB237F8ED94AF22F25DAD959C
8114343EF40515793A51CC50822E4C68A807C1A3FBC4EB639D2F6440DA61EAD2
A590DB978A39AFEAB4EC346F2673D1AD5E23F812083709EDC26146F2516D8425
D9A404B8B45B2DAF63E6B9CD5B9FCB899FBA51CB76C47C4BA4DDC4681B41A253
663EB31939D5CAA8B36A21B11AE0531B80676F03834F4B8111DBDC1D3582D9B0
4EEEB76CB486438D247D010060676164740309835B518BCF268610CC7479583D
F82C39779C65B01FEC15C424266554331231DC26D13208F9F25F7E8042488453
F891152A228CBA5632C5C642A25119184EC5A7034BD05D83CFC239B10415514B
89FAD2C001ED336615E9F77B8FCF90207EFCF7AB4D8D80796139D353197C9A77
0A1C99117EE72EE057ECFDEFCB961921F82DA0FE709B9447BB18C65636A8AF51
1CBC3BF180E28B1AB973D053D8D3A68592A56AC054E9AA49191C6A774F362772
67A2D8C37934DCAB3006734A2564BF7A5F846A44428053C6C606216322B5CB00
EB11973373D388351AF3E38D7D0FCCB303A6AD3DDFF2F57C704FD55E7521FE23
F4830EFED86917C5CEFF9ADFD18C0FEB62E93E8050A97238F88827E75E2F5133
9FAD5776CBFBFE582F512686F02CCC66343D83CA952DF1C68576FB470E8E0919
365662F6447C26EBEF90C3C5C5827A77DB585B1B6DD69E6774772F699B92F7A7
184A00FDD7F36FBF0FCDB58374934CF2F01C5EEFBE63A5C3B6BB37221F7214EB
EA334FFA3386113D55CCC4A16670BD5D8649B0CC6FD97A470EB9ED9E66709402
5A81C470D33021157B3B7E70B815F56FF5DD3AD6FC34DEFA4135B582C1F0286D
FAADC00633327021FB71628931D9362326398FE89D81017C8201CB8E9394CB45
F6F5C097D36281FFC726E6F6777C96B8930BAC7BF095200979771AEE3F8BB74D
1B1E1D851B93E01E80D140B1D3E84DC0A52286CE9CF8612D5A6B166FDCCACEA3
D4D346F919FF829316E7B9879BDF5D54EBC4650E67B8FE790851B1EE6A653D8E
A70106FC0F959F2F129E660074C2137FE6EBE918D5E46449525A4A5A2FC8B5A4
61462F841C697C15231814EA2F97D671F427C88CFD8E6C388E38A36437B7C085
B17C9070C59EE7E6BFFDB6FCEBC5799B4807519B038B56F26A59DA06011ECC75
CCA0A2F73DF858B6CDA2D02BFAB88307660277766F068F252FBF712D4F6AA9CA
51714523FC48BFBA19CFB00834C0501DA25AA2B872B756536736F4A79DAAC1A4
5A1A445244F338D090137284F4DD0C3FAA11C154881DAD9EF8A294FDDA952D6D
1DCB0481C4DBE8A6CC29051C715C8724E649F9FC87745C2CF446055EF14BA832
B6DC6A6138883A9959E2377C1B663EB6E64083D7EA5E9E4563F7B50ADE7D40F4
29F96D0DCE41EEC1EA29EA44F3FA29A1F5F4AF835B305DFD8099AE6295CE6452
FC984CD78021246F0C2147B13D704C0067DE90B53D9163DE8726E2AFF795B939
7057D3AD58244783E4BB0036D7FC5E425F7605AB2800530F414B89D4EEC51F0C
B7E9D9A86091402AD148C10C8ABA3F92560CC5A52C73D9C1AA2A57A4B3B956AB
BD26B40B67A9C17AB3E3DCAC7F57B9137AF0C7D739906422AF9E42B663611349
15143E2EE1E2B00C53DF9788B45591972391929A1D45F81E715F67BEECF4995D
C35D4691A78401D7453549879CEB262EB112537AAC2F5BB0BC9DC33B6CDC033C
E8F3027018DE88C3656A7D9095905AE89E0904AC946EFC2DA6641C7C5DDF1A87
6B9C097934A8DE6D8125514B17A8D517C377FD635ADBE9C5032A6D6E3B61DF0E
483D3F8EE5E825E3A35AD6D3ACBCBF4F8B6821501BA03919D714FB6647262111
3AD7BB240DE7DFBD1F17FCB93C9002FBC667A5B810B6655162AC7A10FCDC6DAC
1BC338332AF14A0CC7ABF8C79272E398A48E5761D90A31AAF9FCF6B7DDB6C6C0
81E1A1DFC931389878410E8829B436026109F2381E24C381E89EFF35CE1BDEAF
A26E11D89EFD21B11649C5F3C80FF3CBC35336244D8AE9FFF3F592BB136F41F1
1AFA8CC986D793BCEC4BB288C0DD7AEC8D6A3452F221D0151ADB4DC2C4625296
D0BF5E6784149C85FDA1FC19AAA54C49F6F0B6467CCFC54A94F447A97175E183
73A7A108C2925DEC6115C4D3DD9EB64CA74A51274134606E73A0D0A9ADE7860C
4632869475BFACC5E95ABCF4E50F3F746C405422CB00561CCAF1DAB63CD24527
A0A6AB453E463479846D2F8BFE9A6DDE8802BF1F9BD32E10F6F1C7F336F597D2
D23293BBEB9789B02A224D6E9A5A869916EE9CA907A17C647A6DFCBE5BF89E5C
56D299A58F1BFA1FE708F33BB3D8D3959AF1F3B2DB5A361C07E06C4962417E7A
08A12DDDA2501C6655411A4DF2DF658F42D355F5A3094C233FDC93CB79DD4760
26C29FA3779933221D8887BD279511CC1700DA348283522B5AEC490A066D1098
088B87B133755A403A3569748DE4B94264902235363FAE5B1687C92D7BF00C6F
8129E347C6489FD4FC798ADCBD4F3AE203A1EC23FC240D9E8CCB0619A3539824
DF0EEC80BEEB85E4A31E174DA9330491EE2EAD0AE6BC9EEDC8F5F46E2C3ABA05
CC5EA4891FBEBE1B6371CC3040EC63EC2A6E3A800AC4C443525D0FA14085EA1A
862537B0F53843467A18708A41B051F31A13C3EA3D583D1AA7F96A42522035B2
875A44EF7DAFEEC6B06D7DB4B3BE25BB29A426D048C4DFAF41B77E0C77F98BF0
2C1CFA6831E6F9E4D9E60528611520249698A92CF23C5E8F45272A00916DB48B
EDF193D575ED95BB4914D4A5FF9FDB15EEA40886467B15C17D2D0C33C824A507
CB2FB6E384BA8BAECE974D652D776150D7BF0974F5981679567566BA4057925B
6B2091FB0F74E34F73B119BE0CBCB087ADD6D287284EC93A493350028443C6EA
BAF73BC1B4BA53285959558A94120725C03B4132B7BA25E3B70D654CBA4A65F6
84055D47B5B0A3725EC5101252F708A3F3B5CFACD77F3AE5205535F92D8DA297
82A1875C6C8E74B0C86C0D388789DEC76BCF3CF60BDC1DB09467179704B9F04B
677AA145F255211FDDD21A92C01BD539EAC70582BC3F61529DE7FA7C8FD26CD7
74574D565B2B29AC4BBAC5FA2791EDB9B715F5D846F2220FBF861CC7166BBF91
AE735D522C31C5BDDEB04079726CA43FCABE49351B4A5FED8656B9E51CF05F78
7B2B565746C211F30813630C7EE7DC34A9BA7D7078E026DF89D3535C22C001CA
E1DC020E5778C24BB8B41BC7E2C78D6DE2F6067219784B5B33CDCF2EBFEC5F06
D14E4FB96F0F69193E868789380DC127C1A7FAB6255870CD61C8CF7AA8DE567D
174EC90945404C593B68D8A14CDBB4862DB295672C4DD02F60D1B016D12E9B77
E78DAD4F6EA76B85DE833BF0A940F07B363A39EC579094DD434C2DD9ED792652
C020CEF049A97F439393AC4BA9F2B4B8E959E8877C96A02F20FD53A655555608
9ADAB4DAF9B826BC53D97B41646EDCAF7F81C1D6AAD4A849E20FDEE79F2475C8
8FCC6DE30784A852A32989A63805EEEA8B14A64CFECA4BE78DEE307898437127
CEDFC2C10F778106BB2470BC1B9DE7117BAFF08E59FF2A6D83FE3845C1983D82
58B5632028FFA0B885BDD576555B4CD763803AE6795B23AF56AD8842B4F0D4BD
E28886E9CC715784C7BF7F0AF6DB24367F25818C0A197A853688E3AA3162E613
8192E19652A2390D256118B0867DA2ACFA39F9F6EF1D81C607DDC2409E18002D
2098D94298EEBD3E93E848FDEB52363762FC4E3150243B70B07A7F9E0672714E
2AE73E4139D9E156708E74475F36FA1D9905A3E169A1A02B17E1E5A321FA61FF
A83C5BD9BC2C57BCEA7F9A6886C9F13EC903E88782B3E3D0DC4C2312EC701C2A
55C23A71E12403A4435760E2351715605A9EE21CF836572E2BFFDD9A56E20DB6
B9E551F898B857200B7912C1FE9229D78A0C17BEC5FA7B6477C7E031912478F1
6B0E889127D5F0571E73928B5D4324CF9F0BD77C9459D61FC212A9A03F9BC4CE
F9E5B245064447AC6D1A15CF1D1A3797CFE85FB55B56AC0406E3D91564F0AC54
D70F8EFC63B94F73ACBB4CD27973C24BA04C729C5B9AF95E715EA4D3F84EE24C
324335A497DF0E519C84DC7C2404ABCAED0FAC8C87F13F130AE767215B039EFC
02996FD9F97B621F174AB176D508B97E20883AA2943C05C912B7B60343A7DC7A
3F6F1AEA9D81AF7ED8B6C20CD382EB8EEC2982333428081F09F426B9548262A8
78270D2FBEE37AA230330D81EFC166DFD53205CA36C6000BF23A56FBFBFE8478
F1CD00150EE39F08C945CD48489794E223CE3A1F5A84930FAA87A50C937FA836
0CD27160927CFF10954D7ABDFD2A4E3D180A2E97C81F1D635CECB8442177468B
4A69E269481F40D0047CD30C23158454E29255E8846AB1AB9E444B82AC000DE2
25912CB5CBA1AC1BA45DCF4EEA6EBDCD1206243547D9DEE8CDAEA25114CE2484
465A56A684012053B3D07815B31D2C6FBAE2C6354FF6A9769C00988AA1D2152F
B362622774A78B8CF1F442FF1D29BD05B63562D004710A8150CAAAAB0BFE5251
972EBF4F499020E0D842308DFA9F8474289795BA53B7B5F0A588E1E086955C3A
5E5D17261816759FD67200DFF251DB7C95C09E89EA1F66EADC36AA0A6C14A9B5
24F6026F3551AB2242E0BA2FA4BC0C1BD5C41F2B16CC460BDD35D4B5D1F13577
D32B095322C9DEE0ADBE1EB035C42C067B09C7EF4FB3B136FE6D1810A6497E56
A90079CA7DA18D25F3681DD0131C46E14DC607325351F930853B1D8F89835127
E6D5BE96DA47CE49840D1FB266A553D35D8400664F1F2E0C2F488BA00D7256D0
7D2262EC7AF31ACAC176D11DEB3601A993B6641E4A0820F81AC3AEBEB0996DEE
E69DC68C138FB4F7E2F8DD14CD82B634562E96B8EF8C66BFBF49C4C5B41E4E6E
EDB7B747BC6C90A3CD9FB434F4D12484E03E14C9CDDAC9A3482BC6A803CD7CBE
7297EDB0D63A166BDA4DC1E9C9D3429450A21C9EA0419C3A9D9E4014CC17E17E
0CA0D74E75154A8A07D01FED1C412FA9813664082503DA2F814211BF6D56A1F0
B72D203A7C5FF3017508DF9821E7D6FB91BA1BA0D16FF764CAD09F99A6F73C71
DC1C0D12D09BA536A97D54E9EB5D2927F8DD71C97EB8FD9C28D33AD0191A0720
E853FF0603877722871CDEA1DB2820B795EFF6DE291BCFAAC2BB1DEC703A7CFA
E5AA32CE2A37455D17E5B07CE7C933BD984EB713405D2B3F48124430C7B31F64
5AD8CBABFBB903B090ABC8D0222F3F3AB095198B155787439EF62CE27FB2A049
346C8F1199E124CD6ED955A7419322834327A3FF23A23FD48660178B7B0AD85D
F4BD83E8B60B622B7FF1AB525FFEA25F6999C734A9A1330604D0E557EE03662B
D31AF90587A45AE742EAA1F12E58DD926DED61EB7DAD6A6E543C730889C891B7
AF8A576C90A5A37C5AD57E9AEB2A8717F653103DCAFB468B1C3A1053C9A03276
7CA766CC888BB33D409B06D87805DE283183FB057FAC50C227D23DCA95729794
727B4760DF0B2C30952A4DD9221DE09A77B967058F386432FB88CCF943E43807
2C9B0E5A5B285AEDA6373F36A72267AD98ED0DF3B9E77AA94B712F5743176D24
9871734579130742C63D2919166684309A799D3BFF11CD94CFFBD59A1F51377E
69B684C70E9F76F39FC77A46FBA5A77FC0E0A9FAD85863CEC1B6C58479A1DDB4
0393AD8FB19DF89052E33AAE83E984389A3B3720FF0128C29E7F9F510E71D277
D9A29A3B03EA96BC30446FA34F89ED1837E9D64C82735A79BD25FADDAAB320AB
4B9278E652C2F30C6DC9E384947A14739733F9011788FF8C76EF12390D5857D9
6EA4D637174260A2DF58AF4C523FC0CE23DD0881AC3C816CE50B05FEC276B53F
DC21DE0755EEE6F50ABCA8C1757DEAE3F9E6D6626CC108A50CCC687F90B2CA3A
507EA8C1247118996064991B87024D2AD9ED5352981FD5D4C9A1E27B64C52E2E
013CAB33E2EDA7BEA5B305B1BCA2F3903CA3AB5D13CB0500106B9ED5D16E0B45
FDCB6775CB2A25E02C7BA32DE8458AAB95FFD539C34BA46D5A1E474437E80273
2D4B23AD08E64CD0EA508DB893617833CA769D0DEA864CB4353C49A547118A74
2017422B71F1FE4D576813FA42C53DC7E39ED5DF5D5B049F09A5729640A448F5
CA06A5256DB1C454FCDF55D0F95F11AE5AEEEEAD1B655F0C550D62DE43569906
53FB467B0187BE466195CC43F3BD83B2EB3BCB16D6423550A709D944B39CCEBB
8AA4C7012428ECD18DDA85175E3CE67FD4A6528AC35BBB8278191DE7BFB1FEF1
5ECF06F91A48B2F0FC092F034BABA5139548EA09718566B9DE86D04C3628DA17
09D36B12A911BCBE921B6481C78754B67CD39A57B6212B277531024DD39C3C6F
3862E1DA157FD3BC5AD0D0829C8800879AA4149F93605BA3D670E7ECD6DEE6E3
D1420CED84D3EC4901E6A1582683A09AFA8562972C5181D185A606108699ACAB
EF284C19F63C0674C9CF6C2522C968E959CC33043D9F434FAE393859A98FC0B3
EA3A0CAE063311CE1437906A0FFAC7846E4F1AC6540FBCB40BCF86CC6FA991BE
D6CD2F0AEBB87F65D5E67BA200E39A0DCF5CF0D4C547743FDD7A68BA6EADA895
5D5540308E63E5BB3DDCB07751782660484DF278A2B281C0AFC088A138F4740C
60492F5FD832FD290A6EC98B1862CA0BBA0FFDE0D897035A82372EE5B315A29C
309EBBDEC6FE4167A888E2C79ED55666FB6BE037AA2EB10BA574F4485259686E
420890DB1A817C856910A5FE389B1AF013EBCBFF2CF04E086304643B80ABAE1C
B6A67ABFAD25F281D32B528ADAE7F6D38731EF1E8CB0917657EB749149E1D61A
198920D9A45F49A8C83174A9AE3F8171760BB6F16177BC987B144E9FD272CE6A
23BADEFC0FC80B646A2FC08C867C8579A9B632488C35752639E1A74D9676E4E9
9291D2EDEF39EBEF8C5F3A75B96D98C17AC253906BA2ACDC44821688F4257826
58BDAF63E8792D79340D223C92CC04D92735D2F1F9D6BDE77DD5870A2C6F7E43
15C7D632524E9DA9AF125FA40C3BB93408AC884FB20F4F9874CB4B618C65A223
4457EC224689AD1B990732CD028955844CF37C6CF520A853DDC582060673605C
5438B65D4106CFABC41D1E7789BBDAB5EE420B6D136FDC941CE819C6D2BD022A
0E948E100C3CF0C05C0E30F0B3C40E640856403246955C91DB864820B86A6693
CC2CB6FD995D95B1FED23A9547DAD0E3923220E53C6287592E2E491B64A2755E
669A0FC07DA5BAF99675D4AE976E2399DC0992D78F7634C7FD5EB7B330D7FD29
852913C5BF793ACB714F9B797B266BB419E02AFA30376221ACC298E23BCF88F6
0EB7177E9C654A062ADA05D662F7C17BCB9130CF7D71980C9059C5BE67EF31C7
5CCC596B82EDF5BAED377DC4C941943909E975D03C6BF5FF5AB60CB740C9C49E
D9DEE46462D60AA6DB15475BFB798D8EC283BA08CCC3028052B810418619E054
887E4C92240A17C421F46E0A3F76D92989550979B01597E841C9FBECE72BCCDC
EFB7EC37E53EA6A5271ABE24358EAC006A594AFCB839778FD0925E2DAABE71A4
D0BEC44FCE8730E450F3EFF5C5CAA72856C1E874886D002232DB38E4735EC693
888CB7590966A0B7ABA94A048D3437ADBE66A53BE748C4E76934D67AA367955F
D47C9C591AC1624923AE6DB8994DD4DB0D452EE6690A8F3544BE146FEBB9F0EE
5CA712DF33FBA37D0E99953A6C9236E742E2EC53C778F677810DAD0C8F97E6FC
8724E4C8EA57887CB544E01D0385CCAA4076092B169861541E786BEB7A664DD2
F69B4CB22412ED814BD8CCF068E4A9031A608F7B812107F25CB0F1E088D2B976
B6ED89126259F62334091772BE60E5813772AF5C6C3B579FF8140898C203FEDA
97A3D6F2A8873C1AB977770C28A749378281E457DB2AE8E33FD8DFF7BC5CA9DB
F410B2012A04768967265BFF6E19CC58DAC1833118C74800B6A75952046FD276
7D61657DA01FE83C0CCEE4BCAA030C161F9670E2DA6C4A92A4866680D8CF8129
4F9DD1C68334BC7FABD5DEFEFFACADD5B64FF444A6F224303534894DF0C0EF54
F5A7DB9D25F0BA34EA859BF991D0354BCAB97DA3A81DD7539BD64CFC759E5823
64830BB77F218FB837E7B0CC4E46A17037708255E193225BC6803FC0AFD2C1B4
FF43DA42C96E5F24DEF721614EA3184A907E8B3083327ACED76130B3D20F224F
89FAB2AFD403C40871E062B994EC98B96F44FA053C6BFC36060AA715372855AB
F6ADEB270E710CD29E61733C3C9615D633954EA82B6BA7BCF4BAA29799C9361C
80955A9DFD53141DED4237971C437EA9923E50A4B786C2234C7A1375979B6AD1
E4B3FC98821263F1680C619B373A7088A70430FD59D711B74E05B1C74B2CE7A0
67432BF2EC6B5C057130D3F2F5DEFCC9BD8E80C4653E80F243C7469D4550235F
D56FBBD0E3DA0F7193EF72D6A2468AA85CE3353FE413F5936C3048F37EA24498
D710FE9BF4EFFE7CE5E7BEC7F978C2EC02F5B1A679AC464EFD6793D33424031C
F1081BB924D5BB7238DE5BAA742135A8B8F446263D959E820D785197C4E706A3
97A46BA936C77D9F03438EDCF7E3E932160D75020BB88672D0B85076F488D997
6EE2CC71F831B39E897AA17175646AA91845593849719DA17C2C908A0A4C1E74
AACF2CF881ED8286C7E7542D75056EE935C90E391DF40AB96032401C2E7F9755
D6B7476A8B541542C0EF9449E3526A1F8342517997FF7ED694FEF3E459A1E437
00E77410A768936D3BBC0E2AD81ACF8923A8561C489E756910ADAF8B5FAA2DBB
EE6F3380D9D968AF73E556A4ECCC86366FE6585FCA7416CC0E9CAD03F1FDED05
D36EB7AFBC162C8674487DE8E57195F9CAB7FBDEB03E95742E4F20CE4EF9D86F
56782807B3CCC409306CE32E4AFC03D7F2EB0EE9BCE224D632FA2ED253F0779A
B85163F7C8CABC63EEA5CD06F06ADA17E9F1B8C13CF8656B396D7145FF1F9AEF
655881C7990826E595752329A95B0CF20BD7A36D6814575336C0ECBB380EDA0F
25420C8E75244CDE8A6D90AC1C6399546861D62D06E124D369826569D2E42BA1
351FA18548AA282A217BA12221EC01667D32AD288EE2672FC1562AC91236EFB8
752AEE2BE1A1685BDD3146B97ED6DD52C89F1285B6676DA398B3A2172A2F520C
2BD673B870A54820A91DFCE1C7271B2D514058F90DA7B3F1DC33CACC40B73BCF
958472707786446963BE5910762A9ED48A905D67B4B687A3ECE9548712F07CCC
8B740DC8E5B805033B59EE276AD6B7422C188C43019016A02BB6FCFBAAB6D344
C8D8EE0B20DFDA244ED2EF6F5C3D50E1354362262885801219BFAB420F776698
1DEE1C6AA17116E3A4D19BE51F26F57091967AD886D051CE75BE050DED2B999C
B46D339DDD22319BC0732326C35A3B1EE256BA3BF562260792EC1857BCC050B8
41774BC20AA88ED3F6DB30E08D9DEA3C0DBCF7C3B28F015A573331E649D87D91
2BB83829CD6AE94776925C50742D37554B9CCE000ADC499D04964E8FB17FA3D1
3700FC7A0D7FFC6AB15DE53660BAC080CC34D8F7448BA5FE139321A67298755F
763FB8CE91ABF9BE061CAAC45ED4496AD04F34579199DD35B70C276F2E116566
9BC185474A353D2E31E5E845C79A343A95D45329FFCD11C81AB178587B79A7E2
6267288A99A90B43CB8C1547EEB838E4B84F96C9E01C0DAA0E7824D8BE6C72F3
61ABA81BF1B4C998B4511AFD07B3C578D754B811A5FD9438AC44E725CFC68ECC
F5AA6408946443B1B103459E67B71D36C898FA53F4F5F9D43F8496143D36CC38
CC3989DA834CFCD0834164DDCDE093E68DDFED06472FBEF94AD6ADC556F7E953
E9F70BD9D023AC0F1A12E955EF1A4CFC6692A87D4D7EB746DD96245159C582DF
92E4A6050B0C0BF4AAFB02FC0D3C4FE7A07A63C6B4F382DC4A036797F07BF03A
E2F8C833C0F184D32441E25F0400473E70DDCEF2E45C67D82B81176CFD75D05D
0E3F9E07539C80A599C7AA78251241B46E6A63F323824B308A8A510FF245BE5A
998857CDEE48C060914F8F6416356A6BB7CF51E1387CC848777D339277185A97
48572DDBF47A3804ADBB575E9B32F01B72509D254E963227FFD4E1DD5FFC36F8
A546AEE5230899A454E930C8FC6036009F765D69CE100F380B6651443E5A91BE
39B648D986BEA651E512840EE5BED878E7036D2875FD5D19B4EB6C673E090E3F
35AF1497C0ADBC03FA728F63E230E5E15A863ABCFA933684188A92D48A8589C2
F8771A4F3EC551EB972DE804EA5C03CD8C7D4E733EE78E55ABA0BA3698C59AE7
87FD25487D6E7097C26A048C8AEAE9C9724A170FAC6BCF6A85AA31C1BE8EE3C9
02B53FDF74EEB735CD1C98A0EDEA7F2BDFF171A46C5CFCCB37152F41214F849C
A3A36E8E46BD2DBDF152E8195C10468DF086FC6C9364368EAFF883FE0D2F5822
90A008F0D1CF77B7465D34D3E5CDAC8E28AA9A19939CE6A19FF265521B607E7B
494F5DCEFEB2972BA4092342F24EC3B8EDEEE402E65A0F0DB2B47EFB50972FB9
9E5886C47B426CB97BBBFE571A3C0D5F49BCC92B0B4F267FAAE6B6C25173835A
E2D9E5074A9EB19AC7FFD8724F95B5E42B28F02016D0F8DB9E6C5D429893B5B8
E8B721BF0476F66FA313E7DDAB73EB19B2551AA694BBB6D7C8FCF924212E3CCE
2E968B268938E5737A7AF66566CFC58195BC7BC6D7B194999EB62977EC47BA17
56F201CCC777AC8A445ED062765EE571A3631B7D34BBDFC717244C19A27F35E1
E03FFEC21DAE196E874FB017AB88B119CAE6D97443575D0A8C264AD16C141A97
D1AA99949CA91F154528DB8D0E63F394C4C8430BBD1F3153BB1E66022BCB537E
F1E66C98F92E3A81C8BE23BEE4B7EFC230F62253BC1C1724C50764AE6E78BC4E
9790236910A06B75B6011FC247A27395FFB63CEB7FD7ADB4D726F1F2ED0D5B89
8B828DCFD49D21D9A74E4A84B5678F8D1D3EE9032DF3350E6750FF67E5144E03
EEF680451ED0D452D559523087828A514792E7F8017FADA64C1C4251352746B6
923A8282BE75159B8DCCCC73BEB07A56D892567B3B29CE6614CFE1DC9F07D414
89E3B5404B19F649D67185FE1B2F75B1001D46DEAF538B4BCBAD8E907A553E5F
B04DC9BB431099006673495B2D4670D757587C4D5C3CC6895C0717E25AF5AA7A
1C4195ECDEA5AFE822F61B951C6370E81A29AFA15CA964C1CBF800740D8B9367
E200BF22AFF10816E00364887470B7A39EF6529CE9ABB8685EC99AADA2BA2921
9E3EB5936D8F35E3FBDD30932F5F3BC78D856629B5D5DDF77E3CBD3D57EF1CC5
346330C5E5B7FC74034D05D9DFD5C2018CD6F9A128E256A68192C634D28EACEA
C94D82C09796F06109A062C2008AE8F7220E5938BDA7ACFAE4FF43785CBCA1DC
27157466DA4EE2547A47189AFD58B3DB610FB90AAF1FDDC4515E9B1F4AE2FB2E
C17D4ED1560BE46A40C709A9FF994A8584C8F3334C613B3239A5087B243F7668
D82E6771AF78B437F890EF49B697E59249A903EA39971F5C3B7BEA0C6BA9C74D
723F952564CEF7CE60F47440DBE09DBA208FC9ADF530BF408AE3B2B0727412C7
415F7AF11B425EB5A6F0EDCBC64BA8F67F4EBF06259C56C31EF2B8E056CDAE49
35075FCB35CCF79468BDECF2CB5C7C49D40D8F7CF28DC0960B055900D3246150
CBDDA7EBE56334B137F76A3E209CF0B3757CC915678E6E253ABB2259A650E70F
DD5F7912CDBA45B01A4927A48B5714B779063229405B025BEF55A976CD0C8CE9
24C3A194AB33DC77D91DA2743040541729599D4CDFB05E04FDAB634CC269AF4F
A023B890A63B1571FB805BEF3589BD26E080498FA2BA8E7B00E6B7B60A8BF549
777D8BD4A92E1DA3BEAB326251DACF22026EEBFF4E421346F6422F76D7C8307E
7F8B2CDBA530E9795CBE691C141A143280C65FB53B7FB735509DBA9BDFBFE3B7
1B6596F3B732575E0E438DE988328D581DE8C19D2BFBA0EAB8E734AE7D6C057D
50865743ADD9D69CB9C5E3FEFE227A3EF0C7698773C01189EB4BF0D6E276FF52
353BAABBD75CE592B79B8DACD30B5541B74CD96B933F6EA5568415F0382059D7
BA23FDC5C711225BAE315048B97B07EDB740B5C45172FDBE73D1DE8AE20177F6
4858E35E6A9E4FAB4BBD20ADF923F763A8F3E79EACD5C3AE21E8E0E5DD110DF1
EB583E44B6FB00A5F0328A6C57CAACCBE40C5995ABDE165721C8850F64B6C8F1
57B6F4F89238078A60F4463EB5706B3E2AD334FB57BC958B10ACDB26C39732C6
184D129B740B2D540ED052B63CE77280EDDEB66DE47D605479AC20B4E350F68E
DBD48B229397FB1F4299693D917DC28252E197F02A74E7BB5F42D5937C9F9D8D
F5373AC68A0B8A8FBEE5F467A5E8D10B12C4928ACB38C0921D7FB4F31FA739B8
20050A30E043275842ADA239DD87CC108A8709158DA4CE61EC682EF3554D4A02
C13BB71644F0158381590D07304D94BA443F5F78EC95C5F9DB05EBAE0C457E3B
677843EB425E023DF4AB596A177ECCAA98472E5D3358E849FDA65FCD2469DF35
9CC5017758941029544B1B678E1821A57879D8E1AA7A5DCF9CB5AFF316F44C47
01C1737E7CF594A70738EC988D441D771417F73B38349B191BFA47C44A27181C
437B83CFC1AEDFD8AEBF6B852B7103FF496EF876E5FE969C776A8B03A3127BAD
D1AADC81CB8A9D647C8469A2C51279B542A80CC24D7FD9DB6D00C8F7EBEECB3E
CDCE8552CDE6D5BF6329EBE4A424C61E71E53AD46F631635266FC2CA5EB97365
76A2D18DA69F93A6119949AD45C84F6C4592EDE71F7E434238E2CB11906BBA57
90E45A8947618AAE1C7859CEB157765BAF324A35918FC37BA89A425CAA465C3D
D4776FB0D593BB3FFE2BD382D56E470F07086E213E9D122FDD1965B8575893E4
4C9979965AE61E587A7FB51DEB232EA136C04C48D27F190502D909221802F3E4
1B3E5EF312FA1BDC288E7196714561830A2465B40888F2520E197E4A7C530BF2
782C20E6735B5AAC07FE852E019701E86B3F9CD0391C51E277B3AD9B980F2BA4
F1F1EDA932BF124C2C8F4A17C9648A63DBD2B69BE0D1124BDF8EFE3FF6FF5A94
3CE825D494D379F8F369B94AC15D805A752AC61DF1ECDE0E7261559F1F6478E9
B177DF9D171146963198DB821E70FBA13809F3C4988F033C27A6B33BE1520750
C266709B03FD653FEA880AE89D1F28D8BF0627137D479D8C13DD4AFED8D7F13A
9C627E9345FBE40DECADC3C9197FB28C9D8E42C612BA2B28E23B55AF66383069
9460362A78DC9A0E3EAD635B4B0E8B9374DEA3CF1B6DD798FF5AB5123F70FB08
ACC8E42F1A690C53CBB97A140C81DB51E471CF5B15D9D6EF14D38AF92A8DD2D9
51CB66572798A75A7E32BE31D4546A7B79340D143AD64B12FC87AADAFD46ABDB
3B8A603D739FA5170A9A68F91AB63110F96A0C63A645ABDBFE12F5C7A8B8EDB2
2DD8F4C9B73158A3EE2A669221F9C0C1FDABB202021CE25A2EE7EA03B1BBE832
B2505138A81C4BA2028E990C4391B6DD17DBC87DA2EBC00C42E3ABF670DC8BF4
E28C5AFD752A59D7B22EEC328EE694292EC97C6745A5027FEE4DCC6F5BE2197A
B8A29631294C95BC9B7C6B92D57D3F62EDD7470785A74B0B7F48FB956A171A64
2FBF48778015B4158F34FCC89F99154A16B650C214800E7FF6469067E542440C
E7A71BF7A705D7810D1CD45EF7D78312C804AECC26C85BB4FE37D8692A080EAE
DEFC4660F955C6F90995E1895A56ACA672B233D05F426A9DAAB72907264069FC
E544AAD56F758C8BEE83EB56E3AB70562FFF9655DCA0DD1E243F4DE5F080C259
DDB99104E699F10C4305D1D3B19FB2B164A44E5440B8C4DFAC31DD690BFB20F2
B3B92A9486C02479301B5FF1751ABA25C33AB90D5131906273B7551528952385
87817CC248AD960D538B7A2AFB114183DA45B045B9361E91DF533FB7D592E28A
C4D0EB49629A3D63CBD619FFC6BA3490C47619582E1D481E3640A8E7CBD35250
B3CD963F0A3D2C0B1E2DE2D88443D54584BC6232DDFFB4B8C1A6AA2FE724D60F
FFBBFDCDC5FBA90E884695EC1AD5D66AB46D18CB736E3F9351F911D017A4DF63
46E98FE1B7C6884418C2E63614C86A5657A6F516A5AEF940255F957A0BE48188
912529E5D4B43597E4F1EA030D26C569277F1450EA147864DEE12D57AF2429BA
90B38435FBE8A6A548BB82EDCE2EC7BB559BB8DF92E7EC06DD788048AAAE9828
FA72988F8D4C97853950AD0A874E494146286C95C3247EA74BAC662358124A41
31F5EA56789CA9F3E0902D3752080549B23DED2119DDBEAE493FEDD37B0FD10F
967DD58B91ACD7875E2DF8A82D43E9CEC038E89A31B39FE1ABA7F85D11324976
A9C4C442C514BE6D7FD998AB5CE7186B2D305791A79C1DE3A277E40932A2A27E
FCAAFB5CF2FC92E5EDAA75A61EF06A9FA289D4204A5A5E0722F59CB696C90758
338335AADBC9301F3D6031875A1D98196AA3F2A0C6F7ABD57E721692CFD3969C
C58C748BC0AE1473A43B85E0F0B011504411F4637D97EFB4DD10F2ED33C84317
61BA6677799AF683C078AE581C4D92C599DCF4E3B2CDE3412AE0720C0953B362
35A65E59A17FB8834F4EDDD6DB2CBF1BD7276242312B7D3C3597C357ABD25D6B
8DCB78E81FB5B8D5C702141522931ABF77E16D1B0387843CD39A2AF0EC9B5167
7437E4EDCCD9DAFD1F0008AC7E75F54402B816557B3142EEF6B8790CCD56FBCA
F9D5F43363328B2928148C8D87A598FD44C3E49AFEBA6C790C1ACEE7041C324D
8FBA0280FE95A8CF07CDC3A3C28E59AC57726E16AD8A25A4A40964F3D4C14440
E521F5E587064F290DCD08DB919F15C6DA90377BB0DCDE2ED239F38EE9B5B412
6D709CA8A383BD9CEC4E6E6775D5AEF0145B2B425CB8AC7BE46CED2310D63C57
36246B99077020341D0C8D027240A4713C65620D09F8EFFE7766EDBD7CE06A64
C60123DCD561C67D2DDFB5451451F3C27E48B4CDD5F28A34EA6284AE128906F7
C735DB24AB4F9677F888E53B9E36BFBFA378983483B8E9F23E06578006F31E79
13F54EECF2EEB02E5D265B99A1E9E7FD4F8D4E267CEB407FCE2955874C18C8E1
2CC7E930702F94EAA31382EE878BEB52BC4EB2DCDDF9DAFB9253912FCBC3EEAB
004C486B6A208D93D85758B073B9DC63A0B91477C0C009AF9E0EF57F31E9F13B
95BBA5EFF34A3155D41819ACC391901D01BB20744511E5D3A8353CDE5BE2901E
C200448DF54F8F3B522DADD16CBFDF81C0486C57E52DD412FB66F40610C2299F
6C600333112686E81DF12F7D242B1D2696395968D1E3587A875FAE04BB01C013
C7239063402F8D39ABA4EC77381B3FD6418FC0A13F539B8DB99F203B1DD6457D
6034B66D376F2C20BF6E247DC229202BA05440639B926C95F54DDF8143B4293E
130829ADAF0EACE1BD13B793A79A43C1F358CB29EF1A631D40CCEA66FF03751A
4D76C3A2F0D8AD011D0985932814A796B7551261F3936A4E46E926DB9F377543
42675685B70B5B28BD4FE77CC090ADE0448C71F14BEE4C951589C9A1F22D9FBD
82928DBBFADE747D0336E2C1B1AAB45FF3AB5EC7A6AAF700A4E15A7DA463127C
FFCEE5A058C3AB5CE2A2A7AF3F075CE9B88F6F1BC6E78C6C7E86CFA89FED056B
E93A46AEC489E7AF432C4C43339538E6D7B6CB5CB6E5224E093AA39F93AEFD3F
33D0ED45AA60DA9337A984B06C33C04FBD6B60CF6214AFFD1DB613AB3031B579
BE8E6B8ED47039EC3E27B6E374DE2F3930502341166E17DD62F714F4DF994156
B1BAADF4513EB8DA24096C078D992E4FCED47D16F4DD2393C3266CC638D2C3C3
2B415E966CACC421D9E0D61AD59C18EFCDC422CB1270F3A107F5C1787E1AE8FF
1663340F1B6B58CC6CF4930F218061314E7AEB28B4D6B144CAF5C92B520E765D
981EA8902ABDA2C5F81B103D94644C8384F74FF7875C96B7D290F4A90E6EF623
0D4861CF888AE4326B0B6D626B4B7BD2D7BBE40EFEE3C7A9263975B9984B5742
AD57C699291604A4D262722E3358A5163F4065B389BB6DFF6156B8DFF94F4CF7
53C2F7A4CC5C2D09539CD2DD45B68D13EDA02CCD9BF260B1317A303CDD2BDBB4
7EB506B190E0B02906107AE9DBA99E3E5022DFE34921C6A39F55C35B6C8126A0
B687D4079705B616B833CBC0D5DEE1B173D95B8F0CB0E560A161EAD6EFE37A36
56C9B2060EC618928BA4BD9F1C63B57E0AAE912C86CB6CD5BBDF831792243DC5
E2BBD41E82C1E2B11A928231E80F338C4D0EB01615BDA990D230AAB3B18D8513
3C5392891312E4CB7B26B260DE6D77BC1D067CF734C64E02CFD99A96310CE275
FF7ECFFAD50882047ACFDC85EBC84E9D23CE1025428498C420F719AE145A0224
A50E2399377C3ED0E15235B3B2C43334107F411F977467099699BCC5F0E45977
B41B9BD11BD84117BCCCD6B379819E66CB9A30A2BCF969019CC885AA750CF13B
4CCFAC870C97598658480DD7B4C2FD9EF78C4F0D3F26D6346FE6A5454AC487B5
FF2371F1FFBCB5AFD9BF0EC3FF5365D4805BE4098B5E255E94AB79495771AAD8
41F8978390F72AB65858B859427724D09F803119903D32ACE4F3BDB53EAE667C
420CE57717C29FEE0A4E32FC6725661B53442D5C073EDEB77589887E7095D054
34F2C675AA5B0BAC584607FD863568C6B52146E274F4A7DE6FF8DDE66D5FB9BC
859247C4086F0F4410E3EDE8542E996EED92A6F336961094F66E69DD7F5BCC66
ACD5CC1BCB7BC3E78E6DA3B52F6C77733CF3FAB4926CE2813644B3B19D36FF29
0BCBB62ABC19EA1329BE90E2D084385A1B687F171AB9C8A87F4E544FF79905F9
26076EB9A139FB96D2CF09C2E1ACB58B97B9B15B7FC8D1697AC36E6CBC293C74
8A9BBE2BC6FA1D11238CC8F9FA140A10AC0C0F6CF3127088FE3ADCC5213A695B
524A6C07661FE6953BB4C0EEF805F7A0245EB87A5EA0BE89FCC96B0433E1A5B5
C42500696B7E92567A500620DE35BA53A5028CC2FAD6DA11F18120152D0545D8
542DE483E32C6F93DC0D2CBBB8C43CD8AD326F14B2BEE4CB6DD2FDFF0966F0AC
0BDDAA98F66B8D3BB8E5CA471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9E
0D4B4A7B797C4FB2B5A8ADCA10C45B6255AA3A492C886606BC506825F7F4B809
342AB3E6DEB960F716A8254BE992C6E1FCCEE1BCC8A5A73522FC89BF85420D4F
C7E622C8261DA8C0A97495D4E2608FEB7382C04BEEC7772DCA16AB69D66F9A24
55765BFFD8239DEB57EED93D51363CB90520F6B5E6FA882B1AC75147712E23A1
DD69BB1ABF644451E467ADB432820A98B790FF0944BDBC27095913017BFF5A25
8AE1144BF53AFBC2F4247F03EA13D05388059840D797BC7BD5C0274440824A95
B61CA0427E6CFCBC313F8C722254B2B54A972B3583047D43D202EC047CC23B84
1FBA11AB4DDCAD32202C7F74C35F2121AACAA1CDF95F0595D0B59FD27F594833
67CA1B1F697AD92C4C0A6A08A287AD1934372C851B07BF788D9AC9E4892AF24F
360051A4C3B5C2D23844D531348B89D2493FB89EC8D45CF07571C25EB5214290
DCC5A7E09C399BAB962B34C9800758D65160325837F8FADACFD5696196170267
3CFABAB1BAC778773D38B4E123F1EA0846308858E00F53344C64C169E2DCDCF0
65B242A2C7FDAA5D948232FFB052C98D687E6AD9378F63CC53C3A3DA79EB65E4
D6FC9307CC39BDB6C3FD7138B3DC546B2753F9752B84EFDD05DA21CFCA59542E
12283363FABB71AEB4A1EE44A7E3040F6515229FCDB226EC73DBD346DE3E01DC
A8D347FD7CA6A97BD8C6807C21BCC2B467368EB5A6092318452EAD718E33FB50
990A4840C6522116F0ACC2FE52A65D21B95BA79D3772F36C57ABC3C12E13B1BE
509DDF476197F30B005D7007252643FAB39DE2D2A4C48E0D8C4E450024909E56
01B03C25C75DA35DC781C4FAFA29D8D29059AB5E706E5EB1867A90A979C3E5F3
CD8A5CEA478627890536251C4C1289C9931104741A6C9845338F0D171803EC04
C9534EA753F23A95AA78AFBB5DC8948D0468E70A0DFECA93149CBE26075B9DCC
920A5FC0D6206DF1B2B7701C20E811C51256C4D44A4F160CEEE87C7D50FB4DDC
3D4E3242D9A04C920E9FB252D7C7806F1AA59FE77425FE62C24ACF73A78DED71
77C5EDD9D1F90F10D54EBF59A7E33DA067187BEC32B19DC6ED535A8E130B46D3
BD9F56DC895FCA445838724F27180CFDBFF59E9C6D8AAEE21679CB7FBE714F83
CFEDF74106A28E92749541395D0E19C097D16E31BEF932A7FBB3147759AA94E5
FC50313614FEA3CD6779F7B220A5CDF146896D0E9094834F01495EDE0CE8D490
C1AA1B0580ED7AAF5F4FC227188F0D4092E6B82EFD33741743178CF16F2D4E28
80EB4A142A6115005DAF108ED84B38AE432E26D07AEA271F903D7DABEBAADC4D
382F584A2DCBCBAB1022DC5EC53C2689DE9FB89B2B8C2CF1919579C0EABEB306
843F230D5D210B8A0EF699FFEE5B7FB9F34A31386F07D66ABC40B5D165A0EE66
8B24430916ED58EF36404E3B912BF4BFE16F02EC592830521A7BE2EF1D993F75
619EAC1B3A7A43761402168372D8D1ECA5A32CDF25E34A95065640E188384FDA
CE923B7D52E49CFEA53498B454906EEB15947A8BCE55C7E22DD3D207B573029B
BCE1F5C972DB768AC04A1CAAAE66C66BFA7A938DA57DBC8C03F44953B0E4790F
C7D13163FDD0727FC2EF289027A7F4B9524BF0E4675CE28A8BDE0AE37AE6B1B9
B9A8D62608D532F4F5933A228601B780BA2B6C5C540436CCC7552C4A4D9277A0
BD4EB1600727DF268593657AC6F8273A02C5DFAF14A6E9660AA8253D564A36E9
602485E133C53F89D5DD6407BB98B211697941A927BC72A148E700961DD0EDCE
E6CE7F6AD035A435017F8EDC6CAB484A577F67F6E02B76C71D6809A3ADEC3800
693DF0F0895BD5A0261AF95892D0B01D387EC7901F2440F59328B5CCF0BA501E
1D41E23A7C831D9EB9F8DF7F67CC53CD7AA6636A4D608E2E8D0F963DA3B193D5
5D49B680CF8BADF437300660A2DE342E973DC3A087507A1BED234C2B96E99334
BCA79774B2C65713413A71BE9819352828C1F573C610A596EFB72DE25CF3EE84
484B2E930FC42DBA3858090420445386FC8B9D2A29FD79F68361679C2DE7EB1F
6C9C27498892CE6941B16BB0012D51524E0228494AE597712B7C6A09E9D28B9F
C63F2975CD9BB71FA698571B17DEAF0464E0C1EB396048F1CEFBE2CDFB0CFA6F
14AE320F6C419F89D16DB4B3BAB223421E7C6AF5B9ECE6806098E0D7A45B8CE8
CA1D6B19C46CF81ECC28DB55A59A289E05F44DDCFD11B81BD02950A7361EE276
43C23B0D1005C8D030FF606750AC5365F407886BCBAE7B331464268B0D8347C7
BEB9E87E5BF82F6749CFF5D5CA41BAF982AB0DA8E77C767901E67943792F7344
FDEC2A1324ED78128DCDAF100F303FC1F7F0EC7DAEA7612679C4A95D78D3AAFE
AC9B48696376BFE5EA8588B35A4F53BC4F2ED1CE3522F19F1B0EAB3D06CDBD8B
2283877DC5F0BB0F0AE0879CE486338215F690C7CF1CD8CF6D0E1335A4058E25
F6D9619B9DA8916CC5FDF052322E21FC75A175250DE6FB69CD1F3B5B199CFF96
8ED8DA31BAEEBE7326F9B89788AE5FBAD0C04AA31AD21CB88207F09130CC70AC
306C2AD6D17CFF24FC703EFBEF32E2DEE2690EE14E7D93F54505C049746C2A84
3DAB2F32188A85BD2E5A6B83ABFD905E60E7424C13265DA8B40258E56469BB61
EF8C8A95B45F5B930D1E93A34F8E69F4E4E2C393803A680FE1EF907225E64E05
3DC50A3403A196503FBC7F5D4A6BCA7886B81F9DD199BC8B74AA0DE0BAC86A23
C9C0411D6A26C4F5031F8CF6627BC3064CE6981E5A40124C58E6471FC04A20CE
7DDA64C4B3560E056D1567186E68BB16F3E54DACEA764AE6B98D9BCBF91EF799
FC221C2E1C9D72CEF8A2583B23960E5DAD107F42723C95CCA984DDED3C06974C
660A27F619ABC0E178D15C8C2172701E6B68E53510279C91938C746FFB2F353A
67BC605B80A3F79CFD937ECCB19A14F37576620B8689B091905CFC48ADF0C6B7
8392D20CC877C42DD04BC434117B3657EAB941018F688E9123A5DF31AA728E36
BE2546EBA9B7FAB479D9B166D442B6640CE02C62C4CE72A35BFDB57DA9CEE602
E9075C5E509FBABC9016E62D7D5AC2AA082154EF68A6F45AEB7201BBCDED53FC
161D391E60CA3D736825CB278DBE285E67328F96BE577CC30B6CE0F3F1679C48
2ACB47B78AD526567B3635C2DF2D8A778074F8BE41211C603B834BB03CF4C025
EA6E666E1555A116AA346867FE7E2AC972EBC0BF7AF09DB47C9634D586565EDE
49C8017386EB0C9E4399A7AFD8703D384864AF4B50FFBC5758FF0C9116BB0D00
B6E24214CDEBB2918B910AA2C89900B824A16D67D19A330457F42B40A6CB85B1
2B7A7499C3BEB8DE108E83C24727AE7F830752101572CC4D449CC0614C9597DD
4B11BA33C376E475A6B1709DE8693A25F0B85F0EA2FB50F32B1D7FA918D72051
DB6CFBA44520B5B5689C875415679DFAD266F79D54863F75475E61A9D31A7EE7
4498775823CECB9EA636B52FC1009FEFD3D078CDF0D81E84F3E11F79A72D1C9C
29F39506F8EFBCF659287C5F442ECD17567D2FE473E4B94264902235363AA7F1
E2B002450B5A5009B26652F95AEC506058506820A787C969D83942A81F9E6892
8E476D4F5EED72EB96448D64FD2453490F18A30469CF7DD1E7E58BDFE4683F8E
1F2BCA56F7506BFD050AF0DAF050AEDF618A621B0D8D5A8EC2EF6EA3E3A50AB0
E08E243FD89425A0349B34D614013FD5F163E44B7F5060139105C5EC1CF5620A
5B7C2C475DEE6C076CAFBB36C116C61E323FCB75109257C78C12B423635C65AF
93B358A511C38C5E844F53F8CFC95AF3BF1C79D43AD155651C251B9EB5A26DEF
9EFA45B44CC4377562BCFBB446DAFD475C9328C360FD1FFEBF8E7A3FE335DE8F
F71E17FF3F3EDEFDCBBFA220D453BCEFD1DF294988F2996A3564D78653ACC1BD
9EFED68E08AF0CB52949603C0727A1BCD11F4593B9FC9B3861D3CF61D52FF0B9
2D8EE2D59DD08F92EF6F97D30426AB6335C49E7E6F7549C7B50BF36786720870
AD4F013FA4BD720CDED737809EEFC33FCDBF9E946BAE4A74C3EC8920EFE16FE5
6DF4F8DF4AD59E2AAB093624486EAA5F7E61233E3726F1945C49B587A2F9926D
488BDD0A22931A33555C21C21AE2C4EBC7ED31C8F28260A8505CB952D29ACC61
30A67A077A010DCDE7EF7566232A6E51CEFEEDAC486068D28B0BBDB921A9355D
013313AFD38FC17EBAB21295389605AD65A5C9EF86710BCC285022EF0998DAE6
A0F520C168DC8C31DCADB49DC2FFAD1470812A938FF436B01AB54EE1CE32BA92
6E34A8F8C31F7D50777BF90A75073302BBE80809A0E934D63F193DF99BAD9050
F3BCE71C6E4D3DE65D698E49675A16CC28F5D007883D9E33D0300C193CB8DF3F
30517F94C4245B0862C9AEBC1653409894153671F2DFC03B251D8FF01397717D
EFF8A0D27FEF34B688E8E31095D7EC90125DBB8CC555D71B025153444E26629B
0EF6F8BF7DDAD6C5121D358A110316029BD9D298F18C89F1E1BE623EDD5DAB06
C0160CEBC4F8E80A54D110435B8D61DFBDBE592A165FCC50506C77F005D897D9
442583CB346F53ED4731D73954354744891F4B211C903B15EBDC5C507D84C272
30A04333126A9DB0216BB8A83C324AF0629A269CF02FFD326768E57DEC8F6CBA
D51D1B70C1D43CC2A8C9BC6A93A93B7250608058EF90AC39F5BE267C0BED5CEF
65E2BB12A7124A8AF32A75E80C8F8C99E714AD6137D1A0996F45C797787B8756
8A427682079086FB7518C716796582E49113E087DF8DD4B02241AB3B15418991
71BC12C8AAD50BA14DA5BD9E017D60FC01124BABE23FF62E75FCA7D6F1834D1B
BB4D7213FED3D871DA69398973302455873A728E5F6AFC8EE6E2EE98763933D8
14901FDEB3C6B1862297DD6FFE8D8B8EC081349683FC5E1C323236F7109732A9
D67701DA5939595B1C15DA4933D1D98BAEBE7E717055124F7B52E4F3E37E4E09
A477FAB79FF612BB86F7D21BF27882B5597934033A3052DD78916FC1713F70FA
8556F87B101AC4D7EF91B7D20BADED094EBE76CE28AE3DC8D747B0105A0014AF
B27B59AE3D1FF47E7A0F7EA75A279F2BF20E1601221B52E5C6E70215F4F4DC87
7EB939CFFDA795D55378196B6E17928CF74E253D45C14DFEE37EE5A192877F8F
9B9C3E5BDF412BF0E8C92A234BC8010813DFEF5F67871FAD992447F76CF16F85
D0A04140B5D65FA7F973870828E5A3401A9706C1866007B4ABFF61E147897A2E
B9F6BF3B44F0D3232FCF548A20487340EF807F2A0AA526F091A29E001CB237EE
038752E723288E6C5276C56DE74B7B16AA04828FE02F8C2A22BD64092A55566A
BD8B1AD14D60862AAB2F2AA9A9B7F03F530456D6A106529A633A3C112ED828E9
BD8D34D56A37681DF33C6DFA8AEC43A80C6915EFCB2EF0E872889AF46657C563
DD0A3F0C5182B0F086270720630D1223FD1E1D682C1BCF6429DB7A235A3586E7
B93E6CBC990FF3BBE6D10EF49349387EDC6010710C41DE576A77FCF850166705
473C716253A768375D7BA2AA46E1B26D3345059D48DDCA2086A2D74F2082D3F3
041B0676E3AFF67832F8939F2E0F37FCDBA9FE0446AE6AFE07A1F5553AE4F0B9
54262F439CD768D727639D26DD574CA55027C1584BB388D53878923122DEA1BB
8FD73FD430F0DF866D036DF1B4E03AEF053B0F785FFF2804A3D613BE2F25115D
20E161F93055C3432CB412BA299FB6769E965F68359DE4C40DF6EE70A9FF4673
948A4E98E17F6D7F9C03254537748B10A647F1CEA85D597A49335CC40D386623
8ACAD2C58319987C4D89484EE18FCCE668886402A218532D04D05046DE4B8AA7
59050A4CD64E67D56C072FADD046548086EF38F5BF06F73D06F0E364B0D26D7F
DC1AD94C131AD80EC35DD7279D0E367BD49D2C8E5DB64460A3DF07DFA3680FFC
B67E6FEBFFADA77FDF0A09C675E4537950DF8D5B4621114B9CDF03235CC98621
8668BBAF902F773EFED5ED8C9165ACE23E87B4B4CD0768B790C2469BF3B9ED73
A1DFECBCC9B8C658D8DAFE69F9C3D2D7DD4B1B21B22B69289D1D80F71A7138C2
8292B9684AF30E7384B84908E766920714DCA4529422ABBA681C01EA3CE3D0FE
A332060DB576BD35D002AD5BECD6FD44D2F3FAD239CC920B51DC95BBE9E6A0EE
CBC134F0401FC1E88B8BAC63A006735A03AA2C8633A9C8DAB325917B40113CCA
056BA39D115151239F59850046C6BD89A822717EFE3087C26AF63273456004EC
35356732887E203EDFCF3781B9C03E26CAB4684ED3C53C12E34090D278D7151D
59D40D28184F00034AF1BE413D4F9DE6D8E2A8B188CA63FEF456A75E140DE04E
27BD6670774BFA82C7B080BC0263B2EB7BA006F1E34B59E129D845E2920A890F
6AB64F635B3A4AFD733877CB66FE69A285EA76274EBAE20678FC762E85AC8ED3
A6A58BEFCD7D735DA4A1EECAE0F27EDFB52DD4C818EB9E8C4337BCAD21A297C6
9FE7FC09DE4E7768D68B27DA20017CD2C41573894FF976BF8EA5425292C24145
664926466C3EBE9F8964D358AA76DE110300CC7B898FBD8BAA1D05E4B9B04395
D5A6421A98D119D26D5F911E38E26868C517932F7208572B6ED7E848D0957BB2
628ED1A1A0AD08A039B679F5830E4BDCCF9D19173BC1AC61864D23E725793824
EBB35773DB093392FEF5CDBAD6134FB1DBF0305C7797D4B2D71ED1E84CF856D1
B959C6EF6F58942425880CBEB9403E15FE05C63C25AD84C509D037F912A27BF2
DD909944245C93323C8145F36BBE7C46FB3284186CC6BA6A41105AF4BE60E0FE
5C1E47EC1B6F2D32A270159C138B2409D3A79E946E5680042181A17CB3A07494
12DBBE8555BCC1C9301918B98CB306F08E8D4DC7D81815E0260D9F69D2E42819
E144C7772269C0435D8DE1064D3D38BCFD0A94DA868981A99E244636A35B3A62
118457D5C4E806B22D6B4F4B089361CF1A6230A55C56391069172A8C805C3D94
60271F37EC9BB6930505040BA9C489B5F145D01D566943F9E41ECB58DF2E318B
41923E8A047553D96C8FA33E8F3C13F14841E48E53B6BA78A8448A960D67BA67
9F0E22CCCB52AE79C0C7596E61997B1C1F3C19B4A0FD935421FD2FAB471FA444
491570EBF12F70F2863F9CBC2CE3E57E6832C9FFD6B1B81B9E553B4A7E3C50F9
8DFC652FA98A14B0C1AF942753C52402014764CE7026803F091EBF65AB6991C5
35B2DC3A08941A00794AC61D21FC4BD8EFBC3046515B1EE31660B76219EE4C2F
891E2EA012B334C44FEE94D1CEDF1E2D29BB43864AB5B770A14C98A432A67A05
C7908B8334BD4FE842D57B04423FD0DB3A43E8F24C4B5D7AB94E4C153F264048
F377A11D08F846F08BD7A71EA4BB8B2A51EC364937FAFA1514D7A7E2FC165C5D
449B2255A8BAF39883AE2613D8DBD1D5DA07E286D08CC63064A8BACD2AF8FD7C
6B0D6F9302638C191524307083E5F191793761F33DC6E913E04ED6649524E353
05FFC71211EBB0E78F0DCE9A1928EF6140FBF0D18F24A9DEED6D18D629AFF035
7AA99B59A29F51E3F4AE218F935C7691B72AD442BD5A5956534BD831723B9FE5
A9C063D4C9AF6482F4BB2ADA834A2A909DD505FBEEABAE253088B2DFCBBD2CE2
FE7DD34458370BC68693EE0653382141E5234AF3B1F1CB83A4BEF6ED5BCE03E7
DDB698A1B755772625B78E1ABDBA718C45B7C10E22F8868DC85B3D0959C66C5F
A1510E763319637257BFB4DDBBC1C5482ED75665525EC2DBFE8AEF50256DEEF0
9BAEA0E0D329639F4FD402A4DD690E98BCC063EB80150D603E50F4795222BFF4
F1E9B18DFC863CF45347C73B4C28293307F22EB28C915A6423433A1800D1483E
713FF2C1B9B9B53E7C2AB98E9FAE78A7029676ED07CAF450F44198BA633D8639
980EA7B22089247B98F6472EC24D46F92C99498946CAB6DED8F5DF0540063E90
4E72FB99578B809358856E4E99B28E138E2DB585CDC7EBFCFA48B05E3EFAC5D3
E3EB78E6D5192581CBC29F514E655CB7EBFD9550F30F1A4B59F9459A22BB9C68
7C7D9483312809A17CA0EBBB675A3C1B3AB84ACCE6EC152169A2D9D784A77AC0
ADBE695F17EDB197D036B329612A7BA08BF019AC4192C0C5F4CD568AFA19B87A
E0924C995AE5EBF60B42320AB25C8D730EA395BF39871C435AAFA50BE0937ED2
B0D9F0311504676C02CE264E437041D4DA1F27452EDFE401BB757799D61A8017
01C6D478F594626C7BDFE23406C55D514174CDBDCF197D131E5BA49985D89C8F
ED0C5DAA5136EEA85AF0AE0B64519439133772E3DD52279FCECD3C4F605104D3
3D518F52A23D605155CAA617DBDB79EAD9C085B8CC8D6686ADB92E67A84A59A6
2E359DC6A4D970B9341F24E8C339F17484B2C0EA22C06D868BAF04521E396723
5E3E106448C64C55783C4273D79B8BD08A07CC5339CA1EF5A87BF031F76C3596
F43A6F2BC6305D53D5C757A5A7E53B3220E20ADF71B669763EAB61025BE4C091
F55B192E58589CBD46251AA826E4A1D3745FDE11C1E770ECA3CBD43509A89AA8
79DE77B9241F2B92A25CF8C055DF28F5447BA7DBA7F38EDDEDE29FAAF1525628
EA460B197A7814E677EAF5C9BD2D5BC19411F5C1A3750590DD9E18801779FBC3
307C0BB8A5784518676B8800D696F94F94A574D4E7276F96E891EE4B905F7282
FF24541DC60BB39BB060ED6495AE98F6798010F76FBD841B6F538914CA986D90
864BA13504A76E3B85EB9149F66EDC7F3D4A20C36689FF9D753FF4989314E161
92222EEA0E8957540141BAD899AFC4C8A656A7EC50ACE67B8C00F684E0A506AB
C5E8D8015D7B38C7F77D12BC7D693D2E8A7CBE4369FC52A6A243D4ACAB37996C
35411081D7A7B1E93145F56A06B7A32A8770B7B2AE12CA40CE49B206271BB84A
C9AAC072FF6D5AFDC5A833E61CE4EDBA6939D9B6DA4B6A4FBFAF7245D8708700
26063AFCBFC636794544E50C8B8D3A5C396DEB3F45531DB33EE368F0F87B2618
95259923B996D528A128B0598F6598EBCCC8663F1FB47484C836CA9D440461ED
A1A481E70851A8F2833BA855564057CC2A94AE03DAB88E2AA787BB7D77A88283
2543CF6027EE8310F8FC87A29A25B7873B48AF70B4CDADD72EB8AE6ECC7CD364
8F34452AD5344F085ADF9F3F33A19AD5F25941F72C7E93DEDE4D3B78F8F31A5A
92ADECF6E7F3706A4B080E8C1C106270C7F476591F47BC406326CD9E79E7F6B3
820830A2E70C857649054FC69F8D4BF6C5E91C51725CCF6211CA57EA1224500D
4E89F4CDC208C9A7B67F0463CA7A7BDD7FC00F99A79A44E04FB3BAEE5D5FB1CD
F04661E5247375381D60FABBC42680DA46968CCF9C8E576C66DCEE4952A6ABB9
BB6E7E15BB022561BFB2388BDCF8561A4BD8AD3A71493A67729921EE1F443BD1
4C6CF50A56EB2F2BE12BB9709DF4BF31F6CDBEC9F61F64A1F45434CA44F97205
4540364314EB315B88AC132D54A5A9F417AB64C02ECF75AC81E63B129E7BF236
F36BBBC02C14D8A90A3154A16BD08B46261A3868D4250A18470A42218EBDF7B9
0241CFD0CBA9D1090A3D9314EEBBBF1EA746C7D21AAFA482B4A88AE9FAC47A5E
CB3BE14010F61D8DD60A17B2E11A5A5E8C9CC093181F74A764045DB734FF54F8
F1ADE063E3F61A1A2774E687B096D89D6CBF5A82C037D70EBB73931AFFDB7E29
FB0CC28691BDCF0E009CC38FCBE921D7D2D3D877B0447943A37580781A393317
6B6D2F9F20CC9FCFE265DC647D4E08A0A0FA6BBB20F0DF2534AF569BC8C28B4B
643B809B8F420F30F7E8F77C2A44865D97EEB9EFD4AB7C41035FEE3B27FD0E46
81C58D18345EE6AAE815167922728D6660E384631991C87B4E2D96AD9F2C10B3
05A95F3973DFEFFFA718937C4F57377C6E95AC3B74863596FA34250C38904571
1599E3DFC435B3374F45AF41AA09126CC46D6C604DF896162653B00D7E484A88
A248FD17FF0E7A075A554F9B6A91CF569C85F742828DBD3A572B5C21DFF08EA7
AC16A7DA5D6C7F4B7CE7389C563D11219A887F01853AEF9BFA6B54C1AAF015B9
F8B0A1A057B354D8D8A6BA18F7EC7EAC507680ACA37850B30D1BBCDD128AC483
59893726C30C8A78C65E7ACA7CBD3EDB705695E407C55AE387152C074C8DBC0B
9A1993A9B392A4FB76D29C0565E070645A680BA3B1DE132F1BF1D98869BFDBC9
E1DDE716C4A7710F7D1B7C37610A75DEC881250886C5863A4D3B7259B7A1BA45
363D3B7FDCC2F4A81E47370B18001316F0F9C2306892C857A51A8D59DE97F8A0
1E890DA500847930E1F5248BB93568177386BD88E7939404D2232734DD9DD603
51BAA073A1A81F8BCEA1B152FCAD7FAF84983CEC5298B32F209ADBC81A3F255D
199A354F4D28DC5CD51D6D2F63BF87271B5DC4615D281B73F4DA92823A4FD665
1B8781D45C2244A818019BBE8148EDE17AE382EBBC3E26CCCF9CA8EE7D19A87B
2AB47198A7CE67C6C806BC2A818321B3EE726C661E94853AA05DC6ECC02F1617
4606AB2770299A4EAE741229CFB306DD513F69FDA0502DF792581585D4AF6BEA
42EC785231E213BCD4A2FC290AB05B0BCE4285A33BC2A8F9B054988DADD19E25
239669919DA89C368BD6E3A1CF8F8808DAA6303FAFF112EC22106E820FDCAC2B
500B37969F67A64AA1303CF635DC613F95EEF3A891F16E3E16479213B7AE35DC
8021ED155E58FA101CA3716B57AFC3D6E2AC4D82E66148C574A4276DDE9748EB
96BBA406089FEC9DF9393AA295D44A790435D7FFF7A03A1A7D870A158B7895BB
24BFF2D2B81D098945806A707900EA0C7FE8B02D98D4B2CCF9DA58CD02C15015
37F65F585498B689CCCCD4D9D8EA663BB05EAE2F2BA3CE31F8E49DE6688B860F
692202833B7ACE76F2D5CABC2D1BDE1CB233735BF1C5976FB22AEF42D03E33DA
209123B6E2B13467096BBAFFB905CD432197FCCE5217C8D138D9E07E735DFDF9
275F1908B0453B07B419015F1BD3EFAEE4244DD62A518341768AA815396C31DA
5D663F0150ABADB46B94396DB9B5C21EA090A15B1224260664FA489C07010A49
C43EDF15200FB7ABE7D0D8CE904B0B0203FB9332390615FA0686959909E4B860
925619E06E89A9DE9DA732031E629831F1BD3613EA73BA2AAE3FCA5D2E78ABF5
0BCFF5131715AD44446F9B4B2B1B0E82CE1FD1EB0420D5831B07FFB3A0CA62B0
CE261EA1BF5D84B8E832349AFFEB27F3898D35DBACB95BA867A9C33829A71874
1D4BF672675FAE08341A74EBE3C4242FAB228445EE6695730F7DE25553176FC1
9609A75504489BB8A3932C81ED34B43A8A9A44FB27677F0337362CE7110F6C11
E1FD27431377F103A3AD8DCADBE1543A9A9BE1DC27603C87526341706CA713FD
6B3CA54BEDC98D9743BB806233A525CF54BA7D96C24DA3DAA51DA532ACA59284
880F4572C145AF82C8EDF426DFF6B247F187BA95039E7B23CF1B52822FCE4B0B
77BB04B94C3F576E57330E66C67F8FF787213C34FF9DDD7C09D90387CA330281
29F4A085AD9DD05C3A4D0001737F943520E1B0C9B1FBD03965653161077A7108
E0ED32EB1DC08CEFB629B58E94398A49DC5587279A0FA28F77BD0AD047A517BB
AB889DA4FFDA319256D89323D7886DDADB0781CB2503E3A1D633025371BDCC13
4FC627C1830D352D379D35A93FD1A0276868BB8D5AF9CD5446664C394EB3028F
33BFBF5DE56185D7A1F5C70025E15B198A54807A4CC323AA73F4D4F18D0ED03D
A5DB9BCADFA3ADF5AEECD2BA102DE609AA08B0AA57232BEDB618F0711D50C849
BFDA3D433FA2889C8A7A4EC0F684C5E77D6EE596B0182CFCB88273A36FA3EB7B
040B01ADB7659E30DCE39ADDC01FE96E8F259B81DBDDD2AE86EA02D925BF3BC6
29377DC7CE00EBC96748E6A55B63B6D18415BE077393D77C3AB64993F73AAE0F
23FA24A742CF53C5BA47FC0F05F6228A1EC2BC23EE19D04C4BEB88B384A9BF30
BFDA902A10D44FE78947747486FCD3397D70014ACACA540D4CB6CF0A036B47F3
5C8E97F56BE14DE4B271F54E80D3CE578C9FF3FE13451B7A25FC1C9FE3AAB844
9EFD258C8D56F17A1851C0543E2A2237B25D7D5D8AE3272C24E2B1F10AADD749
9F0D42E3018D6916D34B430A3DD210F9B93F3E29D20442423B25C16354255FBD
A19EB13F4310385E6022815BE497AC3F5C916BF874BAC0B04225AF31FA8CF398
69E2A0A2E42218BC61905B682A812A3362525F9A017A34A18A61B363C48F3002
EA6E31C82ABCC5CD2DEA962729034189890C62B75E5C6F1BA6B1C37D0CB823FC
7FB2CEC659D24DC24BA71A6F66434AFFD4D3CE9AD71A9DE6DFCA06C53EB4EE98
05B4BBAC718CE1A2144A6DED0695BC29875583159CDF46B1F78FDC0F15056F5E
CC51647721D4F7F31244F2ACD60B773F1DCBD0D2F849D1B2904B3BE8A8E3273A
A413D671B173C9D3E9DAAF53ECE8EADD5700EACD071D7F9F980E94819EDB4C99
BE0C647DB995BA91E9A014BAC467AAD848FFBDA442B359DAE1CD7BCE53BC4CB5
A9E7BB776B37107C6B0FEC522B29575F6992D7163B891AD5498ED50B07EBF3E5
74A8B3C5BBEC36E5F1CB2C4AF62283C1E6ECCFCFD0B202154482EC378741A6A7
CAE3E52FBFC8DF8F9333E20EF1FF47A6FDFFD834D543487DD100A8415D70BD54
63635C78D1938AF1586C164B562D8EC267EFBB98F2358551FD4F8AADCD73CB08
01B5D640C50A3B96143D22375CAB253E81A9E0D50889F70D21C93A64F91C8337
9CE3BBCB8F8C473E70D9E4C107E83D241AD1AC97BA95F86A4296BF4B7FE831AF
C8B5B4FAB8849270F6B646DEFBE4B3AB327C8B9566A11B6CBB0BDE4C69A46D32
AEFA431103E98D23B62B2C9E898B4ADE5DA40F5A5368E8AEE85A58C67A6DB2B9
8929BE06D4DCE7053415022DAC33DFD13A203C1D6F6884A5D170ED4F5FE6CEED
5350AB4DEC87164BBA3559F9288C839A01CB75EF61ED10064A2EA2FDE7A0167E
4FB6336658A4F79ABA60C6F2EC0F25246A10BD4DF579CAAC8898F0F0A5920762
B92090798D3E53DFE63B729ABF9C33A748A33831938E9392DE48B5365AE3FCD2
EFD3C3DA7D592DC0DBDC9E2C6211E641F3AE2BF1FEB71A21406654EEA7C11091
3151D84D2029457D047930E6EF0D466D87EFCDD2DD07F56A8E0ED869B943217B
ADA7DDCDE5431784731C861D7B309CDFF9D31CF3CC349659064B3E173C14293A
D8B423A9A94C5325E3C1CD93452D1C4FF54A86135B4E7DAFBF8045A2D7563196
4E07DBAEBBA124C6422789910FD38CFFA42773E3767EFECE0028CD16BD583446
CBA4099FE88A14A615BA6C05D3E124AD2E203AD877FFCBAFE830D4B5D2C834B3
D4D61A4928C7B0F1B0B436D70089D0EB1EE376EDB3A37A5B0EF95A5AD4068EB5
7DB95CB64942415F31CDEC4B99F7B0BE3F6974E75205EA9E5A5D1D6F7600990A
AB7C657140B317411921378968D6597406332E1001A67B2E80D76457D19FB231
E8F96A883AF14DC9AC1BAC57EEAF4873105AA515B2D8AC5087739D9D770EA8E0
2CF485E14A586EB81B2F1CBFB446078F15AEFB959937779C5B0452D270AA4C86
6F8386345F3C327F34414C50A4F297FBF1454EDE317B710CE014E3405A314B22
51FD035509BF431F155A5A0DF27C469C9CDD72BC3EA3E996BFBD4BD99DFB3F3D
52175AD58964968F44BBCEA94C9976F6FFF345637377BD62D180A4A511AF5038
5B7723DE6AB00D7201A58D3D7EA56095E1D13CA68A58CBE3F2B7285C3AE2A29C
A97F6F5BFC44605A389377CF3447289F4C7ACA4E19A46F1A7B1D711BE35D2100
DDAE40EA2A09ABB3ED0A0DF41CCFB8BA88B466F64C52F017B2C6B412189248A5
E6035045A98FB16424A32CBCE00318C71279D5327814B63EEEA1C2A7D49999CC
0BC2761DDAA8477E22B1A5686791E878315811A3CC68C205543FE991C3D12556
290A19DAD52F86F0D27DE1B4E24249D63F4E1709431830FAC94700F7D007532F
BDE89AF6724339BAC3F6E0EB97B2838FC29D9ACB3E9D6A9B161B3A7EF0A92ECB
EF6B481469C7D3255538E4C565867E601433695D86E1D43B2598AF55ED681F8E
180212D50815ADA712DBBCE097AEC5007A159EC8C0D548C76A70352BD55055EE
9F172E654FFF2A0A4E791B15B283E2959F3E132BC2DEB40012AC77950296C57A
8527F24D4E0B3A1A6C53FC6B3549FE94D12887B875953F52B922AD34D5E3F48B
9D57EF4056DE584750AA397A7BB4C82A4F83499BF783BB98ACF0D53F5F69F731
DD5D774DF8EE50AE0FE832C4FB773F5247F31D48557F4EB373F2EB43BDD06549
E027F8A60E2401ED4D34A5E4A2F4C51D79FA4324C52757676155EF3D4734FB44
0C32785858538FB9C6DA2AEB1B3A9BFE48896FED91D44F64553F2C0F0345945B
E9186686583FA81B9E733FDB2A6AFE95C911C906ACDA312CED8EC03C514238E1
9C4139DF12EC0452DB032189B0B7B35562F8ADFD7BA2A8CE2753742290218746
BCFE36B95540E870497A2362A8BAAAE560B578FB6421802B0695B801611B1E0F
6ACA536CA889240B2E196C34ECD864558D06DB97CF188D7004A67ED413B3AC75
0FA7754EABA8A055F8A2E39EEA05DD22678334ACCB85D157893E58C0A4D051E3
128437B21B003F29612C0B8790D81741182CC7A779FBB7A1120EEB299C276199
EFB4F1FA027532EE88C7E4B7773317454F585727C12F16E8675708FAB13C02D8
BC67DE5F21D3411FCDCE217101EC5BA022B9F295CBCFBE6CB3C85D9FFF6281EC
DC7C1DA8E0FE95BB9D83AC13D9E1D450C52B126498DF01A8B4E7157EEAA7F183
00589336097885EC177D3BA99D1BE3ED353D0E1CAD7342541417F92055CFBD78
718CC3107FFF4B2425D2E905CA1C28794D9CF38E8A011FDBCE92C78FDBEB5665
E1FC30ACC34956F0594E1501ED9F75D48E68DC7EE7C97176E3BB9A861171521F
B4F21ECE7DC042A9E385395365456376A1716B4DC3D868BD499E240FE672E043
0D93C7C3183CEA9560EE0BBA117B08BB4CC6A715987204E52F4A759B132FD48C
99CEFEDC290F22EC2F67E7013F74563925CCABA9382F8870D72AF9007D01D109
B30B8C680392461366E99385525A1E750B87D2A920F3A7D287490CEF751FA8E1
387FF5A7B2F4BAEF08534FF08A9238FA93D8089ED99D6C7753CBAF26DBCDC23C
E34AC9F35F9BB48CB34134C883D823A92DE8177E6B43C8BFF689C78C25A5C5A4
8D92EF02087E73588FB049735F54D7F4762E0D1B11E9EBEF6C59092E387ADA33
922D8EAC5DFCCE89E90E0C293401BD0CF323F712DB90050258F0F4D3C267CBB8
0E749F29E8C1CDB7014E478A172635E2617DFEA8449CBF1999D333237FB7C8BA
380DF110E1F397AFE3E22CCBC041ED4E12406C80AC57B2EA5111A2DD19DE6E14
CC6C2998C857B347FF49E05A34BDEA17B2291786966B745CFE6D368C9202246D
E3F8957B45074606331A1050FD05D9DAEBA1EA56CCF855DEB471E09DDFCE3A96
70C3D941EB7287944F6F57D42395D50B058E70ED2102E8CB2DA100949CB0F81B
3F0B68A9EFDE41D0B09D0E427FF93B982FF0FA1405567D4A047651CDE0F9C68A
13DD7B633FF1E7122195C195951627C25EBD3087E4039F16E50A9489064C49B2
AFEF42A8E2017E8C7BCE2E3CC0430F8B03C4AA57840DAED9A949F52DD44ADE50
5A32EB5EA94BD90FD059DB742B378DA2425C4B23F073100C97BB5C28EE45C616
AC4285CE391E1F11E86D70DB34376DAC60020B95E3688E6A0EC0E65FB99F9EE0
B538A238702E9EDBF8C6B454A222BDC1A6BBAB1A4AD3CE7C3B84AFF286AB0086
004B9DE0140DA8CC775678124BF16B7590391FA209A929E5D909AAE4E9864A2B
44B1134E3D266687F0CF0F8EB33C1DBDEBC3B48EF366F74C7FD5A579A732B5A8
4F485F9168057D8EE5CBB80AB3033913FB1DD3ADFA63CB864900E53E59A34A25
D58E746A2515128850874395CFF57640479DD24E73541B333C77163263424009
C1C6760A4D6D91FB7D7E59DCCF9219F1AEBBDEEB838516BE696FB7DCE2EE8035
102B684A64CF044680F9CE61B646C52FF5511F7DDC1654BA025F22A52C27BC6D
55C438FEBDC0FDC0C9FBA5036F6C5533B2C724BA423121D1FB982B3F9000409E
E5AA6C52201A66793417515589C9EAF589DF2D37E95339B7DB2A7BD841740DF9
19B4A40E5509AAE4825FD4AF0CC00B818400BCA95242601B14C8AA569A75DF92
B1C60DC865EE4194605BE16BB5E28E9A1FD3BCB5A991196993199AAD24B90199
73EA1D5728EEE2E880B4B525E7BC1145EFA840AF4A2566CBBD710F4FDE36A796
55B5393DB500F6B4B3BD5C799AB1CBE69A7C4E576754046D01C55A4F755610AD
FD8FEAD0F8760703E925C32F1F0D717FA1795F5EC6E3E9F23A6223E527FA1B8A
AAE6B470FDCBC23EA1B0EFF41215EBC6CCA1DDCE839858EEBE0DFB4549E6A5C1
7FF756AD3E360572FFC66204EA6B0B532A81F60CBC4AEB8821437BFCA5031CE4
BC532CB69AD2ABC9FA94F8B18EFE6E7C2822417E1D991D792813DDE06CC9A8CA
D3E832A29970624F54D57C7177880587EB8F7B05E8C79FE8C1E98BAC119CA08C
B56E84789F31105F654FC1E95F10192BA4E4BC25E91254CA8929C46AE4E52167
CFF4302D00853F4F7EDDA13852C39856BFB1001EBACD3EF63A578B14CEBA4CC1
C8C5CFBEE735D731C7929E78B47891BBF2A8CCBA5C45ADFC9DA506D88D1EA0BC
55E8BBB629648F88ED447A4930E6240AE890FFCCD90E60A709A907907F7B47BC
ADC2113750357A9AA8A1BAFB2F67AE609B660FC8DD0C0F2AF085811D1F8CC6E7
33996A96A602D970CC278C58953FFB20867BD457552482FD4136007F1BF27FAC
A86B6867597F952AE97DD7884168E9254581D381949F90CFE6E35AD6BA4DF7CB
17B600C04ECB44607478B88A6E8EBB385E14AD8DBB8366B4A21DD2DD530FF598
83BE3F2222816C7DC76507365BE7AF40F530AD7A2C74F42F3F5DCF4A6B201CAD
1144AE3F9E335F833F13771AEFEA2FDD6E298DF4D8879C19186B94FC232B295C
8A0C839F0FBF2FF1FE7707A89E94EC68F05C7A45522B0ABB640427FC282C07DF
5922BB70B3D62EF8A45408F93AF164C041D2CC9A96C85DC05292334C1ABCB5DC
C26801C0D583F2B340299F67168AF7E61FBCA4CC79F5C46D9300772B71D89DBA
9E34651BA6DA0B99E8937288DBC4F966F703D025E81E91AFBF2EC71720A3B662
8FBD92B2971FBAC5A08991EE45C918E15C3DE8606DDE2B2FAA45EDE7E9809A4F
D4BCEEF0235965AEDB4D911D55696C242C39B5E36ED4BABD960FCCD54B9157C4
51C9E4922116A45F5772B6E6E686715005CFE614A3C2191193B9C323BBA0F1F5
E37EB0E0141A799E3ABCE235F18283107CF1934C41110570DCF9340F82F0E079
F1C797595CA4C0A5AD49FC034C38D1B701E58B1A58B8E1469AB3EEC16D6D0F3D
6D89E0EC901725E12FAB930DAD950319DCCF90AA71E88DF049CD29C5CBE2BBD3
9C250F454FDB5DCFA4E6D39F7F4CD4684E7FEB646515EB8FEF55DB6F2435491A
FBA9107CA92C93D5A1651C475287C09B90A01E96277E9F3A2BE528B17A055666
C526A3A609DBF191B877BA981A02E2B4150EE7BC3D88D88722578BA447F0770C
CF889874B8159DD4651FB8096CE817E7FA10CFA6C7D4DA35DA0BFC9C59FE5ECA
2DC058FB3D9714174515B9A33E39A57E73781B23AD90CDD7967DCD1EE51A3D12
C29422A1A7F4E86D1E1DBB39DDD7F19A78FECBCD96D4C7AB6CE3B3EFB63E84DF
2E938716184586464C2A7E30127BE6186C58B22D797EAF062D822120A18E79EF
63FC9238044132A4A12FA8C95FC01710B4EED7F6F5F0341E49145509A69E7E46
99DEB625FD0B44EC4B3253846D718E15A554FD13E63E3400242412CF7C138345
FBEFF2E13504C7A77C00D1016DEC86C97FD05218950210C5E7BF7AC2526F9936
2C7693B0890DCD0981DF3F7DA02B6833BE94D0DD7A96B3FF181058A150D42568
7B15786091BA6EA31DED50F1DE01EC2CE3B74ED1D5A84360DC9B6ECB05DDE0A4
44585DB79F27C57983D564C1D418AF2095F3525A43C634D86E909631BC299FB2
CF61E138E9CC9AD390B22431E3FDC386D0604B1814A2AF04A1B933C9C9F4006F
2D517AD9E8569D2EBDA2625F7C814E67085528AAB34FE2C93CEBA104C46820A1
68D24703F03D62345F2A9D3006426C568BD48A2756E7ED391887421C6998DB65
E1C2137ED541BB1520F0C781B8FE44C92FE8D226C1E296798928379C3AB30ED2
08A33532FEDB4F24ADB661F757AF663A9FC6339591EA631BBBC05C3DB0FD28D5
16F14C314C8EF36E4E4F3E850F42707C2D3E974D1EB3CBB1856C8B7E685B0ECE
6073D1CB51138687A9A61CFE968CF69FD59EE2AAF640107FAED5103F4E71C109
85E6DE68B0A2A3FA2178EFAD274B7CB643F62E82F23848F64407C727743A465A
583EAD2BB36812E14F77EAFA6F292882C30E37F2FE0A6A33736CA5A00A4B20A3
105B419B0EC8E623C5380BE7119A67774675D8893C8AD1A473A40A3EDF8BA6E1
4E3457690DA9E7AC3124B9AF00A131832757949F76B57F34C18CB75637F6BB62
FEBAE69A29B97465EE188EEC1AFFE8FEEB93D149D72F6D21EFC7DC1CC56266A6
F56EC07545AB05D10D77B89F68E7172D0C5DC4A57CD69ED61A0C2B968C311D05
B4D3D7EA485CE9C0BFC58D83C602381DC23A3017D39FF60627ED55389FF492AC
A40DB24899F20D53B49B19C314748992DEEFDBEE81ECC3BC741BDEF11A8D8C85
86CA84A029D635D85C650A2FB44146E802DCD00A52E96411AE3717D71FD99F1E
227EE28BB1F62E347C07366B8624FF072DCDE50E06C6D4FE41DB7D987CA5DF50
A35A7075E06D14A3540975E3B5F13EC9D460D15CBA43779DEB81FA5F8460B069
B01AE2BA0B7FD454D85D3973CFAF342A53E9BF2BCB01902D20BEAFA30C406D44
3EFEF2323AF602870128208A912963109C33EE461D3A69CA3F0C1F220183C7EA
FDEFA062C7103B9DB2E308EF095D06C3DC89DE481F9EE22994618B8DCB438E31
CC234D4AB72CCDEECCF6E2FF9CE68A0E1D6EBBCA30D9D5E0BB059050444163B2
BD8F949B98D7DCA069758CBF0E6F748A8F702AF74DF35493FBEA5FB1D2679C99
23B47CAC6AE97659E6DAB5853893C9C7C1938F4EF39D38ADA16055B99F6C87BF
79671A87722307DD632CC24B68D4F513C3FCDA126FDE25E9DB2D12BA691BB60F
3FE66254D608EE442014DE5E0750B42855C0D11C0D7708FE624BA8440C382173
215EF9299B1E83A04D2AC9FB0461DC1563258A9AFDA856FEEEFB7BCD5C7C3A04
00C36E79DEDD21E428EF681D5A5E1A8363E71F7C9FCBF160133F05A90169D1A5
CB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD914121E7536ADAC45D25B5C822A2336CD2380B962EECD
87067B67B17FAADA6A7DC0C81155F89A24B00F079E15412A02615B56BCDDEB8E
68096015F5498DBCF55453A1FA4D7576144F5E56B96A6754C10A7CF0C7CC4D4E
F62EBF6CDFD17640BBD5AC1B23C3F46E77E9AB8D8989F1EB54005ED80964BB9C
7DEB8602373C23451DD6D23B50BA1A7B2A17E1A8397AD291A3380AA884E7CB26
A243D7AA497B71C1E241F728FEF7AE18923D4E4EF922719BEA95A88E93D13023
3A518B48040D40CBF94EA8E15DF7F0D97F71AEF4AE5AA2409548C3FA69105168
9741CF3E4A01E7632E4A89ED435F4F843AEB0DE2D08746E18A70133670FB9B6E
9F731B075C021DB2F0DC106177F0F23DA7330604D0E557EE03662BD31AF90587
A45AE742E8C9F3648B20C687D77FF83C5898C718A1E73AA06340D67AF3D0B452
5D7DEEE210A4239DA49D23EC2BB5E90B87682AB0267EBB3BDACCEBD717AF3271
DD9D0788F333A71FFE65DCCA47FBB31392FE4F5F94724C1B4B5EA572D3FE1289
FBB4C85DDF72F5F6B01E30B2D9F88A521B47C6DA9DBF0F87E5F9CC7BE01927BD
85A77F1CC33CCE480B3B81118510A06852EBDFC8B36B5106F39EEA082A9C50A0
57776D363F68E42CE70C176517F8F13EEBD103E038CAC430E4350E4C3DC89D78
925533ECC71B411C533A5CC6E235B63CEF024C8BA29295110CAB27A95C5FE00D
11D395303092E064F9EBB05F4A7C4FBCB4D2669757817C7537E78F4E49A395A0
0CF4E1E9283BA043BB732AC06C381F7B87B76676866869F882BDCD313002403B
F26BCB3F8BE84904FD5FFC31EDF78271ED4545B07C538A5B2EC9BA14A0944E37
BB3F546D512E3E6AABFC1D6F2939E66AFC76FDE54BE1956BF9A8EEAD330DC393
8CA9779D3D4A695A7A04D5A51CB2A1B8C642597373C612E87B273DB68A4A83F1
390445F7BFB66198ED9793D2F90CD7D79F27B15F50FD125C5B8B1226C5616091
4266B1D28D74185B0E0FAC89BECF0A9DA5D63471EBF5739689B9658F75B4746F
0788B6845AC2A83A6264406B36A46E7DD0F0C8B8EA7B18FBA4D0E01C25CA3751
047547D99EED11AEFDF7FE421F981BCC59ABDC30CF9725C7679721976F0D0347
1081573C31DF75579CD24CCB5A7CE967062F19345B9C2B74D4FEEB470DCB239E
F9D2771EDD2A4BDD22F82ECCF9831616C926D616D11FD3302153ECFA01B98320
57046E9B39B3D8D3959AF1F3B22759DDB2EED83A2266C188D095A56FF81A199C
0540936E5B93CEB92100E55FAE9C25DF33D427DCBA1F1B36DE81738D1F6875C7
89CFA650EA7673C16A050D36BC884EADB9A7A40FB2096EE5DAC923CDB86E5B01
BEE566EFC53A6C0F546A7E2FA8A481581B815C4A011443ECFF92062FC963AF55
9C5D4B1523B5EA22A1890B785D302C38EF8C02F86120E587F7F3E25E332849EC
E66F8102383F02F7401C3481B529E3E0EF971E2636028109A1C63F58957883B5
D74BFF42EA5DF6F56CFB6FDA12DD94D5837F8101D3D65F56FC73B3FAB479D9B1
66D442B6640CE02C62C4CE72A35BFF155F653A26842C9832772C15EB82E86734
FF9C269DCEDB3A56E2584273230485F18113D43E7261CF3603D25FBA0A67BA43
D6851AD4CD3BC739AE2E22CCC181D8698F4C6FA5667BE5D25FFF2E69922C496C
B4EFE3BDF641FEAD8F8A00E390D5F67CBF6650C0822EFD65FB831CF4EC928249
056B0E8E512EF9D135FFD99F7B12D202D1FAD4E4561EE99EA545D3E30F833EE3
10ED0B6E1698F96770A69A09D0DA43B3B6D093987C524813D7E44B5E0A42B923
95E80A77ED62733ED904B7FFBB8A539A5A7870C9521A69E792093D1F921179D0
EE68DC28EC3E028B2C3F07A2A21D43EBD2185652FA2E39A58EA63476CAA42721
92BA0698626B942DDEE91AF18427CA61F1FD7081F840EF22585401B3CBAAEC82
7EC5884399B3CF76512E8B4160979403455C44FD9AAE7E228A0221319CE786D1
E24A8B87C5B5DF787DD65949AE1B082E3F5B20BF645BD2A7E6AB7C562B63DAC1
B073442BE7A1A8C56462C7AC76F1F0CF182BF5D95A135B9CFF91A00037A30253
64DBA867826D831ADA61B11F5EC2A7D2C1CEE14D1A67BCB8C03DE8071E3C8366
7441D2CC9DA8A7E239B7882556FA82C0DD92E3E329CFC4E2B36E704F5A2E99A7
CBCE6682A23E22A3B0DC696248FABE1876F93CA24CEA8F71E33DA88637C818B1
CF698B05EAF01B5342B8752BBF75E6FC14F3EFFD282311E889CCFA7519DBB19F
4594560C83A50F0733AB3264B55E03AC61818DCDDD6A2FCFB914737AA5CEA6BD
1810DB78052DCD299EEB9429507E9947EEE2B94EBC03B25993FC39020072C761
06AE1AB4EAC6FB4A789EB88F31D5F2337EAB4F70211D3712EFFC2E3FE1428B2D
AA1853FEE27EF30CB0A497C2813663D33205454A1A4B2D9173D593615C445981
CA4FCCA8483943FEFD671409BBB2769C8ABD0E1D2BDC1B50C64747E1C99FB6B9
8A20C530C9BD04C4512F5322572CC74BFB60D38C2AA57222632D6AB77D358982
78C9F788B1C2B92F34A76F1C7A7102779082F718B9B616E07B5DFC25F6092837
52C076E13A8D1AAFF5A9FBFB8AD210C285C6EF42679E8518074632F6BB0639E2
AA1DBBF34708FDB80374FD5E7835848FBD6FD2D9F5DB697025642F2553ED0EEB
16FE29197193F5417C3912D85A03051D932D40EF2DFDF53A8AEDA26686CA6EFB
E32940DFE84C9038E62266525677BF031260CEFBADE074109B946271F2CFBB6F
A6CD9F406A4292DA919BF7DE78BAC68002828A0B8F207A9F33AD1BCC21592261
A181A527BAA2AD4F426E594CB35E312710D48AD36C3936320DF2C4113755D38F
0B959DD34D98A0D0401AD31560C57B0D922B8384813E560211473610D33CF753
900FFFC8892DA1D9E5D3042D125734EB53A8090EE56338E3475851AFE225349B
D9936E274ED7A5CFCC0057D719F666B3F4FD6493CA2A307B3D99A7E2A0E8BC3D
C937E1EDFAABFE069E371FDBB88E24E61EF1A4425F9218A5ED3DC91E5E50CE59
BF04C72EB674E5C394D0D22258A37AAC3AE51CEFD4CA263FCFD9B41A4BF1D71C
8C6D560EDDD8A901220A97E3BDD89944986C15BEF3EA705E77AEC7686E7239AE
6BEF8873E2414668CB1B6F29225D3F1730662979FD709E8ED21757A638B2E6B4
AF9D5C83C94E701922AACC8882547AC619B71532B552E56D3F05CA0DFF5AB1BA
1C0D6444AFF9AA7F7138EA043883C3FE759DC1E6400EDEE1D79081462E3701D4
87840301B22A3F138D3B45D2739DECDDCDED8E9BADC13482F2F6B0E45E4BE3E2
7CECE324917C5A99F4A32499559A64768B17FECFA7C2E70A4086F25183DAA9D8
861E08EBA1C8F911AEDE793A435F04B0A8BFEE7C64ED56B902B8F085FC7A5857
6F23CD19CEF83ED66EABA8CF152A1A1B2A24D34C45E7B9EC8730E60E02CA72E2
EFD7ECAB8BC181C830599502D7744DEBF04607D221BB041EBDC55E340B37288C
A08255BCDFD9CA2916B54B0A1F4B380BBDD32E828091F08A979A57E42CB409B9
585671336123D4DF44958A1F7695ECE82296DF0D272C713BA3B611AD6EEF8E1E
163013D1EEA9169854BEA1B8817493916FF8631ACAF5B3A1AA57F157C5239A21
3AD9761A8E039146F1A6FE3EAEDC5E2229235B0C08BE14B7747A8C2F31A43392
62C83638A55FCEAB5F7D8D8E111AFF165F81A84B409EFD52CAB7B107937DCB6F
308657D62DC3F52A06E7523B1E8E52A26D5879623898B61B0CA3D75F6943FC34
C1D52D62886E7D1782813C55CBDBECE69835137D4D76FF920AC327702B132335
FF288ADF62578F30CDCCCF826E4FE08645E1F5AC047A8204F464CF29A60BA4DE
AE3FFFD292DD49D77B928F1470EA702423E369484A4945CE4A2DCC60B162D9AF
2B90DC7A43EA830ECF6D6772E5E77D6B4F552622CD181FFCE8712B2D4723E484
772E5CFFD236792D1F6C9752E7356EEA8FB8E036E4E671E52588E112441AFA10
C69AD5034FC9856112429267999EA3548D2BBC88B876C71B13A737A00B245A15
71E9CBB63FB2EBF7815C1AB2851588C367EB91FDE0F320FF41E45F6073E4E319
164764D83577FFB50B7976A5BD188036F0ABBEF31830250CC03493B12594C202
8BE191D58D0BF8530AB6AC36B6BB7D5985611C95E3DB481F69C517374702CA8E
5722F0557CD847704791EB1068D0C523DBB843CAF0DB92669E392D15131D86F9
DBD898FE9EEAB4E3C8B1BE432B7F9946F2DBA4FA83EDF6A6CD3BCBB0AB202B0C
6C292A3A5010975536EEF28F9B03CA4C49221E676C8467B55C8FD2082183D51A
95456A761655D006138CEA62A5AF1A0C789F7273C70EE12434BBB59E91422D09
0457DD24559829577BF4A90C0A7A3716E46F464A198EBEE6C1FE8333024C4A3E
18583FB08922F007FB1F6127A9A61CC065EAB46B72FFD337D62DEA0EECDAC0AC
C8C1B258E13CC9E8B0B5BF7C93F1B7E133F3CE574A44A0C8B129D6E509181B89
D50AEC191452162BAEB866B17CE6792930C31135D99C0F144261391B4EDE0BCE
9B255D18B359DA6A201B2AA82E0B1F5CABE244D87135418930C698CB5F94DC3A
A4457B293ABCACCB2915A925B1655FC303B5EF5F92D80AEAC2CF58EC01BD61D7
CB962C4EA67DD924E63FCE4B2955A9C7950E7043D775066794A2DA0E21E7671F
9C4B189830EE8D14F60C0B87DDD481DA478CDA9B9A5F87ED3D870BEE3C9F8692
AF81C932BBBE93F4D2D091A2C4BCA6B90B4A5C5E47F999DC291B0F002A0A80ED
444EA33B01A22F873D195661CA3A1BBAEA7BCB495C01E71C0A4414DA781D4972
0DC88187A0F82B0BEE90303E2C9611CE4C3F21137710209806D7C3E7739FF065
5792518DB9EB523CFDB347EAE7611E3C332FD10EF7D4BACC53823F4F7EDDA138
52C352BE7DCD8FF3A61799D63BDD6706C5B8623C5878851829764ECD7CEEE9FF
A5C9EC2A5985EF99E3302B40CEB35592BBEB7BC05AE15079EE566C037EC5139A
E5F97CC27F2840FA366F1E2283CAA1CE05EAD99CEEF4E3A931BD5EF07485FE4D
B5B47A20BE23F6CC868ABB2CE5B2C145DAE2B6128E6C913C8812CC8BBF9DF7C7
7342796363A7B6B294CE26DBB9179DC15B87E1217FAC6ABF3636ED201011F687
AA6A1FA145DBB33A55DBD446335287E949B2DA904E763BE2FC0783B380055204
393280DDACCACC06200A8ACD28DB743BC92B2EC3F6D8CE6A799B6B82237888B1
1225F94FB7236008E70CC4A49FEE2194A490DCFBAF3965F5BBEDE611A399ADC6
8CC498A9AFDEBAE7BF7A16F17D777CFA2845AAA1BA4C17BF640D2A029345083E
AB5CDA6A718E0E543A25895ED84310BE2400875FE659558FEE5CC4220F3EAC70
DB16034416FCE7C04A3D4F71D8B2FEBC7016E5CFE1126F4294DDE5AD91E1779F
40E45B2F8A180D8DECFA4D3A5899EBC0B99FE53DDE4236CE60B5DA2BA595B36F
064BC87C5BCF0FDDEE7FD76D0919287E67F613388EF32D92729B9C21623BD5FF
A342E0995AC9DD10D3BB974C0C92B89BF728B6BD03C5A92822C9853A204FC7DE
2392905875FC28D07872F48FED6D1FFE2ACB9624AEB7824D5B0AE928DA1E4073
F2400FAA3547A8770A4C835ED0BE381CA8423F9E792CB7C220C93458EF562670
AEF2CC724BEBCE5172ACD5C2F5178697FF7D6070BF2E49EDA9528B7D8F8724EA
DAB1EA2DE9F4D8699D7313FD9858C8219FE24BDAC7E32110282FB5B9CBC2E666
A5693C95962D6AC49F31A5D39135CC8D7625FD52716CDDE73E441BAC714E8769
A512D05CF9D7D5626AD76DF2315FF8625ADC0F6861B94D712AFC36194FF80081
6662873464594EBF58A0B38A156331EEAA0D0BC69A8945010FCBF2F325EF7954
A5E8E445FD98201ECD2F9FA551695D849A34A76E3E3EBB629C16842398C0FE60
E8323B4C13236CBCC78A8F93CC75F90C9189297BEEE4355FCF608CD94CE466C1
FC3EDAEA3ED25C96FE89A7CF20FCEA9ECF43B02073C51A2E904ABF09B3E6FAB3
0DA7F1C54F797DD77D914D1CA90A891506E015F46C94312290EC23C82215284C
372A8527186EAAC064AA1A5B3C741DAAAA1E86BB937E35BE1811C42D851229D0
720F34770981C5F5D55CA10F93D53C35497F93A5550CD9DE28404D7493757530
AF7AD352563063A1A6B764F66CE61D145A8FADB3B163252BEBF1BD3F2A2300B5
0392C923A50DAEF0551EBBE8B2E16CCC5EFD174057C781DFD270EE4693CE91AA
7CB06D15F07AD79D6C0ED1A722A10690EA34C9CD4320993CB5D9CBDC8F852200
1F82A16CE307F175B786576DC46136E789DFBB551AE2C2838982303318B9B350
E614938B3324E67788D1EF8C9E48A54998D814DD941B51BAEEFEE73149E7BD8C
20B7796749FD662131D12BB97A67CBB33FC157518D34346C1A43A51A97C57725
2EE3797A7675CDBD7282B6F1E814F280483A55C252B3316427D6837CEB894FC5
4AD1A218DE34716DD5BAC4815D7AC290B203FEC93C2A55B85A45990EDC7897E3
FD01E0122F9C0297239DB3C1D1AFB06DD6AFF8A9A814589EF4AC3DEBED0BAB63
6582D103823BEAC6FE0A2813A352B099C7AEF418EF47ACD1255068A21969742C
55D97F1DC74B909B92A16E8AE2275E83777297529C5ED2573FDA847DC877BAF5
C7A30679179E92036B9FCEC9F2DE7421A12F6E9438E4F5075931668B04698B3C
BE8F262043BFA254334665D68CFF6687283D2BF372801684D2C3354212DB70F0
ABF9A7691A4F7A75CAA5CBA0CFA815C7966E9212C5B8E5487DC255D76461BCA9
0389032FE6682EB04C0128CDCB4D31C8E5E6DB585C2DD28B5C0305C968BE5F5A
3D158B30253C166B90C47B6B6ED24B0288F8BAF1BBA4BA5B1957B2AC35ABF77E
1625C50C8D4D86AE19E30E55716E15A3F345F395F32CED2CB15B87902E04E196
54DDD2FB69E0425E6B527C4E25D28CDE453EF7A4E099B93580A51EC039AF5DA5
8C53421D968C241C486AEFA896DC05E3B48CF2FFECC694D26DD4BD2E4B4AC243
91122EF37F8990C6858F1F681499465587BB17D4F25AB9ECBD3C385C7D533D07
AD8FDDF9B006D667EC7C66A919321FFC39B45170B30CF5301148D3FF60C0D208
A8233A0200CF7F8E68B2FC433139132A62240BB9C4839AE787FD25487D6E76B4
C0B7DB389F3BF0C66490127D2A094F8C35DB59728BA3A8BA4970CF6C8FDB960B
9C354FD8243991776C13384D3DA97BFEED74171757769C8BEA7D15C90F898AC5
536B3B1EA39562D7696579D87AB2EE66E2D80EF7C7866BA9DEA8322EAA055056
70EBC3A5C12324C2DC2D0810206BBE5A325D71B906C42B92571D1CB2958569D4
AA2150CE9C03A963704A3B62EF6B911F54C201E4F62781E484AB485FDD7C68D2
F683912C731F1A77DBFF8FE3569735B6D2645F8EA27F25C4422B243192B9041E
EB81D839DF8853FCBC487EFBC6900C49CC03F4B769A90BF07B2D12BC8A17FE3C
89841584D5BF8D58CE5E34B90FEB83F7C21236570539BF9B5C30C0E371945CCD
26582E062F4FA37FC87A9D3AD3DED4F1EB82180D4C56543BCB1AE8B9A31FACC5
55178A7A9CABE855B0FCE5CF6A6877852BB4DD4FC0429AAEE0A157C20D980BBE
C09869D7AFF2C234A3C6121A26F6F661473613AE10E6C7EC319963EE67E7C2B1
1F89A33FAA0EBE357DA086D7DE84CF88EAB50618D08F7EDFE6124295E3A4A5C1
7DE6823755F59BB9E3A052F69C780F5ED70BF27D33F234424570C58327093E1B
BFCA3FB51F34CA3A858CE09E4587B808417B54E603A6E083BDDB9E7DD9351BD5
8EC7B28C4DFBB75F82EA4D797568761CBA3AEB542E5BB4D820B1DB4E2202A857
18270018A852D516BE19388DDF3C5B474F5374D80D469AED90BA08D8A72C5411
01A86C133AC3DB55A9E5FE694E06A730167C1651F74C73F285C68918DBDBC482
E13FE8ADDF86B859B45AC3A3B2403EEFBA17DD1D2F853285E4CB043EE50FC18B
9323EE4C860FFB033568731F7023CD812A9FE5B56098D26F51801CFF42FE6B4F
05BA65BC1BC741D529C5C10F6F2FD07C40D53B43B5318A608495EE6AFBBCE8D8
46DAE64D96956C67CF6C271326A2E7B313EBC42A068CCD0679D412A5D63166AD
DB5CB1508152B0AC92CBCA5E1285AA1017C69FE17EC174F4D554449C60BA8DE1
55B2246112743572F23E1751D1978A1D3ECDBFA157EFA291F7837CF697A1834E
79761C40DBE2A9AD81F7002A27F2EDE3459E49C277E78B1A03711ACD7355594B
806021459FB6F81F2408C14677A6C80746117F7A46FA312C0BF7140BEE573BDB
E64516ACB27DA792815D9824F41E81BB30EA67F5A9C6A20FA9D29C3C72EDED88
4CA9321BDC6EE944C5EE7644A2231916A90F3B8A854B7EF90FA0DFA208E4C47A
EE28242FE70B5F523A8B2E7812E325EA858A25C26ABBC4C25D08E3A92BBC7925
2FA79EAFE5533AA647964242105DE1C68745073E79C2A7927C468EAA3947DD45
3FE88C13A71FE1C0DA907A17868AACF3229C176FC26BFBE255AD614707368691
86AA71F0C1ADF3AA8290123A8B67E6AE0B44F5590FCE796384A40D80A34E81D8
2A3505EF6B7D15FAE0009498DB2CFCA285E3A8683AAED685780F3F598F8789C7
C6E030FDFA52A4A0DD1FA6C44AC165850765B3929FA8612F0879B86426F794B2
A19CE34F561C0F16F2646B5867D0EA3446F4FA176517141B75FA51F69D54447A
1731054F5810B772FE37524027FB1807E2EBB95CBA430D1B4F8175E5232D6644
A2260837F172756F06AD294DAE73AB4B49D7CFAB66AC05B12095D7F1298F8053
6BD24E6421A437931A2EBD816C7AC81F42E9372DE5AF67187723F94CC4DCCFA7
D52DEA507E5D026AAE08682593064433FBDF35BA06E80AA6BE0A001415F38123
6D5876AD4E7B572C44DC36C236272FD4CDFC8923B80543E5C66EEC03C5E79258
9DC8B9172A0752D4E0EF8B8C63299CC346E5399237AD01061BCDE92EF88DF3CD
9B962A65FB09C26DFB2A0D2146951138D6FA6A92D2DCB49F8398625A356D1B21
6F57E649801411B93613AE10E6C7EC31996729F72651DB44BC63C5E50C9DEED6
87E06F23A0D0ED9586A23E22A3B0DC696248FABE1876F93CA24CEA8F75394160
980EFA1C84D5348740B8A4885ABE1FC79E81913A2D61668F7F6E96C8E7829242
F1E05AA1A3BA678F4234A00771EC0FEFE058B9944292ADF21511621F53D54F5A
2EC5D74FA1FBFB1C177AED502F9F054D68CB91DE65CFAAAF3616C49C07BEDA6A
2349283F0AF62704F47A967062FB0F2F0056228FE28DB2DF160599E3A9452213
3EBFC60362D355933650EC8C92E3CD1667F35F9666BF2FAA67595E9A52B3D8AC
1E8FC11E22707E26253E1AA577593582FD226B1369975F6276B34A7453D932AE
04BA8AA9FCD58D4F8CBC00199B1E265B3DC015029A4189E4FF1B92392ABC25BA
A1ABE59A48F46683AE927088B156A8DD56E3B4BDE678D0712508C2D493788422
75701D9CB126A292DC3E43432CB3F9B7DF88E28C60B0640FE67FE795C236701D
0C4F7211B5B5CC0A348F325F3E455317848A19172079EF21F73ABC121D8DB439
21FF40006597DBC72BFD62A9A773A525380B61C7DE87CB740D0BDFE486009230
DEE742311FE4BE262660F33321AECF7862664E5F87E9B36C6A176F6C48EB9546
ABB29BAE08654BEDFE5ECF35BCAE8EF5FA845DCBA084E4EA827ABB5E76B886EF
0063D57C1CAA5CFD9004575AA9F1AB91191B962D64D205F8018B3FF7652DFB5B
836BFA9050042921C72B8D082794ADE159725480EAB33FDF27CC3291F8C09608
46D35AA02817E893DF04072B5D76AFE97A87CF71BFAF266E72D994731C0513A2
0ED79233548C37269B71E48E02AC027C2668E1663315B430D1C80D2D39F88E87
D4554A84ED889C23B903B1D4A9906F3EAC5DE29FF4E6F14E87E48555FB4E2D52
7FBF80D86BDC60DB268EAE4450B761E19A377D80FCCAF634AE7A1D21B652818A
ABE247C5D563E17CC61B32DC0FA9B000C5E6346C5D732DF9726C27384ACF3401
4D72EC10A79838D648B56545824357824EE9B7DA42A5F0E50DF18C110B9940DB
7C6024E885051C89757197624068EE836036C4EA4F42D2DF38878E68671DD13E
01433F2F6E811FACD2E1727190539E12540F013DFDA4272FCF1191713B33983B
E6202E89777695B9CDF0E3E671A8BB4EFD6C6DE4086836F54284D6DB46BA9856
A16B74D2B54D37ACB2802C8521AB6B8FC85ABE689B800B8365F09F8ADB382FD9
BBF6760D67B53706A450EF53FBB966763DE87DC295D40C7F31F7B91923F0511E
A1FC0941BADF67DC1DB86C1FAB337C3EAF5FEE2AA93FD2247029D55D9FA528CF
785658ED8E5B44889B553AB3021AE0C0715D60E8D376DD800F7362CFA24BB2F3
D4EF7D39E1902C53053C228B4066D9ECB58F8095D33B8396AE9B26342CC1D2A2
826F6EFFC003AAFCCF7DA4C367EF075256650181E23BC9C09E4CD65561E2E560
8200B86DDC18C5C81A4E75F8E5B95FDCC0FC6453406CEE1E199A2ADF708DDDCA
EA17D16E0FDF023342C9FC75F522C40645058A7E9FA37598997157AB004061DF
4EAD87057833F9CF3C9D174083F062221DB54DFEC01D96FBD7D076357FD85F26
EEF6C10AAEE8888ED60E3AF7B679228139BF6DA9A74948C3504D19ABDEBBCA49
EB4131D9796D5E9A6CCA98D3BAAA326A79224CD1D2B4A1367A5A069751D45FB4
73FD3CF2999563B898D98A4B83A2FCCAFDCC869DD916C5CBF812D3F520AEB603
1BBF74C3D3095B2DB5108BEC9C46CB95FEF4DE97A34EF4DA60248130F81F4EDC
871BBF6CCBEF41837678A542E8106C10865CB7AE7BC12E7615988EF6A5FB57FF
8AA476D9F0942E0AEBE6BD0EFD1F37687B723EB4218397579CD2E0064E5832E8
60F937F033783A442321909C4046D12CBCD0A3335CCD7758BB7AD06843E35E01
01186B37B5B72740AC92CC2F0EFB3B37149FA050E83F5685D24D88904AD23D3F
FBF1AFBF1164062F545BE743C6E2602DE3DA6F20B5957F6F748928F9156100AF
21730AD52E8A7F771483C26BB2F7622736A0FDD2D813AB436C474D09F2EA8236
360548F75D58748E3BB67519F20864A74623E5278DC12151835699E6C1C06070
B1A215D2D34931E96950E83E418B529E91F61FDCBCA6456FE76D34AD5D4D314F
CC538984EDC70EE0817A87BCF89071C9EB5BEB228C5A1BDB415F80A4CCCF65E9
F34E4D09B3E7D97174925A908E1E9E3FF3FA07B4FE17C4718C0547FD9B19E74D
0E18F6908E4528065F692A173D1578300B5AE51FE74952CDC9D40D9B1A32371D
5AA41ED7303D15E633A518E3E329C40BFA2C5B33563F2AF6C28E0385E17E680A
D553E283775875126F296BF3BFEA757EA7676D23FC0E90F03456E1231CFB3CC4
E50700CBEED2908CBA3FD3A288E01E2B9173557BD09FD6174699A1AF04E3C3F0
0E776079A79D9BFE1996455985DF1515077A8CE5BD7B6F4912D8BF877A487B25
2B5C88103B4FC37E8EE4EF7F2450F67A96D44A2CC71B3B327EB988C0D9DB3032
4F35E3F41F7FCBEC699C2392CC420C7CB2034E440AF248939790081C2D4760DF
BE929FECAB4F22E508B581D7F48C1526E3672371C6DEB96170BC4077E03B5247
00CCC455A521EFDAB11378FA57CAB556A4F114F149C32C312C7FE7A7AD55991F
E366E1D0CBAEAC71702285757CA11233A368C666168D45B8D27B595659818E27
8676A8577B52FE7EF7BDA438AA6C69E4568C497DF7206663C717536ACC410871
C952C783144C542046E6794526871B2C50F5B279CAF980DDCB7B8A63E3BF752C
DB25D581ABB8022E13C0E2E4FB3051B3684E4A333DA873DFA58FC99E7B93748B
7B0B7D5F050B809C364555661E3D272FF301608967581C38905B333CCF344D42
5616D0CC4B007EC9B5F8E0E2CDDCEE93246DC5D6C0E5FC672BE0200B7448CDEC
0E7D7226A6950C452FDADCA2233B86CC2897C588A09FDB14647F570BBEE55DC7
F2AED3E1A2DC3D0A32CFC097B05F9D90CC4B614AE7F58F3BFBA6459768372CC0
E84BCA86276BDBA191466083845E134841FBC7C446AD7AD4B729CC8A83FE931F
3FAA1BF231CB8CA3E04E291EE8E9E19ED316C9751654A3CD885FDED7BA594A04
C8A90B658A61B785B8AEFE9DBA015D717D4CB661F886966601C53826AE170748
80519DE36B7F9F0AEDF3AFDC577DF8F4B125C0BAC2EA874D558B0F46BE43AF7B
F24E83A08486E779A149C3C0D7EE148C9CA5593897B871697F1DB6E55F2EBB23
1F88BFE9882F3847A8138BC58A40EB1CDFFDB901F93C044C87B3CD95AF693EE8
677CFF3D6CBEE77CF13B4BE73E9CC292F791A053919AD9CBF4029F6829A6B55D
CA4DB5036675013A692E00A9FD19421FA0D6027EF8C615112A29AD57AF9DCF94
E151D3886721A29D973D1F8C896E30AE8A5DB5599E3A3661EB72774923AC44C8
2D135453BD56678689754F0DF344DBFF489E44C5390BA39A0DE5721202702394
4DD1FA941D5404E168882E7A8D19838D3B0D2E3FE7A0A34BEF0D922DDEE91AF1
8427CA61F1FD7081F840EF2258540759C5CB59E973BB06E726DBE53834FFFAC3
53D691D77AF3575259715B293A3D7E844764F84B88D997BA5C7B78D11516AECA
C39144DC9332AB0C22D462865A8315C986009F1EAC33605FFF98C7D011DAF6ED
1AE0ECE6A43A78451725AEF973E3F4E5F1A14EBF827DCA38CBF9A44C77338112
24409FDD3819C98C395DD7C3AD05DC5ED1B38F54977B17BDC34F34DA91337E54
69B32C9ED1980C4CB1840D7250CFFAD98DD1C3AB3D525F6DA70A332C61623DC5
C5C4277079D25627DCD5E40E3E202D71769340728631532D07896534AD7BCA23
3A7D21FDCC48F92986F5141217E1BB3713F94D198424FF07A0D1ED3B50A1FCD2
9F855736F629B7793C8FDACE927C8FBE090DFFAEFF60814811265D1BDC9AD9DF
4202E2704E2D855D46F32DE17EFF0AEBA7F76CD61AC53096FAA3425090497B76
76146E5D4D225AF63F50ED7799609AE871DAE4F8D0361EB39EF300952F48F61E
0B528F4873A53214B80D797AB7E392CFF61E78EBBC6C56A8E448153895A30B4A
82AF5946FA1EE71FF64CBB5D6143C9E43AEC10B32417B39B9A83E95B5F8EFFC4
E2DFB76CAEF16CD3EC1B045ABD80A941E8D4C071EBFB43D84299D336736B15B0
5591122AE51D1174B743AEDD72B66B8DFF757D05048CCF86D9C2503E2ACF7BDA
8F84B4089802A732F2AFC037D6B41BD233860AF8EDF5142F182D1D02504BED42
472B74E8F6E1B541E44102B078FF19363D6C5888293EB8B7AC7E9993541A3C27
E52E2D85938BA3F031B6383E1D780A8128664A8F1143B6058172DED8AB858A37
08405E2A42E5C47B6FB43423528085A0849F14EB0E7D209E507D6D8C32671862
B1BEFCD3B390599F630C25FEAA3359A90834F4A5C6383A1ECF8301CA929433E1
F250004CDCF12745359AE31AE039BD15341E42E6366E02817082BE6FE0B04249
A4840FACA5D7053A236404661DE55E772F5982E78CCADCFD0C8A97A5372BD855
78E1D63F8ECF3462CBAA35C3F6DA412DCDB19862BC10FECE4321EAB500552534
2C7441E2612B3E12E34090D278D7151D59D40D28184F00034AF1BCE6EADB326C
4323F499565020467A2F2E305D6C518ACCC962D69CEC2F78116EC8583ABEEB71
D9592AFE1D648DE2091A8638431CE2A93113031EB40F0EACF90949369B2F026C
152A214B85D77EA7DD6CE114837E29501C77CFE082E0C3057C9007EE185EEC0D
E8940EDE7A1DD87E205DAA4E88426DC433391AB62250D7C4C702A0D45D4312F7
FF021EF6562F86B2E79436038BB2D1B4E72EDA1892720CB3AE2E0B1F5CABE244
D8F1F6D29DB3997620BB2B71E5A883D850F4F7E5F3A3B3D2F64D8C9A780CE75C
1ECF3952C2AE0E9177DB0B86627B9DE43A7CAC25E8A1DDBC7F234E41EA7F65D4
4137C8A4E66A1177A2269AE20E0B9A3D0CE34CB2B48DB39EAD4D6A8939194DB0
FB0DE379D855002931AB82AEDD0BDA2953ED797E7569F71565AEC90CBBC62A28
EA9AE7ACECFFFB3A226AE4E251F1F99AFC44E49D23BF85ABB2031EC08E44F09A
3B24E4E4CE050577096AC9FFF055B087C94886F0C838990E66EFA96E06A975D2
C77A9E4B76689F6FC544FDD4A65861C14C1434DDDB17F52681C14DE689A8C6F2
576DB779DA5064C30AB4820157A9D93B6B6511AB4FF1A435EF8D03A4E296884F
BB23B636DEC931E87F4BF5F39840266A3ECAF38D4F0B725F50C0CC1C0B40C04D
1680D51033154CDEFFCA6A4DD31E07BA3954B288CD9232F88633A933830B45D6
355CC753581597B69E752603992965170D2945846AC61B97A1B020389DEB8841
CB34E59B660CAF50371D69888A0E30F8841589FE146D0525DF5FB31C974FC3B5
7969265C64C813191764C9BA8B47371D202C7DBEE606134662722BAF78DE86A4
0ED5DBDE8B5E537B68A693ADD3BBFAAAB871ECDD9C87C2352AB057C78C12B423
635C670FE21ECF5CCA202965C0AB8D6671564F796B070A2B371AF9EFB65FECBD
A4BB89EDFAE2D6A52C31C01B3AD72DDD8806BE4D1495247B1EC6571E5D15825D
479AF0E6EDE30F587EE5AE0B439EFC837C99B422FCEF96B5C7F91CDE0E3BBD2C
297D25B4BE338AE55A86F9BDDB2548C635779B8C60627E06B99C73D440591249
C8468ADAF74761C1E281A9DD4D8B87CFB4AA3E3F00080AEC3F0AA14FD25B61F3
231D1EA86607CC7EE79F2BB60C5EF4AF15C3412630C9A1809435FEF402FE317F
AB705146DA13AADA0F26A14828C05A97EDEB2DE77939300D8244CD675D0EFB66
D16D42B8634B19F2134FD1A34C8334E1CF5D31DB1CAABC34C783D8B7162B0D09
4CB5DD44E6AE702FDC9D38024631A2271F032039F412F71DBCF5EE596AD5B763
25BCE9DDBE9C697C5D32A76F096ECAAFC065535AB32B285AA8B960C86C7DB62E
CB4EDD7544FD3FF04EFEC96FAF4620B791DB1A56767B0A22F335A7A5AD395D68
1A059F042BD12658B7FF166C507B49AAF6FA4A71C74683F2BDC454982F4503E3
C6900F66C1307DE0DF1816E435F38CDA2AA54AA1B3BE277E804C6BA17F299172
AC3A4A3FC072B9F001DE4C2236D33C447ED04ACA9DBA348076F8E137B1022425
1203763DC185708039F299BE6BABA56EB10FCBE8B0B5BF7C93F1B7E133F3CE57
4A44A0C8B129D35D8E98D5A9292428B9368284EDCDE7B6926FA86E4860BD85E3
A2D1A275297514E762C01CD9930799BDAA3C052C4B681630367BE8E18BCB3999
23CAAD1FA80328613AA4EEDC41A0488BD81A96995486E14DD40726C5DB3857D8
DB864E1C505E451409F058BBFC0301087271EE7DCA99EF1AD94FCD6D37324680
4BA5F2171C5C56B6562A163F48CD49BCCFB65347FD1767DFDB6F85337F7B3998
20D3D1B92E0D08B03A114275D2FD721D8FF2CE1C8897D79E69A991719A5DAC9C
D0B0EE7DE5F5722BD715DF2C19699BCC17F19F5255E594ABF60D9EDEBC898BFE
8CFA991D0823FA5051B3D743AFEFD90A9A9AECDCE9993C761E7DA340628F8FC7
B19054CF4917BC54655EBA7CAAA8578DEF0E3E1EEE071641F9F1ADF7F8CC1F53
B2FA4BD429040A33554DB6054321A98DD7FE25DDEB0B6743902EF7E5D7B0B0A8
BE368C54802B719F0926B3864CF2A858130044D5719BE51EA4DED86D7A4B06AE
62A2771727EDE64EB2BCACA4693DF0370A98042E527BD65EC1E77D32A56EE1D5
5D0D712E617802976F8F223C8ADDCA895309CAA78E42749F90FDDDC8CCD31B7A
DE7D90470AA749FA5D4B24ED5C68257D75A455702A4E56A3BE26B08264533901
BF8D837D072CEE580FA9A741026FD76EF7A00B67819909DD9BE9DE529BB45858
65A00FB122EF507C2069ECAAD5D7C14095298EDCFA5A018474F811BAA904267A
A548EDB172BE416FEA0D359CBE04C83230BF3F1AC0969AAB69DEE53E5ACB468A
187E2AED2D268CBAC815709316A82DDE57B91032986423BE1A589D2ED43BA77A
225D1DD9BCBCC35182826B99DC9B1615E5C5BF799992D38EB852556CB7FCE827
E8B6C453F843B10EC212D258C3CAD38AED5DCB1279D5327814B63E4301F91DE9
74B8DD7504848E472D3AE7C4ADD622E4C02C8A60993BBBCBF09507B9E106A637
6C080E96B4E84895627B7886F57773C20310CBA5F0B9477E6F64C0AA0C5F1ED2
BC24B77548F1E3B31334FBDE196D72A97C06E0FB54801097C1DE55B85F0626E8
0EA2C146A040FB4729A47526A644743B53CF089B316C5790F6307562481F07F8
9473D24F0B4A8233C1578CCE37FB2A85057E484FC90BB66AB20D45D6A7367519
D95A893A174FFE3B3A960D601F72707D7E37CB4C2590B1FCB93821CF54DA898E
0F716AE77B59797627D22B47636EC0DE8C48EDC9B098E1D96622CE636D4C92FA
795FD5BEFB770D8C15ACBFCB9DEE543268BCDACB78CD94DF98DC7E65A2121507
0FAB51EA5F70EF58F39F5C40A9838EA8EF2463453116DD6C842F7540D28E101A
3A12724E797F3D38679869A1E27901B4FA99C75D40CB8418CE262F472E1708DF
E3EB1A96BB8190B62F995A6539CD87980E868D345B54A63F800271FBCCD9DFAA
B5E93F903A8FEC0119ED196545673C2E7442DB7B4B326CB1ABCCD61754F54A0F
7D991D876536764F30B69609C9FB9B2EBD98E33B72FC950C89C296079F048668
66E60BD55920F36E2609AC1DA3ECC97A9FBC91278871978843E26A7B17258949
62735CA1B5FF3BC9628770318883CBF631B95029A3040E9F823A6939A35CD35D
019153F8C84A2F0631AB229D6B738F7B94B98019A6C6CD4BF971ADCB587DE796
3E91557FCC3BDFDCFCC3F424FCAAA5C35E5F33C0AA1A2853B45527E0F264BA97
913C6E4DC5E449B2121FC3A1A1A77823CAA8C4DFF3B2481A8D71814BE7FEE42E
6D1EB7644C10A722A01437198CD4CE52268155E00A81DD292E4CBBF03DE6C212
FBDD85525C22D9DC361A0FFF2CC6C99969ADFAB578084798D01A0CAB27A95C5F
E00D11D395303092E064F9EBB058E52F1B411B6B51FAA564DA0FF48EE6402B3C
9FB77D54639CE1570BA2AB068CCE168552299361D62A2BC2C0D99CC2B490CF69
EBCD0BD1C62E95F629F6B72BD6A3A17EC5D4C3C06FC398A49F0AAE00D6EB3BFF
116EF6752C1BA2D975A8BB126A490383FC65E68A7945D6B5A28BDE9545EED7CA
562F4AC554D3407BE198D2FC5E19416D10B5047BED7134D52960044BBCF8D4B3
727C13C8094E072F78E613E99055F4217986699061F4F4CF1570CEC4EB4CD515
B20DD56F082448421654059430D279A6B8736060A23936C475B2B3CB510BBF92
2AF9FD4054968F9E6176AFE667AB20C533F5B87A0D016B3A67CAC1CE1953C9CF
7330BBCBFCD7E26DE76469479963BBA48B780779CB9F496B36925CE75D020391
179FD995E5020FB2B56B488D0D602ABCF89EB9096FC4300D038C9F0C47B7DD6F
3FAE90FBEFC7DA719845AA9C4BA8AC40C1E24DD4CABD064949F125AE467D96C2
EFA24E139633A0AFA816EC666651DB4435C4E75F715BFEA141E0955872F63A26
C470C8F9697C1DDE463E6AD83ADD0BAAD7723935559AF94CD0E6E13E8F0205DE
F2893D8D4BD1C3ACFA2BC75EB947148904243669430CFE77568235A193F57FD5
1F202DE6294C204B1F82C77DAE71C9C8EDA1C1E01FED1A686EAFE3CB12F53E3F
77ECA99EA55B3781A7A6A992819907C8F393567A3D920A07D1FDA7B8516FF329
57E4269B2C8EEB3A8B17DA6450636743317DDE5F650FB28DBDC06CBB98C37291
719032245CB2D09DDD9E20987658AEB1DD7129DC10D24ED5B5877EEA47565C4D
FE6BAAD355A13024864948FF71BEF4F914F91BA0FF63BBBC8AD74A478AC0E036
B2A79192EC0E00521BEBA4F76A0AD5DFDBA6EC952A4F37948B632638D9F69FAE
50A6507512690D2D5104B3992AB11DFE899C31D0BEDA65FE59ED0418F6CF07B2
8837D638BC0C253A11C45FD8E7056C213ED883C1B4C679999E1C74F4F306C2AE
B26253ACFA49A2299FFECB41F96BF43379F68C460A39014704FCA0D4993A3DB6
33FBC416D51D952568181E4DCFDB000B674D94FE40C273E0A79646D43ED110D7
2E385735B59F479DFBD9617F9987FAFC829EDC11BE699922BCC1D2F170CF1CBE
7EB576B3886ED53EA3EB2D85AFCA5F3B76C65C5AC1C17E225F9B92AE80476A0E
2F3CA21869CC19CF9CD0F897F0E26E2FA5E36BD22862FBB603738B2776D1C11C
1CA08BC250CBBB5B30B5C93C144FD17EAB19CB076C36396D4C7506C6481C0FDB
48AAEE0AC1EDF4DC2F53AF0A81233B34565B80EEA305219EDFF892632E390741
05FE1E681870661FB351FA3E9A027AEDD2A7FE2371E0E0983CD4B4C3A29EB72F
773CE8DD3334F25E427610C68F9E8A7614B8ED6132889C7EA89E7B93017A5535
AFFE2659F26047B7428FA7797E4AAE50E83A29587E35345EC77FAD42B0D5F7F4
E717F7F2F574F03B3BD5CBDC1A7FF908389478860AB6F02DF3D74ED153858C2E
B4194F3A44216B06B756BACEB5FCA31910F51A30F500802F8EC1586771C248EE
B27C700A97D1797F25616A57991BB630DD59BC421F688AD5F53CC526D5A417E2
209DA3BE7341385E5F16770EA252F179C62D5C09449C810FF5D40A3C83F578F7
F591BB6CB7B754232E8D05B36B1DFB5AAD580C9A53B20E6CCBE32A589B545293
0372279366B517F8B0BAAF6E4F752568ED54BB17E4144A02511840510271C3A7
D64FF1284FFFFEB953A66691941FB3973E9829A8FB165E7C7527019DB32D4D81
7D360AC4E8BD973675284E1745C5940880EF29384A5AAB483A5B9E87B17D39B0
3D2D12A887F7C58FEC4F546B31566D7C3F43D5829E6603AB07E4239D19DA5025
8CFA1F636B0C9C441A03AD99788F21663354FACD12B5C689DBE39D73BA8C9C09
3FF36C0088AD3B99F6B78D81ABE86B754F6E599939B1432225CA439FCD3361C2
AC17638689E052523D7558A09FE3BDAB6C8F570F997563E18B28804119292866
F8B534249B0DCF169AE60BFB4C722D1985CE4E8771F10CF1E43FB33BBEE84A7D
DFDA8971A2A8BBBC4AD017DAF921F48846FD7E621880585F1A62432105189E68
B1E33F406A3C368D7D2F4A256442D3F79E675F61B3639585573D202989AEE6C2
66525B90E4B94B6E2996750140A818EE11A2F49B386D7D866B6DECEFD6F4FA5E
C4BB5E507C9FD85B65CC1B53B2921BC4B6837321D4160B1B6C248A2226C150F1
A6D05B80BD40CFD211A885E9610C564183F2641C90D3BC9C9C20473D6FAEBE76
86F594B4D4D4B92E6AEC4A9F07841FF93433615B89BCF5B33EC76F0B831BEEBF
C973CFE32377259D400B4B521B3A3CA4C624BF820B1D5045588E94F4336D40A6
0E39B6DCFB590080B9F865D19D39B03D577C85C3A6B25CB91C59F28667266402
E11621A5A623CAAD1FA80328613B558B9EB779D89DC565746F129EEAC3CDF33E
C8821B54655531D8AB5D752D318EA148AAF79E7C22E2D14BDE2CFD4BA5A7BAC0
D6B05C8C570A8FCB6B0C70AF5A4BB02F8D9FDF2CCDF73A5B04CB8BC82A831C5C
438A1B390D76C9859736D00681D00B25247F038CD54BFEEC870F2C16B8A3ABB2
C22A2B241960BFA242A998A675C844B073667F64E957E67C7938C812D690765D
2704D5F54FA2527C9F05D84934498CB1CA294DA6EBD87DDDBA54926A3B90C568
D41F8240D632ED778BA9EA1C330F144585E4E10F21E5106285F4FB6D3AABCE86
C6EDC0FCA24A6B2EE5CCC0ECD9151B81E46AD5499CC28D85F3B5CCD1014E7A3E
1ADA0579FCF1AE7B5DC53696D442479B8C51CB8194803014FDCD030A73D4F9E2
9FF18BEE1B5CC20FCDDC7C353DDF4666335458A2D6C701B448DF47DE840DBE4E
BB7498B83A1EB5FB5E36ED48F9594F94E973E95CD7826754E0C9F973B650EA47
9ABD7CBD0AD5633645F38705A9B01BC869FDBC4831ED94DE8DEDA104BAECE43A
B290DCA2C64EDFA951B6DF8CAD9057C4C056F55822EEFE030D88F4D4C2FA630A
656C9468A9EAFE566B3D172111E4C066D84284B24D451FCB416A6DE97567161B
C83D7FA29B70B770951186804E314608DE0927E1FCC8C5BA611BA866AEA86972
33E41CE1625C45A37765EED069EDB2E2ADF1F8CB9335511B47B3B6FDB110BF87
F8ADA28B1791D94239667DA6B5ACA941642067E8F402A0813FD842EE498596FF
A4546C047D2DFF37B269FAFD98CB727609ABC99E6E75038A82342AEEC5762713
C43E7E94884C06329D340EED90FDA0BB8BB34B51C9B4AE7A36326A5B4B5DB26D
D5B457E6581DB6B6E0E561E625B8222CC0670CAE7CF1C95B3525A736A894F1EB
AEAC18CB4B7D1983C85DEA0EFAB0D893AB730392CB6C88A4648A1A4023568992
9306EA03B2CB0C0254C27B0A0F8D3ECD1B056A35C37842C492DAAA1A67ABE0B9
98C7BA8313DDE3FF722B3E0D1366574F69F3738192BD7F2546B222880AA3DA94
72A22295C9BB4C7EFCCEF9C018C3D8273DA993B9A1CF9577C010788FFF9FAAE0
6943DE00ED69C1FA673B287FE7B30F590799A70F8046E4C897ABB3F2F238EA8A
3FB78A5583B74452ECE10B420C2A47C57B11AE457D9F90F6A2C74C6967199F48
64AA447B8C3B06C8A284B7B8865A8F7B77F9C9DA8C81172C2AF49CC63095EBC2
322303F2F23EFD83B7B59DF89C12D696BA9477D629F3A82D48CA829AEC1F7C51
EFE1B3C161E0965B220EF5104EFFE258C0531274A20A42453C2146E264C3B78D
B668FBCECE86D8898EAA75ED2CC22B05B89ABA446304EEAAC280A94CF9CB9DF5
85986E868A53B43FC51E84820FEA672BDB5BA9A600C148C4421CD919741ECA93
08D44A93D148900E639FD2552AD5BEA662E8F935DAC8AFCD5B82E47366095EC2
01079DDA4EFB12A0038E1479E8A20DAC870108ECB96F1827922DF6CDA44ED0FD
AD08EE0DA05B9395B1D24ACB6BF8D66F497A0EA5A8155CA487F57E7A253DC64A
CB413B9F2783E2D54F74C2478ADA82AD6A94984060EF846D1C653222F254E1E7
C4B2068488AE47A9F07F836E494F21066327922289B1F5BBFB2AFCD73E9755D6
48A35C1D66866465AD9DFD2D25D7026D8483CADDD89761DFB3ECD980DC8CB9A9
D9491DF42A8678BEB35D372AA7133C7E73D86FD65663DA0E08018ACF34CF9BA5
D7A8790699E31548FC7703AD5E1BFE6AC2F8D5857311A80D2B7D7AA3821B284B
1B7E82C3396CB89BA225013F5D4C6D529B88596E341CB47F5382316B7538794D
9D414DB01B0E7C256415CE508AB95A7437B8E9756223F2FF5B55B24B91F39345
7B9149586345BC1C0C9BCB39ABEED7EB23284537274E5102564EE586F97C1FDE
8E7BCE01645F14F09E1B5E8D34EB46F04E8ABC5F4D367639B4216AC6D8743F7B
ED77FC223B3E7945603D6015EF45983A3E06F67E26296064731E0D0677CD16D0
D9FBD78656FDF644DB4D516D156D282BB7BDFC55B4522C394B3A5441598E25B7
BEFB01C74D3C8F83DB12FF22325F09C5CA00CE441A5E466A9A49B4D477B72E85
43D8ED7B54F4588963CF405B6A0B53E15C4413B653601EF9E2ED7CD3C60C3B93
F3EA8FB1B9C3E21C6D6489D877992A8DC821F4F7A6D34378914075B7A31ED942
33A9690AA696EE8684CB3F695B524A6C07661FE6953BB4C0EEF805F7A0245D8E
E1DA0B2F5191C2C721CA94A3F62DF5D6AED3AD275E66CE24FABF649200FC5C77
003DD17332C1BFA0E47BF2156EC554777AC8B207CB116DF4DFF36656A7843B51
FE14A69D881279CE5AB73ADF6B8E4C06123283AD7A08F62DE0829F81D0412331
BFAF8F6FEF9BF309522E0E6873172253EFC739D751D440B1E107A3527310A240
4904707AA90CE0A2D6BC58DB3175E72DC46DA8C96EAC7D9DF02550C8FDE162B7
4CA2758B4191E6F1899939BC814DA027DF4974F1B991709F03FAE5EFABC16D16
F04754A4EF7C4C18A49C6D7256EBE0DBD19C899AA25C2C92C8E401705B850860
9A854BD22822A69DD64428E560F529B5A022AC3629F8260F481F20BB07A70CFD
A85B3EFC1C18FD44FF2BC993B88B9FDA9A8CFAE455BF9736395C609B315ACC4F
49566EDF37EE388EC2457A7CA919EB41D7E8BC0BD4D3EA61170F94D3DF33D259
A1BC7C8AA2AA554CE30086F803F11CEC80B5A4ABD3FDAB6D1CC91AE662CB73E8
2E06DD21A7C173D5BC366F45D41E551CB2D3F55CBFC8CBCFD7F9AFB62B4BC369
1EF3AE7EEFF90937C6FB7A0C27C56B44B37C97E610E072B30ABD470750E5FF72
B40F17243EDE31995D772339929F052DDC7F055DDF6A6EAB9E62CBD50ABE89F5
DA40ABA65E687976650821E6960CA91E6BD946213FEC611D8F0E74AF023B6737
631A91A605447FC44BDB516C6C2A18338B691B62C6CE8209C642C88F642E2741
24FAB7173F78A69EA69FBB406301E0DA4B2305E9BA211FE10DB030575F8F5AF5
89D7E094DA3786555D0C046A427ADF151A55C26C11D123711C6A2D19F38115D6
B386C8099A9C9821D0C90AE79806808157F97F850FE90EC0DB9F2D83B310B24D
C07C2F9B79EF66300B3F94722F0A1B4D56F56C7FD277D9A29A3B03EA96BC3044
6FA34F89ED1837EBB1E3AC45880C9CFEE354F751317E256FAC79660BA300E789
6508D1D51BF68002986C65784CE22EEAE920E9AA7AD8B906DB3296D6630156D0
66A9403E5096BC97BBF995895B759B89832AD66FF0FCDA9E9B8B701998783239
2F029AECD6EAA371A6245B6D895D9AE4140099B6A585CF6661997FC1A8CEFD5C
7A33799A1D1D0C7385BFA55877D4FDF617C729129F3CCE7CC201018047327A70
393F396F9B550475F3E95AB26CDE61583C22C615534E88BB52BC7D086D0BF513
155727DD54F457E9C2D20417DA2D04D28F05FF72B4FCE988C624FF44D21F7264
C1EF46CF7FD4919292047495056C04BBD3FED7B2D22BEE94CE05D17EA203AAC2
42715FEE9A86AEA6F306E399E36D32621E9E965B6BA389CF9D6E8B4BFB953AED
79A6C195FDBD70F729D915BC8C6A5199EE7BF0DBCE7007246383EFFE2812617F
4FA5B2075A4B612C5FEFC16061A778E7158B26C37264BC9878202CBA4B9B3D6E
577E188F33DACAD50CCED79AB737A9A3CC6F31864E351CA800EF63567E9033E8
48BA45FBD6DA80780B7F07B15BA28781C1F423F3F604C2CAC70727F24CB5F2B2
3E93A3CB703B62FBF02F56688B4CE4CE5A22C8DE2B88B707256FB5CF7084B623
ADCD2E2FB1CA1517AC15DEB0BCCF94CE83436E9CEFD7B589A533D320DF88BCC1
F90AAE257B40910D8E489FA0FFC7A79F45D9465B18158441871208D8DBFD8C9D
F68B921034350CE6D5D0DAB80B6D885B9F852E5F33B05455F705B0C8A6C144DB
AC1FC39DB9BAE78383486A34CEE1C703223D0792C9E78F1F0B694F1EB9DB7A13
6CADA3BC9C80548FEF7810BA119B058D790E06E5FDEFABC0A23B4B163D867F89
B9A683BEC462C4D7F52FC3B278571FEB00EA188DFB0C7375A69EAE631BC9900C
4729B4D91C23F560DF09E283809095E88840F78395EC55877D83BDD388F9FAF1
80F4D4726FEF961A5EAC9F87FFCB4DAD6318167F4D3D737A82660483C1C5FF1A
9E33AD52795132B51CCA6555DA1A22700A87C2999DDE579B60444EA8339E5798
1BA528840E4C5F98BC050A5C19D3395911122FB6906E86A89FBBB5BFB2277B07
A4EF8A1054F86D6417064B9EEC298FF23590730BEC61ED49BDEF56662CC87E39
23576A523D336C8523AACC8882547AC619B7153D5EDD27F68D21D9BFE25248E9
F9CAFE7B5FFEA05997C2251728AB74393AB3183B6CFFE1D0E2948B24D2A7E6AB
780E86768E3BEC5E192ACC1FBF937035DB4920F0B8E8BE3600867E2028EE5694
9E915B81C56CD5055CD7F5276CA550A0D4C3C5629CE9608BB7E77F5201C8A046
181D248695762A882FD6A3E2F6D6B367EAA7D2B13810A80FC9A7BBBEC8AC4512
39E34711ADD347782194D0FA7B8A6D79CEB616EFF5F6C99552306526AF1980ED
F91E8CA287628A838D9BB19483ABA2F30A278ECCE7431D2565FA9379C41E3A93
0F7D96A3F7CBBAAD1697059C16BEC49B459492A1C0668E6ECA005FA97465C599
A9AF76FE1B769CB1AF7EEEC2F7DA99F12110E07D663DFBDC0645DBFC741848CA
8686071FF45FF489BCA0F4BAA4D5D965566954626486E4E0A6FC3A0C6CD24600
D6CFD67F9DA4FF163D27226756497B4207C6D3173ED4A0A7FB5A609F0CB9A070
3639E79466007C7BAED2D2F3FFA02D3F4C6996489EC71ACD68ABC3B289208E41
AEB71171EAF17A4FA9A9EA0B4F8017BB4FF779B615A46518B256B2C43B27E28C
4F43DC7B454129E6DD0803880E1EFFEFC885746324E0D463AAF4200196EA4BCB
09F019123AB92002863D00F8096E3017A57913CDD7960CD3DCE6FDC0579AD9AF
1ADD6CF45063AB7EEC2FC100F126DBD977068AC186C94D6E64292A42C02E3D1C
41FD46552E7CA1B36B02C66505D08E1CCA25E72557A4A35F82C782A4CDA36CC8
32791E3C983CB247CD9CBB403670A11457E550B1E5EB5E4E068415F18C3FC7EF
AC5BC5F623465E81758FA86378485C300C62E7D48885F01346CB8E17CD9F965C
86846117F288B3C1610BA19F3F66666AE212D602133C635CD5F7E268CC00647D
EAD2B005D8C549C0D0BB392B4697B6994465C5C5D46F77128C5474953C1ED299
3A2B670C19B19D222051E7E89D6F7CBAAFCFE4B9EC59A6AFF6FA89AB01DA0ACF
1D4CC2A0E4DACA3EC946A6484E05539656A0BB8694FF3B5B97D8E327E3BA19EC
6642A41E4E70184AE9CA6D1C16B09FB58B298790A4DB2CE2A816604A395F7F17
F5D533EA8F87B177F7241681D3EAA0C81B561E7D6169FB0C68E63ECD9BA9252A
603B3E95EB856A85D3762F7A5A783A3A7E1A3A25F9CFEA2C3E3EC8D826E45D21
DE1CBD7460D615F19E04086D86EF34DD686EBD47A517BB819BE47672949173CB
F0FD4C582927E6F48151E720E33CA846C5D15FE68409335FFE5E7239FF724E93
F2A7241A7F52498C3C8D20906A3996F3FEB1422C06D0BC5FE6ECE778CE2C3084
98D76C38C9EE3260EAFD1CEBFC33AA6C3A9B1E254E36F688BA8DE0B1389D2BFA
4BDD2AA13B1B3F3FF588D09C19C1ED66A10247B3D13BEC9C9B48CA6D6D9C58BB
2085412A6B40EF8129335C9340BA899EBE5BA3C094A0001F0D8CD5BB65171F3A
F111E2722605554A46271D397C6AC38BAD25DBCE0ABE02B225FF51C3CAD527A8
BA9BF4AB9EA20C301A0DB7BCC3F49D6072E15BF76A1812F09E1D49919570F2E5
F06D721403053F2058E88858E8ECBC1EA7817D5D7C4A3404EA48CF8E163ECC9A
2615772E02EF610A2A93B4883DA220360E10B92ABC0E14777857DDC8448B7BFB
BBFB11196DE106B14216283297E4F6347EE26BE99692B0CD741F656584616670
EAE0379B807675EFCA18DDF1AC53BB638F513F433A565F145CD7096D34244865
6860C6FD3DC4BB9874B5FA98C8E54EA7D725C59AD2C8114D6DD6AFF8A9A81458
9AB3F1B926969D1F898B5F9A7DE36FF3A32F6B29B0EB5CAF9214A88F147851FC
D85007E977C6EDD006E0430BE9BC33ECC4A22BF194362C862C904C6646E450C3
BDAECEEB0085FC5EECBE80F4F0307AC6A1696E4EF84A749924FFE19AE5947E4F
61E7EC67CF781E780A34EB34F468499A628B46124E1051A715399BBD9230F7B3
0AAD60B6EA7FF7E1D861FAC22D42A5BAF928A70712F11A304060C4380B2B96E4
1C97B8EBD9B42D692328847E72856292DA19968541E940E2965DEAD4F76711CE
6B9D74B65EA9CE79A420946ADDFEE44DBE0218ABC12DD547B397627A53F9CABD
BE91FFCB58E95D2B28C3EC7D6505E47377B8EECCD83F382E45211576133DBBDA
5CC4582CC3224DBF104F63A8FD2929735CBA2D13AA87BEDDA6BFEBF1E0338075
DC164DE6BD66C25A2E7900F987E12ED82150F328A54AA1B3BE277E804C6BA17F
299172AC3A4A3FC39EE5AB32A13A3DC4FAE0E34E485C31FB2952DAD2A61729F4
73864DF886BE2C21FF7BB347D45455A0628C7EEEE5DE8527B5ED5B7E5005F73C
09B2279ECF72E1EC79A60EC3BABAC4A17EB9CE2C7E3E02F715161E7C7DBCCC11
FBE3AFF4DDD78DDA83C237AF564E874A8CC6004D0419306352256E113EBA77A9
4CC74507B84868330F7D9D18508E79A2011DDE2CC5C2432BC832B65BEA5A7D0E
8A5C1FCA351FD9B59A9BF59B4AAD5CD477F6E80DEAE0F2508102EDFF07516C84
6CB94CC3C354E98BDC773A42EF26DE74016142BCD945FB6643E08E10186E33ED
DA6AE4BEC89701F553BD29FA7C71FA95D3514F04CA9AB516FEA662832F3B2702
147EA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B6C3EDE37874FC9EFDD9DA2
3C2B6EC24B00B1999A910EFBEBA0DF369FF28A80D8F3A880BE33855761607FB1
48411B725B63E06FDAE623110FB41F8B5C8E19FB92FB0E1942DF5E433F46E944
D7D6AF6A8E32A9B71F64EEB533317418A8E967BECA51D8AD6E1D01DC49515AA9
41781ADF333908939FC9B8204A925EEE52DCB84A4F26E5B4C204B79AA3BDBC5F
EF398B6631416C2190B36C30927C412A0988C5298471B849EB84AE49B4054206
AF4126A23FB9D6936078F7F9217D6097614EF00EAB92CBAC25AAB048F0EA0B18
F47C1E9961B3601A4BC132ADADC92CDB888E7BBBBA0E10BB4CC10E425C59964A
706B659EBD6AD38ADBA4247D40287D1F64758EB6457D12F88119EEE99BE63E39
D377C6085553A8AE02B576992ED48145026B2113A4179956E369C2A354C4A588
DF3F3BE1452F230DDC37DCBB64B8EF98BDB683FD06CB5DE0838FB8478B1B68BB
90CC446238564CE77BD38C5412C2C7DD71F48800B40BA2ED203FADBD6C29B876
48C7A4EE7A3FD5A3380331F0E2D47FC70BB43A20E7FBD413E71C8CE673B95A4D
21B4C09813FA74C011C6EEB1FA09951E005DB7E6AB74022C86E54E39E42015E6
48E4A05E2A67BC0B49979BD19A648957565AB338C1341DCFD8D6821B590C677F
CFAD70CF9E20E7DBDCF53162554D7F5693636F4E18E1D8B35EC2E6B2BB64E6B1
BF2101AD80F76D244E4B46B6DD5B909C773436D63113ED4E4A919DC314C57DA7
7A9F7BFA4347F6DBFC0F0814EC43D2012DDFD2B4169ACB7B7FC90ECE99FD8049
6C27143475809EAD7AAFC99AE3D4148B8FAD4D27665BF4CF688D90409A49A381
C62843B4E0E1814B49D0EC4DDE1F85CDF13482E66348577FEED9DEB0CDA60EBF
8E68F55509EF488C7490EDF08EC4ABECC1AC545805DDBD53A5C1C59487C66882
D05A089F2CEE01CA90CFF0C8D2784D9E8AA3E3A3438942BE3BF6DF3D26FCBD71
80CBC611ED14FB2F017FD1CB7E1E23C1459E37857C82CDBD9A6A3552760C1998
BB3443FF99E0730A81BBE514C10C4EEAD54D5620EDB9215F50A5F04163CC4834
5BFA59A80F2C982BB0E9EE61292B15086FABFBFEA20AEFCF525E555E940A10EF
9A7C4E085759F390036755C4BFE975CD76065061593BA22BC17E73DE40710906
0206201039A86D9E7C8D9E65B1465A6914B9C19D3B4B14136E381F2ECFB78745
010FCBF2F325EF7954A5E8E445FD98201ECD29E6092ED2B94AC84E717DC7612D
6EC842A956F9884A445FE2F2B48CF2FFECC694D26D54D22CC042E184BCC24F70
2B8C148C2FC26E7F7C2F368DC2FBB2303E5FC195A6849400A4C4A0951F09F5CD
A85FDD822B626F0B4DF1B16865C7E3B4B4E7EF301815700ECCC759D68E9C85D0
71935932362D5CAAE2FA4897AC1219601CFE32E4FD82AB798D6FA2E226B8B932
A195CC0EEFA8E39744C2315DF8C87472F659B9869D066EB184FD390E499DC901
6C3412577920ECE6C9A7CEA474FA9151DA64C5A488EFD0D6F65EE296212167AD
E22B5728F5F9B1E60889D97FAC2C7752FB0A96C971445D731DF9B83A7A1136A9
CE87477946266A1CAAC1A9F7E87DD609A40C735DA40E068D61F2B9B236E1B0B9
A5D4BB9C7456FBF0BD757E71985920DE146C088A7A3D4787A965192CA6DCF61A
B5B28E406FD90CC0D5E720FAE7571F9542FC063B35579C73EB8B80508E8389DE
C76BCF3CF60BDC1DB09467179704B9F04B677EFA97B2678A04EAD1565FD603D3
6259C433CA1E5CA81DBA05C63355BA19E2A651B9017BC1B8ACC9DC6678342E8B
637558378BA14DAA5A4745550F8B3480EB2CA0828D722C5F97C1A80E20385D4B
83145AF95FEBC160B0436F431D5F7E16D6C57D2B872C05B9DD3B2596E05717A3
C40489535E3D2DBEB0C695A9138F433FD58955F710E25F773AA71C7ABE0B0386
C2CF0929FA010CDBFFDBFF5B71E1041E49B45D34173EC3157374BCD5926A5258
F82A3189C68BE10D4A38A30051FE14DE4BA4C1793DCA0CD61D64CD73965546EE
3604093C37D11F69CF956E753851CB3588E22936FBFB63A58300298B17FC712B
76EEC6F836960BAD33020C74C503851F015D1942CAC757B0FD0A10AC1127B4E7
D18ADDEF5FFE63A9BD4596963021C3E2D81F48F04CB34F5508B1908288E2E542
D5A2CCA36AF6FEE15B1949F71241626CA1D83B9B6033C492F7A6B9A8A382A36E
AB6BA3687E9DDF1521604BE019A51F8FEAA74DD627CF29E7A689499E218E053E
D37FBC0EB204AAD253FF338FEC59B1DFEC77F29D405791E7A1701989FB0AA3F0
D78EAB67EF7B2F43FAB39DE2D2A4C48E0D8C4E450024909E5601B2903E143AA2
2C166F6DAC8C06E300F09378E5799447FFD9887CDF33AB3D45654D54C837EDB0
6438F45332458210B88EE7604FABA742C9E773790AC2F535A6E8BD186CA87215
02F479649B41A38869242B6B29ACC7E16F498BE82D7343E8E3BA1E4E2F9D8EED
BA09F0462AA8FA3A060FAB9386B024738B7B93D0E7601F1419BF36A9CBBBD914
3635B08CCE3B5263A7148CF1BC6EC617EF367BE669E4CFE02587169DC6ECDB5E
B835530AFB77DE85BD88BADC5A89FFE456A60894CC64C285E83B58608B6533A1
3CC90F01DA78E61437140F69F7ABE64B951812CC8CF91E78EBBC6C56A8E44815
3895A30B4A82AF5946FE59E3AE969B7ABA98EB37CB2C2A8EA5326178611E1419
643352C2FB4B57406E692684CD10FADF04B4DFCBAA070F625D1C32197132E5B6
96C4875661730C15BE7C487F3DF153CF1E33F6EC39837B204FDD6937F45C869D
D22A3A94EF2A16CF64A53CCB1757BE376972FA537DF301C013744A09769DAF08
33020CA53922C211444D40AAC9076367A66484B959964287B6070A2ED8DA70EF
2E2DC56DBA590AFD5D5729E5A84BEA5B907C50EE46CECBBC173A6CA3DBC95FA3
01B8B56EF65549506F9B6EF43641F2DAF9BB3C19BE207736A8A873A4F1EDCD09
993D20C046089A98EA5B70E06CE96EFFAAECE4ADDF86B859B45AC35F6A24C63C
DE613C9A7EAFCD188AF98414ADA57B34316D07DC570EDF6AB622BF6A3D4B0FB1
3575A3128991794AD36351F8A8B4A09FCF100D31BD32EEA61B1635C3E67283F7
3FFC302D910C0A2860AEE57332E5E230434D4115962434C3792610A445EFF669
33B7194FD9F3E4EAF4D145E30BD9AF179FD6B2243840E49FA463B5D955A864FB
6C5A78DC38B8B5007EB1884E469825F31A9820830FB63D5BB4E8414211B97B3B
1F6DD4A7A7C2596DCA5DF89F901B1FF3201D2A49415A05EBD4FAC71D98289582
0AB48E755021B83DB8287689FB8FB024DA12B4A4F688E8B91AD85CA5D7C660D5
8021CDA3929E2786E9BF5C9F1644E40B2B0C342B848B632D0B88E143260CD81E
52A9A37AD5CEBA8EA63929093ED0DAB9F7C5B23275975E084DF04C8195CF6E72
C8929D5202D6A345D1D01246696D3C4566B179C91DDAD4676EA84BE72B306642
555D27BCDC453C01878274BAF10530B2AD398A9112CB8228BF9EAF57081F57DB
F9D74E7C30176418639945A7DC3CD6C3C4F9785345DC3D7A5F085EF70FB8DAD8
9C70F2A8ACE261620AA95755D6941EB85166FB6E7235A6A430D1B50C8AD964B7
32576A4881AE9CEE27DEB40D0A219E71DB74E88971C070FBAE2C25A7104589EF
388F45AA26A634CD2D2206519D53EAB53E924A60ED01FD432C4C35362B8538FD
37ADF93656AC4468414C1DD16FAA2837E38988F36222BBAE11B6FBA29AE0A974
673C28686B001446687135708C6BE071B51FDE425A0AA572498F0911097C7E0E
DBD2BA7C8586E9EAB8FE0C536F9D9E39B64B42F40C4ACDC33FECD26509DE11A3
0BA6976F13C59AEC3FFD722C0F5C811531DC9DC7A415F8867F28BB1B2AF8B30F
524A2C7421EAD8004A659DB44A5F3A1A7D36FDF606B81E306AA1A011F42A13AF
AFA8AEE419D4CCC751E12FC71ABAA6E91E6FBD7AE08722DCE6A5762EDB87EA4A
D820C359201C28BA2B3B7349934E69E48EB70222D8B9D52981FA047D27912A7D
629C80E8D82ECB79DE3D2D5E0BAD4BE96389A4D0A3034BAFB367CE721AA7121C
80D154E0955DF1131D0EA5034AB0C1723CDAB592A57DDD60ADC12D2B0A1E8663
0A12746D6794B5EAEB7988162D46A117FBEC8A579BECA6E8C45BA8FB7D7D91AB
2AF53C297A795976B7A0BEB5B3838348C088F2C7641C90E7A21C82EEDCEA0D0B
00319B791FF2C59722F53286DD11E5A480BAB1947896471F8C505B293585E32F
7324B9883CA1276BFC8969DA90FCAA8960B17260850FB1E3077451FD4A24570E
A7934A3D3AA24AF084E7544D8A76154942ACCED03A7785D885FADFC09EDA896E
CFFB9944EB7EEADEC7BD012E823A3A945CC26327B3C606DFAD347BF28EE45E63
3D5573BAD5962363EE95A66B7B588B417B20D3AE846ECF26939400CB94AC39D4
5901300ABA223A7A68309E172EF68851BAC87807F9F312AEAA53D1D80ACE9C3B
873F2050025DD8B15C3563EAD2A590DB978A395C56DA4B9994B74C3FCBBCBD2E
835C53870BDF50F61ECB1870655C4D73E45C364DBC50983405CB90B2C344F095
10D39FAB32E1F41286D81CD8E20ACEF6E22B216A416D12FD7B0163073EA03063
62CD66CB6EE5AF83B288C8D6EF3B9A615A5F88DC48D6EBEE1FB96AD686FB4701
E1CC714F57CFC8647FA89838047E0C9B45432D6D5141B4C902BF37C1C5D37A94
279DFCEE8F23C3D13BAD02C50D13E71F41FDFB2A596BEA2C1AC797B31B0006D9
645A1A5386E2CA91C9B1D674BDDFC610A9901D60B593CBBC8DB1503B0AF915D7
A4E53CA7008EE01852BD05110C7854CB47132679FB0A95876834E84F2010B060
88C479A3DBD71E8529AE2E950CB86D0965595A5544947975BFAEEEB7A57D0BE8
C4802BF9C581E2DFFF4AF1CA121A2A96555BBACBC88A379D10129CB6605D3DD3
160FC00E6C046DB878036C6EC2CD97F26BE5F065BEC96E85A3A4B81AA64DDB2A
81CF96F7CE070F205AD9FFC14DF2F3563734F5E7C4D0DE892D7FF9F399C8866D
278206053C2389567430D52B75FCE3C8D5D022E109167B7F9CBE4BE7D18FE73A
BBEDF30953C555CD1BC3B4DFB3D4ED0403A57B284FD04EEF80CE1882D3268775
2B9726295145D0D037D0C51D8D27066B1DCD5522C515426FF808B0A8D0992150
D42B1273AEC2641DC123606B568D2DAAAA8AA0F4D8615CA48159311E4CF17755
21AC1792AF3809E3CFA324C8FE860B2EA4AFF210ED1C8B187636A4A9F3B2F8DB
999F23FAE7826559F9F4684B4956A52A6789FF9D16A0DF5A68EBCE753AD7E593
FE10B189A920A79CDC96B6D63183F9D85EE30EF7C89FDC3F27D81E951D1E6BEC
18346F6170FD2289BDEFE752B0C480AA4A7B45C9BBEE883A2C8792C439D7247C
811D175F4E1A894CB7D59935A1644E95818D08106FE6374225D9182918590B6A
1799CDCC32AFD1EA6D6B5D98279B3166A63CBA50F5D107EBB6B9255CC6F57B30
9113FAD75760456822D0A1B50908F40BBBB20F4558E3EB72F01B40D07F0796F5
8F9CB4F5BF2368D03DAF56C980DC6383EDB96A311FFB2A6A1E3085994DC1F6A6
FAD49FB913B4CB4F51EAE0B763CBA1FCC09C703381929A9FCF908FCD532F97CE
1F62EB82FD1768F2461E5BD574E0EE9EB55E01E9F870CA85237B5297487AC17E
A92DBB55491FE1352299A80A07FB6F746ED1731AD9737B8BF4270510F72F5AEF
A38B8D95C5D8F68706FA9D361949621B9BA6DCB197C773DA91038D4B65D59213
AD7A0070456BF29DFF6E07F15386A4D632DFDD7E7BA91C05DA2AF2EC6748780D
41B82087241D6C8F655EFDA5AB361217EA9DD8A7757BA3BD38153C571C83986B
9873F00179B4C7808A002302C0072FE4604D8944C38F21E566692B9DE2CC84EE
A24F77BB33F7480B7C9316946F86BA57EB8D8CB10204BAFE558A076DAECDD964
BB243F657C22F96BFE407C91EA37CE57F92D3138F0282FA95B715588618431A2
179C3473E25E5A2FC6A54C44819F6C1E02F22F36B8C50D1178E54D518117D74D
61F1DC36AA316F97208675F8F2B169C09B524588B98CF2FFECC694D26DE64B70
A2930A2BB6B264ACCDDB17556C6B64832129E5AA1C6096686444F42CCF0690AF
A1CDA4539B3A0EB06D1EF52F4ADF2FFE2508D7226CAB78291757AAE0D34E9E62
11B9AA6BE9C076ED590282EF4C5DEF0A65E07E98607F1DE91C018A0C481E7E95
21B5796ECFF6B2FAF52357556F90F39C176A0F50828347D2C3A8E4806BD5D195
57CB891FB266C5A98DF4D5BAFE24E527F73E9192CCD15BB225CA8756BB7CC484
A30644D29F46BAA9A3A8A1A557D031F2AD02009E722A9BEAC21F81806438DCE6
44475931C1C17988A9681AE54D4F99381ACA2D0B4FE074E67B6ACB6805883E00
2ABC509706C0B17B0FA4288E0D2E35672998E3F16F55C342A5D8C2427F429641
9D91D720442E2C8E84B93EE521E3E7E854712223E05F02B416547153099EACDB
88F80734E767622B2282604056F80ACBCDAC3B6C3009938F6E3F109BDB126981
2A53999470D42CD5F51AF6C56AB731412AA0DB31271B409BC38DD1052EE65BCF
2FF3F12844B2E5248FD65DF3B6F537FC5306060E72678D660114ED02039C5127
6878B1620F51C4DF4180273F5AF87683CA324FCD52DC097673E0505E3E5F6968
31F513E0B14705387F72FDDB208CDF26AE85663CBB5A2E1B9C17407588DAAADE
3CC9D2E46C049913099385E4EABC7CE0C3965DBDDDF19A23B8BB4A46413DD513
F9740FA4B41905D8F4C19C77565373E36371C8B05114D0B8D5DBFA2F1C038419
DFD9DF493A7AC13AE2005850A35EFE148C50B0DC43DC461E35FD6FB4F7ADC502
95B65CE65878740C6EF6549475118BE4F2D2F5B4D677BDF9E569DEBCE012AA60
31D5CAEC2987B2CE86C69EC72F615A4298E062CBBC70DF84B2E38FFAC9361112
1A654D0A7BCEE947DDD726D85EEE21C832477C193D96EE9FBC259E834F9BA7FB
1238E895A076030141C3F4B45280FA7F227BAD76608BC247C6FB61B7E878E308
735C0372FBDE41D3B5352D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE366FD7A9FF7917C89D789205E574FA14895D60
74559B3CBFEB1985C97933EA251CD6756B1C77F32C734B1495D101CA0AB6BE91
B4A9D58388082E54DEA065A8C90782DC87540181D5C092368FB4CED9353E0404
D3D05A7FE264B6D55DCBB79ECAFB3D66DEC5959AFEF22ECD78D686050DCEA6A8
2F8E29385F3F1EBC4EE457F2362E4F3F83B3F7E57973A0068AF16661FE21F632
9733323BAB1B32BD7EDC4B8B1FE0D8E4C1E289973F0EDC58EC9043D405AB56CC
84D8AD43A5852DB697102A64DB5F69E37609FACC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571D8192A287F5074A8C012E6AD53C85A735816E815777D18C511AE5
913FD38C2705B78CD907457A5F085EF70FB8DAD2E73F158978ABC35805453F84
CC5EEC991A5CDC8C33DADDDF82939669A03C2A9AFA9544CC0C8E8B145BCD2D46
280FDDDFC1EE81028E13027F26BABF3AE38AF0FE01279F319172E380341CAAC7
984BF444AC5EABFAB89FBF8430C4611B33767D29F06AE02C06A97C3D5DBF67E4
84DCBC5B8D181BA465EBF86C3D7D138B055A428C37CBCCF98EE1D718F90E93CB
3C94F88A97391159BAD4859E93FD8903813B2907E149887606C34371EADFB0B7
7AD09007CF32FEE70574543D4AA0D04B14FC8C33FEE6839352A0ECDF164FF99F
BCD18415BE077393D77C434F488665A386024EF689038FB52C59EDAA874006CB
6FE4AEAC0FCBA1F379683F89660A974C6F044896D3DC4FC1E20A83DFAEBB96E4
226D93E6E961A4F9154CABBD04B274322D47CA7BC4A8A1C8291A9A15E72F2310
D42CB7D67ACA970B1FB6C0C28CC0BFC814A63293A6BC82D31513A14651989F42
AC6CFD4C8888CAA8860A5EBF8572C82C11E6384D7A417A19A8C9F6C82AC5E17F
99616F0F06FB7943BB6265054B37487826498593783878C061E75F740CA310CC
FD07839D32CFD3A9E10233501F84FF49B3689375EE0483E2E797C94D4ED775D9
B9481368C97CCDD595F5D7A958B2EBC66F98CCA350845AA2E1DCE96F1D8B99C7
EDF683E825CB8031B46BB39E4972B0D13E6E6D63B059D5EFE7E9ABF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM7
%!PS-AdobeFont-1.0: MSAM7 003.002
%%Title: MSAM7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM7 known{/MSAM7 findfont dup/UniqueID known{dup
/UniqueID get 5032012 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM7 def
/FontBBox {29 -552 1490 1102 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM7.) readonly def
/FullName (MSAM7) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 4 /squaresolid put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340AFF0840F4834DAF35596F
E9DE0B4737F3B315B02C636FDD0FBD7BE0EDE9A89447919443C9E35CF9397982
7A238B1438B9B38C4BDD77DF9A14FDB8B9498F92C30C8D8CF9F00CED1FFFFA5E
4B180FCA9F198C85F6897F1E5CC4F574173CF34E9F435D48ECE6448B6147A276
0968A1701742EC94C57DD6C0A6D241A55570EEAAD527A3AFA8F5F62061BA2CB2
54C795C8D29C0DD60DC9AD070CD5EB46DCF0D0BD09D66E422AF7E5C32149D1E4
FC4F9825F4F3790AFBC832EA55113BE4CDFEC7367AA2947CF36D198266CAA1C9
8520E153BB5AB0603BDA1A2D7C7E1FFA634884FAEB28BA8F3C80ADAD8DB891F3
870708EADD906CCFFDB87329283332FBCAE1E5829A43ECB374AB710EA115E84C
D51CE560ED3A2602824BF4D665C9F070D1861B138C9538A5E840D2A81397D957
448464C9643E7CF3A6448B458CB10101608AD43B826DC097B4F09CDE961C51D5
5C4A8421E5CA05D7CEF9FA6E8C9969278A4FF94B38F0688EEE4925D1BF1E477D
1F598CB4E86185D53C7D89D225093561387ECC29ADF76347670FDFD42E4F9894
BE2721031E45B10B8D51EA0EB34E42722DB2C6644183471B519B5D647DACED1A
164C889C7143E7A3A4E6F1CB95493A7FE8EA938DC49A2AC98A6D5363DE686828
6FB05BACC24EFD91EA7B9E443F1CE3E8B4B5DCAA2C34EB6BEB731682AF7E8063
A8106BC3268C142690715FF150F8A705851A022C6353D7C08C8E7F19A10D2826
D141D8AE2B2E699BDF8774CD1EDCB27E2196654EFC8E961822B5AD3F52B6FC4E
E1731D95BFEEDAAF648B836F92EEE4B7FB419DBC5000859FFA8502EF39B1A196
7646CFC2DF8442D295794B2EE2C11FAA9F876FBAABCBA3EA3AF7CCC7927CB2A2
A2BC20403D6E180F2E52B67CF148F33DE9DC2E7660BA1F623FF4ED1B2A86DAC2
57C51E8835FCDFC1F711FF6CFE969E0BCCC9E4280E5EA41FC346A14BE136BEC9
0CB802FD202C988A67C792070B5A0A9844789B8BA633BB0852EF439F050ACED0
ED2C832358CB420323C2D2357D191866232E8232D6EE24B6554918A6346E406C
045A148757435BFA24E5CF851965E5543045A2C64F465BDEEB4F3FF556F49B63
F93B9499A606036FBB7F8A2ECD109FBB28A5417659A2FC59F00EEBCDEB3FCFAD
AC3E09ADFDBDCEC1DAA1C1137430D9F7E08BB3CEA595FCB14A633BC7E5A337E9
EF156FAA2989A4F6E3DDC3D6B4AA90584444846AFA025B050C7D4F94B8242B31
B79CEAD304D065B5F073EB4448324C3B899942E1A4F28C857B588BC2DD2112C4
14822251D47DE25B8B91C4BFC7D4A9FFBAFC46F8FD8C919AF0CF52A133514C9A
39EBD2DF8770DCFEA2FF973997B162DDA56DDE247D82E8A881370FCDDC5A3E37
19518F4D2C90AC46BF5000E9A0D39365C16750716FD1D36C2F6A7D2D82FE3167
3AB38362B290465A82C2EB7DBA3B1091BD4B03B9727AA76B81235DFD47FB8E13
481145B55AC229331830C2453F768DF481EBE9CBDB8DE106259DF4CBCFD70FC8
DF225B0B3C288795FF091D0F542592EAA0051A1F8C3EC52E418B1D4626E0D648
5E15E8D6F488950C4DE682A76F8DD650811E220D2ED6CCADCF65D46FA81247C5
2DA15A39CC85C4B8B00E8F1C1EE7C06DF61BFEDCF898314500A5910BBCD8541D
72B9B6C6929BF9B522C145E06E0BE7420ED30ECAE1F0F5AC5C1F178772ACBCC8
0961B4510668E8F571D78DEC6C213FEC6104B1CB23898374F9B5AEF0F9DB16A4
4CF6EB08680C290CCBB2A3AE0549AEA77E761F669248EB27860C55CF003F8A0E
60CEB44576977E198F182C399D81A229AC8D0B436A94DA470741719E026029DD
67AA974CED29FD939272C7D99552B3760EED0E73A15254047977A624929D1264
D6861D04870BDDA31AE48FA370228BDD6C37B306D8E2FB4E9BDB02B1BE6C15E8
331704023561C78AA727D9FA3493E5828455FD70C9A2409800A73EFDF73301DE
D3D2B56F731F3E46ACF660CD2CF417464FDC00D1DDA0CE2135F7836FB27F7822
F4B2FD0C6CB81C885C456FABA96C6E91D8DF17DD697882263742D7B8C3005E9E
E059E8352A559737E8670DDB5C6424D1BDC8AAAA0DA8FC7E5A366781D0684878
730841AEF095F0B0DFE76A107A28F510F7093206B70190A341EC8D818BB2BE22
C956C2D7658F7BD36699640DC3AB69D1844FF91B623E8C0BC183BD58F1191456
FD5C7D29752318C63388426FA1CEFC310ED6C4715BE29C56779642C1E625E141
F999C90E88B2BAFE996880294161067E83940741B82869AAE6FD54B196BDA761
5988BE5905877090A29A08C484CD5C4B483E7D2C8D3F81A4435E2CC3CC126C02
C881F604A1A6A13223AA3E53054497D90373B370FF3E6DB8415D89CBC3A6F6A4
5FA94D40118C1F60305AF7147FEF206120DE0AE48D44160CDB7B02270C34253C
D6EF5B6803C511162EF351D9E7636424B24C300D62E8F27CBE0AC5E14AA999FF
7491DCCF42B0D4858D9EE93313C0C19EF296428B03591255F8EC5057539EB533
11F954A88BE0758D105A331400AD9CC61A68A3D72EF98715D2242F1806392499
D5842420B5C182C5CDDD92812EA62AFF26E250622149A1A594FC185CDCC79554
B61F2C597BEBD61C0010B432DD2099AB9B4E675DA66CF013466154FB0EAEAC31
C95E0715F8C2007AD70F7D6504B47680E766D157C1E956A638F7BFC0A33980CF
B22EA049FE2767879DB61CE8DE3E4901802288707B6FC24A52A6828A8C6D27E7
1CD35550F3E212C477C7AD136278867AAE3876AC8FFA7B4C6933D6C6CE650508
DA3BABD53A5E20AFCFEE937A7809899AB31F89F3CB3B525718A96AE2EEA82169
5C77E9687E25F7E4754A9B9296C7B23BECC7A8406772C4D71D56C65F61C0CC39
9684A6EC31CD9427473FA28F1A402866881EDDA8F57F59B6F807C2752570DB41
BF080641B1BE3556CAD5211B3E2F9C2BAE42375AB023C29555501A055BB2F03E
C9996D698D74D2A649F6313337E73589F25541F0919D6DF1043C17C0014AF138
2CB674BD9F618B99779089D3BBA0E84359594FA53E84077F474CFAFD414803B0
C58C97E463A739B8B572EAFFB85E9056EFC3B932DF19B1BFA22EB50E950DE560
1B7DC5A1238DB16FE9EEC31B62A3B9DF013850A52090D6E201EB25B14629622A
D5F2EDAB13882147564BB7303BA1D5DDA47541E2AECDECF55424CA3E5E3565C8
70EE11D92DA5626D5E09C622C3E5E59F137FD862F87221EBF409E2EA8BDBB04F
5EE840C0EA2DD4C60CDE524A14D9044F56F29971440CB46893F076D3482B8DB5
6F7C367FBD0D6A159844C910C1F8D15853FAF73CA5E5E1E5DF835F3073289A21
FD9D046906977157A7029329A67CED2EBE4D4189B46A07B0FE3FE639319D5D8C
0BAD2D8D54402922292A90999E7B798CD00DF946100AE65C40BB747F184F01D7
29FF0D83F881CEEB1889924F09CF558E34F1C1B4FB2835D08C7711E9DB95B781
E68867F26849D4CAF213E204BE5E610E8A179481B5D5035962D794ACB811BC54
0BAAB827CD8E5E171F9FE0EFB717EF58769D1BDB4174CE853390F1B4D502524D
EDB7D8938C7464987964F66ADC3037C4493973B8B60DD4256345CE84D0B9ABAE
3F38FA1D59EF989BC3D2D72B1A060FE168ADDDA9BBF95B0FDA7729B18758CD9B
E28D1D899A07810619F26E4F33A7DEBEE7EBDDEA99149D39F3637239B35AFDE2
8860766A0A7877EDC666FAF81E9D9AE10BCA9827FEC55E71C526B322810C4533
A7FB239C2DB3876FFE3D0853FD098F8A865471190AAF8A4372AB998C35767818
0DBA18E06A435AF7F4158B3B3D4074C17DE7F2F7CFAA4B2938EF5CA6D834FA29
BFE6A44386D57ADE553AAC22E92685C80B56DFA539654E70F0B10BF47F82AF8A
A1470104CEC9A7FC4B15AECAD6C2A4170E0ABFA2746B1D31AA7A6F7D265A472E
C782B2EA831F24154AFDC6B4EB7DA00465ED85ADF5BCBD1D5ED773B6B09B671E
FA7077CC63CEB191649C73366CFE7E015050F44B9F6DC23CD73DAB18FD706DE3
38C298A7526D06861BBF613C19DAA850FABF9ED03C44A721FCE3F5A783C613EC
68872FAE9A3C242666B5448737C364FC64A5178B728F566D13C49F89AA30870E
62CD8748A31170D42278C863C5B6DB6DD35721BD65307FC181EA1BEBD1DB557F
B8341C175C1672D327A1868B222D5951DB4623872BB7ECAFC158EC7FC7C3F1E2
6652DDFAD093D0262F03BF220B8EDAC58C974C66F5E918804A0DA28F36F6B147
FEEFBEB9433986A069DAD48EDB6E1569AFC8AF0FEDA1DE4B0BB43C5850B50AF1
03055441E1C8AF8F48A10DEB2DCAAEEF70EBE7417ED513F1AA4FEE317AF24F53
39675ADB37ABAD3C066BEB486EB588EDD1BD1F8C134F8078B91CA4E6E4FE3295
4A19D7AEE4E04C5AC79B85F94E0D3C678C1C00B45FF779D6403BDF9C2204A3F2
B1AA35973DE5667160516FA3BB34D62101FFB365FBA6A7B0B58F6D0DE14B0FCA
B574B291D78BF2EC5CA84CC91112BF38AC688C57A2DC732746358862C1463882
E36E0DF66C7583A41D405B96A3E6EC988F440A18FA1DBA61D3475265234915F8
1D4052176AF0DD3C22905CD172EE5051D720AA1821A57CFCAC3DFF066C8C13B3
73297C1138AB6F2F7AE02E3B1B6315E3E3B416F8C7C0EA2F364D529864658FB8
C0CF58EA95073A55334918272D47B57CDD142CE8E61C3F6046F759EFC7499608
B57F96ED27F8F3A8ECF484BC0CA525F241C23A3CDE5B136739E07B925FE97A78
2CC2F7D1F4A6B02AE12B08530B3D458CAA08AC5B91C5389140A7F1EA8932894A
031841776C8B8DF05C5C73F37063EE9DD61BD44B183EBB6639782C4D42A137C9
B14F79B981AC71981689689EFA2DEB3FE63ED7907EFE432897CF4E44B78C6DFB
C5F76AD891A0F860AE2064F3D62F8C51409A62CC68AD9847094007128F6ECF91
D034ABD22D4F041440F4645225B702C0EF575A1BFDE3E2538DD6CA182F54CEA9
50CF135592A2ECC23AA20C7B6CDA039545B078B9FDC3C6FB3073D4BDAD253728
763FCBF50764345DD2BBCA168A38DC766344D0671ABEE5399BA0DF0D32CED3E0
B35CB0ED2A6A5E970113201001B93F99AEFE381E4497C232256276307A3BEAD7
5703439E2AEDAC2F88D9A6EBC18055C71BD859F393702400DE5FEE4A9806680C
30170F7A73497A83801E474929014C63F3180E91F184BA31D4E75691085FF5EA
8E0B820C41D0EE65191A4D1AAE6C7A013D2460535C7DD320205FAB5C66495E52
7A8A2827E9A9140D298D77BB36DA1856F7CD4765F2998A1803301BDB6147F5F5
F791ECA588A964D84CDA4E78596ED46C3060CD7BE4A1053970F5443B4CBBD7F8
83A49D7FE63ED0F9EE804032B723FA5C59A924BE5AE09C2CD55A181FCB5E775B
DA6FB586BFBB7D4B9FE5A47BAF5F9B7CC5737607755FBE8A858797590884D6EF
BB82F0DADCF4543672F2D6B59D63E52FBF68D21973945CB0401F8F861A2B0EEC
B36D707FCA9A5B9B78AFF6A43F589F4EF5F8D23FFC236F094CFBFC72A8E436C1
FD64C058ED3F24800FCABFE8762BEC2C0123047F66A6818108D8CA232AF3C4A5
57CF6B320B5234C0603A16BDC8770ABE3222816D7AE23FC344C37224AEAA20B3
48B9C76C9359DFFCD279DDDDF7C3C732A036D1B7E123F7323D3B9A878C0D3335
37D780E42841016960BEC9023680BF3E75CF3C312404CDCC442FAE09F3642AE3
B6D5094A66EE1244C7DDC72A5015EC9556388D75E52276D3C3D6BB2193FED188
D27FE62CBDDA593FEA6B8D5F616137915035E8CF2461923F4AC8FC66AA61F864
A651480223058303FBF7313D078AD94B88D50BB1ED8795241565499436B847D7
6A019E0E73D080D0CA82C3C386D207A8709CFA3F45D936B03EB76E26108B167B
D5CF733EFB5AC5462CC1B42515B3DB10545A66751DB087B65641C9E7D9A25F4B
2887A85BF7BBD0BA911423700A7D59495A741E4D68B69D292E0F19BB71435E4E
A09E2D2E657360C30FDB6D129860C8E45E9B40171074BAB9B4C9562FAB6D05FA
DD9BD0AA6457DEA22FB213F8CAA07A43B71F5CB2F5309CCF6070E29541F62090
BD531DAB5E006560F268B5DA652B59E4295D9645A16E4DB556844257ABF09C6D
DE1A7097E9C99B880B0689A9EB52F349FF35A42348C8CE3E7C3311BDEA51407E
842693378DE93A05432635E9EEEB09200F87D517B70E26B240E1491C7A769AE3
04F92DDC40647D6F64B2B15358AC2D2AF29F8B05636960B876B16A8BA64BDA9F
60EECC8DD53A5E20424359D36BDF1AA408D406F1D2EC7B0B46A354A8B09BF87D
209CD957AA9BEBD2DE01A4268063F3813EBCF4735CBA7A76A94C74B1C12560FD
54CD3195658189063D01F77384FE34345F4E1CA6BBE2A2C5E03B235DAE139CF8
A3377E167F8A3714768DAA968495959AC3BF20C586A43E5FCE5A4C7CE4521097
04EA0B68A6F5198DBB6BC62AED7CA9E82B42E1F4F14C9D0D97FBB61B1F8D0E34
6DAF2AB76A31082EE4EC89F0C37617B2011F19358E83185F851AC725F48AE0A2
630728B48B96D0E55E9A848795C9D95234E13DAA70222796D33162989FDDD17B
6870DF6EA8693F192A53D09B4BC58763013D5F561678AE06C248E9A23A5B38D1
3AC344B61D078D11058D544271E003AB85B9A25FE09B8F05AE2943365C0F646B
6D0770EC9EB2F5E5D8F2E458EEB1E7A92E1D18FD162760D776AF08E78DC889A1
FA49C8D1431EA685536C4151680153FC871DDD41F97FEC101B57EBEFACA6B341
A2B4F7F9BFDC428326E945420D095C4EE05DFB7709783B6052F41EE2C4687B99
2197CD3F01DBF494062E95CBBD669D9D16527BDFB61FCFC93DE7D935734ADAAD
5C54A214DA00B2EFEEDC79CCBCA09B303407A34D2F27B0AC5CF9CD0CC5324D66
7FD7C0A368ED4FD09A79E82CB0EB20A37922285B2D9CAF5E37E86D918F65A2FF
3E227DD1AB8FD61F139D958BBF0E621AB7BB35A3D545B24074B8C77C5FCFA138
5B881D12CDAE74C53156D092F1A971E740CBBE5C8AC34F0DE017885A6845127F
402AA06652A09F926D0A5059AC7D0A6146FF49EDA2D742F8C83E733C1779AB23
6BD5B2E75E8E105391146840F1C3E9D0C3807358BB10A6F3C7FDB73DE8CD081B
1BFF8DA0E6E35EECF7D0B6B797D96C8E3A2AAF6259950AEB94BDBE2329A1FB2B
CBA2C432898BDB71A109AE470CA37FFFCAAB3877E4C1F44F97FD223E0D51B495
E287081166E43B665FFB903E3689222B71BF427849E6D25084EF7CDD80878A03
05F898B7CCED2374099E81B67BB255A1A8D73C59B7F30FD97D38B13B76570E7C
137B60A6EC7E44F0A807375619BEB450E456B409F7C6085BA2874E038AF1B7B7
B5DCDDFAD3181488A8DB4F3179FFB47220A737EECF99EF3B73B87A9E2CD5EA26
388CB4294C13D666C3E9FB48FB954363F0A7E9944F93B27997ECD296387A98E9
803FB46E168665BAFF7744201225F1902141DA11C62DAE39553A7A28CAFCF585
72F03EEB1D709DAFA880DB7B200FF83176006D7F62A750D7DE8C1E7EC3DCE7AC
473DD63C5C50D28A9C8CDA3229B4A495B65F8A219B61B09C0FF0A4E00FCA6222
9836A7199E8F0D3595D2555130A50D094D712580DBD0E6560949C9DC35BDCBE2
0C8E399C6C3A9C245DC4DC23DCE672B0B3F84AFBD4BA6F24CBC36029927FFAFA
6E43AB2426271E6DB67AA65CEE2C60139F0691493432256BFE41FBDA17426446
8579E06CCBDFED4F0772CD82950167935869EC0E7EB427A87086EA10A597E162
3529F8734C0E096F1BDFE23B36D9B12A032418B9321A056670EEA02CD672A893
5320F972462CEBEBD4F449CB10357090B58D8FADD66BAF9417F5CB6B3A9186E3
4D1710C0128072DAE9C7FCA9F7EA5A376A808EB33CB9E60534EEE0F45A6CEC46
2468AD09E6EBBCD1EB55B342D7F09788C8877FF9D119C062EC9DB71DDBB40357
DCA66055EEC8313272070103BD0C1A0CC262235138EF382570C3EC5EDAB74AC0
DC147F025EF2D81C22842757F71F1E219545FA3A158EB85472FDE51BCDE1D629
506A35E9F2844D17BBDC178AFFB0DEB4493D2BEEDAE01F22AB20883A8D5D9620
DEA594A44CAACB562DF3912F119ADBA6DC4160A20D089FDC997613E5AA0EF868
D3C7DCC0CE8820214113F40A45C8E6A4C6AC817D0B4F7A3D96D368F246F8CB2A
D14376CD82BB9B0E9620FABC35DA4486E9C676023CB1359E3D90E252AE145907
6517288ABB211BB7DF120F3F1C87CB83A65571ABC88C4BF6E94110BD1F33DFCA
18FA808C7AF497AF934DF507FA3F81E297E7AEA3815C70F057D3C09D33B75BE1
B34B77285D5E43192F8C0CB78669F9BEB3A8FA9125591E89CB58C7B481EFD137
E8384E830BA428073CF99A12849C1E702301EF69DFE57A21104BC28A8573A660
09C8B0D434B9FD3F6F0AD68039996BFE2B0867347BB5DFA47AD38F2D0595BE1F
46C8CA5D46
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic5-Regular
%!PS-AdobeFont-1.0: LMMathItalic5-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 347 97 0
%%EndComments
FontDirectory/LMMathItalic5-Regular known{/LMMathItalic5-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic5-Regular)readonly def
/FamilyName(LMMathItalic5)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -73 def
/UnderlineThickness 28 def
end readonly def
/FontName /LMMathItalic5-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{0 -250 1349 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC0
5F0A4499A4A15881E0A4254902DBF044B321740247EF89269993CE3EEAC6F046
C3156A7B966A757C2FAB51DBC521E8CB43AC92FB270782C9A6A127AF291AB45C
519A619DB010BA31C7DD9AD5DDBEB91D9105095D2F1D77A793546DFB7FC7E139
E04E4F62F509CFF17B1ACD6133B4D1079623275918A4AD510DC95CA2EB7592F0
67B1C9A4B88B6E9C6B876D126257F4801B7A44E056C05888EA82290EB141205F
BE431A688ED9687B4BD5C6B748FA5DA74114CA5720D8E167A98CFBBC95966441
F5048F006E1A236520BC840E6ECCBC4C0FF9C6A881B66C4CF4FF4AFA897B4605
F6830F4F199E0E54BCA4BF0BFBFFDD1B1A34388E5446CFDBA85C54AC8549B3EE
CC2C552783079D3364A3E6FF013E7C3441EEC473E041AAC435E1EB59F223B796
FF30759E1B9B659E122191903EE0BCCC3363178695839EA89B6E503577E3D28E
004C61F64504E88986A1E140FB222792F8F659A00DB6AE62ACF9BC1486FD615D
1A0349A885398DBD4A29F81969278E0F17A5E0B5FBEFF1E85B2228895915A896
78CFD192BB227C2F46E4C6CFD2D456263A4AE810AD5949D9AC668AFDFCF5031A
86EF02969001B5EE10B992A7296E1C887ACC7B11825E76015CA91087E67A29F5
FDA84C0B92960A629C687EE43C22BC6656DA44D87BEEF8272845BACE28FA9F55
C0242DEE0634BAB52AAC75A5FE6A5EDBA60543FB6575B538D7548E70192D72E4
E7F36A9887F078B6A1294DD8455317BD77C09F97D945115C67F1A05CC93EFD3F
B9ED867EC1E18B8025017495C0584E55F963B6587873FA31E91A20F40A513461
CCBF3EB94A2BC4BD52E7B1AF1D56490ACDEF55DA9B515A07191E2A8CC998A1CB
2CD25437B163956666AFE463326AA3DBCCFFB4A51838B938E70D1D2BD1A556C9
D8450DFB9E063CD6F8C83D838CF2E7362979EA7131A527CBA34CD1A36F5C3132
5871F88C22A0450631F38C025D1A649F8BD265BA4464D82C2AD3C9A12B6AB173
585B33697241EA57362B5A76E473EB70BABF3A9BDFD6C700DB3CE03F835838F1
647C94AD9843BAFBD24FC8949895D672D06A1E9711D3BA7C52C08E07E5678B07
87F338415EFA2C253FD6A595DD600436E0BF5E8A00CE3C92AF8E82561930FD2A
920BF2F3B1B0DAC47760E913DEF5708B6E6327E58564B7932E55F11F378C7D9F
CDE60783660C94D95BF664C2FEEA9583AC25DCD899A80BB9E9FB9E1F4A2DDBE2
4F67DC5C1834361FB563378D8C5C4B597B5532EFA9BDD6C3EC7C74CEE17EE456
3FD9157BC7DB914D941608719B3E2E9C58DCCC50FBCC00D212C6BB6F621C713A
456060483C48323B60F238C033C13ADA7B2B3C71254ED64ED8F7853106CD9154
8EC5211338C542F5FAE6EAA0B1E472F067A45EAD64D165465615ADD8D81490BC
A1EE0A5DA720B0C7644E922F80819565387E412AB6039FD3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman5-Regular
%!PS-AdobeFont-1.0: LMRoman5-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman5-Regular known{/LMRoman5-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman5-Regular)readonly def
/FamilyName(LMRoman5)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -73 def
/UnderlineThickness 28 def
end readonly def
/FontName /LMRoman5-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-566 -303 1772 1126}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D5E366B4567F8B1C71179751D38DE
09EAB552C14DCD4DE0B086BE80D484750E1D728A501EB36DDA2232012EABE46F
4F54C36AA715FC2E594CE94E9690253F9AE872DEF9091E25A9D7FD73512FAD46
941B8C772528E3A80A92F12CA732DE1460CB5FD1DAF819FA9E1CCFC106AA3832
D37573160C919A633327D54A78400F470079B6B1329E9F88AD384999BB626184
99F2C26CDCF35763273F3B6F226E9E54F4706F7F64DA9B9CA122118314131345
7EE1C14F42845F235E6A6157F87FD2B0069A3FFE68094665ADCA2D6F09103F68
59300BE424E5E62D6BA15D1B9FD7F2A4E40CC69D8D827A3E2096706B0D2EC51E
12E43A43F50BC93F45A54F86F4E198A10176F1AB8198B9466006B468AE2ACF69
986BCC22B224520F72BF6F2025D79AFB148408C463D4C05FBE11047FFD978A94
19F22274208AFC00F45E7C4532A936319F63B4448769CAC01E067BAA94B81B3D
E16DB13FF1E0AD85933DC6DC4B1DCEE12252BE0C7FA81D6A188EC2AB50395C52
4CB5EF83F76C36901E73833E2C92CB3020547825353EAE49B08B7BC575A1C765
3F09FB1B8B4432BA7069B1B411319D3B1F369DAA39789F637C2E35775412CB50
97244C92598495506F37518CE9A0EF8A1BB12EBAC2ACDB8234E068B106997D75
C5E7799210C1706AE188F7D8C15F484FD68C83A3BE8EA1B574CD543FE4C87F54
B65B51EAFA28D03D9519786575EB3A201BA07E91114DE53AA4F1E8CB784A0755
D5FA7C3D7AC97EF66D31A130F8EF6A3A6274B93B617C3B82231B0A7B6F06155C
5A3DBBF7E1A189309F8EC19BB343EB5477E85CBBA3A5A10155EC75B281609ABD
4BF1A453BAE8CD9BC976A1CCC27D8374F91FFAFDA216524DECE34673BD763352
73CBB7C1220C5FE36719B55E8FDAE1F65B79D31A52A9D43214248C6E80E61771
00868F32280D4EB09326163E0BE25D1A14100918F605CFE56DA8B9A95E2F71E9
64DFE422D61AD736AE1E163617431E7D63A7AF0E79C67CA665FCF325A4DDEB36
DBD3B89455CA9BFE2FE8ED26203A2B353C3C9835F4A55A241F8CC5DBE1FF101A
0A492961BCB7BA6BFE61D8947254747CF9848901DD600662AA124F2DBFB9F42C
B40A63BBEC54EC63CCB18E93BC17CBB1CA9CE47A0675DBF2E804072C010757B0
47D819B24DAC05EF13006A116C82E1319A636C7D42C6CAA9A4B1EFDF40752BF9
4A98902E608264DED8C3241F0F80D2278C7302A34A4F508E05E8C908C46B9341
9B9A697306B002E46CE2989009F8939A5EC6CF04D1DC824470A8956B7B47FEFF
3A2D6E11BFCACD6149A2018E62F29C46F0D9DE2A36056C5EB91055B4C390D8A6
2D650E014F5544E46BE9C7E0B1997E6DDFE02C0150A31C97C1D450F67B0FFD56
74E4853E4D6EA1976DDBF07CABE678671AD5FDE58A293FEC7BAAF00545A2E200
A4E4923105DF03263EC2C59DACBCBF4F8B6821501BA8A1DCE0E4AA6C193AEA97
0F45D01EFCFBBD18095AB5C0EC2F626498A0F0C355F94E92659245514FB4850D
FC7A0E65BEEC544A2F266CDEC3FB74A0BBEBDC856E1B1A065B1C34F194BEEF04
F6BF76E045E8814A4A25B82718259AD02CDB518BA4C4AD8F261CFEBF43862319
A54DA73A385F9AF86EF6E3F5211BBE23CFA17F1E229F107D0A7754C4C27620D6
CE5925909FD73AD835ADD9C7576B48EC63B4AA06EAF34C55A9DF7A5BB9E508F2
7E984ADFC4099E1610A8F1ACBC0DFE56DEF3943AAC7F81979ECA8231422739C0
C58B4ADD86BF54EAB5872C79685B50CC82ECA758FE32A72DEEE11D46BE981A6E
A85C135F60246D47ECC90571044E7021EED78915100EF59438A73C41D92F0418
3451EFCAE6D761BA36B4A8C4D61A96C406DF4CF3A843159D3BAA56B007DC6C0B
52D99ECCF89764E3718CF5AAD7E22763671F75AC6C8238797C13451EF9C9E21B
9C60F64B2137D498368FE6269F852FB0E950210F2B0AC83BFAF0420A18B40E95
2E098614C2DB3FA57D400530CA6FA9777776B87059684FE70A0D67D92C6DEF17
3E0B552550951FA9C6175486F899AB786591690FFEB4B0BE0AFEEDCBDAF3A9F8
0AF982F9653F2DEFA6365ABB1588662EDA312337BE642A4FE86DCBB069030AC0
A394E920DC04B524A3A442C7E50D342AE0995D1280C93ECB6FA991BED6CD2F0A
EBB87F65D5E67BA200E39A0DCF5BD6564B0C2F3B595C9F8B8A3106AC80DB85CE
6630A7C3E0FE565DDBD45AE467A782725D8B3E30CF0792D0B194A2E03372C07E
C4D6535417772E66F4D60ECE31C458BAEEF21A985298437D8A57AD995C51E6BB
BC2E24B2A954DB76FFBE2AB51344990FFB38A6DBEC4F56E7DD7C1B142979D80D
AF96A3F3517933574B07E505A45CC1BC7652B9E76547827EFD90798F41EFF7AF
CB48DB99EE28143FF17F1683D21DECF4CADB3E3F782619A4CC3B27215BDF4252
C36F8F82234A46B51F8EBF9A806FB807693E837663D92A3DF30AF50B62E4E013
8AC1B7A39CBBE3E75DA003115C7416C29A27BE5BDC940164A8FD9C5EF6BA97D7
5949E232995ECDC83A2BF7254D4E70B69FD185D5DA60AA63051DD7BE711F5E2A
B8585D9C731EB49F2FA5A5A6B5E003D704FC6BBB9D9C2EE4F3D571285E319A78
F909421C31359DDB47B9CE4FA973134372970A35FBF96123FBADF96FBF875E50
23D34DA177B1DD3787D64255F26B3D26D7F229734FD72535354246F33B2E2F7F
4DFCEAC871D469B89A31FC8DA5F4A317E7644446B44BB8012BCCAF8C59F0FE37
AF76EE986ECC5B669132039391A0ED0E7BEF100ABB401A60B1A27DA0BDBE5ABE
D44A6F0B91FE1986DDD520D8A429FCDCA476EDDFE15E63310A8BE05B7B8236D8
2B57FF08D62D1AA14CAC2886F8DF4CA67C11EC057BAEA084D203E197CD501464
60DE396ACE4A0A050A960230095553782491A414555572D81B716084F1F1088A
69A2B74058822221B090CCB46C0A8F2B599BD2303842C303C712B005BB68F991
3CBEFDDA29964AB2BE5A83FBE336D8C2D1325E033E6CA7B01D0B72207FAF08E2
4C5D0A20A385910CF5CC9590B7D2B6047D6A14598F301B6A7E97363ECBB7CDE4
75BB63312BBCC25FED541C36130671C924761C3BAF25E1DA6A7C4308FB3C14CB
6C3C656047FE57B63F1F98B539BF6BF873334EC7AD0F22F694A9B1B605CB5030
0FC162D7F1B78D3C62F09DB17818A5F1AD15C37D3EB3C09EA1702B10B0E40E16
407433FC9A216DC7AFCE1C5A95F61CA6A77D5D31434A09B64F8FD9213B477A70
452E7C3FF2C0B823742B9547BA97B2B014E28D06053051A80CB1353AB59CA4C7
A2FD4490D7A6F79A3B180D240E4D2DDBA4D4E7848A25F2E789C18EB54A63529D
717928A57CB378F900F83D458624EBE6A7D0067E3B1990D104EBADB9DA093211
73442805CF8F8F6BA060207B74316AD3CFA839A3F2726AFF3A2E092658E4E75D
2AB98C19276A104C8770D3E62C7EEA9759D337A1F82365D18733275A1938886D
2DC102825CB3EF2A75A7A3FA69E0FD82A04759D4161521BF6739131AAC99B7FA
D5AC9FBF383B3364B50D5860E9A1646A92A94062BA36B4A8C4D61A96C406DF4C
F3A843159D3BAA5C6A7307318ECE80777A5FA529030B795AA0CE8D74E529B072
BF7CBBA2338FF37B66DBD7046671C2E5DF917E9E31ADCFA7CD5BB810960EC563
F40AF416C079A59E62C55E71761462FE9F1C24F12DA53F9865CCE5434C844F9F
61FB670F5521FE1FEFC260F3E926AE8AE36C3EBBA9E6A7D63C4EFCBBEAF27168
074F3BAC5699002593DF513D3154E07738A2E39D6AC9429F1A359DE8E810DA01
91D78DC4590C6F4A4A6E85662526851682A4C5C968742603F4FDB0B0B6D446B2
9F4A0504DC2EEA5CA10067DB95276F5B0820E139D55D686C7E96E332FD87D55C
C27E5859EA562E211A70BDD212BBF5C833C27277AFF41983B1FA5937DF61E9CC
A3BFE943C25C0005C651E43963ACD7E7868CAA4488EE815D40E28CA5497917B1
25739FAB9FBEF8523676B7509EA7AD0D2111E41F3B274C07D85229BBB2BB2F0F
B1B3C663840413AF776A79A7F7282FBD398422F52DD7D4F199BBD874DD442AD6
D4702CB01A0043201222A5A45EBF34945E21DB85C5E332EF0A5947731C896355
4083117746434DF37B1060A745CB76E959A74DACA2371F0ADDD8BC75281D78F9
DE0D569CBDBB8C1EC91AC0FA666F6A4161E6593F9EF18C387E5BC1A5983732A1
60076864F407F99A68AD7AAE8419F9A6B125D66DF5DBE2E04E259EFB31CA780E
E8B243C3EA217C51CEFF72813173A63944C6C33736FAF77E6E3D40B02368C1E7
E18A49F1B09782A70BC64C689BB04A12A787BDF53689144D0FE0BB79A2DC3F72
A2E87747A5D667E899715872EECEB101F5B6CCA6F90D80BBCDDDD8F780B711C5
B308DE4B15BA693D37A97950BF94C5287E9A8700D904CD423744D532637E75A4
237B03B224DBE9C3F7800013201730E442E4A7B0DAE50CAD34EE9951CFBB3E23
E96C7589744EC07954CA6C898830723EF4E2EEA0F092F62B9F6E1040BC872405
B7183D2385AA4D74E4741583059D7C1EB482DBE4730B36A9B89006981089FFA1
3034B8CFF86CC9550B19A610AC87D4D4B0A80797BE2BC7CA32B456F97285EDF4
54F39D7AD4B5AE946C7E207BBDDE96E9A9EDD3BE745BCA2104F0A28816B18427
7891B9231F28346C3786B0C08AF8A15F4A4DF313D85C474780C64CE32D3DAD15
997127DFFA9ABFF8C858A51C83CCCC572024A39B1CE0179DD51D77FFBFAD2BBF
8868D71E522619EABD4BD6A58B5196251D74EE1703612D0E3E69521D8E8AA01D
6DB5E9E1260F6699D945A611A7EA348DB3C86BE4B3292531E78F5416F58A9AD0
99D024AE7F293E55725E4CE5251E5D670EFE6732E74ED760BA502FE1D51D5792
5DC44DA2CA4021C282B09B20BA9B4009B3DD6A5FE918CF30ECB4733D35471A43
C4AC733BB92B64091D3187C8FC2D6534053FC7DBF813A96D33773AACD4000D71
140AE2CF7CEAE3AF9382824A4B9912865C6FACD2B6555E8733B59DEF28DF6281
7311B63766ADFB7099864428EA3584CFA65F294B113B6B31536B2CBD02EB30C1
7927926C6FBA3C342D74B1A09188847B2128EB8B139A5FB3EDF220300FACA491
4DF3E56D335825BD5474328B7AD72AF93227D727F640E48FAE58497C9BD6D6B8
572F032A497E79B5C59AE64A92B3AB194DA6FA06220921EE7D2A520E12FBC495
9B8F01FAC3F92ECCCE092E50ABB573C1E165B9D3A018A88CF79B4B972AE6F732
5F973370C589B66EEDD45D1FCDD83C1A9473DDF6254C62013FD10333512A426A
D1D854121ECA94D1953CFB6C2C6B96E9ED756FCA84AE43C3FA9956F75531F041
61B2C21F34CBE80DE64140DEAAC58CB39775D460226F20388BBF95B3342044FB
B92C36020F581B1384039664D46FED71D83D1D27243FCA3FC409AC2835EF3FAF
19B53E44F7EEB341005187115083D93120D3CEDD27EE4E5DC2C575FCA78855CE
BB99362F4B6CB8B656BB0015D7D80E0A79468ECE32F5EFCE7B0C125BA6AF0587
D4E1F7AB4D2E45A95067DCE9D17E29012ACD6FB58B840C6D14EE78FC84B1BD61
C526475C366A578445E2423C73FBF82E9961A7926D1A05FDB24366AC2FDCEB36
69E8934D1DFDF43498A55EDF16A009E3E8E55E5D049BF9B0C16328F8992A1287
FBE4016ECACDD9E3703D524549A09EF7E53CEC2BBB0B04FF7A6B6B14595486C2
44DCF089676CF6AF896A75678AB421B33A4C4334C109DDECB85A84440C8EFA9A
5222155980DAAB0F15B206057D6AAA2EFF416F401936169B51765AEE960129F3
077D1883C61EF0334681CCACC5D024F39309DDAE7228F9D17821A60CED6694F0
25FED299C4C7F8B077C2D91C1F19AC43A62DE7FC6144F14EFA0AF684D22F4AEA
48071A7DE4E19B4429446C0981B34070CFBF71A5FD3005929DF4C1D98BA42AA9
1660B2AE39F7BAA5A9077FB466C130378E0843451E4D9840AF87F800D3B6E024
8AC51AE9114C3F5A3DDB5381CFCC78F31123A59E84A773A3DEF3E45973377558
FBDC1A5043E519706BA7F342ADA8501B872F1DE6369D13F15D202F8467293B7F
FC72B6D9F7306A0C9A877AE16BC30D56A0B208DA546903B801BE47FA3550F1E3
F16FDEAE6A34ECDDB9C87ADD12BBA280B107BB34C4CA07A8866B21B9D984325E
72EC2A7EFF72E9E363AFD9C6B8612064088FCC4B30D4DFB3EB1E58EC95C23703
611DEBB530443E9AEC490116A94C1982EEDF6476CBE3558589228B6D6D2C991E
E16F47A3438BA3EE27F0810D0E75E691EC815A22E4F06AC52972CAAC14E86946
224644F4BA8AECF2933CFAD5F041561B6E99B21777D289D7A16A42091709F0F2
FE374A5FE3B8F0E10624C67FBE26BFCBCD1624540A9E17FC357942D126EA5B0D
848F99829DA93DBFD4A001BD6BF9E20ACEF6C80D3CFAF3ABCE87C4EF6591D09F
5D7A2B86EE1F5B5FF3B7B7D949FD5B39277EB107BBD3E6EB771574CC29C1415B
4811FCBDF239E3855A521224E6698290BC0D0742A314497D1D2989F79776BF8F
6EC91CF0BFDD7CF669AA5422721E3E23FEB647CA29C674A2D9E60413BDCBA952
20F975CCD4A18A680E7C90DC710C4909D50036BB8CEC576642181C12B100BE9F
DF96A78AB04B239E4EE0BA0904B7CBB3F55B54BCA1F672C91795F0A0CC67460A
7B82B7B40EAF7DA2C12A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F9E3236A430
BA7E592654E23426AC90B2DA708F0AAB8811510131F09B4884979D611382D96B
E1124E7ED7538635EA25952B531FCAB29F4C8E7D591AE0494A4BF14767F034A6
A8B654E3827BB71922BC9474D03BC93FED60C90211185158981A89D3EA8E8A31
F4257A299412A33AF840C8CBE129C7D7F17D962490AF8190BCDED448F0BD7A12
E7DE0C2231D7AF3FB95A99A9211EFF34382498160E4B54DA78D2C41573894FF9
76BF8EA5425292C24145664921510DD78BCE5365E1CE48CD621592E13F40A927
6AFA549614B6A079B1D70FAC10A4EBC4EB0BE4D725F63A6FFE4D236F8B442492
E7A89D2DF0204E657D0E44FCA5F79A1B0FD42F02100F16EFA05F3922C53A814E
AA7809F0E8F889021588938A3A5F68B5DCE64779760C14170CC7BA746BF29DBA
2BFA67306C1B77FBCE256EA412CD417BC8A099FC5EFA2B6EA011A3C060F006EA
A48C8BFCB4BA4D74CD61A9FAD8F5344525EA820AF443E9FF5A66AED00E032974
A14F78753371F19D3574418A09AF6F4FCC0823D6011CD30D197800D063241B19
0836D5A9CA98BE49C77E1583DC55B0758CC813E0EDC810F88A4B4CC91386C73A
C04ED7D68DAD6C1C9A9D92397F760A3704F53CA8D26A0955C8EC13E0CB4A7EF8
8E3592E577E044F42EC01597DEFF1D47B7EA53FD3D3ABA9F3CFBF0C0DE305E7A
D2CBE046336FE0F152908B4D4E14C0E76CEE3C5B8B6C868E0E0326A9D87C65D6
3C14BB2F49ED2D369DE7A3DF565405235AF50043582A0BB588897DA22D5C20F8
A2C7CCE1A34A31E867986EF67FFF02FF5918214A94887DC1FA328F71E443E198
08D80B366E84FBEFACF55316F9F40FA7E042732D2A5A07070351CE3D94CCCC38
CA05A3B8919CBFFC5D05FE5E81A7EB8419C1A0139E11E84F9263F9BD4095E69A
4F2312EC701C2A55C23A71E12403A44356B75EC26D922F71F5848DBB629734A5
D169EBD2EE17ED8C83F0D1070B27D4919792C03CA93AFC986C34C0835E5B66B5
EFDDDF04A4D7B4A327D228D4B1121B69777877329CB5ABA942FE0F7E1CC26DF0
F139B04229B1035587B9A92CE06200918A3EE18F8882D055469B9236AAB3488D
9B887184E8E036205B149DA99B2CD2F337147B5D3D883F6349401CA8D7E45983
976ADBA0F5A42385E23E7F35484F14D0F503064F1C78C7A6DE3181A839528F7A
FC0758684673BCEB1C016B7C469D93B8CCF13C4D3F2E734BF11F5E6AFFAC00BD
24FEFC0C19947A45ECC6B9F4984A44937EA2BC85BFB6A704A0C274D99B8FCE9B
F97A619C980A08480B94D57A95A639C79D717D1A62CA14E01CCD8B3A7609539B
B1E313BACC161E4DFD3BBD84E1216F107604E9646515EB8FEF55DBF964A5C2AA
9623B8674D4C5CBB16F60486F9C38AF072F4A6A07BCE44699387D8B5ABE8217A
7459651CC8DD6791A341BF41A595EB76C3B4F963F546AA676CDA522409846E8C
52358CF3EFBD5E88FFD495F7B532647689F1F2136657C025AD24664C9D4CB772
1A0FB87BBE7530ED3C037A517E7F4D92C7AB7C85EE42732D2A5A07070351CE3D
94CCCC38CA05A3B8919E1C815686A77889F32C7D3BA4D9E714F936E27FD9D2E3
03DBFE59B74C19F6098ABCDB06E2D56FD40D8CEFA73EF0CDD6BB000E567E0110
BDE9EDF9D742EEFF2C755B34CDD3A71BA2D3F48A9951FD6B2822789384F7D9EE
81BB89DF3BD57758FD145E769D4E88BF43D19050DA58F5EB61004E47F96B61BA
0F88E99544E109918AB0BDCA931D736F2BFE4CEB6EC3DC2047E83B6CEB8E5784
76FA68A3C6E41516CE412CB410BD026231E22A9CD0F664D76AAB5F26E7231C3D
0ACE7755A750EDD67622BC5CA310A06611F11BAAFFE6876E4E770CD78BF01794
51C84FE2CD0C495CF0CC2A5FDBD2127762FC7080DC7C4B1328C68A9DD00675F1
D60FCFB1B6D26AA24377760FEA6FEE94FDF083C49DD4B88BC6F4D49FBFEEAB3F
2E9FE6A9BCF825E217DB5AFA78F7FBBFD71535FEB7049F203B46F9E301337311
4EE100B8B78ECC15D393ABCBCEBE9E532FA808903CC6965E0B63963876786B6F
D9FBBBC704C1DB36ECD84FF865FCFBE96EC4737CF89BD48165E45DC671B52559
1D002B858CAD24FFB5D675007BA5F18427E2A39CC5206DD99DE3E2B2C1075516
296098C0CE2464D643632452F266C34948AFDF91CEA5FD433B460F57BF6F0A5B
D9B99B46EF5DDF9B3D21432F66E1F7774D9D4BDBBC9C400F4F8C474A8EB54715
9F4D1B6CE505EBA5B75AE6500358B2A0890A643C8AFFA53F7853C377EC9A0A2E
0ED2AF3DF8E4CACD4206B6511C6118123D57440FD0C45FFD32872E26126498DF
01A8B4E7DF01CAE49DE944C25FE391DEB17A35CF2E4C380E50E1797F855826EA
B926A051DE6CC042EA679F78F37398401D0670B1F871F98366F453E34FA38D41
9001AE35BBF8E45CB1D9EC09E266A736E3363CD1D23D5C8E17CF1B43A482C44F
E52E57AF48D54FB9409D3DD85939EC795AE7E62F0534183A7BC46FD91A113FAF
353AEF3EB31FDB3426D23D1D73D277C764E0FA13C508DE4AE8DFA21E23DB7E05
FECB7CBC4A049B24341197A02EF8DBC323983FE3080CC0BE03329FB9B40EF6B6
782B1E4783A390315569E15641C329491CA0DDD3C61B9F594839CE0339BF6BC5
7AE9364475D40A38ED44F677F02D1758D1786AD39AE16131B522ED1B7F516E62
A9E5DB98B701F3DB166643C3101FDF41FBF4BA43DD3E9BE174A9ECC457EBDDCE
C1B3C1536CC61C495DA0ECBD1743751B2AD7462B848ABE1C54EBDEDF71964F2C
CCF5FF4BA69138800EE11E525F08CF4752ED23451DEFC0E88AF09C8E66A6F27E
E257E88F34E6654EDA4A3FCDCA0FD8808BFE15A1C12D0B23A95AD7CA9B8C5D4A
E5EC0BDCC168B924C861433B8BBEF911422ABDEBF5939079DB8A6761EB9A1A98
BC31C554CC6B2F7DABD2477DEC444F24A7256E1A20BB902AA55B520FBE8CCB73
674AAD058F26CA737FA1492D6F08906900399BC707F7B6420D0044982540AA5A
754D1EA8407725FF461106D38C34CF272A63D56BAE0BF64D38E564EAA957AABD
0BBD3412E1E8174A8495A573F01807A82D6A0C634658F1BCAB500A7ABD580D75
F5873A6F37020AF88EF7E6D9C645D13499F58A9813080D0D13DF2D681EDF7F07
AF550F3C8FB626505A7590ADB3C6D261F6D0B586320E85CF476D0D8752FBA35B
5D9288B8F54F0FB93B7AF74423F53430296AD39939279A093CEA32F30D8B9715
C091CAF8D0B982233BE7F21BAC8C2985E23E6FBFCB7BE1255583782E15806303
28E5CF1112FFF253065E2EF911A5F51C801F2C3D9985C1BAC3490528087EC52E
FE4DD9EE467FDFB6598E58BEF379A1F1FE5E41BDF8E59075D83082AB0165E0F2
5D37E9B93E79D1D9B0E84535512013C74769E497F1A919C747926594AD9E1914
F07F659282255057A4BD4900B1E9121121306593CBADA6B5FD5B27CCE77DEABE
EA83763F979E9B46603F14F884E46AADAEABB8EE6140B27C810546BFC2E5F4E9
B5E7F3E994D769E32FFAC7E82FCFCE7FC2A27A04448B7C4E0655C8FA2515B038
11844141F6450B0BDBA1789FBF48822B33BFC5FAD73A5F027ED9A201670D4B6C
F9B669F9A7821BA9CDB18DBF7655DBC9A73F5D63F34360CEA089E994C36CACD2
E02DD5903CCB02D9A0E71EFB7075790A3A1E11482D57964C8C345CB03071DF95
5001433FE00D93528FEC9ACD00389398C679CB0390DEBA757BEA45FA31710950
52B839F7A2A9E2B57C1803732D18A9B4687989E55BAAA158678817EEA58A4C8A
8FAEBFCEDB510A80A179EC5417CE43C28028ED227335AA5C7691B72AD442BDDA
D18F30DB190E4D0041AAEB4FAD85C8563C2D5E37C292467A90463679A22F07BE
7C5F8723199E67C94A7F81AD08BD684BFE08C9D31A90496F1A11735968BD0E06
478F2B489B0E9B262C69057B93B99A0719C9B9B45A2EB7929EF206520D6F9C1C
B39C122E1AE5A5B5EC87675B021FE9D71441E352111EB36FA3CD0196D7EA238A
39BCAB3E4F74E31F649B3D5018240147A5A0817887BCB9F55C05FB87B760B29C
99F7321F151A635D75AAEA72EF98772513DCE2B6F20266F112F398CDBFC25ECA
DA33E3F6D66E6A404512EA065022CF6B3D4704446D3A12157DE158671515E8FA
0324852EFE5CF032126BFE88AA9BEB654A3785E63363B41F13C0173C1AD6729E
5A5B5853AA7B9B87A3571BC7B448FF421F6FB420A28D40FCD6D9B321855BDA60
8E23BD365208D0B055833072010FFE6F743B14204876579A1A5E93702AC1FA8B
ABC1AE4CB0FD382E26BE0A83169B6C371950D63FEE7A5DDFC7AC37A6D9E49F46
CA0B3AAE98A934A3688EA75C4F7B414A39B0EEA406FA1978FAAAC9543651AB35
7F0F91FD8AFA989EB8BA0CB3C5BDD0A24DDC0866AF52E284D89D2A4DF5237545
DAB95D8159F2A4C5A3974D9DE100670E67B8FE790851B16E71241433FEA5650A
390A465E930A6CE175920C2EC7B3815B58F2A48BC4D4A692A6094FB5DD29CF46
BC063ACE8A01DC45383306CED44CBCFF3359F62327FEA224A856E0B7309A9711
146DACEBBAC83406A402F3A83FCE9918EE8E8D4BBDEF36BCEF76666736EE24E1
35047D1D412E289BBF35B80F92DD085ED3AC495ABE520B354D612D4D03C34258
DDC4D38012818FAAD19F02F65292D33D089E0242374F0CD1F449BC432DDCEB36
69E8934D1DFDF43498A55EDF16A009E3EA5EF2C0700FA116E97797ADCF647FCA
726B45639F0B40F7AF4B5801BFF9879441A81C2BAA74E95F79507D6582DC021A
27E724B353170D46D4B234CA5AF1422EF54B217A918C96E0C85D0BC622011CFA
ADD34DCEA7FA922756999E997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536
EF92678E9659F6B7FE5E0C68D5B2CB4B0A01DF4506B025E4E636DDD749286B80
A5C22474B49FC5C093A8233DE48F3D4072572E95531C63E1E76AA34EE0AC7236
910FAB4396872F925598158F2E622588B3F477531712CF586360C1E7EF756623
2A6E513C7453D17EE21BE265B4A6A89B1E97A66B2E9B937B85A69977BA8352BB
68ECC89C164C8DC929C750FBF2545C75AC189ABAC4D58ADAC2CC2BC2A68D4701
9DFE0986B36BE8F6E9775A927F2EE7ADF4B1D9C5D34017A12D8C3F1DFD0B90AD
438A22F57EE72FCFB851E1C22E111F6DB9A7F8D9F240B8532A9120DDF0A58F09
7CC13CA9BC695F782ADBE50737CE43B1580CEAC8FD3D1247F6B05A5E7A475263
78D488DE309603245605C897B2DAF5748CC962C2E032AD6D106CAECCB3A2E623
358E192532476CD8EA1F5AF507CB853A32E8C35C9967F17FBA10C2EF19C1679C
5AACA4F9EEB15E13959AB38BB720CBE08D7F586D9484EFF2E090F2B7B8349F44
04DCA1D9E4E8FD28F0F639B67D7840AFC0480B38619FC139A05EFD065090894B
C8200DEF93B057C7F66A80DC2D2E04CFB576E4C96F747EEED83CB0931C2CB7FC
105D442521EA9578696F57047C7CE41C119A58C91E9E8926B6193A12D4FDAEB0
748EE2F49AC021F4F38BEE8DF3AF651EE1F45A328D4D4CEA17E02BAE7A41A843
5066154ED4BC8963372E8DA264DC745C7970A1CCC9F3927A25540D40074EBF90
4E6C116D035CF8FDBA0A9D56E5EDBF25BC0A0D81EE204F09E4ADBE5BB5BDE8D8
B0F73B4A0A0B18A81DD123F8434BE971D9EC8149468CC0F2C45ACB219933EACC
2D796BA6CA1B93FA2783C18A7081BB584EF2D7D2FBB63DE146E1AC092E3FE888
245721D1A099378309A78C0157DB843CC75FCDAA40A5C9A5623B0797380C3217
CAB537A70F9439B5E8BAF9E2EB03F07F09F170DB595BCFCB4F3C90BFB9F256F3
160A370EBA3775F4297F08A50680F1872B0C648C191F49B0445E4D9172E11417
C06311866856D9CE093F651CCB5D86A162EB802055499A00089C771A6CC55649
1A618D5CAF173FF8AB5A6EB779CD2F07481FE18CEED4C93ADFF57D3211A340D7
6C926FB39698DABB64FCB88168ED814934A247C30339F32D4F973E31253DAD08
488B1C71AA6F08A5FE3F6222ACF710A20CC2172E8954FE7E4AE6BDDDCCD03A3A
1B713A265D40C79A86D8858830DD50D4A0FF28CBF3E55CCD81C0C9757D7B51A9
DB721193CA8D8B9795BAC734FF4094B635CA6A8CB8F15F9144E36E456648D754
560459B7CC6DB011D3A29C74A59723D8FD9CD431750FEA12378840D4110F0845
EA7DE0DB3C13B8C18440DA54557DA4B62C2DFEA2F2F226E1363F29D198F695F8
33CF2CFDCA9AFB5675005B2F4608EC1B5CC2A72778AF0D1376B04486A6E0CA1C
1DF9A1CAD2BC6E812806D30B4821F1AE91968CA6DCD7CC7C04DCA33030F187E8
8F3A42403FD460619560FE4A2048A7C611F6B74E90D1AB548A688C4F78596630
8E9382F85EA515D665F6BEFD477FC3D2D0497A8FF5680B70E8F668607F499E1C
514C1363EB254FC019CBD987651EE6AF9187E298CB7AABA58E3FB5B4C7E86616
C30FD6BC8C59DE0A5C01FE0E5F3EC7EE6E6540D5A2602E6A014F325AED5CE378
5DD783438D89D92DEEF30B110A08BE39FD0EFD694DC5204A247B081D9AF5108E
51851258E6E1FFD0B18758DF9ADE231B76140270F0A05D53FB3F29FB4BE67A18
33D36D09829FA03EE7D559D5AA9874D429DFE775C4064934FB530B35AD9155EF
03D074AB553BB4B1EAE737051C55625AD1F9B8F9966E65A7C94A8D082B80AF1A
D0EF0622C911960E1233C57EBA78A4B34AEE6B2000FCF17756073A09ABFA792C
31C37AC9C62DC25E25287771F728FDDCE8BB0876873C49ADF8152818A7C3A347
36A40AFE69B70251CD50E673DF9FB84B8242343450AC90EE56F9DEE0666C2484
BBCEC64AC7004C28C1664A4F155166BA36E2A6FA8745C28178B036AC8106AF20
9C0242177CA5CAEA90D1B9CC6D71FF2EED18FB984B6FD2E6CDEC1757543978CC
BC74C7AC23421B58D7A535E35FE70F9702416274BEA717043740561888CF9249
34CFA9C9FCC9DA54ACCFEDFF8348445629F196BF168367AE1416AF3EA92B6107
7C98F3043D4FAAE1BF79D5B8704AA52DBA8D37A86E9E871087CDC163F7596178
F69D922724574F7EE6C6E5AC60D349CC394A7AB9B964F4168867BC4456186C46
9B5CAC9DA5727DBC8D5BAC9F35682508EA25D684C53723CEDC5E42A4D17F3579
1CD367DFB5EADCA1855C2DFB7F28CA33067D35107E25C31677E08F0211139FAF
321A2AF2256EA0675264922F9A98E6FBC31DC52FDF69EA7692DA01A508C2FF70
96E17D78E2F616C93E40176D66D31F4B4F23B1370C6929AEC2009D38FA1C6382
B9FB181DBCF8B1F5AA92379424BCF1D8FD899EDF21ACEA37046A42AC0058159F
DCB85363C9140E4CB4BF7B3710E3419AF0E9E6D69BE9A59FD156E213BEB560D9
EE60494281C0ADD4A7DD834FF84339766A71803F1C6161477D48E5D1B1CA9524
457069D854689ADC65E63E12D286F9DAC374E9A17AB678698D2B6F11332AAE28
B73F5ECC31CD5366FDA28662B8B1E5B0D69E77228C3972EA73CD58675E2578A9
CD6E1CECC57FEACEC6454D27ED715FB3CB1C886ACB3D1022F770E256CD75521A
8C020A9792AF986358B661FF1620D17527EF0EC2614EFC317B39D23DC133F7F5
ED56931FF5F3870023C31C1FD013E1468EA17B1B815B966A2F82D27A9DE7D80D
C986174F235972982DC211E841D87FF88EE386C0489B9079103C33B05B33156C
4B9AEC2DA6D2B22E1B141B304E3316ED1A3F6A65493243EE607CC5E8C7189E78
D019562D5C0EFB93E00784A852A32989A63805EEEA8B14A64CFECA4BE02AFCDA
D5D4A5479C77743044EC0600CAE66913D3A890B07153FACE09B4A3F3913BF55D
92DA86DBCE70EB2900DDA319828EB6E978C0D0DD1901FB57909918D07EA762F5
B7FAD51EF554621FA6B22F0346F9E6D4462EF7D04CB0DFD5F4EF8A2692CCA847
35346B765194A889582011BD88BAE1665CE873BCFE5D090A8984E98030FE6B21
D7F69DE07DFCAE1DA5FBE871D8035F777CF210384EFC648AA6B41843748F2D5F
C69030F31EF22D4E33B72BD8E827DC7D26D98C3AE27C211C8C4FA5132D2B427B
8583BCF0C867BBBFC4E36F50E0788FF62C1E0E08172728FB08313643F1383986
C413CBF283AA4E1B6102C1BD67947C84C6ECADEACC704FAA5A18D9F5B26CB727
90991B1041E96F803CA3B929414B1B29EDB53F00CFCEF86DB4F0C65EA00D00CF
C5CF8008EFBE21C38F9927527A4AAC3ACC4200AB12E343A4E98C4010495AC37E
F0FF52EEF5F7D48A5360640BB17710A5ECDADB2CDB17ACEFDE8AA1B614608CC1
86834F549D3C3FF963013711AB72B76C72F0994B54F71CA58B21B16CDDFEBDB0
D3E5C308E5FB883C024B09341F8D147A88D61C5990E609001B853B273DB1470E
8AAAD463996718C19D155A62D7AE82EAE4C82760C76421C1425C9328C360FD1F
FE12027F79F212F19C2A5163D6161A563418A13D5FEFE84F45AD559E5FB1691B
F17AE0671DA58803170DB43BA10C7628A9A8A5208EBECD5DE5E141E38E374DE0
1977C142E0ED10318333382EA7E87803F64797942F9227920CAAD43D1B48EC23
887DF464AFD3143473218B6E51F82EBEF76BE7CC8B80947EB7B5A862A0C11DA4
175B9F63832FEDB75A7C3C17037463E46D2EA9EBE4DD2E4ACA345BB401A7B127
F68F2914E2E8CB185AB61EEA65500D048E11CB8A8E505E9E31AC0A4512005C2E
1B7E7E577631C7BFED397F59BEB40AF34DD04B04DDEFD817355D4F877256023A
DE33D6EE10BE2F9D0043E6D41E963C93AE5F9DE5F0FA3C53B8F7DC016EE09122
E726F3DCBB29F24D88E90FABA5076969F99A836361EF3D36CC0FD6ECE0EF01BC
D9EEC871AFD57FD3D965224536F31F7CF7D9EABCB9960BD4C526766BCE7972A5
5468F2419DD223827EB960C01DFD5B7C33A6DE4D996A6493AF6603E7BE95D2B9
E8B9F50EFE02A94198A790E6F4CAC69EC21CBB0A68F265791795175CE7FFDE73
9E4192FF24BAC582AD3F7DD4F42C692F7438519AAAEEF0523C596012BD51E123
00D2723BBACFE26853F0DF9F75378CBBDAB5EE420B6D136FDC941CE819C6D2BD
022A0E966A7DD5435CF699EFFC1E7C2FF53F19060E6B43DFB36D10E8DC087654
4B886DE6851A9084E4B8F79E73AB5384E45098AC5930545B63AA9E1FD26F2602
6BD1B23D7066FFD0D336C9BDF01077572B7FB2D4365582E4B187B6B9DCD545AA
99CF8EC08CF47C409055FA93DCC55568391DA37F10FDE34C570D7BE76A496A58
242F51E7321385395C06F644205E11D810C3394BB359F98A79F25C60A550A241
F77604ADE5CA870961C65D9EE861F61D0090350D62DF0E62765CB57ECA2162BD
29F0E926A1042B12A9F470F712AE3CCBA5E867BD53A467B00F5CE8DF21D44069
74DFD7561D55C9E03EBB587B340A358A65ADDBE9EF348314A31D7773B74C3FEB
1BDAA3EB9F97BEAE8D2BEF4046BEE713B7E40F77F7F6EBB4BF933204D9E5E28D
57277304EDDB05D506686757C79C2ADE54B913F1ED476B9AD33733A6DF57FBC2
74FE9A12B667165B8292EAC86E2E0F6E603D91023125015202C1C08F03BE8678
A22E2DCA395802AB247E9FD612C7762E866A6E4C83D0AD28B08CDCCB8A2F8972
427A47CE65C55791AC67DF9ADFAE75D6AD391163D68C0C3A76CBB82A5CA95944
0D18A5F1811EB35214CF6CAC749486C2EB98B5C918F0139932876FFE2D526762
7FEF41D96344A05EEE4C43E2AE2465717145EF2EF284C2DAE08E3664B7D51FC3
4898B2382F1AF176D21A7FAB9DBDB206D03671A3FC18C15E34F70561F30C45EA
D08ADBFAD028161A01E97B0A9DFDF088978B96F1AD1AB56B724D32850236BB28
D5F84CBA02BDDA2517EA1D1A83C27343473FE2C00C904F86AE911FDF34523600
8FB980B95A2F77EC3E049D527B3C51560442A175D181829D3C1B381FA9B54CC4
195C597D6799CD5B7F09C61C4749010D461536A8548C62C88BF21AF882B124BC
0CACAC17D695064BCED8FC5E0BD1993772BCABD0A455BF874BE538113E5BC6BC
CBCE4D0F09A5DC24D41FDD14AEDBD694B2E1E2A3624FE3B545F17BD80E606773
B9BA49E52EED53F1BB7DF1C66513FB59862A2679B71C2BA4F821ECBF8420AA15
7D2569CF91936714A6AEE5697501FA19E2910BD6004EAB05E713C3C62B085338
1B561B1DF65FE7769A9CBDDEC9665BBFC81DDBFBBABB1654FAA5CE27E96DFE61
6FC43482D75DAE9C9CC68C6C3135387F39D1512BCF4D973B036EA5FF44FC25DB
E8A7DBD18A8B9AB03FF2A7A697C3F18F402EBF6C56CBC4B24764D050C43E643A
4660FE64C1C440D1C80183C887483EA284E7881267FE185C0962BAB12D247676
FDCE51B2C79A29F57D0554AA5BFEB4F8FEBEF49AAC62C0ADB175C4E5A961D31B
58C29F596279152991FECE69C1D1B0A1D662D1A891AED26F9EE669A054D98A25
12F90B83157F57E0509772633BA76C9E30FF31BFC9CB723289282191932D1F99
D73FED06A534F29DCF33411B194DEE2EC1B99F36FA1A129D24789565B6D4AE9A
5651A140D24002BA43D9321A389EC6CA674D6810D59EC974EAF5160D6800FA73
D978E67BD29C9B7D0B357E17E473AD1FC59C83E6AF1F16A08B462E5BD3BB0208
A83E16FD4236560DA1C968928FCD672C68A44E8E72936C6F0C5C2EE33F964FFD
33AB869B70B1EE04B8F64EAD4D768691A425C1CCD8E0430D1D9C81D9C87B2274
BFC73F370692C9073DD69E1DE986C7A18935A33820C866871D99916A49DDAF62
DA4393CA023465D6C72697815C68EEEB42186B4393C796C68E719CDEF27DA335
FCA19E0F1F3F823C5F70C99EB6AC1752FA35871EA3D5F12B0141EE5B103D0BDD
E12B7A80FEE1AF3DC958B687F6541DA16CD6316DF7E62140DC00FD5F6F1725AE
16D44B8FE84C3E122D4A67EAF18331E151718268DE4D626FADFD70DE44B561BB
C3C9D4CAFDAC1250C88230C1ABA34B4408C32592BAB185A6EE6FFE884CFA4890
35E2D061E086D27B4111C98DF600C993D991D70B5EAAC7A639213EC0F82A1D77
50F7CC5A9B5F86F136B2515ACF4D5385BA128D45BC7C9615EA196DD59BC53850
2D18ECA4CAE179C9CD6222EFAB73100ED69482F575CF89AEF42714C86EFE0E9D
A6FA4E575616C1E1417E02C197B010E49F7B468D51C05113E4DFD0F1060DD19E
F66DA5E780DCCA30F180F8DFB0CEC4678DC6B6B41CAC835A14B1FA3C5919589C
C2B5DC72244995F0A478142AC751441CDAB0F96FFBFF9461ADD9644052BDD3F2
BD829F18A73BA4F6BDA48AEF16E1AB71D7CAEF280803D87B91B4892171B39C94
10EEEBF42BA0BED37ABF1AED26025FB7B374414B09CB3CD37AADC801637BB597
5AA594392C72D0A2FA5236A5A4FE26F2D3AFF0FAF00DECEDEEB8918689CD0F89
95F1F186E64A7E2188767D35A17D54991D9213432C4942BDD1A3534527BA66D8
3E9FFD7DA3321945AB3C499C703299BB9DBCDDDA0AE75ABED8B2E715F529AFFF
9580F378E3BF2E5DDC5F749C1EC8B0A623BD35418A3FFC6882551FF6C31FDD2D
1FB4E7A6CE89EA7C92E036C703AD5C787C37A440E72B3A50C3275885620061EB
2DF44721229481673698F8ED00645552C9A12DBE0028DC8EFFDA32825936EFC9
408AE24ED485368169D5500520E2AE932D2CDF44BE336FD2C5FA4A4247E469A1
5621739B6E1DB9F512889879F13E83A1329D35930AAA74A477AF9C9F36E3A80F
AB735CD16D6BB3369988002EFED96985DD1FE216A8C70FB56F0B68B2B15BCD5B
D20CA737F5EF1C8708BC1E85F65E07D48C4D33793E21303BBEF8B214E893FB1B
09FC1D40D3766CA1A102B01839E14C4FB9AD57D9781EED44CA7A75A22126C2FE
D7D75240BBE3C7504F90371BF4BF97B54166D4166BFDA12BC262DE9CDFC614D7
DC1BC5691098151E51A48B8D95C5D8F6870640EC9641455796196B2200D73E54
B888E4F1B7FB089DA26F38BC76823F5B4A03561189EF28815477997EEA26D31D
194DA347C0CBC9196921ADCD2E2FB1CA1517AC15DEB0BCCF94CE83436E9F7DE4
237B3467B1A26791BB653B865750745817CA28E54B2CAA612EA316EB8E8A825F
0CE7F33BE13D8D145F8ECCA72B5C96C1552550FAD7630471C45B19DCAEE5454E
B70504498902ECE3FA1653ECB3BB3FDC0E20B2B90D7071880E61BB4F263BF9EF
4C056B20BAE69307301C2ECF289F98068F254ED1A91F7031FA0B828C89F0402B
564EEBC32EE50DA6ED4BD6582E0925DDC2C0F2F0DA63D0C8C01B01B66615CC18
E10CAFB985B78B6479035DA7CCE7CD6A990F7BF552E25EFA7274938E55FBBF17
4FAAC6A56F164AE09392546A9760E5ECEA9F2FCE0B991E85351CC59DA4A06CC6
D3429CB2E286B738BE2719E23968D45D1878786A0B6D846B9DA0C07F947D7524
D37DC63A400B18027ABE5C9E7302EBE72B7927487B8A16E97D3649147498874A
165F2B6E7741D38093834D9D811F3A0088BC39EDE06DDDE418B6E3E407307088
DF1BF21C09F61DFF2E952DA86B8BE39AAC8BDDDDF5625C61972D35EDDD2B200A
FD880E519D305B0313F71DCAE5B69DF9551D56E026EB25012C5160BFD7AD66A2
DE7D9CAFBA0562AB6D2D578E8896E369A28BB4800C8A74DB71B80A9F2FD46685
F7B13BAB8CF7D678D9916169393F84630D51AF81054A69F4CC4FF93EEE934F66
1B73BFC5BB9BA339A01EE6F8188B33D3EAE60B699B566E964B52CC2EA8F3AC2A
C682AD9F0A0F6A9361757536A48FC7AD16407DDDF18843C43898C292BE421220
66B6EC8B8883480540EA9EEFF488D495A4D7F6ED99841B1C851FCD2C8009FAC5
E0DD0BC480161D750907A67017F522B1B3768E6BE692406E1B8C17A5AF22C463
745491A7BBCB57E0CA5E8F14FC7F9942B396357193569516DA8A5D3E580FCF14
B26666E8F75B6BC6389E7A85FDEBC0D74A10486634605FB2DC8090F2CD466968
0E1BB64E7584DF93E547DCF3AF3471F16FF759D63A7C091ADDCD3070793D6AB2
D1B3339108E2D924FB26FC7F1A6123A48DB47E90EB503A2D1437C4008E97C76D
74AD430973E848FE7FE32500AB25E770BCFC5B8326FD06BD8F3BD37EA60EF1E4
AEC33589A13F6DBEAFAF69B753BC0DA94017AD39CB4A39587BE5AE2347C835DC
00E5A73E95668DD0484C7199633C312BAEB63990C31F1EB7DA809BE9F612EC57
B1FFDC2CEA9691547D4E09D991240353279EEA6062F7A7C740418179190D6839
17F11722A259F7809F3C7770900500F05A5726E516E2BC07882391D097750AC8
A9FF088E45A42010D14402EBEDFF0B144B1C9BD22D737956B507979549C7FCEE
1F220DEF7CD6F56354DFE69300CBF905E358C322B2896A8BB113136337F88C41
B0FEEE9888A2B7F9BEBA4A9630ED0ABE793BEF39A7931111DAF7BDF2F13E3881
2F6866EAF9C081A5A1169936522382A4856842FB35256D93962CEBB584381E58
0898746A333F3FBEEF53EFE0CAA60432FB85C125190EF73FA30526481A3321BD
24037CA7A96E3C66FB6A93CD041D9A34FC791335B94B7B4387ABEAB4935BD57F
48DFDF2E1D79D46CE8848689CF391A95DC4C962D8ECEA8E753C2DEA7E42E6B3A
459D3ABB1719EFA24171D3E508B67D68BAF10B9077834F05B3A04E3B37712076
27976719AE233197E72578A981E8CB4A17B989F2DDC463DD6F84DAB963F52136
4EAC126C66B7EF67D7F0788071415B1E7A6CACA81F234194ECFA42CAEE34B742
B0526C1D6B872A1AD8F4364FDEFAC24D88653589B431FB84E4DDB650C2F78359
4DE12B074B7A4389BF54308B3DC9D10738D919BB73128447CA0EE358C322B289
6A8BB113136337F88C41B0FEEE9B2C0E58ACF08F7C784508366CBFCD223ECEEF
F45CB2EEA73358BF4870481D8FA433728039209E7FDD13ADBB95A91C6DD59BC5
38502D18ECA4CAE179C9CD6222EFAB7089CC5104318FE113C2FEE0BE9AFC4DDB
110A7AFEC7A2411D25CC981E526F1D803C93B2A2A07D4200535F51B9CE70B908
144FD6A49D62B4AA487C72F456899AB090202F3955A389058F3E4A6F5A3313AC
34A06DAE5E8BBB9E997D2867ED2FB13FB2FE1EFFCB37E7252F1EE3FE9DA3C967
369226533A63877176347C476352369CBD22CA9CD39A49F3D30A380FF7241CA0
B946476BF3C0125A12E614753A5217BA0CE2012CF2809984881E54D8F8EBF1E7
8F5A87FEBA30C9F6D8FF7C739672DD5D53459876484962A21A6794E68228EFA1
562BDD33EED5BF5724FD8927EA3ED54BF6DCE9AB938BD3A5034A449B9544AE78
819A487E7E5B7DEE7F851376A3B93629F608E0D1A2BFD79F8F3A462067A1324B
65EA61E97B2819EF932341824C2157018FAD195FEF30511D5C87876C863364CE
4B089A976F9B70088189D388506DC7D27EEBDB3572D9A8269430E403BBF26BBE
F386127BBDB53D25E68448A975CD56BE0A94CDB000E966EEB4D3F920E55F0E6B
D41BAC278FE141F4D8BE6B4B657DE23503184AC5C0E91046F1B4E859D8491DCF
4EEA403DDCAB8837EB696BAC4B915CC97D8C70179790F64E6DFA4B45B6E42E31
6220EFE099455232455E486B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F0
66E55D377D3EC454B9E8E4E4B7897387234F730A1D29070FBCB54C2D535A0A6A
48E0941628A53EF7B1ABA77111308E9D59FA2963996A30D6DCC9BFC817E12187
12A11F8BBFEC2975BFEBA668D5179361893A2A2756F844B8C4AC10E68DA6A444
6A08B17B7FC3711153E6DA45FD0C50F9C83473C65C768D28FCE6B537964BFD62
F54A6A98F74CB852D6510B5AB1B30E1EB34853A966E93490C7ED6E46D8FE97C3
13D83D481291F6876456FE8413B74A66B44F623D0C35CC8E183CD3F00A703BD5
4189895EC6A8FD669D67B89E18DCFA68263D42A83ECBE00FD5DEEBFD27988078
EDFA0016C246DD74F9EAC83E0C52AFE08D25D1B094D9DD8FB120F7D89DFFF3DA
DFEE17DB825211F26B9F47DE4A47F2CD64A2F09D9C9A2C97DD21734FB6CF0E76
FE0A93377678C61F7393E2E3E7D6B1093F9F3749B84F64B1FD5992C1EF09AE2E
40C7684E34DC85646396AA84DF28CF38994138E0F4E0A065BAFF3359F62327FE
A224A856E0B7309A9711146DA95E3E0973223307E3DB8BA40126257E05B20D49
4FCA28601D8E873523346BD5A991D00BAEE2F2A82E2D45D45876647F5F1463AB
FF37AECD69BE9AD7B87EC13DF7B662B32E76FC49AA65343193F93DF239A12992
E860C899CD6273B37931B13D7B0494AEB0115D14E7826F40A532E477A30F39A2
D3A7C748664D0DF3DAB0C546942F887B0DD34F564B87986C3004ACDCB3ABB01A
2C527F67DB1AEB0C8EFEC93D5370B05FEEFF8434A405C1A2E7250CAD21B11B05
091A434A3A19CAC124561650FCC4B0F0FE41F567624AADD69471CE6B07099AF0
E0F7240A1B663AA361A0A6EF4483E0694B8D49201A31572A3411D94F83A0C237
EE5A6A0EC066319191D8B1E41B3BE2BD081CFB9BE4B51D335196C4F551770C28
070FC7FC7A33F62D3FE4A7E9F231697A12FAF69318771383D3F2349AC7FE9353
98EDB29EF330A07650344DAF45A4816FFF15F540DAF3BC885BA41ED7303D15E6
33A518E3E329C40BFA2C5B33539597C479F86CD53E8CC9DE6B2DDB148E81B1F6
B9E2B2DD0AA1123723667CAA346973A0F5066F1FE1971379E54C2E62886E7D17
82813C55CBDBECE69835137D4D76F8CBCE87C1B92746E8267FA78B9321B74971
95A0D094F8451D949012E5C307F7C8B4778CD3F19AC7CD4C92632EB7F4F907B9
634A3E67B0F7613BD667E77DC9CB0006F44C3AEE11FDE0AE74936FB0B1B5F204
DB89A8805F8D741244CA197B190B0C1083D696C0FA27B86904477A22C4EB2F20
F2DAB3612678BF24A2450F6E99DE896F7F3E407973B8113DE184E683D203AE0D
A141A1BEA4E6E3E778DA7DABB7B721D7440302D3F50A273DF58E4C5280F43975
9A908E296AADE1C27B8F6888B20CDF4ED4B7F2CABFA184804871314D5D009BEC
8C5951422C3492BE918862A20A01EE2009B8B1BB2CBC48AC2F425E8150E0A2C2
1079413535286B41180AD68E00DF5037586FB1A55007FFF4319F82169E5FE0D6
13468676A21638730B3AB6349850CC2FA229D61C1DA78B0DBF62A24D47AE5385
477AECE37E9ACF79E494464447C416FC35CA59D535567B2F767E2CDE26F6A943
21C8CEA614A5A206295152CE0A04DCDE1E91CAE0922A3C733FB9D45F81757CFC
8ED6BAB561965679E1ADDE1D278201E415CAD59624BD9A18C85C1A9DC3EEFE39
67E0AD6A928DC1107327442930180D8F75086ED33271BB572126735E72BE4407
8D1F71342A976539E73798EB43CAD793E287BF3CAD7E8CAE1E9BB5F520B4C6F9
76502D50077BE9AA1668BE627189993779AFE70B2866FE65ABCDAA308258FCDD
D13DCBB18E462B56FE576FAA8B00CA7BAAAA548D35CF0F04AFD65A7E44E101EE
0A851DD736AE1E1636174399D9E9174DD406F83538AC00F8030FC501B4758F1C
0CDF3A5FBB4A0CDD161BEA238A245769B7ED30FCFA10230AD6C9E809341BF5E5
5B39316531420847FDECB667D6344DFC50A6DAFCC37D60FE2B2A4089F04CEE35
C0B41847C41C143A8ADC78D7985914C1E63CD0B7F53872A094C4C437D31470F0
38E8A84355062C0D09191F8E0EEA8B2AAB1BB852FF9A88ACE08EA78044B1746F
F6148CE49015828E2C2CA02CAE79CA2D5A897DF33B1FAAD1781C2F7D2BFEC411
AADFCC865CDACE4FCF60D33CF0386F6A52C8265C910AF297CDEE3A173F61C065
FA2517348B3B443B8A9A314FDD21F4829770C5B6E6244E5CC893BEAB521275D0
108121C2D778E2655604D578C1E449853FA9B6D42C49637CDFE9D0D56EE3A056
0C188EAADF0DF449FB9D09F917E5CA703C7E97E75C82DDD7A545A4496B564809
19654F753822663BE49A69E2808F1D8B26E038E11B8F39F3624BFAB0758A09CE
4E3BC6EF64287F63007EC0069515C10E979589DE98364BBD3E2A4E824433934B
7C586B986BD69FD39E64A73A187C3DBAB84A96C2D9BC543C24439BB8F9521BCD
170685A19407BCDF24BA4B41EED384FC907E25108902BBAF8168A601884EE0A5
128AE2D8558A3C7A0CA72F564C6B6FBAAFCAC14EB507A5464B2BD71B06A3846F
24A61D7C4BBA921BAA2AD4527A3B1DAA94CCC59E29055CA4C08AE880A5F0141B
17173D3AE9120BC732E829383BA99EB05C8F1949F60923FC8FD164ED889756C4
33E645C6DBF90FA216407524BFB937DC2A7E1DFCFC7A07B80511BCC94E549E58
EA596661B0436630DF700BA543A4B0637EBA914A19E8C80DD969D8E5427FE689
BDD185B8EDDFA18F181492EAA93AD34A860AFB389B452AF5599D2B6CFF6E400B
0C2415352FCE77171337A834B7D11141278E965A053C01C8FEFB74E98F94C3CA
3C9FCE272CEA681D6551B64481B6C9D9F4B3759184886019A5C686F4E4A3F297
2365326559F72BD181ABEEADAA770048892AC3E653F396E36D917EE44601E065
840E1F2BEE6581664D04E18716283379685F0767B19700EFB97637444BA18DC8
05E4ACAFACE067104A948A8AA07D57D7B117DCBE6844DE44CA0DC9DC4F6A1093
5DB7012139E62A58D5EFB6AF366AF3CB17FBDDE67EA87207569CF5AE5E51BF03
C6E0A19B83B0FD74D80A0672D0B5329D182DBAC3175B3B5D710F8C0C712B8178
464744AAD1BFF3082A99D9F007832EBCEE1C4592AD70F02F37929A800B294D1C
5A84DE67A2986134D44448FABBD7D160C174294CBB9EAF5DECCBA03B226D826D
9CB72865458001478C1F3EFEF5A3E70719320F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic6-Regular
%!PS-AdobeFont-1.0: LMMathItalic6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathItalic6-Regular known{/LMMathItalic6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic6-Regular)readonly def
/FamilyName(LMMathItalic6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathItalic6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{0 -250 1241 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD113E9A4707A44200A15F1431F9E64
6F74A5028622F1CCB472247A2D3C92D19C0AF82A97AA93420B2252C089999F87
E9B99CE919915A7841E47F18EA2729DBFB8D0F265978077327D4885A16B99026
3AF09EBA03D665F320B724646224778F5207197EDECD6BA321B46A9C7B1BE014
C7AA72E7AD74DEF4CCFD1905F237AF725D38159039E347BB692EB0BB42D933B4
A4F5113867999A3BDD6E56036DD46F7BAD9445E0EB69D6BCF844741CD349792D
3F6A794164344B7301C4BD8C500C92214EAB1BD409FE0D61470E69C69E668D73
F1418A89939E9AD8AE9F3EB718A13741D72F79B4E51DEFB2029F4979E0C7F79F
8178AD7DFC03558964BF7FA8302240FA1B7CAC01375924C41D0200C60452AE3C
2CD5F7EB6BFA476372518118DAADC1D6E053E534830EEC37A0160A24FA76B86D
3FD75B97E83D4B1E1216C901748E31B5AC51D15BC8B8EB18D83CE35525239F0C
0FF52411E08D5893C09162BFA0EA49E1290193D19157A30A5F21797106802635
1F19BFECA6B40461144E82A051FEDBCFA7B096E34A7EEC13F93B74652D2EF4A7
08522EB97A15EABB2AF74CE73F5B8935F65DC93EA24E129BF18D5F8B4E890B81
105D0673055DAC2775314AC07C1D99428076035B0EA20A382B61A8B4548BCFF6
0F0A48E059E7497260326AD89AD9815B1F9B36430AB8527D61C5EFB8AA5B6B83
2B5053D7C25089EFD48A2E023C219158420D77BFE7CB795628865715FAE6EDB8
89F423F0B97DB7AC2927F97EC4ACC2E9F4BCE46EE66B37A2F169E33177ED4408
5F93FDE909FA829DE0AE5D9BD0BC4A75A0141AA472AD0ACEF816F27FB4A6CB04
13BF8944FA31EECB2BCE2983E7CD2C9C68868890B42D91D3182096A7719209AD
32A69532F10D71FA1567B10B0CCD4813495F34F89764223F7D45F888FE1889BC
F7E9E0C3E520C1536228FCE80FD44B49B8059ACFE6DA964B7D4264039022F974
E8A6827C6C472B256C93764DB10436956E134C91DE3157FAA4BD45965949563C
96042779A46D091414276284CF0B0724C8C0A9A026276ECDA2CF30CE3FB80656
BDABA466503D32708C76C3F755C52C22964438FAA61F9694817BBA9025D99E3A
86A4DB4C064CCBCF3F06D0CB07AF646EE7912F0E113563E7B2708EA788D1FDC2
2ED4BEBCC59426426F104845FE5C4E7C75B9499AA1A2293DE0F1635AABED98E3
1EC57687C22D808125EA81913338B104F7A8F401034AAC78A9E51BC115E89D7E
BBF9496E3359BA42560E881B76D6D5D885CC186681C90FA96D04926140B21B2F
27E6D26CCD855C8725826D01B6AE8F6688DD9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A11065111310A46FCBB19212E33F0B75634F4B5550
DCA5BA87E18E4F07B5CFD4BAB729CB705A53CE0E0336424602EA4A3032DED7AA
13FDD13235C6514EEA804EE4C5F3035A6AEE4391BF9839800B20C7E958E4B42A
1EB67E90C22A997075D4F197AF8485F01346CB8E17CD12A285205B2D5D6FBC1E
930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A3BFDCC677895D8C041C1
092F4FF2D03D6091E3F950ED7BF3F41289F48AF0A0D302D14F972D7E215AE40C
27F118AC052C2E917C8ED53F194AC6DDD541E4160DDE659F85AC3B58BE49788B
4428D9918CA66CD99164031767650ED4A3681A84D170419B1D9D825F30DF959C
EB471230A8942C6B0834FB86AD04CBD02303654E4D1E40609B14C8D1F9635666
1F43F7ECB1CF1480CDFA71035F9EF833A4B1B51E56065ABFEF1036EEAB8E04F0
95EC4B3D758F2C2368FAFCBC926D5660E96B9741B75A6395CD7C83F9931A7999
0298B08DA5149E3FD6CBEF3D79B7E604C912EA7DAC8E354F1CEA9C76D10F5718
23F71101D2FBB9CAFCD196E7A653070E680B42E542CB7DAB82C4B4329E5CFF8A
B0F213E9D5CF55D422C79C38F2C2F487CA8BC0696574F4D97784BCD075E22809
C78DD4A7B6D83F99EAD74396128B0C14658CE0A473AB3EAB6060F37CA8DF3344
6E877BCE976680AC346250670C41BEB73DDEB6099C156F65478D26C2CCE2BBC2
D1323B239944FC0727155B6A248DE14B83C362595A23B2F32A46B578F76FE702
7B3CFB43CFEB594BFF9BE4E7F8ECC5B006D8B46997F3DB8CCDDE45B16F33F170
30AAA7B0A2CEB87A0360124FD1504C60DE1339C3BADD2EE20443E015CFC5A976
34E4948BA2142FB8383DFB5DA7A5A97407F3DEF442B8DCCDEC2DDD4A96ABAD2C
F549FFE58BFDFF5FD8954C0B4A8233C657E19241996C2FE81439067979C57205
08AAB6B59476C63E035056CDBBB9F4DB89659D42B100853BCBD6B4196EF1712E
B3029E680F9156D505934B2008BDFD071E49305C993D4CE9A3FA7F588F2073CB
A7DE351875F46D0DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E4BD2B3B7349
934E69E48EB70222D8B9D52981FA04764322F1D67522E273B443AE9820ADB530
3CD0D839FE2DA6AFC55AC786BB5451BFB6C5ECDAD7BAA8CECDD581C5F70C2E00
5213489EA21075A3BAB4C488358207F7D538B0B8EB1F74EF96BF93802DB51EC3
DF27141665AEFAD538B644942B6B97E778000DE2F2AC2B228AC44299443BCBA9
770319B732CC695D238F69A4CE6BF98BC4EDE0996427EDA0CAE0F19C2B1D5B91
7C508B83F0A2BBD5B56D32B90E027D459D467C66E0B2E159858689CF391A95DC
4C962D8ECEA8E753C2DEA7E42C8C52188E0DB5CA45552F8867037B2180897707
BFB944811C58BD3A3C1B47EA135377F86ECC12B42AB036AEAEDC4A456134C235
D3B273A659AFC6F867A0A6B4726433C75F1DC0671FE716B7B6D84B9B963D21F3
225933FAEB94966600A8B720DC21DE0755EEE6F50ABCAEE853F4D847CE7B282D
DE7EF7DC6F24FD7D8118F5301E3EB92D3CF24F6243BC42E7B1F1F575D4877A14
A10F8C8CFEAA802AA756D295E404B2B331CD0C7DA22F5FAADE6BE18603642142
C01F7924228A89E064588D4BE70311218D1226787AA0A3FD23E2890634946E91
D1AF215890547EB22A1FB22654555F8CA81A98FF701E4E3F32A4B1E22FEFF347
BD3FDAC64590A3E6AA52D0F676F11979C7744E54E5B0088835B64AB5BD2A130A
2D8C8272237FE1ED4B44EB22E96CC5D185F48BB1713E4DA77B4F636BC2CCC399
49980502A7FE534FE6B7220E6B0CADBEF44EDFF90FBCAE8C4272E2CE583FD73A
055ED8294860FA3B4DA4284E7DD36A5A8DEF27122E4081AB0A60CB630389A4F6
01F284FAF60214272C9F9FB2DF078049C357718AE82962EB54D0F0DFDFAA44D0
CC32979A1EEEC2389C5A37BF4368E12CED705AD291DE2A3F9351A8674BEF0BD4
CB42E6B1D03FEFEC635C4E3E11848915759C1D2CAD099DD60AA7BFA31435DD57
C23D90ACEC09D7F9DB5A1476962A592ABFFD7C6573996FFF0F40F4D2FBEC5B7F
4C7EF6B6759AFB2EBBC09D2A621E972546C8A4CE88818DBDE72D030D8E884D31
5F5650C4367D80A903CC4192686020D0716C1FE23EF60C89987505AB9A92AD9A
55EE0636C143463EF284A9444AD2113D19B43A4F31EC8856A7DECEE7309C0D14
8691BB0887AD84C2E2099F73A2E468110AAB2BC83671602420FD0665DDC72FE8
375C91FBD9035841767258BC7385E4084932266C621A42B8A3139CE953DFA968
751076FDCAA3AFFCC71DC7D819C3A202A4E77553F9C1A1E88D7CB8E40CD6C4FA
69CF3A22D252AEBA66664D8243C852C84769D1E4176F64EF3C2D266ED2B909E0
D1CE8031E1273A9000C8139BAF088951C2DCEF71207362FAFDBE73F8F6F99550
EAB6973C075EA14B305AAD86838F1CF017F9E87057F94EC125B3ECF744CD5792
291BB7FDB904D149467FBA73927F2CC982DF1C269DCF2346C02C33635ADD8E05
F70604A8612824099CB3A8BC081F33CB005350D208EBC4F8E80A54D110C33382
DC13235551CF1F50DC361C2E70132FC29AD6067C60D1CC7AB83FEC19C5ABD83B
ED1F6DCC6B93D8F7EE51A9C5DE68C1187E0087584DA4B3E460C495751816D944
88534EED21843FE41405C42C30D07D729FD472241852ADEFDF3176894372B84D
03D1B17BEC6B9C98D4CA52DEB18C093EDBF1E43A44DEF95381CF2347FF33C4A4
0439CBAD94858AE0C6D3DEC58319987C4D8948335B630A8C2E7CE1413F99C1EC
1E0CD4D4D8A18B49B7048C06456BE79073B38E8EC302C9A3E0E5F3292C976836
C6017B46AF959F77888B74F9FC08D98CAFC92EA0B6BBE53ADC954B9B32F1F852
DB888567C1C1717D06FAE23DC20555C129B4924BFCE14913B22B6848FEFA6107
790BE7B3C7F55451676EF647EC262E4C15BA42E855E249A638240239D55726B6
BA413F846A887BD133E37CC9BD591FF8ED0655E753AE55712F2E5C55F4100385
2B5883FD2CC9F33C5535522E2BE0AA2CB6451AE5AEA575249E6D4963C88AEE9F
E7537C3F8E2D32BDE94E7B47ECE15B865346D956FA91D2C2028FDD2C0BB09735
A0A8003D3C3D8DFD37D8FC6B3FFE84EB2F9A0D0344E6E5627D613BA2540DA3F0
64922470DD9BE07311783290A0EA08384809CF652F1E602E7F2F5933FD06CD0D
1A78AA64AA9F0BA11FFB42D173043053598F3690B13F76C5737253FB5D2AE802
38045C9284AF035C5C9DB485B0EE7DDCBD013DF7135B2E98644F993998F6C5EC
D1AD840B521DA3259676334E609FCB048910F3D70211659CDBCE05F0733AF962
65CC9C001359DF6DF52D943BC285B007D1135D8732354D59E915398CF620966A
E7CDA967A7611E49A6D4B8224C70EAE8E808F089357E3671F2D1F18F6CC6F463
0E1809D3042B7CC8E67CD47713C9A925DD73C4C95CF2906028E08CB5287A726D
9734CC34EF0D0885ABA3C73F1D78F811430E0A4B5911E3800333FCC219DFFAD9
A7F756EB629D05BBEA26008EF805F7F1CB2130680354524F74226670A1FD29CD
BE15D728D7D835AD3B998FFCF4AD1325A524D676161BE42DA6699C5C0B88F3BE
8B398445FE9D5637A828209E9660AB74E830939CEF9EFB35880DA8FE850E9A17
5C83CF703AE440955E69DB70483A4203F9797F25663FCAA783FC4360E8E49BB8
0F8F138B43CFEB4C301E5596CCFA7519DBB19F4593906E5B9711CF60A04277EE
7E0EB69D76392B84CF4113223A6709CF1783C386AC2358F315677479DB92989D
F9FF5D6A997B23CF1B52822FCEA099C47966D70C09BE127C7DC26427B6660464
D5830030D103F984035A523CA99481FE7A0CADC3AECD739C9C425D09CB50B4B4
BE2819EF816FD8D85DBA9094E105CA0C6CF6C122C2ECBB711ACA5C2D1B67CD3C
F5EF4349B3DDDE8CBDA5AFDB24648062C1F3C410189522F61655505F37D6A182
ACDF7D3B149C98B5ABA942FE0F7E1CC26DF0F139B04229B10355842E811EC2ED
337020C0455852748C0477712A9A9258B7F172C5C6E2C88FA9336082C86E8431
0DF2E15C2A8EF19F7E23FF7B7A9FDB181D64BF5A3390EF29EA6A156CB2134AFF
9DF396E5EFC66EE2362A836FE257B06BD8EC6B1611A1720790B0B6722BE633CC
1D753D694C8F8DC44FBA568718A8ADE9EB26B0402C5F61327EFA5AA4E83950F1
79CBD4DA333EC3590B03917367C9806FE3800B715372499F6B85E0FCA48B718D
D31B2571A78D4463B995CF6379645825941C8B7E1B1401AEBC356EE505946361
3DD36491F24D7C3D634B25C2CFB93493174088A505C703C2029593EA286E5C67
C0B1A29E4B3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B862D91D8C1FFC172A
D2E5ED14C9849A1475958C8045F32105E1D523D2D201ABC2BC9C88D9709ABD02
ECED38F4E38B52E7DFC146AFB27C32BD7A3AE60ACBA39AB615F9539E8AA538E5
13B26906E9E6BC229D511F324E32956174BF714947AA98663DA46206E7A75B1E
7AC0247834B4577FE6188EFEAE13FA319E5F388B89BF950C292C152AECC74EBF
0944CFC4A423BCE1E467226AE0B39365CF469AD06DDFDDD2465FC53E50F199A7
BCF35432E5C7B43EBD3B45AB3C98B383BB0FFC9D031B2301B8768606AE965DAE
012540D95FC746D88113D43E7261CF3606655C3BA52E91073F2FAFF465FC60BB
1BD7ED57B1231BF01872939DB15AEB334E62A6AAA8137C4242D6AAA394709221
D78BA6858FBE3C3CE57006D906027063D9CDAE093B74A454F11AF9AB265445B1
B28D9238906574355655EB64342E5FB6E18F2149FCF4C0F743A8B850B0850541
44022BE6620E3BE3BCFF07C029D465A5796CEF3046476E8D55E54E29F36681AC
18245D025ABC044E2F8BD7C65B696A7CFBC5F9D0BE4278F30F09707B9D532178
7D651D62390897539CF808A2D798EE0972FFC7B2C1C6313CF0CD29AC91D2D374
734280ADB1EC4B2DAE7D57BF96A9157BED25298081601534640AFD502DF754B1
0EC3855E96425AA5F10CA1EF4608FE644DA9ECBF9B7D492BC58C366F903F717C
1A9A37719070DB1E3408E8B8642752A12BB4D83D94D9CCB6C0ED8346967ED514
7C17EBD808E6EC50B444E7BE8F0E118DB891CCC2597A089B95855E08AAA8F016
D50CE835A135D14624FADD009ABFCC96B5155C75985643E717CE4467FE48E823
D91A34E93F13F3C9415E838D72FD3DB3A5B7E839907C48BB13E5227FDA302AC2
C6E6E9E4FD1EDBC9FE5C82BAFA33F4736B84A816E27DD6FAD0B318505330DCE0
C6B2F44FF369069917F3BB200B8F1EECD7EE15DB191EFFC574588DEC1E180341
DC959F8EF56ED5B19DE67E1963F7D0CE0CAD7375E1BE0F4EB9EEA03305A104E4
C02C0EECAFBA6BDEA59E3D56FD58CBC86A5ECF1706A7B1017758A172F80111BD
AD6ADEB42D646CFEDAA09CC251C84A48B5AB27BBC9E57D0C75301CDA60558F65
241DEE49409C10DB07153312FC60E9217A8B47246B7C4D03A5B1814448ACFB10
D384CC0E5A4FEC9D4EB8F6E12E6FD55E57D240B5427D7C3627F5D26A5C91ED66
83A872B5EFF3BECE695865AE8916ECC5069E6479F40D91C16991679F03C6FE28
7CC70F6FEC68258DDD13ECF433D4C9901B0AAF56D83F3395AF5532A0D62B1524
6EA5F6A79C01F6DC456733B7CA2FAB28360724E0928C85C21A9F5D5DF56FD1DB
3717525B37D33DC7D4DCE62BC5140AB590C156D4E9AAD3639AF8069CEF3AC8A3
E2F65B2F01AEF2D2312C232CCA14331792901E33FA374D2AE78B868B197242F3
9D04CED4E2B235CBA28CA560DBD3CD5E98B2DFFD072FCCD52B3DE5380630A194
F8DD60AD0138F1A3425B0DDCC8E14A1E65E65A8ED13E0A65E4E64ADA9DB1DDD5
3378C63396FF5DB218AE2CA8EE74F547200678D6AA962149090CC3D3B7A1ECFC
649A614211EBEBA3D0A82B2004FFE083E1862097BC700681207E93E45BC33ED9
222E7176C7BD0404838FB662DC9046D0EE940A129CB619B504CE53A05ADE88FB
F2D6B94F12E4EA3A9BDB285BED83239DDB5117D4303EBE3272D35C4D32534685
FAFB8E2FA7F3F276605E119D5DEED4875CAA0D85A9CBD90DD7BE04C40D5BDFEA
36924D015ADC134E03735263CA0862E5C0AD5C49ED45CA1FC919DB6157A5E63C
4D68370AA66718FD480DE511FD6F899938CEE7A965807EA75DE120EE0E8B2D21
D687B8FD41367123CFEE10E02CC61C6E632B03488095716F72FD4F80E77DFD7E
01E9FB8CB1F2B597102644A96B2BAFC3B0048647DD26E13D6CDDB49C4A6C11E9
3E93B5567FFD39CA40BE4EBE0174BA827E7DBA957D3807B9D6F6BBACFCC96665
2D4994385B0DB511DF9CDE0E2D299E7DFBC1B3A63092BF9504C30EB78964AF7A
26F36268591BD979D642FD47D7677CAD5B82B4548BCFE80A3205BE4E30E12AEC
D48688868CA0DFC6B4FE349CE217D216E97039C5B076F16A3A6411A3D4BF6AB7
845058A40F00F1DBAC1F9BD167FCB36205F5C3579801427AEF4CC461D8BC48CC
05727B71589342370F8A366E11B36101976806C49C1636A77020753AE9AA57C1
CCA7866F673682B57A334A41156A070819E98D7384DCF20A3083911D44F26A83
0558CD47D3C668D629FD1923CC317961C985489CEA08972754E1D090E3889B56
BFA096258B2278E30DF934EAE9355F75676B21D53206AB65DD1F7D42366ED1C4
833DB43341AA37BFE2058C59E1203EBA3B15A7105A7307C5152259D7DFADBB7F
F137D0216D9FCF7232A908F824F1EC01871801D55698E3D6EC665717392C7A21
1E6B4D0AB9E6CE25CEE743A953C14548B0937A1115DC122315E3EADEFABD0DB4
DB4CBDD9A156E470C2D464935230E7052751A5B22688404A556D79168BC5ED70
049138602A617DCA465348964DD701252737D9E99B411F48736BB0C487962473
0574A336162024F2008D619DB75BBA85281C413245BACFE717DB5AFA78F7FBBF
D71535FEB7049F203B46F9E3013698F61F1E92D27AEE0923C67DEE00878E5D44
9CB25E3F7E7B37885856BBA23EFEA2AB1902F879F1361AF8C72A2CEFAEEBE5F1
4FF089AC9771948B6A6CA310BEC3768722EFABB5A7A66796AC5B925B8021ED15
5E58FA10191ACBA54DA33831938E9392DEF7594DE827864CD1D0B2F7E38D490F
E15EBC6A6956477E8B7DAAF1AE28A6B250172224B1A63A6CCFFC30819D7EB202
4DF4B5C25B167ADA7D2D12BC8A17FE3C89841584D5BF8D58CE5E34B90FE879D7
52928AEEA1E61BC9AE1093546EED14DFE8D5981F6DA11ED9CBB29E514659D45B
139AB83B87241B6FE049200A3D3B980A38968FF9B81515F5F33D6773AD98463D
7902D617BDC48F8E503BD8B3BE566CB6C15E728F7ED87EA4845582E579B03345
E1225720E59F7A5ADABABD4729E9E6473AE9140BEC586A6593D806F865C6CA99
4C0D13C80D54E803DA317CF0E9141759763968A30B47281CB1A63E674BCF858A
46BB2A8FE8D00E033CF404AC2E77E5E3B717CB5A5EF7BCBB401C5C183C7BE3DD
9117C6D60A211DA571C1C1BAB7E6679AA5D0433A84FED8CB67B030B8B165E060
B5F24573C99F99B4D7BD59E92911EC25431CFCECF8F22D4C5660580AD6FAA5A6
1D98A607C10DDF616FA010BE479E3AE835E87B9AB01BEEAF2E7438E6CF63BB83
067F8CBDC591A369F897DD1CFDF079DBC9D710B64CF04D7D038F7BF02038174A
3A2908129D592215A3128ABC3CF3A9129FDD04F9A09482ABEE624C540143A256
D44028A12064034A7290750EBC897F11987CE12AC266D4BF3E9BAB479A3F9DA7
6C318D6D0798203FED7C03D838B7726DC814F0D43DC49B40676D6859E3A12252
5214512F80E751FEF2DACB35DD9B875F3E5A4AE2D89D3C6A9F7A3F00E21C72DC
6C55F36DB35C15D5A480A1C9B103ABEF435A740B80BB8B3C209E6AD20421850B
7DE322EDA4CD9899B12E15AF0393DAB41C6C11C2B9D578DAF502D93D87EFA9F2
EE568DA914BAF3A43FBAB9DBBAF10B53AAAE64237F86C12F1D19D368C7CF287C
74517057E516ED18404438AE2C8EE1BEE3F6605B45B2B43CA85AC30EB82747C4
7F18DC85942D3CB1E4A9D9406BF4B92F0CE7C65074A99F9654B84841FBF7A943
94FD517973FB1408D3B619F729F7B7129A2F3086DD9F4FA1AFBE70BC3985227C
0E80B973173F1CF8291D43F7270575C6C0AE29A828C424B94677EA2E35AED029
A5EF3D3C9FCE20640100F05A5726E516E2BC07882391D097750AC8A9F8BF23F5
EB442BF47047FF186B26AE1DCC2AA5081B915F1CE5379E270AD661DCC7CF1FBC
DA4786F5B6A729F016D7F3FAD8EA305C71530FD9173A18E079156D95730D313F
7CD11CAD02ABB6357F0AEB3073FCA9B33AEC147B381E8C0CE749F731509FB6B9
08695967DE2A007A5F489DB61F69E0DEAB2AFA3ABE1482A0E8E52E58E3A0A038
FA256E6A7ADBD6EA7163DD1362A8CE7A17C1064CB861BEF5FF04852B9606E8E0
74B6742A1847C136340CD545E4098DD4C19085122B8D39BD7F62CFF8703071D2
04F98F173876887915A5D26105B85F6BB781408C91BCDB000D98D7433BE8B350
68104B041AD7722616B477CCFE4F4913DCBAD0B94BB1E9E4397ED46382B7F8A6
2CF533D42A06B1A04177FB9384FCC804315C355A4BB092D34EBD7833DB8B90F2
ED9FFD88F15A1BAE76C6EEFC79C130434DB1C480D6A406BA3A705E8B1275BA8E
9E8205C6155EACA9CF50278F65B8D22AB04A724D90AAF79371758802BDED6AA2
96CF7BB6E28C975AF8F6B730EFCEA25876C0E2D9454158B385AEDF0D401CBAB1
2AD29A7426DD0A68439C2A2F5E9385BA8C8B32A178FDC8E849A8639D82520AC5
332EF9745D634923AA4C05363910147BEE09F51521C8585483595FDBB0FA09F3
A58E0590CF22DA6BD562E8E82918F2F5D7BEBEA6BEA39EE85B93EF2E469B4B19
F3D15F6C729559F81975048AAE2E88454E3AC6516F43E6C280F8D751F959C9EA
546F4F0680BFC2A326092B12CD8F00B8CF4ACD3DB08737C5B5DD9AE5B2B077C4
24DF8DF3E02615DECC4D9904C52A699E29CEE232D486834A752E5C0D5425C8F9
D77513FD9858C8219FE2B7570847F75A947F06A6F7E7F29C2C9D31F2ABD5281F
B1C93E41DB7BFD00B4A149CDD73788892B7AFE5AF0C0DC4A88A3FF74CA20004E
C02D5CD155CA566C948A286C4E76A6B2EAEDFE2FDB17FF267D0F21C3585352DD
54C1DFC3E44012F8821FCF8039040F4DD94814697F063B7A789EB1E6F3A07B77
7B22BE5EA7B6D8F1677A418D98DBA4D248DDF9AA7BC2E51ADBE8D42764C75BB7
7331014AB1AA8D98D60F6425AFF0DE5B6428940FB6C68D5378FA26179EA32176
F2464A2652C19C8D31C9300F110FDB681FF0181501606A23750D6CCF87F65670
B69059DA5883534D7B8680D0D3062AF0E81ABC55AD1244A2CB238281C41D9387
A29171C53E99A6C68B84EB90501A6C365297FD4421CDF6F1AB2E63235155A2E9
8E992517A9D0E7D976F4F96996456B524F7A3D96F9A563D3AFD04EFC3C1F7453
25FF863E1B1DC4F69029EA6A156CB164031D6692D29D19C4CAD31A9169AFE4B6
F1293846B2C3E2744E08F74DC71B56B74D876A48D5D3179BB9B285B9FA7A8877
90AD66094709274169E75C3923B20AA27C8BFF605A64384C2F529685F965F25D
9E0B3809BDA31D9C4585003A3C5705F7C6B2F2D6F91AC62749BD9C54F6FF31F4
2F3F6CBE5A045D10F02F7196B7193463719647BF250BE15AFC6D052F79B8FC23
A4E6FED2DFCBBDCF4B347BAE41210AA7A444428DD055DD35D91A1DD465380097
DBCCE823FEF6B7950098A3AFD46D2241832195CAC54A1A447663BF368B38D428
2C211B17399962E0B01C5EA17597CCCF8852F22D77E46192F7978878EF7D37A5
A22159615DD74CF3E5DAA82DA417E864D58667CF9C38FDDE0A150D6D6C486459
F92347E9BDA4BCFDFD8EF644842A9D7422C2C2489D209D78E0A2FD3FA71C28ED
FC157CCAFDDE787EF2B604061C0118BEA317D3620FD9DDBF7FD8113FDCBEBC83
3F6895C5DA9EC4C1BF2989452681462DA80521CD22155A37D36FDC28B005B16F
D00E14E75C1DD0BAA29C316E190F8E87680DE22DF8E4523812293A405AE427C9
D55F0A976C4814D37C93955EFF184CDF0D4ACE93E49FC468BE3EA8DCDBFF6695
CF8ECBC77853F5C4F02239AA26973696ECF0BE5CF8D3C1346E54223361FA9708
A3AE70FE3029A994A1F9E8FD54E8D96ED33816DF7E935CF4233C2614BB02993C
18F5228D98FED07FD9F40D12C0D6DDD6E89A3BA6468B6322EF1EDFA9BA17B1B5
6997FCDE6343BCF09C5B5F5940EF2F716CF4108AC3EE99ECBF8E6C60013B38F4
9C5F4D44346823D0A3AA4BDFCD19886D6B2B421F7C057DB10F0445DCD794B744
323CC083D9D5F0CC23C7493D971C8AD739BCE83F4F8CC671DD1560E71E1FC313
776DC3717FB397BEC2010F20FA526840EF5367946F3DF67C10B47377A99EBBCC
F492C81BEDEFC264408C6DB1AA29867BCF8BD9D7BA09149258A9ADE8D72A64F3
36F904F18B00488D7316A5E9B96E2A7E12F872FB2AC60CE1B7EAEF1DCD70EC04
AC18C07680C27310CD065D11C45046EC33B07469F871F295D0D7731E2A6B122C
6F57790C42B0368AD7A499EE5DA7B7D4B089AF21641BE38F379570A36BEC3324
EA98E83C43334BA6EB4E7CA147569CAB615C61E1FFA0ACDE9B6E1AD2BC07CAA9
595DAF1E8D29A7D573D96880ECE94CB8EF3E82878404BE7530ED3C037A517E7F
4D92C7AB7DB51C1D92AA8ABD1FDBE17E30BD3C035BAEBD18239DABE074E01C5C
F828ACB0730F46F17A34B04C110AA8EB4062B72CFF282A651B6282D3DBD1EA51
A98D632626758971FBB0B5E24F51F3B7FC5C87B2FA8CD5B651B729555240D9B4
C4E35656CC9F8DBC6622F6729EB829951D2911309E908BF3B1FA3743AB177448
9E6AC37064B5113F9592EDF517E8BE682D617EE310A79C945126847769D6DFEA
8E16FE17A0A07AD7169CF5C854AEAA3FC89F4F0322599A0FF17722847C88C9C0
A2FE4804ED676411B1B599BDFB1E949D32FA1F1D5B413360E704B03FC0CAFF1A
E5C9992F11B7020A2D36E903F851A54EFE91D6C9987BD3FA348478CA9A030ADD
671B749B3E72662E3939C506ED24861319551F503707DE018C4D20B99F6ECAF5
12EEAAC5980C42270042AFB4E19A95C72A64BF24AAF806CFF4DCE942A2D8F6F3
58A5E94CA654348ADD815687DDB99DDA88F1E2C5887707CD4E0C36F45CD6E6F5
099188C9604E2F35B3EF9BEE08C93C8B1D229F107D0A7754C4C27620D6CE5925
909FD73AD9E340174995D179680584434D8A5C8A4255456DEAD95631FCAABEAD
2039060F8B6BB4C28AB1B9A5AAFB7FB94F9FA8276706EC7C748A40418CD85FD3
23D46131B9284A0E3E45CD7CF6EA2746B4240DC02A3564071F527443F0CFDD1A
7D74A76DAE7C2F389F7870B9B4200D72175BCE6193B4E26D499FBE545C804154
DD343D0FCCA88D29906F56F71E9C4A05055899D6ABC54BB7B8EEF7DBE525F9B7
AD39145A2BFE6D055580AF134B7DDDBB9BAF947747240193D102D0E6B37E7BAC
1AB2770B68030BA4F0E131909B7426BA1AE7D18A9445698A365141BDF48E56E9
36BDE71DD7C45456CB361F3E4DFC92F8E22872CF885EE2E9A1FF5053D505D169
8DB2175A63130FCDF172B811315C4B9FE7C84BFA04443334F2AD889E4A3E230D
0A9A6F5D223F082A7EC77AB52B21BA9B8D4A0B9D7C5926D1B737695C89ADD1C8
1D68908B09459A5B921077AA21223EF0E2FCFB1E1F43E822EE2721E984E4FFF8
61E8489071831B21753E86F8A3C4326C4C0619C9862D301F4A05AA5A58A5711D
0C1D877583370318746A27283D70A4C54B3DDAE7F49CA94439534EE75D8B82DB
C7BE9BFE27105AF888F3D1F83F812FC70D2989F281143AA4BC8822F5A9107B5C
6B40C54DAC21C52A4D4991997862933CBC859A5C70BE2646205EC3BA815C375D
65DA5982B548FE67F2CD24FB4A657CCE94D311F51A49326E93EBE93FC663849E
70D11336046B5DD23AF13B20408F7DE2E0C6BB799011F9CDA4F4CCA46CBC2C0E
86E4DB8F5C31418FFC78FEB24D978E98C381556B32D9C378B348CE8743825823
F6AD2906CB4FA88AF922E0DCFDEF73874320ADD4AC1C17FB95FB67E4109D5E0A
6DCDDCB2E2124D53A2D5106DDC2E90243F7D9FD8D8EB4A878F25A58C920D0FFF
D6FB61D8C29707C49D2A572DEA8CE4BF3911AA57A9D9BEDD1C61AC978A200707
45A4FA25CD68418C5E78FD0770E03E6D228B838CFCA83A445FA0805AE960D06C
87661AE6FC6517E5C27340B373D417016817C6D279CC08B086858C768F1B91A8
F1296749A72F7BEA1FCBD8592BD2424926BA16423AB5921DE8EAC56ADB58FB18
C27A41CE503CA976FFB92592316FB23745EE6EE084196CDBAE8F16946D8A6560
939C130D20CBAD9EA901794AB36126A199A07BE52CF08668C26FD29AB6E84971
5BFCFAC2784D902D69431D12B8FC3708B3E83D87F3A394FC38E69967833C0A11
D402B666A82EFE254436F63898712D63BCE010820FDAD9ADA7496A1D611D5D42
8A63460826B6BEAA35BDCBFAB877853AC5A9598B71BD06AFA2D779C29225888F
5FD5CC13DD0B97251C58C2DF3AE4E1AE41F64D1B5101E64784079D7F7DE95179
875F217C0D6726098092EB246E31355CC21AA617C494D2B867BF1D13335BFA55
1C7AAF5B61F44AB6F5977D1D2471B5642E457D0BE406066F0377FF6C662EA070
1460B561C27A38B139D86836945424DF3C274CFA840BDE34CAC6B57A04D9EAE9
B90595D13547FB9EE90459E00A2F7DBF72B2191F8A281E6314A36C1D1DED8A77
93FD6BCE759F8302447FB269D6C55924D36515CE1437906A0FFAC7846E4F1AC6
540FBCB40BCF81C09D14DF8F5DA10E7729AEFF7D3CF49ADA55F1F20E75AC907E
211E3B6E052E1597B542399476EBCADDBF3B8471D1F73438758A19661381D5DC
E504B266FC2FF3C70691985CB1DF1C3829DB22E0317D73DB9E2CEEA0F1FAB03F
7F6B25CA5E7F2A6AE9C67EB7F32BA17242A4167169E7AE53A1067BAD45E3F424
9AACD8AE81CEC8190320B8DCAE9D85192393C682B739EB43CAD8C3FD4053B2D5
3E5F0CAFD14FA0E75A402A26F85854113E102AB81806F472A65E846B6302B1D5
8E2DABB37541DF88049C1F1B0F23EBA130BDDEF0D2002008116120BE3E47C31D
0B5A092F3EBADCE87FC499FF9DED0E6C8FD6715B5797EDAC50FD58E252D2AB54
29BF76E1A7D08ABCA4443ABFF10E74225400E4721133F3D8831697F7A4F802E7
6BE91554C39D2D854460A9934BCAC76B5E9D25F7C24968B44D1B4A75E18ED9CA
F70948A4492B9886712F81E03850B816EA0E687794E521E1447DF673F327C003
1F415662B8F9B1B09DCADFB67B23FD0CC520310B3EF0414CB723B3506BA05970
AACC410555B525925D9BEED7A3B4294B006D7937B39753E7688CE5356D6BD2F7
3A46212368CC9012404B46A10D44BF63153E8EDD8BD7A5C64D66319AE0C7A13E
EBFB278220918E8C476DFC80BE6DFE08ECE9E001601A9013E5FF22026C6F2643
128B9155F977871CC66741C7740590DD9E18801779FBC3307C0BB8A578451867
687C8CC6ED1F473C705AB25634F19770334684CD70084FD2A60EAB988A1C23C7
B8940F5D2568FCC3524F6F89EAB3115875B876CA70B1C7D8A94FF1FF6FEF4143
E5FABA6089B1757242BE47C2EF1682A05ACB1435C456501A6C6A6886CCB53BE4
27BDF9D42B997DDFB57EC2C439660811F64727073E848B2EC0BCAF7A59308F50
5DBAE59B4A724095E05E383CE7851BE71430B4723391FF781AEABFF8C7828851
9739BE3029B530AB99921E6EB29842A5B22462EC52715E496F7050A16A6C62D6
F124DE122BA6312BA80166D91855CC803FAAB932CABE462536722E95F8B6333D
857D0B6044853C5346456FD749529EC1FB00BCDCC15FB907C50FDBC4B919AF9D
CFE7C822301F9D4C78EF2A08B1190E191E921521A4BD6E4A678BD8857D176A47
53D27915C7EE363C4A24562849E8FA141C5A0DD359F5CA5EF8352A3B2C0C3249
870E1F82642B687E0179045CD911831536E2F66A2B9F9683381C56776D27F95A
A2BB05A1FFA362AD33E97A907B13ED4B7D58A450EB9F023AC8B7A9714834A884
A4957B1168D1E1F46742DC29BB4E5F23076ABD5A74826AC08513E274289FB76B
207496CFE8F79F3B51C476287897BA6BE3AE9206F15177732B1BE1B4DC396BE9
F0F8A3D99758B736011CA5A4367C5A82893A714E15A869A760D44D5B35583683
3BD1FA7CE36F4176BB68783B63BADDD3605467881F7CA534E44903832708B39E
90FD6AD32DFBD4E8C89A9FA5772BD7C4CF67C85B1B342DE6B5E3E38467519B96
E7A56FECEF89308690128293EEFA925E555E77E72F0216B34D71875B4AE752E9
465971C6B191B8D3ED752968F923AECB58B21CFD76093637EFBE8110087320F1
34579D9E18D1E0A108A3F71AA54C887BD6424A4B3C207F0ED2FD18B021DBB750
F2BEDCE5884443D5A081512395BBE9E6A0EECBC13652729D08BAAA7523628FE9
6F7F0362A7A748A63C6E86103801F883767E8A5D9EB331968579C3DEBB3E382B
C77093BEB24AFBA76B5227B40091656B67E3FECFBF56C20DC805EB5A096396CA
62ADD6CF71B58F3F96A0EF46C1F40C916B01C3A6062F7A3BC54250B62CEF85C0
3F169A8A028A655C5D91AC7F8E69FFE57EC149A6A210BFDE7E7E7AE4A6886CC4
3455C6C44E9FB7F55FD5649526F932CF6F76E1FCD278C1CBB2D87BFD031AFF76
12DD60816C4BBD69AD60434EF2824246CD4B7C7592758D2EB863245EEB2E2C04
9A42A9F1E6A3512C0854EAB18A0ECB0B865BBFF7B9C94BF929F948962B0B0531
66481A602CFA294CD5BF38ECCF14EE2FF0443BF77799E457D5902471349D7A48
82E19392B15602C09DB839E1DEFF4DB50714EF1CDB10A9A02F36C06FA7B26238
CF55340B24BBB424F4EABF0191A11501ED68DC615750C28D1FCF8B365CF72B86
24A732F12A2661AB1FC21CBE13E07D84E81C83C06CD17C7B37885856BBA23EFE
A2AB1902F879F1361AF8C170DB9894C7BFBB36E142D94194E5FC2564ACD7935C
768565DEB42D646CFEDAA09CC251C84A48B5AB27BBC9E074D7496B27DDAEBF19
F411F46AF98FF43B1D23ED27C8501BF5DD26AA443B6B73E80D855F5EBFF6A5BC
EC4848CD574DA6120EEB299C2761995007D2B275FBE9E9942B7E62CD2C4EB718
886E4FF6A9F8F6EFAF9552AD1D7CE6CC9B8F912458C1965BF8BED4AA857E62B7
BD008DCC0C22E9C6BB5C98826F55898CADE887047A1128E0AB55B1AB1BE8A2CD
D3F5477B7C100C82E82FAEC0BBEA7AEF0B72EE116F0528155EEE6FCF95F2397B
85785536B1A16E53FA19DF3AC4D60CD81C1B42C6D856A5430104B56123954616
52E3B2D6B3BCCE3F5D699B3E248E157DB45EF620469675DDAD8976DE4CF47B93
FC6CD3E0E5D3E891BBC7CF70C073337E28400D716A714D867657592F512686F0
2CCC66343D83CA952DF1C68576FB4153F041E6D6D1EE9CE21AF6B0637AB23DD7
43CA1740708A7DC35EA952A2CE751BF57B670F26C27616669DD6BFEBCC5105B2
8471B69EED368CFA2F0B81EEEE6E1DE6F97CAB2B83EF282429D430CE35AA150D
692C3EA405779CD9166E7A8B26B0F41D7874110FB0AF4CCCA650EA7674F1AF24
99D32DA8283D0A6916DF317E50DEC9976448C14FDCDAA0598AA85D1A40DF5386
E11E1547205847E954B0FDE76B58AF101A0AD64320E0217F90916924BEAA08BD
907142687362FC574EB79B143A4BC2515A46A3FCFA47F2898CF7F02CB77DE7D4
173F08F020FE6DBE4B43B70434E1EDFAABFE069E371FDBB88E24E61EF1A4425F
9F91DC626F7A1363DB3004BFD229E6A1E22554AF326DDEDE1E91CAE0922A3C73
3FB9D45F81757CFC8ED6BAB56309D00739F5638F9917A41081B83612B3EB27C2
D8530A8E900F2391FA6B63F2E6A01890368EA8F0D42E7A93B6E8F8F132BC7089
4EDD4B14385F5BF95ECC01C22DF26CBEA137082F566E73C4C3C500CD798E325C
588B5B71A8509A644F6E400363FB537DB0DA670E7BD287A94CF9CAE13825D095
012913031421A3D10E9CBD5D4E8869D9B9A611C44157BE5CF6E820011B63C4D1
C12A72CEB48AE7E5BEF53DE5C0151E354118C14F4D152725A5ACCD0180ECEDBD
EC8554E1B61C81BE88E2E32828FC6527AB2B110C92546A121CC80F1E1B7F5A04
88144889677B31D3CAA82F6F8F60ED7103702AEF7497CDC0398A8657A287FBFC
245B9C7F621A65AA6064C8DDA0974B95488E15A6DEDE60059F4E919D738A90B2
C15FC79F2B6BD7518D743B38200C0C2A31A235CFC619E674FC4A46FBB1FF01C8
14878F0C177F552BDC9BB306BD7B5BECED688C38D5AB822DB77434BDC79A29F5
7C5D86935FD90668FF86A9BE37F550F087451064170705FE5203468042550ED9
739076EB30477D455C7DF2258A45604163C2AC415BCB83023D233714C8195F99
F5CC3F99590F6F6F786A20316B992F547DE9372FEEA0BE4056D42AA456CEDC82
C054F197229990E895ABB45C025945C223A5E4052ED21E50BBC80F93F95F2F4A
FE08768C416A9E56A5FC44C25C0CE7E12929DAC08D3A78235AD9ADFC6421C4B1
ADE33FD14670C66F070D8CF7E7607B46F0711ABB8C5AFA6648411B5DEB230DEE
F8E09DBE901FF626A81F3C41698192EDAEA808C1FCEEB0A101C52F7A0A88F247
462A68A28CAFC810C1F1A3A51DAE21CA6F5EB7000DE873FFCFEEE3F93284581C
D708A692D0F738EBC70B4AB97E5BA59D46A448D60C4417D996A499D1C5BB0A5A
4473D95745C61429907F1246475B1ABE516106FEA1C4CA5333D961386F3C0BEB
0B0E360A3343249D4A6D09AEB3EF59E37C2175060C6357A22ED1A48386D9A9DA
0EA2AFFD1E4BCD68D656301406C1FD474D98B7555DABFC47490250B12E202392
52CADD4C97377315695C92C8F71AE89F61EF0A9659847F8BDCD4238F576E09B5
91DD09B88D1C88BFFA914D4F014978CD1B82677EDFE86FE9624E6397307E6B8D
0FDA58FED35CC96CFB69C19BA993455C845730D1EE3D88940F645CC893A8ABF5
E1A2260C9BEA7A7F8B9FCCCCDB9F327097EFE73DBA9E508070C5EC3D756C4A30
853D90BE54207C2842045E4CB16FC9F2FFA617AE89B9E4CD3F19CD16D80B1C32
767A33513C42F4ADDEC6A93A6C0E4A2AE7B930B69005A3A2C1225FF0F42D2429
C891F2FC0CDFB18D8A4D2260DC93D7AC1107B7472167A235E58A9B2C1CD3BAFB
126607848A6F7FF06D69C59D16F6190D375757D95AE364B92420F553410E5B66
DF5E29AC8EAA65BEC5E25080380B7551728AA35DA29CC50BA7BFCAB805154041
FEA7BBC4F77008701A2D3C738F0219A0A76BFF022780D482B0BDB109DA6FDDFB
DB9A146DE97C26F33A66C093A33403DDFBBA827C81DDB59624D7F9D892B79C42
807265AEFE84652FFEE8D27AEF3EC93305BDB636EC4EAD123B397FC3686841B7
7AE884C8D7FF5BD98EB6F8BBE67A1EF3CF5FAF4A67534E5D6E49A2775DFFD671
1A66303FE41B6FE09B6A5BF6B667F72183063B1A0CF45A072E32BEA1F6346030
C22027A410EC0DE22959720D884A19DDD0E7B4115A23D3C7A9DAC7B1230AB242
16AF756545772C9C36BE79DDB6286D697D486B0C9E81D2E91493F39C155EB795
650831A797C76B495D04716685DB9F730012583B2022EBEF123B1663A8B3F35B
54E84B9054F8F4F6E98284EB9C2681AE3BCD14E0512886CD0C6D7D75FC94406A
1DDE9C63EB85387E53AC8FB6D2D334F8ABCE968B05269A8A6A6B01FCBE628453
0BD7ACF4950350889045B302FCD0B5AD5A2CCC539AACAEDDAA6E529EB9831EBA
F6B6ADE3EFCF095AA187E8A88E1199EBF3185C146C3B2548A39C9115564BADE6
0BBCDB304E69A53A68EEBF033BA0B6542C2D555B5BFB0A9C9D870B3D28986BDF
D423CCBC14261CD351551042A494317E905A540839580014ED82144FEFE7192F
D6516E87C9A5F6429BC4D030CA46E4431347926909953585510AD62588151C14
4E2FB7A4FA3139BE5BB4B74EC4F5E87574B2E520C7F2DEC76DB9BB9ABA2AFFA5
A219EC4673249FC6D7B35926DC6293FA95D8742E5D43227EA476BE18C5B94D81
1E30FBAB8D69D7A50A12242465BE17546553F1FA935983C8468D33D528D9B213
F4A4E1F2BCC0FFE1244181280A0242E823E2570AA607BE32328C1ADCD790D625
48DC71B17E2EC989469450D9F809D758D69315158B3451E2672B51D52D0239EF
1051D4412245A2E864BA820917427E5A3A7F691FF63EA4E7F50F7DDBFAD19B5D
38BC46FBFEE2C6065C99647E26AA5F537063D42A6595212B406A4EEBD46DB3DD
D22A84374263356CDE5C977D023C4A223E3D08BD1354B3CC972A8AE0B3100C2D
6B000122C302A96419E1E55C6E2D5C51412FF5062EC2DCD9484B2BCF315F2E98
A41360E6C7C5E9E0768D8FF3546701B37D1249731378F929C7A67923E9EF3308
416A7129D479335927B3A7FB9962C9B37D2B233E6CE581ADC438D3FC5591184F
A30B281B8AFCD54FEA6E5503201E689A3A930808B46FEE912D03C1A547EE77EF
28A0ED6ACCB8B6A2421C0021604654A2D840D4AF4B76E3CE42CF2C40456D4887
8C808A69245134B197595686421590C7395B65570195623B7A2FC4BD8668AE24
0F07E35FFD375153EB2764203FB791A15E7821F577412CC979A0A07E2DA3AABA
E939B3B4104A9D48B0C67227DE57824A2EC2BC8CFC03C58B2EE222D5C38FBC8E
6A3840E410BDB649CA0E24279F095AB2975A5DF0D99711784F90B6F9F596730F
28FE49829809557E9223BA967A6EC2FF53F98821703295813331DA7761B1A0D1
21F552B869142FE488F9EA5CFF30111D6400AC3CDD3E1F019DD1786A9141C067
72C69C0315F955FA70B95DF360636A4AABD6C1BFA2B617EECEDB4B9AF90E8852
CADDBCFEC8A912F5BC98B644896308DD9ED58662DAC4B82A13ECC48242E99D93
F419F74173C6C14F62A5FE3CE57DDF5C0FECD870982859EA24723288EA2D1389
561FE08A715F3B0F7FB670E1935EA3D379C746859A693B1B08362E410C543BE4
22A34A22A4DF3E95B793486B21764C44E541E4E108DFE5E5215B45F8EF1C4803
1C0FEF0165270333BE3F23848671E96D0E1BA25785537A6E34BF3FC3FBF266BA
473396964AEB514E56AEC4E7432A6EBE5641827FD652B1CA3E5D238583E3AC9C
17150B96FAF50042F3A790368660E4C2BC3A181BA16A0CFFE85D1EB41DB752A2
5EAB1EF06B03EE0CC5C9FEA072BA11E928191F3D250DB6F5EFAE7D74D13600A9
8274FE371ED5521EB24C12D420F24D784E8681A38C8644873B72F21227EE83BF
CA9CD319DEB2157FFC1A24D7E45345F6936176318F90CF4F43A855888B17C58D
B0AE8D8FD27767696A71E401C3D7EFA3F6906D90EF520520F5289EFF0E144901
910233C8C2E7FCF28780DB3F8A5BD4697608675E75E62144E1353D6F2D829868
3312AC60804B7CF0CCB209B76ED0EB32E9EBEB862AB7E44C2A03AF4AA2CC67AD
2B8549E46E7CAAA03D4B303DCD98440AC4718A5A54FC59AAAB8BB0CF46D161F6
A295064DFB1B22A724C22FAD883C010BC8A3FA08433FA9671B4D02FF09430E1F
E8AF2F8BAED39FFA15066BD90B22ED4E4E10824A8EB84608A5E95A2593A77AC3
B48D4640A8C4C763218915AA9952E0ECB9642368AE093CF80B6A65A4E45306E0
646863CAEFE1DD07EFAFB9C0229B5445F09BEA09B37359A4EF5EA889861CD9A7
048BE25A767F12723CDD4D011A3C3271F01ADF7A4FE2502546E3207462C08710
46FC485BA73515BBF74A596E887562E579864EC1A98FAA8C023A0A9B3E56699A
6AC8660F8B49C752E2C032A445BE67ACF0CBE02822DEC2D2F4DECAF75DD32933
D7D73AEE28858639F31F85E79005BBDBC2CBE8970FE7BFC106B78E7A3589D32D
D5E8454DDB9BD2C261A160E6B246FC9760C80FE309C8D933CDDB280F055D7C3D
EF1F3A5ECBA4C7B10FB456D436E28598BA9F8217B7CD720E7FED64D220A1A6BE
7B9BB209DB91A2AFBE6B5196FB217E9FF6DD8923E660D56ED51D2B75440DFFBD
E03065B827A1FDC2F5F55DD3F5FF45769C8477623F785740453B5B58961C7716
671EA297EC8A37666D1659DDE8EE66FC30D70E339334EAF80837AA8CE9027231
4C412C5DB4A6BB35BC938B24815C2EB81B67AEE57332E5E230434D4115962434
C3792610A44878A901C8274C24B6B3A684DDB55A94C6BE29E490A131E288905B
63CF391ADA2DF440658BC5CBC9F250F58B0178BC3A04FC2C18718DF8760A550E
644F8FFFDA20610A00C2D7547E42D3C42AF77660890D0ACB90FE68FE0D20A7C4
908B596EC023B6FD1963D5FCBB542A908EDF50C175C12A0674B1E17A86353352
B6EA1D892FA0F80A3DDD63EDBC0FB9D738C5E7A40D5167191C32CBF52A447980
2D7DD8DF876FEF93BA78AA3F27C0CB4CBE8BAB743119B45E1DDFA99CA6297D10
6B7CE738518C29914C5BBD687DB29985A7BA9571C0C192E1B320DB0FBFD83980
666F77BCE8BCBE2D8EA485D5BCEF24DBBFD388ACD6BB903CFE41A030BAED3FD7
3752C693BB69DD30985271E039D376804F8D506A27BEB279DDA803EBD58EA710
6C5B14652A8C46CB60D2763C3621ABDD2F11DE8B94CCD19EE7F37C2A9DD1933C
8BB20F0C96F69C8A2E9693B9FA21D4123B2AAB688DDFB11507C0C36E9956D708
A2EDC488FD8184B31973F494965A484A7442EDF59397C93F480E28930B34012F
A3F4EE995517F1F22B2996CF70214056C88817D216B6DB3697247466883A9C27
CC1079AFF08657A926F5506C19AD3E8183EDE1343A6B1FCF89B8B76CCF922AA3
906D0541ECD617B8B8837BE4E26017804965CBA5ACCD58E4C1858E9DCDC231AF
53A38BDD33CB568EC4546F864B98B8FB2B09B7F21E2C7B77E95974D3B38271D0
3662ED4896BCD17274ECBF1D4D1DCA305FD1D602269C73C8B107D49B98E5E0C4
E2F063239C92F9B480B4B44A27E72826780E48006E539F60E1C12F9403B02F84
0FB06091482252146B3AEF50937376FB518DBD24F1E4DEA980A24D305DB4FEDD
EB093758A3A88B62EBCCCE44E988BC1BBFA74353C4694C66FE8B9160DBB0291D
C1C4A00C849AFB9B6D6D16246495DEE490D3AE594E30F9EC05A18B89FF6B7649
B5F125BF1A4F91CBD4E69463BB993E8D7D7F25EC0DDF6B8AF6C65304A1F200A5
F7EBD0A7DEDA931A3F3AB2A52ADDF6EEDD861918257BBD3CBD188F380EAF0649
5BCC649D9CAD97089471E9DC7DBEF3BFDDD6703190C21BAD8C229102E25BBB01
634EF1FD216C22AE0263F2B19DD0FB3458DE7DBCBD7D003EB4C2325440A358D4
A99EF09736681A2F80DC6A70C35D510F5F99BC002FE53790996AAE34E275029E
8817E8404FDE7B738884FBA829D551E149D391785CA87F5A622A2EB72BDDFA05
DE3DA65D661A219641C47886C3A2E874EC382FB5AD7724508E8504CDEBCC0DCA
ED681253EC83387C28E237B1233E41887587A6D2C41F8BED9BC0FCD351B5EA46
97A64E555E5868721E93F85182157C7116A42975F9EE1C1057846B76616532B7
9C929723445D51E55F2D45083EE1837B9DA3660AACD877317E472B2E473D2D37
3F17399B432CE57000128BD578467841E3E86A4F9520F21A0962D3A8DA9AB280
E8432DFE9633EB418CDD6CF3EC92CF2D6B0CB691186C279BCFEB57B81823E04B
E24E0A032DB81C5A730A70DEAF9D6A80EA0E6F4883E39FF433F53313FEE459C6
61BC11D959929AA73D4F72AE1C9F11629C25528263536C67F00F622D32DD9A06
56EE7273EC391D3B55C35E14B984A78CD1C3D6EF460281C530F4A61CB06ED93D
6F54891B2C02490D0C06B8CDF38105C15DE2FD056974FD530C5B437E27E5E435
083606FC3B43F0240E061C75BE26937D6218C0064DB768E00FEF4EA544036379
7FAC049306C1EF64287F63007EC08C352B2A3B9EB7DCAF0A7884752AD2B03E54
E14F2DABA435A9F413404F1BD2313C0CA88226314F51137A1F55BF926F5F1EB6
8A9C8A3103CA7581FEBD9AB152C0D52CA54E924FF39541696028D2AC289F6AD0
FB3B3F0D9DE2A68072FF63A85C15B3DC455470BF4940D2C9A5376B8C8F700432
26D0CB8428195FB50BC27AF8E7C6B5123ACE06AAF333F91C2D2990965C37D745
A6F17940B7B3C5822CC458E7B4F811A25540CE63F5FF7E16F16E0207298F24CB
D79CB942398C1EF8FB5471456706E3760A8845B71488D328E918FCEA96A48CD4
7F00E96F9FDDA455E366617A0782BCF81603969F8D10469A0A177C4557984EBB
5645D175505AFB1AC5CE8B3101389096EAA8501E1BE9E7FDBFE860AF598EDADB
5951F05A4098F326DC148577FC47E33A21A8D2E8F7DC3C9475EAF734AF068DE3
26DE60158CA0A9B9FDC92561353A6F1C0FF4D747785EE12E315AB8F9CA22F940
2C2B2F1D81BFF059381B7958DB6D0F792991A43B4DA0E3A41F4ED1E53877C455
3F2EAF8588C03C3BF7EF284F7C08FB19C6C6BE9D291639D8A642694E64F9517D
708F42C2A2C31F2EE89817433A4A9F9F19726277ED18E1447430558B48A38BEC
2FB13FB2FE1EFFCB4D2EA2823189A595F90CBF11621A21ADFB03A49C6EA829E6
601D0191FD0631676C47A7F07E46F77D768E148567DF6F5D3DFB68C759635120
4AAA10123372119E6D7345B1DE593784D56003095CB6A06E3406965FE320FD5E
BEEF83D696BDCBF779A3742E7F4A889EBC2C4A8528361F4E61E23CB3320C2A0E
D569B209DB67A25DD58D4696B4BE5DBF4935B58291D9EB95BD504EF0346A2034
1B58B16E4323DE7F9CDC80D73202EFD2D21DFF9CC23C7C7ED1B36DDDD8A366B9
10A68E668B7CDF1288D91DF064AC14029D6004487008618C6D25AB62B36FE307
A032465003A5310E84D57D7A070680EA7939D54ED23727DB936817E0FC1FE00C
3EBA432DC2CB984D37435F6DD2F97963E6C1C8F692A244633E46104839B6221D
6C39CEB8B7ED3411D8C3C8DD07E1AEB7D771864A1813BC1C8E0DBB8ABA0C945D
43D9C09B736D034B3F80AD2AD5D472E0B0BFA246B7B5B2BAB43BF1E5473B3CEB
4BBA141F7E18346B18BF039ADD8660D4AE9943CD0B5D21A22D937E2606A9E711
54AB4FFB7B9F03E4D7641BE41BE23A8511F82638825ACC58673526C63FE13D4C
0CB2947D1B7A89E8BBB20ECA4FBF7EF7CD2FFE2C42B6BF3B0A5B2040395C09E6
8144F674C0FA3DEA508DB893617833CB22B7975D523B7CFDAC57C03F5C5296CE
274C11555E0711D275DB8DDAE50695FD089F6A89149BC0AB88D400A552CC09AE
6042E58DAF96ECDB80756FC73220A36FA8F8F6319F31ACD035E1B6728821A9FD
8BCD0CFF5C14B054226F7F5F7FA6FBAD1E171AE3D824CE18F2D939270CF966BA
11B419E6E823CEB10A28088EFAF095D102CA24E109EE5B9F28761B7690871CD3
F959FA6D5873482ECEFD62756B04FF6D22CC099D0B8215F115FD5B8138F56CDF
822B55E93711AB72B76C72F09898DBC84155353C360C86120BE8A6A2B0C9D655
0784FC4877234D7EE7AF00BC8DA24B5DBA872B606D8DEC5A970A75DEFC41AB66
411C98531B2C4B16F7DDB75F90D40CC2FCA1103F1367AF812438CF1CB52AF25F
1AB5BFF560396AF8E2F939E45E14997BFB80C7C76C8DF51E399E73C832B87A61
614EF4CC2D2CB5D75236BC561593DDB96AC7B185A6318C00324091575A105109
0E04997FAE75E3C492791211854463046528A0DEAC9A4C428D56878AB1AFF5C2
745B832654A43C92D858CEB1A1CB251D47C580039F4ADDCC25F490932CEE51A1
0945FAA46A3A99BF183CE7646A0625482326C72FD583A4C63A81530D8279AD7F
72358C2259B485F24E4F91ACD9CA3A9E332966CBA5C0AB5FA2B8EDB7E7F32402
9D4D0C0BD8F745A9129CB735814B29F06281304292E92535E33CCC8F61011AA9
58A6A7A54041E776DF50227BA551D8B55818FEDA6A0D186297CC7E6916AE122C
338B169B121155CC01801952D992F2ECFBEC965700730C46F4B358C2890599A4
FD460EDE5FDD27935452BCDC35CAA1362E0BA23C6B2719E1EE2360D53A6C2EB0
393A21C2984E95892F8AB22021C2C51A42EEB3AE4C6CD7E7B194162962680130
D78F9D9D01694979DACD3F5A953BD9E918D5E46449525A4DE0C07DF8BA4140E5
8C4627A127282B55A5E91DB5F2B123EE41BAC25DFD82C6899ADF3F20FD00FEDD
787FC21DDD2DC7A3ABF0AF8EBB72B57EFD8D43EED8833068583525B91F41478A
A353DAD8A8A5D9AC92622B451F6BB408E1A6EE41C4D3254A6FF108B95255E29F
FB7ABF4F73EA909F25CA31C33A6ACCAEEC9809CFEE2C0A25ABD8C7098258D9C9
CB81ED9ADA72BF4B87249FF072703491922242B292B35AE2CED8097E677BE7E5
D64494D3E6E668B71F2810C63616F82AD36E3C176B0D17F0526094EBAB48613F
9F51454C6E9364898C057BB1C792F1769854AA18B37286870D7CD07A0016BC1E
099366F293191CE25705F0F3F4F384144FE3CDE785DC166F4B3F67E0CA7E5129
8CCDDD213FE7A7250C11059FFF39F6B9123AAD2A8C3EAEFFE48BEBD440511522
DB0D2D550AEA55143EE8668AA5CF8736C663D9B0BBEAEE22611E047237E3114F
032BA029D8207EA021593BD39CFC03F5FF651B72530CFE7C3FF39EA857ACD2F8
2F83AEBDA79893804E7B3022856B4A9D59C95CE36C8E2ED90FFF134DF08F48C4
4C4F24E02C8F13A4F14A9B4C297C01637E79290768B31FBBDF31B1B2D1290488
345618DF1331B0FF94968EF4594BF02B289C3CAB6E2FC94DD92BD96A015B218C
A7FACF360EA504499BCF9017D11C9AA761F3C6F69BD096ED6141F19D218F20C4
027148117CD4073D0C3B04A19E77E6AECCCC0F4A8D211F8966D90D21D1E7C7B5
92D605D74E3A2120FE0AF6DB142F9D944983B19A5C42053282E1F9391F9AA3E5
470914683E6EB80D0A469D302B99AEAB348AD941BF7F78928EF8D8528C8F6DB7
B307D720243DF1C5E578D381CFE865636E5CFA757AD85F37EEDD3B3B3291E0EF
2009319EFB3620D7B664B6DDEB28677B8E252BEE998552F1E4E1ED4D94015A95
43EDECB7808D6A1D4FC19A26A1B41B79B0F627E306F71608DD5926B22A04EE1C
0AE3BE78567497988E86BD804670301AF4F9FEA3E4CD337C68CB9F4DBFB407C2
6F60613638EC5DFD9187CDE973EDE0825E77B454D0E71301739C242009470036
1416EF4DFF0779DE1E821082082B917D77EC33200AA1D7F51802DE05633C13DA
16ED1E4CF185A3E4D6C9DD038127BF2AA69ABE81FA5F873C6AA5C2AE0CC2EF7D
4F111CD0A58E94861527D7189EB80B305B94ECFFA4E01067425B964A58E1532D
ACF529544D171C89D8AB26B7ECBFF4EBCB68A2D325F02C783FE403368056BD3B
A58D0F6CD3D13C09284AFAB3CEC3010E036FF5CA8FEA15D0A83A22010252A009
20C536ACCCC8987DD10E6FF18E5BBF4D290F9A9F7A5C1690E4C19D65E2431D72
1444A0936A3CA4309CB739E040E2F1BB3F440F49D8F0E1186D8C4CA15E8E1CEC
E057A7FBE874AEEF98A27529B4143660ABFB71018B1FA08BA28DD378FF72298C
A4CF175198F196CF2AD3F92BF9080DF52F752A1A312D0D8462C9389D0D7275D2
BAFC10E57A2C1CB3D58CEB6263F98385AD7400228FFFD7B49CBFD564334AF337
B596E4F1204D41B660B370DFB93A1127FCDE98F0272D21EC2569A93D886940DB
F1C74A8C86F0FAC5409884F052D1DB422D245201FBD6463F31D4293830646B51
A455077D64B52CAC5AB9EB5C0423461671B2285B280C69513527251D9769321F
25CB7003F5973D3EC97FC7362A8219C32FD2C5CCC793B6645683B78DFD704505
000000553349AE71F81F7FE5F5C1202906D6473ADA45AC2D507D11BBB289486F
6C7E238B7D9E8F941A6294B15AC6950D97B64E595CA37FF9328D6C7BF5A99FBA
80F0E24128E0045A5C6DDAC94750B6006888772567B5B1997AD2FE0801171A58
B943DF0EA5A8F260C5AB68F780D2947F2AFF2EBC9E937EB2CBEB045CE563C8D2
F5BD3C2C96D2E6AF72BED7A5F1837FC1DC9ECAC21DB7758381552844D520EBAB
CB7DCD8125A94ABC6F19F84CF9A1CD3597D7A4D8BA53CD71AC8A5ED11629F1C7
955AF2EFFD964AB8EECB15C33CFF111F801E3406735BC21B42B5F41E8F864AC5
FCD0977D31EFCD46CC44BE94F344716E2AC29402824FF967E18EE39082BF8183
0BE0FF1D61A3392B13C2BAA4F2EBC705FD27CD6D2280BE530330233066FCBA83
EE6C45350AA213AD5635DB94F786227B12FAA9D620113A18D118B979650E646A
016FD715F13353365758F50534E69DFED6AFB97E7403CC7DC4669430C724DBA5
58DB47A3F2229E2BFBAB5416F40271873AD56EC723527CB8D9D61A13F2CD1BA1
A2939292F0254046692713E14A6A33B67D29ECD0A841751F69F5168EDCD3F3DF
79F45576006AD18142144D77BAB28C57B212795AA4440C5F2F4E7197F077BC08
DF1D0E31B9E55976DF1D955F16FC22014881393DF87D445AA25641782C06F08D
4468C7DF766A260CE1F30EF2381B4136283A37FED454E6314828E3007B3FD981
25E92E38273BE18D7304AFDDF88F35E1072C273662EE7E5588EDCAB4278A0864
D525FD9CFD4594A5642B2B6454ADBF40E73CA7DB1DB1609D4875337D09F38653
4EE450F89BABDB0D9A6E016BE0C4A3836864E6E7173941A5602FD6C287188350
F973DEED278CD6ABE2627EFE2C9B08CE150B41D0EEEA942CF1D6EAAA153E2725
82134394EE9B2B9C967B7F8A86E38ABD1B53E78F7D4924B72934DC00F3146A90
5A4F528356F1DF0AA55778D11AD2696729D1C010B696F9E2EB03F07F09F175C6
B8BB05D4EC307CDE098225A478F5F2F4C32717B3C9DFB884E30A1D0391179FD9
95E5020FB2B56B488D0D63B55F47785C433D4E18A02ABA38F55742DC36E4FF07
A219CF2CC31DC7139C3C3E760D058379C5014882A7FB55A65DF939C4A839C970
45B57B309E373E1C340F60E6ECF740B470ED17B04C255640ADA6003054118100
D6C21AF7CC3FA778C4D9B321D4871921F036EC9F9E8260DBC3219C354631ECE9
012C35E50F3F746C405422CF4052AF7684E8E036205B149DA99B2CD2F337147B
5D39B37816C9D6E120C8C3C96A3D38C73B7868814D84732A82BAC55324515923
F500A60BD77F9958B2C6701BF8AED92EC71BC890C7899FC52472B6956D0C2F54
961F08F865C167BE4EBCAE4B083210EE6CEFAD36A059FDD14FF5D6C6D48048A3
9C8AD7847C5CA7CD989DBDD54D032E7BAE04CB744904329D9BE68C150EDA0AB6
204FB3312BBEE1046FF8B118716DA4C53AF2BA40CD10E1C39C66386F7FE09C53
EF71B9FA7C77E8A28931AC48A54635501C98C38B816811216C912B2064115FCC
2C0B048E62B50BF64A9A860C3B9292CB3392FB562C26C291810DE035C150F276
290101AB3A342D38B92F3E77B55CE291ACB8321BE53A2C7D274C41C4AF4D0F51
CF4E726240B63095D44A790435D7FFF6F36EDC7F28091D0C6088D01C994C7F6F
3FB50F91400756897E149BDC7140EEAFC846020198D737C654D94A53DF057E45
B48B54E96F7535ED26A65B52F14FA806EFFD6DA61EE997A91FEE52B085EDA0BF
A5111A578AFF83FFC23CACF4E34BD9D508529DB4351E0EFFFF0209CAB4DD30A0
30D384DBED9E516ECAC28EBE80A731051BD3F15F0B80FDD787D4958CD594AFF8
C5983330F811A9B7270AC4A6F7CD311C5443FB20CF288B172C053D25F737D807
E2CB59BD81ABAC51D01B15D0A65841AE025FF140E7D8CF7849612AA1DBD94B7E
48D3D66373EC118D804D8A93A08A27D0CF07F9F07854671B8B0A391255497A84
3D7AB32AFD6A1CB7954A6998DC86910BE9DE38D60074DB96644FA5329513ECA6
25CC1CDB1BE324C4A6BAC3D092EF5AC5C5266C86C6D25979708C8ABF43B12557
8DB589CE0547C82BCD603E6C63D9FA80C2EA874D558B0F46BB3DC09C8F06B613
D3BCB378440760714A9CE8DC838B983D44059345FD17DFB75F80177D4CB4AFA2
4A0CC22E3F4FE02DAF4EF054AF09622BC4721AE626B4FBF514C6B17D85CA1DC9
7C2BA0C7BC5A9BAA7811B7DDBEB2F3964B99E5A93ED2B0D8A303AD186A5DDB05
95138C0E3D757E8DBA60BA669D222D35EC5F35D5AD07EE1444E800D9EFE3CE9B
FB8BA8C9A0A10095BD1A4CB695918A2253B01E4A68A231D5887C14ED0DD164A8
4F03DC26A3937A1F70F5A484A9C99F97003A0653F153AAC4D8526D51B72E18F4
D38022545893B0E2C332B97A00994F543BFDBC8567FBE4A28EAFA97A5FDF447D
D9E68F5643412C907A02BB57F1204D33812C56554C5AADFF9CE2A9C24F1DBB6C
AC751C3EF07FED42AFE91D303792B7E1E3043D52047A16227B04423FD0DB3A43
E8FFC0EB4C3D782F2BB7EFF536480AA43F0D960075B606F3BB591E6BF8490DA0
C23DA2F68B499386161B4BD1FCD6D13BF58526BBBE228675A5535A800A33FD13
B051870F907384E2A2A9F2B54C779918E730F1039949AE50DB1701A423B1DA01
ED2DB02FF7EC6B26C6C90DAFDF8EF8BBE8BCF6512977D5B7758A43F98F4D371F
A9C16FB7D70AACE776D1E7B37043FDFBD0D2EACFED9EC217DD443D5901F9E200
EB50F190904FE73530AFC675180F173FDCF930CF8A2ACAA85F617807E129EAF9
B119FB3C410855F5593D1424A27B7482D2EF601673E5E85EADEE40457962C372
3BF6E61E3C3E10DE25AE1908F8649EBEE7ABB9AD43927837F9B19E1BC01AD5D9
081E247C56C9886ED8DDCA3FA90B6F29584276080FFA7C50C69A3FAA950E1BF8
DB5AA29D60B22472A0E70EB40E31FF81AAC452CB9419EF66815FB96BA3189547
125D08AEE6D1C11330B9B0D1AAFE4621C9CA28EC3C9D0B7B88F78BE3410F070C
8AC4FA368686EE2454E318F5CCAB6B5E430A3DD4CE6A4A97B2DCA5947C537669
D91AF2BC2E50F1CCD527B74902FF4BFEA7D8849469502241D4200BD5BEF8E12D
FB9D84EDB11E86C86C3FFB00BC4BA7BB309723D6EA31BC9126B4AC396F3C67AA
789E541CB402C88720DAA802D3D5B4B538DEBFFA61B723582A2276F203328A04
7DA7B4DA61AC7D8DA561EB8E7BA4D04393E7A43B504AD413B8FB1B33A25F4BCC
90B6ADFB4DC714D6D083277FE3A6EBBD88141D1AFAE8851859BEC954BE182281
F589E5CAC8DAF08B5F99CD7C64135AF75C84EC1B33C8D2C8D5E114246049948C
187FABF401324F9989DB792F77859B0FF3AE191ADFF9F5DB0FF74793F3C52637
56C50982444B83B5D95A9F649546B511B8FF57BF3EB0E9FD6235F07D760F2ECC
C1737111CC27BF53B4898374919022B2FD95BDE0E9003D53D028A30A739B5765
00ADBDD6E361F2750FE60B3E354A8F91DF447021EF84A77ABF75AB248675CF58
225AC691E0DE1502055474FA4FE9F7CD0BE71C3D01F527BDEB252B52101B6F33
F63BC02B4895D9FA0390FD8CB5833D08005D8AC742EC3782AA332C31854CA672
5E034FD06B7A60E5BD0AD378BFC58FEBE8E021C763E158E8B26A2C3DC344DD34
FCBED93CD89B84F14D18A2C653EF52DFD5BD5FA826AB300B4C21C8D7FAD2ADB1
81B67A51495543AAC99F499DC810756E12CF347E45D9579C59352A120FF02FF5
4C187A35BB806B7D1146CDD7B5AF2FE2AF7C8824D328722FCE97B1D7893DF52D
57BD6C1A6B744024CFC65AAF3207607DFBA5DB6F27CD6299CD0104E3E19A2FC8
FAA962340D39DCE776AC8AF5D3A9DE88C7D61C01B842371D586FF5767F3AB7AA
70C37462134CBA469EFF52B99E6C1F49AF63A66C2C3B5E16FDACB9A7F68828EF
A0F74BA87F7666AF3CF6986C9F252363A207D88AB66A7C0DA4A116B088A2C53C
CCB0EE0D9E3C57823F8D6B050671E1ED55FC8220EAF34D51025EF8B6CC482ADA
C3FED84C85ABC9D48CF1E768E0601144B6E3AF224B6029ED2F2A0D5809CDED5B
9DC67E8DFE3EEFA96E8ABB5CFD28CA18CD9013B97CF1C3A26E71FC815A42A6DF
5AA321566DFA1D7C24E388AEB21F5A20A2F6F1D9ED4BBE1D530A44CAB187C48E
0D3F81190CE1A764F1A9AF7097C516281509F35B3647E4140325114C5985EED0
B4F03E7872206B39843466152E7DA26D679ED4D87F89B2D3FF1A88AEC676DFB9
8B056F4797583A5F1CC5DB3DFA665A46AD11556D2374E26A68999731A8847C24
DBDB3EB1BFE5034F884E3F62806D6753D23390AF0FEF7A9FAE4339270B8C5D85
8DB7DA42F20DE12B75E2802B676484C9F05BAB96F90C9C3475C060F90484747E
B6E23653167D5BE4ECE81376753D602FB19E5054DD2BDACC4A2F8C0D38B59681
BA85463E69833F90E182B4657A83AA0EA5B1D72480247EE13CC02C6732A672EE
C7A9263975B9984BA736DEA4AA1232F1B6E19E4512E3F83872A47B5C0B627FB9
9841CD6C13C9126515C25F522B3A9F1E34262863C1BE7CD30CB62763F5416543
4312AA5498019581C08F1DEF722C5D131319C2B08BEB451836FFA20A22DCA93B
AE4FE2BA8B2BAD7C2F670BD9087F7531490409D02BE310F7F5A0D0814370DD82
648D0FC8866047EF238C7EAC19FDC3428B85BAF6F82A33FED28F1F7CC085C2F0
191E5B9BD2FE788C6BE3B1BDF695B9F2CA1DCD91EF6E38D2F7ADD1BC96DBC8C8
2553344C617685D05AE401C710E8EC03A64D8C462D8E46BACC8AA5CA60411CC6
15B9778A9B58A168969D01842CDF42F98992021217D666CAD26486FD8A4E1F40
23DE15BE90EDAEEC72A56069441487C8D153304E35363E71336D0196B60AD883
6B98F8CF2EF19ED497CD01C3AEEB154F5EEF562670AEF2CC724BEBCE5172ACD5
C2F5178691C18ACADD3191DFD0C105CB6FC5F610237BB3C6E242EAFDB71A11D9
B9DF27ED6A8E4E5C370542ED6B9BD96F77B54C171EC037B8D0E4544BD0B9F026
702E30198E883BA6A3AF6C2D0861CBE8A9827B3F3157C50E2E10C7A18BD9ABF9
D85CA515A7508704B13C0ED5451AD737EA044776F7A342FFFC528C28F9156100
AF21730E114AD8A05A139AC2C2C6486D2660348916BF68357885301F1B2A24D3
4C45E7B9EC8730E60E02CA72E2EFD7EACFBBF2807862C3BFF8017A84BA6BFC1B
A5940ECA307018FF2E5ECBBBB7875513630915F1F145083D3ACB379545708FB6
5C4DEDEEA346D5B5D070CC2B452B837DC5B35A1BF11973816C9D25F988B97A02
5C9805CEB46BE1186FBB9D9C2EE4F3D571285E319A78F909421C31359DD9D0E5
BF6AB303FEBB2C20AB717557BAB2FFC553ECFABDDE0F19C6F45FBB3B6B73E80D
855F5EBFF6A5BCEC484B5108851F0E8333769BF901868D3A9423473305601079
B89F19475976933B742305066D1656493996A2A6290929812CEA92C41966D689
0030A6666FBACC1B4F0A363AC0E749FAC0B74850DD0C1863CC7AEA15364A6607
B0ADFF961DBB87DB6FDD0B1EE10568334E34AF897014136C72F856AA3ED07EAB
1A36B23BA19DE4C8AFFA667443F42989A5E494682D24D6AC1BA01C817D437099
4CF6340DBE2CF7684E5473A41499E485AAFB3686B0C08AF8A15F4A4DF313D85C
474780C64CE32B40F825BD95B3F8C1A49E900D441635184524E2C51E738DD87E
1B7B1B1505B3F1266FB8568E4BFF0410C07752096135C9FD1FA0EE61B939ED08
F884480A3E19DD134859972E87A50DCA2EBEE2FB931973471B2FB642EBECE414
4AAE066DDC7393F29B4D933306793C754111044E6E615284446144E22D8BF12D
E44EC69231F93CFF3D70DE7F992D7ED74ABA7D7F6D429C04CD1D5D807ECC4DAD
9EAA774CF7213C1D22AB8C5F24DCDE8F5BD88CC2F21D2E136A3F9D917B293DDC
AEE45B171F5125E4C1B5EF7BF161D71C158F4FFFD54FFB2E9AF810EBECCEC5B2
4B93A4828FD0BC08539BFEA00B80A262A1D45C835CB096F1F5B7C7A60275208A
379C2219317260D5E088E46904DAF15C536DC1035711504BB3C1AC53A509A390
9A797289362B7D39931769E35745B0F55B622EEA694D370DA8F07CAEE4468524
1AAFDD0A84155B620334FEDC55FDE10771F0F910CEAB802C9C95AE8AE797DFEB
08305CED74139162095B194007BC8066193E1FF52FEC7C78C35EF26934B5368C
099B59A7114410C608C749D1B7D496741CAA9A4EF1A081B8EA09254BE2F3D1AF
AA1EB3504D46584F5AE50C25E678BF6CAD743E78D0CB8834E734B18F7A95EDF3
BB2393A1C90AE75859DC2B1E2D97BA8D3BAB84CF7068EB16D13BA07154D1F65A
FD8A04EFF66FDDB2710B091AA85ECCBF7320050EDED0521C7D72EFF375CC4D07
54FBD4107B9A801E9D4CC88EB19A3A6BD91855CC803FAAB9B2A386E1EDDD0117
37E7FF0A17C1886B461DA285A168E02CEA09E1831354F7C4A4F5491AFEC71D98
2895820AB47D0BEB5D5BBE6577DA79FE93D40C7F31F7B91923F0511EA1FC0941
BADF67DC197BF40B274BC5F0BDD4CCB8B628665E60DA667C3008DF5ED37D202B
B69739202BD31EDAA120CE54ED0DE7EAA9CFD4D91E52FFDD417F70C649749590
1E69E4E11B9A3704A32AC3E387DF8DD4B02241AB6A86415F8982C22E97C38286
6015975F0FB17DABC0BCDE05EEEFA1E3CBD12E58B81C7C475FDCA1F2E416A437
C53CDA640D1971689C0F359224627423F0B7F5F3F2A53C5CA6FA9E91D8A28C71
9F9348509C0E17D6345FF28D40163340A17A117E25C5C463F511124CA3AB621C
54D716DCDE61AEAC6DBB9F5F26C309EC6AA6E4BDF74DC7E330169F5E9D9D7D02
9291CEC3AAB98D2272DF83B456F68F397E36E0BB56E023BB29BD2C6802C1A11E
BD3F4A4A6BBA7734EDFA9113F7D193FEC9FB98AD6151A16BCA5320BCE6CC16DE
B72882D6293BD2BD15FE0638DC750B505A02EBE3C910B96EC85F7F61CC55F9E4
092F362FC1C2780E963028ED2ECA0B7A027A91E51A250A32CDB7BC5DD0E9B0DA
3088D62C10DA3AD6350EBD350CA9C73DF0C7F451EFC226CB3BC41B415182F40F
5727EEFAC007352614C0B6C531C06E1725F39215694893B01FD9A2DED98A79B1
993FE3C7F50F9AAC0E3EBD9F71A3CFFA99FD6AC36D436B89F0FFF57ADC4D7D46
1ECBAD5EBB18C470914CF1D522123E627D00097377258E81C9CA61F8DE9A74CA
226BAD0E6EC5046011239ED7D6C47ECE479FB381D71265DBE5375B06FFCD490B
11631704A60704D12EB2E6D74D11AB2D2D8E52FCAC0DA9E21760F1D296E138E1
931E88FDAAD976689DF245FB94AFCA82939FC16A88225511FEBE1F1652B0F6CD
A54412F5F7235A497AC3E4C1DB90287B8CC0674AFCD042F2AFBE96C41CFBEE6C
B13D2C4F1BA4F929F909A44F9B5F4E39D600B85CE1242DD9DFD4EA2DA553162A
2DB3EFD07706D953C71AE1DC461B68B397F4E6BE8EA28AFB7387999BECED0CA2
B3294CF8CC9918A6A46873A1769ACCF25B59CB436B46F5DC2FF0E40D5A3A2E5B
7AF64A3304B9E86E1BAFC4994DBD83227FB5AC66CDC561DBB0BB5600EA629EE2
DDA2880CFB275F5435F3DD911BE11DB381C01A9C0464501AAB745FF5F02CC49E
D6DC4918B6879A73B9D49874E5188C8C995DCC595125912F12542EFDA8975940
95146D56C73FE8E8D67DD487340D1EA91A14B93B8E04CEA967BD4036869F51F4
65031321215B9E0904AC946EFC2DA3C657752CAC88B12FF919A8DA0A99F729D2
C995E01EA580BEF28E9E83EF1C03E69332773BB3392AD630F185A7EF21181312
C29069BEA6501105C9AB89E142758EF9A7A1CB96F342B9FC64C13F362C87214B
6C5205D7B59E07C0112BBA8FCE74076177D5173F560768B3A8764F0BBF3BBD4C
E9F1647DE3115C32E72A9370F8E74DCA942A9759B2AE6EE215A427C4FD49EE0F
9575053CDE2CB4B951EEF8BB47854FEE9428F185FCCF89BC0778B174A9FB4F58
72BE9544ED3B3D53547C266FCC8764025ABD321F25418074615F75D8FD4F0CA9
A2241619C4B2F00E32C603FC2A137FC9C61DBAA26FE7C2418EEB63B7E393108C
ADDA24C91C1963DBF5B0E7A983AF06FCF09E37E9D83826C7818048068102D916
1A09F81D9F6E46150920E0156DE04E084BBACEBE04815E4B59FBC32679188117
A12E9700B7EFE75E993C6E72FDCC24EE7F3EF93DB577D2E225B5250B8DC673C5
84D4A16B2BECF9DC186E0B3479EC564EB9E63BE5CB889E14DCD688554EFA8D7F
2FC0737E4E6A6C452DDD52FEF4F852DB888567C1C1717D06FAE23DC20555C129
BB739111AECD6390F8027137D6FCA1F8F1EFF023267466184750A48CA9E1CB49
1AD7475792BDEECEC4D91D676ED715EEEB2495BE6DDF7C7106C66F3EF6A89F9D
6EE680AC8BC5450E68DDC518F5DEC9963D8500CB57D81CFED0D25101DA4A94F4
47A97175E18373A7A108C2925DEC64AE192F7ED5B36C3AD33E1B31038F25819C
130B7BA3A53C8AD64E24F517ED326030FCAA6F3262DCDFCAE93B919111686DDF
B4F35F7D6497774BDEA801526B74F0C76ABA91E6F18598F18CB8C297B3911E14
409A1333A233D91D9039286B9C46E0BCE974AEA2DC5B3509DB8EFDD8B92ADB5C
85F53E63DFBE63D6FB239685F5147C20791B4A7A4B8DD2002CC4725A63C11636
EF942DC4A59A6515ED7BFAD3CAB4DD881C5B350676B2C4890EF4B3B29354C0EA
28694A11EAEF39EBEF8C5F3A75B96D98C17AC253906BA2ACDC48C0BE5827A262
D846549BAEB53987787AC9AF72F866CEE9CC1E55EF5123584D5A3508FE86CC6F
D9A1DBD506BBCE74F717E6E7FFF7B1BFE2E98D872573C86536F65E6C722A5A29
9C3D4F7F4116B07F1625707CFFDEDD5CD67EE1CF5EF9B6230D3123380AADC1DC
D8BD9144CC9C39D379637772F4EEE9665495B5991C25ADC322AA50D38C526A0E
A2BCFF4F9C1A8EE190DAEC5FEAE2A617730A33951FBC2E52C0152041067FE488
17E2A2F71D11ADD385F2B876E98D952D6A89F816ED8A6BAB2311C5A7DA25634F
0670E0F89CBD7B5E76564EA5B099C094DA4207F6FE98D41E379B93A546412CA8
2B21BAC458838E63DFD1A6221F458A151C3402624E09F4FEF9ED2417593C5106
1309D2F9A4742DCB07F74557DB421D427E28CA6143F63B988D41D1A114387012
E0C6A00F89B75E7FBC53EF85C89A8D8F35545A28BDF7D54FE3A75CE4DD474D2B
49535A8D2F7D8A673AA44B26E460FD7ECED40BC94E7465C30E83152890B5EDC8
7ABF26A024BB09E1257C3772D71D3C32869196A7CAB8D56AE1A33BF95C4A3A89
32F7B0CFCFE59CE12D822D2ED1DEF1860EC2C25B31B32BC2CAC43FF95CC35FF1
74B58CE813E386B30C11F15CBDC0840F9562D8D8BCCDEC4F62A11DF4A3856049
2E7E742F52F8B85D78805A95B8CB191C775A2DDEB9275215DE0DA8F40992ED9B
CE277024155EE3A67C431BE0567169143E2EA3A0861A653F10F9529CD13FD881
AA69B2C6BAF5FAFF230677D8FEF1F4F290E005D50DD54B6E6FE21B4E72FD8E69
9F743733947842C34C534B5807D045EF9B3F48B83838DBF004181F98980D7678
FCDF5C20A99F85CF12F9B0D80AFC1D747E8A46ED6B318E71813F2C217744E49A
EEA8574DC7F2F698730476BCFD29CB57CD1B89EFDC3556FEBCEEAF5C10EC704A
68FF24364E70E1749DBC22D67ED8B7369AED2AE9A79C74C0FF0E0B0C1AD3B59B
E50BBF33E255DAD15F08252EDF5979C14C46A1ACCBBC6FAB742585749780483D
682D172A2CAF15C4D2B23690A6E5FA6017B703F3F57C153783880CFA8F10AF08
67C9A6A76F836D6598FD8B539BDCA02A0A1C3058ABF1106797C6DB4D5FFEBA3F
61D35AE7A03042D2F0C84EB946AB4E5598D9F520066CB6F41C2E2C7E30CB2507
83923C878250ECBAEA8AEE5F1548A11C2156DD71EAFDD91AB800246B2BF9D55E
E19D211A11EEDD5DC64A4922496D357B6B41695DE3587BEBD9AD03DDF11A158B
4370BD2D1AC26ED5E7DF57B154FBCB62F90A0A80C3F11871CAC682E00F00EF78
2AC725678E7A3F3D5216D8AA351ADE8C082421D6EE28D15083E41EDC53EE7F39
6692FE59002E600F1031E55353DAEB143ED668003E3196A1B01625771369E2E5
4C06B408FEE2918DFD868DC4480DBD8F7ED5F9BD7278685C4CC54FE1C1C4332F
05F5AF14E704F4AC4D66E413B344914CBF11F60E84DF1261252400F1FEFDEFB1
EFAB5344E8279638A0D3189174DEC499494E0854F9FBF406D3E902C7405AC2ED
792A4810702160DDBEEE6A70D290A58419E11DD5EB29A024AC37C4E0AE36C73A
9A7D546620E9FB91ED3164C0B2CDFC75755DFD9C990A6D94E259B844156C978D
942161A04F182BF00A0B5F8412A5B4AA7E004616934083213CC51C75482FD978
341709318496543D66233DEC20D59B04F4FC168AC57D5611ADE4EE574B1750D9
E558171E402294ADF19F6D78C6AE900EABFFF17A98CCF90A914B43C8186455DA
0ED803D18F7EF1971A1AFA8243F40DF27EF8A0B9317D9C2FCA56E3F941A800DB
083FE1795633768AA25E4F958D452D44848519A6DD2DEDF88E6FAE176DC9736D
60D9BE8A71D8FFD8CBC95F22C6D0E04F2FAFF295E1D1DCA93121105EF8B34443
4FB2E85895052AC43A095437AA6BE2A8F082AB003E7DC33D2B5E74CE764C8D0F
5130E8798215B528A88499B91CA109DC2DC9A630C2D2E743D4CF1A918C5F9285
2E3372885F89A7E59D1EBA669C268C2CF366F426596B38E5A5DEC256507EB057
06A183C1390CEFA2C7B75896DCE793017FF6D4F920540854FED6FBCA41750742
60D37A7533FF7F98ED6934A93BDDC1EB082343D91EFC53DB1175667C65C8167E
76E44F9383060B230B71B727216C4D3C9CBC9B1EDBC700F30E8998C641A701AA
A5D50A14B7C10E207C81F284BB5F8C64B3B3223A2757147E2C10B0460A838388
A3C4DCEEFA1F30B334FF0B104703D28F19DEE5B72F79445AFEC0B5C5A44234E5
451422EF85E741412DF41F4C93E2CD6D8D97A5BD87F9F7F7EB83AFF045BDEAB2
070D31C140D3F4395F9179C5FCAB1232F02CADEA3C1E87BDD7664DA5B28F23CC
E83874936F0D6F0DACAB0DFFE0B772C5207ACF85FCA94C50FB6D68DD98F20904
52791E45ADC20A0418B79D6E7583438FCE256B10D6B9C3A06DAE6D3DA1D5A84F
11415AB10FA63EACB3A237CBB7F3B58C427AE8DEA456E1B85458CBF01CCA925C
3DAACFED33157A83694F60BE1DD6CAFDA40A5575B5D78C36D54F96837D64F329
CE08837B5EECE7E6DA53823342F303B6F94780C8AA85E112684EC08A29DB1674
1FC78CD05649C4E5333D1BC7D802374A339060CE15FD9710E31C20F100D0D42E
3DC79CB736D4FBA9B6B3663D79B83FCD38BBD17BF34C2FC9B99BAF91A0EBD057
72F738A7A5C31C06462061142DA30338CFE120423A21B394948D9305B66F6D68
2DBEBD84AB728463DD1BB440E42CCC2A40E0E032805BB089B0603DF5DC6B5E96
C0B1D41127FA6F08BB233142EBFE5BADDC75B19A5BDD89CD7D10EFC217E39EE6
016DE4B56B0A183B2C709819EC8140D9AE7E9375C0A45EFFBA47DA0413FBF657
FAF481FB39BF229F6C2ECD1A8D5AE2B42B16C006702E72BC59285EAC901A77A4
E40BC0E2CD7FA79049B46B4EA124DDBA6FA5A872481A55E1E3EB91A280BF9C39
E8EC4633D19C43E21DDEF0130C35A65E57FED0E21E22A0FA9505D9A09C8F17C7
C6403DA41C6A23E94F55DCA0E2194D8D5A6E76089121BD5942C16B0E9EE071DC
9582D264152E51C5866E9CC3BFF3B7840D9067BC18C2A291A8A4132F4DFA75A4
465555CD14743F0154F9D85424BCAE50153EBF4E376BEA19619D3312C0DC358B
CE68E8AFD69EF7E2EEFC7719618B4CAB15F7FC371DAA0E04A7855FCACD6BAD19
DE177A21C4EE03F2D0C36605C70CBD40F0CAEC1313D7D45811C13E7C1FD9DB0C
208039C69AE9ABD5DF2B4E3F2BEAFE318AD5F946837D26C809C9417A6D014C32
1142E544CED420C034E24A5D80B730D4DCBB1A7D607AC71B87A4085E89866A35
C0360D0DB86B5052B0E2751F7D86DAFDFFD834D56B89E238D1EAF9B88AD6A9CC
745059B8DB0B7568CC5423E2D93F15FD01717232F20EE1CE41DF99FB1AF5B5DB
BA3ECAE9F38F32DEF7A7AC5D4D9C56173CA7F34164660413211659F755ABB2C9
397E3293D20B2AD8D36A1CC444593CD894770AD27F2BAADB734C6D027172CF64
32EE641B24FA95BD1BF524F68F138568A039FCFC888CF743452F3E5238264C42
46881AACBF67CE43FC08D9BFED67B4CFAEC44B8D5CFB9086A9B1D854F0B57022
969BD5E7891D570467889880F9A6E11CCEEB51D78BDB660AE0187A52E461D163
4D57CEE80B69AFB7214B7C19FA83E84F04374BD7EEE19A051E6E901513D31766
5645193A53C2C8D20B914F9DA49FC9743C6FCF79F2F4F79A956A223358A5163F
4065B375D150150AFAF728BB38ACAEEBB6B0C10742A5FC999DF7890158CF3C78
E858E38E4D78038336F97DADD32D60D92E487E0EFB416E80730028B5ED43789C
738675065E5475164CBCE720B06D319DD0C6220DF64B619D3B596AF29A85451E
F6584DF65B0EAEBEB8A5ECBF15185C0BE1FACAACC689A888D1A61D7173498AC7
8BDFD99365C887C22BCD65EB067B60E8912CFE701E4802222426F81EDCED027C
87960F4A3638238EA7A06EF1F3D3634F21CF93DB7800EC5764E4BC682C4552AB
BB068B50DEB9B14EFC4A41D54FA19ECDB394D25C2304931E84EA1EE06B0C5448
1A527BA238FEFC9D33052A24F64E20C6512392A354F0E6385B496F4FDF0E2B17
CD8E705BC3B48C06BE77C3B43B36B3696E51CD0534EBF8CC0B320519D50AEBDC
9A22067BF5EF52E36FF64199038C006BA4E3FC85D57E35B06FD8FCFC9B243FC7
A6A8B66AF89000B06F3E25478D1F2A095FD73667DAB7E2A1B6D5AA2E59FF7F8B
636D752BDAA2F90831F77EDCF7DC986B35212AF172B533C0EEBB25D9327DB6C0
3F68FC5947C3A5ED69EE246492B0C5B82412861AC6F3C2BEAFA8C0D2EFBEF207
1AD0D700467B26024A07CBCB345BAA527ED1D63B7ADFFBB727DCE5F43485D9C1
BEB14CB630DBC2EABE77DAD0154371BFEE121B79B5D13E6DA46E5081596F9DF2
86D332D15A3A94B5B83CFB31ED383496259BC73146E9296957A196C782EE4C77
ABB475A62208B58C5D95EBE91D739125D83A294FF118D3A742CA7070AAE13894
C582CC67B903BED9F41F89929D089F1FD8C5E9CF074DB2CA1F776DD7962ED47B
8DC823836C941A80F6C614578A14814D634C8F589453B6DD8E5612F7D1169043
1966C0E27BAFA7ACF892394849830CA593B740F4B1542DA98E86AC54F5E328D9
0666A3BBCDAA41AF5C8FC03BB564AAED5BD93F40CFA82C4299EEA4622641197E
5D48C5F08B60D9FB5F3B9328220BEC209EAFB562D58EF8753EEC3CB1C889B602
D190CB601B5F1A8546074E55DF82FA120DBB94BDCC77105FF22282FC0A7A9C88
028472B42FE013D1F10E1EC1C76415DE60EF79C23D579C2E52ACD4521EB63E9D
8C7E029B796AF2C1A6EFF977FB1F4B1F51B09BCB5D28A95120B30F2F03D31818
16E17E2FBD30E1211AF844712AF0F70D10BA479C94E9E4CC69BF0AC3DBD43820
16C819BA8BCD44B87E77B865294C54AE24F6B1CC32C5D97489F416C74F99B5D9
040C26870185AA51E6B8F1306620A779C25E1BE42651EA146CF20059EA62AAC9
1D6546ECD7339CE7DA6F224EBB4FE97567DAE614CF4BF6DEF305423D3CBA8013
3643A60D9FD250E3EB1189C386C6067B975EF050A3D2EEC80082F8C99B945EC4
FE8EF7FDEC8620DDA9D8F76A9B1E366B1F234D9ACF43B02073C51A2E5528C538
320BB409B810C805CF0BFD9F47242454640C487497D55E0D5B3D2A28B970F8A9
21EA4C7E6DC7B93FC5161D1F74E557779F8F3D4F56627B9A8F49219BF6B8FC54
CF56C3D40F52C77006A4563AE63BF6E827E331F533FE29B2B94A14AA157A5326
EBC52BCD44A4F9A2E4CA3322A503D2068A68ED21561C3139D3101DA26BEBD191
C4A9200AC342D2CDB2B8F3B97C11F0B730961DB4F7D7FDE429FF5BBA8D4A7991
75F92E32334147C78995157B0DA66DE63C4BF2CD087164E17D8D30A3A1906029
83CEB3E4F5CCB5EA322CD5E08DA5B4770EE38FCB94DE23066EE0380DF47A4A9A
F4F7A91CD958BEDEFF2B52E861E87E3024333E6A9CE00E01274D9AB945EF0799
51B36E569977FA7D7C2E62887EC841AB752D6B4DF7A4302539CDCF3CDA45746A
28E1C20855F8342930A75193299933E08BEA2328DD6E9142220E8F6DF775460D
92E1C555519E3131F635601218AB700C63F57FBB8D55D3C26BDF7A0FF82EE47C
D9C0228FB64A47C7C173EBBC2B3325FEAC61BD74A95246CCBC138B3FE3CF5656
066C62FA7772B9FFAC0268E083C5AA08A2B5D44060E4CC7DA55A92759C584CA4
0AA2F6491A3ECA94405EAE616FDA7CF63A0C6728F8E732D208E5488C0508E448
B3DC044DDFD6EBB537C47C525B139F44D99268A7A70FD1CCDF4CAF9F38FE260B
954EB404F7A5DB3E153D871CDE0C1290FA96C6EC9E4553392904F5105E9DB18A
23DEE084E22E30D2B418CAE22184D2B7E695D6A175590D63F03A1BAEDA47E0AC
C22DFB003AC177AB44244C2936CD0122F60874F87B8C566AD9FDC03CBD27FE59
974461C32F609E553E08C72B6E5B05AE072B1CC1FA928BE185383CD78C8C6C6C
E88D8315D95C3F4E7BA38B36390E79636FC81932587BA4F702C237EE46C8B706
AB7675370DEBB9339C18B787654B5294ED08DE1F93F25E6A63FF24FDDFCB39F6
C97A4C03D5734960C22C41CF1044F7863946A083B974A52166FBA39021C6F1F1
FD712D0E785C6A4EAD9BC7A81E957EDF05F3922CBFC5888470967269582AFABA
A608461B729A7E58A1BAEC95A9AB4C9D9BDDD8DFE5163C051BA4F4B18548C7BF
C595837AD32A4033884E51310A78E3B2CEAE9D25A63F855CABD70FCE958A9AF5
73414F677E6731B85BF76FEDFAA9FF32D3B908F509981C93908D87E07DE36C51
4A2F7CA69651AA8023BA0B85559B9DB760C64BF9CA505CABB4967EDC44BBA430
A7C67423501D1B26882F2E6D2014DBA7F44F7EA9131A2044DFE4632FD93FD9EC
A71B9CD4E801CF738C926ECC7513F66E43C7DF89550C496B846DC91CB79D5968
40E6EAD941B45AF5166DAA6574FB53F7907469EC4A4CF61FDC28185D874D95EC
52F9295ED77D895917571F8BEC9CBD222C20427F3BAD3E993C71A79520763E01
1A67AE2478BA30E545221464D79EB9091C4F2ECAB01C7C616E1283852D6507BE
D426F8A29FE2F319C376FDCEF252F596E996BF8D8FA5D4E3C056F0D1D16976D9
116573D575CFA556C2D83A92C58C8429D7AB5AFA116A96804A11A1352A065271
D4C6FDD6F0F028FF400BBFD7E56F4AE661C9177B7068CB88CAFFDCE5043612A4
2A6C2F2BB02631FEC3CA5F1F3CAA5C023DEFB426620471100A055DD0E3911029
40F34E0507B2814046F5F2B40064E3AAABE32E5DD350478A506533D7A6F459E0
A0FD74BEF2BCE3929F9E33434D0AC186E52A228CFAEE3CA8B0B0BD32DA1A56E6
CAE311444909803DAE323DD4C9FD99ECC3C4D0CC0F46453F6AA6C8BA1CEDC0E7
485D494C15F8DC74D45F8E2D72053E0A991B984B994A21A562B7589E7FC85831
9FD5B460D8A5275870020CEDE2FA930E45DB0FCB6AFD5EDDD979F7AC132F62CD
EA01E50AF61B0CA3F1BB9C91B3DE95BA4EEADC83DB9FF2A15629F3F9D0A28939
61DCDD02F36E0AE13387304AF6F744F41EB597905698E9DB6A9CC59F9BBFE176
18672F61279FF5B1D08F461E0B5960997AB5D394AB310842209ECF8E3F20BACB
6B5EA4C36A357AD217D7326AE12B896F41AC4DED0259315A316286A04ACAAA25
541740E8799EFBCF3A0A37E512C9CEE0C1C6025C708B7F1DEA0A57AF6CD50E74
A5D4F97DCB05867C9F967C8DFF1A287DA34E7DA5105D282EBAEBD0E1FC756BEC
14227C3D6FF13261BC74AFF3F8852903238EF74368C4A85A066C9F81C1E2132E
2D060BC0AB0E4A4D76D2653AEA6C68524F9DD35561E2E5608200B8BCAF322D67
3B7154979B03451054D3E89C9B78EE0D1DDE67298F5B65CEBCC38F6EB63426D9
D83ECC35297ABB3F13781C6F65C0C27AB3F88C7F58CCE768256A30FD2CA75DE0
7FBBC45B20AB444D279A273EA258051A98572E74FB621AD89DE7AA67992ABA48
5A92AE085ED8E610620E61194FC1DBF1781FCE9A594AA947FEC367093E105E5D
39B59F10DAB2EE342A55C78F6EB2451FC0B67367B36EADB2FFAB64F927011BB1
A22F58082D17B7649E8323B3D13EFC41C08827A1205BE38DEFC3EB57326879AD
DD03855CD2D4E8A91F0BDDF2837D97D63F4565330FD2C434641458055DAAD743
DD40A307B3635BB907DABE75226667F356
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Italic
%!PS-AdobeFont-1.0: LMRoman8-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Italic known{/LMRoman8-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Italic)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-489 -292 1472 1124}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD115081973393B704D9D8B
0462850E51DBFB8616C22B791B3CDDF2039D509E454786F4825F8101A18C49E2
08AD15A3C7A5879AA4CD3DC5E43C24D225BB39F3DCF4FC3F621B881512F86C0A
F2952E088E3335306E2FA4A8080B7A1A8AC5DDD22CDB2E8CF5D9648CB41369B6
EC5189E3927429DA99031EE0D51228E5A7956A04A91430B7C0E422FC2BE35F21
4CC77A15E5D9FEFEBBEA0F73A77580CB02BDFE846CCA0671C8007C5080D22262
B9A41DA20C793CCAC644B70497D7D1D7799F589CB718B52F52A1E494DE352095
49E9F7D4250DA0A890AF86BB288D85A8366508C2B91C6B3F99F69B79DDF04B48
1D0C74086E615842106C345F07B25E93AA0E672A658E4801BA3254DD5CF00295
4856C8D85A90A841236F26B782904EA31482F6E111F95E88808DBF6C40C0F933
CD4BA0243926E746C5FD765065A7DDF5E44A7F94E041E79C9E83A6EAC906E40D
69DC5B47ADE559E7295F0E742E4C458BC1E8EC7AB04C695DFAEFEE778A90ADB9
4CB21EA81EC7D47950E964E23C0EA286D73D87F60DF0702BF6439EAAD17BACAE
07B6BAF3DFDD2546250E451F8F83AD2F5E29CE5E2C278BE49FE3AD78E960F75E
AF6F23F450D71BCF85002DCBECEEAB0FB990E25612ECC9000164E0470806A0A9
AA5FF1D671E9E5F0572DC847F1D3C43D42A12152F6221EA726ADD196BEBFFB38
375CD9DC1B68D9DC4410BD7FC6FF3C6B7E8A04016F1E3AE257F3177B7804ABB5
F3949CD5C11CDC905FCCBCBDA96A501D8406B46C02F8F5D6444C486AB68204C9
AEC313044A6A35B7E699F540DF4D3B0C8FB1C9537262BDF381769FD74BFF42F1
7EDFB698E6C082C327D461587FC9B86564CC1E48FCE385666CA784F59F84FA71
1026006BEFDEFD1F659AB9DCD7A333AC57AC912FB468D39C0BB84BF39517DB14
A19A851ED4E1C217D5FD8475C0CA36A84C1FFFDFC0342838AEE12EBB684C6C1A
3C973E2D56BD97E39F61E1B1B9ACBA7BDB3F901428C98CD7E3DA090E128C794D
9D6EF7E18E06469CF003B9537B60F93E351800999ACC476DBD709AA7DAAA193C
E2C27178ECECAE03BF717833F0692E2DB3C86B8880C0AECFEFE1DBB7E42DA12A
67E70B290AC88D73F30514F88E8FD48F0B675F296A83AC1938FCE2DF9E91EB4E
B8B2ACC2214FCC5F2514F24E0A4593EBDA9D17A20F6DC3C0DE48A796A43EA25E
34BA76F1681A3282F7FC211E13B3A1FC467F98A7E2F4511DEB9FBAB2FEDC321C
73E17058A7998FA34AAD8C78DA36221A147B7E77EF2D99CDD9306DEA21534DE1
FCA4F6C6BE4FDBCB6C7CFC456E5CBE116BC3DFC67B18E95621D03FAEE361D368
613638EC5DFD9187CD14D47928961611E7390BB77F218FB837E7B5327028F742
94FB777078BAD84FE0B9E27E5EB32D904084F969E166E6A53CFAB75F75CC28A5
3483CF315106F5A1B428B4A87D42F5F09A321BED127C7018C59B0A5872B6C996
C44E712F82A71C040CC46914D29D51457905A91173BC23B3D1657C9E8DCBDAB5
22E1F4AF48BF0E3FA1B3BBBA9B8CA038F113C57B5B2DFA65BC1531B4470B5A03
4CBA00791EE592FB4DAB538C280A8EE09234A543243B3FF8E29549C849F55923
9032005FBF0708D97515CB6CF112C2A89D2D44816E9074168B3A76FC1FA1CABA
526EE65F6439F9FA6F27F76365253722074E8876405E2368CF3BC65040648818
172D8DA9F06957159A569F6487BBEB0C1D62CF242FCA104861F63E0CE6FF00F9
36219E4F59A514F54313F10BE8A0DFE6A7B72430D7DECEBFE8D18792D44F39EC
680F178A07F4A84C5DD989C47288DEB2DE91E7A5A4CA9E3B305E2E4ECE098AEC
270F112CADA74CFF4BD78FEDE423B40140F7AB6FBC84982A912BCBF17E8709D8
6605CA1C8B082E81EE08E8D3D565E42987DDAD25034D1C61659E33793CACC755
49D54E2A04A2F2C6DE71FD8EDB02B3CDA24BE5B94F4D4C0FAB79CD0D3E7F885D
842B769850D291C9D92C836531BC2351FADCEB22C0DF2EDF2C3F52D34947E096
4D0E8E89F6043C0D2E7B91334762A700EE46CCFF0F8222069A239E9C090D382F
755A2F3209D4F9DFFB69F2296D9F724349DB496B42FB35256D93962CEBB58438
1E580898746A33391966B70D7882E0121A128CF3F3B5E6428E1F6EBFF807821F
105AAD8F008A01ECC02E7933E19CDA965A884BF7B208519979ED23271B6AF228
8430995CF657CB2305D67A473BCBE4830AB55944F07DE38907B58D11F2FE9FE9
8E660A780BA6BFF75BC9DE9B0A4EDAA177F8F6D7E6A9E866BAE054F5EE51C829
C26F9B88AC1091128220F5E734EA2DE6F8CD4225EB94D4436925DAFADBCEB0C2
01C64F56CF4AAE64E1F2AA294C00718D04FD696B3F07019B87120BA7E2FB7B0F
59266719A4646127E2CCC2232674924E662B27AAB6D57C09F26A63C400F5C62E
9FC8B9E84BF464065CC9706434B127E0AB3069ED10EB8C4212CEAFBC79B61186
AA832CA31EA12A4D2A05B5C1F8295AC799CAC6349A8030F0285D30E48A620A29
7B211C3996726C2BD5AA99752F71F391D7403FDE31BC694628B99661DF32F2D4
BD16E36C755D70BD5E2BF0DDDEB2CCBF9AE69C1496A8BEA1B556EEE562106998
F7FBFAF7313B1FA589C0DD6CA8844B165777B02C5938A3F19631D6133A8A826B
EFACA741F53EFF9021D9D4C491F26BE8F54C61165CAD7A2D32C54D4A3D3C1FD8
F8F90A234A4F10E1AAF04B2316EC9C9749EF2864DAAFC2B4886C6E9E9D214EF7
4D7E0BD6E972A3F81C7EF13974A6A7771FBECEF7BEECD78B8AE3B5A2E6CFE659
1438894018072909D00732D71F63668F44D454435EAB031BC8901A89EECE3BB8
CA238922035C69BA8423CB111552301916EC174222485E973BAE1751B0850541
44022BE6620E3BE3BCFF07C029D465A2D09597CE1A2C03653896E07940025DD6
8C11C8EF4E59452CC7349D12683C6D610AAB4267EB6D070EE775A1418AA997C1
6C2988EF7E0148A1DF74DA038B94770B57EB61C47265049EF59628DC8B04C719
0BCA2E26CADC13E2FBE104EE488385C954AF46D90692B49F7A7672F7DAB6811B
1027FDA86CF66E032F1B0D494612E30065D79AE1FB42841F918580F3EA43D284
AD3FF9631052511C02B6F9C5319E4159C386DFD7E08913A010ED27662EDD2380
36C9A646C280EFC242ECD53B63EE65640810BD7C466F5F433EC555E83C466B69
8F58418FD60D1E9B8A9DFD05C44C457C2669807F31630BBDFEA94C6A4EA4A96C
696DD0E62D1A74313C4E0BBEB6E94DBFDF8A78969FF3C08562DE4012BAEF33DC
753C32A0A371A51F64CDC4E06F544F2055F67F0ACD4B0F72207FAF08E24C5D0A
20A385910CF5CC9590B7D2B2CAB2A1DD50A23E443D8A30572DD2A12550B2D61E
E24635EFC15D5D7BA5444EB942582DB27E6C1A558C89543D83B3EBB1F1EC7A55
8CD8D86DAD66D3EC933AB8DBBA73A64A421683D25AD6436A70B0C1C43A419F5D
B99410D0BB68B865F3E4BB7CF3CD00DA8E491D38E5A77CCA98D62B1B218C8B37
1843DDF5DCBACC2CB25F1041B0EE4D1E1AFB6B6FA6EFF9D626D24C4FCC9B0117
25B1560B30D6CB37427427EF4079D701BBBF3DE5EDC9E2C1FF4F9E51156B1A36
A5D0F0E0CAFCBAF87E8A9F9AE8BF9E2E340162023B85CFE6D9AFB6B92D74B09E
123754F7752507DE77C8B35CA1A3F7D176D5B00F6B6966A3380F67C084786D19
2891C18FC29F078BEFFCC010D53C07AE90526031B40619B4D27AEA5E7C3BA7CD
D616DD17877C265E77F708D49AA47248A27C570FCFC6600196DE9ED27F8DF650
516F54C844FF7BA81A1C6ABCB45E5A9848A2485EC84D12EF03328885D837A7FE
7FBAE9F372C30CBE0298C7CF0424F68D028DC56C55084EE590D2BD58FD9784BC
DCC3D498BE2BBDA1A81A0D8E75880EF3D7798AFB3431A9C936B1549455696100
79DF9E96CDE8D005FC25E59B029C0AAE7202F91D76B565BC0A760A0DE6682329
78D1FC49305728AA57F99008E157FCDC9D79CC6D60881693CC49E31E91520E8F
904FF4D138518DD564140AAB4C9462CC97D47608E12E15E4A069800228BAE3E6
D4040A1FB6E9C3C4AC7AA8B27CFF05C5E768115C104826CC10B9ECFD085F54CD
9DD02FBBCB47FE1A015EFC812D65DFB3BB4678F19A26D9BEC6A777904EDD6949
D621BE879C3832EE8F810591B0C92761BC20D9E6F8ED30903CBFD917CEEFED9C
4910218E0E1F254137D816B21F76617F02A6AC8A319A73F84CE822BB61C6C628
BD648CCDA44DB60DC1A297F739879F1507A6001113B11FCC641D676CD122C1B8
6FE985561EBCF74DD0AADD279F095AB2975A5DF4153D79572D2DB7F7BD8C2056
2D791FC03198CA758ECA0E24D2B48F6DD3BDAF7171A45B6434D91BF070E12C44
D08012210A5917CE236D356F1181E9D49336567AD43DCFDDF3C1DAA7F1FE10CD
F6C081F3345BB234239D342296275C663F183246F0377048C48AB0D05E92A03F
CD2BDC4556E7A1F53FF5ED7B2E617D6273562E2837A23DAE26D26652E807C045
3067C105F79A954D8AFDBAC7A28A8C8472B933865552B6B9F998FF85298CBBAC
78BBA0A17FE622D3505E555EC90AD1EFE819DD2DEB414DFD0EC3122B64707069
2E6AEB04EAD823AAA6C5FFBC6DF009416E82B5CE51D229B3BE5AFDD189B9D128
BF0081E31702AC06FD3E56E171C25804C38478DFD3C9EF826C2CABED7C4CE491
2E5431C06D2C1CEE39D5413C110EB25E120C62761759B4988BC354F399A7EA0F
ADA7995818043B72DD0EA143FBA1C9F662A35F3BEB5A529B512E85E0C64706A5
2B393C1329F91FF6E05E273B5DB89549315DD15FDAFF81DBE43CD8F459770323
F9A29B49C2FF1894F735FDBB064FB7945535F2F9C287D971BE65A9828EEDB4EB
F6AEA562347DD12AFE72E2FA971F0B7F498FA3DA42D7FE846CCCF3F2280D3158
A253F22466A7F758FCABEA391FBDB665ED969B8B374E4975E93D1552B7E094C1
6CA1ED1FFF918FE67201ADBC70726F25090D745663323F4AFD58B7F63766A85E
FA245B9004F69A3E8DB84607142C217A7D76D8A8022D9216DA7964982FB1A662
A4C97C3CEB8C6CCF629B3734013689A99E137219EB039742484F84DF747B0FF5
BF4BFECCDF86624F61E7995E2B7066704E97D15EF77FC87DBE1723429E976EF5
9576CAD14DD5B8EE3CA070B8C00E961B884164BFC2C3EDB87F3482F7BEE425B7
1D233F03F54F614BB18DA64759564E7DBC28BF461366D05F10FF84996044DA3C
5B900B6859581E7BC99280169F0935302095B6913DC2BC911C49295BDBC13358
EF03E41C7C740652547A1DBC1E7FC3E74AA11616B36DA258CB42DBA9608BFEB3
5299D77DA9370B63525B99F0A8D519F488BA37A41767EDF87245ADDCD1E94D2F
EE120C7BA60C279DF5F5BAD37D218B1C3735FB7D517C344AFEC68F301DB41BA0
CA5700D1495B99CBA96A3094AD97D837B75AC220B8429C356780330E38BA624F
7B660BD34A8C20D773BACF0AD11ABF592276F34D4827534E414B81558C55E3C8
A322030C9EBA796D4186444D0741991AEEBB537CC6BB2BD573CB45C6BFE3EA37
44BF1DD096105924368F9E6524C011B79CC93E8247D831EF285071922A2D3101
C64023ACC59352BDCCF7BDEDEFE293DC26A2AEC006838C6370FEA4ED1DA0C57E
99C99841CC560FF6D96608EFD2BDD57B9A8E717A86558021766929B21C4B184C
272D776BBB5FE7ABB591951AEB4D9B7C6524A82F08D7A67036C85DEC8943FE99
E02D544CD77E53B9581EB9A9F99AE1AF018FFB189D1DA2F6D5922452478EC39D
D17C1D4D030D7C1CEDF745B8BE29FCE6F56F93CC01814CE35C353A7EE338CEE0
B8964878C02328BD308424854AFD3AD930AF497ED86BFF93B9FED0372D8DF634
81255FB07C915411AFA55607F038FCDE2A796E981760EED747888E8FFAE33613
748B3B68A5BAFCB4F1BBB90BC96AA1876AC4F908AE0478BCEDD0897269186E9B
9BDB90A1C44D61641030BCD1A4AAEE984F3B94BE904F870B9858491583267DA9
D0F1F3E460B219665BCBBF90F7ADEA6BD244304967F3CF5F117E6E53DEA11221
65030B06F279AAF28C4BD44168AEEC453982DB9489F29797B7A08928CF9313EE
3605BDD147E79F18529348E82AAF23426BA35F356ECC8E939196C3CD9763637B
FC029EBAF000C3D3A8FFC54C5FF109FE32E6B1C408B8B539677ECF48CAAB8D3D
F601023D688D4CA975802D0ADC270D4BCECF15DF40DE7BA9966C21B5CFE205BB
11DF658AE768F2651FDAF4EB4C7239D2B31614A06578A79D1AD88E04B941F727
0988BA5EFB188CBFA895E87729004573FCCF8DED2AB6A609EB89EEC242EDFDD2
EF552359727536916792582FD9DE63E6754CB8D0650938D7D1D90A82EEFC504F
A7E04CA4256EAD3DCB103B9E31342B7A47EE9CA54D1EC662172A702A6F91DBB6
B894E45AA7E25825A8BF710439369C35D7262448F165365151D5EBB6B84F3EB9
B7D25A8E69F4E4E2C393803A98EED710D6CEC48A28BB846E86CF6D9DCF7F3A34
E6AA3CCB13CCC61FCEE7C7706FC3987BDB800DA1C4306AC740184CB367D70D8A
B7DC78803DD09EB442AEA8A8F2F13427439971B8428AFE5B15379E7C89DC1921
5FA388179DE4D224F19182BA7A3CA8C4D734EFC0B94C4A58600D51FB4D89FA79
7068AB8EEDEB5B4DF76423A7DB7ABF711BB0C7C703843BB4FDBF3C187C80FE52
EE1275B05D19E6DC95D93914B71382086A46D74E23D93A69FB240C1D824CCCD2
68420F8B91DF6CEFFB278220918E8C476DFC80BE6DFE08ECE9E00162F5406205
126E4CDCC23EB4C431FC6C1DBBF79938BA671280F0A33C46EC274A77BC37F4CF
7C183FA6844ADA6C3C2EE4E4FF707C55BB3148051B2B6F2E8AD884FC8A25BA6B
F26CF6367091BD71D7EA1069F48D987D3E76BC13E5BD9EF666E63DDB2427EA83
A5974A57C507260CAC9F0D419FB0832014E8629D27C2D02E23D2324F7348D4FA
5B5C754BFDCBAF4EA9021861F290135A92692B6433708E7811EA44E754404417
650D70EA17254DAE87A972CC94981CD4AC4AA888BF1A20B01CAED7EE23F1EDCC
8E5DA0553218A6B8C354F178C0CEB0AA22DEA142F9EDA0AE9C77356A42F9DE61
FDC26E840D305519386A04F9D4DDD7FABA7781D9D5E4E5A84B5D57F900EC91DD
E4B334421EA05999F7C53BC2ACAF87A392FAD2B5E5A56A604E8EA03484476F9D
6F645EFA35C60549632B341E305712EE8000F2D6F2D4DC7D9113FE47C8ABAF3A
7CA29BF669B44C004280055D47B5B0A3725EC5101252F708A3F3B5CFACD77D5D
E9FC4B58E6CD01B59C73A14DBFB287B7017F6AE0F6F15F19331CDA93CF358AB9
FC23F12BA3BAD27A85825DDF136C2CFFD8EA20EA384D74D11F9273358E7F80EE
2D8CDA9171BE3366206684D3DCBDCA5537ABC8C2B536D47C6EA714D9689C94CA
612BAF4375C33F9F42FF4C40D091CDDD76048FBB9B8B867BEF191661E65D79A2
49AA3D1972C296A11ADF59C4919F63C78F9B7C2FA998F5BEFF8B055C36FCB240
7ADBDBD37FE825BC3853BA73139F46781D91678E402EC73D4064328E15B8921F
38FDB6F24414B768492FEC6A122D532233D18D088E387D5D7D631CBE053CC770
27D8A3C0A06A48BCCDF5D6D6770402B4F7D0A6D704C65455EFFD4BEA1607F0B0
B5FEE06533568EFA5888EF29BDF6223F82F41B3259A86D6541C9150BDFB32C71
7297729BE47A5332D3D80C1D7A697A6B345354572894D0114F25B895935FBE69
0A6AAA4CFB18B11053314A115FA8383BAD84C3F44D158AF7969556CD7CDF2305
498C0D0D372F9225FBA4356DE1EF78EAA26824BF5FBCDD02D727021892E32742
0606D5CB281336EF2380A37A882606D35282BB6DEB6866AE147806BB43CF5C6C
35FA55C0B4BBB2612F93792757CEBEB0661827629481A2FE20B49B9E7245AE5D
2B6A0884699720F20146ECF684242C6D962C70F7F425D9D102B254A312C6E124
BB10F89BDFCE2464D64360914F500A28A6B2126EC9DB90BA60D4F0CEFF050A2D
0A52B5B411DD3E71BB572126735E724E95A1FE6CB9D8641B380C444EDAAAD0E7
9E07E8E875F2F271E06CEF9C6B306137CD190172A2ED3864249EBB98ED102B32
55C994B91C2DE6B146DEC313A1ADBB6BF93418323C479C2C0A9DF9E3E7818C63
F990E9070D3479E7DD9A727A8594C04AE9D0594B75515EA720D3FF84861AF5CF
FA05D6BBA8E738E159B2DC0C4145D889BDE466A82DB36E306769AA0E85D4BC17
130857DFF8BB965D7BBB37C0DC5B31FA12C8CE54E4A3E6E6A2A78B06763E9C2D
ADA3728C9E3E0893C478B3F7443D9A332101D6E8D60A69D7649A14AC21316C18
3F16D35B8B5BB7BD6B02982078B99CF8CC1C7997C361753C007853880666D38F
510BE2DD1F8300A22975C6DAA9B6DBA5B09A6FA444DBD6FED0942684F14B7DDE
D833E4403F50AC10395D6C8CE0BC55DB2F959BDD0BF872AD824934360373D978
E8CD0F612DBDA661B7D65177D6E50EF170E1FF1A73C2E46EC98299320F814265
2E703F4370BFB5E3419169C1A4678199F00571EFE7E7D1F7A2A5590F8AF3F625
CA0C2A1BECD6F22EAE4A9B30A152186EF35D59BB974980F8D0478935C577AACA
E1079604CF5D555A41FA4A0C8ABE2A103876AF4A02AA19B8E3FEF14FB9026D08
DBF658240148259F667D1ABB4212F0BBA1C94295A44055F0C74DDC1E9AB17155
0825EA8A69E54AEFF71681C44770EDEA27C615E62F0F1D361D536CC790C6A92D
331A6F462228EDF6E7CC7454E876C48B858634D80027DCF41B3084D2AABFC0B7
183B1B1287B51D8222A1A56CCADC1061789494C65A584CBD3C65762DB7AF347F
0642DDA30F1997653E0DDA51C90CB9815BE1F83A6F84CB56870EA2BE9D0B1D1F
3D34CEBAA0367AD81ABFAB0F671B02BA487CF6B588EBECD26F9BB7E8DE0CB528
661C25AEF923E6760935EB5E9618CBE11F8DAE3BCD34F09B4884979D611382D9
6BE1124E7ED7538635EA24E0CB5F989871CCE60042E3E8AE2DDB34FB454F1FD7
5DABFEC9AE1E158F1DEEFC669CE61D741A02E26104C2A1DFA474A1B1E08A37A4
53F973652909111D4BD00D426F21AA3CD3F011D7E206F3B881887748EA3B0E66
B1A413A807A35C81E3C3B6003F6DD194CB4618827F3E93512F79E772F5D4790E
F4F92E3F780B6126EADF2E12E547218BCD106710C6BF245202E76E99984CF577
DA06C054BD448159FA31469FAD7504D520F20576A0012383DCD03FE01172D338
6C0DDF493F875241C7D7773C99DC40C53BB0F0A68C7C49C128507F648221B16B
1D8E873523346BD5A991D00BAEE2F2A82E2D45D45FDE59C4BB5E507C9FD85B65
CC1B53B2921BC4B6837325204227AC73F2027D99026A671F83624D4D29B082C9
0843C4AB3C586AF1689FE77C7C772DDD390EF466D40B6AAF7C4247FC0D40A2C3
CD57E796482600AA5E73A63B54251EFAF569047B3FE1143CC1040F97CBD3AE80
40DCD889E170888A77473C84F15F2BCD2249D705EF92A998797BC18E64D86252
B69A28E33BCB4F4665F07AB827BB2ACBBD620C56973E51B882C13785523B2218
DF0980B9496CD8015CE08F99D3CC6FC472E5FB314CFB957757B3A3E737986204
6476ADED15087DA8D19A2C3B7260FB620B6A9533E9C9B38EF5D524E99EAD57A6
6C587F16F3B41289D4F736708280E7BC03A0FAFA64A7C5FED819BEB1AADEB1C1
C003F982B905BD7D67725C83EF7119C2C4ABACC91DF8B388B207BDEAD9C007BD
094F08F395887CE66F564582A39CB410107BBCBE4B5F3F8CF3C20A8E023AEE90
F378ED9C00BB1712A05D62932BE6D33A3FECC4F4608EFBCD74B1477B93807D36
B8C8B29B24B3EDEBB7657AA44BE494F415493E68C762C83A6D2C43F63840D038
0A0B61571C281CEEDB41658D2F362F1723BF3EC42E3A2E47C6E200706BADB590
E92109E12018C02DC886068880A1B5077C3B95CA0BC9705B3AE1BF023E0A0E47
902BFA9A6E4067C523E758A774470BD07DE4C4FBB141C1AB5878D613459B02C9
AFB0968EA773E8D88672411E83748B5C34B2FB59588DA3A69410EEEBF42BA0BE
D42D28623E295399B61D5CAC79805BFBE669F45AD5AA8A9C20E5CBD3E8CEA13D
18E12C35B9A1D4CDF40A76214A719F8C8F905F3225491379F3703DE550905815
891EB61D63CD500D6589644A770DAFD5FB061E419D3EE4FA2FACD50B5AFC75D3
256A1FC325F77987BCCBEA11228D35651699B67105E95809E22B8EB64D035396
838CC902D1CB601CDC970E3A7BD29028ED61C58260832E6C4EA037F4A4453F77
73B6C473C510CA28AB90147613F0EBC94C3EA000104374AC639A43AC6F9F7AD6
B6E558F1E9C5DC4C9888AD0D486DBA6AC4B35FEAD22394C03A72D4AAC6C42C08
5ECAC812069D1C7443607554F1F1B427F0E6CE30FA91CA3F30CC75DC5314F745
CE66BB59329A83A42A73DC9D59023D8615102A0089B28F0225AF0EC1856CC9B5
DBFD8B179B0D53AA69D3478E0CC4D688E03FDA13CE39482B68AAE971DEDCAA31
E7EC79D611B97AEC290CB83DDD47E0747C26F14BD3341D7ADDF2C4568CD5D9E5
E84C246F36A0BB9D454A35D273951F0248F3AE47589068427C176D1EF2E0375B
8F8640A75773638943DE96B8C4EAEC254AC3090A5A1A72EA11EA272C5C8B83FF
8F16ED7860E2AD1023995F1BDE6D2489C6239BA3626FA35F918EE8B16707A3BA
BBCD4897246289B24E63471D8080D64616D716AD7EF941D328DB7651ED7427DC
4F2FF6B89E35D55DC675F44688FF0A75A5C94AA0B23B5F5D92C70B77C1E94F29
2C16E732C0E1871CEF589E4AA8C9EC85D332360EC2D07EA64F4B87FDB081392F
2F46CBE9591562EE8EA03A1B8571F3E21FDC608AF3CDD6A51B56112A4D6E273F
C28CA962BAB90AEC62F1C351596257BE6F85A0B2C6694A816A7E158615829E59
EE73573363006FEB8ECAA283448C7FF5400BFA745C859192C2623460A8170F65
F4C45137F1848A3687D5BE45FEF3D084AE1B3A48DCB4DAC6C83A858307703A6F
79AC6ED05FAAC5784FE959F32B47D4836ECC48CCAE1FB7DBBB6ED76DBCB40B5F
308A758825ED631CC7897D81D8DB5E1BDC5FA5472DE3B1E303F8B56D1161CAF1
4DC202B636DB484CCA840696D723699143C3BB3C7475E21AAF22AD06FB556EA6
7B2E85B29862F343AD8B98EFC32D0A1F2ED51B7A46D69770BCA983D7B5A446BF
526A58DA4682C9F22549FE68EFFC355327A582968548D1C5648CBE6BA93CEA0D
E409FA59FE5679E65E8DFC7CD8388B363496A07862ADAA1F31D20A1C14E0B494
30B7723CD88E73A424682095BD130F460C80DA2411B1340618E31C86081C1634
E890FED9E22FDA3FA08A099BE60DBFFA3AB45CED09BD7EA1DCDFCE5759872FE9
6F2049AFE4A69DCCBF9E2726272A7F3F8AB3D56162F369FF93A3F4E91547C49A
D1852FE7BF5606F2C1DB42C069893A6C31F0A44812EB0380609943F8E1F5413B
11FC9A0751C9864D727013B6AF798D3CD7571EAE5FB3FD08D95F9EB0F889FEAA
41F3B26B7144D29454A8D2E421E2A0CCEB2AFA2FDD93834089E0C8B2983FFBCB
8EE7E0A553ED1C167611B98529389D46C775EE6F17BD7166DF1E02BF6E503703
7DF1CA63B9333E6FFEBF224C84D1A517B53B0BEA8A936F9CF329B2F4350B0A06
467F457962C3723BF6E61E3C3E10DE25AE1908F8605D84FB696C84881BBECF84
0080C51CA6FD9C78AC2A3BB7607F52A3424F1B7995A97253C8F822C11204E340
652E452C5AA2F385A84BB64B27DA576A7BD8350C2860979DE20376A9CE8E4B6C
4211CBFCF9709AA29144F3A403AF89D7A3A1B81718F3A994AA4CEAEAD1F1FB02
B3052D52F986F3270D22EFA230C261DA2FB591A3D5C55971AF6DD7177CF5F25A
AB7D45791021199BE22D89940BD35C48C11763ED8073F0AC8279680F56E6017F
F5D962F67BD7EA8531A574C42BA2F296A2166926C9D207751DE0BF309A7C0B5E
6825980CAB56D409278CCA62106CAECCB2FDA2F4ADE4F8C24106E0D76B8DEDC4
64BC4C4261AD756D26F053A2A7CDAD63A0DB6D50166C927D3D083E2F6C578D2D
90D46BBD8F7B95A7BACEF0F59D7A86D619FE049961612661F780459D9932AF48
2B5E2351E3BADBEFFC85A1B44EC231CE55AEF07E942B962DBFC96A6B7DB7CB28
515A07564A9D3C2275458700FD01CB5E99962B8E8D8B1BEB02233D61F7602829
4FCFA010ADBA06F53A700AAEA9213F7E64ABAFDAB5F42B0E4036C2DD237344E5
945428ED26E5A2583C8C7A4D020A8EEC2D80FC67A306D1643187AB11CD2BA196
6F4EA30DF566B55D4BDA83DA712843AA4227182ACF455865CA526CD0C3AF1F22
BD3E39EE904697F94F59B8AD259D2DDF433930B270C63EEEBC745D332849ECE6
6F8102383F02F7401C3481B529E3E6843F38B1FE6F1A7578AACCE5E275E11BBA
1D0821C1D790EF1FF192AF561E7AFB4C6710520C895701EC10BF04769E72A508
E242A05D015A9A32809DD51DF932DDED7A2DAC31CEBB0999EFCFD079ABA71327
FBC15077E17CB75A4D5B62954F2E65342FDE538763E4DDD7B9015E4C8A4891FB
3317DB9C1872D93F6BFF63D42DAE91FC4CD6FA81A210274671D30D947ACA6806
9C71DCB150C658EF9225428FEB2FF5261EBF78258671671BE4E51A9CA4C30B4E
6DAA86CE6F98AAE3EAB58E1F6053BD6154660CD64C63295997DD487BC7C40572
53875DAE598DECD3C4C26E19284730BAEC36E258E3188310DE7110A48839DED7
9BE381088BC7191A40B026C36FC9583A048A83F68049C707E5FC1473E7DF950D
54A68791DA15FF5999A8A0A26A1C469440C75A4BAD6949B720E8DD38E27D05E8
01B0A19AE1B5998A9FF519344A606E08F30998D4C5AABC95068BE7A9DAA9F9DF
79732FF2D971B0398468408AE8A9D786D4459F1AFCF285CD3FDDAA06862E0BFB
5C0D788E57D2FAB457DAD3CF24F25F7374441FFECBA1924D32D059448FD4B669
BC65CA0CC120213AEA97259581392B9BC171B1AE1279F582DC721E8249A33A6E
064AC1250B4C879999B04BF7CFC2FFED27563E8545D12267B73080D802BE7341
B5F4E5D10C07264C69EECF460CF82F033635EB5B3A4F7DF718E0EC1009231584
54E29255E8846AB1AB9E444B82AC000DE3D95736F69CA8A0282200D23FB0EC43
EE107184712353FBEFD7AC8A23E53D9E640BA6D2C2D5C7681ABEC649AD586E58
CB1599834A73F6A7F1957BF95A52353BFF9D34D91328DEECBA64BD825113E613
717E3D948CDC7C93B31E42C65AEF0DE3631E0FEA8C168B1F07AF698BBC601328
C575AC3C97FCC08A6E6797D9D6D4D6794945B39D248DC63672546AF3EDE43B35
792D80CE15A6BEF1CE58128B5E881F0C1E9BD75AF56BBDE24109B2B136AD0292
B6FF75C638C7E933DEC5A0694421F7E826D4D257DCDEA4C478AFB9A208FD0DFA
792028968E84E511B51A5A93B4FD48A27BCD3ABDE16A8320A3DE7CF8BE67751B
687B0D51AB87E4FA193238B26A7DC6BB321D23CCE16C49D5B5A13362817731F3
0F60B22B808E0102F0F13104AD66890B2F0BE0D9707B7DCB885D6B04DF891FC8
07DDC7F0A7853BAAC2B681D7A60153CE19AB3CE48BB89C85B9B0B26FA57A3504
92CA1038FEA46B99D05AE5ED8E3208053523F97D6883F450ABD1799F8579A036
AA6F4FB6094903AD8D38399F2F9CF07D450B0C058AA52E4C6251C38D6E5AC8BC
D2705F21C50FC01B842C00CD7A003C927B62FBFA825D2ECDE445F16A4C9642E9
8179B838E8686E86479FAD17DE3E8666A274B783740218847F0FC79D2860EE10
31DF1081E83957FE43600504259E1D1B7997302B451F10650B9C1473622C6324
425CA629600DD87A29F1884E7C4B715935E2B9D435CB9B033D64CBA4F5559692
B7327B6720BE086562C6CBB48959460E76FB49A7C535BD506B2B226033A297EA
3C8C9C8B245F49B289A9B088BD9EC3B6580F2817D63DE90FD71BE3F97BEFD291
A0DBA52EDFD3A216173C3E69F47405B8A86382BAFFE585B2474643F58C3BBB89
4CA3DA52D54D2D77E1A09B2C55DB06808BA486D91078E593A5F8193EB4A6549B
D550F5600AA8036BC6094AD5D0C723C2131C25396252EBA4C0622D2B0E8629AC
3D2BF93B07325DFD89E1E9757F438418A09605DCA1C039D918A075AC7F0DFA9A
95A07DCCF0DE54B996C728BD33342978D99464D6C8FA2C0019156FF9B33C8FDC
27D67EFC22C9DDBF49940AA06B4FDC1DA224656F15133D61C144DF45E747C966
E5224ED29CFC03F5FF651B72D3E5B70D2836DFE33E7EDD803229CB814E449D98
B39F000F922BCE8C297E4E0ADC1EFFD39B1742918B32AE929B96D9BD90607978
45C4FCF06DF5E525250725A95D15EFD0B5EC317437135C5AA68F6EB4F5FE1565
0CF4487A938A117EE85ACC8102ECD40566D52D087A2188BC928DB56231BEA405
1318283A37F917C13B4E2AAEC6CF2829C1F8AB2E1A7FDE227C2B2D8ABC623D90
6EC7632CB075B9D013C9266B223C04E45E4A30E9CB34CD780C1B9A210A65E46E
113C9B602A2B6A6673037ADCD10E8F00818EE88AD2EA98D6B7F1EE7C5CDB22DE
3DA6095E85675A81A0E8B75D1C32E17928D5893A29C8DE0FF82A43D64F468C73
A24EA2637C80EF0BA23539777EA791A503CDE266BD99CE1D2976040390CC6F13
DD92F0686CAF993FDCE0113E5C9A994CF7617897252E19A54DA73A385F9AF86E
F6E3F5211BBE23CFA17E6B479453E9207EE1F683EE4C2E93F10DBB8ABA0C945B
E4B995D5F9D95F7484B2B05FCB49861F7EA05779AC02495D18DE0B91E73A2AFD
5F8DC4CDF14C1A9D0B93E9A9F4450EAECFE4448F77D161F6228107C92BBA3269
401E18981C21F744CE7F3A67AC069D0099A5BBB4F12FD99B9C1430529B3EE149
554EB95268A1A07E6E7BCD1EE19BC386DF55429E396C9C0AF8D0AC0CE02F15E4
5F1353E6047BA9CE343DC452615EF60DDB7E70F095A1D511491BAE1FB85C1904
A00E780E2B0EFDBF5EF51C5C3F8184C0FFDF892B72098784F1E01467DE591787
3A449E4ADE299989394E987600DD4D04CC5246DA7AA16DAD7A3EAE2C53D5FF4E
8D5FDF29913F71CEA58830A18AE1C56554E9452CE71493D9F365FDD09268906E
F9FD12D949C7221F0E646CEFB649B15B905E4134FB8A0ECA85100824A14C5A57
20D709C036188AF869E8D791FE3DCFC3E1A07E4B008EB3F156C524E15C7E5DD0
1D84D9C3FDB21824068F947F8A9C95C58A97DEC9CFCD7E12B1206AAB94B430C0
AF367F909B8B374E4975E93D9FD32DFA0AE84699D18551A6BD25908C20527C35
F23B2FB06496EA462C2031D219705B73E8F285A967624AB240C4186FB5E47200
60CFFC9E9CC68C4EE6544EEE1B5F966B881C2977F80396C16FA272BC6AE0FCA6
6760484CFF4BA51454712FDB8104BEF9514520DE675D073F415271514ACFA19D
2B9D2E2CBB099C46EEA673F31E8E07AE5C862F196EBD7415B504D40353F3D80F
49365D5006829FED63CB9571B219B3830F9A490A7A695330AACB6D18A25A7846
9D984799D130B5BEC196A23123BB399318B4D2A836F88D24D6FE3899846823E6
A4AB07D283706CD71D72D330171ADA792E155E75A75348EEE15DFFDA2503C447
72003487DAAB5D9C3E5BEBCD5B2C139389EA1E172679B2EB1444E570E4FB2C31
A3AADCE73F5F0181BD8456E553AF718E0CF6AC6A28E2245FE08E8641C30244BC
43DBEEC6496DE182F8F914CFD85E713ED14AB7E9F1BFF78299D07C5C1572205B
598F5E10A403087977EF07D53BBD4DA7921C1210D2C98B7D3D11ACA0FEC3AD55
5140756C29A24A789A87ABF1698672D6AD3E0F12CECB7595C5E680E31F06B8DF
8B49F1A4AB5C77B5FFC96866641D00B0AB0281C7CD4FBD96E00784A852A32989
A63805EEEA8B14A64CFECA4BE788FBA88D839EADD20F9A893744085F176E43E1
878F89835BD324D3CDF776EAF4F2E07CC84C4B6A6EC0C35155CDA6EDA571EED8
BD7ECF7829B310429383B5497FF39971E0C7989902475E6CE9C732AAA49CE107
C713A3CCE7D5FDCB68063B65B26A95C303711943DCE9AF05FCF2841BD8E20EA6
1D28475F515B0D494B3B9353361CF3B0578398546C927D62A6E61E1F705A0403
E9A5D876942801142E6E95B9E2C710DA59618F442E4009B55F53BBA8345AADE3
0B6F236A3BCB744CEF08A998F91E8FB121DBE3B4A020C6E9A7B5EDA261865782
23C50EB478AC4131EE773248ADD641A983CA3BCD930955DFBE0DA8B9619E74AC
91FF3818954DBD2C212D2C708E9C9661587C8EA6D3EB41912C929018D4C3503C
BED9CE6D260DC546841B21C7842091EB36923F31341B9DF942E732F5332C6162
3DCBF2EB20F747EC99431D5C184CBB71284EC3CE8741D2CDAE45EE3DCB18B1DF
5F8B1351F3977813674AA6FA7B7ED42D65375AED5CE3785DD783D37A4028D961
1305AC1B94700C0BC04DD197DF85B94D1A14D2204853DD5017B2ABA6ED0144AF
AA79DDBAA9230C3B2CD654ACA8A513F352B24A37006F26BDBA4BF29F957B8682
D21CF1CCFCBAC8BEA39BF72E881F5CBA918F299A849F5ED006AA52A23114FD6A
E73B524700CCC455A521EFDAB11378FA57CAB556A4FC335351F930853B1D8F89
835127E6D5BE96DA47CE498BED3840267D7D1A70288C3CBA2FFCDF1A4368603D
69260CD366B9CBC118E355CDC5E86364FF13B34B86F0637C37F8B6FF0B0D28B0
49F33DA50B0FDF4FA8F2153C30DAEFB59A09821BD121F361A0BB39E02217B34E
09C281743C60B819EED0051D631CC75E597DBAD011C449044D44503C37149C4C
BFC016A8E8936023921EED7FC56841CFD9237A76D6C78D9BEDC7423B8BAEEAF7
8082472E90E01B9EDC153B42E554EDD8AAAE14C6FCCE8EE99064EF3CBF68D25B
0E9FA4FE677E198B66757D72D5EADBE16A9B432DC8D7FAD2ADB181B6FA6021C5
1CDEDF8642BAE68B02F45617D8511F94C19D4110E183542CA76DDBAD88E69D2D
C27FF8FC3190D55919924CD89FF87DFBC54BE35E31946286F802ACD2F58D4E5A
47427C40C3D66CA13092F3490B1845EF88BDB22224DB751F436DA24A2EB3541F
D4CF62460B4C4EDE542BF4A17E92DFB106AEFF870B0726827D47021FFCD2AAEC
351545AF6706F8498F8B7FA86B35AB339ABB48DD4EBC17DC91AF265022039C88
E07AD466A721B175FBA0FD900892D103769FE7C545D49E68B74B883E91EDF506
914F349B72E664AC8C8EA9350A9FD4D4C0CCC3859BDB788C097170F5F25AAB7D
457910DD7D3FA31002F1F7328B2F81B82B51CD473DCA54AB20CEFABF0A301EC9
F7A07D26963A85F7F664FB2356A2D379E5B23B6C460CD8666B261434B56B8EE3
C13B1EEF396F59FB007CA71808FD4DF63FBC668B9E2B7DEA0E9F45D87E787DC0
ECE57CB7B2AF041B8FA750D06B5EFD12558BFDBC199C00D72DE760A98868ACB4
B92759259C38B1E4AD205C8550B899571D812F32AE4B15D172D0B30128964875
3DC1E9250F5FC77A1298A1613E32928777B1D5EB522C258B318E8D3296CFD607
B785465647616B06B01D0E8104D0C499ABAAEE58B21F857AD19A53F6AE69D489
4860169E3FB9F6B253F056A901776AA47D8A986FD1AEC3308C6D2C2B01D38A24
77527EFD046C89C88E43DE71E368DF1D347741A716BF3623DD3501319E07A7DD
BDD3F7D15135701F576BCB5267F9DF880ED342A3D70C7DDABE98B213EAA0F4BB
F3D66D9374833A6376605F47286CAABBB2887B24C190A1858267B5D6CE63E342
3C73594181BB8AD7FDB639F4FEF44A4923ECE3552643210EF9E12BF80A29E52B
5664DA5AB9BA57F6168EB379F4D7020CC7BD726141A24E406CAAA040B84F1166
3D6250C3F8846E1D5FB2E72455B486F88206728847B7F8FC0CF1487664B9D832
159F359CFACF746967E395779307BCF2B6EF38EA58B9B121CAD10AA544A7FE14
2F7FC8531C390681485357AD848E0A39124E82DB5DEDF0EE3BE8D73472BE05A9
58F30DA71CA3A5E50C330CE3A1F0FC0B9E3704A4B780BB2B531C444D75CE9A4C
5CCC89B4827BB1B0548376E1F25A60EA3AF2BA7C53F96C33A5D5D03F34A59E89
A3EAB09F3A91CD89E22793D92FAF294B72EF9BB34EC21FF050016A1D804982B8
3997E1667A4E8C6891730DE346EBD252F322DF0BBEAA28E89448D1B6864411F1
3AD333C3163AF812A45AC9A490C5769C12FFF86C12ECCDA6A7FA4795B458B9A5
C81E996AF366B25092AD5495582B3F1A410CB647362E039AA71F3CB294FA440F
C9807B33DF176C85A4612C37B3AC8E62BA4676860D0FC3FF8A8801E7EC2E30F5
D864BB07DCD3D8EC564103542F4B1464E2EAA7C8A7F30457EDC1F9C9D970BDF5
DD88349D475E194E632FAE8A1FBE0E749BBCAD6110AFA7A68A0B39EED7C3C976
D8343FA381ADFD66A53CF866A410609286A46B6F34BDBC9F57937F128B1672F9
2DBE6C5700AA20610401C8EC0CC9FE150645544B3BBBF70EDF576D4FDC1DDE7C
92150A4C8903D3F128148FBEF1C470E81BB487AE816C771D616C82180C9EB56D
E6714EBD3EC0E343BB164499612322E209205394816BB72D87EE3B34B4115DD4
B34D3D6BC021E852C3A8F8B2ABF8BFD2B4A0B422CA67D992CC989F6F9D2BAD3C
05BC5A5873890DBC261109E6BFE3D0246A98F9F47E7C9D5FA16C05D4111D389D
9BCCCFA334EB04721325740FEEDAE5EB82EC45B768E9FACC930A1BC6F1680D94
D42801F5468F31A6071381F02370BACE1787F0948B2034519C0A4C08DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D0D6058151285328
89B5CD42F763105DCAF788648D74B078ED080E3573D61FA865EBB3E287937147
C9BE9926DAAAE76BD43CBF626B54567266EA2F4411EAF07AAB49611D7EBD8CBD
F1F5449C2169315824D0A6BB0AD8D5662A85EE619178100F6F37AFB159DC1265
4EF3FA2D2446A2E1F947B15B3081FED4A12C27B85CC6A3E545A312C95C6F2627
0159823B33BA57612F379BEDAE5DE173B15C5200882F03A1FE6FA61A1B3F4468
7041F37ADD6989E85FCA21B588ECBC54F126834654AD20853F11A6AB840852C6
9B0516458463E8C58580DA921CC84DCA9C4DE27B681970483A2A2E8BE06358E0
BBD553D9454EA8BE0A8587039B95A5A344F9EDCDECD6B5F6907657BCB470A304
2A3655D5DDFA9138E7C6E4B118CC665F4B861D3766A2414007C963C65C70BCBA
DAB10AE54A0DD44C28DC4763D04D61EDBD52292E6028414C7FCAEA0A7E62E4DF
D5645313CBAE9A863ADF8127F1FC35DB9CD34EBC684818AB259FFC315839277E
B107BBD3E6EB771574CC29C1415B4811FCBCC2EA6AD5BE04886842418EA1872B
C169F92A89067878C5ECA2BE88D881CC03929299117F82FE4F8D747109F2BC54
9621EA8FAEEAB5E745E5CAF9DD3087C4764D41F0F503DDF0F46C7CA67023CE05
2E3296ADB222FE2151E375731F47B6018CF32DB1F7AC0478F0A9D13C11D38542
D397B3D34B2D59D4B2A379AE1347C5A1FE39542C99525549B30ADA383485030A
EE93AFBABB827D996E563EC2DDAE9AE9D984422D428200823D674B1893F03384
89663E033545AFBF576377A48059E6DECA5D00BA874DF5039207DA39BA7C9692
6AA7769E7702305CEF74EC07C03AC9B7D8328977A2F5D9D63813A994A1F9E8FD
54E8D967080E1EA0527DFB9564EBAFB4292516657B11080A1EE01CF75C43A202
003126983D7E5049DB20BF5BB1E2D14E3985D2D448742631A0DD067F416CBD96
D8705D5108615DE881F53F51C9B0807122846CB7C7A03548AA0505F67A6EAB2D
85E1224B6CA124989F106D85DEA26E8593730FA3F6156B914FC6D2FAC6B2A4B0
C95CDBA6575225199CC9AD11D7A028153A308601BB35995950CB00A5EC95FC4A
76220272D548D05150B71E8AF7A536FC4BED6E617CBB622ED0214DFA74BC5A0B
DCBD31F6E3649665250357A0252C62CC697A58D1CC858BC7B4D084DC71D3583A
7D01579D8C6A3302F1C567D9B68AC3AB05ECA2C79243E5A372C003AF6BF7798E
991EEF33AE15F8406C71B2405522123900F1EACF0056E01B34DCB084771199CB
1637834749038663FE94C578022F5546BDF7C38D8480A71A9FCF98F4F9501DCF
69FCD876785896921AE83116CA0E4E86E810471D7AA69FE080F894AED19CFDF4
30F8365C10C7E6F5710FBA343D16CF879BE60F2504668290F9E346C3888787F1
714CC0D532D792DB7197A9152E517EF0F65FC96F998CBF98917D8455447B275C
F0E38D7D0FCCB303A6AD3DDFF2F57C704FD3FACB3938D4F6120313BE0789A496
A7ED316DD9911ADB4C844D1A9F70EE29B069A97BDE7AF2209A9F760CD49319D5
E8909C07B0E83CB291B89B4852A379E83155975B26ACED7AB3A5A5FD566B6AA2
2FC3F3C1BA4CB130DB2E09BB65AAE476588E9DD807AE2DECA9ECDE88EE04FE63
6A43B6B361AAD79CC1961DD7845571C082FE435A273EB95A6F0C1CACD44D331C
8EDDEDB64E0E969F9A0743F17CFCF60793A0ECE5F673573D1710094AA106AAD8
76D5DAFAD2787113209C4CA3025BDFEA36924D015ADC134E03735263CA0862E5
C3349BD04ABDE47EFEC71E4973F629B392CE3475109E22C8F5EE8F6219D0882D
D96CFAB8653D43BE4C4CCC091E2DF6CC1F697487C3F64E52F280D21ACEAE6F4E
4B0F75DBD5727BFCAAD955DAEF48CAE860C4E1AC06A1EF4671DF96352105B505
34C875CE71554DE156E4428BA4CA624E544E355D312E8E0B4078AC809300807C
FE4BF7CAB7DCEF043883C3FE759DC1E6400EDEE1D79081462E370281555F3AD2
48B6017EE32386CC8966A397B19C6FF7CE387A2E8829F5187A4CC69764EA4240
47A06CE47A58E7BBC90A2690ADCA3C15438CE5BB275660A7BB747DB0E684B3B6
C374B0615F4E274A69159AE7D5CA410C25925E58EB63AB2045E56C4B20C4A532
0055F8EBA7FEB04888664F82675A3DD3ED0601E5F8D083AF733BA9588F026B55
09AA74D73D0A15F0EDCBC64BA8F67F4884325D566003B04D0603504C04951290
F43BA455DEF0BB50E3B3B1E7A6CE89EA7C92E0B88795B2385C53E32FBF4AC07B
2FFC54A8D5856E38EB16AF71A889B01345A5A18DE65034D0CCEBE5DEAB492C8A
BCE8B5D84A7D2EB840E1818F6F1CA2879F473F5D5D911F077A97BC333DBFDF76
A4A160238F0D17BC1CE8BA67D0B660E9289A4285EAAF493594567C6A48A04DF4
C42D75D661F33430B0CF56859103CB5CEC8B0B46403C4312EA23A04F6D251C3D
36F1FCA9535232F65C3A4A93AF550285DA91183C4F754C307CCE056DC8D3F203
DD3DA40F4C615A21E140A5152FAD0A33A0B5612A3C0D8598B7310A3DD57B13D3
C78EB58CF7FEF83DB7CA6C26130180B89DC4F46FF9216F1C43F4414B7C12B560
BDC64D85B6442F844F2FD7D0B9789D902A8634AC0E2670D2A7A9362E8EDD1141
45042751E6A5DAFD97118BE8C641D6375466FA0272B67393DCBD86FE4CD039BB
4326644525D13AB2DB1F0E6897E6F78FF6635F17CB0308E72578C5A83FBA022C
CA318172363B1B4AEFDFEF230D938523C3B0B27E60FE31D24EF556FCFD638D71
FAECF76DC3A9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA9001AA2D26976D77A
35534B6390EDC2DCCDFC038A7C57FCD85C12CD6D836AABD89D461F44F96A1C9F
166E156FE402494A7E49825D19519C5EB55715F8DAE292731C73724F626D7395
916C421D27476EB0281CFBC8EC5AA896207DECB17039FF938277AE848F242487
1BB26E5F9963F482C99AB4835FAB0C9F2051C82B75D8E0E238527088399BEE70
5848382A85282F79E181EFF14733E3B857A5E8CB3EB244147EA1144A970FD8B1
2EDD4ACF4A677479505EF1C4843DBB1521E14C3D3DD17958D2E8D1710B7ACA70
BC4AC2C007C9D8FC83BCB2EA05A9C4D09B9A6A98301F89B3F0D55900D5F58F37
B8866DE8F3052007F9104B5857BA3BF562260792EC1857BCC050B841774BC20A
AEBBFB88CB67DF1D266655E2FF6B267ACD8E1FD4B60842192A1D7FA918D72051
DB6CFBA44520B5B5689C8754112BD75C775F01E89CE0D1E726D460DE413EFEA6
69B7963496A4D54EFC5B7A19E38845B4F8AD0A5E070C0CF71E07E00316A1B182
FA223CDD15B8B185AA9331599848EBF66FBAE371392DD016422191B4A240DCFB
EDD711F21B6DCFE6A6C49C9680E6F6C2250FBD1514407AB9BBF19DC526FBF090
CB730CC0BE03329FB9B40EF6BFBAF6C01409650E70010C2E00EF49B371BB12C5
C949E6A131F19A7BC912EA7DAC8E354F1CEA9C76D10F54F992644F6E400363FB
537DB0DA670E7BD287A94CF9CC4B73B84544FE9022F4CE705EA5540C872C5360
30F3898EAB507680ACA37850B30D1BBCDD128AC48359893723B4608423FE2327
8F98D87173A9E686234B6E8B6A41A705FF94058F2B8CA0CF190BB8B893C1C1CF
3FBFF392ECF484346338B9DB6F83FE557134C14144A554C6246123D60D393417
537F7F723DB71C80C8EBF1D239416C879A22B84E27F6AE19EE8D7572AA6ABD40
8BD9C0E8653A852DC2BECE3E39354BABBC6606B1DFDF91D076228D1482703CAC
B4B0345276798F1A8805EC0D382BAA2D7CCCA1681B5C9F7A05F120B9638E9DC9
E65F758F0FC4FD7907CC79918CA55C5DD4A52A060D1725C26E6940371EB4FA03
3BB61842EF56F134AB25DCAD2BD08AE61E233FE6FA7353FD5C13854D497B8404
8CC315BC2F26277819E4BB3A78299D3F119E9C9E53EEECEBEC46819FA3CDFD93
1CCC6900B258DECDC3E77C89E0D522E4E7B7DB21E963318BECF5C7F574AF99DF
6CF367725263C55D55195909B820B4965C880D6A11F2D202FBE06E01A5D3CF9F
5F9F1FFEBC013B691CD11A3A79B79F7E2EA0AF63D45D80F3C1959379D88540FA
56F817D5C1B557C9C11D2D1E7D8E9AF13A0E2A8890F44A1C629C360FA9C8D255
88F16892232EBF300786B6BB9781640696B74F41C7D5E32C525FAF2F1E7AD545
C10EC243BAE06197E7A600CCB5DE4956F624F59E1B5E8D34EB46F04E8ABC5F4D
367639B4216AC03B263BE77B846C9BEE668BC55CB057A516F7CE9C3780EA982E
862434D6CB5D80F69E0010B97E1A371ECA95C2ECAA50C7E8898926E201C9E847
D513189D68F0EAE6D3A6D529A9EE05742C16C60A4341B505BB4602DDC56B1C2E
71270D1A32A27E91FA346AE9C4573DE9A207101BD322728CD50C61C96344FCC4
4005ABF73738C40C1D18D9E6895B23E8DC250FEA26AAA18C12EBEB518B524263
D38EAD1C8DAB1C09D22FBC1FA4B08158BADEC7D287299429AB0C2D7D25073BF5
2A79FE5CFEBD81172C3E68D485248B0462D2BE053128E0AA631D4E99EE0680E1
FC1892406507E32195B8310BD109A1ACD027A29847D9E2936574D0A7C1C28E6E
823E0E6CD2F435AA4F6E1226A5379A02F8DD0536E7C70D3AC58AB2DFA3EDD496
C18C8974EC993DBAAE9DE070E73A17613406C711B92AEF8134F99F56E3F43D33
AC52A68BC65D4942B5B5187F55648DEB144EAF703464B9F74DBA7B6B88A28E3C
976E64C24E8B29D4C32D541D3617439C0069B55CCBE8D1F0523ECFF6067D3E08
ED8B15ECE9CD36F3F09C6AB00D15AF58CE22E995B671F7DA60566CAC0B6A193D
CF574938B25FAA1E98A7649FF8A1F85F2B8203BBE8C624A45B3C8D80983A6556
1BCEE5E31CFB6F594D326D48E679190A0FAE0EB69BBFCFB2F25B4DB3DD55D056
68578E76736FB859EA2498E5F7EF110A4B6E7DC0D313CEAE3B7066DCDC196EBD
A76D65B9ACA692EB09DFB0B956B404C74657B72A77E33DE7D15140E7C44F304C
141BD3E05A85920BD506F7D938944459E568C7465E6DCD933AFC7C4F37904B6F
5DFC712A70517CC04E27182EBC4DAFD078E2C58CAF3E801A75759472D69BC627
43F758B67B1B1C6FDF84C9B2E9E9B29C8AF0A7F4CFBA1357D8E49F885C8A0FEF
4C3CADC2E14BCF02089B5BCDC5BD2F44C8D37EA22C30ECDD19AEEA9F87DD1D4C
EEE74CF6C7345A1D58CBC3962BB5598C1936CACACA5E2D35E33B794FD84C274A
4D9C2643EBEC13750A8513DF8F0F44E93375553EA81965C83F6CA655BBD092C1
9ED992688C38D5AB822DB77434BDC79A29F57BA4530986B40B008837ED8F6D3B
B216C0B98282DE2E9070DEA5E5965AA0C670D0E715ED9332FBB0EA77B5826903
A8F7ED93C3C2B9474FC4A738C02F82B5DDF16634BA0704A37BE9179EDA653BCA
0422BFE9B18DE0976D5F3C82542C5E344F803547170067B51D0458F4EB2C265B
E63A2A2FC874A864FDE98BF0F62DE28566A29D3332B13D2D991742FAB22D66F5
1581C9885CAA0571FEB10088304351392814CC0E6159622499F26C0930DC6BC4
8AB4BF001752E0793D5F65D8D54F988704205136F378DCBC7DA169D8A9CD4C32
816A189FC1FBF3E7BA62FA17E51E85E41E6A2B41331C56457D7B64805CDF85AF
8D27625CBFF10A27E2B97314A9BFED3E1145BF1286FAF5229ADABAFBD771DC29
2FCDA019EC65DFBCE76AEE4B61FDC0A7BF5C5AD1A6C343D367E8EA1C017E57FF
8A3A18FC918C2004F0D54E717F3EBE75C50C5F7E311B1DFFB04888664F82675A
3DD3ED0601E5F8D083AF733AFA2D81815B465D832CF24BB166B5BB5360EBD626
3DF0D4879FC4052DB8D75FD0F744A1470A7A67AA5644EAF870E3741C8EFD42A1
792CE5A2B6C325C39CD88E4B559A62FDC9E366920714DCA45294D21EF1B3082D
1590514A6F2CA90CB01EF65416294CAF223673F451FC750AAE004274DFD709C0
36188AF869E8D791FE3DCFC3E1A07E4B01B147323A08AC7AD4E9217EAF912C86
CB6CD5BBDF85F5DA54FF066474763370EECC9E1E60195986EB4C4BCA0C99EB54
F16863203613AAAD505CCA785EE521B5D5389E4562D7C134995A4B13980A32F5
8BBF3BF5FAA2C6D1A11450F2589FE68B29179A3E97A3F0B35A3FE8DF5B24D222
DACF326AD2F36FD2EB62CF4C2B70796A23BE1945262F0964034C5D6F1B058909
F25BC43E76DA0DD6A2522D95A93B5A3EC2D3098ED38FC4CBC6BE50F14FFF4450
575A3280E59E14C1F64C508C3C81BC1871607DB026748017563E78A763B6F500
FD4C32473D9875FCC11919652DCD2FDC63940F7AF6A1D65E11DDA40CA0A49297
82F10EA70B9985F482C9C7F3EAAB68393918581E5D402BD942BFA6268AC96F70
91245F034BD65542DF47BC7BBAD48D9CFF89405ABE997772CEC245586F1B71D0
BF879D1790AAD953121BAA5F9D9225C407C60A015F642EA2054877D55A3CF125
4822B3585BBE6B544DEBC72AC06DBB2322A527644DDA7044E0146ACC2771C893
B96FE305B9A803B92F2C03FE2C63B1708B7866DD9E8FD9C6F90676BFAD731273
DC120969CAAF54CD5F89FD89D153C58F0D60B7C7A88F06897BD5269E48D840AF
44B95165076E6C2877FB06BD4AFA8323B32617FE09DDABB4DA5C9565A5FD2FEC
BAECD4A9FBA8B9100A31AD1DF7CE7CEDF45D8D70BD0AB07EED26EC0AFF52F658
087D5C67D702AEBF0B8E233322C2305190E68E3A3DF08794284CE3F6FA6E71C1
038BA923049847881947ECEBAE94FA366C4D482154A4FD5D17FB9397AC08625C
202E9BB2A81577A0BA6A227E0AF93906F211147BA146D78C62B62FBEA3A04583
F3C12A22574C85B1EF68F2EAA7AF1A87A4C89E096B415A12C7E525B02401C79F
F0F48D1832E838472A8F1A94A9182530378F895969C0737C423361DBA528C6A3
F1C2641185141FEF198165415498597436449EE0F9445B4C80628A3784CCB5E4
C8DFEC0195E99B6E47CBE1D39D1688196C27BCFFAA6DA004A90F53E78B51B429
4E3DCE916DF497B02CF8B8A7D71C1B106C8104BC8DB6AA0E3A664DF8192C6DB1
BFB84FA980E06FE4DB4778ED1E2057402F957146CDF942C8ECAE8311822ACD70
AE170C427D588B3C727CC029FB2DA7C9803DD7A0DD88F0C6F1CD390F5DB9B7E5
7355FA9CE1F786D72DEBEB61EB4738BCA0E82AAC5799D70C303D946C14110036
7968CFBC2DCF90282DE063D6A136ACD1C9780AA0F25FA907699A94684125A385
A12B9F570C0B57ED78FE33164934EAB70ED3852DB081BFC8732337440073CC4C
3320653402A526E679936C6955650F7B5550CF4F6DA9B7EECD4C294E2AFDD9CF
D89B56B440CE91F39076EE06BFD3C04FF933CE48AE61ED5D26EB6F64A790E8A8
404E0245B8A16885E34E0B842662DDCF227DB52D3E7748E7BC0B19A3C64DB376
D4861E856FC2C787F36A6CFD7131512ED31831DF0AE286731903900EF1E0A4AA
9EEED46E8871BD8FCABAABE7D709200DE92FEE4AC806958EFC69D561830D33B6
3DFA6C31BFB47FF40B274BC5F0BDD4CCB8B628665E60DA667C3008DCCE54EDE8
DF91058E7AB0598BF3F458A9D0B5764CAB113D930FF3AE191ADFF9F5DB0FF747
93F3C5263756C50B6070FD821ADA931C653006BF67E0D0918F99342104B33F87
9A2C7FFF041A1EEFD2F26607BE82827500CCB8AFBD556FE10E5EE241DCC37771
31865BE761841AF5E465E198E7912CD3F2EAB2010152363BF9CE7D96355721BB
E0A349DD1962C77742A8C011C9628BED9C7AD8647A122940261A450E360B5B7C
5B6AC9F9EEB11ECE0553843086ECDAD8A1324574CAD1FD05A37844799928B4DA
778229C1DE9A67257E51FE20B5D01494A8FD21A104D906B571862063E0D6B570
6557B831934ABE6D113D7FCC36B2790BBF11EBD9FB9C5A32E9E1009D6DE2FADC
06F3CF99075D4A943EA52291AD5033D0ED550DA2D59EFC52B124B6087ABEF92B
9920385876CE72C3732A3BBDF6B26492C1D25BFD727E02EED36C30AA15C66D52
EE8587B96F60A1E8B82FFEAEBA9DF82902319E82FD9003180E91269B28E5BB64
26A755DD92B1F44E2BB54EDCE5D6E365450F5CD528BDCB140E3F6B099F1C21F7
44CE7F3A67AC069D0099A5BBB4F12FD99C4F968EECDF403BCD3BC892094A5128
E251260C8CEE4E37A25528AB3C9A630B8EA584A415A12FD2CDE2A2B3F9091E63
0615DF446C732E191427FC63A7A675AE7AAC04F82FAB471FA444491570EBF12F
70F2863F9CBC2CE3E7D773396928F948E31B89CEA0D44B1E9FD3E9E8CFBC339A
E85BFD704003D6109121880DA9C89FECEC969068C54983EC1FB27501361CDAFC
3655A9221EECD425FF9CDE86D8C37EB446653B202C55B946A5446D29D3D220FA
4767E819E733A2A2B3C97F15CB4FEC940C45FCD7F44ACC0D996BB404CAAB9038
A56948BE52FD491822DDC1FD00EA0DF97B90CBCAEB4AB5767307DC68AF2217C2
CAECE3E9A4E7A942DBE072F2BD0DCF8346DE27FA98D21C0F6CC81B7282960E7D
6EB6EEA0CA9E1F040A9D7D3D73DE398DDB64D3FBEC28C5B806FB2636FDA3EF3B
E4F13A201C7D5D00E2F29D25BC8614D6C29F336C5E9F60656D2F79BC305C72B3
1AB0E0721BF6B14C2F3295817E73A240269FE9B62954843A34841FBFEB762EE0
97D8190E80B9F1461C15E83D18817B3CAD46646300ABC90A568A8D9E0878FEFB
839DEAEA332CA6D50B5A6E3B5AE6BCCD2299E892F96749308B73EBF4DC5A06AD
DE6F83BFB368388BF2DCE9A61F56E5B463649E058E104A8537D3D81053D9D8D3
85A312356BEB75F128A73B8F4371E90FA42E152940689AF131C6A1AFFC9A0D7F
F6D0C3F6913518950F8F7591BC6117B664EA1BE6377A978C1D21CD482B38FB22
FEEF32EA52BFB61600DB1851162D33A19AD5F25941F72F8299D4DCA975DC5053
D8E9AFB6600B7E2D72C3661E53DC377F945275CB4A4692393F561AC3395F6D9B
8AE4F805367F970B0E4652883F787218F676D60FD5560B7E87AF754914624FAA
4BF2B5FCA3448D360B18D5B8F984E1758822EA2977843CB580B53713B529C493
8DFC2630329B41D6556716048DEB6A82E53214F9FE2C263C8297C9E4EF1E184E
8C207262119E30EB552CC0D47EE4E0FF266F35E74C0043F6C8C98511EC1E2A09
B57EF80A06360EF0D88095025D7A154E7FAA68EBE49DBFFEFFF161DDEC102021
4029548ECB03F2BD47F24840F88FE0C180641E8C2B608D98A273ABF96524385F
03823CEA509B6512F0FA82155AE1D55E91A79F9E1AFDCEC4DCE8A244AC1D2C3E
28B6F4DAFE97712E8EA0BF223323C1AB094D307B9A074DA1502ED05F04969D83
194164C90A977E23E338A655247C509A950BD2C3ACCFCBCF71FADDB962DEAA10
5FCD48375C11A3207B5A381FF8E1C165E0CD07512ECB44D71092A3CFC7C91EA6
FD21F1AADFF040ECAE636315CE9D47B1A020296D23FD0A59D6AD28E52E807CDE
B23ECBA603CE654F0B4CB297E3AA3E9EF096EF353EF05A00A57078A6C9289FBF
AB908E868942C11A52B20EC609BE0B28114E5B0AA42BB0F38F2251827A45C0C2
B58E23AA46BF02AF43AB380F539FC38FDE31F2ABD72F6C2E3794AF5BC45F5818
41847BC67F9DEB35111F379D91E225D0AED56107BD6F4565A426421AB1F43F6E
E0C0AE9EA08BF104B7B56C1467D1A59C6C9E2844A8E389AE03B1AA7198D3CD54
4181F04FEB26263F9CB022B80700CD27DD1FDF56247DD3F1CE4AAF3A3C3E59B2
D16506C17327EE8310F8FC87A29AD6D75C4863DCEAD5EA7C8DE7711D11201CC4
23CC64CD04FB869B9C1FDB4F47DA0E38FA9E6A3552760C1998BB54FE1DE1ECB5
1495B569493B69F76D911C8B31B07E074F8F00701775D335FEB764FFCC11C2BF
0B27F6E7217D171A060FB78883EE20ABCB9F767E309ABE6CA45067EFC6923A5F
CE039A9B9DF36567F1BAD110A8BAF3885629F8DDBC3D3B09C57DEA2DB0A1B681
F0C590D7FB9E51E09C85C5BCDE30D15CD9AD4027EFDDEE6388D3D2CC767E174F
EA218DA572DD35C4E2C5C106E057E46504420A1DAE47B665759F61E74DA8AF54
D1EDA3873EDE08DE19E5AAC13E0F71FFF867E61548FFEBB98A14EE818F6A5DEB
BBB9CDB5E5BAD4032D90BB1A6B8B3A8BC08DDE61E2BAD77991BE397A5E9236A7
6637C98BE24262CB61D56F4EA0D890CD0EB032CA1C91CE4FFD2C25474959F839
2C053B8DE7C0D39A5E212B56441946BEFA1F2C1A4B4AD1BA890F6259E5E30590
D0BB12E14D12272673DF6C0D125AA93BC8576177DB9175EF7E3D9A1C7A80F2C0
1FE39E29669984E73AB5AA3678F44E0180029D7BF1A8CE126EE35F3BE3CF0255
C84B2579210CEE8E3118CCA8D54CE4BC3405DA21BFFE00968CF536FA6572D50B
1A4AA031805DC044A38FE53A26ECB58FAFEB2CDF7033E7F11AD0E9D83A9B2F6A
A42E15850EFC8836A5EF4AABC6130AC5D19A2309F1C7990A74475E17469EF536
521BA01D30C5D94638AA290E185AF3EC0D980817750F68B89B1DA0C2216DC747
46F7224F289DC33B13FECAED39B92395F64C482049435B525F265179BE321E5C
B431C0BB2A9B4B4DE3E9651856EA0246914D3E20818CA655634539A1839879C0
002992549CFE13CA8F28C329D4AD6B24F646981C2F795B304875B56DC0565A27
8E720CF622C6946FBD0AB46EC7ED8850FD869900A1B4753C7B16B3BC28C5AA97
749C775B8AB30C0EEDDB8FCBCAB4EAE9816640920E15A3B567B3881E32CE9EEF
3B7C69248B30E917D9B471D2C33F0666EDEA5B3A0E545D0B1CBC835CB72209EE
DDC3986FFE2911FB3E6F41BF49D9D9D49B9CB9420C5B05815CC939BF2D7E8C9D
C8158DECDD751F8239177DD54E66F4449E2464723385483CDC44DF88E220F557
930EDDF22F12BCD2A5FA5AF9C1FFA763EAA4D6E81222A970A766450957282047
4294548693212CE3AF84E16B1612F2441BA1682F59C6967C702F133438E3E135
0689FE027355BFB38C93EB74CCE1117398B23FFFBBA6C9CBB2D2248204893CB0
520C11025692E49078DF87FCD457D7B5E195A469A25FD9697162AB79193DE4D8
6ED0144D9BC80EFF68437D1E4B515EC37310804965CBA52C31792D1CE2FE8F82
313658094FCE456C08DCFCDFBC466C1FE7335BB820A38963AF1094C893A09518
CAFD581FA7A01A88B10C9E2763BD0D211901E8BD80F007F551D30CD602754C1E
86BBBF0D3C8CECCBED9BC21854B204690A1BC0942856DA4E561F01EC1B65624C
D3C8D2C2D0AA92B7B47B97B5AC01A09CA04C4AB69D78945CE384E52CCB04503B
0E698F0921CA64F7138A7B8AF0A247DE5BF5368D095604E097B154D5C26C51F7
0F30E7F138E98EFDB860849CA728380FC7668DE35AAC8255A438E46A8BCC99B8
29CF591829A5ADB1523C7E49307CE1D768C2BC681C136DDBD1BD634A96BEF9A7
F2516F8E2CF47FD648F027AD8B393A807766E6C5F2065B21DB8710A6D8EE357B
C4BC8E24DF850EB36DCBF636038D9DBAB399BB9ACB43CD7B120AFC7DCB8E0688
6FE1FD7859DBF6BFA781669DEB24E6A07C16E7139FB9238E9FA3E513859ED500
6D1205F02C581A6E3810EC46D79412EBACFC67300846091136CC2DD1F24C3F39
16F945FCC076717EF2836A0C024176B1F9A22C014898DFC947888B49F2965D6A
C9C1B17CA3D7EFD49BAC16E2F6896603072ADB51602698F8B7586E1E19878CF4
C775F021A26E9FD3A7891B15492679361DD060B3C6650C2BEBA9D96B37F0A2F1
23476493BE57F0049C0E2C55BC51967DF3EF6C3429314CA3F0B7FC127DF3F332
2FA0BB207D4CAEE4F9CF995CC8B1F097EACDEA779E7E55D7540CCD796CD45FC7
5E60097A17D84C55048CDEF7D0DCA976BEE5D8C3AAD8A11C519C723DF7763F2B
E55C1FDEEA35AAFC908132A9E35845F2C8DFCA4DB2D1DD6036DEE36B990182A2
D7ED84AC125945B02F5E350BA327DF3F4F721BB71496714418A24CDA71A04FA8
7F2900DF87CA692EEB2A093F6497E798B8B0657E7B291E803D14A03B5E6E7800
4381CD4DCD36E455A5C6092E635698C71837C3F07D522D569454AA688A772A75
CE7E8C95947E3EF71992236E66203BFF0E027812ABF87887F6059609CFA972A0
6FB82170EFE3FC7590E34BCE895EDA4B4A28A5A80BCCC4F829A829BC7590BBAC
92DA4422F7AFD02A41C3144FA548D8C6C3F90411B5C1DF4EC3E5A01EA773ACEA
2239E1FBAB369F46704786EC3B9279320D9EC04649659345F07CB828CCD9AEE5
E1745ED414DE9B7B571CDF8BF876D050DF26485DD020114090E2D39F9B2E15A4
29502F6B1DEB7FCD05662D9807CC48EC8B8DE422437763A999A6055F052CEC01
B7D3995006BA32EAC62AE23656244BDC870154E3B3662ECC0B4A6F045E2BE7A4
90DF6CBA3A1658562C398C446592D91D9DF585F282C59E242C9217591C458C08
2E8460442F0E81212E8F34261C5E1D97FFE95C6DA4E34DBC9FD4CC379382D186
A070FE2973D2D63E53150D2E9D6E4CEDAC5BC8252CB4E0BEE483973218E0785F
8140DBCDCD485AD0602878806DFAF198697E21F7AD3CF27B67E4A5F68EC20052
F10EB633B08311E2A1D767BF15F4CFDEBB0DC4BDC2E8B1BCAF1D4C60FC85F012
38378BEB1CC52107D0DCEF3C5B2640F94C46C9EA4CCBA23DCA34835B644D0288
FE3D95E90063E268596863B785AC4435A14474508FC20463A08CD0951B4D81C0
22850B97F5016DEE191E971C05C4ABF34189E577E11E6A1F1A5A7DA810D04A12
F8C4B27C5C38BD632DA814D84D969B2AA01A9B83E82F1BED7F32F9EF2DBC33A8
40F1174BB23054ED01BE10437CEED4242B5BAA7E6E990F7BF552E25EFA727493
8E55FBBF174FAAC6A5697C2BC103BE8BD30286E0A8B3E4DFFB407A6BB57A9DB1
582AE25E8B0A438EC4F62B072F3754C823DE6916C876CF39B2F78D3B3E325442
BBB00F4AF70683E75468F6F53FAFB414281BFD87F6DA1CC88D070DB932542C16
A50DDE439E6AF5D3AD6F6C49EF101F6C1AFD800591B0E715EF03BEEDF970038D
4B920FEED8226BF57C4A24E60A238CCEF7E58775A306581592E8FD924CB07EBD
21C7BF9A9CB30A3DA37B18363AB001862080FF5AAE1A7EB8DB70BF5CFC1E6182
3F17AD24A1D8F5AF119A83BA96E2A13275669663248B5F6247AC367FD5AFF527
811708A8132C4B13E7A8462FFA72943DFCA791480C6725604CE60CD001268A7E
62431C909FBB2BAD92031D1310F61CE623D3C871BC2781029DF1DD7FB84B8CE4
F7EBBE38692AA23AEE9CF58B61CB462BD08AE61E233FE6FD858098D6ADB51AFE
9B73054AE10CBC9D3A107876C1F806DB634047AE9AE65BEA57AF286EC64014FC
E7136438691DFFD7C7125A21C9DDD3781A589F9A5B9F6B599D226E3732D4865D
31D5AC6BE2474EC5728A5899AFD6723CBFBE7963C231F37C55268141E7DA7209
A88E74A71AD538E2C3412377C4A0F96ABBBCFDEF4CB9E7621BE1EE2E913D18A3
6B75312EF135FC69C650988056BAA3A126A8280086A82BFAE7B38B2B077E18F0
1E8A2F7EC987FA871CB8263D5C50128E741B73C85BCC242E09A878CE4621251A
2CB6B611D6BE4B931955CB6414033D56660604EA00175D734CCD845516248B62
D47084A2B6661C782506C5523D1F897B6C045E7986BA31BCF3EF065EAF3C70F4
AD1A59E63E59F06404C4DAB474888580A3E1426C7AEEF64210B057212774C55F
9C65D31F10D97E95D8E2C53D11F4AD826A76E61BB995832716F6B5CFC5772239
2F2BFFA264866A88DF977B2E5BAF83C2236878ADB6B54E05B1AB373B51073D8E
118B11CDBE39E8AE4F7942401FBB524635F14925EF5766F00C25038DE6A2CFEA
FA21AE6C39FDE40B9D08EF1ED2E41BDA14741D390CC7B93D114349060759E600
067CDDEEC9461FD4281940D45D3F9B39005FE49A79CE949CEDB65B152C308ECB
6383C6EBBFB2B61FE04B0B13B26BFA8A80D127E04C7796E27A3855D0EE58EF88
483C18130049A7A40B7DDCE9E54A5B588D5AFD80CFD1F3A5D963564D574CE792
61069DC22CB2744ECD743D523D8436AADCF27F49440AEE1887C2D954CCCF8D69
A58F2FAABEF81DEDC549D7FB35DCE6C4667E39F89B1F5B4BC31E915EE034B742
7F0205B1105B6DC540B6BB47463BDD5F0EDF9F1FE4523E35F76D24F388556736
7C773B26B03AADDCEE81060D1CD842FD707AB6AC4F1B9E2C6E27A0C0CBA41541
865665DF4DCD267216808A2033AF0C65683834C225210B003AA07898B985916F
78C17D7AE780B5681A27BC5CA8C9BB0573B1B16ADB1150FE31B553B0936F65EF
BB5CB2523503D9C1B0D5DB8BF505FBF3AD1F3768C09835EB66386F91073AE616
6C40A52DCD433AFDB918FD8DF02DF71286A138241C7EAA2452F1B85F57673C6C
E01E20080D9FA93A23BA12C268ADA58B8AF3B054E55012A23B5B7CB252896BCE
AE6FA9E44FFC621CDC8C77575626CF6CF03D0DE9CB1451162DB63555167C0265
97121DAD02B402A9EE7F3C72A3E92FABC1898B5016A9444EE6F00566DEEBCA08
532004EEB8A2F444DC0A0C157DBAAF8172C8DE0379B3A56AD0148429BC6DD9F8
9D792DA8AA5428BD0A2ED33B200AE21D0404DCF32BCB28A7373F882026E41CF4
F8F96019FB2822AE4D7FFB00D18FF44D2B065EC5543C350D0C910970249C242B
5711A52D24F463A9B6E34F5076452BA0AC3570F67D052DE6BF4051F09E7C0B62
1753FCC7A4220177A8820A125136C12260130D20B3DF2384B6DA0363361604CE
9C4FD0B325F9F8815384A959FBB3495328F466AAB692A81422EFCB167B384E8B
702CAB8C404BECF2400259267DAC2125E7F10A86B6846F26E21B6D213D542F37
5E5389CC51EBD0D96F9AD10B1F250157FD6D89871A83CECEDDA1F3DA6297739B
38A1F382ACA7B4667704104C38B820CEF564AC3FEC8EA45989FA531DFE389DDA
DF6C7988635D8D87FDA183A84F80AE938408A0C7230448AE561A2B6DEC5A4862
FB985076B03077218F888BD4B66448B480BB0814C1CD5780A639C2FB047106FE
B5D9169C915F5F98E8098A45612CA661689C966FE9B57BA3EC374C373DF61455
E9F303F68AC474E6D99ABC5294AF21AF58E3F9EE9C34A74B31A6B4924EB4F3D4
EED7A3AFE5280A03D47E6B47092FB550461544D96C798CEA3F821D5ED5459B30
8670F11E1196FFC1D078B4BCD7F525576071A48F05B3C4CD53D7A47E855ACF5C
68DA71FDA92CA2A73ACC8CCA945412316D2D09A7B58B11E1275E5862AF738748
961AC987F60BBF4841213C02298C5EBD3C3E9F935566AEE09C02F382A501982F
A0B46968ABD63DB61E3186ECA1A8DAE69D1C31BA552A09B30216F9A60D1F58E7
4D09301A9F4503471023C5E8F779061500E5A439E880B3DF3C94F98DE172104A
59134C57CD5CD0305BBF875D7087C5624A844F9F61FB670F5521FE1FEFC260F3
E926AE8AEF3535D903C5B59737BBD6C22E537A1985F09FDEEC4390592683B879
671A87722307DD8BE84F65F443B78CC7556BBD41228FD92D0B1804227B1F17EA
BF5066B306101DE20CA9F8CF00E3607F095B3B2F051FD80E0CDFC4D6CCF3F028
E2F340CE3B7344945670069E84A787C8B0CAE27651C76F207DE549239D5A207F
215F56901E999514FCB0342DB893AD5A3FB565ADC9C0A6DCE62B4130A9D4013E
2FF34ACBF90545188D18FBD2A927B2A9414D523C7E528A41B21C221BF099B8FA
36670B10FC42A8A4942074E5E6B2DE3B1299F0A1E6B43480FB5EE929D2B6C648
E57A4CADB9551D5B6876F38487881D72EB59C980A15701BB16F608B91478A248
1298B48FB3C526E1714348EDBDEA933BF8A2D70CCEDAF70760FF60974E0B97B3
2E3F065A3D36B3568CC00A43D3FD6A7E7D800072AF46CB309269633CD0FD323A
01332F98765AA81955102BA500A1C72D67881F7CA534E44902D16F2610493E9A
B21F5E97F57D50A5A4AA70289F662032DB463BE72AF1223D0690DDB88C7DA9D5
9148324E7D5069A718059298C245C2EEC2259AAAD155D939CFBA0CEC6C507F41
8CC420B70F6CA0F5C3BF976E6C16061EEBD55E4C0453ADC17388469B51217C07
E4B5E429DA60DB04CD4B779556A03F5E73CA6C9E57568D4C3FB3C18553AF1EA9
10D2AB11D6C31E25E50DEA9912FF76A049DA9D644D23283D7A0263EC0616289C
27C151729253B4293D5D6BCB7393474C2BA55D715A36795FF724EC2117A90E4C
5740A2C231DE1141D600E0FBB6A03857A537D27F4BA88698B3CAE69D8B46FBC4
79C6D145EB8558B9983C1F2897CDA8E87EF74592B6FCE69A69CD1799B02B556B
B22818E2AA7F215C3EB52FE628C2EBF3A308034DC210283F6FB977D0860AE92C
3006535713EB340A4D1BAECD7AD0BDD875B39D318E92AEA3F221BACC70132DC8
BE1D3C70673A8429C94028C8ECC23986CA198A7CACD729D7B752111DE7842E53
9AB5FFA0191D1BA797259D6D08CC70E535F7112DE28225773B359FBC14AA00E4
7E4285B758500AC9FBEE678FB6BA165191DD7EF61055DD54C1DFC3E44012F882
1FCF8039040F4DD94813A34038902FA5942074E5E6B2DE3B669471CD6FE75E49
25F289667EA3F13AE7ADEC2480F82CBF0571F31699EEB9A0E2324C6D54BE753A
519775D1CC534E952F51BB4F74EC7528B1393A684E3F585680FA0B8A5412917C
436EA0320774B3FE9AC68DF48425766348AA54AB3EF073785F7AEF305092E641
6EC9CB59D3F3FE8C46D4546A613A19E109CC34151D8891987689DF6FCE28DB74
3BC92B2EC376370FD355FA08C74EF64D634940AC97ECFC11B62612EE6A17AFFE
94687B71F5D59D2B39DF94193898C8D99E4ACD3331B3936D51FBF16D5AB1FF85
B4D707C023A4F9233B146411753B45D4129C76969F28E6BD6E51E0BA0FCA1585
8CAA72B1CDBEB11EF5AE914065717A2A59EB200D272C713BA3B615E2B5D96B37
13D0063B799CDFEE80E1DEC9AC69927DC959E6219C8D0C7CED3520E6DAEC5078
90C6ADEC6948DFD406EA13064146695764F5C8BF8445E634059A35012B4B0CC2
09FA380B2BD788CCFA74AD57E87F06463F08128A2BF6D8915C530DDA9530505D
29E46A14733890B2EFFE382C0E38B38E14E7280EC18FDFF541DA7AA04F4B6B42
0E0A9810666D20012FF6DC6C558739DDEBBBFF6170BACE74C20239F95E882A00
52DE76A475D72276E2C6A8C48223624FA8F99320A14013C540DC0B2C7702F091
31A46903CBA260DEB6472FFEB34D445FF8B74EE2D7043B291B05CF78476756A9
10E727C68124E60F870005787E9BAD937B795281D0EA7EF4888A7304E00FD3F8
4F9612FA7E04507413A893D8D3EE9CDA56C27D3C4973A3520BA76DDF4C44BDDB
2248349AF5C642F482F374551BACCE7B95EE5E53DDE86C7A81758FA86378485C
339205728011A4E0F2D07A01A0C7B27C86A5A58A0F460A9D3426848DBFF9AACE
0299E84F728449FFD23B80695E226D48945B583641EA42B98296D36948A28854
6140B6ADC1D2066D8D58EFDEBC8B1B317BC103C508BE81A9491A9852722E06BE
E60213FDCBEB6938654A9C1C1C5A57CEEDF7D8FFC0B12BDB25BA2DEC1B8ACF68
A7E4A9D2BFF24C9316D8686B0BF3C6D559992DCDCF0A06854B7612D9F2AE3B23
DED25AE986FC00D90677D85B759A07C029B96541B53CA2A1F37A1157C73BCCA6
BD4C01ED6B08657876734DE0BB152A0901F7BD959C19F31AB198A63A8378E87C
B57435D91CBCF393CF9E8DF5823D5515AC21C4095336A424F941F1186CEE45F6
CE5D92ACDC933E118FC24DB8A3605A65508DD1E8C80FC948BC5AFC2303A45301
EA334B5D4F9857AF8DD67D0BEF3AA515E74057432309D8F9F36EE1A7F698796A
A05AB204EA6A4FEE77CA1361DE4889C49E70D928085C465725E2AAB805E68746
B94535F308ACBFD96F89D50CF87EB29921EE1BD49DBE76311078B7B33056298F
83FBE46D3908536ED44B6445E300AE1BC84FFCB69A28EB41E0F37E3EB263FD3C
8D53711E284A69649F0DFD0046D1395B1449AE1944BDDAE1FB609FECBC9CC496
5B406A9C9C81EE16FF76A058F3FC52C6A882585DD7F898F0895286C6BF265BBB
A7D76AAE0852A5C68DC0DD3E041C873E3C004B60D8E3A15C849146C365D7515D
76F88B3EC71D20CF2119450CF9056011CF0D1B9910EB4B40F86B92F451DC0450
AF16CCA790332862087358842F3CEE9D5D3FBD5042FD1EC12FD0983C3BF57887
64D2CDF438A14DA67F881A7DB50D3E755BBD2E5AA10CAEBD004A719FB95FFA79
C35B9940F6F70C259C1FA36167F219D39CB98E6BB40C9983CEC42F1535044A99
1E9D6FFB32A00B2A97ED6606A5518084782D2EC98BF1E4ED4CAB5D2CC7CD21D4
BB593CC976FDFFC8DC61297D852D3F6FFE9655C54354D6F625E415DFB3A3D451
19B6D3A2BE3C68CF25C1E4B3F1D7F618C18EA045D399927AD3F529728CEA2A23
68CA01A1CBBE48DAC4751518F0EA3FA3B8B173E69C0E19FC786E6482822FB350
EECDC70B3CD1D2048FE038B480FE35DBEE9CAC7E77D79BA760EF4C53A3C98385
3B06430A1B6DC3005CA2757CA7ABC912D2F76B826F1DCC42EB28EDD5367CC0D1
34374CC5FBCC1DDEA0E7B467FAB905F1B2592E1FC306899AF4EE52EF7C1F4F8E
7782F2BE25075ED47DD6FE8909C387D8F02A88FD24540AD71E45FC8315339CB4
678AB66094234151AC4DCE063705619EA0D7907D8375A188D5E89F21F83A5454
C8E3C99A762D4885885A2913CC12FD70F0B6DC2E879A509D7FC2995CF9D98290
66794618EBF6AD7A4B29FFBBBE0BB79B464D51B9F68E0C1124E6FDCDF60B25DD
87C99634DC8E71848784FF43EB9D03D0ED2148757EF6BABA6D1482E9C3E40E5B
DF18E320CF1A36D62C69F8AB61EEABDB278D94176A276DB70BDBF6DFC5B7E29D
79429DA2715C0C6A7877B7850DC413FA3F0BBFD66308D62402479FFC0EE214EB
BD5F7A8677E16FAE19150548A56F063600927E79CDC16D3D574A2BA3EC77ABE2
2E121F7DB3788BD9FF8EBEC980AFCDF80A268555C82421FAE48BF69118AA9939
9885CC3B75BBBF832F4FC37DB595D56827C737770DA3BF0B7BF1F22F3BDAB2F7
1ED1BAADA02127A743DAF83ADF0E512B62939B9B9D48CFA04522C992EC148200
9D0511EE36AF55F37496A71EDD1818965337B8CE9B2934B83086D6AED4460D71
BFB257752C5AEE42439A74B4F0BBAF1D70EEBA68EC4D84AD05EEAA7189D3E1C9
FCAD78AA51C2086D8E71C34694CF2C4CD167F58BD2BC346AB7BD806A94BE6EFB
28733CE39CF390D8ABDE4AB152A58D391E09FE53FAA4CD9E8C779273D47755CA
B6FFF1777531D66FAFB55B92D9F7F7887E49FCCF051A2EF3F5AD6398F5B4DD2A
2B49E3E433409D27604F3F841AE348804A7C4E03D2E085E8303E92D7EA80E709
34CEF2CE70BB34F0684DB47B805E2F60779FF767AF2CFFAAA7F2FA69BA2B6A42
9FDCDC16A22EF6E1D59F1CC4D51744A45CD6E906772992CC43893291BDCEA2DB
B162B85E7721ED70298CF855891180493205BD9016FBF72C42CBEC9CA03C89D7
A1DC0430AC5DA38AEEBAA87DC3DC4E5149815BDFB2C865CA2BC270E4E404F8A0
8B6EA22077FDDCF0DCE19117BEE8EE8CCB1DA1A852152D4BB72DCA67ADF52AD2
348E9C9216B45B933D0DE9BDFECD4A17063BEC1E097A4E23BCA2096671FFEE9B
7C4B058BE8B5CF61805BB683FB27698E2316852222C1C8FFB4B6B3CB02A3A4A6
05A44A017E6F499E15088B9DFBDC9E1DFE1E8C51F0F4A57515069C0B0ABC6B5C
2A2B08E8F5AE4C1E037041529C7B525DB7CD7B6E984DEE494A7B01B637E77EAF
484C22D3A2743E8296350CA4382200124B7C22AD75592BE8CD456DE89ED11A22
58BB34CDE1A6B86679411B5E93236989A9D317ED913A28706B538D197B7D62B6
143DB7A1CE5EFA9E07A7644C8B88EAAED6A18BB8830D58A841B56B084914E708
0E932EF41AB6D874984EB6D48B1B503BE37D9BBE9B5DB528FB9FA74784E1987F
CA8EC5A229F72894FA85A480B431F796ECDE2684115E94128C5B26DEE73E360B
A24603A6B42398895F1F95D5F7BEFA5757E5541F96F98EB26AC14AAE1E6873FA
855BB58E47F535BB052A6CF39E315C95B7240F7804FB33719067BB07AF1D6C95
5061B4CF38482E67D1F7434E7C6DDB8BE97E6EFE62BB5AE6FEF8CA877932FC50
B0BE0061DC5318A3CFAB77EEEDCDC166437C54D0563E2B678014B193051D58C9
4D7B69A12CE99A7F3E03BA6051B177D60EF103E8C6110A8B6104CC16B43BF85D
8CDF411055D666598D4B09E44F22EBC987459252072D190F60A9D1A757F57585
B710CCA2519DCA380EA290AA74293F9929FA63B7CD54AD4C1F93701CECBA2C72
6A5CEA063D7B15889A18EE3DB6D21E88914BB3E246A5C70008DC13655D724119
4A25388FEDA8896ED9431DE937074345AC93636B71D9DDB8E53A0F9813258CAE
08EF7B24C163E19DF472705785EB671AD64DB34BB4E24E0DF86ED83F3D39BB92
8CC90202CF18A994B50C187F9551824D08EACFD158139882689F43DD094EDBBD
211D73EA13910335910CA61F5B4984C9A127C4BFEF9A390C7F2C3EA9C2D391DE
C576BE278BB95ACFE243C7744500096B30AF73CA72C9EB2C7F36E27D00D4347D
FBB8BC8295F618EFF432ABF3634C8ABE96901D4DC836B1FFF14655098CDEA105
9F65D9589F08BED25E07ACF5190AB5E8224C5747F1FC0A88D9E1C5058E007133
82AA80998CFC8800ADFC43DF9A0143E2ECED58D83420F4B02BD7458D50785202
0BF0C27F175DE9AFC917F2D783A0838DB3C94BB274F03A043EC405C65FA60A98
D6E9ABCDD6CECECEFE88795C0259E2410A72D95039B12BE1C8F6FEB7A729CA20
D8448383BFC8EDA5E33998FEFEE24A14000BCB041D2786AAFF664D693898D839
DA02A25343EB3A5AE74D7ACE96E533B7E18C509FDD2E75FAAB717329622828B2
785C1A8B2632F244E7A34F7B469091B4182B33BF1DA6FCB815622C7864654E66
FBA0B098A756AFB05DD40AC2D7A09F28F1BA7A2528F00AFB682188477351BA38
90D3C3342A046FE251CA1C8632E282F10F280590EDB02F58C649165D36B8FC5C
815A19621A9BC5B46350270B9983B89EFFA023A3DFFDE181B90C51D70550EA04
B2E3F01E5BC22E802FCDC4A042888BFCC7D504C862888988E63CD14B200DF449
FB6DA872A29E57E93827FFDAD66046E97897240FA7FFCC4E7B03790E41C7A106
277465E3DBD10128CDBF81ED48361530BFB6089CA58791874E4246C0A7321AE8
31930F08F586A85F78CF60B711B494574EF19C614345AFEAF6D6AB1260644881
C7C3AAF2173FEC7D13F2F47F4C17029888C8905EA3444E8DD8664B7470201E0B
68D8CEF3E59A5527CF41DB87A31A44D279E054BFFE52BE3A8BF90DA037E0A9D7
89E3AD8C15CBF96A1ADA146480164201E9FB8CB1F2B59717F16F6F13A8292504
F21D932CA72B041AC9E5551647965D2E6D036E43654C207F12B1FE2688E65BAC
33CC70E238C39F1AF324479785DE37B802BA0E122E11B2340602B62688885BE1
11C38FF910A34AD725FCAA433B9C6D4683C2859DB7E04C3765B43DB403D57964
98DC9B0B109E5C592CA7C3CDB73E3D9ED0FF4F028D142144DD17D12472D1871D
212EDB1663A89D24533A0528C013A3BF855B419394A96B74865A45D3C820A8EF
8A43412C302F32902A5A7A56C447816D41D526724DCB1646B96FCE75D500DFDA
A7E65FD197D6C7287C5346F0D5E3DAF1AA3B6EBC5B301431F192BC69D405F235
DE1247FC8B3E66E7921B9EE6699D293B6E9671010B37AD978B2B9D22F312030A
0A813D668FCB64E0C94BC26DA29250647A204D53EBF480B27D456ADD71853B41
D0CE65F05CC6ADE2583CE33921DA5D3F2E4484D88CEF40CE313C8754B85DDDD8
02D40576568262B2289BD805DF76CDB22E1F984F4F730D5A18BB4FA9CDA30DB6
F1AEF8AE8448BBC999CC090578300DF5C38EE0EF4E5A899662EDD4F18FDCF35F
8EB040E77174DA605AA02237C8B3EA2EF8AC23332E35CFB43BE671A04E979171
5265C0F75F3E73023718CADA9E68C1FFBEE8A6DECF47CA5D336CB828E48ECA90
18B1A04A78DFC36F2B21CBF7AAA78BE406DA613407C44493DCA4819FA07D90A7
D165D2BC4570984EAAF941D83D79CA7F7C78C287D59A29D4D73780FA7953BDD7
B6C32B93B36DC34FFF3749BBF1AA29F3CFB26E8A42B72D59E2898450699BE5AC
A02DB1536D99057E320BAD6FA65A1084DC7B4B8770D3E62C7EEA9759D337AF2A
6A8144B05961497C62E1928A76C33E730F739778B8BD905F474CAF1CBA3E0C58
A710A4D3E91CA8DAF466AC67658101F689D3F8A137ECDCE5E06A357EC2DC62B7
D3D191B613755AA32928A759EE844EF2E70FEB9CB1F837A1BDBDB68D0A2B5ABC
BEDE2650A08A91DA7E638388619EBA4BB55439EB0BA30119D260DB3DA45D05FD
75CA3F3DEC5DB3E05CE8D1FB772A7FBE3A7029A2931715D4A25D5ACFAC43457B
35DC760E7FCFC54A94F447A97175E18373A7A108C2925DEC6556FD313B6F0D8A
D8488BFA8F1FBA7A9E0ECB0CB937C9F7F7DDD758D466939A23D7A779E813657B
78B7EED0F9731741C6CB3D2E2CD4FF98DC7F79C989CCC086CAA9FEFCA9C0D1A3
6A573708C2EC010028C55D9D6688C530AE375643D3B2EF67FB6AFC6817B8B15B
0FA72FA7A271EC1CDA8F252A4A13C1842F8BEB5A2416107B1E59084B5F71B051
33DB39F894C421CC19AB49821975DA03DEDBC37C298CB5E80FBFBA2FFF1155ED
DEFA2EF538083B9CB739D5A30CB45AFFCA8482A6D3614B221905B483955996FE
5C11E83F9D6F40978896B8F7A0B472D1F9FFC68F78D7B41FCEA66E998BC239F9
6D2459BC159A2AAC65D4D8CF8508BE38DA3DED52BB8FF12A7E09DB3AF0AEB686
169F8DC1D406418D47A410B78649C81270862B8528F51CBE836362B2F6C1489E
4EDEA0AC8FB71F98F9F38DAECC1E549599FAC0E2611B901054E5E94ABF52DD9E
FF05F5A0FEAC9421A46A3FA3F64281CE2A2F915549673C1FD6D8AF4F815EBFCA
D8247FCC0F490B738B455673EE1C91950C73BDD253D3553698600B7E2D72C366
1E51781F1BE5AD8919376E03009FCBDCA96015D3822CF6239468F9839FA2646B
ED8080D44243E74485FB8223624C048EEA649134885015C2E04D6FDC463C1510
C782FD978D9F445FC32005C6BE4758530F02C10DAA800CFA681AAE0812D3A1E0
810B01C554FDBB8EF9804F5C2EAE78A56C5E3C80E54FC7238B6D3A663E3D8B7F
1A2EBE41568BAF209D7F6313D02E535F2A0729F4437AF98777A3B3B281ECFC47
0BF148481F69C517374702CD1276CC94D621F31DCB3E021998A5D6EE94CA4BE2
14D7DFD191A04004D2AB894E7DCC7BD80F2E8E13073B30FEA8D92A8D2C0A5873
FDADBBE53FE4047E86FA2913B52FC370CF7091DDB2A841539CD1AAF398B5B8AF
32C004C79C1829D82BFF0EF50E3CB09B0EDF3E356F2F4279001DF60F8B521CBA
AF1B248BDF58FDD00E2585D2F0369F6245946D5015A4FEBF19A9CA274E01F240
EC7345F1CD123CF2E4C8920D31CF2ECA6CFE292743FB764E1A05A4D64FD0AB74
631A35230401234B35825EE4A2D086186E1DFFF295901F077B32124A22AFDDE5
9E170967A99702382701CD61054566CC731777E1E1A4233E4499C14B7B552BDC
EC37E745415462F2538DA12E7253FACE09B4A3F3913BF55D92DA86DBCE70EB29
02BDCAF84370CB2812E8DF9C6EF0F015C8184493FC6CD10F176EAB4EE9BB2612
B1FD223DC6C8A48B36B81681F904F73798383309DE6323A1255157E3E51CF778
CCE8FBAF39381267A2B06A906FE1F4332276B8583276639585F7B1140FA56612
5E537B0D74451F41D6A821B48CC84A8C6F27BC76B004E3B5E0039FE78C58EA8E
9B95A248DFD932C0084DA85BFFEE37B50C424EA3EE33EC7ED6415A871312C356
032136221AC3447E1DCE4ABFBFA159B07ED5C93D976CCAD20691B072DF2E68BF
B249DF4AB0F974E93CB3F3296C733FC7489A0800D00B20DAAA10AA02B9A6E6EE
EC07FD93D19F9C0A6CD1A04EF26B5CEB1A5EE17161862389616EC7D111AD5519
4CBAC9AF456ACA3B01C6497E22BD36E1AF7A41D12BD69173FAE067B8FC146F8A
8894AC32E915A73823D4D5AAE0A02273A47AFF18FF146C2D330B1CFC47ADE896
255DE1FFA8CC1A09D2629A1B18E47B8432BD1AD7A9CD912F2BFF83A2C4705A26
FD50BCA5AE6FD2F0CFD1F8470F0DE9599E8F9F8AE66754A3E85F241E3F8F815F
CE7C8E07C2A4258E17D65821428EEB5EA03F149D89BE957475084E6D7DE7352B
F4E87F02E38A7D50C6FCAADBB9EECA944E5E27C23C75A180E69698B3D2AC24C0
35665DD98E26606CB1A3A8C57A8372B35309234C27C9A7D1549170A4AE05FA23
7BDBAABE61EBA9495B072911CC814C19D53B95DE0071E3A439D4FE639436BB04
41D1ACFE4B66296218E1EFC5BE6D8547948FD31FD731D0DE9DB8BD454CABD34E
EAFCA393AB86CFFC554E0BAA2290B2082F996026ADC420C676AD597620033FC1
32DB99C17A6E747D024BC3297C403B5E27067D16683829AD9700B3205A433016
971AF248EB25722DCEF46F70DB778E6032E3243476B874464269ACA5BF87522B
E80AEB1757E191DA795FDF71D10E1D5D11BD5A36CF0C5A4B7704DF0394656DF7
5B0DAFAB5A00545DAA9BC6BC17BA6F55FF0EC9BF7AB97EFB7013FAAA52275F35
FBA86A27F9F3A167178019776F04E5FFEACBC97E582862B9A2AE6B9E1AFF44AE
114E041743A673DDEF25407E72BE21D8264E60CC2552CF26EE8C8BB1C0E16F3C
ACC18AF19910B28EF6F1D077D41491DC8978EFCE821DAE5AB8395C7F900C2AC7
BDEF8FB9D4574698BC8D4E374CE90D8B58FBC1802B0C648C191F49B0445E4D91
72E110D6BEC89A1D7FEAAE52BC1DED5C1A601BD2FED84DC32605C039D4D23871
579F724D3AE50E423AA9AC33EDE54B506781894FDF54F0E7558BEE52F58FD773
AAAE5471FD6A61176B6D9E9D392516F22F6BD199FD55D109334CFE595E725F0C
3CECA9329513ECA625CC1C5FC3AFB291A6B75A593D0A53CC3283B0D58BCFB661
C36618B587B4233E69308F2428498B4B8377F6A19D5F37AF5096CE711EFEBE67
4C1E491D29209A16487327DC3CAC470BC33A673DDC442CE0F964EE4749A7E86F
7E4D048E65CE4F49F4F52DE53EE32D931C94426AEF2D5B015C51163E890828A4
9D2C525E28F9D6EFD18F0F41B02E0AF1B4CCA12CF4B24818ACD57633D312A996
791F48BFF3535DFB0D05AEA2DECB128FF6B6C088FE4F9FB53692CA3E64ADABB8
9CE842EEB59B3B369A7D65F430E83301544A1596FB497EAAA77F8BB3F4A380F0
B53FB07AB5935C31E40B5679ECF9493A19DF53E84165DAEF26475A044E394B39
87E60E02CA72E2EFD7EACFBC8107FAE98814420EF2C082A9152D286CB6B478EE
14BA490E32F7F6C96FC7D6D26B3226DC5DDEBFD668047681273053365758F505
34E61D650001BE80A48A2B1E008A6350B352014576858A26DF969402AB30E0F9
C5686E57026BCD278CA322575D75103851939F8F9C31AD6E66D51B513A2DDA45
38BD974A1B6EADFE9F84A7C5DC897FDD90490D2E07EA36553A97F164D73EDD84
489A9989D1B1BB05D4EC307CDE098225A478F5F2F4C32717B3C82CA6CC2B6B74
F20161A512ADE598DFDAA1789736C850EA29411BAC4565AD4CB3E1858D7F3FDD
111D631EBF110C923F123EF1C1ECA9B83CE00A42AAF81E624850276571E8BA5F
828FC6C31418DEB92C724E821D920AA85C835912292DC056374C4AA68E876DD0
CB96D9BD9060797845C0A636A07B1CBD85BF493182D44236C93F939FFC5263B2
6EA5025AAD3ED6BA7F318D51CE670573B51F646692261665D4461E47B7EA53FD
3D3ABA635975704D43D6343F8386D5F046841F63E0B80C8DC89CFC46CA3D96BE
9DF69EEB94BF041792494691B655CB9C88996A27E4435BD947A260546DF3F774
D3814481FF721C94CAF73D5DCFDE1B299BC10FB9DC0BB659B2598CE000B408B6
F81E7C6EDC76E10EF7D0F5B99277339E5EF7427973B800838CE507CB4A8B04EC
0FFE181A696FB51773F650CE088B3ACA4E03A3CF8C5DFF4132151E1300915D6E
15C7F11C4E9301ACECA89412C74834A35B6256A2BF4A52294342768A1BBDEB38
41893B080E5FCF828E0C0F0EA9B058F46A9E1B1A2B01CFE59DC489CF112C663A
5E9C809CAA9A5D07DD4E68D1245B3D956F42146F9744EEB7CEEA8A7917A0F359
C4C172951461E884747D6E5D2CB8DED181B02711EE2C105FBB16BAAF98F46906
8B96F1F6ED9EB200D9C0527F9576C9CA4DCA2FB7C7EBBE81A8247DA7267C0C4B
BA87AA3EC7166170B80B7355E8025D1BA4EAAEEE0AC1EDF4DC2F53275011EE99
1AA96DDF4A22E591DFF752EA5B073D5F1AC0DE5407EF1FB6302D4B09CDE8B36D
06B51FDFD86A22BE594113A00F62F7A57D32F610D4A744ED4B4F457EFD4B6BD0
FADFE4F62BF3663264DC5FF5216771FCE03408BF614C6D4D78E952EEED8A2025
8DF053CD2601C5A7C39DE7FC5A89FB868D379093C76F78B6636D02AF9989AFC6
2E8940835751EDD0ED2C921A8C55679BC2211A4327B6223806B8F794D4A81D5F
FD278ED5A86AAA228B9C47E3E78C0B22D2600D5CD55A31199C09D9C7BBA90E20
CA49FD3906B7D32C787DE06908B4630685FC5EECBE80F4F0307AC6A1696E4EF8
4A749924FBA1950E0906CF155F6226D25D4B841BBDFF67A1828EF27CF5DA72A9
75945FBB6481FBC4F25889CCCD84E335EE7963DC721E0041BB3DDC3172FEA590
380549E139F3A955E3B5F1A3D1BDD00765D8ABF6FB6645816F11C17731801349
25909155C60AD3A77AEC843DC75C97EACBCD2C2B947272ECDD4FCACAEF0B0D40
8990758FE7062524DD41E28C7A9F71DAD3322D0A4BE9DCF16A69C51DEE91F98F
E5F45EFFEAE3568F78BB7ADB9CFBF5158A346F8E75941C1189A0793A1DACD08F
33395EB773DDAC0EE0465D039E7FB4401960167C6E65F5A000879BF92B1A79C9
C70907F26FC2C8801922FF9B20CFBF4C445CB00E3DCA452E1C7BEDC4CC292A8D
5EAC1F8FCFC4384EF327F6BABBE2D7EB6B950A9CF60D49F0C9B41CE908A51A3A
0EA2B0274EA2C1DE1ECEF81353379A6F1E95A0878D7D1296B3F569AEF0FA3C53
B8F7DC016D3DA4E7CEA158E99E37E4773B561C5CD2EE10814CC2C1089F4BFD62
F54A6A98F74CB852D6510B5AB1B30E1EB29AD644ECC7FEEFA841B2274570DCE5
10E39D6CC4DB940F32182E2BB253BCDA0B89BA1436D90E16006762D51456A5A9
2180BFD3F7FD1D7C0305D67A11D28A41208CB897DCC09238374D5BC908EF970D
0E8D3721CE0C69502B9A230635439764C95C9A28841FCFCF279EDC74DFC88503
05F5D076592306D8BC30833BD11CF1198C51BE09B064D78221883665C31B5361
DD832C513510C5F90752F2EB8B6CCCF3F2280D3158A253F22466A7F758FCABEA
3F324C7A7CA919EB41D7E8BC0BD4D3EA61170F94D3DF3222DC9ED3258C6DA4AD
3060787B31EABA5D487A53150547D32751783B75A1DB76E63876B6FB9A2B8BC2
93A7C2C9F062CC5473C3646255E70FFB4731F12C1375B510DF2045D62484F894
9B2CE9B87D9CEE04DFF82BF14931BDCD998C36CE391BF12B2EF5C248D81D3B16
6AE6DAD65AA7FF59D7E3681778521870E80C559E268B7ECF5DD34B4002707CD3
07D996E13382846989C7CF8ADA0085E2AF30BB1298F103318B37BD96C9AC146B
7A62925850B9E0577B197D3A2729CD435B3D4CF67A03C29DFF8CF86CAD67AF03
BBA5ADC311F2C5FE89DB4A5677B231727E89E7C1D48B90F2ED9FFD88F15A1BAE
76C6EEFC79C13043484B81C4965F27BF8327C9FE55B586D057A5B67F97297B1E
69FD27815BC6AA35AAA24548EF843B42B699C5237F0985A4770CF1BF95BA94FE
7D78285C2350088D00C56F76B200EE212446E70A536F162CB22D6B6BB85AED82
C03AC19F9EB1B6EC876A8BFF9E51789A1DE2ECE16909A8D32EFCAF8907C43D36
DCE606D8D89FAE426033708CF0A0ABF551DA93030EC7D63675EFEC04DF35DC49
777BD37148AD23F49087E3B4F7B2017CC4DAB7563CDD7BB85492E1A9FB59C555
23ACF1E394505886FBE4D6F739C66BAD20440BFB0C2E005213489EA2791FCC15
5993B09D6CA47880973958D26A5ECDDCCA568F86416E7109413C77DB1D53FEF4
8DA20F1AD234E29956B151311CBAF225AA603E55CC82170686B183C8C04E0600
F6971E42CF74413913D0512749F002E1148BFB7E82ADB00D12CB23883A1B390B
090ABC3650811B30099A0CBFF0AEBD4D21A628CEF12E818D8D675D2E9A57D848
46762857E6A7A5DC6C58DB747A2455B4C98E4F84F727AB0671CCEF2BFD9D987B
18B167C7EC87D606B1C67323BF4B40B4466C3F042440371388F97A6274038AFB
3E6CF9CCE95C47D639AD06E32153ED5E8DAC2877E1B0DE2A6C41571E6E1FC8DB
908F29C1C04D9FEFB2668C05FFAE907CDDEBEB00524F2A339E4490D48F047995
378F0FE54D2BAD00496C1DC53190DB1A56767B0A22F396712975592ED74639FD
99A9A1C4F7444E9600AB81ABFB3B1CDB6D9C2A8E0A59282E4D69A4EB77A76313
9811D01C43280ACD7BF22BB6BE904787621CEA9C0ECC5E178798F05700C9CAF4
941623DA75356D530BC2067A3BD3FB1C983E6D6BD8367272A0E40C4862D94F91
B5BEB41C9CD8AF562C722E2C0CED9CBCC748D0C198E7A282DEB797676E33F9C4
5144C7454A2D8C42DED4B3EDBE4FE9C31DA61AB5DFAC4E131560F8DCBB57336D
6DE4A2D7E85D7C9282769B4DEF9D3431471D8CA649F82F561A31A054A7088C58
378F10A4C2EA0A0F95CE0CF1B75796348546910D7C8489A1705A0A24748D40EC
A4128B85971BD4343EAA4B0381531F9216A0409859E4897E1205D845B2942E87
C91376A66621F415A73216CD1CB535F57581398699AD4FC0BE4380497C2A675C
781BBFEF537126F336744B13DEAEB4446B7AFDCD264F6A63203D43EEDB128248
57DE02F4E2F39440F8B7641F19CABE58EE344A325F7F63B787B39AC00F7086BC
B409628328390625C72CAB646EA803E533EAB1BFEA16920C24EB399B0150FD47
379EDA1928DA2D185356F36239776CEC323A8388C856188CA7C17B83FDAF92F9
75A1F7BE330F24DCBD90135ACCBEFD3696852AEA1A5065E0248AC4893424C48F
C4740A98BB8F77D161F69BF647E352AF6ACDB05C1FC7CAD3843827A6F0C2F14D
953B5D2462351FB5B0F41859ADA86DE0C7640BA38C033779C89B7BF4E3197A01
BE89C6E37EEDA2400BE5C8878DCBDB35187576CAE391B79DFFCA82254C0C32E7
90796444A8E94B0A19BED4DC42765553F443BBFDCEC7BD771ED38EC621A3E8DA
A72D1C8AF917D8838121ECD990B249BC7F0908B91AD76CE0F477C63265C59F3B
D53A2966616C3F60B26017A023B963C99FF1A8BDFD08E251F9DF1CB1483E06B2
7CDC4B22ADDFD9CB7F8B79B2EF7BEC303B8FF41C00A220E9BD0598C4044472BE
3FA6A832BDBD45509CF3B3C268D04961C89418864306C3FD08E6DD8D0E298CF1
8819217B195EC6E440AF41AD29990419364E3AD688491070CA004D5CFF720BD0
E646156C50A6FC71EDEF111EC0FC9CF416FEE85AC10AED2A9E455CD7D4C717DA
AD481FC656FBCAF9D5F43363D3087682EA4BA81E007F3C022117F8A9093BD78A
7D4D94893359031700053B08DBD8986326BD4EFB47BBC25FED541C361306D0E8
FF4B37B6D10E6416E9DF2D895F1DFE9CF89CA0FD60C2A921F3A04C44A303C2F6
62CFBE9826A6C139D44BBAB1AF6A9143C3BB3C7475E2BFAA8D5E88A495CEB611
98C0A39D84BC8F2105958706A26434CD4425D4243EC3F419653D93AADD2AB649
018610F7A80DCFD03237ACA87E7188C34E529A7E9E99A14D255BA11D9FE183CC
2EF763B61B521FAC5357B46FE39C119EA90101CCC339F93EB86FA49A6F63943F
C72657953303F08EF2BFB73601141DD1DF2322FBF5987575C050BF2A72098813
B47BCA8052DFC583785E3B76B416CB51ECC8F84B828E5B0E2F71177F78DADC20
0354B31E864F9F1088C66CE8A18CDC868B119711D3BA7C52C08E398A6C8FF38A
F03E582999DD4F0609F7C37B5E90937BBEB8D0BCB173892B760BF1E6B2CF2C35
17F90A051BF5213CD31468F5B7590C2F5A146E82C52930955A35B70900EAD5C4
C1613BC112D2BCE6B85EE53519AE80BEF63003EDEEBE3F58C8E45D64FF0A770A
85B6AEBEAEC14D26C1A6988AB25E83EB6E6C2854C0804AA5AE00B94CB0B867EC
52B749BD29F44F0E6C93DC49365DC2BB1B0166E3A7B2EDD212C78EC7A64AA6D0
956F01206751D08CE7565448E89FBAF45A8DD6F639F489B8D4F9D9BEFECBF586
8B3BF45DD0336756497B4207C6D3179F42629F39E1A65254BF2DB4DA95104106
10D26C78C6C28E3394A8764C9EF24C80F95C8BA3B514F5D3BF4B5E695E9C1CF8
4D987A445AD31BD84B2BAD2280175392B8DB4B2F3C2AC7D013DD47934E884E60
B82F3F53CE916B65EC8A52D0262152DFB8B4075EDD4090C859CBD48256670C6C
5AD27C3DB0946101D26817EA3050EDAFA2CA81E8DAF56AD95F249E651CD78A24
0C753AC82850BD5B04E6D246EA051E222C95AC92DBF0D9CF3AA8F75968F63A85
07C38628B58A40CFC3504DF6750344DA51CCEA7606AB22266B44F15725085EFB
0B653F8C5AF78B5C2649C2937F660A335238C50157D49CCF3155E2154C405215
2B08FEA3FCBA54F9DC0FC0373424C522F392ABD81ED540E549E9BCD7F7536CDC
9DB96E7D9C94B479C27017F35BFE1115B0C3817CF9462E647862120A1A170334
323A88F851AB36A93BF86540F5EC516A93284922918031424BA62811790F94EB
A2FF6D16C55F1CFA0770961E441C6EE8B7EF5E48BCA2A075F51CC20BCF2E4B73
2F8EF76DE9343C995BA7DB5B26E01230CBF495E82D908A9EAA6A1649C385A731
D32DE5D1EA3CC27D54380C51BF078D0779310A27B51455AA7198A3F34C3B4F0D
78763CDA15104CE82EC025F941B3D7756999B570515873A68AB4B0ACC105A3CD
B5715DDAE43799BFBDAE067A4F9C17387883F8EEEAA11CCFAAFEBB396F2FEA14
480BC7ABF91CF33F585E0B77475BCA6A587A81A9D14AA9CFFF671371C22089D5
A8E4C2B639B97D7812D34F2C3B91EE5E501E5B59A62D7C907A8F53D3D0A05898
E1406E8685EE391E052790CE769CE98605E8266C2597DC108645361C7FE63332
F18DF95A9E6C31C9320343D16E0D780DA825099124CA3B1C7B92D8C211CD9FCE
2B5810FFB0637E73DB615177943493B147F8BBD51C597C1AF61021558210DFB1
458F61AE22B90D08AE8EA61861508D4F286F58CF98620148AAAFD99DDC36B7F7
FBF1B59A4D4D6E5C69F2F8962FD7661BD18215AF416609D2CA0F0768539A1CFD
084C802134477662AD0591F5AFA62296A2D3EE7B2BC804156C9062884A3C8CA2
D32EE95E9A93FA55A297CCDA61028F1E5C1E285E571086A1EF881109E7D6FEAB
3384D09A22FFA9485D7D0D3D7C89DC9C3E7331DB76FBF3CAEF2A8880A90286F0
8691ECF644C1C9BAED3A248CCE1F0CC2AA39CE404E9B1D7054647D67C5D74206
9C250C595E61B0DFB1FFD43FB39E8A5F837B69204CF6A6E8C2281B5A0A915561
A8B6BF729EA68B9EB46AD7790D58F943AFB3C5EE9263C02C75CE495FE80AB03B
AD5863EAB9586140F184598F91335A21D589390B9E0297239DB3C1D1AF016736
AB79836B5302BC718EB5AAC62E3850AB47ABE9F1B11E10A06550CF431C102DA1
5F7E9B2BA6AED647BA5DB7FCB6081B9F31E18BF0D526B80BFC29DF6CEE769DD8
A56719A71EA13E707E88CBC5B27153202DF0C7046AE65BA9EC8B98DBCA4502BB
3A0BD745363FC5AFEDE350695D86A9698FD2DB377BF4F13EB92B7FB7FA4E5D50
A441942EEF1F71E29A7E5380BA395D726475C49CD872E656CCF855DEB471E0FF
8E071A809093772310422A309B7762316E603D41F36CD939A700DF247E3D6002
5ACB210FD4D07691F60DFC65D1CAE2E073391093911B6B6B348C98B4572B1122
7B681AF50E1192775D22DB3DD9F0E403DC8F49AAC1DB8006C4518AD2C3DEB563
B8DC4C18E84BAF08D39DABDB217A923C333D528AF703B663EEB34BE7B7D8D042
CB8C40FA1CA4C7A426962F936148C735EC38E89B280F6B3D4C1DB3EB941FB32F
C0AC011645A7C697158005BA0EFA316C2BE09A8505315A89386E5337E82EA1A4
3A6979FF840E650C49BCADC5EC4648A81081889EA3F831DECA3F396DB0DF0C15
007B3EAB0A2039FA09ABC043F48C1945A1154058AD83C37C49B703BE8CCF7630
AE1F32E2A525F5BE857621F9C8C81D922B9118392A92DDE511C413C7BC985CDE
0F176BCF5AE3EAD81A46D610C3558DDE713BF819C0B13D0E4B324E8F53CB33BF
9AB35B3AFF10D6630042193C02BF69A1AF21471CC2B60BA62465378F8CF20322
3ED215D0B160AE4E4AD5AC9ECDE0C3042C80468060BE905543EA820DC0E8D32B
A4722CFE6B37A41F035F95DEC2B14C410E965CA174D61F3FCD57F5FF8CF419C3
80A5E38FF3D315E22F247E49C72F2C56235DFA5FBA7FDD232913F0DF0D1EFBB3
D4125C7D18056155D29A2AFB9CBB54DC935B5099037402402989D99E00E2FE6B
906438A7DAAC77B22CBA74CDD0BE617E2D3D3FF5D0CF683CB9AFFE3A513D3EC1
CB64E0B5A59D94FCE6636789160022334E6247166107D6C1A4FA3B943DCCFF25
8B22576DEF441AA58D090BFBE8FF50ACCDE52332FE85739B367F0DD4D7368918
963F6BF6F7F9264EA31A64146F3705DBD926AA6777136D86FA4E508DA4051060
48681E1303595FBBB9B93432E725281746999CC8065ADB2F5C1BE04BB923522A
19AB8C9644759A962C1CDF8661A11303E8069E72D571A8914120CA70B3D1D3F3
1B6BE4E274F8C38CA8468E6167D23379FB0DAC7B233C21A0632458550C1B7292
768D19EF04EBDD23CD4A4622DAEC3EC5870E50C5E07C6F3DC83018B2A03EB273
7B7EE68288BFFFFD4E4D061968A8B1FB929FC3F033F2A108D6D379AB0A8317A5
F5DD1F33DFA71642C01282ADA98DBECBFCFE0AA5201A69D83B646EB739EBDA75
EB2393EC392964B4F0B7320937070DA99D649E9B163BE260E6D70499F7E56428
EB48B4D41FEBAF2A1EA582205932371EE01E0261FFBB7460E8B8A29B5F06D64E
2A1824C4FB83760FB360EE1C4E32341901BAC86D049BDC03B6379DA9FCA0051E
C5C3C19FF7A917260E61064A26C2C331273A1592E22A1FECECD26AA31D4F0419
8CA4DFC16042C5B95E1CEFA00B0014ADE4DA9D8D726B85B83D7787E76FFF4EA5
764D7A5FFC71A43CB09E2B0CC654
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F4243F63B1C1767A866F1F9B4B27B64CB3D44108486
E457FC565E44F8F0808F26A82E25AD6B4176B3BE5DE5567ABD3D9951F55183CA
0B9098477F133CEE733F92503255CB46F8BFDF529A8153C8A96379C955E1252D
5ECC5686326957B6CDF4492CEC50E13EA4209CCE5A26DF835CF0A83D7BC91AD4
E67CCE7B5DCCEE3C2E55C1F6110A42D0F70DAB4D6B7E2187A3BF218A6636AF11
509A59F3447A24656D33CC5D961E345D619DD008103E9C54875B2146E9F849F9
E4AC043A1A15ABDC665C53D66C8744DB5881A2207BED1F3B5D595DF442D33A42
401D4C2912B3FE79A7B0836CD0BA536F7870B2C4D8543E1B72E7D8AF51C2CD01
867FE5EE85AF61F904A3DEE122B986EB9B010BB67A465AB2A6DD504A9B6AD391
D38851474673265AF4532C33605A176F950C028FB980B95A2F77EC3E049D527B
3C51560442A175D68AD7D02B80E1A845766CDB597CACBFE07003034090B2EDD1
0AFE529E542684F7EE03E3A023570BD17A6E4948F5DEE6A49117B0B754B2F16F
F8DC5E16D4AA031F23DCA4E6BE31F355C1302DF02F53B2DAF4CD882ADDA9132F
82739D1798BE5A768BCA6D666C98F79BAC8EDDA22BFF59682C5A20111B15E2EE
AF21120AFAD7E764DED069E7D85B7B1B451C5E96BD0DBB35995950CB00A56CB8
C30834DB098677C3AC5BFC88BCFACE8795BDA8F401BC2AB3A248F3D27733A07F
128021836F2E0A2F8DC7F123383E496D9E9E4520F162161747D2F12D5AD49327
A3CB65326A1A3AE52D00CB54C4E4481FF728CB531F148C576C137053A3D8F63D
B955E32ACDD101629587C243BBD8CF671522B81E35E65CD5CA984E3974776795
5E71823488B8AB0A3185599ADC09C2CE48747E01B76A3E74FE9597B16F53B4E5
F7F312D6A5A04E06CA80EBCA2BCF535C78DFB4B226CD80330E8BFC5541A8D2BF
57466FB9699BC3D1FB11FA02F61C1E645489FD9135792D49823D48D6D1384936
B4D16DB542AA8C4968B96CF80EF6F2598D682E2233FCD81AD1C94ABE1F286281
42119004F889324EC6B6B5F7A663FB48CA89FA2D7B92A350BFCDE5AD5D9FBA6D
B31FC55B373776CAA8CDC0DA4153F3F494A9561EC6651128A5A0C3D522B5EA2D
61D2D2BDD7DB3999723E9BB96E6B3B386AE7F9550B9B67284AB936E4AC55AD99
E813309F7283A10EAE804AB4043E277F2E114A0B3B5AC5FE9E3A89357BD55581
2F6ABE0F90FEBC26826E8157A936D2BC86E9A6EA879C09CE770BD581F30CD7F4
4EA176F2D89D66463B3E24DF46794C934A1446EEF4004EE45D384826131DF5BB
04CAC7329B56E91010C76222B27F668414B6AA8CC5140883EF7113F35FFE1840
11E3F90DFF282AEE6B6085586EADB2BCB312B858165AA0FEE610D3EF2646C3F8
6EBBF99A963E9F90F4A84628BFDA02B4D8401EFACAE877656356037E77534B1C
BA19F4A991288F4507D553F0605CD7C29D04F2A632987F3F60A5C7E094BEF747
CE1FFAC3C9301F6F291ADD5C8E47DAF4B619D3DBB5440391390745EB6F07BDE7
CAF3E260D65E883033E2D4ECD97FFDCFF90394DE544F348A3A46F982CC67B89A
0F075E0308EB6AD573DC7A3D8419AB3D99671C1DF2AA79F027492F11F279F3EE
D5D0E59EB951DB1ED7EE186303DAE9153568637062AAA670F8E6495FDAEC883A
3C487C3D578154740639C2800BEBECDB49
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BEC01ECCC91
62D605160067EB251A8B40D3229C18FF655220D3DC72B74618CE98CDB7E370A0
BA04A0FFC4D3C3AFAD0869003BE33A0CC74D81D8BB0D87E5C0AE932B4309387E
9DBF69C52ABE85006D83B9020CC042DA9597CE1A2C03653896E07940025DD68C
11C8EF41CED336BB116AB3BE6175D6DD1CAF80144DD5D921D9F734EB854BE550
341FD8148EBCF4482E9D97738693472583DD53F4D15F219219825BEA068392E9
EC101A958BA3D4C45B156302AD722B13F05F71D8C40C2ED1766F45ECB609FDD6
6F3014B11E63D70CA13D96BD5AE19DAD78AD44C7C99DD91D71CC2A3E0EF74012
0DE42BF30706C80B42BB37178508EB5EB02F088194A4AEF86083F9A849BDD896
A9B2F6F431345964D7EC4F60EA071D0061F16D88796C4BA0C670D0E715ED9330
13619BC67D712BF7CEC27CE0B7ED8D31A29D7F2D8884AEABFBF6919D7FFD1E7D
0B2FA582811CDA7DEB06661A2D27741CECA6F2956BF0F2DCDF5326BD8683B5E3
828D8A7AE0C2040DE5F9ABF2B4CB8517A00888053AE978BDF45C9B464B9DA129
0584B298711CB71771E933AB92CA36C6D06E8D4E51000F60EB69CFE870326E00
4D436C27CC46EEF80FA1A05AB90D788643BDAC66F405924BF40E49AE3D7453C6
30FC3431FA13B333D69F672BCD4D19F6D70059D309B72D0A48EC241A28AE69C4
8B50DDF960297D39DF2B708BEF605075EE15741BE0742A7D74895BC47DCAA02E
982F9ED1C700AE14F72B455074678DFDBED70D546BC7E2C50ED4DC57B3D87551
CE86D4E2DB7607F065FACA01BF64480CC5A1E8891B692ACAE9C6921FF496F522
F4F6B7362A3E60B1A2E645D49F8DCB88685B9321172315171071A3F8A9D704FD
FC4178A14780955A89C2CF9BA8E32B49BD096999887AD4D12DDFD616EEB4FC37
08B3E83D87F323E24EDF17B8187F0EB71EA7D10F02928D6E29D2F9F2FC89FC1C
20F741AD7BCFFE1FFF0D4758515A86D82794F04E7E9865773AF83D1611360216
3D500E1FC9C23244B8402D1A983F3DECBD76E17E95FB425AAC96FCE977839530
DFDD8B9C9935E7B787F601DADCC81385E9036778E69BB90B0D130A32445972FA
44213D14B42FA2BB0D4C4560D8DF4183D3598FB9584A4433C91319E3A1614154
78975E25D1E928C5867A495F88565BA516314A268E9A30EB41F7C771758410E7
D1179567B10FEED34039982ED5E5664949215B7B7C699903F93FA67DAAB60FAF
8B43F9409392E4D9197B434AFA1C9FBB838F0E570E8CF04E85BA16BBB3123ECF
3733A72C364FC2FD02F3F6970F6306B22213A308C0C5BC56711B73E44218A69F
41A55F3C8296D12EADD820721F4C7AF96CF1DE87958E94147897470374D33501
DA608DE239D45886741463E26AD685C330FF9B4020A256C0820CFFB71A8598FC
3ED02114F4C179D7B00C40CA23F99A91A601E5E290A8B8D528BEC85ED2AECB1F
2868B1AD53080831000B7B82E2B24477097AA2DB2E8385C7B35F69B7D06F576D
7570D2B23AC52BCBE12DA950703A90C352983D6F88861882EF3B6D43899175D1
89B06D743A93B49963136BB32D1B6B235AE5810F201E3B2C79E9201295016793
5869EC0E7889E8F98F0A8B4645AC96636979A8D75386EF83D072F76E195C0E3F
2B12B433D7DA1F634865DA6E5ED7555195196DB28B1A5318E868D3EFBB90D58E
EFD17FB418D20EB82747C47F18DC85145900305F3881436FF37CA806711890C1
AC5997F21A14E7523CEDB295474F3A38E8A031AF7237DCDC24831191B7FEBAA7
946C2AA4CB8888144889677B31D3C8C38C2EE39B6A5BF6B667F72189E90D571B
49F6965350470B7AC7749809795D33F0F3A475A8D9D46A50C126DD7C1F7BB870
59684FE70A0DE7AC63225592B42926CF2AC2CD8B3C4A090BB25FEBCE1C41A775
AC5C3DEC9DCCC7E4B2DE82CDF9793E621833FC3E9046997A918D26C871FA7B33
F0B669AFE85EB30D4982435FA36C73968C2409AAC3DD643E0EFE1857807BFA0B
97FA21F94E9C9CC7BD30C73E7F151C5C6505DECBAAD59A2B2158B7FF166C507B
49AAF6FA4A71C74683F2BFB99BE54606BD96D7A485AF1114173E61A36005E195
72FFAE0685C7C24E70ACB8564454277C41C28075AC8FDE7784E9FB3C39EDD64D
59FD94E698D0A65005A59FA1C74FC929BAACC1D9275B3C3CC4A76F9D5C431044
C8C0A3C14544F068343D3ECC39B6820E33508184AB9F0286C64F328339EED21D
83604BCB1609A7926169AFACFADE342458015F57983ACF8912B5CAD20ECBB665
19EE8B3A333B63D44EF29D334A64C61964CEF23027F94A43288B69A9E79012C9
C5064D6804B4B23FCE995D5060C9B13CA0FE121D17B57524F6D8E00EC7F51B34
1A01D47A5FFCC91ED4B7E13900CB00E970C83917341C8A74C4C04BE75CF00DFC
C413B504773D9A5D63C55D55195909B820B4965C880D6A11F2D202F1F959D248
C6D982B908FDFF6E6135A30D1F0CCA7F03E52F060655DED219AE758B5A5537E8
AD1DA5DD7393D7B8CBCB49FD9FFD260F56CD6070B9165275291022571AF7D103
6FA5C7935303AD6D0DDE22CC3126DA2FA88A174649A0504BBF5BA6C59C6BE0B2
BF3FBC77534627AC73F2027D99026A671F83624D4D29B082C901E3E1F32E3F90
B51313D7430BE1825C90D88DF40E7C91EF2A16CF64A53CCB1757BE376972FA53
7DF301CF7A41C8C4C3AB23EBE6039BABDE34DA37BACF547F38B832DF0E4167A1
A8C656D66246E89A7FB298A96DA2A9D408C119D51988265324E090E6584F3EA2
AB3D9A378C122A1C3480163422D6F9CC5B133CB1B2FC237FADC20659B5F19B18
932E563C8827CC340AC4350DD2FF1A3EA9F8F862396D9F990892C2D7E95B159A
68B1967CA98D2A86BF9753735383D05EA02D410D544F6F0B9B7DF3D97055E79F
F2C4611CD948F30F581827003D19B43A4F31EC8856DABBD44048E67806EE9F93
21EC14F219950F42BD9000A112D58FA8598C55080A7BEBC60473B3720C899A0A
2D0BE37D6A21AA60543F3470B0A8E0DA4AC95D118F3C68E14391C4E0D89F5A11
805337E9C92A7C28E1A786BED7274A1E87749F6B1B05B6CD5047BF5B6F6ADBF0
D25C8D5208E1E3019BFD5218EBE79578A072462EA51E09627186E9F40DF393CA
F0F0AA8A81AB02413A24D491AD308DB487846D17E9C3E95E5842D5FB7A55A92A
962F2AD0FAD8B198DD4BBC90179FE9329D97AFDB378AC89477ACBD92D1BA24E0
33458D3727ED4B961BF04CAC860132923ACE057116BF388C8C0FE4267213204F
F0F00D3FC0B1AF189101F02498290F371FA6B0A5A39B085713B13B088A932409
3379917DC337D433376EDD4B473BDA0BF7B5FB00F28D7848438AF0651F9C3650
6CDE24E3F717A5C387C64ED6809376C8C1015C395EA930024ED96A015B218CA7
FACBE5C83B5D279E14DC084DA2D3842DF0FDDA33BA2AABA83762C911AF08BA10
D43464D50EB5705B5F8F86CAB5CA3879405DF665D0513D45522C23DC7D7B9AFC
3EBCAFCF7D634D4C558A8EFA9DF8C2EFDD7812846B9DA0C07F947D7524D37DC6
3A400F593F917DED24E2115D16B2E47E3DC85288B93BB635FB4D12DE24BE0003
908E91DFF2043E53242B1D8E6D2357291A04E7287731B70785C23DD9E87512FA
8954C3ADE73CF3F9B1032905B4783C306AEABADBB9D5FE2EC20FF1E5D3E208B7
0A82F3812CB70902CCC8A0CED4EF40A73AF7245A299C3D4F7F4116B07F162570
7CFFDEDD5CD6771A68E0E00A028B98F990B4D015153CCC2E1853473BB9B42C3C
DBCF7C83ACD62213BF6D8A8C77FE8B2061655349FAEC071CBB4C168386ACE8B2
49503EA4EC512D72F932B4AEEE375FCB3A86BFE57FB3461B4EA8E3DFB5668B7B
3D2EC809E055FEC45769987DA9CB3DB593307B759B9343D3D8D13ED162A43CE5
ED0110C946D421B421FB4CA8C5B997A491F8A791216C6FA9A62D337FCD128E56
CD8B85FFE824554C74679B25590F079D0C1EB4C3D40B013BBCAA723296E00046
3F8247E55F8E9CAB0E67857381ADE676ACC5E3282A3F2F35F415C5B593CA786F
52C600EBA2CC4A176B1EE20A0A0709D6C9E30AC4FB02F118A80F39A2D3A7C748
664D0DF3DAB0C546942F887B0A495CDFA6DEED544D78E6FE09001BF7787E69E9
ADF2F5F855B1FC4D27D848205648CBE820C1EAFE8C87DC6C0E2DC5B99D42C4EB
08FDED400931C8B5DCCDAC5D47BB71CC988759AFEF42B6D450BE2391F43507CD
447581FF932F5B55D4C8CE6C8C9F8C6B7B9F00C11F5F2AD968CB3E74C7CEF003
3F6F981F50D27DD221D487447AB5ABC9E68C826CD0876A83184F0F93C950BB98
309C5776493DBFC71B73568970E19ED65EE83EB3ED30326F19B25596A888D753
0E73DBD07BDF74D0F6A2AF779C4CCE2E00F837EBF22661AE5630B21EF71E8586
B8BD977DF5C00EC73685E5ED7A0CCE16D6CA98017C7C118D0870FA6250548317
9F0821E1071F912646A17806F12BE0F07606DA710885C3BEE0FCA40901142B17
1E1FEC7570BF24516D1890C856632FA4B6D70B90FF0AE61A1A596CB04C7CABC1
D37D26ECC85EC180EB8EED1A6E86C1600C9E7FB298A96DA2A9D4F8E755E355D4
09355C8026429FB381D71265DBE5375B06FFCD490B11631704A06E90A9F5A23A
3CE8A015130A0FB817DE38359C63DB25979FD4AF92BA5D627FA697E110BC240C
D8069D8039D903EB4A88921D8ABDDC55A6AC76E7D03FFA2A1F4EC1E8E134ED3B
C56480C6961D4C4C4FD241EB727D31A47273D626EFD9806976AA4D80E4FB2C64
C79C4E7B77F70EC7EB8300D87DE085F5FD245FEBFE5C19D5945CC0953AEF4F24
194538774B4821CE2285376F74BE1E2E3C49DE611929FDC28C23B692D5FAA6A6
68B2585A3D6006683222F07BB1F070662DFBE4C835B057D5953BA549C0742D66
1C8D6BA1F02D11E57DF90EA99D68B8B3480E8BB1CB3572CA7C2A2A474446D4AF
3FE8E4A61F72B56377153D0B890971A824936B618AF3B0E69614C2E386FBB4B4
7EC80423384A0DA52C39CE68A552AA47F3854D2757F509F2B1769D6E704FAECE
7E1FC3DE57410DA12E707F36C2DD237344E597F9CEC4F3C67A22346CF1559306
18309753D179022FF6D52B815B58F2A48BC4D4A4311F728C41748823421F123C
9A24D07C12FCE3DB7EF5977C1E1C778CAB39F889A684F409BD672C3E6A26B4F1
922362F53AA09B150479161D8B2F5FDCEA0020FDC7A51DA45D77EC0CC9D3D768
CCAAD341ED80E67F36FDFAD167F9DC5F32566CEECBBE3EDC5CB643AE0E6AFFF1
E130BEB511A29E4F5378B00283F43C55605847ECC0FD7780692ED2D2EEC1E5FB
3EBE07CB1E5508810670EBF6E45EFE50B7A6FB590A75D9D0DE19C80384B80762
58813E639A76CEFFEF39857DA64E64B2F6904526F63A472B28D5B6865FB24D28
DC0008736A49D1FAA5E68007FB852E0A92ED6D704F15FF0F863528DB72EF2206
F6875890DAF09D18C3EB567019261C42C5D4291FE6CBD829C4255C893F7749C4
E7B6796855E211E675174680A310B15DA4EA154E2A1ADE60DA0AA5FD94C653AA
28BD84E0040F2B3660BABBC1DFFB65AA474FCF20136A75FFC0764BF53506D27D
54D7BD1B948B1BCC4E6AF1E38DC9C3CF9CE8E8FAF564CCA85F904153788A60AA
13D1F096DC52D96CFE8FC26805B4554ACEB90B961BA9B869A717F116F93B2F6D
29ADDB80A225B7C1FA63F324DFD34841FCB3F5ABFEF28F0F5E7AEEF011DE1880
F76492A66B36FBF0C02BA7606C632D584CD136D861B615142BB1AF9613E538CB
C4A9BCA44AC6C1F999F576D962461480859A34ECDE8AF4FDE5AA1B8C1E7B19D8
3F738F4D305CE85F7416979CD2644B2254BE2EFD56230A94692248D224912F77
E5C213D710BCE1BD4E6191E9765C4CB18671307933945F052757D713E672710D
EF408694402960947DA3B6BF54DA82FFE96F947F06CE2FB5827F840576BC0A55
717C052F0667884B126F54452B0051C282B4B49CD3F7636186D1DDCC4C52562F
90F81CFB3590EA7512A84CABADE67A950C37F5F96019FB2822AE4DFFC83C70CF
FC76259E25860A37228364E58AF0C35EC708D48FD341C439D8C6C9D20AE0383C
5364033F2369A0D6D4DABFCDB305D9C4587AC495570DF9C4F05525921AFF53D8
122EDCE87E866DF89959D51C64C7A1E697B5E0C1A4754F54095D1CA40B9417A1
DB1BC9CFD7A726E5853FD36B3291E4606AF1447602483A341A59A1B95EA285C9
4FA1CC5B8D9AA0DBEDBCEC5599C64DC58CB532690B4BB9EC4E1A8E556DBD5F54
C609517FC0AB69CD2260364701EEBBA2CAD73E31BD3229C5F8931981B7F9C278
F0853C066AD72F0C46763A0BE692D47598441E7011C41A69566CDD9FD561FCF5
AAD0873312846B070B77C6D79C45080C9A4CCEA3F4C904C19B7456A83B170834
69EE367CC1F88DBD4F49E1035E0D4AC54FAE46B09A0A16D02CF31590EFEBB586
ABCDA6A329FB5D07459B7E6C66685144EA4CD42D795CEC42606A82964DE25BF8
4C229C62E68CA7CC2BA576708AFEAB29E9A7CBE0BC90D0E45B0149324F555BC6
CA6111D592F4184FABB849A3676A8D175D44E71B901828AC2595BD123E8C062B
8D1A9E1E0D8BDAF66CDAC488ECB36B9DC8744E250A9967E7B70BE19A5A755A8E
F2280EFF9E8D6EBF66746CDACEED55FF7A4E26CD6CC9229D5F4185B55E7E81A6
6D846705F7C5E94EBA49FC928048FC6E99DB2CAE37F6163465973FC34F18A96E
3BB2ECE5CB8DE317F7C1449E4F6C8AE7D67AEE9BE9CD45EDE11C79F0180D8145
9D660CAB4AB3879DC6E8517D66FFCBF6BDE45B9E7C914E0074C4F6D3A398A33A
4BBBB1A93834B075801F323729C9FF29E681FD7B0C080A5B57E0ECAE086E3FFB
5C4B56B45C48662F6B272B13242044C4B1C222AF7C60C6CD394D7C4BC204610D
3A92541054C10CA2A232F44B216B0A7C6B898EEEEA2EAE31DBAA343542586906
C3E0A204A8F86CA2DA812DB4F23DD7676EC3BC369E7C89DC19215FA388179DE4
D224F19182BA7A3F36D0B7D0C8207A291FE4C18F6335FBA135BEC3293657E644
F29B46CD6BB7BE5CB0BD793CF3B35B13170730EF3ECA5B051E3DA7AE134145C9
BFEB0E526D408712B8144152E252843CA29B55BB99CDE952E807631756B1FB6B
85AFB3F50E53CABCE615BA7A3D5E4110030E18F7DDF58552684C66C94E84ECF4
F361EB4E78E836D10D890EF292E9729569F2DEF33F9469903A4319D244F00164
BCFE67DDE7206138CF2D23227DD5C8A1AFCD72C564F315E0AA4963798204BA2A
9A504B2A0A92D776A5BD5C811BF0CC8B22F37E954801A7D97D076D5FB3904908
E5F3F063A38EB777CF374ECAAF088A952BE760F64560F50B146EC0F3B3FFB1F9
D7B41CBE22FC832602DC5027B4CDA589D4204A5A5E0722F270752C6BC2F91D9E
724CBBD53982E2FE82CF72A27FA056D75E4289F24E742ABE0538FB7A82BE7DDE
F5CFC3046EFA5B2A51660FFA663695FB3C03D7569D309DE3ABDAB022882003FD
C5DA687CFA43C0D1856C461F97C7AEDD6764A330BB06435612668940B9251CAA
B8CBC7DFF25941C916D78EC24D8C2C25B06AE061F1C57DB7401634CA440DBB2A
E3B7BB1090E9EE6A0E337262E9EFD3BEC41F18FB8C10A8AE44C653AF020512FD
1B7E8E43D28368D77C3D743973E5CB4D240BB3CC3086401733F5FF7F1CFF6564
9147887DDE557DD5238DAD31180C68D235C06D6AC5FC2041759BBC27CBA2D9A1
013354E76E7DB866A2DB1BFABD5116873370FCB6650237E738E5FE7EA7CC5A25
C793F81210E64FA38D419001AE35BBF8E45CB1D9EC09E266A736E65AD3260A5E
EC79FE5C0BF386C4D67F02904D0CA4B16C18005236906B6B49A9E2D48836209F
D44EA76C173A4F491719539A584A375CC8B9C4FDF77D301680CB83F8A0F91B98
5F869B5ED92BF513ADD2A34677D5EEDE8D294DE5D83F9119567424B26FBE1E28
7E038AC35FB8C52812EA348D07AAF2D7F7A790A0F0998C80FAD9A265F84CA5C4
7C9261842A53247A6E43E75057A27686746397D9CEE81DD6435FC6A7C2B91B67
2FA23D9F875C001E76ED46247175C6305BCCFD126A1E65396D8881438CA22333
6BB445E6D36223AB972791081FE59397EF9D69415C6A41BCA0172345439BEB39
CC63FF75EA03F6F0D8FEE5282A3067BF8487245D966C780A51FC22430F50B552
70E6DC0A37FE1365B3985DC2DA7D7E68619337185BDEC009B7FB37CE6941F05A
BB349E75AAE8B306CEE64EC490589716A4F4719E66EE3C64292C209A832AF504
B1BCEFB14310A12A4D2A05B5C1F8295AC799CAC6349A8030F02E0FFE6D44EBF0
F8535ACBEF0CE92612D8FA3294E9F0EF9550CC37678C6BD6AADD455B57C8C03C
01716CC80D23F451D1668C9E1FE4DF68E66F83EA23F59A72DAD591D11D35F395
6C2066C05199253CDB908754242EC3157A5C55AAEF32B582FE54F0B93A85F0DF
C1C2677989BEAF448A1A67E3FF1DCC92B8A4010A5FB94633C8EA93477BE3F21E
030748189C553B9F62C83765B0149330CA19368F2228C2353E88B786F963BB76
469CF7937893E2AF7F688AA11FFB6F594D326D48E679190A0FAE0EB69A8A917F
074F5B3644BB3F93D7F96770C73499AC0AFC3E24CDEC76333C22FE29D5C492DF
19A5B715F981EE2189FCBE33E2089959A53E463FF0848F0D3340465C49BDA8A2
B5B1EAE737051C55625AD1F9B8F9966E65A7C94A8BAEF8B4BB96AA7C31C873CC
0C3EDFF7B23D8A22E7E602AB5AC6272165A2DBA4978322F3B706D42300C96FED
2097F7B1DF019A4CA177E48365DFDCC4167EADCF5EA73F5E363E2D2045125840
29A7E941946AB7D45710ED4396C28542A5F062F69B935148E81C557C4E1B77F5
441CDA5B812731D40F4BBBA3557362AD0A39F29E7E10E5CB790F747C8B2E92C0
A1800E4FEE7E5C815A19621A9BC5B02F3D459D3ABB1719EFA24171D3E508B67D
68BAF10B94B6D059AA70FDA6FE7132D0CAD6B7B51706DD3D9048D46BDA26C9A1
5B8F75F819A88755E006B798A1373B9185730E096282DCB872B6BE7EBD89DB74
674BFFEDD14033E6DB8191872EFF39CA0EA66E0614FEA789FE9DDE579B132527
440759EA000EC86D72F87A49E884E9A4FD774262CB5BDA9EB000BF64F5721E03
3CA5E70ACD844E3367DE4DB71312CBB85ADD21D5A2A0A1D26DA92EFF3D6DBAB1
67D32631053998B830BCE6D58A1677CF01A78FC1DF2E6FF27F4E59D018237EC1
D81975029926E349F1151289F0E62B8EFC17495850B3DBD091C7D41B7859835D
08CF0AE8B33D267FFBD51E0BFF44D56F0B5A0AB3CD1F01A0271DA66DC151B78E
219263F40C72D7984425606DDDE632D7AD19AB181DCDD8E9C0A421C180606587
813B4F7C133E259D56516E8DC4F671A68F8B02EF2EF44976FF68DF0865B2B332
91A4BDE955497048E5D5D231F76C796CD41A80EC051E875DF6582D1CFE7564CB
E625198005D8CD6BEC58F53387ED83EA01D92EA30AC2431DEECAF9E7EE24F581
1306D168A9E62FB5BA880D1B57EEEB35B75B8C3DE78EB2EC86A50DEF8E355479
E1618B7303BF3EBF6608F34B0926AD849F8E2A121995BA915CBB688C4FF28BEF
E902A41FEEE3E1240CD34EC700F50CAD202317FA4DDD599A38B3E3962F135C9F
A0B3301CA9B795626FBBEE449CECB32CA889DD41B12B54E4A5C242AA4314B9EF
98E5545E087E7A0A995FE1F23ED1AEEA20BC9A9190B3F865776B670ED9D784A1
5C93FDC157796BFA56C70AD051496DF4145BE31DCDEB8A2ECC761401B5862B5E
440E30216C2D17C277A516F42263BB54CCE729816CB5CAC23A2730B32FF379FE
170C38B6A422B7B2B1C3C2A125975271AFAAEE9F010E4C93C08FCDA085657E92
D98E9B33E1A1D650913A7D988627BF757E7E3AE3BF9D3AA5AD4F5C870074FEB6
AEB27F89F410C8CBAA8F91583D376801939274327C30CAFCE21C74ED943A4EED
0C1B3BD32479CB4B6B1A32AD120B4BBD285DE4696CB03F7E3687C5F74608D60D
1087CD690D714452D9A6EF9AC68D884E15ACA3B9B321BF59913E026E132E8966
C4D5790BAC88EA178A5377C8956E753851CB3588E22936FBFB63A58300298B12
FA958EEF981516AFFBBC84D27BD1ABD686D1351BD5AAF8DC7D52F256FFCDF706
B456B6886F5FF5F416C079AED2A7331B63B178709E55EDCFAFBB55CEEFF1CA96
F54D844FC95AEEA4C65E463AC3961D2D195C1560E30A519BEB2CB6B31D984F00
72AA303D33D5478995B53381864BABD8FB5A046D818FBA90295153CC3FF0A4FC
B3B2F24B80FBE15CBCC2B4B15DA7F10D8DCF4A96714FB8C4C3B99D7BBD90085A
AA33E69BE4F483891FF5C525ACE7CC2B63D416D45E95601049B03FFAD238726A
EAFA203ACF926714A2BEB33776CC55ABFB0C4E0BFAB009D0247C1E88864524CF
52CE85F8A8C30BC2D5148CAA77CF2E2BFA2DCFADD10B424A89E22465768238A6
6AD71FFBF5C9832A8825D09F038D0ED98EF867646E3844ED0AFCAF62167373E6
53641BD62DDB9C5117227E44F8CC4B092D9A5272FA6A5239CDFD85C441C0D7A1
74C40F2366A89977662DFFD6113D19B43A4F31EC8856A7DECEE7309C0D148694
C6E62DCEBD8D3032A07CBB36B8FB7CA00ACD890470A8FC608A3D44DD192024F7
346872E84795059D0A12F0E2910282ED03A0C89B0EF64BB3DA65F519DD492447
5D43F089FE982C7C8890636CDEFDED3CA00B86C57DEF55FAB27D286705F0751F
9A6B4962EC51C9B22D9B72E83ABD18DDB885F3D4D1A0DF6DD22A6A57ED89C761
4DF9530958B6BA409B08EA3961649C03093C5B0FE378D161FF73A56C086FD9F9
CEC0AA20D8F661B73136F9AF343903EAB35980CE75AF42B28158E8403547BC45
785C633F2214D0F78D2446412EEA90204B4D372CA137C3041A2687E9654E095C
CEDC1852686CB041E7235C141BD9C57340228B575AFF7F1DDACD9319FCF53941
EE41EC16617DCB9BC822B73985B080A7AC7A3F8A6B646524714534463F25D7CB
28E1C3E568D0E8F5DD1D4F087208A3B2A7A02BC29585F87992AFD400D2F662E0
2A8C44B6C8A285B25A06D846FC7990129466841B773E25C0CBE5D32187979E9C
C09256FEC0FE2F17E6C5678B864F394010FDE34C570D7BE76A496A58242F51E7
321382A4DEED6613594454C0C98194B899CFE617259AF5BD56A2530D41B177BF
FBD9B94C2C008FF74A20138BEB2D0EB55783332BDA82C4109E89E7CFD5C7E6C1
84E7BB76309251BE2C86DD8CAA9E18C093BDD727BE5CA54B9CCF4EC362E7D6C9
C2FE76B83BDDB2CEF6E05700E98E582041D0AF857E065D555CB217F8857FE0DB
1F6F94DAF51048D88A2FEE876EC79521622318BB6960F7588E6392FC1924E688
CFDEFF949914C4B69F50F6628F9EEC6842B79F7A858594FB07D42C6626F4AEDE
9AAD2C8716CE9AB3E55F7F946C3E8F46B9C2DF790F79269566BF9C9A6E54E6DA
D192842C7EC50271156B4E7C01BBD70995DF003B7576C0569E58941EC067EC4C
03A2F8D4D19690C2AFC60C2BE1BA1FA26A25992856ABBD718CD5D9CCEBBD7DF3
9F8CBA1284132F1FC2EA71CC5D2E2A146A92B5ED12F71E635D4B3CE2A37EBB06
700474F4A4F93E85707759EA2C174F135AC78F06F126D2F0B140C4EDF6BB63C3
1D86915B01FBE010C2667F4A82EB7100A9CDF235A014F89A36061AB2EDE880C3
0EE66110F3D0C57316578102AF0CB2E410622C131CCFA722266A137D29655E48
7EEAB7641E11A4EC2AA57F8C49E984886D61B62C4D0D488CBF10A7EBAAC89919
92A2A1A278B2E9A7E7C3CE68481869E5DFFF61B392213A1665DE12954F43E535
9A69CD68985E454F6E3AE5F7ABF8CA57F2147A5C288B50B295E46F4C3CEB4235
33A897C24862EF358A371966561054F7CFB5986DC1160A226068B03655C718AB
A257D825D44B6B780E0EEC50DFD4D90B56815164D526CC0FE4D543A62F8ABE3B
C2B313CE8ABD418206110C8A4D2B22F8F3F724622A6E528AB762B09723AC952E
6D0DCB7D728719F0CEA00174DA3E5CF4279DE37F1A0A5A6FDFD913164AD228F4
70109E672CE9991EB8C422B5C54257C66582997E8247057A005AAEDAD9D7CEBA
399B3FDFF494D78EEF9EC6A8CBD3D463346259844571401A131E488A004961B9
D773E29046C08C4908E723D17040EAD128DB37141ACA92AD1A23112E7D266EF1
3D18FE4670DBC1A8E3BB231F9B2A38A39BFBA973D6A218C80AF10042B24BBBE7
88FD518078D34A5FFF03959033FCD255AE1A59643044E28E2991EB6100FD0985
C57E723DE55A2ABED9B40D7BE674118CFEBD65EE479C6E657A4D88741DE590A6
70456AE85070FFFE1497E97C252D233534F47521E168D225F364D6DC936DFEEF
366F2F37CBA48E2A26DC6CE7C3F1CC17443302E6EEF7029F9A94998C6CB80C88
E3959676E966A4573C2D53384BC8111436058FC9A75D9A506B08D31C104751F0
E542E38B64D473A4A2410CE61ADACDCE2CA7DDEED15CA41DD3A4AC1A5BA0B78D
6A72C65D92D917E2BBB8F354D27DCC025700000D152E42DB1C1ED509438C43FB
9C67BA347C03BEF3B0585CF4539FDC66915E2211707221140F755E6A20B9E4CA
D41C13CF3178AF9EBF109095E03F68667D61D91219C131EE556BCC9C4374EA6B
2CC82331182CA7E70AFF5B14B02B75CBD0738E35DAD8E60E29DF9DFD282B79BC
3FA1308AE4D972D368412B3F534EF0BE0DEE7E713FDFB10EE93517665826A01E
9F0C9B45011D89EEA715B0E16D639A60595C6A783B34BB6F072598C8320FF03F
5CDC3DB656367432F670E1EA6757CE2CB249D985D552F7E5DC23352FD902BF6F
5B5CCC85FE887D77D4FC672CD10024F331FE72D5006B5CB38C7A634F0EA83305
0044E0A9AE1833F6EBC9A1374A20F1FE4122ED8F1DED23AF9D42E7E92E35F3CD
B35836193EAAD4C886D6A91ED4903EE143F0FF84E3670B8D1D046FFC2E835C45
ABD01D6955B0F8DDAC8BE19EBB36D94E529FA6053E2BFD3164CE25F9A19F1203
60F93E7BE38AFBB5932BADC25746930017297841A20A8A19FB0824C590DC62DC
57287659B8D7B2924AF04D875E139FEBB73B10C153AD868EBAE5DEAE4A2FE1EF
EC2DCFA57BB0D6E3DD6C02728F0C06862DAB8EFE4893B9AF7EC84F69B0C95D4F
B125569A2E83ED10C155D1022B59D9410A2BE863B27DF4F4BA8D2F183DE03908
AF2CFD2E49FBBB01E388C28763053F9E07B8A1F08379922A63779183DB972A19
91DC659D83263F3BF24615D47A897EE8A1F37D85E9D984422D428200823D674B
1893F0338488B1D871D59811D25FDA43865CAB8E8A20A9326D2B50BBDFC5853B
A1445742A6C0884BF361B64D327E8645F44A141B32A95B595E32FF28C330E73A
2D5F605E33B1B0E008558B4C943BE06E64726A02C5C91F41CD1B73300A2BF6AD
17D591BA5E7D65FB18BC5BB7642593932C9E0DCDDB3486B13411F870A4523AE8
E16F422AB07D8800C1DDCE59A7FC59B541513CD6FD08039CF40A1F5B90A8BD1F
FD96300841AF0F3A67E1E6093BE6DCB400BDF8C5B29897258AA809245DE5FC93
88B2DE22E4845C63809DD18045D88B67929C0607DCCF8B945948370BCE1B20E3
79D0D0D502B6D812D8E1177725E4F0DDEE18080D23859E762C5F0F6F6F786A20
316B992F547DE9372FEEA0BE4056DD623AE6FB3708C00A4BDE3339EE44F33A75
C620A66DEA010BEE7F6DC55C0F4705EBE271BDCBEBBFD886BCF399324AE68381
B4DD8789E1D35D4AE06A051107EA4D9688DEA6034994F5A338B85C4ADD0A28C7
A8FB765C4A0148329DE411FC4B41FA37916D6925540323301C441360F84EAA40
EF5C7609B7B8A5E1768FD239F48D40506776C1C3A498B8A36141E4095439D7BB
F994D583A65FD84FB2B4C34E8AE8162B8FB4D09237C2396A5A7BD8631FB1A17D
DFA5428CD87225C7FF28FDCD4FB898A052A0B1A3CDD9BBC8114201E039610155
96BFDCD08FBB40B1153B615AEC20A9D8AED089AF77F0C5D896228A3AF8A9632A
5423D379142BDBF2005786A34AC58D500D42728C7109A9A0A6267D28A0C17546
2DBF1CA25228D7B6683B6B546C18F4FBB1CAF8E7A179628E5902565EE38D5F43
7D0459AAAA1ACE9E4426114DD821579901B8563C2F663979061DB6A6B5C553A2
3C7C82C170052C027C1611FC07A3D282BEEA04EF134D2709B24E10F6A831AAF0
4FE0920890E7C377BD150F134E5BB4F8D8247CF10521AE6964C09B7B25857497
80483D682D172A2CAF15C4D2B23690AA3D8B7CDDAE52D1D9781CC6A9EA0E89FF
F22F9EEC3DEACC1B925AE1F57117D2D4C8EE4901443AECD2BACD55B408CE5CAF
A6ED87E41DD3EE3DED90C3B3F8A39F36447E2C7AE98CADD70F81D892B4D2DAB0
BABA662175C52E54DC457CFB38451B2B5A1C0E218AF54C91AFBF84335230942E
F724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA21E0B223056560C55438755D2
43C5F055EB9D6BC5330309981250CC5A3B60478C7CD7C2D18483F808522BEC53
2C364A2A44CA18B10CDD9DED32A96DF332C5E4270C99C21802AEB1DBF2586214
05F4150E2D38DD80F3D2022360410B7DD8D11FB10DC168A704C2C70DAEC483F6
9427B8054C21C8D7FAD2ADB181B67A51495543AAC99F499FAF0AC3870220EB33
99E9917CAA5683408D3AFC338202604B9DC93AFD9020BD28B685E2E5D38C7AEF
7CB6D89FE4BBD042F8F25827C65646C135BA63DC9364B1D9CC46A7824B40EB00
EC544A2B7421DBDDE68976BE50D33C45BDFCC21D45FC95F4483FED80420E4BCD
787F6C1979B65F0158AFA94041A69E4805ECCE506F008FE43CD00F53745A645F
5A8D84FB1C177AED502F9F054D68CB91DE636FC90D6677A1F2676225A2299BC2
E64FAD2F51D2218C78C2AE6894E3E1F1B36A7A8D2F5A2E4990020448BC4B9263
3BDBCF293B2A872B82D007FB89B9FA1CBA7297A44D45C70F9B59C3CDC8D90DAF
45F9998AA0FF1D6E807895AA123F9C30FF7F2B77E767A4C9492E72CFD9691206
B8ED6DFFE2645458F781186DEE74ADFAD3428690834AD9BEDC9D691FF7AF4A24
38EA64D80941119347496ADEDFA553D014F5F5EB1E3CBCAD06E8CB0A59587578
9BCF90AE3B9D2135B92AAF2399D059DEA52769871787CD9096264236F5D60D4A
2BCC3285BCA27120C75242CB2E3BAB347AF910C49850701AA5003DBE757D5543
90F271267AD94101114C31C9004D74B3EC7B0FF05A9506320FC2E3C83B2A6ECD
6224F253AE76ED68FCCB2D803879CDCAD710A48899F9B2386BA4AD114054FB45
5C41740DC01F0E5FBFA7E3B2B839838BB87C04841CDBEE459B73A91B3C62494B
6A54765B2C56A6AD522004CF1952D55B0D53B96150EF6A2BEC069187F54D1534
2F45D4F7750EDD2F2A55A4191C68077EE40752B4110D0450852399414A067A89
E82C2813504CA1EC0B3F467B33A9A1DEFB7346229493FE90B484A2F92A69CAD3
FFA9AE559D3043D712817C7C5B702FAC227FD4BA7F3C8EC1D91F691B46FD11A6
1E5BF56106EE7EFA0BDED029D2273032E1C8A5CD079CA7EE8F3111EDBB246DF8
911317DE4C75D695826A465976837FBC872405B7183D2385AA4D74E474158305
9D79F6D1B7D149ADB2FD8E312D719C507DDA1BF0CD988B612683DC3BD70EB627
D06BB45DA78C776FB0386158298CCD382A5F4F9A5ACF9D140BB42BDF2B568358
7B8F7263E4C9A9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA90634139E672CE9
991EB8C422B5C54257C66582997E8240BCAC0AA57092706083F71F6522935130
98FF6B846BFEB1BE8FCC79FE5120FF31494597ABC86D8E92256042E3E88F696D
4EBFE58F65127075032FD5E4D0C3953C9493D87F46CE4E9C7A543364A9BEC4C7
52AC024E596C0C46333C5424F9C5EEA9F569F1E7759F3B33A45B38CD6A223B21
9D9978D3B9FA37E805892F1E7EDC7909357DFB4C6FB6446FD6AE83EA4BACEEF0
20203FEBEB709BB571CBD6D51C00B349268DE077F069D661B4F745DC04A3BB88
6BB2FA71A4716FF440DBCEC17651ABEDECDD6997E24A67EB7BB02BD78BB5FB7D
35D0FB3452AD8347A2660B90A70A8821E9A558D7CAEED316C6835207E8C79FE8
C1E98BACBDDB68AF7CCF8E9071B0F6F7F52DC619649FAF3BC7D3F0867D1B8D78
B9A9DE9DAE7EC295EACA3E7EA4F5ED92E78990A082ADB3A32F00A57C05CDD011
119EA28A3A8F58803E3D52DB586338B5DBECAB66E8AF5859BDB0E2851C158D45
F5E84699D182C0739B8D92F22E3DDFDA20460C55C375A40A34BF6BDDF79E4E20
4506038E76EC13C6264E69B55D1971CD164F0648DAFFDBA8DB8B2C4487DE9EC1
722AC14066A7B4D2ED8DF6B60D783D56905A5D7794904C0CB95E2AA83517F6D8
F18BA8F88D8C17CE987A826A1B2C52AA6DA4D19F499FDD49D77B928F1470EA70
2423E369484A4945CE4F1D2471A19E4D51F34A07B29F01909B7B03761FF2070C
EDE575D64BD63E250047E910F5587847B9B4F6BC43824FAEA7E8C3BCA79544B1
A2F756D81ACAE235A58C64DABD11B45566C1D73A8143C8A24C4A470432BD9892
59DAEF7040EA969285AD222A233EC61899AD22102AE686821E0DF33E24386372
06A7941CF04748489B38077F0E00C613801A5AC8307E702B74FCA897EE756EEF
7E0BDDB0D01AC800091119DE5CA7DA8A6A6D87679CAE8517027BCF159C5E7609
EC3AC708FF6816598772E12C1DF8FBA0B885BDD576555B4CD763803AE6795B23
AF56AB104E479AA26E998BC239F96D24C1AC6BE435855143AC7AE467968540D9
4827AF3EA1B659F520675765573824EE24E9191AA563B6D8D882C0937B8DEE3B
C448B437A13144C9BC332284E34FEF7DE05F66C22AF588CC3B5147FB15E1E8FC
722D61478FAB68C1459E898745610FFAD3AC143DC9CA8CB1C3931E36AA839816
4706C8DB3DC67DD1CF609CEC5C5365D06BE9AC86EF06B769C39ADE17F24470C4
A6DFA65F4AAA7A8E15FE09C40062627895DEECB32E5BAD12A1D11EE312E98680
C601E8728B9458990C7913426DEC6B5C057130D3F2F42BEDBC3BF495DF819FA5
18194C6D281CB9F6F7900510112A6BCB026EE9EEA1CBCD4AA143C9D5F48BC15D
9DD07F7E5B73E8F285A967624AB240C4186FB5E4720060C9C324AE573BBB163D
D66E89F2C4E2B1A15300BB08D985C4732EA4AAD3D5A9753BFEF2BF2C41938C4F
0D045A0A842B57FFF7AF3CDADCE2FE6D5B7E562DBDCF13F0603DD001035D601C
AC8F4EB2F16F8765614227C71C390C36270DEBA1C8F911AEDE793A435F04B0A8
BFEE7C64ED526294C6B424F1D39D11670BA89B298DE40E91D1CBAED9068D6715
2D4608394B82E83877E96D5FF7F7C34ED8E3DD5B6BF3B46FD6A73D31AF122A7D
4310010C92022EC3DD1338B8F55BD530F47194B01D884B979CAEFF660A89F5CD
93137BCE2E4D53089C9246ADCF057578194EC0454DD5932B91F6629398A701E6
BEB6D52F1957018202EAC9BAA043FB12A0038E1479E82A4A8EEDED2E000BF865
EE6635CDB53BA93A15B889E023A11B6C2A35FAC32CE889F7C7674FEDFE477570
7A713C702CE4E87755EA87E568B421358F3572C613CCC6B7436CB4445C100492
702CEEDF009F15549E0A5D45A0357FA8A5AC12E289CF2D911B68DB1A997A440C
27F6B3D45356DFBEB0F12864B2287030B520EA9464C8203C7331FB8C8BDCC356
4A45CCC3B4495DB956D9BF8C072DBECDF1C185B123EEF35D8A96F1DCE6C03B4E
655BF2A7957D95FF01CAE1DC020E577EF50604E422616D69367A334E3AF55944
56DD2B434C5D69D15D6C7F4B7CE7389C563D11219A887F01853AEF9902097F83
B5AC7829017B484553D7C7E5685138A0638B3117D67C4856DB7836D1D58214E7
4109B47B0F8F4DF47C3C6318BC86D3EEB72CBECD423EB147F95B5ACFEF12D4BA
B6320CB7B552FFB89F11EA22D02AE6333848C9614B0C21A9AA37B4AA716C3480
26B467F19ADAEFFC48586767BB97D89120AD488D17416BC2446D8D29CFE87A13
DF41A2BDAFCC2F87AEF29BBA757BA39F789590E188F3B51268E5A97361F1BEED
4EB7AB720BD16C78AAA9156141C8913816187FCED1FBD2BD846381BDC76E9AD2
E3E9368AEE542074F769677FDF29B278DC3D32E7F23B5E746FBE1F627334AB52
E4B3B65A79664F68BDE4C64CE7DA1DF14ACD0C5B0BDCD7035A43FCF36672B26D
FA2E2C5EE64D86EC95C0C49D884ACF4F0D969ED7E4CA7899E9CAD8F33F06D6F7
1D6A2F517838D91D5AA9C539030CEC08E8D017598D893352D5DC2B4D533B381F
6EC7300FF7D90CCAE57F7E5C15B79A3141174D6474B8D942BB7A23FE0FA65B93
3B4EB4E7D40EB70E7AD25446F9F7A9D98532FB3D3E71D806CBA34D4B7B79D84F
EBE1C5DE05E36A7476DE01228623D476A8D13E0F72D2266FF52778C8B5DFAB20
2CED4CF9041E5976953303E6FEE80200581B84D0964FF916AF8B43FDED360191
CEC83BAA01CD552809BCDB1E2A9DDE42E266DBC47A19801E80EDFCADEE666BC2
AE4C6272763658D594A4CA2F7E23BEFE0FD3EE1A28F48702CA3F923545B9AE3C
923A70D2F47389841D3016F0CA1569739FCFE207718EB549C2A9D12E4E1AA135
E4FD38669B8B6EB70D2D210367B112986F90EAE97327B3C165725EB3B5A517D5
6923C01763DE782BD850FE7A2F99766CE577FC7F631C44BA1580ECAEE40966BF
61E3C876048B1577F40C5E36C59141E2A21D36B4E996E4C1BB63B5D2699FCBD2
13F8894FB4DA60EF4C53A3C983853B077467C5A7393E9A13EB8B2B806B1FBC94
3815C8DAED0BDF06E0194F2AED448580AC6EC05D54624C9CB4F376A29DE4DAF8
72ABC3B70547FB15A3D0F8259E8D41E0048FF0FF545D0E091D25F12FD862AC32
BC15828C3730F5ED2E364B010102E4A57C330440ED47DA055E648FEFE45CDFE8
052BDBB3238BE912A6FD26631CD334986D17A0C43D43C1B91902099B69BABAE9
DEACB9CE407F7772AB94E4F12252414AC74FE5FD9EAB3E04885CEAAE350A8B32
9E33CF5883E6A0DDA8BE045055AEAB0FFD9AFC6E7195983FF42CF1F4A344FC04
4768709B59AC41BD4E25610C0D368079BC7966B1A383BCC2FDA171540ADE4735
7658E317A0F3A583FF273B808B097B37C6512D8C9336E5E9C1F85E7124EFC3FC
591BE05F24D378BCFAD9C38AC677057FF24124DE951F3338A18A996060694458
39E93F31EDF6CEE0ADEED41698F04247F8E44AC7CB6A8B3DEC093E3BB586B8C3
74838FD1D076EA6D4F6CBC16FEA6CF9136A85C25B3AE21C75D34A8E2CE1B7A53
21B41DD5F71DBFC7F7ABDC9C5AB395AA65DAC62CE16827B40F1DCA5DD7DD50C6
A4B170B3D6C3F80CE2BD783DE08FD39E4CCBA5E20A2B030A5E40CE0811225DBE
B2C0B2F509DE97AF69B284FBB5586F0FF2E48916DF9B5F39F71C4F0499935074
B5B5A3470CA5F34361AE56AF4FB412D7569DA1CC532B9FC67136290AD34124FB
FE8040646A2FF0D19A25EEC46CE1754A56ADAF651DE319EABA0A131EB0741C24
728F281512AF99930D81F32F819C53A1C35445584CE2D6CC10CAA998CE8599C8
22CA94625106765C05A09D1264EF4DE2F7CECBE03D9AB40A428F30E9FBF424A3
D4AC74DE18405D427979E9D097FB489A8D13132EE5E46968A180815649F931A2
8444E05088BCC0DF211C74B14EBF037D27ABFE5A92D4D0893E8EA93EE3E58884
154D4B450EBCB5F4A6C6743AE92244C4C92ABBFB6DE13C45857BC62232D41148
39BBD027298759EE14044962F0B42615A77C7AC403738EC0A130AF550A86E6F6
DB33DA077A1EDCDAB2E46C5787E81E487ECDA7C70362A0B0CD35755853BA4D9C
9EC01969E17E99EC7BDBB948BA74A0A9686E6C43C8F9D995D9853975264784F6
B1837F035C40630FDF7BD9AEFE1E7E6D8A7C26618FD4B0E4E89A48ABC205C6CA
2FBFC8FDEE9BB1D9FDE7FBC7F750C788965C4D67418F391ADC05A09EE4414428
20FABAC618038A34FBB1F3AA0BFF8E7DD9D163EF3C8FF7E0E9805CE4896058EE
C734B72DC27840DF5EEAC95867E0D5695B8E2F53EDF1A0F17F9B343C3728B26A
AEF33C0C45D0B3A5A116E1ED071444E379817760012E1331E9DAB047409E478B
5EFF4C4B591525F5B336209C2254848716DA2DD77DEEC147CA18458F32801C82
5271A26028B2B0BFDDE62316E1DB13631C8B9B7A644DB9B8281C70936CF7D126
955F99442E748E644D66D85CD17AFE4EB057BEFA97DEDAC9B3B5F6AB463FCA5E
9FF195BEA5FC40E974E0D21466AA34AF2DCFA1A7BAC5B2C3DB6F86561DF9F6B4
C2BF6919201A0E9CD89310EA83D8E540E49BFD760569B34D67B17C362CA7676F
0E037CFB502ECA8F6908BFBCD4CB3919066DCED026639574689051DE85544C9A
64BAE28239DA8BEB1A6A96E95B783B1D11A74D64ACCB9F58366810A54388BEFA
8EBCEE63C422239177896FDF6A801BCFE9AF580971F4A0C84BDF8F8C935AFAA2
1DCD1862AAE89D25AB3242BBAC8452FF1CD846A4F62EA288814057E7F106ACCE
46168BD9D607AAC228BDA0F031D7225888A3EA58584A5C80DE6D89692B702DA0
F7BC043240DE80EEBAF320064B0BF2EC82F61A752195BED36C52A0B49BEB738C
8F17BE89D86605C805C3E47E6AFB92BA1759086B30C0C2D897825D908DDCA35D
AB0341E08918DF473A4F6E784C39ED7A78DDF65B443466FF703F536182656CB7
5CF243EEB24D5936F5261558B2DB9CC40A1B28CF2F0146C91742FDA3E5A3E8C6
131B4F0D752C4C6A9FC68AEBF25F1D023C6A1C0B1B6C248A2226C150F1A6D05B
80BD40CFD211A8875E413B373AEDC78AC0CE9918EE8E8D4BBDEF36BCE9596174
AE114E6CD9DC64DE1112D9DA56F0754AE03DF06ED635536315366632392E77D2
F9702EA7FBE8E333675E3536B83794F815D552E938609AB9913E109F51527635
013819F3B545DA592D4EC1C50AF71A9873D1D13CDDE43A050A24DAABBF8F8C24
C0FF8C5C5496357B54D06566DCD1F5BC883C3D765FC3C97E40AF37429AEB3571
00FF8A7D4BDE1BC379520874BF4B435A2949159C4789EDB20621E1C7ED2DDD3F
380905FA7526E77DB067832ED19FB7F1752C2387A50E70B75CB1F202F86BCCB2
FE177D47ADF37C6BC1EB5E45BC6193DA3DA1E9F2156DBEBC70E19EF1C6D9E32A
2A17BD91D125F02070F8471DE79E991EF5147FECE560A28F181962CB05DD6561
32D020E394D87FF4C2AA92B696284A5BDFFCDFD827883779644A3C942B0D7D8D
298EACD96F05A7AF7B2B76EEC6F836960BAD33020C74C503851F015D1B24C451
4BD77A293EF8593996C53735C1B0468104D02A0E6E41876B63BCC65722CA958C
ABAD3A3E384B6993E872FF698762CF8FA6C070280D10B1EE2AE166B7E7B572AC
9539FBDBF92515FD7870D55FCD937B60978AE0D5C892061E2F8FB833865552B6
B9F9987FF3C80C87AB566F294BCC9DBB86231DA274D95D84D2B33EAFAF656213
7F8B128206668EAD056DBB4E2C4AAA913DF2AF48672896F4F5DF6AA61BE4C7BD
8C971C141A71376EF14DC5B63ECAFD314866BE6EA52D092FEDFB58A43DEB877A
EE48465E4205A12F4963798502B158C45055F6A49B243AC38049E5D42FE8977B
2DF4970EE03C65448E5F85C74B44F1EC83E2242CE5BE6A645C2653FE55D062B7
86BC3C6651B261C12665457A8913B4E954FB295B23C9BE3FC03C2E96718A4CE9
B268DF6D2344218865B914320B7D4F62FBA127C2146F1A7B3884F1A41BF28E2B
C67F15F805D04D7CEDC7DE5781D219B46E6EC423E08BA8DE038BCACFF7A700FE
719F960D0C53018A100EEF8C3E5669E87485E3AD87738ED68DC7D54878D5DF9B
9E2C39B77FC02A7A496AA0A7213396B2B708D3D07DFD60C54B5CA12292ED74BA
7E1908A831102498346F81951039E754F9244B8534DB448ECCC2B849CCEE8C46
7473A05B88DD2148F33D7603FA482568C446733FEE51D5C88E6268D35EFFB92D
A0EA4CB71111EA09F5A39DC1EAB775E7D5858C865B3E9100D883BC527BA5383B
854C4F5E82EB8B01696BFFA24F54BE9D66A92B33FB1CD45460E7C9256F2E98F0
03F91BA1E5BF9897E3022C74D05E250335E05CDD95E3BEFC41E38347AED4C28B
857C0B9EC56BBEF2B917A8E8E6F747DC4A3E1997A8AA7626806F4D88F6A7C021
3B86BEAA34822FE21847C2F9BD1EADA9330DB22185B21B4F9C0D87529583ADFF
3C0286EA246250E69A7E0E0047B0A17D8851CDC31745FA51010953A220341AFB
7DD2E6A50A8E43AB83D7D7B8FDD31FCFA50DC08D01256B7CED1EDB9C7E881047
6A5AD497D5781A73D967E62D7DBFB16A98742064094DD8EA13EA3AC411DE5D80
8E472943F8A3273EEEEF440956CEABF286BCFD2D75F8A984E9551544751B3FFD
4F27C3B4BC8D79E526BEC8FB75D814ADC1148C0AA700EA640B15487C406AC2AD
2675E1AD510715B342972BF707AD8D5E625BB47D49F73231E82E2AC77FBB40AA
D6EBF4CBBF8A7D8B352A1BF742C5E44CEC46B305D67E21DAB226EA0E55B4E5EC
B10FEADF558A66691A0AA91DA466EB38271B0CE6425F9C73BF032FE77E4A102A
0DED4B1C3D39F25255121B146DABD117215E31AE7CCF84FEA0DD6B9CB318D6B8
AF407A23D7D38CC88E6CA77943C950B0B44C4D95CA49D2114806B8BC2A7B39EA
D4D4A4E4529B6C0EA7D9EA5958819F5CE03BEF6B59B669723240EB0FECA61899
25F23F0DBDCBF69D5AAD409B239F1D951D3CBC132CF741AD7BCFFE1FFFFE8F5B
34581BAC224F8ADED53E5770136A2AC0183E49B0E2104BD93B1A101D50AF7F43
EA94DA0BC73701373BBB6375EA7AB2ED618FF48BCC02E8E3AAD1DD61DADD7A1F
D82F0C2E744CC3B65C030AE10F5E1634E789A5C10BC16942F15306E96CB200BD
BFA9BF8FDBE98DEC2EBED38A9B322E0773370ACB30BEC5774CDBB333AB76755D
EC740BD137295DAC0A61EFA9BB694F6A614892DCBE2A868F81EF892611BEFD2E
A53EF4B4939A92762B1119C8FC5EC152984A0D172D7B3F99DAA3469388AFBB6A
2D10D335B76934CAEC6AB8785BFB6A8584A6678B9658F8649182BA4DD7D16E5D
C259E3F5083164C6039E45D7A3FF6A4CD12A6D5DDBB402BF674E3EE36DE66BDE
854B763FDE9614BDB26D3B9E5DC5BAF2690AE4EA1D2A4D6503ECF88EDE8A8322
8E50C9885F6EA266B43FF35288F91B325280E6E60BAD9024F526CFE8CC9D4C32
7B8829F1744D34F97BBBE9D0B83C5792461F395F4DE88AB7FA972E9C52FD30F0
E9C6F899B491DC15CC08876BE2E74E8B47BE08F29D5C260BBD9280E2EDBACAB3
35673CEBD7FC535C46F77798202F44880DB008EA68EA20D85F0D4FD832A82D5B
E34A94932BF82DD94F22608D137B053EBA1B2D97BBB46558BCB60F84AC49779C
D25F74EE8470A3A4B3BC559A994E3A6AFA6FCEE9C65C1AFD71630F96B3E5E806
A781FD62B386406B96E86705E3EEB7D37992F0DECC07116A05B5D624D5CC1E7B
8F4796C2636E32B6B19E08DE92E3F41135A1B6A5E1CA0011F31DEF5F67E4CC85
386671E30B5B0FCFBA3BDC48F68F82CB89344DE8F5CAD0E36B411CDF81BC7018
AAEFD543698BD345E79F10BBD7E108996308ABDF97749080AD244A961CCBDD29
3ADB8B58801BF7518806C6D2951FA6F3D30A319F527AFB0EC23B535AEF0ED935
48DD83738BAC7E09ED12E7A5B3F93D2A3F9B477E091C53C8FB2C95FD338730E6
815F2CA78566435036F66E705F6E38298F6DB85AB5B8A89E1E3AA81B0DEBE0F2
835C23A189AE6D2F769C4EB68DD07AFC66C8D7162B569D08001FE4F03F1530F5
C1B8AEF5E5822B066404D53CEC7C42236ED0E509521FAD3CCADF6AB1247EAC74
18D7C2DB814803152115378DE8D9023EFFC83FE48ED3323E2934EEF48618C806
E11BCC68A40504409A01B281DA3D83DC66429AB04CF671DC22D0477132A0C0E1
48189C447258FB68206AF630F2F423793EF777BC0A6DC6A16F89D8210E63DCBD
EA53C57961391247A78C8C57909A6EC4B15D651FA8B7205C5635B2383B561E0D
10D538330E433D2380DAC33B6E5AD5FF9666F3B519EA460BAF3E3D3415243842
032D3DBAA48ADAD54902E7BCDE6B2978052CC9E511E9D28C78370B6AF4A824CE
F3DB4E5FBD6AF5EBC5DD20C62F79E3F47F652B12B08286D947413E48F70CFA41
C190D9CF2472C63B296B5303BBD0B9E135B8FC0063D502AEF1F6F1F94F51926C
F3F0DC1CE20D4262847EB62ABE8AF75C2D97A5CDB7DC08B3C99088BA3E5E9908
4CDA07A8A4F8438CD5619EB8B343590726600E8E9E2ACE76F478A346EB5D87C9
ED30B1FAD5406E042D1232AE62DA1E6FE20884012B7B7F3FE1FC76635A019084
7952C83B312CE2145A0049D098D96A39DA208A48257988EE4CEF3B35B248EE68
C35473BC76B1D68CDDFF62183A75A6A4B8CB191C775A2DDEB749AF1C82A1AE68
4E1539E54997DC6B42612D368F72B6498CAC0933B262F91B79C5AE1B160E2085
51AD7C0A308C73BBE7BDA409CCD4F974AE65649D0171C59955B901D04B6C6A82
655330B96F51DBF298E306B705732D161BBDA6DB526EBEEB4929AB62872DAFA0
7529B529E218150497C5EE8731DAAFBB2445723D5895D32FB3DFF3A5DF928ACE
185CE5AA1C802FCC33FE87138076B2EFDF96A0DA8A349322561774A46336B100
F5649B8EB0E1BA88DBD549EDC8E5930F17EF0AFCF839B2E8ED25BF59913E026E
132E8966C4D5790BAC88EA178A57B607271933E0BC9E2F4B935260E4E435945E
72250236057AA721815A222BE811B4B8A038D3058F19119A3DC3CCEB433AB4F7
CDE57AA7490C0803B59CCB38B77BBF8918C3D60022AF2E20702F9888B5CE2CA0
1418C854CD2DEEC3A08EAAD95DC132541361D097DAEEF5FD820DC7954402A017
BBA88323FC0B92172D6010B7E5476ADE0CC0BB96E7F433D9AFACD499DFF3EFC7
EC61F182C80F90E2D4EC809B68F3D684436EDE35AD61C2648E276293EBFBEF15
09FEB31E38C10077F1BAFD0B8D3A01FB162855A334042E14145F3B637B27F190
65745840DA09503B5DBED493EFDEFAC9BB0EF8C9E375F685B10C53117AB60236
2DEC99A0B40FC967736CD353F0C5CC872EC53CD466C02732E8B209AA475A2267
CB74F8AA3D97614AD3B6591B8D06E2BF2FF7D38808D206503A17C3BC040EC90C
38681024A31EE587E1F6AC41229306EA37B9DF6E8DEB1C6C2BDEC9E6EADA4056
3B71611E86379F959CBD9E4EF2D41DE81FB3941C39911DFBCF60293FDAE1DA51
CD0AAF47E29A8C80F8FCCE1AB00163531BF9A3A34EC936B52D779ABF7680FF0C
84B3738E760037F80BFBC9695E984ECEA0E378096088E67E7AC8E934D993EFAF
C5D3C280C6065CC8ED414C0AEE8D2E2DBB374BA8B0C30D5E782C9B7DB4551927
AFBD585F3561FC58B2580B83DC0102166269AB6A4EA6185BBB8ED3011D4E2E1A
18B3FA3821FC62C3CBC826A547174472B3A9D95383171187B06F43116CBD8302
24BAD65AEEAFFE889B7041C0ADF16250869922C98ECBB52E6A1EB4A1D123E119
CE23B65E5AB0D0FA563AEC0761F464D73EC0F02A19E2DD8EFE1CBC6A30E44260
74105F4F84C8D6CE9597D44687A83DC7BBF5CE9DE14B907CAB448E3BA1320E28
1B9714AEA697245BC634F63C9A0AF7454EA09E1E52DCF86F2E263C7EEF624AD5
E8EC84DE533398286924D305F83CAADBD587FFFAD0667298C55D190DAF6F47C9
768FFB51F71E20B82B4AEC29A28E43DDFECF131E27A82FC1B8BBE36315E0C169
D023D6BD1C2CA79CAD7F0FE9BAF8F71089C3F94EFB68BEF5AD61EB798D2240D7
16C6A657C2EADEBEDE7DFEB69A81A375D899E5F8FA27100CAEB06F4081563B1B
658D8ED50AAE660D1728CA47403283BFD52DDEC2D7DF95A41BDB850C6D7EFD95
5F853F8BA0C0106657B45CBD25411B0F13569A540BFD5B314A919A5FED3AD972
2272076345270887C0AC4B0630AAD1FC0B5E43AC491292EA7B713CCAAF77B9BF
050E361D4276B87A5C192775C12D4AA379D7CAAB514DDC66C6966D943FC4A489
C3155C5189AD857E065D555CB217F8857FE0DB1F6F94DAF5104DC05E69D84210
72462370676C25C837189BB1C57BEFFA2EAC088CFF684377389EA0B20FCAD4E1
418706075B41309ACF08C1C7C606794F6DDCB5A6DD0A078AEBD8B481D083F071
F8D337E92AD2E815A18EC8A7A9EAE2259D5EE45BFC701AC73CD6C95A76CD17A1
AD4BF1A1B79C7F709E8893FD04E9ECD497A5D340C6311587E787BA482692E8C4
487E1F7F5D922ED1F2B78BC358F849186ED5ABB0FC724E499EB22827547C90F2
B4C51422871342D61BE7054BFB6B7D460983198E76AAC68A8AE58E606B752286
900AA49B219E7EBFA191937C2B0F660AE8364817A9355F6CCC9C001359DF6DF5
2D943BC285B007D1135D87354454C017533B7CAF2195E89F96FEAB7D91BE5CA1
D9126FC2ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4DF6BD936E5890500C
579A5F61206EBDF51668BD7906B4805862C7DFA44657A4EFF547E3EA2B3D516A
8639207A3F36412803D192860B3813FDE00440CD3818AFF06B13A25ABE956B83
187F35887BF1CBD87891D43882F782B98FA1CC5E64E32A94C5625B428CFA7F34
79625782F07CA0BBDB2797107FE76CCC335F6DDBADAA9B42A9431BE981FF38A3
06FE6BA6A35630A7D636C1FCDB936880B8BBECD38DAFA3F671958441085A247E
4D927532D256FB09EF0F76FAF0533551DD2C8C2BDDCB8A5F93239FD6DDC15004
C087434725BC971971CA9533168304814E62874E43A202003126983D7EA0A161
D1C416AC85C189A10C9E9C2DC8A7CFC020FDF6FD6D60F4F5A5B281ECA1FA9023
08234FC559DD1F7D85A7CD3BB80421FA781D943E8A89398C20C67AB55EE7A2B7
44B9BF4871200746A4AFA4E168E4BC682C4552ABBBFADE42E309377B26CC9BE1
6743B901F6B601D390E2DC1104F91B54A06D57CA5416FCD4A99B02960F7C0D01
3CCEF65A2F4F6FBB5CF8516E1920CBEA5DDABFBA4831E1AD2F4EE5D552FF6F27
2BC16B3D742CCF34C6E99229ABC5B43AE08CD2D819964F6544DECBC6BE50F14F
FF44555C4EB806F2045055F162A009CB62C22A44BAD62C42B4B2ABB3CD50D68C
A349D27D0B13944A2E586FE142F6736F0A52B0227F544925F56BF9110E0AFDD3
47D37231850D23D6F422B0800D3997FD653F0D102D2B7D1C39C768562B4ED040
B050721300E3A2A43B7CC317DC77727857F8F71DC5AA368E0EA4DA144460CD23
1B5CEDF36E09317717775FD7420289DC0A64E7031F49E152C6F6C8C164B878BF
7A8E71CE28A15073A124FDD1A3DAC0FECF9D2CF0605DED7AD69706ED122BE1D0
3D9328B63F08C355C4A2249FE4068D529E5DCC4EBCAE135E3DAEFE303161117B
883A25280B58AD8CEB095DF72DB120A3F1CC5F9D69AFFA8EDCDABCB61540381A
759C4089E3820C3644AEBD6009C3D815D087C19902027B22AF77C4678AAF7ABF
F611F888480312792A775F2F6E42D82C460F55250205AD98651394CCC742D048
E391EBB2D5FBCAE22D7587CA7656FBB56319FBFF3C92D6699B5DBAD91EF84731
7A6F7307318ECE80777A5FA529030B795AA0CE8D74EA1546CDF8C15CC8E2D85D
38C5429ECDE1FDBFC2A74E4F55F7275767FF734AF11D92AB2B290CEB82632679
BD0A02ADF0BAD1DDA4836E4CA03976B5D7D2B2ADA203EF39A2EC0902EC9C50B7
8FAC6A62D732F6E2370EC61BC3ECBCCE49FCF4AC4E7D2F3DF33B82723FC82974
5301343D0382E48B939723C38554AB9171C5BD14FB2D427D48651DCEB35BC68F
F7A108FDCB340DCCCCF8383C30B055496E5931DAE2BB997196CD7EE878F929BB
0ED1195074A727DF378419BDA2FC6120F98C486E6172B570250545327B76C14A
E85DDD137CAD2DF2D8353385978429777A151E27F218AEB959556651B9CA1AB3
7C05BB3F3ECCADF2C24BA54688894F1608A75E44FD7F6BA76157167A214F11C2
28BB1F13249A8ACAA1B6D5CFF784282EF746956363C5C740A3A9546EDE4D53CB
B3F423A52FA5C98C1393FD1814BADFAAD2F1E45267560AAEF62F7F4EC0381E8C
59758A92F1542C391724BF93AA8AFD2EC4CFAC318B31010E08A50DD46A8E354E
69DEA53837CF42F98ECC48772B99FBBA9D68F3616B27E999A37EEAAF4D84EB72
EC36B571CADC60696F3D12803F2BB01D49C48DAB045F599133788B56DBDFF525
532176519D6A70D7E2E72275C88871E1D60C6FDB4755F8633D964AAB22F78958
34EA3B56E524F7C29A671F032190D4D500CBE05C9289D4A14E99F1622F25ADA5
271ECF632F6A053544B3B19D36FF290B4BD1B807749BBF6077BF52748909C8D0
A47C331FB855E1355748535540F0B4C60694DF9DC90C35C885B00FCD23DF8345
58044237F632601723A3D77B3AEBC67F500590B5C93FB1A0AFDD1C233959AE61
A62B64A00691C608AF088E684AC60B650D0B4FECB6021EE5AE710302645FD81D
16CFB22D6702AE620AF391A0FDBC96A75C9C7DE93B1FE21364F1C39714A3C032
7D21F6B9F6972D808141235BD0C5F332B32EBF4DE8C9C8928DDA8A6A6D87679C
AE86CDBC790070B2C4CFBE1A6DB6472883C06E249B77658378438027A02595BD
123E8C062B6CEA0B5F124EE8D9A17DC4A1E74E2D47B7EC068ED11498436CF8EF
BD7C4EE839CF832E44A54F18B4C79A9FD03752C58BE1564331C8A0817E6C3667
6533AE7AD0828DAEE8CCC5B3CC8C6A3109B9EBD541AA9FBFDDEF1F775BE0C411
788B054AAA3473B782F24BF7ED544AE148467180DC2293FA812D8220830C2B0A
3844C5C96C3FBDFD4730D55851D0844A405E0C09604AB40535E4200380CBDCA9
6015D3822CF6239955ABBE60E7A2F5DC169BF13C56D9D08860763C7F8B49A716
F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED6D0D012E6C40FF0C0FA109631DB
82CE149A89C4155F316DD36ED4A688023BF4933D7B415FCEC04738328542C8F9
0740078AD50D48DAEEF9CBD3BF33CF8FE7A51A6D3207B96E0E09C8A41BC5CAD6
069CD7698198722788E808F58BE9D5D5FC71D8DEAFCABA374D54D4BC31F7400A
4C2B816B62994CE17EC9E5928E839F0B385A07200D4A0386D3DC4FC1E20A83DF
AE731EAD0363A7BBEC37DD9E1722CFE04283F4BCA5D04EF4625F1F84251854E2
CEA48DDAB08513B73D45450E6550A9201C6B53F3189E88FDB0C4A7434962A697
CA30668AEAC7520EC6A58FDE0E22A06365F5ACEB6A0A81927C194B339276688F
D4038E91F718EE6D25E43845C45D35C6EC26BC4AE3F026AA817C07DD9ED61B57
E3EE12F10AA1FFBC219000419C8FCB2C338148B40AD9A7B337F96CA3C6E1D860
526021EE04A89820D73D5AECB9A0B0D0BCF4999F3780DD65EE069203D37B08A1
2DDDA2501C6655411A4DF2DF658F42D355F1693CBD0CC90695413FDE088379EF
2239E77CD65AE2904699507A406981DFAAA68E2CEEE203C7902489D4F4C0506D
6468BB98385F009C20BB8434DAA8EC8FC416BB40F4E824236EA0E4FA2A6A4DBD
7A3F1530F5C1B8AEF5E76865960B857516AB6D71E4B00F202CBC7A829EB9B317
F2D74D8911F60949C075630D5E29912CD7E6362E528ACCE4183C93D0673EDFDB
A3BC461510B4437C6332293A08D9177FFA919FFB035784ECF6CB66BF597BDE3F
AA22384EFC3B61FA204411DB939EBFFA88D1BB317EFBB63275AE0D05428B8B5C
5D7C8AC1E9729D7759C2315898840F2FFE307B4528AFFA14D950BEF1962C02D2
EFDA7307EFABA72369E5A5438C8B0646B21C6036850CA9188F4691E214967EF9
422ED96D7B37665D1ABC5777E25889467D59883F56E373484CD1C054DD8CFBA8
E6BD2A4C8726CFFFC4C1B18C4BD0E899A5D13485A41C74B5DB6690C448115594
29340A090C09934D59867520E9D423EA39E046EBD2772DEE1A78FBCD55AFD5FB
30944EE4F182641F0519837971EED47FBF3CBE34BA43402E29BF660674457A70
FC65864CBB728B11CF5D824D9BB84846D75651244286A0ADBDEC4DBE7679F7D6
0AB6DDC04938A42C9480936299A4DF16E9BD7ABD743CDCB7175B57B0EE7AE2CB
7BCF0360ACBDF5FB5ED657B3AA5C942ED0C061CC7E03513CAECAD19F3574F2CF
BB6FA6CD9F409ADF00EDB3473A2DC7F176E11751FD5E2B3B955E92E69134655D
799BCB8160C45612A5798CF4AB555C497450F7CEA04612EA2F5A6C8A7EDCE09B
0F976798FCAF1AB4CFD18968C5EFD443612F2CAF617F59EEB50BF3883D815899
69C507E726C6D6A30A0F8666552AE9379B1A4DC9D967DBF251637F5E20C2807B
3CE00CC05F6CA1D87A1C83530D8D252D296D44F1431E1CC382E7C032E8B7BC76
D60B171CA347A8A1A1E59AD1CC7763901161F9A75F39EC9D9D07EDF022EB4EDD
149F77A6229A94035ED4060467F61B1A42E0F0345DE59440BEA47D35B44DAF0B
FD6BD22B450926B69A090620505014FF9586B7DA42F20DE12B75E2802B676484
C9F05BAB96F90D4672913D7F009E62111080520DCB21D96FCA0AE67C02AC0276
1549EEE110229CF7196AF3CFEE4D4DF2FA84E2F372C4E23576F354A66710A467
4F99EDFA00C510884BFD3F39C772AB771A74EB93E3DAC78B1A952BCB3C63AD18
47CB73B31B54F16384D54058913521F90293851FFA769DC6059F3AA22CFDDC29
409ADE33D6640B85862746CCC287A115FD9FEF3D177FAA08B4EE28BE2C5BEF08
3CC12CA785F6F15E77B3FF03CA9937F548B4DC71FCB133C8F2DAF8C2D4F4310B
2E054DA06405E78EAF81B3928E5D0C1976434C66986C2EE9A510A76EBDE47B86
CFDA4AEF92A3CFC7C91EA6FD21F1AADFF3D1A051547EFE9C11BAEAB87E7827B8
321C7FD25344A2001239C3DE1DBE1EB344E7ECCDD86273DE87A03A7410D3327B
77675597ED680A526CDA6DB213D267B43FF812CFAC0A3FB6A89E89EC56FE4097
ABA6F2B466F2C552D549D0716825CB278DBE285E67328F96BE577CC30B6CE0F2
C00CB15EE37DC5F4533724D785C22C645809C6B3B4BAA933FF1DE442186BF255
B2894FCCF86FBD14BC84A5EA771263CDB2FAA9634E96F2343C45E17763942790
07FCA2F44C620BFDB728EE85E0C03F8A6ED17FEEB5A6BAB4283694888726133D
E6D4FF4E8D5FDF29913F71CEA58830A18AE1C56554ED9F2B15B043C987305264
4138467F77261BED14BB65715F4A7E817E23CEF2A923C8DF147D5AD2E86744AF
31213B784C45237FB451C43EB5986563E1A149198C3940BB39746826CFB01F22
A944EF21FAA6C12D3BAC92E531CACF68EEDCF7E1E1A36E82BCB10E5E51B131A7
CE8E5022356283CD370CE208AAC25A0E32F30EADF2050B71A79B8060040620FC
B88273A36FA3EB3A3E41C28E64427EDD35A78A594BEEF48E59C477D656F51315
043BAE68578113AB7BFAB4C6B2B00EC32124DE12492FBEE039B2FD87A31B4285
01DFE5AC0E7921BDAA9A276CC51C86FEBB15424B17BAACFAD06CDD337836BBB5
65EB106F365321CE68091E6386CC913D455473122844A999E8ED6A11315A7926
538D22E4854A274C747DC3985A78DAC5D2ADFB60F744201D934E9D5FD2F3C415
1720EDB48DF2D38862DBEFD008D31D41C1FA8521953DA8ED4850ECE54C80D2CE
7FECD49E05F172CA0B626D0A5CB15D2ECC546C211C2F9A19BF1856D389D1FE17
BB146F8688360D2F2FA9D07BD5C3AE21E8E0E5DD13EF07C6309DD3E47CF1FA44
EFBAA756B02E839A61050168090EE983D239A2EEA5C4BD054A6A9EA3698E3F71
6791A4751D1741F2B4CCCA221C3A1608C78DEED6CD8EA06A65EFDECD4377026C
E6E53A73CDDDE97EFF14A7A6B3384AF6946BCD08555AFCFEEC855A732772CB80
5AA9A32F8A6EE500C17FCC1069527F8670765BA4EAF7B4174062E8708A74EA73
3876E79CE4E80991C0757A476F28B5D9C49232B133DBDC991FE366E1D0CBAEA8
3E82F0A7F4CFBA1357D8E49F885C8A0FEF4C3CADC2E5846D50B3F8A942B8A4B8
C07623DC3C8D72AABB37E7010E2B734CD2063A1D0C54EF86546024BA90631557
257D1B8751240E36E2E8C1494640BCA5A039829EDA00FF5B9FAD285605B31C18
2B608B5385418AD99B46628F36BD24ABE2F5FF571BBD07344A46DD5ABF83EAE3
970CAAD43A749FB3532338F6151693E2D24AF7BAD98052F2C018714524A8C707
865F5DE0EBEA27BCD33DCE266BFBE2295613268FE955A0DC64E4B80209D13475
2971EBDF02A5522C5BF67B8469B129E323987D33474534C8F7790F26AE7DE624
006CE68E4F49001FB554010A9DF87C786F0C10A3B709F7300E17F4E3B4272809
892018038507B30D84C9871384F13CDA0B60359EE6BF5E56B2FAEE303A56DCBE
13825F41740DC01CFB8C054700D386CDF3420F37BCB6A70B9A92E46CEBEADCB8
81E30CD562DB316843A053F82CD8E6D7EAD84B4D206727BA9173B2B324C4A966
7F5692B30D09EFB60C1B536B03FF7FB6D35742A408FA77154EB77D6F52481692
C3B5448230C4611B33767D290398B07A09A94DBAE608180B6E958342C30A58B2
473A33682C0F30011C5F27EA5E81BE0D65297EF17040F34AE7C968B3500325D0
3B4A7BCFA59E974C9781F3C5AEA458897B534D0E466F1FB5EFE7787E8A701AE3
0FF35EFB1ED32C004B7BC6D2A07929C45E2BCC68F40F0C4D87AA9792F095A8F5
36C6DD08CA7DE3558080F1363A04FABAF6CF5906F008EC7289246D873BD54368
4D927C597918FDFAFF6D8B921CF6538D1BB29418F261C673AB9C4B486D14B7FF
6E831291164B14DA11FB99CCABADC43F1D3B224CB93ACF728DE20B25DC47232D
D9FDF7A94EC183EB147E869BA82642AEC5D0C99D88F6D6085E72340CCB6E0F01
085AA2E37A09005EBF811C42B4988F48BEE0ABEF3799D3E44166FE3F0D3C2B0F
644DA38167DAB0436EEFCADF6633F6D5B68A0416079FB4E0CC99AC20DC2E5196
87D0B39126E6179FF4C5DD40AC274F3072B651C69C61A34E3A60D97EE9008373
A9D2C02A63E2E41F3E954600BF5DD3B94BEC96107E64F621BE09010CB6F43790
A9CCF95674DFF4308068FA72E47EE1EC204277AA09A7D535CEC09FEDACC62D81
ADC9EB7B26AB0475E6BF7B0A6468859E24656DC4490FCFC21CB7024EDE559D7C
DD5F8DB1C29B2D8D7532ACF718C056BACE6489CDF702407FBA5289149BC0AB88
D400A73AE06954DA9032B1333396FD545000E364E7E6A79BDDA2BF4A933F9098
F173D8BFFFD3DB50BE815438A3C46A2DB0D96CA73DB8BCD3E76A862C33A0FE4B
A3C647BFE42CA049DD1962C77742A8C011C9628BED9C7AD8647A1171D1020468
EA77EE29E32F04AA6678579818D3B7D3B2AC670FCEBF315BCBC1B4C0737EBB62
3F79B3C763CEF1BDF4A6E1CE59D2E0E0A1A24075AA9F2EB2A871F588D6AE920F
2D7B6D9575F45562C3A9DE6D4EBF59482D7A7716DB0BF0F83B4EB5D4796E42FB
7053D4CD9FEEB842DC9A86EF497CACB989416E6AA9FAFBAF623459859A647733
D9C5BD75F0E70DBA4A770FB32DE22DE3D1C72ED106EDE24D20D3115ADF2DE08A
F7B3423CDF882547085CC947BA025077032B8514408528BA2E35272EA7F3D2CA
E3F2C028C58A665E9ACE4515A1578E5BB8E23A0C07D7C4855C199FB734E3053D
BE24A78B6761B22CE4D9E5CD2BEED71E9593D31072A4AA9719189186CDC274F3
60FBED7F9C2E57D7C4E06D7DC844B13C7D2348435F6E3DB127A74C0B636EFE51
6D64F531B21BEC18FF22F66E11274FAC41025CCBADF11423B51FCF1FFEC4FD57
B0891FBA2E75BD5D5D17618A9ADDDEBF899338056AABAD822CB4B0D735D46ECA
D9B3058B1F9867F1B899CB78C94227A3AC6A6F78E48B81A8CA119D14D486F859
C51A3605626B70FCD6DAA30568C75286B100A072E53133028129F4A085AD612B
85DDB91AB6BFD1DCE830DA333B8503BE891168CDC99BFDE3154045A3317968C1
2BFB56A3C4C7B1AD1EBF980096EC4AF841E416430F8B44098BF02C04636F786A
20316B992F848D119D315B3A17A3B6DEEEF208B6F77A1D3C1CBBAB6577EAFE83
02B9D9DDAAE6C9B5A090DCDBF56B95FDCFE8A7A23D6D7EA98B4262F9F5C11867
72E4BB26D59397F3494E824F8D506A27BEB2795772DE4E899B0F39A7FE1F85BE
D46EB1ACC0E90B264FCEDF7958A7E3E320ED1BDE3072319F54E9E05755F04702
A145F80D076763311DA035986D70C6D02EBA1FD4BF2EC6DCCB7B5F7ABCBA1596
2C1B43E068890AB3F47CDF4A11B6921E24528947EB9CAB7E5F142C781072CFAF
2D3371632319B253DBB323916244C3920853346594F0D3026F4900770B39B288
68D845681764F342047FABD1B30CD997DD370BE73E38063D2CF9782951D874ED
7DD95F14AE9F4603A79BEE96270A8E6BC6450BFD603C5D114A426C6B3793EBDB
0989E4B7053BF16E079E663932EA1F9DD48B922AA953832D094E69E6C75B73F4
A9F21421C5D79A29E91C20F24FCFF3B8645ECC3AD0C5EA2C6E649BC9E95CA72F
9AEA4E0604D3A33EE2CBFBDA1D46AE86275931C691192C0A05FFFED46A729BA9
715CA8780F8A933E025FB8BBC3116063809E1A4E4F1C3750A548A5C96EA3107B
61FA5D68F2419DD223827EB960C01DFD5B7C33A6DE4D951118E9311848F1B064
872B758999AF2F243705101C71C1EBC8F2D11C5BC1C5A5A08B942528B4FDF9E4
2A5F64E0E70900D14EF927A2F0C3A8BE6E4CBC44070FC79D8F32186A722AC494
9E9D7C1D19CF64A0F037AA078B807B5E63B6BFB4D377ECCB3B8152D25EEC325C
7B5AD4103C9AFF6CA047E5B8905961E7C6928B4A4802EE340B1BE67048A14141
690FC8434654301BF2589783EAA854204449A841E5F4A303BA3680C143C3413F
1F3A813EF6AF7F8C06C662949601E5B2B01D4DC5E093D96466B9A8A382A36EAB
6BAC935274CFA6B0CF986FD924816C0C55830CCD8D5B824276A2DF6D983D1E4A
85C06190EF3A270698F6B9230D201CF8E79B9BD4C929C8A03801A388315DE6EE
BCAC80D8DFE1F7CDF9C65F94E887C1E8E92C01FE6E9CAFF32E3B2B9B6D3232B1
6F984C8AA4003AC525C1559EC5332654FB65CA415362050ECB9A7C3AB8AB6C69
7AD5845D58D4E7D09C82F8E0FD24EACF7FE3DE32AE32FA9619AF69676AC30A67
315B51B1E160640976A7955E704EC7A9D647D34FE852014713C156CD7CDB8742
D5B9DA800284AAEDAB86FF7ACD7860BD6A0AC7DD6322A75A97BC98C3922C2BEC
223B2E08420CA5A7BC48D63FDE67D135532232FE5F3B856FE97A6BCDC3B95A81
A2386BE755FCD1219E0DB3B4A0D838E8B3F03C4DEC1478AA425B6F39E58816C7
A84839C069CFBB069C10AF00382C06C6605657C2798537EC841A28704D199037
4A3955B4ED9E2128F2E9130B57028E8C7016121FA38F1C5C24F6F91025514983
23F386F06FAA5E98124881CD477B308B5B7341714EB7560DFCC339DB37464D62
F20B23F0D1B0DCBB0F126A78E44A49D4AF6D821BCD4BDC378F0ED0DE91985A23
6F44824FBA5671F5BDB495EFF99DE8AE825B4FD5A315F783267CD24889426348
C25A6496744B153BA19E77EBABA0F179055A86A6B2AFCF2166B6B4C6F5D3FA17
2DFB4BA9998787428949E1D8654C8334E1CF5D31DB10C6D2FC18D7F872C83B5C
895A13A62909797E7E63FC5BF7421C975E677B5BD4A86C62740C62513163FF8C
AECCB2BE827CF645287FA7A818C8319F95F8038848C132C113A068977147461D
610FF576E078BD26167522FD3089298A2618F22160CF7245718BAB72DA6A04C2
8C460D881B7E3C1A8478620630D98805A8BA3ED74130507322E6EACCA98524AE
18876BA2CEE57683FBD6873046F14E850DCCC789CD1A09A68DE0378A54D1F5B4
F1478A12629651A7B63673FF7460399F1F08F983BA7BDE4619505809407145D7
148F40B8FA1D9F0DF62F018B507FB9BE894073228575A9E4DEB8CD7FAB42099F
9922ACBEAC04EDAE551CBE68E84519D138C233FED4DA03BEDEA40FECA1476A77
A097279320FE11B2A16ADF4647A58E052072B433E5041DF32C69E0D4F050660F
516FB0F8FCE1449F0E80BDCBCFCF477A2C30A72EC227B203A3DF4BD1282D0003
D149F5A121965CFC7B2CB60EAD2DA23155DA4CF5AD80F9C357CA8E0810E29DFA
CEA16DB224AB2C792848FAC690A9CAF869E42FC542FAAF920DF2267772934E2A
0C643BCF9365990B3C9A32A0B53D44872B255DECBF9CA92D5AF89E0EC3EDDDCC
099413071AE132E7417C007C7F9F89E8A8E368DE280688A8861B0882B3F77B2B
A27C44FD9917617E049E9D88E138DDDD18FFB0E2E09122CC0650B59AD081DD9E
D6FA2459293D05A4C12F62DF356AA09E32BE14041CFB7FC8593B446AF416033C
53267552B9BEB8E46FF537781CDE95342DDB55420824A13E91220E40F1119C47
E524B36991806FE106CE986A4E6FF18204616B9A0B7DF4B1BCB04395D5A6421A
9841D92DAE573373A02ADB8176E2CDBBB5A42F9BB98C601C4427C3CDE4983440
2F0FC55993E51A196338FADDFD656A7ACAB973FA1264A37E0E89804FAD077CE5
77D8AC6C9E52944A39B1109C6407AEB23FAAFBD2E8FE4BC43AFC8DD7ED83B797
8C8A35D50D25B78CC7925A37EEE489C7FCFA4D9541AB298FA4748D82A03826F3
737D9D4C56CFA28DDF0FFF4250D413CF2D91FD855E2DB7E53BDBB3108FCB0709
E18EB9F53ABC454F5FF214D4C7E29DAF064413E6CF0B4B916D2A38B436FCE6C3
769FC737E7587EAF52A75AABFF1DC3E2D7FCF813BD614EE45E4F31095D3A2360
B3F0B9E70D33C9A51F0A632E8D5F908C098A914F960A77443B070D7FBCA7866A
433BBE6891B9A228F969A1F7DBC258CA0AED5ADAF2C9E1C902E6DCC29F9641DD
26C5988910CC8A0BE02F9B9B8774237E542121E45E94C4550241EF362FF0F77A
619A6260A75581159D6BFFD22BA10794C62273EB34083BC27E84E9869F25D9F7
B7A1C490414658B84D556718BDC23016B30447950B0424C6AA8F3FFEFF87D37A
0DFAD7D80CE29158B80F4A716251F81F3E8D1F7B13351DB8D31728BCFB126B00
838CA10D748D9B6D0F7A44817972E1EEC59DF37A744C5A643E51ADB2F58131B0
37337CD91B415839B98D82E047F0A89A6C647871F9B6DDB1145CA9D7185F637A
DC313F10F50069C07AA6F02FBAD5833E2405E565BC0DC8922ABD0B72B7D94A9D
C039A7F122180007F9D48BA3AEE312988C0368F9F9A88951613B38DEC1C09697
E972B16F669B58C430A2BE022FFA22060757D7F300E826ACFEF57ACC243E2BD0
911B18E479B8044FABE4C1B40558766B12A7D287F3BE27BCA9AB7A674D0FA406
5FD264E5C4B7F08A3132C7499FE4278EAF372E43AF4E20377B477273DB43F6A1
6A55C8DAAC7BCA5763F7EC46E81EFB8B0C36B3B3450A3B8E90D7E9461A9EC2FF
D0E07542CC8BED5AAC7B57C7FAA52BB12A5E40B78025435F2B1A6BBA2300422C
BEC23E40A8B68BB34B51C9B4AE7A94DF1CD88B8E14BD6FF16AF8312280844F2A
6F9A2831B35A717BA22DC028A438B9DFA065ABDAA5F83F2E21F9C085274EF9D5
09CC7910BCA637C8D59A4CCDD06998E7E706F45760668861517B337AF6AD8491
E23A97603A2154D65D5B4DFE58E1FB58F3B042AAA5F6565B966BF6502739DC61
9EBD8CA094743428AFF1E18301DAF3A294682494FEB9D58D8801C201E2F4AD4F
B0BF7A295CD9019232C234505BF2AA739085AA882160168A7530305B070A9DBD
16646A59ED4F3B41E768881B0120613F21CA0DCBF9B4B0A53633DA1EC5F9776F
F9AB6C26CE8FA0DD439D971A5AA282F7BE9E2A7DBB5C689BD557EB25B2F7F992
18427782FDB5FF15E343B00044CD9A08E52AB5DD84559C0A806D539527678A4E
B270B555F96DB572720A0A9B2BAED3E2E3373C126A86C36FEFE22BC975C80EFD
0638B2AEE0889466A5E765EDF6DB81B98FD1E77EE82C729D51189C2AE3C97E58
F146360340E796E20CE4A863E754395107B02C711B060818B1F9D894D3BAE100
47AD3DD1DF16616E67A5F6672A2AEEF1348B2F930C2F489081CDB75788008E23
82A3ABC877A6386051FA51E10687BF6A6C647BFC2AA60E9534B591B10EBA559B
3EA2A4B4B6FB539361D575195A086DA325CCE91E5E262B925A7B542634BD8F09
EF63175770E7A61A2D1032BD4E94587D046AEA3E8DF0CB8B8FDD54BA72FE66D6
25E803E4D34AD3391811241801694795BA8521D84C28EB4578E1B1B69FD2D897
20C5D3C188F08FF2AA1CC1368C26E59CEF199B62667F41542EE872AA5035F3F2
1ADB495027386100D4BEEBEA55AB1E443BEBEDBBAD95513C5B934435FBEBF8DA
7830E1D6A288B0195C0B9D8AA2604DFAABFABD3657199F95DDAE3536050EC5E6
D335FDCE002038B512E46419765230E7D8E6A2F20D3CCD3856BCB1312BDD904A
FCA62D918B7841F6822D81DDEE234C9E8B874F034B51631028D31FA7A7AAF051
24B568FABB4E27A3729B169F5DA070AF6FFE15C780ED5B61981EDA9FC77C09C9
DEF454B0A7548E385F7BC3394593C5B714D1A02EF0316A5AD0323E6D7A4574C5
6EFE536007522099B06D30ED8F31236EDA43E4B1283ADC306441CAFE2A526336
C0CF3605962677C789141413C2D80D9BC5EFF7ADFBD345E713A352EB3420E837
73127DBE58F937544E6559FFE206498099EDD6536E52B97CE43AB03D48AB7AB1
0734FA04C9124B1F751CF12AABCD7DB68E0B4586B7C56F8DF414C3C1A735103A
17EA18A45EE415A6AC56C11A3307C3480DDC72D38B014AA6FE4866BBD2934E53
FB36D6E265617B8063198B15764AAD01BE46A1D205A00D5C6228AABF0391ECC8
CAC896A0915F43829243F7470A2D4A5E5BBFB088C837EE253220A27910E1373E
CE9DF50343953E48DB6037CC4E965416FBAE79F5A031A854336C4D47D54A4377
AE185896860109529976C8A51D4E1397930EDE8C327F34A50550355FFF82CECA
A14BC53C0BFD1F6DBCBD67B8E5D1C8F130016389F9D0E061F9940476062157B3
D4D4404F642B36764C4A38C6A7ED4B69E23BE7C9709DF58C7CC3C6456BC84DCE
CDA2AB37FBA26301AC1FCA227890D954762D773AC72EBC7E72EB5F3AFD92A3C1
E652567F96863C57CAC0D33A09F2A1F521106528276729F02584C9D4ECA1249D
ADBAAE63E700318ECA7307062BC11C2F971B6CE9693DB3C9CA383446910CC033
ED6642BAFDEEC546077B1E254D7A448F609010A2D4F1D81C2A13F0AE1A5EBE69
14ED824A6D6738267D74E98A5E18AED75EEC2E31A8331B90E8B854E6FFEEFFC4
1758AEDBB2564564094C3592CB4735C8EA8DB5A81B7B34101B4A64DF3F74F36E
77D6E1C1893320CD4A30F7C854CBEDDDB97346846136BB4F9B7F04A5C2532E88
75495E9C45D65F468A51513C6CC1137B7E109FF8C82A8E61F7F714ED455707F9
93411B4A61EE5BE5F189C12F7D89C7731B523489C6911247F75B2D1D4B6F61BC
479620E6912745FF32B222071D618E7B4893C30A58E405731FB1CB5A104BB07C
AAFBDEB6DB4DF9AEA1F01B9706BF24627E1882FC1DB0399F7BF2362194417E0B
39DEABFF8C2C23CB172101903D527C1A4906E41E50C245327D8226393924E5A4
2686428BEDFED2AE93A8BD7471AE3FBF3D208C1B72147BD529D834D921371C61
72192D232ABA3F26FDD1E5FD03D7A66661A4CA28279A5D8AD3A638D513B24844
A1F92643FEC21F1B21DAB10357E1251A1E20043BB4C9ED6042D24299C73842F4
C349ACA24BA5D68825025B307B273830F5ADF8610A0056D2E0A19F8805E4407C
CA917A7711AA8AB21BB8AE3F149FC76EDE75613DFBFA1DCAC0AE3C52BC9B5E44
8EFF28AD78B100A47897252DA228DA9A51DC73035B1025751B5D4066C7DD5D00
AAC8E9EB019228B6A7835652CE870E24035787C9A6AAA1DE0FA91DB86A8D64E1
6F4FDF07AE24FE20349DADA8B54D934F7517E6050305E4708B42FA15F0BC79EE
1CF1DF0E55AF3D43ED99D3297E8D2F7463F1564FAED34D9B4322D8DFDA3D5CF6
657549CD60A676FD98823E82456751CF8089BF0ED3830740B57F6908717EB9D7
F0068DC9C65C037CDB77CBC30144CFD5FA245CD2D8BA8C1AC7B4AD3AD071D5BA
FDDB5173C09068553725AB64CCAA97A48E60C91684B28A38C95562D92DFF583E
148ABC12FA977B7361C5DD9C0DDFF09EAFAA8DDBE13F35D57CF8867F589D0F3D
ABAB770DE273E6958AEC894DAAEA40668DD27A8A8B70E467C0A77E0A3DBC7204
F5144BD4BFDD4215D938F8E394055A7CBE7F11EF66EF6B533B444EECCA1A7401
838DD93E891085381536B7F5E589FF757104D89DCCA2564464C8FFA5ADCD6E72
FFBF6C7F52979816B430179ED91BC2996655447DC47818C92555B5405D3B66E0
06F31C77BB0F5247D73FE5C15AFED0A2A4B375DF7C5B4509FCAABEA283B5ABE1
32C23F02C38F759EF1DB9EB27CF99D37A08D0B24D6962D70E44C57B73AC6DB83
C3B9D79463AD6CE6CA5D65DE6742538A21A491C18A4CF07557345FC6BFFE042C
F1953F0399AC47EC8C0968FA5BCFF643751A38174487824E96B177C2EE0B2AE9
48F408713041FEB009049940F99D983D7EFD74532877A1ADBA4CF1A9DBB56540
2E0AE4BE92DD4458C88B506480A5CBBF9DACB17CCD1D71CFD67E69498938731B
7F07D2E6D0FEA30C812C2F5FD2D053CE52865D76888137C3450A9F395BFD824C
410903C7742124AE3383BB89F311F345CCE96E497654E789CE7BDE3EE9F4CA1B
16B1C55DEADAAEABC0CBA73DEB8279EE460A805ADEB8FDA9E6DD7B1989C5186D
05BEB198DFB17B9E169C6728EC91B2795D9DD932D6CCB6FE1A0BBAD3B516CAEC
9ECD5E1674D5826BED77B961C5077D05AAF3401BAABAA9026E533369B5363486
5146843710727ECFEFD5C7B657ABF0000B2D63A418FF70D52052E0077EE0A99D
E890DC60B8D1D184583B332C6F875CC2FC2BBA7554B5B88C9A9A7276C249E31F
B7B18A4A9D144564BB041B1A61C9F77CAFEDC28CEFBDC1181C9A2ED793FF59F5
7437C7514EF202DA2D69590F7F1C0FF430398FF432720A4A3003B0070D3CA8E0
26D7D37E16A1C7E95E86CB97B80C81A9EAADB2BE724363012E93BD4A26588470
5F0A8A91338E26C28E5964AB10F15D1BA29BA36128B7C6ADD38A6A7F87046F81
AA081DF17585E0EE14E9559850BF7E211447F2F4AD6CB506CBA0B9463DB0B154
1EADD42071DDD2A7A98F811FA2DEDC596AB3EC3E1864F3AF208EBAF51BA3A9A9
85A5A9165ED1D80A2796E76C8CFFEBE44778645BDB24040C6AE06D1BA805E240
FBED489611C826367FAAC9F88E47E6525468C959E821F96D3FD171FAAB153B14
A143BAC3333EE21BB3B1F29D64922432D1B5EF13FAC508C944235957811FDD6F
FBD054C48DA58E7C1EDEC044D942BB662789E4078471474A04BBC61529F5E514
FE874B911DB192FEEC4627CC120AAF8C02FF8FF827E929D46C11CE5154E76787
7FDDED97FD7C3C4D8523109786425D3C0235F2C45E9CF17CCF3D92B66B208E6C
8E9694E35EFBF5EA72E1C64E19AB71DF6364C9958A74DAFDE4151AE0B99300B8
9BD943B49ABF5430911F73534A058226A0CAAA8F3F1FAFB9B14506EBC58ED34E
FB908425559CC41D4B953BC7093EFEBD7C99991C1B6748E113C903537F5764DC
C9E07F228AD4701C44711F6A74360A6079F0DFD6A02389742519C2B60C527E41
A76CD50809B488E81D4DB16B6274B5718DD454B0B34A56736EAC9AEB5ACAD7C4
5AC7D42782421DD68E8D7A54259AFFD72451BB0E58AECECF8B9D544FBB3D0B99
6BB6217BB1476B49FB123398F2559052B3D17AF8EA7FA526644B8D5DE2FC5D60
0008E5388A2FC4ED2CD7C45456940CD304B76529E4DA82676A73C06802392940
6DE1DCD1D44010A9A5233ADF71131FFF47E4539F8C0D6F744ABEE3394B0F2767
C10E3BB3264770AA9C33607EEA5DDA8C8DD9514E87EAD9A00F1A949B7661785D
661A19C6090DE613F762DD54F533138EF88FD9F64D40858732B8C191F43E2C2C
ACC24C0B07B751485A044B6B0FAB4A964026D49263FCD97D918F9AF15512249A
EF8AD177207DB14C07FAA408A71E35687609194CD98FD86BCDE4FA4AAADDB73B
7B0D3BBF3D874FE0C1C02A849BB7270C3B086624E8C0C9A21D2F7EDB819736
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5E3E00BD661
6EA0A416902D3AB5EC977DFB9A5ECCECE360FCD3B1A04F16826F1B2685EF82E0
928B3862C03581AE7F5CFB6E28E1D1C86D9C66ED01B855342AE4DB0F802C1129
6A0BBDC33436A35995B50C42EAD39029814C8BCE19DE1D6EAFE04776A6E23862
E9212C1F00409F1184AE358D6F5C5432DBA9D9E35C0C8D10D99B443B1CB9294F
D84C265B934A0857ADE490147C5AB8EBC973CD8D3946E50D5357E57CD8F73589
E001EFE2B853747CA6CF900D3224297F610CA3F3B2629EE272DF9530A35FC614
5232C379D553953F21303DA3CD71A95070A9FE43ADCAD26A4C067109780A8488
50FB9B3B0285C7FADB28A3711C06273B79FBD3438B9C18E6F4E851C2F2033AFE
6DA413A1873C063202DEF40DE082B544B4AF7127EA6D5B8FF5A07351987E5325
EA8D2985AF7B9F14EA2C7C51096681B7712C92271F818BFDFC8AF8099CBCDDCD
FFE15EE19FBB79108A5969895654C00A5F30A5F801DB4597333718373A3B8F96
8B1440C691B1FA7176E0CE92270D872A5B65E2A540432B97CD7F69F767A67AF3
BAE02C93A4D69F7A08162ED8FB6C594E1B6C10BEF2DC54827C9A368306780B31
793DC3588A170E5A20B20B7C7E7B74D57A23326CD8E2332276F32283CF0F7169
EE52BD767834B73D8592C922B8284C6C64525B4CB3EBAD79CF5CD41A9E52E33F
D14670C66F070D8CF7E7607B46F62671C7313D8B9CB50AE03AEE952DBF1AFC9D
DFC0085EEAEF9D3EE785E863E59BFA94A109026D51F307D91E6B6F27C39FEB34
D964638590E25AA60E8F85B838B54DA955E93C086058929DFF243AC5D1CFAD9D
4F6AF98B958755373B31D9075B4D37B7845D09239536885042D248CFCF793C00
46E35392177AB664F4C54CEF25313CD7BF2F4750ED01F4B4644642037EA3BF11
CA27B0493E7015852E7EEB380DF5047B980880EF29384A5AAB483A5B9E87B17D
39B03D2D140E9FFD9A209A618687FE1AA258B1DB611AB03FB142AF606A02FE2D
7F65FC9B12C8E0531F33227904D8D75ADD57BA0C39ED94DCCA571CD82C6E0BBE
3DE51344D9858159DDF19EC5D9BD286173EF785037A4B6194E126C2D4029B943
D7E93FD4820BB64383828603A743E6A247B213A287F8D31AC4AC1788A4E78E36
5F57B64282A21BBF80EC93F7FCFE82F4DADC600746F71F34AE560664A99038D6
9D48D76476BF5010E5E251A424ED1DBA9FD950A59116A399EDAF32BB5631E179
7597F9DC20C8D6E6B127A3809FF2D5693C2E7A4517FE0C8CD4719C81BC5432D4
5BD5453B13AB738A6562647129B529E218150497C5EE8731DAAFBB2445723D58
97B8A68D8348723DAF4A7688F8FA1276B030E8711E2448B72CD876F5D5A2FDA8
A6B734CC5C8B3EE785597C70106A35F92D8DA29782A1875C6C8E74B0C86C0D3E
BDC56B10452C321698CA1B72AFE725CAAE98F627C7CA550C3474DA68CD751A72
05A62ABBFC4747757AAF16ED795A328AFD5D4AC5CA65062E70F4703BFD1EDB25
889665258B1F0DEE651E8832B68598FE1A396EC7237DCEB653A5169889D0DD08
D5DE58AF6B1179B269F92432BCD7CD512C3A56197483E2AF97C83D3FB66F981F
F9642CBE065FC6CBFFCAE540630679F6544152B087D6AB8309F01AB97EC059AB
78D65D4DA48D36959C47B0218392F24C93D7F9FC8D64D8A2A8C346EB436961C2
AF7784A47BB023B3ECFFF53DFC3E68160AE0D42A628E9CEC9E0B59788EB9B9FC
143A796B8CB995B03EE89D82185B3B4E77769007C7BDD5D857CBBC9A49408580
D7A5BFC889CDA4EA23EDE3C17E19F74D596AF4348A6DB3E10FEFFD5C307A7C87
32E9AA44ECB7649E3347035449BCD936328FEDB5C06C1CAEB8B735C214614FC1
82A80EC7377F7EBD25E0D42D6CB3F0B9E70D33C9A5AF8605160D259331FD5F38
793B4930B2DFDB4E6C7F70B76CB486438D247D05595E79997CFDEBAC31E26DAB
725237AAF4879364055D942419C67A9EB8EB3D1F5B0524B381B623616470A4EF
477BE13FA0D8C8B03C7E9561C08C78B82824775C8CA090E60C409D96FCFA4637
EE0055EB8288CCBF791038203E4AFB32361ACAB13BACD3E465D094B64D4A4CE7
F52144B2D4AA133851EC30082831A288160FDA2A53AD5E8DEEA70B9D144D3E1E
E72343AD613C09135BA5F8F57AEA3AE6C833943F4A88DE2D7515B5B3967CEA26
ACFEF57ACC243EC74C5DAC762566AC9955A2BA5B1957B2AC35ABF77E1625C50C
8D4D86AE19E69DA26AAE7F316592E7DE134F775A835D46A69D1C4820D4835821
CB15EFD2829E58B3F2115557F9DAB68BDD5D6909EE7D51FE5378A0BFF5A15ED9
D04A7D6DE3B35161262BC8B0012694C3EF26452F9B772CD7C7A420D60AFDEA20
9F39609EBA0BD1FE89234DBA4AD8E2676736EE24E135047D1D412E289BBF35B8
0F92DD03564F2C662A9898569E109DAB60B870AD2E7DAC2D91700290DF568B81
8F514EA832662C580500C0575C9451B788E528F0B8FD58B23F21FF9FA508C699
D4590C50A57260CAE36E35E6CDF1C75CFB93CF0F6B4392F22E77077108CAA90B
D20054D9B07C0474EDA9C21EBABCDFBE0D5852C4AB7901F50093D77E83CDF905
D1B866D26F5671725C1EC2AABB2746280FDDDFC1EE81028E13027F26BABF3AE3
8AFB98A4A2A46FAEF9273CC1C02223B545B466DAE292D4D17EE6D7BE7A1311BA
3AD03B0A0B872E5EA8412EB3D9C9BF12FD6EAD401F43601BCC7F39E89FD7D5E9
E67FDFBE08A8D70AEE51EB0ABD6ECCFA3EF49CE8BBF6EC7DAA0DADA3095C755E
45A2A9573F0ADFF57607D1EE51B084AE9319C95757ED0A08DC6C5E1A644D9C19
E8294721AF852399414A0B6247739DBFD8DB8B19E152524A12F8C4B27C5C38B0
E85CA476C09617B1CEE6A2B48CDEB0450B99E5E0072F271280ABB91D54CC8196
80322EAB72E1250A76052866FE65ABCDAA308258FCDDD13DCBB18E462B56F956
BD863F189B3E4F336841E8CEE0825DBF87AEDA7FD1194B2E9107BF28D8FA0786
B28FAFD19C449E201F291156308F2DA28C1651543DFEF356678A01249736ACEB
129EAA614F701BB7EA01E8978F788BCA69D42290F62CFBFF58D44E2590664FBD
DC6FE2646B6845D9D4835F7F3593FE97E596363AB8F026A562E25D24081C0B5B
747F93C1827FB8D07AFBC9394BA9313FE3EC851B9D085A7DE138399862046476
ADED15087DA8D19A2C3B7260FB6208DF16A738E3585CFBDF46AC09FA17B14F61
D5378232BAEB5D8361363AEE238D66A94BAD615F1FD662DAE00DB617B126EF5B
2BFEDF4CEFCB3FAB423EE2021A2D8761AF7A0F302A83B960B624C72D86913A32
21AE9CE1E7A234E7B458542C45F05748B1A1A133EC7DFFCC255E05EB634DC6F9
D23E1EEFE8ABB3D2BCA23E38220307855AF6BBD84C39D2445A148D99CF927CFF
C29347169DD7181880277CB66884B64E50549BF800D55543FB93BA5928AD3879
ACA54C6A4EA4A96C696D220BBBF185B88846C6C253E91AB2F9F226770D6220F6
063DD3A4400C4F7C4C1120F3064297CA2C0EB02E8BDD6BBA9BAFE2B424344CFF
3B04FA6D3578EE5CD2A4644EC087D61BD7F5F5E0AC0AFEEC8813DB5D61979894
557929B520846932D3A26B7E8BAA8EDB46BAC6C7FF326B7000CA970B45792B01
AA2DA24F585E717C6FB15CFB3C815F4EF44DD5BAF85A8C46162D1D7A306DA770
682114E8629D27C2D02EA91900F6E7B049B1C432F36CDEB42D646CFEDAA09CC2
51C84A48B5AB27BBC9E57AFB1E658E419759560A51607E66B968F8E8FCD31C57
E5951B7CF21F7DD3136F99DFDF0A598942FA060B0610AF7C86DB5424750CEA57
9D039411C1E91001090A4A7DDAFD3D75F725FF498C30ADAE8FB6E33CA153EB71
1DC5317BE622317120AE39713EEC28B51D1A2970F7C8A6467170CB00A352AE3D
E5D771C66E86F97387D4AE97D6ED2F391DC1EA42375BB856547B82DC006747FE
5D96855511F8497FCBB7C1220C5FE36799601CE72DF8F2762BB91962F2CF41C0
75C4DF19A0F0AD8A46F5BCC2BA12C4D182FEC37141AA375205EFA30478065371
7F1B35DBBA46A84D64F6311B3C8D1E4067612535441EC025CBC15E21B63F4B05
2DE83EA231940B0E8A371C290CAB5A02047ACC9760C91E86284AA685C37DF7B9
FDD312B5CBFC4A919649AEAE9278DED6958DC3FDB4A810F2DBDCC8F5B9E6E9DF
CA889F03CD4763A99A22E04AB5A2690C4319C7570BB9D80AE754261B7BF3F773
3C6E3988307BA01418F578D9AC9A6782205426BA7B5E2246AA9E837F39F113D9
35DB9E74C2E94E8F914E2ADCB4A04DDF34CB499EC864B2332429C9661A9AB11E
7ED874D3948549355B2C66E26CA8608765C46EB392B26FBC6CBB27085F3E9FAA
ED13D06E7AC97A386E33F7F5E5E0F97FC9B58B6A605314F854A16AC3011DA8D2
758388C1B8088785EDD9C1DA4F9E9A3C57F31A1B74983085F6E298C4F428617B
ADEE752997B94093316F759CF4284ED126A95DBB4FA2D09EF80D1F2C507DF980
D3D8374B2E91552AABDA55CE5511542F816C40D939A89C352150C62369484B10
11EA7C2B87226EE6A4C6526AE5DA409166C84CF5342B479A465137BD820832EE
94D79A8D0012EBBED95BB3851BC1CF1B702A0D7427D4CC503EE02EA8AF374A81
764C798409B2B6A8906A643CC18D86E7213C0FB2CBF3D51FBDBAC9706CA8B4D3
FD1F68A5290E441BC2DA8F5E3A027390810C044FB4980C9A4340489FE77024DC
C582B1430A73587F1FD58F0E75AE419A2BFFED0749F36BDBDFC5AAAE4AA18B10
6C43E65C93925D9AD9DE402C1877C3D4245559383AA105B03EEDBD2E68FA624E
E003F902FEBC471AD6C6DB3CD6BEBFBA593CE34982287C39A5099AF1EAB36522
98663A5761A6ABEC5BBDFDD7646ACC2984A8A0BCA5058EE84D1258EFC60C681D
53BDFCD4A1FEF82C14CB57CEB27382EDC9D92DFA4E4A780D4E8C2E7C08210E5C
A3853F09523028105984C4435D8DE1064D3D38BCFD0A94DA868981A99E2441CC
BF790C5FF425189D7A118CF52B78C79AD664A57F7239E2DB6077A009A078C7EC
B146F7D048955B1E118978539DC9FA48D9DA309EC266D02004403382F61847A3
CF2C52C5CE19DB05CF529A5DB0DFA4F1AE311FF2EE131501CAFFB2F624E4904F
97DFF64007B9D1CB2029F2EB9E476BB84F3329A245521FF9BA03A269A0A87029
002555A582F558D0EDD67F350C9C4105F867E2AA3F10C3D70451AA63555F598E
184CE235D436D37D31BCED986A271515B8EE98918AEFBCEC22D36B8EA3252024
93FED90E9AE1BF1ED5D23AF5EE50405693B495A202036ED0A0BD2CE5690BF4E9
25AB2CBF5FC0FFB63CC567A69429EA3D1EB13216E74C658AB5C555F50B3A93FF
5A9AA5FE1F40E902654A5104DA36595630B818CF24DCF8958A0218ABC12DD547
B3914B126BCFF1310CB34A64391848B2F91E669D10F1A040AB36BCC8BE8F2E42
F6B821E75DADFFFC89DF965CD18FABECF6253EFE1E6EDCE9C0A6577A87ADD181
B7E717F3ED85E49FBF0428125639D0F9FE44C80AC89AFC593F00644D679B9F17
FFED44F44192525D19A81DD225EBE4946011655C21E22D5420119C91515AC8ED
F7D1EC08F41999337A57A673024DB8853E0DD4E1EB97521562F1C351596257BE
6C7E12033F41BF6EDC2A3403E798B8941D9DD88FCC4E42496EDB05374C2AADAA
24486F9A831BA1179B2EA3602D00448D398ABC61902608619D9DB9BDE5755BC0
041577D104E40DA2C7842FCAED2E37773813AEC6F95B1351603BB3F6F3383B80
D637D761A7A992CF58188FB0A04FD6CD7CCBD1C137BF68BAE02943FAEF0D36E3
CF03D2E7C6B34EA2CA4021C282B09B20BA9B4009B3DD6A5FE918CF3B8E4A8360
44E309C58AF1F3FFF3B351EABB8331CA5AC5811B979EF717FAA635DAE480746F
68D47B3A759242A25C6BB36342348FBB8CD673DC3B1859B9B5C8610DF8559DF1
38ED95C0965FEE9DFD69012038382BF1C6BBB37D5FCB82C4A49CE107C713A3CC
E57E5EE257FD4D5D2122AF19FB65F1E49241CA0D3B9F10F42B3F09AB7709626F
52CC421949017016918F0AB2DE1927B24908F7FFE92600D0BAA927ABC183A538
251EE4B4DA4571A74599921556BB8971E1FE2B681C391F7CE0B1C82993DD2C38
48D655AAE8601E71562993AA3BB06808730D8BDC394D0A708366442076E3AFF6
7832F893984C011D319558F8B12EC74AD23D8D3D60FB98D39D08136DD82D346D
BCB4DAA4FBE78E6692B47F1E351371D74A3804A66E66411D46120964264D01F8
0009F4D98FE9E8ACEDDB346F8E75941C1189A61A261C07281BCFF79F658BC473
FC262EE2FDEAD12F12216637E1028862E19D26FF7E13EAFFC05484B0011D8E36
FA1300CB89C57B1EBA597184F5E0582C2DB209479DA25179B0A0215CD4D151B6
435D545AF33D155E7F8518AA7BDFE3354A8F2EEDF93D68986D1E79CC4B292345
2F0753E8541E6DE3FD341905630CE78228E0484DF92D8B8F5894357A48C8F086
8369A32C73656A45B8347529021C910A793AF3A361467D0F4BDD30DBD01665C8
6A6AFC2A734B835E836B7C7D1B6B6FE2F8CE38A96655B073C606EF56A449DD19
62C77742A8C011C9628BED9C7AD8647A1485ED5CD6F0A4C535708D4AF7A08C72
3C249E2405110F8C0B815E3EBB14C6AD0EA3E77DEADCB28F65FD2288E0DDEE9C
672D853F15B7D91DCEFA7321F7B451B551150085B4FBA81936E6FB44CDBD739E
86EB66FE2F4F06B0881F6DB5E9E1260F6699D945A611A7EA348DB3C86BE4B080
4A8A398C7747EE66624D0A4E0C9EA14D8FA65D54D159A92AAB7266038BD7CF8F
237D8E9B7D4AB72F83176586AE64FC2FD52A7DFDC782E94787CAD9B657C53F19
7CC1909AF5B321D1550C15C0E4AD2245D110C2485C08BD11DD1C4A4896F09196
5DAFAAFEE8AB73E68516B5714FD1D44C97A8F65464577DDFC461E6ACEEB25CAD
1B04BC370C99E1DD8C3FC2A00E05F0D6076A34A4B833ECB05E6CB0331033E4F0
74D29DF85080F069561019E04A19761CE2B4D2014548B232CF00A760D92BF4B5
37D15C66B6C89E1283141A95222394672BD2981221E491ECE4FEAA89FDAAA514
B1A496AF69E0C2A56B23FF3DBA241ED043B85236F0EDCC75AF25592EB7E7829E
4EFAE3C6BAD0D1A368105DBDFFEA47AA88871AAAC76AF9209DF0314DD266BE3B
CB319FC0FE2D9A8CF214DC85B763C354E8017D8715D6A220A3B1458EA90D68B2
B13A5D4A79B827C9392B9100A5452C092484FA6FAAB5FBDEA2A2C207DAAF5219
BD47323A08AC7AD4E9217EAF912C86CB6CD5BBDF84C0BA52E56D3F05CA0DFF5A
B1BA1C0D6444AFF9AA7F72E5C367D4ABE060F8CAFB79B69C93BBEA5FABF6BD5E
8E7468E7D616B23D7D892ED892857231C6843F7FCB8DF4B1F3F49C4438FACBBE
1896E3E67F154BDFB49E029FB45C795567D2BDEC73EC3B8308B94DAE1C20EC75
6F18E6D3C2F8FC60222DD0D159923519E3E7D441978E38D6CD743AF78D98C0B0
F8D853A6AB8D32FEDF1A11073D6791AB24BC4874E464ADB3D3F07FA22542322B
7BEE5EF03D4CC5A76466650B00DCAF38B8C9332CA8DC2E6F451975A7DDBA068A
F2F85591F15357FDFCDCBE0CD472F226EBC7495FF4820F0D260B7DEBA72FE89B
64C4CCBA115B7C689AF1648CDC1F1D78B25DC8D6C61A1079A1FE96E5EFC54229
FE135BB2A6CFC10448F9DA456EC54EF48914D8F58F31FF980A160E1E43F5EA1F
884939C0A7E13261A8FF61F2E56C5C273D04F5DE5D8C5C9D01632DAE3A89D1D7
9F2B876A3017B70C6E41B33B67AA645514366337D000007EF744EE23FEFA98E0
CB0422722F48ED084D3117388A7BC517A62B79D15B613C7179F42513FA9A44B8
D0586FACDA34A0D0DC74662C3F4FA1736DD31B0FA9A1CB391D0DB8F09F9FEED8
8A340C8365AF4E4BC5CCEF5353BCA7EF8CE6151D158AA7D6F4DBE64EF224A03E
7E710108A7D53A4021CFFA25B6D7FBB581F15DD775217DB6C8F2F209C4EF07C1
FDF20A19AADB222DE5D03085534DC1B358CE61FA4B9A8A2DC1BBD437830EF66B
2C4924000D2B35448E633F319D5CF793DD6C37FFAFBAD2831AD6161DCDD67FFB
74C773637429CB45EB3EC9C5270FD4EF898C821C238EF04DF7BD7343B7724669
B197EC514F8FC3215637FEA7A304C5923205BD49CD627B87C6BAA5AFF4F8032A
501D346059981EBF2BBDD15215126276E333BF24A5894AA474C9F08EDF66B627
B992C833B49B46EF5DDF9B3D21432F66E1F7774D9D4BDBBC9C4000761549EEE1
10229CF7196AF3CFEE4D4DF2FA84E7FCA71EA3290AE83DD7687AF90C0FC563D8
8001706CE4AA132A8B43EF2DEC578B83A7A495DC4CE31D05873260E8287897F8
C652860E2E85C461A2C93D616618D9CA254878ECF291309CBDB1515882DC56AC
7CE1F8CC0CCB477CA9031023CBEE603F7B42E8344FAA94F2C41CF57C40DD9672
2D089DEC3F2774704944A48A0E6B71B28F0F55B5D198986A7843846D984CEF58
6267439F149549A6615B4315E82C359BF2E9D4637559B9F38F17E3877053BCC3
F004DB440C37234ECA485648CEC7CAEEBD3857D3716AFD38956234C19F72713E
7E021790A1443758736475A38D8E5132C5733B4A7F9BD98A4B83A2FCCAFDCC86
9DD916C5CBF812D3F5215CC6F0CC13B1EC420A711AA2C7B799E804CDA34D6EFD
92514829706F25317C7FBFB9FE6B840B4ED8DC99FE33F7A05469EE84164E7DA8
ED1557A2588C6E05FD0EAEB026BEB5B1B2ED69589587A48B0751430D1CA01209
4938952793C03F6195A204957D175AD32E9F4E22BC98381243A4DA9CD095F342
69A0B2804358BB8AA1AADD820F993EB7ABA18FCB0937095FE44872508DEC3079
1A3E891A8271EECC4DB35810B23AEF6DB433E8C003CDD10D18F3D2433B05EF6B
1F64A14FAA7DFCBE9614BB38EFA28DE86728F7959E81800355E907D237A8F540
09F17B7ED3B19BBC746DE44065D4297B398A16DB107224A3FF370EEFBCD54039
208ED7DA3A6C181536F13665E562A162AE5CFF0CDDA4763AAFF2692126B4FADF
5722ED5DE92278F31B2E573FD86696D98800443F32CF689CE3AB5E1BDC9AD9DF
4202E20EB55C027BA02670D9527B908797973FF896483930A06ECA11C477865B
61FF0136346A52E994D5242B0ED0DC20D8406F63B2CED073C5F6916F9AF0C5F5
19C9B8AE602FB072BF7CBBA2338FF37B66DBD7046671C2E5DF9AB7178C49109D
C23451027036DEF9E8780305ACEAABA4B97309306F7402A05FF1454730FC7EDB
ED9B7CB759EC643D40ADF2D9F60CF2E4DC5DAC77624C2C2174B1A09188847B21
A3D53619C0B12767C3E582F27C8F7379AA6C5EBEB45D3AF273396F365CAA3FBC
FBDF6159181B48799F6EB6B3CF28B8393085DFFD5EBEEF83D696C0FA27B86904
477A22C09A531992AD7941AE16EF07E5231112BA37850D2AE40FD483B57B6707
1A8CFBB6CAC323167D9D96DBE2AB542E2C7ED1103036B695EDB12D5762D8075F
69A1458298628389403C373E5CDD5962599AE3BA0D086EE6BE168334E0212265
1F1241C6E2B89D5A96BB6DADF878EF8FF5E68735653245AA60D404B3187D0FEB
65CF565A912A654E23CB5747C69296B7999229531B651E4C98B0BD07C1AA8F37
1454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E607AA39F28909744DD2A0E85
4D72C2587B6CAD29EC5A2891874F4F719293D0B0EE58BE36458AB3CC02002C40
F040E0BE6E4DD3C751E3FD6AA8BB509B5085445A66B6A4DA3781D69EEA4B6603
E0887ED037B1BA381D130F9809E8C541568232CEF707373F07E753AE55712F2E
5C5FE4611F75AC6C8238797C13451EF9C9E21B9C60F64B21312ADA6D9B428EC8
7CBB3C562FFEF9B2331C9C082009DCEF5334D964597367A2AD10641BD2BE6FAA
0021141A3EF5AD04E9E3B9029AA4C97ABD7C2068666ADC003C514B50CD173E9D
3D2261AA9B3F73296995CD0398C35E5415AB00036ABE402586C4362F28085255
591314013EAB7158A681558677A7ADFFCA03CCF78564288A3818DFA67D79E173
97D9220AE366C07D82C748745137A9F8964531BBA4421F688FFAE7F13B55C205
F631884117FC54ED2EF42A988D725873263CDE2B3AD6B486E836B7FFB7086E27
888B9055315C1469BE1B6F645FA203676845F1085500F197DB262F97F30CD442
CE88A5A5C7792D8E275EA05A49562CE367D96B03C04265EC6526E536545C7B63
82E516245ABBA3B4D23369E6957AEEF5C17D83A8CBCF5A4AC4BCB1ED391DD896
53A65226535F722426F4772C11FC23F3DEF204E895B8F66CF0745CAB4068CBE6
524D23BE99C97D290292DA35B180B5A4F17FEAB6088E2CE88F51B5D7BC7DD0F4
37F1C1A89AFCBF166B5E882DC1A89E5BCD82B4DE1097FBA4DE7BD4F60E2FE392
959129A49CA1AC51B9CAA30D805089E1E96AA5F1C7D8579E20AD6FD4A5ECEC62
E1E0B1073E6F0B6DEAF86B33F38929EA3841A77B4F636BC2CCC320100FDBDC18
7A480D21A1845207E8C79FE8C1E98BACBDDB68AF7CCF8E9071B741343503BF86
D1B7DDE8B8CF683227F8217212BEC21A750DD365B57F677A92DCCC2FDC7D9D38
A8E9A887E9C000C9B6B654F55A192D587A2826DDC53126346B09FC68D0725DF8
36C1C62F7C09A0AB81C8E8D447D5FF7EA0C923E532E59B5EEB19420CEE8E6BC9
028250A9E5624179E74574E471AE16E0B35E28093E1B40B5A19472B038A82F59
FDD02C4FDD28D8548A86AFCB1F00CCF8D475B003A5D87DC8C6325F0460690BE6
77AA6DB7E0250B5194DB671D8DAA61F415A48B0F77F4A231F76CF009FC1019EE
79881064CCEF0B4600A60B7582D25C82ABE700E550B0E939E8366E469CA56915
62A9024DA5CF1F78C470345340A5C70008DC13655D7241194A25388FEDA8896E
DF62FDA83DDCD78D676E71B6C51A64A87FD82AC7FD78292CD948A4DEDDCEF664
ECFD1D04331C07AE954D0E9CA215A6C28E3975893E1B15A653F05FDA97C15FF1
91604AC8D5FCE87B674B174DC6CF1ED0FA43374E288DC93DA5E2DAA1372D5D4D
2555A2E8E23E29D8C8C5F39807B5A2F1A90DB2CD8A2335B62CA1D8384D4869BD
9004CBECE51E40B03E9C79BE24A6A444D0F771E2BC082EB089902EBC0997BBEC
21A2A75DE53FEBE1B7B9272B5F69BA4A04B118AF10776110E318873BED624E3B
05DED20E8D0E067E2A3D0BE8B2D378E5E3EAAD4EA0CAAC837DB9DC36CBEA7C2E
D59423853D6650D0E4B4C9307B61C49C3C3EF5638F9917A410814B26CD8DAC2F
21C91810C6867550C0BDF4421DB82D9EBE634FD17B2A2F43F550B1DD4D761765
DF51FF9FF10CFE04F29CB619529E5A19177BBF30C4399A266CE0B3208E7F3A88
372FC4F2D4F37A3B26398A1D5AD2F84F0E1339008A3DF95DB42E5ED7AB77C3AF
347CDFBC6BAA5BAA1CDC394DE6589A61002EA3132EB8461984D3224DBEB1ECAE
E51C7D99088DA06584BE2E6A1DFAC98532A65305D47C72326D86BEEB85E4A31E
174DA9330491EE2EAD0AE6BC9EEDCDE7AE92245AC31B810E4C95B7506440F3B3
4C329E6B9A88131CD89E1B60B0BDE06438CE4E2E123AC89F96283A4E9F067ECB
8C163606C3851355ACA79EF5C5033D4FB1CA7F909B8B374E4975E93D9FD32DFA
0AE84699D18550F4C88BB20B7662677D7CABA2D572D5EDEF408B6899F78B65A8
2A1D003242430EB6FF1DBE8C3D96F2BAFCE70ED83A9D22D14C37AA9EACFF7CC8
1EF9860D5DA595CBB21267DB235577B68003BA14073E2702296B284F80325938
CBF2CF9B24F12BFB5ACF759FC36E69B32230D2A5173FB7CCCC686A7B59F013C8
9DAA23399562865AAA83BB10293F2CF30358B76F04C6C0E80D3AAF01749ADCFE
25C5A85CFE645109B1AA5FEDE99BBB3800D471BB00C651D185848F038485EE70
1DFE15086D6492464AAAB6FE74EF17A9C1AC42B75BFC767EECE17C65560A0EE4
086C3201616D034B3F80AD2AD5D4E1DAE678029CC028DB4D2F6CF98026BBBE22
8675A553F3A56FF81A199C054093600932CC36A7FFB12F2C8EA399F5B8013486
E63805C5A30C4C520E121A74EF9C325E5820D3C9EF826C2CABEFDC2BA828B6D4
9DC8D8F8898CC2493B42431D2AE3252B6C16BE682F55D46314BE428EAF295655
A9E39C505CCE666FCB0A12CA088220D7CC2B4F8940696EAE0FF8E22BC78B0309
1B286BC4C0FEE3F6F9B0C38F639E7A62655268BD558AB5F9CB60A2B2B7D3726D
4D06CAA2CB08BE179465EE0A5930150D0AB4682B25D8FBBB10124FFCE47E4098
A87A48E0F9CA568D45B8071F348960481D21F6856A352A5B2537EB96BE26E034
2E4165D30208448C93164E443864E8AC0F394CE7BA861E4C1E9EB7DC11D6579D
A7BC1595B16AF9E044066353662414DBD469C92C458EB38F865D378F10A4C2EA
0A0F2F73418E78E3ADF09CBC0E99A1709E0591879D2EBBF3BF9D7499840F2B1B
8D81073A5728AA57F99008E157FCDC9D79CC6D60881693C6A129F818ED3D21E1
58EDDA88772235D781043CED8B0FDE38BAAF1E6CF58F4100ABC87634EFEBA19B
AB5C24ED5906CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EFA5AC7EAABE0
35F2A19ADAE898B7F06CE566B5620FD71AEBC182CBE1F42E739B6485473B414F
CCA4D5C10FF2C8FB7FDC2B9D64684E50A322FE625BC7D1AFB7A7ED982FEDEF04
A2B4D3084E86BE8B45B2158D284F2D0E9F0204EDF3AFDC577DF8F4B125C0BAC2
EA874D558B0F46BE4D9E8E026C7165561ABC5CFA653F5B6075D28B255583BB04
1A57771D1E94A269173938DC242F0812442BE5645264D7F6245C0559045C91E1
147873400FE01EBAF6D2498CEB88F452F56193C9D6D357122AAA06C55A90405C
AE13824870A853844934D84309AABCA1A51F760827A5409982646D145FCBC330
9933A1310FD71115A0B725E99CA676A789F59B3D595DD347079EA1554A4608FE
94470470AA5D31B8CCE697B76D97367E36C22EB474C88ED06E0A5AE6DEA92FD9
43B1D0E23BEEF2AE37886822F96140C2E0568AE3BDFBDB8295B01C0742475BE2
721C721003227DF24CCB36C662C7BB5E8F7DA664D1CEC437E170EEAFB02AE905
C518E634F6763DEEF59FADE7248B2119CFC2D52AC91E30C06E10EB0E6EC70F74
76C183F33477CC6FACCDE1295B615F37F1395827E29E3A1711FB2B69C9F7A58F
097CC13CA9BC695F782ADBE50737CE43B15FEE78D5A71A87D56E0B63BB3E403B
2EF8C1E77099FE3BBC231BFC42B80B297A3DB0DA138A7622A931DA293B09EB76
88E183809095E88840F703E9BF997E8A6666919C530F425F12AB398D1B9340AC
24BC42C1E43A2FB584A695B5C95EA5169889D0DD08D555DA95DA96309092EB2B
6548973F65E63E37274D9BEB6C47FC02E53E6410EB7C8849606F7BF8F2C0F92C
CA49C489AC56BB4FAEB441E5BC9503D67C1EB45580B80C4B1937469032C36588
D4CBC964E34060F98FC38430DFD56AAFEA4135F59E74D46993C7054BFFF87BC4
3B7676E7928DFFDB5EC6106C4A13ED18EBDFFF78EBD97F40F1B3C7C78221B008
1DCEE060310B041A3D43118ED30D3D9000A6AA1F71D6CC6FF05285C0D767EAD0
681E616D4350FA55A7F6C79275EFE820BDAB84B7BFB9623B3D7E59950F479B42
B30331EEE94AAC7F5BC1A5983732A160076864F407F99A68AD7AAE818E62BFEC
839D4500138EBAE207115E8947123C8464B936B6AEEA36BF55E7669038BC12FE
40176C417A05E554BA8E60F010BA060FE66293697F07A62418DD31C081D3A884
969B4128A52251DB3EBDFA8F59FFCA5E7FC82E25FB04A697FDD95DEF8B2D573E
FC2CBFB7C4F51848BFE651CA54150184FC1A299434634D772D2EE66CC0C4FAA6
805EFE03FE75543C2FA6A4C86B4A1A47B29E51AAAF8B58C7CC031B2CAF412650
1FB9071E10C2DA4065A3082E512F4C9A33DBCA5087D9E044FAEE66BA24465689
97D76FE176CA6C311D84D4D071C1465C95E05BD1F6B603ADE86766D278DCD15B
4C783C1A33DBB537E0E98289757C0C73AA8C00CEEA2D593874859A612352C2F5
CBC7FA70D54B2887A949DCE6F28F677B2B3B2669D338BE71BE9E72BEF9219537
AC98E1666C760F3C795DDBD3954CF74E81487DA3809637444D659BE32998D564
1A652F2344938E72EA1344C6E44869135113CD900AC1F0F5F458F5034DE0797B
F8BDE5D7CC3F8237395F6037F0180333B6DF2EE460494281C0ADD4A7DD834FF8
4339766A71803F1C60BAB051FE6BABAC66007C5B9E2AC069379392D74A6B60EE
D853133786151FD06B447323A98E0481DB2B8033937ABDC1198838FAC38B735B
4584A802F598762196BE600D9AD9681CA7F830EBB4233C443F9C36A543B27057
CF1C7611923C07007FDCC1895EC40754417E393B7DB2849F96CBD0A038B6BA98
B6078C9FCA1556AEB8E16DCB595B059D40E2810C6AB44DFD60B2BD572D01AF73
5E487BBAC477BDA86A810034E16CC0C876B0D072EABAB7EF7D075DF77B294460
3F47BEFFD06259B256CD1A08F62F5E7125CAA524C8B374AACE6AEAC8CB4182A8
87EF4B2EB4FEA0D5EA576DC9E9AB838AFEECEED5B387AD84597D69FC6D5ACE6B
B9D75F9EFF928D2EBA427A287953A4F515099B6FA5B8477E9788C5245492BAF0
32951F69E7105475D8B6C20CD382EB8EEC2982333428081F09F426BE5FA63BCC
E2C44B2C415BEA7B5EAC41CC092D15E2CAD0212077B3F0D608B7A4B741D98D6F
302CB1578B0EDD5C3975EA1D7CE4898094BCA694C00877E6BC65EC82F51D605C
49E1153A25EBEAC76FEC601CF4D10F65DAE3EDBA93B25D0CC6E61277E23AE3D3
5A9206DB8F5959CDBAE57E0232C6028CA6D11849D17B5DA8ED647B79AB412E08
576CF6535ECC5875EC3D858E3BBC4B39C40DE66DC5EB6CFD97B4D21C5AE58CBE
93BCE3B522FBC3532394EE4544FD52BC20C689BDDDB94BD67997F60F31FA6239
3875F40174A8457B12F3D607619CB08AE72CC5BB3A342018A1739213898B5CEA
D46B04C44DC66508A3F74A2746EF0E92608EAB1E4645EB7D1271EAC040A9272A
535487624ABDC0E3C6C043C47CEB610EEB1C7C304449084A11F8C8B9162E2D45
F7EF6BBEDD9A5A3A74BE4EB0759ADDDD8EA48E045FAB03CDAA01086862BCEF11
AF66D26B9A0C622ED5E607ADCF51A5008A5CA9091105129F16BD5B28DB6DFC92
3AB87182C9D634BE8B5E06993230B0D07975198962796AA4E86A0917C4EEF9B9
6EC85F7F61CC55FAA8466B41B6AEB440DA475E13240445D46726A6D451891853
04D394C41E33A1F66F931FD80112D134BB069F1A7EB701FAE036E4E671E52588
E4BBB8485A88D8AB7374E485E944CF50142B0C84B72B2E6A17C97FE4C654C9E1
22065BA46297F7D142D0E8D87F5A3DD54376DEDD8CB84534728EE8FE26808EA0
8264BB0C11C0528917E8327FB8B6B10274907C8E9A28945C75A2481F951D8397
2DECD70AA8987112F05C939A6FB0702D75DA5F3469BFC41E342FF7CD42F6B821
E75DADFFF964700EBD38FC43CA4F59B3F360C66AA7F5E3299C87A33F6AB5ECD7
C9B0A6F6C0264048F377A11D08F846F0896A491AF8D80A714FA9764D1F94A025
EF53C533AF3B26793291AA2F7760754D8ECEA334EE267256720D6CE4B60137AE
8C3DB6684096A4CBFE226E7AE728A1B19B883454F84EFB52DAA01D2BDF29421E
083D0B1C4496607F346BCBF09A14C80C79DC71ACB9334B3268C2FBC093F5F99E
28C97874F6459EFCC1760E9C6C78E60CC0152340DF66E083E58B1EFDF083A5E8
E4B299607534E588FF88B91CA5C86D8E92256042E3E88F696D4EBFE58F651270
750C63719BAE108F344E5F0CF9DB294762537A84DE04CD07E656C42B2E9FE049
2FCCCFF5BB4C531EC8F491AF599ABCB351AF17E0C816AEA2F5D3BC9B70FBC55D
E4418B61634618239067AB0D70008BB2ABCF06E283F5507F6F94C883B143CE5C
2E92F4A9C78C0B074F8E374100814F341861980DDF168A4659E4B9705BFC0D0D
FCFDF130BCAB93A3486B2251BA5739F9B229E9C09CF9428E7A631B9B652312CF
6868F70FA1C2E3CEE3225B51D3135CABFE583B0F00CD0DE83A89CB97C7E6E5D5
C17A42A296FD7702C7FA9E6A3552760C1998BB54FE1DE1ECB51495B569475C90
9650BD9404BED91639395DB88CEF35A4B85060B511FCA2660096EAB8417CE87A
31ED58701F8199A3D2244DA8C446EEE394D91E2AD2AD7F24F00A84D4963DC226
6E326F696544F6B1F129A854A81ED65184618E121E010ECD38C2B62BCB89AB73
052CCE4526F4F02BBEC77B3D39471E1EEDED7DBAD6C2DC672BF913ED44A41A2D
18BE65E312A2D5ADF6881FBD66D03721BA9C1B8016258DFB92ABC3370D4B6CAF
B8ACF7A21057D644F616DF2BF193690895C7BCA510FE3F3DA02EC5384C4E5058
FECC5E06F68BAE37BEB1482EAB2DA6DFAEF53253549A5BD51E447248801C93F7
2BD152843B824961969AA1317F1488C395D5607BFC6008F2EDFC9D74BD2ED07C
B68B2B95F813D14D88904AD23D3FFBF1AFBF1164062F545BE743C0CA68BA85A4
C0A125CFC22F5BF18F89D806B3E19297EF549C224B0BA4B135CC8709B34137EB
E447A68F1A9E89C9D2D490CBF46A09BAE5AF2334D5F766F52626B6321C727E24
A0067A893DFFFD64DB0BCC9760C91E86284AA24D693014ED96902B67BCDC6AFE
A2CDA4C53332359B83362BFCDD9467958904FE0CDB65F52BA057443EC42BF4E8
2757124BF3FC0BA485E050DF883E4B2767E236BE26824095B01CFDCD5113471F
061C2E3C68169AF8184B6E0E32C9A1809435FEF402FE317FAB705146DA13AADA
0E7779E62FE21E860D87F717B64823D752D183A031142E3C4F560561F8EA96BF
0A4F3EF776206C2286491A095376BDABDED1E6453952696AA1F098E9DD27E4F2
3DBFE8DE303E2D204512584029A7E941946AB7D45710ED4391DE73B21844102D
B04EB649504B1093C6B9CE383B7C5FB00A0DF7B4DF34233D0713A6DBF2A6FF6B
33BD3E063893EAA7709AC97CCD001D327840DF12896F122727523AC23B401639
AA48FB347E8A5B1E0D054BCD4F9170AA78D18F383BDDCE027F1E0911D11159D1
9295A351BA9BB9D092D926F9C979230DF7CDA80DA5853EE294F2BBD70B6D73AE
41210AA7A444428DD055DD35D91A1DD4653807675D27DCB50969D6E738FAB4FC
A6C32FBC25A59E864F43F087067554D464306A44A49AF8095E431F91B8EA9A0B
EE9D2AFDE7802DB04DF728AF5D691124FC9806591766A609FC756406669E34C6
A08668808E0C31A589D0764ACCA13E235F1B8C2881C0B52D16CB8A3B5D19876C
830865B84B7C7F21762238B86E5B7DB23BAC9DDA957EB705309AEA0AAF7AAED4
A85C93979445E8D1E5A9BDD3B49D05A67BCBB18285BD9C0C838711A76C5B5D57
F356EB76E298AFD69717A52C2A3DAB5BD24A94FD83A99CED36976338DBD1E11B
CB2E5323B4D8E08C2E56EC2B520F0AA83C75669B41759DF26FC036EB5DF26713
3BAD6D6F8ED391FB6074006BA0A1E1A4A307BD9015DA3F03FDCA013161A50FB9
C34A61B893616AD0E8D424F62EB81B5943194F650748FFA9A3F5DA5901325564
90AA61A240D7276808338BD4134C8C65B2FBBE4C4D1209DFEFAE449071AB6A8B
2B2334A46069F71022739A4A554099F102CDFBAD5B21CB29F03CA5FFAD39377C
A1DE2D3AC84FE9650384AF33B5C6494E5E3B14FA09EF6982B1220A197516A003
F5ABCD2E99512D7844262AACE40E04F2BC627789E0143E4314B3C4B93CF52BF8
9AC53466038C05C05921752BB004A24122283CA1349A39B3F5A2A5B1C8CA8096
2ED34B2887A949DCE6F28F677B2B3B2669D338BE71BE9F253946F772B5E5698F
C7DBAF51DC2CBFCE0781919E031D1EA4891A65E0AC01235E81F308949FA13394
3BAF08BD42F3FEE824B277DEB9489E1A2312DA7F2B295D688F8F002C37B29185
1D973D08D99E12B578C4992EA47CC5B0C1931207960C9BA56892999790016B02
36D719FF67F4784944F1C7CC6E7EE5D312C42CFEC3F503D98CFC04E88AB5C996
97A210FB5F43BA7DFA7A6B441D29E04736B29384E8C9B2EBB2EDE5273C41CBFC
78BEE42E887A2A3FFA95A89118AC6764484364FBCE136EE6C6DBBE4B37FC34BD
C05225FA627EC4DDDC7D312718D8D02125FB3120FF935825943A24742E67C30F
0C62CB281F2D681360411D6DB330E73E7561D513BAA20E09DD2D3057207C3700
131CE23540CE55A0462D9DD1EBE6316C5FF09CE69955DE73DC69E32E95909CEE
ED59FC3477E751CE5FE760289FB5DC8084CB30BDBE30CF0B23375C83AA4111BB
9A9E608BB91CBAFD327A990BF1BC314FB0BB45DF32E42FB1338D675010C03973
68941554340DF044589D671BA369D8C6D511EDA9D884B8D708B6CDEBEF06EF0C
091D21B749F1151289F0E62B89F54A001A3FC4C5D21126A66592F51AB6DEC1CD
3393BB5B7519C7288E99872B907D5AB583B082EEED8AB079C2E5620A43380708
A59D6337736BA2184DA061F6AB3B2117DECD7D1C12433ED9CE0AF54C73172253
EFC739D75284B93EA8851808FA65D21C48CB36FDF606B81E306AAC460B701A10
570D63FA6FAE3C75627720146C67EE26A7A32DD841F078106D54A33F97FFD30E
36E69B3F4333555A50F987566C2B8C83D91079238C2C778E65A3C355E1A48280
49F20E7ADF22AE9612796DEB9138059A4C12D23777ABE7F97CF8D7F3E36B58DD
3E802C89472529D7F7B2B062BD90F9C3160A42630263A3144AE3970C52F3A463
A05C99B1401DC16227AA3A728A63B732357FD01F05B3A37A8A03F9535FB2BE45
82664B6B85F3DA367E66D30372616CE8D2FC6DB179A1477AF905C41ED1572DBC
C66441EC33483DDB3AF8C5EAB6CCAAF74DB7E409C7211CCD917F3D306507743C
595D2974D33A6204A965EBF1B47BD4B5C2391DFC4B625477715F91B7C8B057F5
A58554CDFECBA0C820D0AAB74EFC61FA9777BBAE47CD1B4DA519FB7351DD9946
A2EFD36F9B6DD0F09B9E72C2A26D43083ECDECF8F4CBDB3FE3041580A4F56BDB
DF92F23947D4EFE57361194720CEE1FA94623B1DE3063817F123C2696D788B95
D0FC02C2D8FB1FF70A2C419B3B807DD236EC7BAFFB5E52213F7D6273928971F1
8003F82B7B9D4E951D3A911CDEEC4E4E76701476C787CC35720EFF5FBCEE144C
F805C42CBEABEA40BE3A4D0B8502A5208055E66ED4FB2DB4DE853822C6DE0009
E451C0BED6B20FDE2FEE2D7CC70DFD584CA4BD4F83F5B0E318392115D1A91F08
C3D5C4E2B69BD4A2C8A33AEBAFCB05DD8E171E28AB74393AB3183B6CFFE1D0E2
948B24D2A7E6A8D552FDF9275F1908B0453B07B419015F1BD3EFAEE42620E991
088B16079402E2BD9735E69C61DB29DE3B121C78EBB1E267534FCA8952932D54
830049D41B6E10CBE45F91E89B53276A7373CD4FD12D6B53E7A716F444BE8A86
D81A3047413D2FA7D6CFCCFEA0551D4FFDAF191F9C11F3968AA3891E87EB2FEF
47BFB2249E6B3794412BE92C4813FD6D3860CBEDDC58F39FBDE47880F9AA8145
A18255BFBA19DF9635CD0EC257AC982C0552F8FBE17F4D8771BFC6109E6D7099
51694C7DE931531B8EA85AA74FB443296734D6B7F9A7E71D11925E5E7B1E7421
871F8648C187E542A45CD9DF1211051D72F0229EA507D4DBFA5ACE89BFDFCE18
AA88283653D369FC63E6F6A8EAE43C63EB7DE075C9FB9CCBD43CB389AD8BEF9E
51F9082EE97D533EFBD5E33E22887111AEFFCB2D603F3C838F1E233B508A492E
4A47AA889EC50C00BD5ED114178155F1BA7580F1012429093E73BA3C01CEC1E0
3F14189BE8D7DF78CF796D5DE4A7EBFEAB56BF720636664139DE1108F3DE5886
EACBFF2DAB42398B839A69555C48F9FD9BD16061A98DB4A692624D03FEE71243
C94107DA1B4A6EE1062F9B4E3819E5BB73E9B5C5E3279ACD670BB3A36F8D32D4
63C265917DE9682B75070DDEE9149B9D3D50CBD6EA64C065CF165324A27EFC66
311D4DDD32369A1CB01FA5920BED023669F80CDB11D48BC7E8264D292745079E
93B94344B7BA5AA2C8D37429108877553CEFCAB9BEA7DC843A89857657C717BA
366073411DC10C480622F5D6FAA5A61A062C2100ADAE07838F53B0B7C64331A1
3816323CE98D37631576C35FEC78C3AF86F43B518C3969E35AA9F2B4C005BA7E
5A89408B4B0278013E81BF48B8D0FC7705BC0E77B8102BC9FAFE0A12E4E8DFE8
650FB95A1CD3A4F10FA5257CCFAF9AF6EBCD1E854FBDCDF9F9E80FD3C35F21D2
FDFB9B82F8D6C4CE00B90F1324865E3DF0009DAC072345C00E2C2C972E3A9C96
00783334216E10CE2803BE162BD3D1C44A5B179A2D0201A0BCB7098F88D7540C
65E80C3BBE833562BC6A2E80246D94F79ADB280E5CC38352FB859EAADAA9F0B3
363576CD1D4DAB0F4FD5F09069D2D10FB683593A036F894A471939C3E3D1B577
CDA4DA048B77F3449EE98988CAFF8DCCEB8AE09E0DED6CD87D6C3ABEC1078639
A3AF61189710E085BEF73864C620653D6C3E422794976A780536AFE15E63D359
C5B1E31774B67EFCBF96A4D3D1C2A51CB64EA15297059CAF71F803B32C1FC575
77F5E06EF5E73F2877A56111DA841A57A61D3A39BC4372A37561E557949A6D51
34C860BC50AA99483477F78F7DC3420956E86F0ECF64DC9F4BCF62859BD0FBA0
3FB3E4380BD43BF71AB474614D9A42140FAE137A7F48B332D42C25579737ED09
A882AF74475DB676698CFD9496C05FE717A5B5C7CCE7FC7E2B72320948A94A26
FB938BE70F1C5A0F57E8D327A35CFBE58B880BE6EA7A9D6474BC30ADDC053A86
3485D401194716D1CAF2BE7AAD0BCD934EB41A5F597AF9B626B7D3691D040D57
B1F024076ED4D37670E0377984F21DEC4C6865720BCAB7842F3806D84ED254F7
9649475F71A3FFC5C353BA9C41C20FA92DF8C5ACA261F0EFBEBDAF5B23B66122
2CF49872856674212EBEFC4A56D4A6280327C8B58807DFD6EF04EA845A62B1AE
DD47FB36C9A853CC448B51F9CEBF64EE7F1D80A97F89501807A56F04AC572716
516B7A2F4E244C209C74B2C6FA95A8CA8AB8059AE38BDDB256525561186FB671
64A8CC018B2836A3760C5683BE95013915F73ADDB7AD3B8F0EC93474F82E10EA
29F1D08DF1F8F29929E1630A7750DE1349DD23E38B6C64B73683B97280E3F84F
E944C71B8E54EC90D199A2DB3C0C16925110C7E6D85F010A17FDE552F3205A36
136308EACB6928C12EC8BCE7FE512D44E1B866CBEB500C5180A4A1A970DDE6E0
9664E001F728496F0042F6F8336C9229237332CD7803BD33F0EB3D20288FDC2A
CC17F2E87241124B5484174CAA8D1BCE5C9DECE27A367024F9ACD205A00D5C62
28AA1D43F1C6F0E9EA338B205EFD2FB111B7E45C34EFDF9A5AEDA4AD3EEA0C63
10C9FCEECE3281F9A9A50CBAF55DE1A18DB06A29B819615FD117527BB2894802
F6E0E5B3B0B42C4E29643EC14B422B398C16C305CCB3A4E8B038323268067E16
107A7F677E7F6ACD83D472CAAE764842F3B4E65999F261955E41EB3494DFA8EC
E2B7374827AE168634FA007F8981ADA72C09271A374CFFD453817EFA61369D50
682A921BA05BD5710BB9D10EE02964F1901A7B50E6D460A89CD9190C5D2BF548
3112E46107FE4DEAECE53494685EDD6358E2C0D82B51492A1D245B5233476780
750E230751339B548BC6C2A42551DEA81FF0674C142EE789A2D805C2265B70CF
4246AC6D2F2FBC09C41AB696401A324EC0F7968E8BDD340F771C804218226941
6202C10F532320D54CD59568BB57A4FBF9C5D261A4C25CEF3BE1BDB721F341F9
F216E0EA1801A406EB38E0FAFDF12D9C3F3322A06ED983820BD5DBB2C551DB25
8B3E3E913D7067053CE30DEEF7473FC77783CEC1DF6F08A443F9A4B5C45A5329
C9F3E29BEF707E0EDE7FD79D82108D6E796BC974D04F90933BFE1C2C4B3F7A97
6D8D4E99C49CAB1B3C80A4C773258B618D455B3B13A9AA7924EEFE922D28B556
E332DE6B88B308A541A2EBE75C9D5D9AAF082E492841D4D1B1B1638E4F845C6A
EA87B3A1F74368F9433636389AB40E2674B0CF18696ED06A89933D082418B4F4
A6BF1F2F1B4509C1E4A9BABCE962442E29CAD02345A36C2D5B0A789D9FBD5C9C
E477486A267E93A67159F5E75764B73EBB806B7D1146CDD7B5AF2FE2AF7C8824
D328722FC8E31B6CD3542AA43722748EBAD8C81EE73B03FB45F896C2BCFF3BED
EE81F75D8B5CEBA03F09EEC58F11556506ECFD01D1744E2EF8A56E8EA09B898A
9735DCD118B789AE8E0726D5B6C3C440E2BEA7BB5ED1D035F20A8C9836F11783
ED5D616654D1FFD188CC3E51EE42492EDC02DF10662AD337C500C668FA14FBF1
70EA076115E876426E9900461E436B9753C2806CC4C2690A4FBC69C4E2D628FC
DDFDA48BD8B9D2FFE02DD5127C6E50577A1D85F3A119204093154615F58C7F86
7F0E6D8B5005261A7861A49357397DA61839952047156236B2F00211E8D57F61
EAB5C2CD4AAB29855FB3D8891C1CC2C6F15BD9566477F456E539542672B0D2AF
645AAFB10EA03838F210DE9062984F6951B559532A4CEF1EEE67DAD73D28F399
24755E5A54E6A6CDA3D3BFD4CA24698DFD47A861DAF0F2D683BE656D54ACD316
8D93C3D7A0DC09FF5E1654103E2F4443B8CB4A987FA68C23CD60420BB549AEDF
6BA47F0536CCF9BED6483010E229ABABDB08A0179CB58308A772B1B15BABF03C
96E63C4D68370AA6671F5E4DD7431145E286DF190406406EDE6CCF615DDA1C53
BD7BBEDF6C93A09843E4C998D85543AEC308352D5C2FB1DA115885A50C889352
E0C4D072799D52B65910CFA641658CB0FF471CE53A2FFF6287722086DF7E146D
67EFA2DA54486ECAF96B3863A922E378FE857E47A2EB5562F40D56A25209C262
DA698BA0D13DB8E0D4FF4E8D5FDF29913F71CEA58830A18AE1C56554ECEE00D2
0C40631420C685B7742DD1E5B287F5743B6516EF84F7C58FEC4F546B31566D7C
3F43D5829E6603AB0457A5EFF2C9858336F527238ECDAF7D11D36E957231FCA8
9F7F1B2D22E3BD0A364F4AC9FE64C0836B09C6744220E93FB13BAC23C2866945
E469814F457F0B0B073754EADCEDC62FD671A0B7304FE4671034C57314F8D823
20C96CB3AC43F461E0A63F16F6EC1FFE751B9BDA9218C8330B7C344425B6AF50
25C7C9CE3B38596FC6E1FD724C453A1D5F0BCA7DF1D45897012D183FD6C00865
FB7E7BD6B9D9E4CE36D1F1D67E0A154F2F8008F74D696E55B08B672A1118DAA7
2C369DAA397886DAD0C480444449DB76A321ED1517E750F551AAC9346707718A
9F9AE8BF9E2E340162023B85CFE6D9AFB6B92300CEA5422AB89E041D629DB844
6F058199B31DFD608576C3597CE317CEF3806A39140C25F8FF7AA5087AA2758B
044197A559B0639EC52FABF132DBAD19EEE5E660723677C0F2881C450CE1552D
1ED44654C6297363A88C2F5C077E2D21B1C3A589EF79DAC4EAD85D6E7D1FD1EF
E63B5681473BC971AE241B38AF02B14565A533E67079E80FD7849674411B7B4A
3385DAF0E1FED7E035D3591718D0DE7F5FBE16DAECA5BCD3705AC249C77576C8
C2FF5453673B063711DBF4FCCED433321F3570914670E2CB62CAA1E8691E701C
B39FDAD1A86FD80159205807BAD0D68BF06F10E9A1FEC10E2B365BF89C5B6796
8AEEB58B7E94088DC50A1C1FC134AF766C8451F204CD58E923B47B63A6524EF5
A9969BF7E2E43793469DBAB264A35FE9F87C057AB48CB0BF165B3A79C22471F8
0B40F07E8D04CFD336174EDE6BF513703B62534C1D6C963A9401F501F80CD4B2
99966F9CA4B8B73E09F140954601924C473B761CC9788E20F26CA64199D2B763
23794E1E12FE6F8C7D46452BD6AAA8D9EA2F610ADB9AE78D0A0E83A5259FF99F
FA9452EEC451472CDEF0D5BEFA514BA155EB29A251E0828E205022EDB0666E21
540D71F514E873D5E74A3760FD5176DEE2946C0881425DA3C3D207F5AE931B81
ECFEACF2A57B4B7E6C306F51B97D43CE8309FA0B1672C96028E1D90BE9B1A173
B415ECD599F4647F63AA89819A51F72E6228B7595AFA4621C8E2EE345DEFE9D3
E29844CCFB68FAF81CC9C41EEB1B4602CED206D8B559654D6768D9BCCC6B46D2
3288554515BDC8D7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C487E1AC577A
2E135403EFAD52472E97602424CC86C824541F21DACEB1FEA3B1B0764588EC4A
652D1A7F8DD8C00931326252EBA4C0622D2B0E8629AC3D2BF93B07325DF884F6
A4A40E9B5BCDC5BD2F44C8AD657CAD20016AF8B3A672D604D442585EAC16F563
67B2444713DBB888EDC769FB62BED19D9A82C39314EDF6927888BF3AFC00E6D1
4BD4821641103D6124E77667BBEF3F318B5650B04B2CC6D4D432C48D6674478C
6DA999E27D2B27D60E79AB8253164F14BEEA12CEE1BEFA574643EAEED50C843A
E02AC79DDE88351AF3E38D7D0FCCB303A6AD3DDFF2F57C704B93F3996D6F2B1C
B3462FCE34CEDB86D1A5992304E473A072949DC2969A27784051AB9E62CBD50A
BE89F5DA40AE31D540BE77E249546AEADFCFDE52F22BEF34F7BB1A55FA2E881F
5CBA918F299A849F5ED006AA52A23114F87F8D24272609BC68E93A4E781B1E17
4A02F8F6CE590AB57B9A7F928108402DF39C62DA2EAE8BCAF81DBFDDD71FD87E
0750770213BF6188DC183302136FF6CC18ED1A44261A99201B99E29F709C9ACF
280854914E1D232EC40ED164D1841B2FE33F3DF5262A92E98F7A5873F70B94CB
ADFAB83995414E9D3900926FA8087A61383E01E64836ED5A690A776E288BEED7
010ADB1076B23257F94846E1D354226B03E4DEFB70112BE7F4212FB8E2A9BA73
87614ACA434BF4B0E5BADB6E56F74734CCA3F24397798146473590BDB992D602
46CBD365F85255B41385228D1D7001D1E61D495A29B0C9570D2D9EDFFB0FD412
07E39BB277F6FFB99A9479694228EF79517C65A671A4828CF98C9D52EF7C1F4F
8E7782F18FAD1BDA0437225E8EA1FC5CA55634C938CBAC138CDE44C8DFFCD23A
B28D932EEFF25B5D70F45018920ED592D83B38E101ECCC9162D605168AC0319C
92357DFA5DDE56EB480210E0BA1D53E704FA24F55107E8C5B9DFFAA026E22DCB
47D04840C0D5153336F1F79FFFF16F3C96BB28D5D618A5DB1D28EBEFBBBA74C9
573A48E8EBB5E066622A2DF285FE041B3A9BD5577734A199C9CD35B0E541C347
E193B5F15C9CAF3AF3BF89D94C253CDCE592272EF02E86E93B41E58B2A7BBEF0
5ADD8096679E7E673E4712BF9B17E090FCC1137C613AC61B6452571F9A33E04E
F72BF5D66C2238D80441858158911ECA1D7939E6CDE22ED65352682216EBF324
FF3F634BC7C026682F2D93E206F0E9690F32BE56FA7053C78D2FEDA6EE05F29D
E19AD45EC2E9667D7887C9BDB503D1E2497E816894316E56A74DE14A8E26A89C
B763DA10054E129C1D1909BB2D7D19FA5F7518CF3D4723AC32BFF1AE8FBADBDC
16B79C4D8A7AEDB2C415B6DCA892FABDBC7BB965C8818A538E511B19DC862F93
B03A24C94131987565B60AEBB0164EBE7E4DB9EDB2ECD79A062243ADB3EB7A84
E9A79FE1F8FA49DEB37BEC0234C59554B5FBA3A1C5FA644F2EE53F63E66BD228
62FBB603738B2776D1C11C1CA08BC250C82A9B5F146BAF053E9774866BEC3E3C
C34E053C9A36AF2D2485F06F1773BAEB6FC8CD2EAC6F0799C903D18C60B81DA7
3A6851D7C637B282BBF5DAB0182C67EE05B6CD9555E318551EBD9B8F4AA038DF
79588063FA5C12788E68C652ADC90DA54B5B97820B8851D6A9A7F3AFDB5BC8F7
6EAA372863DDC07EC81B83084910564704E5F028F3A7D4234DD2F86D698681B5
6EB0D19E79CC100592B42C01D739C098C0FDF3A3C6FD41586F5B041EFDC3CDED
971AFE13D1BA8EB29F0019565590B1FCA732612DFB260A9FD533DC4A1E2C1345
A7D1CFEEE3FB685F5F0996178BE7477E2CCD434C2955DD8B7A67FC8D229E3F10
736FACA7F6BA5304B6BA139A251BCF348F2A19EDEBB709068CE066923A1FA81F
088C9AE16443C5E70BC18F029243D6F681B377CC1B88807B579BB6A0C8F69CD9
19E311B6ADE903B34C06D84C5D8946BAFEBDD990BC58E653AA0B7567E0204162
97609459D69203E444AA83ABBC2DF361F6523CD54C5F833962544A02B6DBB982
021572D9925A9423DD352451D77FF32A3659077F9B34EFBCC86A88257BB2E1CA
3B29D0275E10F95567168AA785FE3341FE41C5259B91A2CBAF94EE75527360D5
E095ED717E2D08B19DDFC270CCFA8FAF844DC3D4AC8F46F710BCE30E9FE96922
4CCEE3E5F35413693FF0ECA9E80D2B67B0B83111436778F27EE6359A8127A1F1
7438D275921996196C978D942161A04F980337A295BDC869ACECAFFA3B3E12DA
3C5EE8952BD948DE08F52EB8B45BC38125C1FF139C49E305763F08DA29E18492
BF1903336918A1BD4909845E975D40FA73F59AE22BC7A9DE94C8D7D34F9A29EB
F17A40B72A0344627D09EB6E1189BEAC89309D0922D2C7CE788767A51222D7C3
CCBA36242FBF8AD4B73D1B1CB241F72C9F41CD746875F4F654A39D2C5D50CA51
BE6490CEA91A879A41C90FFD91E784ADE2B61EBC16E133E5E890F18C6880FC63
139988667F5CB040361DCBD41118C42B1613381BBE4FF201BE4805A9C68D2D2F
769D7971A0E2E148173E877FDF091AFE08650EA2A1080978A09BF1DCA7218549
8FCC757D7B51A9DB721193CA8D8B9795BAC734FF40911A5BE0B832395706406F
4352C3BD0299E2D51F2FD2AC71FC7A8AEF8D7D335B48B374BA0989A9128C9EE5
507DD7045BD7BEFC7E9A337C378037845FC40093D5A4A957F976E93E67B735F7
0D3B08196071C5F65ACD90E524EFAD438A22F57B5F92254749D04EBC0F1106F6
2A30D3F714A33E4F65F776D5ADA10DD79E71C527867BB83EC8516C6D3DD8874C
3DE9273EF9BFE6410CEE3D00C4493AF9F83295BD84777926039B0EFA4F3DBBA7
D50C464E3F297A0F2C1AC23EBC29B4308976ACBAF5037EC19191219B28B56B22
AB4AA5946F7493DD611F3CE69BCAD8410DC9787A8C558FFAF304D364410722F6
D160A04EBCC9B06A2E3F4E207AA2B7F139B3350F8194910480F0F209BB65AAE4
76588E98D26C11B68186024CD1AF6C638EF54E26AA88856FAF1E8BFCF6D42D0B
1804227B1F17190B56EBD27CEDBAC9BF7B8200DE02623D52D3FC439A3F6CEB92
442AA9CECE368F192ED42D0CA3130E229B74A33D2B24E6C40FE9E0CF3C58001C
2C0819707C3722DF1115485DDF0C044492E029BAB52B410D39D71DA899B60EA3
C61BB4E528BC1D14A3591E2B70F647AD9AD263AAF4200196EA4BCB09F019123A
B92002863D00F93C28BE342D42D52C383193734662065DD5653C091F9312CD54
E7F0C9CBC54BC4CD46657AE3FFFBB204C6D598CC44F2988E6A31D07C0EFBD835
CD0C526CDF34968DECD948F1C1DB0CDB39307FBDBD27D9816175D196832A24A6
74A03E368C965AD2F0E56F944D7924E52AF97F2DC9275475776ED76C3A5725FF
D868BE3A9303FEBC5A7892D0B3684C28445E97B79252323BC68DF398A340D6FA
33885C9B99F1CEF36721E8DC250FEA26AAA106F7E33421DB9461721AEAD4A940
59B54F4612689163A8471A370240E00CE7692E3AF4329A2B2125F5717BE72C6C
F2A5FF182C23AFB209DFBFC0D5E557C093EE9842B22F0BDACDBA3E061E5A6581
8FB42A05FB7803D0BB26FEDC511F8B1C8E813B54C7D2A3108D8678E9172B317E
EF73133F01DF8D7F5C57E2346265A9D9B4DDC301936A65100FB57B1B4769D441
0060824D13F79652B119EE55207B3DC19A5F3EA6D70547C069957DE29DD19532
FBA498149099FA6340EB2FD439DE9ADB1786283C4EEC972AA3F26BE495BC6140
FB764E1A05A4D64FD0AB74631A35230401234B34D768FD44DF10D14402EBEDFF
0B144B1C9BD22D737954DD75310DB9B2DD514EEDC7E235C3DD55C62FA36A90BD
E5392CAAEF22AF24628FBAE3E3F75C310BEBF002BFA668FDEFB1E4CDE434EB44
785C7CE8435E807DE8E1CED9C35E6B221581344C344A2B9834F97C6EE56522D3
0CF246F16294EFF571E3F3C9C61626FC72A87EEE39F90F076926CBFE5A149103
11B9F58A440059D50551EDC872F835DD63FA555CBADAF2CBF6B2BC1051D4CDC8
6867B0DC3013E9DEF8990E9BD56E8C492BB7BD511B8CAE488343C923BBD13695
840A4B561424742296FA78D778FEC5D66460D04955DFEA71460082A0AD41E190
FC3CE1471DF76254439E9FDD489083E9086B32366D499F60E7C6C04DE9C11734
5C4E51748D3A5C5714CA80A0254541A3FE4712B1D0739BEA5B0586EDC6E39EB6
EAA7055CB375591EC4D3F37E7B7E75DCDC8A7A282D5C7C14C426F6F84DB84A54
9211C1570CDDEFE0028B85612A00D425DE96A8A5AAF64E5AC05221A215D334D5
69FA4A833806C7E3E434A0963790B322F5967CD344D6F613DA5065317BC170A2
938717E826B0A3D4BAFA99438C907D1C7732F29E2B36E8CFC932AF2DDA28D631
C559B953C31767A472830FDBEF494B64F6CE0342AD2CFE207330A432531BDDBE
618CC7DD66B56AB89C1B289D953CEB07D5A30D35C693B9AD261C3CF603FCB876
51205D6CF39F3D3A8EED587466B0E55B56901810F69DB820F3A6E7CB560A147B
A8289787C05BA05115967C943983531855C2DBEE6E45A7EEC84EFF0294019B95
DF6BB4B2BE77B254972132E578B35C684673BCEB1C016B7C469D93B8CCF13C4D
3F2E76D0E3C30AA49A6D0DA6028D436930AB6ED25984C23229B2C348C5C31523
B52641B2281242D1E853972236127126953192E9EE96C2499E4D5C40711B730D
B196432D0468AE9CAFDEF1CBF4111DBF30EE8C30E19CDCF4F189C73587369883
E50F5F9CE57642F42A032FAEA01E75AD0820BB68EDCC2143F284391BBA991045
5A3B37440806E12982F5D6814AB81011538DD052B2D4C536850919239243C2A0
366D689AEE30C78E8B69115998546B7E5BE7D254065075796637F745FFAFECE5
D85B71EC494B6867AE28FE963DB6F344866A94368F89414476591F13D3676C5B
BDE3CE6CFC04FAC086AA21D20FDB13A7B499753DEAE41D383EF2DFEA5D10BD49
5D1151F4BB20BEFF60640B1083E4250364FE5AC95D316535E1AA189B13BA39FE
835EB7D109EAD67C3008E7F5A58C7ECD68F3E37E5F34BA6E8155B78BEB3E44B7
8C50316C61B6FE484CE582EB7FB2205AC23358698AB2A4E7319B9FF1A7480F80
EC4A1788BFE6045467FC5DA356DFF298F0E2BF9E46CBE6493F7588792E77207E
6022E9D50B282B1284DD9EA66137C295508F1EC36EBF5A75BEC8F6DD5F6E6843
964C45B67D8753F574FECEF9406C030BE3732916C975F583FC660BEF71DA2082
82ADF04ED5C2264211DAD907074BE3AB545E46E245DDA85E5DD5C024B2477497
5B422C912C9FB612B142BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C3EC86
FCFC1E029E64293585DCC8F91CC8B8E94D2D8BE7C307CC76828251438F05B3EA
1FE81BA01FCD68355896694129971B07D08F66D8C81A4A987A8887D9982476B6
11F1F52A040356C74D22CA556E23D42C79FFF7E1CB0F2199F55A7B7C462AFE2A
FF6BE57E0827E470D7A1547ECC7FAAC1BDF18BA7B357EBAB1A189F424831F657
8541FB21A36E4C6ADFFDC794D941A81A592501CB99EC2DA8DC9898E7D707802E
919B79BA041726D78EFCF5E1EFC1078EF0BD3982A454ECC68E45A33662F041C6
FEA9B09F456183C7A0C96976DCDAEC866AF0450370E650B2F47F171A0E27FE61
579C2C592D6B66CBA576C1AAB84E08857D835DC38388AF387156316C4DF7041A
5955246043C8659E5AC604023C60AFACEFDBEF475921AA8E069B61608F2E5740
CA5FD009E95B23F99C1897C7F8354C99F262EEE430EC074EDDAE94C3791E2FE6
2B0384FBAF878566F026E25F3508C48A8BB31377DE3B1B911618BBC8A82DF0EA
FE9AD88A24905F7DB7DC8097C0D9B0FD75CDD52F01753FDC5EBCB8388014947D
FA87EDCC6CCE4712A849E99BE97280ED370D6909828DE61CA45D557BC13AFFEA
FD15FC98824954C6B3827F1F98F26014A44CAB0D1692AFE293731EE7455CCC4E
D0ABEF6C73B6DAD5EB4CD5719BE51EA4DED86D7A4B06AE62A2771727EDE5902E
9EC7FEEE5B8D8919E0D1E69B1FE209C5F74C458E6FAEF47BA73DB39E57AD8DDC
09186D3A02C0ED6D25F7F62E7E372E71133D4AD3E6A40CEF0B48DFF7506BFD05
0AF0DAF1170D2893DD9E4B3AAB834C1A6C7710CA4D110AFB328EA9FE65C5DE82
439AF172F4D03E57F8F0450617DD9694378FF5FD7DCF8950316CEA4BE778EA5E
23EE37E497C4CE627222C9AA3B0AD9C6C4112ECA1325C0D9620309096E2439A5
8E4A12569BB09A57D05DE428708C446C51F462BCB11C9C2C7D246C6BBBC779F8
4B6DFBE0E673604D21AECC2C24B1A63A6CCFFC30819D7EB2024DF4B5C25B167F
CB00453CE6FF552D7BF0BBBB51D104136DF446974C6793DF86F9DAC374E9A17A
B678698D2B6F11332AAE28B4986FBA6AC4B35FEAD22394C03A72D4AAC6C42C08
5ECF3839CDCA0FD8808BFE15A1C12D0B23A95AD7CA9B8C584C44DEE3BD2B2A21
BA498A484C1C8F298CA1902F491E6FE3D7DB1B31BBB1B9E3ADBD7EAD8C3F5C83
75333B058C1CA397FEA6A4E3B9D38C9A68E23636A15FB82CE0057B95CE7F539F
B78027C7FCD0FFAB2AEC01F5A90522F6F0BC31643A74F5D36BD724808357D4FD
1813801BFDFB9D5F2307DC67AF67232A23714071519EA6CAEF429F2EC1DDA6BF
31CCD8C5A949FBB5DB580EDA64442DA362642B31F5068DD69E25CB2C0BB3B049
B5F81920D4A207A856034278A11BE89141C0EEDA528CAD9BFD629F0E84B5F495
C4306AEB0DCF37DFE3C79EDBE00878008538C79938E8A181BED6A5EF82D27AC6
6A2F6F91819A23E4A229EC8DE7399F81A0D48BE5C3635E2D9351B18EC04D2B8F
47B903049F248ACB5165537AED62A08B4DC24663D253513728CA6A7262B492DF
E68E9608276C7614C77B519551C9B0CE38F1246830C3FE3E1D71BF5CB13E055F
54072C17E29B266ED76331948EBE6ACC1A1DE1FEB8EE4C1DE3183694357942D1
26EA5B0D8DCA94720732AA1A19BABCCDCD717140938D234BB2DE980CF864EE47
49A7E86F7E4D048E65CE4F49F4F52DE53168386C8A11F098EDB80F8AA0E9EB7C
C504A8B2EDA401850ABE3D25C16354255FBDA13571652593CE33FC4F44896182
BB33D446022A4F9B9AC1793F71E79A58BEF6E698B982ADE915393E6B62F58F9D
3B1E4DB366489994005D587FF77C49DA1C08AA52C074D518C08A1381387825E8
6D6C9CA6F5B88EF3EE14071FA027644DDA7044E0146ACC2771C893B96FE305B9
A31D4D5886F36597FF31A1957949CF8EC35046F1566F50174E90990DDC70334F
F6D7B446F67BF70AEBF35A2AEA5DCEE119D82FDA474FB08C08665B47ACC5619C
8C6C5D8D45EB9159B61EEA65500D048EEDB89C56767E7A316536A3890410CEBE
0FB8F8DCEBEE4772003487DAAB5D9732844EF368BB22272D3602677A195ED7B7
34278171E6E2D35507E642327B74B616A8F047600E90E6AC7243FCC6B6EF2360
68B03655C718AB51DEA84219D7710CE3B1D80D93D081A46611D41A85C25DE6C3
BCD88795EE88D1A1639DAD4EEDFFA3C5163BDF6F0BB192C8BB84303FC807E644
48B512388D1CF765ACDCA5950D6035DD2D09848D5A943CCB694761352B105E3A
4536EA8F29529DF55DE4D5E86E70AAD5CFEA77A154E66D28FD063206208F90CF
4F43A85588862F7A5EAD215E012FEE2151C91429061E8ACE4B926040AC94B294
A1C4E6CBB8D8C619AF06231904D16DBC6745162ADBF2A6D72DADFBADBA62C999
67945F978D1BAF3E261BC069FD2313F28F078BA2865BE761841AF5E46938F814
656F99C593EB67BBEEC85C163C3F4D58409B67D32413AA146D643432F79AADFD
E20FEED119AF2AB8414E1038BE310283619DCD7B2DFDC9DCC814084EDBCA01E6
E6D8505BAC70FF538C735C2E787D64F993B882B61CCEBF2DA183F8597B279B8F
D1B991FEC97CF490ED9D804E75008DE5EE2E7B03015B63D1895722783CFA8E37
2F8277AC1E0C615A8E98AC0BD74F7C9AAC3F21D9DFD4EA2DA55316DA3F62AE18
0633B24C2EC66289B8A541AD68DCB5D2EB0B151CD71DE95427E61B9B24133DB5
F50DCAD816D501A60C51FB1F38771C27251A5E4E593562B7402574ED20EEDBD3
21C2DE4B757895A22452C806737104A9E1DF811157B2CC00DEDE4BA2E2353084
D836A297936EBA8F80BF5B2ABD3536A2450AB57785DEAAB65565788B73705274
64C55762EC46306800B75F381223F2D92A82A96482D08216DF53ED0681C54829
597B24830F708F56A8327BB7FA5CC1E56949F31D5077DCBD51416AF8C5C5D1F5
8D60E519AAD9DC63574D9980B2A971310DB9B2DD514EEDC7E235C3DD55C62FA3
6A90B2CC7096D730F9FE2F3B9316FC41775DF4F288C71B517460B6833F1A53A8
0E058C1EC14B91C6611D421713135FDF3FCE2DCFC39617FE918475FBD0EC66FC
2DC0504D4FFE3CB9B4CE1751A5903126FD80BD493627782C24ED195DE97F0B0E
783C7A56426E4FA821BFD8644501E923A8FE689D7697AEE2265047DBC98A857B
183E3D2AACF0708F3F7BA488329B50602BAE656C41425BB174A806B0B47D1E0D
0649135B28548BC5EB3B6C69616388605E4FE8CAFF17F9355B3DFD2D6BE4D881
1E1799E40445E29A10318D320D2C81AA5DC53A1E6839AAAA92BE85FE2786437E
6FA70BA42807334557F1116674F20161A512ADE5004EAC1983C3A27BD793440D
AB101F8D4793C4204D7D421367224D757CECF55D7744CF367931F3C2300CCF5C
434B6FF1BFA35BB75A3C7AA1F86CF2FAD39A7166188DDB17F8D8BB6754CE78E5
531896E222B0F0964D1FFF7A18A4EDD38ADCDD0BC655EA54FD12E59B6B7F3EC8
96D4253739CB41019B7A7145A9C0BE0093067B02DEC830A997A3BE15239C688E
B2FEB8389F86CE048F4C870A446EB3E06BFDEF95D17AECA79F3832A35D626711
3421BF6430147A9329ADB0C4597007A2AFE277A49913E6C20BCF50CC8FE09DB8
49CB9EBB18302D8BD8AF3E5EB9BC7BE18F5EB7A440C673D6251CFF28E9CF217F
7B9B18573B6CBD958A80FA14221F9AC6AEC6FFE3B9ECF77AA66E3EEB917AD0A0
C738185A22904B5B92BF062FF54A1B7E31792F05368499B19687E50FE699C3E8
760F750493009BA9B13FD300A78B984ADD891BB4A933234276082E17993B2970
43B2F75674AA08F06AF59CCEF6A0304CC43B7F5676C0CA17EA9FD601A8AB770E
8E8970E70524F9F7AE081E64AD1F71D6CC6FF05E5728A064836D34BDE286AF78
4660C6C770F2166A4CB60D321BC91E49E3E0335E96E1FD22DFEF01EA631F6E5F
928F65D86C58DB747A2455B41E7CB3D8C64769914F7947E145ADD93477273C25
1BE66ECFF63B312D6BBBFAA4858177266B06B756BACEB5FCD36A0F153536DAD7
8AF53C4E63CD871097AB4579D189B5644DF97E53AB4918E47028D6DE350A0F59
258E4C768A3316F3B50657E16705B9723F96A421C46FD0C5C1AF58F992689CC1
DB95DE914558A23A882B42446F629EAD2AB3BF6CDC892A43029BC36265ADC053
CD19C450DEA01B82677EDFE86FE96FCDA9F83339A0A4E5F1AA194B2FC8593DE9
70B2C883F4764C6A6C85C92F0640CE6A8AF3DE8E54B0C50BCC30594B7657494E
46460D081A5DD74E67ED454FAD2E91C2AA29701B2DE048571587FD96E7DA842F
CAB9D389EF74C9D762B35C571C29CD2BF4FBAFC57CC1563C7F263BB93408FAC4
820B24854FEE148B86437262A51FD61857519977DD5B3D1C67D0ACB83CF974FE
2F5E7DC1F89B4DBC3027B3CA52799BC2D2908B65AD616872CBEF99AEB5D51FA9
412407E10CEAE95A0F69B8077DDC95025942A6DD9800608C65FD1748886BDE3D
FCB43D6245F07F0E9F219ED9E8253BE2EE28331E0930BCF5C778F85B11DDBD79
3E278DF8EBA9E40F34E7E8F3F536E148FEC333BCFD5A093B07F1B374E691299A
C45FB350156423275D254F35CDB9D0BB70160EA6F1913032436539D78CB4B7A0
382F05FCD86615B229B50CE7E72213609CB865C2A26DE9F946330EEFFC8AA083
DC33839485696BFFCD790DEDD05928D250330400009DCD030C7EC6D31E22F3E0
4D16DE4860FD9E5F45B0A3C350DC19F5BD4218D35FD04D39C32F79AACD66F8DE
1C966BD9BD1EFCFF5917BDBD66658DD965A737644F66C8E5A03D5F1D9878E1D1
ADCCD3D0333A27A26DDCAFE69BC10BA6E7ACD130C506D1AFB89C91406CC2466B
88E7667B1815E74564638B5E15A5C80A9ED14A027B5967C1595EECCCF69A2351
A30984F6547F793ED443436907322177E5D012AB1B72A4A59A69E2AF0AFD4D02
62313F4325D90496CAAB26C034DEBD661B312D8921283F7EB997D796FA8D83C0
E45F9E70045D7533FE23DAE64A82151701F15F47AF2C01214A09B46A245EDA7F
21FA1B5B2C581753557118A03C0B67E281415331B84EE5FEB754390334E9DE48
DB2A955746DDC6FEC0E118AD88CEEAB26F5B03645AEE14A478BAF7D86B36CCB7
09A8B5C6B30B796A8C5C7F96A31E4F91BD33B420E956BE07C50FDBC4B919AF31
08B4DC0411700729B0B5700BE8EEC889772BF30C27280DB9C5C0FA0DA4B6A372
79B79C4D6241F0C61C747D8DBF79CE27CE76F8635FA3EC5FCA20A653E9F8897A
6E03988AB8CB6F1BC9F72798B0CAEEDBB74A5470E0F30D29B455A7462B5D374C
8EA306F7A27BD650573F544E8CD703A5CD145294DDF1680B89F3F130C2ED6A5D
5BEDA78F90DA8B780EF466371A0BBB6B6B14D73B70CB21FFA12694B6DDDD1D4F
265B6E7B1F741E3859EBD5D3D441337E16A75685E98745C2BC3AFEE5D9C7603D
B8B815AA197B102AB93FE19BE3E6B62A4BA653D5C26C224AF6AF55538FFD79FE
E1D658C0B29EF164F9ED296ADD9FCC03CBA9E758B93CC31208661F373D3A63E8
D2340E9DF0779ED29E7F7211CFB77EB195E2714EECC53AB22710938B33114DEA
A0242D0225E887D8464C706CED0097F0EFD7B91727B38019EC9962A4E62E70F2
F5C5CF6A5B029F6A6FE4F341075AC4C21E0D21EEA05C89B879CE56A00375BF84
87245D966C780AF67DB4AEF6643DC5889B7FC327DBB69DFE2197F23C418E5440
86B941183E9DD2C1C33B75F7D7EDDD4D04E7B333531381B1E14345F6244A9966
F7BBE4C8642FB191948E4D5C8784BBB4EC5B11D613F595D7763893C19AF28465
F9DE909B7B5EE9B80D37D04B7181F36B78274EE20ED0C39D3584E893756B15ED
2B7C783CFEA246CC97FDBF960C361B1AFA22AD15E7D2A6BFEF709C0C12366BA3
F8D3D6A1F947E8B321AD4CADCD99E44F892809588377568AD4041B1C654DFBBC
71BF310E83A9A3B12D70A8E5B29089B47C1BE2B7C28B81642F59FFBE66646D41
9949B4F0F1C9670E3603EF53257E98EA9D969FC41A37205C97F447CF2DC31AAF
846326C97F3AC4F6702C589E07AE106559D7FB32B4A90F07AA7A9EC00EDDAD63
AFC6D0AA5191D8B02E497BBBB2B9386F8E2A02EDE8D7CED645023D0D69AFF063
CAC343764081B5AD04E10E6EF4FEBD83B2EB3BCB16D6A85A5C4C772CDA9F487D
34ABC1CC85177C88B2A4411888E27B8C4B6E8B4F05C4A0097DD49754996505E2
31AD0156D8281383830706DEF24763A647A0306439883513C3375DF221D42B25
F56102E4D5602302BB51A406C28A38B9E76610192A9F4CBA0B028ABD6FDFB38B
4FD81FE02608521FC01BCB365CC91CE9446A28EDFCE16493C055891FF758C309
E04A0F51CF4E726240B6F8233740F5B376195E6DBC360DA53A1DEEA6EF0C865D
C98E53B30F7A3E23D3FB3B261FAC1AAFAA27FE3CE925CF869D6E070C5510C284
308D8D8B1A8028B0738D97EA8A0C3924C0783BD46CE59D92CBE43A3E5C61BC74
16DF6040E77DEA005F4B793B947BE6BFC2F587C7779021D0B57FB1E7DA2743B0
4B7EDB04AF615CBFB9A471093DD5E8A9DB01175297D571FDB8CF0E009CC38FCB
E9B4CB9D832DD966BC1712DB30EB33AFA57C17426705F380399A9DFFBA850492
260DA6C366D88E04998CDC3D79E6C631939A95C4F6ADC601C09C62A78DBFDA80
FE28C807DE12E5959150B95C3C87C40A53CF16D6909DB866B115CB19215EB5C7
C70115980A93CB24540DB71110133A1220DEE106B69D795DB3D6A4AF468C0ECF
4777BDFF0B749F28FEEB18A8063C5E69AE1696A4C9A4402F80AC23BFE8267D15
AF05164EA303DA0BC5366C71F96165AA3EFB391710B06681ED49923EF1ADD0A5
ADA063B8CB44A6F895A58B2B975B1C65CE8E160A2D90E385EF0BE75B29CF8874
3B553EB8AD6BE5FC1627ABB381D7E78C44DEAEF087C4D6DB2817CB9E159213C6
47FCB1BDECA31FB6BEDC955B57688889C76A1F9F903C00361D3E72B1B332B800
28A410A7CFB056F64D5D16E96C20C5F1B54E349C1C08CB6B3D59B2160CEA6966
8FB2B3DE176B713DB251AE3AE718BED921A9E27AAA19F2A15A1FF54B777A51C7
FCF252B92E7A6B95738220EED86EEDD7C1076122DBB4BBA0C67A932132FFDF3C
808051F85748FF87A9C2FC8E894BC9CC3CEFA7C0DAAA3A5813DFFB836BA35259
205F6433903A296C641CC8ADB25CAAB151CBC5E4F27CC2D116DE25F90D540DC6
96B3D250CFCC134FD4821ADB1AF221850F3AEA712868D2C8172D513607657701
B044E5D336C31BA0F11CB44EAE226F72472100CE74828083AF5295B75EE10B0D
9E93E5EF3BC8B0FB1FA225CEDE409A2FDBB34D81E0C2359718A05E9AA4141E4B
FA04B7564E55843C312865D0BDD0BA60446AE8F0D14EF87BEC5DAB4FD3669A47
17D67B63178165101C2752C9F80C965D5D37C81D532B0A67373BAF7841C4B131
70276DD75231C8C357626353B9FF974FC8D01E55E7A513EFB425DBB4CCB59714
F810526670FCF9636DF1BD33CBBDFEAB209ED56D605CE0BECED24A725A7F26F7
30B4B4E80979B7487BA2CBB0B682D106802DAFB307CC70502616491245EB77EB
84AF3F5A70339399F9E47B7BCFE9C8F48067D024E04A3BFB4F9E8BBB2FB07195
218E70D1CF652C66CF35E3C69BB90FB13B54C41168307B05838A4CF9EEDD11F9
6F86C0283198E00B1AE6AF1DE63B236C22CEE0359BF9F5348EB1343132252E6C
17B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Christoph/Dropbox/GK-BSP/_Matura/WS - Wahrscheinlichkeit und Statistik/WS 1.1/WS 1.1 Gesam)
@start /Fa 138[867 607 616 607 1[867 780 867 1301 1[824
1[434 867 2[694 1[694 5[434 1[434 14[975 7[1192 20[780
47[{ enclmec ReEncodeFont }18 1594.02 /LMRoman12-Regular
rf /Fb 27[1263 105[1119 3[1335 1407 1[990 975 3[1407
4[688 1407 2[1119 1407 1119 1407 1263 19[2341 10[1802
8[1263 1263 1263 1263 1263 1263 1263 1263 1263 1263 3[688
44[{ enclmec ReEncodeFont }27 2754.12 /LMRoman17-Regular
rf /Fc 197[261 58[{ enclmmathit ReEncodeFont }1 885.568
/LMMathItalic8-Regular rf /Fd 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fe 198[1263 1263
1263 1263 1263 1263 1263 1263 1263 1263 48[{ enclmrm ReEncodeFont }10
2754.12 /LMRoman17-Regular rf /Ff 251[593 4[{}1 664.176
/MSAM7 rf /Fg 197[254 58[{ enclmmathit ReEncodeFont }1
553.48 /LMMathItalic5-Regular rf /Fh 200[377 1[377 1[377
377 377 377 48[{ enclmrm ReEncodeFont }6 553.48 /LMRoman5-Regular
rf /Fi 196[252 59[{ enclmmathit ReEncodeFont }1 664.176
/LMMathItalic6-Regular rf /Fj 198[406 406 406 406 406
406 406 406 406 406 10[664 37[{ enclmrm ReEncodeFont }11
664.176 /LMRoman6-Regular rf /Fk 136[632 437 510 316
389 2[486 2[777 243 437 1[291 486 437 1[437 1[437 437
486 15[729 22[291 10[486 291 46[{ enclmec ReEncodeFont }20
885.568 /LMRoman8-Italic rf /Fl 3[830 134[830 581 1[610
3[830 1[415 2[415 830 747 457 682 830 1[830 726 10[1128
11[772 3[939 12[747 747 5[747 1[747 48[{ enclmec ReEncodeFont }21
1328.35 /LMRoman12-Bold rf /Fm 240[664 14[1033{
 enclmmathsy ReEncodeFont }2 1328.35 /LMMathSymbols10-Regular
rf /Fn 146[1138 9[560 17[1030 21[361 59[{ enclmmathit ReEncodeFont }4
1328.35 /LMMathItalic12-Regular rf /Fo 255[732{
 enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fp 3[449 31[595 5[621 91[363 1[427 578 427 449 320
324 320 427 449 406 449 664 234 427 1[234 449 406 255
363 449 363 449 406 1[595 4[492 2[811 595 595 578 449
587 621 544 621 595 2[617 1[294 1[625 522 544 608 2[595
5[234 234 406 1[406 406 406 406 1[406 406 406 406 234
277 234 2[320 320 40[{ enclmec ReEncodeFont }62 664.176
/LMRoman6-Regular rf /Fq 3[523 5[470 17[470 105[418 2[680
497 523 366 371 367 497 523 470 523 784 261 497 288 261
523 470 288 418 523 418 523 470 3[261 1[261 3[966 705
705 680 523 1[732 1[732 705 862 1[731 483 339 705 738
2[718 1[666 705 6[261 470 470 470 470 470 470 1[470 470
470 470 261 314 45[{ enclmec ReEncodeFont }59 885.568
/LMRoman8-Regular rf /Fr 162[361 1[361 29[1012 1[361
1[650 650 650 650 650 650 650 650 650 650 4[1012 5[1084
37[{ enclmrm ReEncodeFont }16 1328.35 /LMRoman12-Regular
rf /Fs 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Ft 41[861
91[492 584 3[615 430 437 434 2[553 615 922 307 1[338
307 615 553 1[492 615 492 615 553 9[1138 830 2[615 2[753
5[569 8[830 7[553 553 553 553 553 553 553 553 553 553
1[307 369 5[307 39[{ enclmec ReEncodeFont }39 1106.96
/LMRoman10-Regular rf /Fu 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fv 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fw 198[470
470 470 470 470 470 470 470 470 470 10[784 37[{ enclmrm ReEncodeFont }
11 885.568 /LMRoman8-Regular rf /Fx 650 2[723 5[650 17[650
7[975 5[1012 91[578 686 686 939 686 723 506 513 506 1[723
650 723 1084 361 686 397 361 723 650 397 578 723 578
723 650 6[795 2[1336 975 975 939 723 957 1012 885 1012
975 1192 813 1011 668 469 975 1021 849 885 993 939 921
975 1[614 4[361 650 650 650 650 650 650 650 650 650 650
650 361 434 361 2[506 506 2[1084 3[361 4[723 759 8[613
1[613 16[{ enclmec ReEncodeFont }79 1328.35 /LMRoman12-Regular
rf /Fy 3[1196 5[1076 17[1046 13[1616 91[956 1136 1136
1554 1136 1196 837 849 879 1136 1196 1076 1196 1793 598
1136 1[598 1196 1076 658 982 1196 956 1196 1046 6[1315
2[2223 1625 1654 1497 1196 1[1616 1470 1616 1682 2041
1293 1685 1111 801 1682 1[1353 1412 1[1554 1530 1625
7[1076 1076 1076 1076 1076 1076 1076 1076 1076 1076 1076
598 717 45[{ enclmec ReEncodeFont }63 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fy(WS)717
b(1.1)g(-)g(1)h(Studiendauer)c(-)j(MC)h(-)g(BIFIE)p 0
TeXcolorgray -741 4800 a Fx(1.)p 0 TeXcolorgray 651 w(Das)483
b(nac)-36 b(hstehende)481 b(Kastensc)-36 b(haubild)482
b(\(Bo)-36 b(xplot\))483 b(zeigt)h(die)e(Studiendauer)f(in)h(Semes-)921
6792 y(tern)433 b(f\374r)g(eine)h(tec)-36 b(hnisc)g(he)432
b(Studienric)-36 b(h)g(tung.)921 20580 y
 currentpoint currentpoint translate 1.43535 1.43535 scale neg exch
neg exch translate
 921 20580 a
1355 20580 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 279.1578 a add def
/d 0.0 a add neg def /h 70.06035 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 20580 a -33840 17623 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 597.09863
 0 317.94083  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 317.94083  597.09863  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -26.71829  def /maxTickline
43.34206  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 597.09863 0.0 317.94083 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-34075 18968 a Fw(0)5829 b(2)g(4)g(6)g(8)5594 b(10)5360
b(12)f(14)g(16)g(18)g(20)-63696 b(0)5829 b(2)g(4)g(6)g(8)5594
b(10)-33840 17623 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 398.33841 8.5359
483.69664 31.29819 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 31.29819 341.43292
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 569.05487 31.29819 569.05487
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 426.79115 31.29819 426.79115
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 398.33841 19.91682 341.43292
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 569.05487 19.91682 483.69664
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 32256 20580 a
currentpoint initclip moveto
 32256 20580 a
921 20580 a
 currentpoint currentpoint translate 1 1.43535 div 1 1.43535 div scale
neg exch neg exch translate
 921 20580 a 855 25117 a Fx(W)-108 b(elc)-36
b(he)616 b(A)-36 b(ussagen)616 b(kannst)h(du)e(diesem)i(Kastensc)-36
b(haubild)615 b(en)-36 b(tnehmen?)616 b(Kreuze)g(die)921
27109 y(zutre\033ende\(n\))431 b(A)-36 b(ussage\(n\))433
b(an.)p 1062 29810 44260 45 v 1062 32873 45 3064 v 1770
31670 a(Die)i(Spann)-36 b(w)g(eite)432 b(b)36 b(etr\344gt)434
b(12)g(Semester.)p 42912 32873 V 45277 32873 V 1062 32917
44260 45 v 1062 36061 45 3145 v 1770 34858 a(25\045)h(der)e
(Studierenden)e(studieren)i(h\366)36 b(c)-36 b(hstens)432
b(14)j(Semester)d(lang.)p 42912 36061 V 1 0 0 TeXcolorrgb
43621 34821 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 36061 V 1062 36106 44260 45 v 1062
41081 45 4976 v 1903 37621 a Fw(1)p 1903 37834 471 45
v 1903 38602 a(4)2846 38144 y Fx(der)339 b(Studierenden)e(b)36
b(en\366tigt)340 b(f\374r)f(den)g(Absc)-36 b(hluss)339
b(des)g(Studiums)f(mindestens)1770 40136 y(17)435 b(Semester.)p
42912 41081 45 4976 v 1 0 0 TeXcolorrgb 43621 38926 a
Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 41081 V 1062 41125 44260 45 v 1062 46003 45 4878
v 1770 43067 a Fx(Mindestens)386 b(50\045)g(der)g(Studierenden)d(b)36
b(en\366tigen)386 b(f\374r)g(den)f(Absc)-36 b(hluss)386
b(des)f(Stu-)1770 45058 y(diums)434 b(zwisc)-36 b(hen)433
b(15)h(und)f(17)h(Semestern.)p 42912 46003 V 45277 46003
V 1062 46048 44260 45 v 1062 49111 45 3064 v 1770 47908
a(Es)g(gibt)g(Studierende,)e(die)h(ihr)h(Studium)e(erst)h(nac)-36
b(h)433 b(10)h(Jahren)f(b)36 b(eenden.)p 42912 49111
V 1 0 0 TeXcolorrgb 43621 47911 a Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 49111 V 1062 49155
44260 45 v 47992 4800 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 53183 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(2)h(T)-179
b(agesums\344tze)716 b(-)i(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fx(2.)p 0 TeXcolorgray 651
w(Die)479 b(T)-108 b(agesums\344tze)480 b(\(in)e Fs(e)p
Fx(\))g(eines)h(Restauran)-36 b(ts)478 b(f\374r)g(eine)h(b)36
b(estimm)-36 b(te)478 b(W)-108 b(o)36 b(c)-36 b(he)479
b(sind)f(im)921 6792 y(folgenden)434 b(Diagramm)h(angegeb)36
b(en:)8775 24836 y

 8775 24836 a 8775 24836 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 8775 24836
a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -70.68663 -17.65697 ] concat

 pgfs


 16629 21452 a

 16629 21452 a 16629 21452 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.19925 pgfw

 /pgfsc{0 setgray}def

 10.08012 -12.80052 moveto

 10.08012 140.79814 lineto

 20.16025 -12.80052 moveto

 20.16025 140.79814 lineto

 30.24037 -12.80052 moveto

 30.24037 140.79814 lineto

 40.32051 -12.80052 moveto

 40.32051 140.79814 lineto

 60.48076 -12.80052 moveto

 60.48076 140.79814 lineto

 70.56088 -12.80052 moveto

 70.56088 140.79814 lineto

 80.64102 -12.80052 moveto

 80.64102 140.79814 lineto

 90.72115 -12.80052 moveto

 90.72115 140.79814 lineto

 110.8814 -12.80052 moveto

 110.8814 140.79814 lineto

 120.96153 -12.80052 moveto

 120.96153 140.79814 lineto

 131.04166 -12.80052 moveto

 131.04166 140.79814 lineto

 141.12178 -12.80052 moveto

 141.12178 140.79814 lineto

 161.28204 -12.80052 moveto

 161.28204 140.79814 lineto

 171.36217 -12.80052 moveto

 171.36217 140.79814 lineto

 181.44229 -12.80052 moveto

 181.44229 140.79814 lineto

 191.52242 -12.80052 moveto

 191.52242 140.79814 lineto

 211.68268 -12.80052 moveto

 211.68268 140.79814 lineto

 221.7628 -12.80052 moveto

 221.7628 140.79814 lineto

 231.84293 -12.80052 moveto

 231.84293 140.79814 lineto

 241.92307 -12.80052 moveto

 241.92307 140.79814 lineto

 262.08331 -12.80052 moveto

 262.08331 140.79814 lineto

 272.16344 -12.80052 moveto

 272.16344 140.79814 lineto

 282.24358 -12.80052 moveto

 282.24358 140.79814 lineto

 292.3237 -12.80052 moveto

 292.3237 140.79814 lineto

 gsave pgfsc pgfstr grestore newpath

0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.99628 pgfw

 /pgfsc{0 setgray}def

 0.0 -12.80052 moveto

 0.0 140.79814 lineto

 50.40063 -12.80052 moveto

 50.40063 140.79814 lineto

 100.80127 -12.80052 moveto

 100.80127 140.79814 lineto

 151.2019 -12.80052 moveto

 151.2019 140.79814 lineto

 201.60255 -12.80052 moveto

 201.60255 140.79814 lineto

 252.00319 -12.80052 moveto

 252.00319 140.79814 lineto

 302.40382 -12.80052 moveto

 302.40382 140.79814 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75
TeXcolorgray
 0.00099 pgfw

 /pgfsc{1 setgray}def

 0.0 4.26659 moveto

 302.40382 4.26659 lineto

 0.0 8.53317 moveto

 302.40382 8.53317 lineto

 0.0 12.79976 moveto

 302.40382 12.79976 lineto

 0.0 17.06635 moveto

 302.40382 17.06635 lineto

 0.0 25.59952 moveto

 302.40382 25.59952 lineto

 0.0 29.8661 moveto

 302.40382 29.8661 lineto

 0.0 34.13269 moveto

 302.40382 34.13269 lineto

 0.0 38.39928 moveto

 302.40382 38.39928 lineto

 0.0 46.93245 moveto

 302.40382 46.93245 lineto

 0.0 51.19904 moveto

 302.40382 51.19904 lineto

 0.0 55.46562 moveto

 302.40382 55.46562 lineto

 0.0 59.73221 moveto

 302.40382 59.73221 lineto

 0.0 68.26538 moveto

 302.40382 68.26538 lineto

 0.0 72.53198 moveto

 302.40382 72.53198 lineto

 0.0 76.79857 moveto

 302.40382 76.79857 lineto

 0.0 81.06516 moveto

 302.40382 81.06516 lineto

 0.0 89.59833 moveto

 302.40382 89.59833 lineto

 0.0 93.86491 moveto

 302.40382 93.86491 lineto

 0.0 98.1315 moveto

 302.40382 98.1315 lineto

 0.0 102.39809 moveto

 302.40382 102.39809 lineto

 0.0 110.93126 moveto

 302.40382 110.93126 lineto

 0.0 115.19785 moveto

 302.40382 115.19785 lineto

 0.0 119.46443 moveto

 302.40382 119.46443 lineto

 0.0 123.73102 moveto

 302.40382 123.73102 lineto

 0.0 132.26419 moveto

 302.40382 132.26419 lineto

 0.0 136.53078 moveto

 302.40382 136.53078 lineto

 0.0 140.79738 moveto

 302.40382 140.79738 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.00099 pgfw

 /pgfsc{1 setgray}def

 0.0 0.0 moveto

 302.40382 0.0 lineto

 0.0 21.33293 moveto

 302.40382 21.33293 lineto

 0.0 42.66586 moveto

 302.40382 42.66586 lineto

 0.0 63.9988 moveto

 302.40382 63.9988 lineto

 0.0 85.33174 moveto

 302.40382 85.33174 lineto

 0.0 106.66467 moveto

 302.40382 106.66467 lineto

 0.0 127.9976 moveto

 302.40382 127.9976 lineto

 gsave pgfsc pgfstr grestore newpath
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 10.08012 -14.21794 moveto

 10.08012 -11.3831 lineto

 20.16025 -14.21794 moveto

 20.16025 -11.3831 lineto

 30.24037 -14.21794 moveto

 30.24037 -11.3831 lineto

 40.32051 -14.21794 moveto

 40.32051 -11.3831 lineto

 60.48076 -14.21794 moveto

 60.48076 -11.3831 lineto

 70.56088 -14.21794 moveto

 70.56088 -11.3831 lineto

 80.64102 -14.21794 moveto

 80.64102 -11.3831 lineto

 90.72115 -14.21794 moveto

 90.72115 -11.3831 lineto

 110.8814 -14.21794 moveto

 110.8814 -11.3831 lineto

 120.96153 -14.21794 moveto

 120.96153 -11.3831 lineto

 131.04166 -14.21794 moveto

 131.04166 -11.3831 lineto

 141.12178 -14.21794 moveto

 141.12178 -11.3831 lineto

 161.28204 -14.21794 moveto

 161.28204 -11.3831 lineto

 171.36217 -14.21794 moveto

 171.36217 -11.3831 lineto

 181.44229 -14.21794 moveto

 181.44229 -11.3831 lineto

 191.52242 -14.21794 moveto

 191.52242 -11.3831 lineto

 211.68268 -14.21794 moveto

 211.68268 -11.3831 lineto

 221.7628 -14.21794 moveto

 221.7628 -11.3831 lineto

 231.84293 -14.21794 moveto

 231.84293 -11.3831 lineto

 241.92307 -14.21794 moveto

 241.92307 -11.3831 lineto

 262.08331 -14.21794 moveto

 262.08331 -11.3831 lineto

 272.16344 -14.21794 moveto

 272.16344 -11.3831 lineto

 282.24358 -14.21794 moveto

 282.24358 -11.3831 lineto

 292.3237 -14.21794 moveto

 292.3237 -11.3831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 -14.92645 moveto

 0.0 -10.67459 lineto

 50.40063 -14.92645 moveto

 50.40063 -10.67459 lineto

 100.80127 -14.92645 moveto

 100.80127 -10.67459 lineto

 151.2019 -14.92645 moveto

 151.2019 -10.67459 lineto

 201.60255 -14.92645 moveto

 201.60255 -10.67459 lineto

 252.00319 -14.92645 moveto

 252.00319 -10.67459 lineto

 302.40382 -14.92645 moveto

 302.40382 -10.67459 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 -2.83513 4.26659 moveto

 0.0 4.26659 lineto

 -2.83513 8.53317 moveto

 0.0 8.53317 lineto

 -2.83513 12.79976 moveto

 0.0 12.79976 lineto

 -2.83513 17.06635 moveto

 0.0 17.06635 lineto

 -2.83513 25.59952 moveto

 0.0 25.59952 lineto

 -2.83513 29.8661 moveto

 0.0 29.8661 lineto

 -2.83513 34.13269 moveto

 0.0 34.13269 lineto

 -2.83513 38.39928 moveto

 0.0 38.39928 lineto

 -2.83513 46.93245 moveto

 0.0 46.93245 lineto

 -2.83513 51.19904 moveto

 0.0 51.19904 lineto

 -2.83513 55.46562 moveto

 0.0 55.46562 lineto

 -2.83513 59.73221 moveto

 0.0 59.73221 lineto

 -2.83513 68.26538 moveto

 0.0 68.26538 lineto

 -2.83513 72.53198 moveto

 0.0 72.53198 lineto

 -2.83513 76.79857 moveto

 0.0 76.79857 lineto

 -2.83513 81.06516 moveto

 0.0 81.06516 lineto

 -2.83513 89.59833 moveto

 0.0 89.59833 lineto

 -2.83513 93.86491 moveto

 0.0 93.86491 lineto

 -2.83513 98.1315 moveto

 0.0 98.1315 lineto

 -2.83513 102.39809 moveto

 0.0 102.39809 lineto

 -2.83513 110.93126 moveto

 0.0 110.93126 lineto

 -2.83513 115.19785 moveto

 0.0 115.19785 lineto

 -2.83513 119.46443 moveto

 0.0 119.46443 lineto

 -2.83513 123.73102 moveto

 0.0 123.73102 lineto

 -2.83513 132.26419 moveto

 0.0 132.26419 lineto

 -2.83513 136.53078 moveto

 0.0 136.53078 lineto

 -2.83513 140.79738 moveto

 0.0 140.79738 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 -4.25229 0.0 moveto

 0.0 0.0 lineto

 -4.25229 21.33293 moveto

 0.0 21.33293 lineto

 -4.25229 42.66586 moveto

 0.0 42.66586 lineto

 -4.25229 63.9988 moveto

 0.0 63.9988 lineto

 -4.25229 85.33174 moveto

 0.0 85.33174 lineto

 -4.25229 106.66467 moveto

 0.0 106.66467 lineto

 -4.25229 127.9976 moveto

 0.0 127.9976 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 0.0 -12.80052 moveto

 300.4113 -12.80052 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 300.4113 -12.80052 ] concat

 save 1.99252 0.0 moveto -1.19551 1.59401 lineto 0.0 0.0 lineto -1.19551
-1.59401 lineto pgffill restore

 restore

 0.0 -12.80052 moveto

 0.0 138.80562 lineto

 pgfstr

 save

 [0.0 1.0 -1.0 0.0 0.0 138.80562 ] concat

 save 1.99252 0.0 moveto -1.19551 1.59401 lineto 0.0 0.0 lineto -1.19551
-1.59401 lineto pgffill restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.92654 -26.55591 ] concat

 pgfs



 0 setgray

16629 21452 a Fr(0)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 38.69441 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fr(1000)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 89.09505 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fr(2000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 139.49568 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452
a Fr(3000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 189.89633 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fr(4000)16629 21452
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 240.29697 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fr(5000)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 290.6976 -26.55591 ] concat

 pgfs



 0 setgray
 16629 21452 a Fr(6000)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -47.37021 -2.95554 ] concat

 pgfs



 0 setgray
 16629 21452 a Fx(Mon)-36 b(tag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -53.12775 18.3774 ] concat

 pgfs



 0 setgray

16629 21452 a Fx(Dienstag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -56.79988 38.54802 ] concat

 pgfs



 0 setgray
 16629 21452 a
Fx(Mitt)g(w)g(o)36 b(c)-36 b(h)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -66.78502 61.04326 ] concat

 pgfs



 0 setgray
 16629 21452
a Fx(Donnerstag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -44.28232 82.3762 ] concat

 pgfs



 0 setgray
 16629 21452 a Fx(F)-108
b(reitag)16629 21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -51.34145 103.70914 ] concat

 pgfs



 0 setgray
 16629 21452 a Fx(Samstag)16629
21452 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -49.65065 125.04207 ] concat

 pgfs



 0 setgray
 16629 21452 a Fx(Sonn)-36 b(tag)16629 21452 y


 pgfr

 restore

 restore

 0.0 -12.80052 moveto

 302.40382 -12.80052 lineto

 302.40382 140.79814 lineto

 0.0 140.79814 lineto

 closepath

 clip

 newpath

 save

0 0 1 TeXcolorrgb
 /pgffc{0.7 0.7 1 setrgbcolor}def

 9.96277 181.44229 0.0 -4.98138 pgfe

 9.96277 191.52242 0.0 16.35155 pgfe

 9.96277 120.96153 0.0 37.68448 pgfe

 9.96277 131.04166 0.0 59.01741 pgfe

 9.96277 201.60255 0.0 80.35036 pgfe

 9.96277 272.16344 0.0 101.68329 pgfe

 9.96277 241.92307 0.0 123.01622 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 8775 24836 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 921 31336
a Fx(Berec)g(hne)433 b(den)g(durc)-36 b(hsc)g(hnittlic)g(hen)431
b(T)-108 b(agesumsatz)434 b(f\374r)f(diese)h(W)-108 b(o)36
b(c)-36 b(he.)p 1 0 0 TeXcolorrgb 1054 35087 a Fr(4)221
b(800)297 b(+)e(5)221 b(400)296 b(+)f(4)221 b(000)297
b(+)e(2)221 b(400)297 b(+)e(3)221 b(800)297 b(+)e(3)221
b(600)p 1054 35675 24947 45 v 13202 36896 a(7)26502 35985
y(=)369 b(3)221 b(800)921 40522 y Fx(Der)434 b(durc)-36
b(hsc)g(hnittlic)g(he)431 b(T)-108 b(agesumsatz)434 b(b)36
b(etr\344gt)434 b Fs(e)217 b Fx(3.800.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 6792 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 44256
54804 45 v 0 TeXcolorgray 24746 81281 a Fx(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(3)h(Bo)-60
b(xplot)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741
4800 a Fx(3.)p 0 TeXcolorgray 651 w(Die)437 b(Nettogeh\344lter)g(v)-36
b(on)436 b(44)h(Angestellten)f(einer)h(Firmenabteilung)e(w)-36
b(erden)436 b(durc)-36 b(h)435 b(fol-)921 6792 y(gendes)e(Kastensc)-36
b(haubild)433 b(\(Bo)-36 b(xplot\))434 b(dargestellt:)921
14214 y
 currentpoint currentpoint translate 0.55235 0.55235 scale neg exch
neg exch translate
 921 14214 a 1355 14214 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 658.09819 a add def
/d 0.0 a add neg def /h 105.08359 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 14214 a 4345 9691
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 631.08208
 0 -27.01611  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -27.01611  631.08208  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -40.86174  def /maxTickline
64.22185  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 1 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -4.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 631.08208 0.0 -27.01611 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 4345 9691 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4345 9691 a 4345
9691 a
tx@Dict begin  { 631.08208 64.22185 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 4345 9691 a 4345 9691
a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 4345
9691 a 4345 9691 a
tx@Dict begin  { 0.0 0.0 pop 631.08208 64.22185 exch pop } PutCoor
PutBegin  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4345 9691
a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  PutEnd  end
 4345 9691 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 113.81097 8.5359
312.98018 31.29819 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 28.45274 31.29819 28.45274
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 597.50761 31.29819 597.50761
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 199.1692 31.29819 199.1692
8.5359   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 113.81097 19.91682 28.45274
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 597.50761 19.91682 312.98018
19.91682   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 4345 9691 a
tx@Dict begin  { -21.8562 -7.11317 } PutCoor PutBegin  end
 4345
9691 a 925 x Fs(e)217 b Fx(1.000)4345 9691 y
tx@Dict begin  PutEnd  end
 4345 9691
a 4345 9691 a
tx@Dict begin  { 263.68802 -7.11317 } PutCoor PutBegin  end
 4345 9691 a 925 x Fs(e)g Fx(2.000)4345
9691 y
tx@Dict begin  PutEnd  end
 4345 9691 a 4345 9691 a
tx@Dict begin  { 546.03339 -7.11317 } PutCoor PutBegin  end
 4345 9691 a 925 x Fs(e)g
Fx(3.000)4345 9691 y
tx@Dict begin  PutEnd  end
 4345 9691 a 74203 14214 a
currentpoint initclip moveto
 74203
14214 a 921 14214 a
 currentpoint currentpoint translate 1 0.55235 div 1 0.55235 div scale
neg exch neg exch translate
 921 14214 a 2545 x Fx(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 3699 17726 38985 45 v 3699 20800 45 3074 v 4408
19597 a(22)g(Angestellte)g(v)-36 b(erdienen)433 b(mehr)g(als)h
Fs(e)217 b Fx(2.400.)p 40275 20800 V 42640 20800 V 3699
20844 38985 45 v 3699 23918 45 3074 v 4408 22715 a(Drei)434
b(Viertel)g(der)f(Angestellten)g(v)-36 b(erdienen)433
b Fs(e)217 b Fx(2.100)435 b(o)36 b(der)434 b(mehr.)p
40275 23918 V 42640 23918 V 3699 23962 38985 45 v 3699
27036 45 3074 v 4408 25833 a(Ein)f(Viertel)h(aller)h(Angestellten)e(v)
-36 b(erdien)g(t)433 b Fs(e)217 b Fx(1.400)435 b(o)36
b(der)434 b(w)-36 b(eniger.)p 40275 27036 V 1 0 0 TeXcolorrgb
40983 25831 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 42640 27036 V 3699 27080 38985 45 v 3699
30154 45 3074 v 4408 28951 a Fx(Es)433 b(gibt)h(Angestellte,)g(die)g
(mehr)f(als)h Fs(e)217 b Fx(3.300)435 b(v)-36 b(erdienen.)p
40275 30154 V 42640 30154 V 3699 30199 38985 45 v 3699
35328 45 5129 v 4408 32059 a(Das)434 b(Nettogehalt)g(der)f(H\344lfte)i
(aller)f(Angestellten)g(liegt)g(im)g(Bereic)-36 b(h)4408
34051 y Fr([)8 b Fs(e)p Fx(1.400)q Fr(;)221 b Fs(e)p
Fx(2.100)r Fr(])q Fx(.)p 40275 35328 V 1 0 0 TeXcolorrgb
40983 33095 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 42640 35328 V 3699 35372 38985 45 v 47992
4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905 6792 a Ft(WS)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 39400 54804 45 v 0 TeXcolorgray 24746 81281 a Fx(3)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(4)h(Nationalratsw)-60
b(ahl)716 b(-)i(MC)f(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fx(4.)p 0 TeXcolorgray 651 w(In)728 b(der)g(folgenden)h
(Abbildung)f(sind)g(die)g(Ergebnisse)h(der)e(Nationalratsw)-36
b(ahl)730 b(2006)769 6792 y(\(linksstehende)486 b(Balk)-36
b(en\))487 b(und)e(der)h(Nationalratsw)-36 b(ahl)489
b(2008)f(\(rec)-36 b(h)g(tsstehende)484 b(Balk)-36 b(en\))921
8784 y(dargestellt.)433 b(Alle)h(Prozen)-36 b(ts\344tze)432
b(b)36 b(eziehen)433 b(sic)-36 b(h)432 b(auf)h(die)g(Anzahl)g(der)f
(g\374ltigen)h(abgege-)921 10776 y(b)36 b(enen)433 b(Stimmen,)g(die)g
(2006)i(und)e(2008)i(ungef\344hr)e(gleic)-36 b(h)434
b(w)-36 b(ar.)921 38543 y
 currentpoint currentpoint translate 0.79137 0.79137 scale neg exch
neg exch translate
 921 38543 a 3089 38543 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 493.84802 a add def
/d 0.0 a add neg def /h 286.64555 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3089
38543 a 7070 34879 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.4523
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 457.88138
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  457.88138  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 253.5497  def
/dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 253.5497
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  253.5497  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 457.88138  def
/dT 1864650 abs 65536 div viceversa { neg } if def /DT 5. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 253.5497 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 457.88138 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 5825 35165 a Fw(0)5825
32015 y(5)5354 28865 y(10)5354 25716 y(15)5354 22566
y(20)5354 19417 y(25)5354 16267 y(30)5354 13118 y(35)5354
9968 y(40)7070 34879 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 48.36957 0.0 48.36957
200.87326 19.91682 200.87326 19.91682 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  [ 76.82231 0.0
76.82231 166.7305 48.36957 166.7305 48.36957 0.0  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0 0.2  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 133.7278 0.0 133.7278
195.1828 105.27505 195.1828 105.27505 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 162.18054 0.0 162.18054
147.95197 133.7278 147.95197 133.7278 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 219.08603 0.0 219.08603
62.59506 190.63329 62.59506 190.63329 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  [ 247.53877 0.0
247.53877 99.58305 219.08603 99.58305 219.08603 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.2 0.2 1  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 304.44426 0.0 304.44426
62.59506 275.99152 62.59506 275.99152 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  [ 332.897 0.0 332.897
59.18074 304.44426 59.18074 304.44426 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.8 0  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 389.80249 0.0 389.80249
23.33092 361.34975 23.33092 361.34975 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  [ 418.25523 0.0
418.25523 60.8879 389.80249 60.8879 389.80249 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.6 0.2  setrgbcolor  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 19.91682 200.87326 19.91682
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 48.36957 200.87326 19.91682
200.87326   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 48.36957 0.0 48.36957 200.87326
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 19.91682 0.0 48.36957 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 166.7305 48.36957
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 166.7305 48.36957
166.7305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 0.0 76.82231
166.7305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 0.0 76.82231
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0.2  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 195.1828 105.27505
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 195.1828 105.27505
195.1828   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 0.0 133.7278
195.1828   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 0.0 133.7278
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.7278 147.95197 133.7278 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.18054 147.95197 133.7278 147.95197
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.18054 0.0 162.18054 147.95197 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.7278 0.0 162.18054 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 190.63329 62.59506 190.63329
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 62.59506 190.63329
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 0.0 219.08603
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 190.63329 0.0 219.08603
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 99.58305 219.08603
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 247.53877 99.58305 219.08603
99.58305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 247.53877 0.0 247.53877
99.58305   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.2 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 219.08603 0.0 247.53877
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.2 0.2 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 275.99152 62.59506 275.99152
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 62.59506 275.99152
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 0.0 304.44426
62.59506   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 275.99152 0.0 304.44426
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 59.18074 304.44426
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 332.897 59.18074 304.44426
59.18074   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 332.897 0.0 332.897 59.18074
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.8 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 304.44426 0.0 332.897
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.8 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 361.34975 23.33092 361.34975
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 23.33092 361.34975
23.33092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 0.0 389.80249
23.33092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 361.34975 0.0 389.80249
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 60.8879 389.80249
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 418.25523 60.8879 389.80249
60.8879   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 418.25523 0.0 418.25523
60.8879   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0.6 0.2  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 389.80249 0.0 418.25523
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0.6 0.2  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 7070 34879 a
tx@Dict begin  { 38.81166 -7.6508 } PutCoor PutBegin  end
 7070
34879 a 1111 x Fx(SP\326)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 123.97583 -8.17014 } PutCoor PutBegin  end
 7070 34879 a 1111 x Fx(\326)g(VP)7070 34879 y
tx@Dict begin  PutEnd  end

7070 34879 a 7070 34879 a
tx@Dict begin  { 210.17848 -8.68938 } PutCoor PutBegin  end
 7070 34879 a 1111 x Fx(FP\326)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 295.34265 -8.68938 } PutCoor PutBegin  end
 7070 34879 a 1111 x
Fx(GR)g(\334NE)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 383.10349 -8.68938 } PutCoor PutBegin  end

7070 34879 a 1111 x Fx(BZ\326)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879
a 7070 34879 a
tx@Dict begin  { 23.2329 215.64183 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(35,3\045)7070 34879
y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 51.27493 180.84976 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(29,3\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 106.83931 209.41042 } PutCoor PutBegin  end
 7070 34879 a 996 x
Fx(34,3\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 136.95834 161.6362 } PutCoor PutBegin  end
 7070
34879 a 996 x Fx(26,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 186.83226 76.99269 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(11,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070
34879 a 7070 34879 a
tx@Dict begin  { 220.56433 112.82333 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(17,5\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 277.68689 76.47337 } PutCoor PutBegin  end
 7070 34879 a 996 x
Fx(11,0\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 307.28667 73.87698 } PutCoor PutBegin  end
 7070
34879 a 996 x Fx(10,4\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070
34879 a
tx@Dict begin  { 362.3318 37.00769 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(4,1\045)7070 34879 y
tx@Dict begin  PutEnd  end
 7070
34879 a 7070 34879 a
tx@Dict begin  { 390.3734 74.39622 } PutCoor PutBegin  end
 7070 34879 a 996 x Fx(10,7\045)7070
34879 y
tx@Dict begin  PutEnd  end
 7070 34879 a 7070 34879 a
tx@Dict begin  { 34.13799 8.44704 } PutCoor PutBegin  end
 7070 34879 a 0.5 TeXcolorgray
Fw(1)p 0 TeXcolorgray 7070 34879 a
tx@Dict begin  PutEnd  end
 7070 34879 a 57756
38543 a
currentpoint initclip moveto
 57756 38543 a 921 38543 a
 currentpoint currentpoint translate 1 0.79137 div 1 0.79137 div scale
neg exch neg exch translate
 921 38543 a 2545 x
Fx(\334b)36 b(erpr\374fe)373 b(anhand)g(der)g(Abbildung)g(die)h
(folgenden)g(A)-36 b(ussagen)374 b(und)e(kreuze)i(die)g(b)36
b(eiden)921 43080 y(zutre\033enden)432 b(A)-36 b(ussagen)433
b(an.)p 1062 44047 44260 45 v 1062 49298 45 5252 v 1770
46103 a(Das)317 b(BZ\326)d(hat)i(seinen)f(Stimmenan)-36
b(teil)315 b(v)-36 b(on)315 b(2006)i(auf)f(2008)g(um)f(mehr)g(als)h
(100\045)1770 48095 y(gesteigert.)p 42912 49298 V 1 0 0
TeXcolorrgb 43621 47004 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 49298 V 1062 49342 44260
45 v 1062 52601 45 3260 v 1770 51398 a Fx(Die)435 b(GR)-36
b(\334NEN)433 b(erreic)-36 b(h)g(ten)432 b(2006)j(w)-36
b(eniger)434 b(Stimmenan)-36 b(teile)433 b(als)i(2008.)p
42912 52601 V 45277 52601 V 1062 52646 44260 45 v 1062
57897 45 5252 v 1770 54702 a(Der)f(Stimmenan)-36 b(teil)433
b(der)g(\326)-36 b(VP)434 b(hat)f(v)-36 b(on)434 b(2006)h(auf)f(2008)g
(um)g(fast)g(ein)f(Viertel)1770 56694 y(abgenommen.)p
42912 57897 V 1 0 0 TeXcolorrgb 43621 55603 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
57897 V 1062 57941 44260 45 v 1062 63192 45 5252 v 1770
59997 a Fx(Die)i(Anzahl)e(der)g(erreic)-36 b(h)g(ten)433
b(Stimmen)g(f\374r)g(die)h(SP\326)e(hat)i(v)-36 b(on)434
b(2006)g(auf)g(2008)1770 61989 y(um)g(6\045)f(abgenommen.)p
42912 63192 V 45277 63192 V 1062 63237 44260 45 v 1062
68229 45 4993 v 1770 65293 a(Das)406 b(BZ\326)f(hat)g(v)-36
b(on)406 b(2006)g(auf)g(2008)g(deutlic)-36 b(h)405 b(mehr)f(Stimmen)h
(dazugew)-36 b(onnen)1770 67284 y(als)435 b(die)e(FP\326.)p
42912 68229 V 45277 68229 V 1062 68274 44260 45 v 47992
4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905 6792 a Ft(WS)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 72302 54804 45 v 0 TeXcolorgray 24746 81281 a Fx(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(WS)624 b(1.1)f(-)i(5)f(Median)f(und)g(Mo)
60 b(dus)623 b(-)h(O)-60 b(A)625 b(-)f(BIFIE)h(-)f(K)-60
b(omp)60 b(etenz-)-2331 4515 y(c)-60 b(hec)g(k)718 b(2016)p
0 TeXcolorgray -741 7823 a Fx(5.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(ungeordnete)g(Liste)g(v)-36
b(on)434 b(19)g(nat\374rlic)-36 b(hen)433 b(Zahlen:)921
10368 y(5,)h(15,)h(14,)f(2,)g(5,)h(13,)f(11,)h(9,)f(7,)g(16,)h(15,)f
(9,)g(10,)h(14,)f(3,)h(14,)f(5,)g(15,)h(14)921 12913
y(Gib)e(den)g(Median)g(und)g(den)f(Mo)36 b(dus)434 b(dieser)f(Liste)g
(an.)921 15459 y(Median:)p 1 0 0 TeXcolorrgb(11)p 0 0 0
TeXcolorrgb 921 18004 a(Mo)36 b(dus:)p 1 0 0 TeXcolorrgb(14)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 9815 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 21479
54804 45 v 0 TeXcolorgray 24746 81281 a Fx(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(WS)1030 b(1.1)h(-)g(6)g(In)-60
b(ternetplattform)1029 b(-)j(MC)f(-)g(Matura)g(2014/15)g(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -741 7929 a Fx(6.)p
0 TeXcolorgray 651 w(Die)607 b(Nutzung)f(einer)h(b)36
b(estimm)-36 b(ten)606 b(In)-36 b(ternetplattform)606
b(durc)-36 b(h)605 b(Jugendlic)-36 b(he)606 b(wird)h(f\374r)921
9921 y(M\344dc)-36 b(hen)639 b(und)f(Bursc)-36 b(hen)638
b(getrenn)-36 b(t)639 b(un)-36 b(tersuc)g(h)g(t.)638
b(Dab)36 b(ei)641 b(wird)e(erfasst,)i(wie)f(oft)g(die)921
11913 y(b)36 b(efragten)329 b(Jugendlic)-36 b(hen)327
b(diese)i(Plattform)g(pro)f(W)-108 b(o)36 b(c)-36 b(he)329
b(b)36 b(esuc)-36 b(hen.)328 b(Die)h(nac)-36 b(hstehenden)921
13905 y(Kastensc)g(haubilder)433 b(\(Bo)-36 b(xplots\))434
b(zeigen)g(das)f(Ergebnis)h(der)f(Un)-36 b(tersuc)g(h)g(ung.)p
0 TeXcolorgray 0 TeXcolorgray 3168 32997 a
 currentpoint currentpoint translate 1.29338 1.29338 scale neg exch
neg exch translate
 3168 32997
a 3601 32997 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 278.83255 a add def
/d 0.0 a add neg def /h 102.43085 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3601 32997 a 8011 24493 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 41 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 0.0 0.0 -76.82314   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   0  setlinejoin
1  setlinecap stroke  grestore grestore grestore 5.69046 0.0 T } repeat
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 238.99933  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 238.99933  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-149.23373  def /maxTickline 0.0  def /dT 1864650 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 5 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 5.69046  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.99933
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7776 23938 a Fw(0)2679
b(5)2444 b(10)2210 b(15)f(20)h(25)g(30)f(35)h(40)8011
24493 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 45.52368 -34.14362
142.2615 -17.07181 0 Frame  gsave 1  setgray  1. .setopacityalpha 
fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 22.76184 -68.28723
113.8092 -51.21542 0 Frame  gsave 1  setgray  1. .setopacityalpha 
fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -17.07181 0.0 -34.14362   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0  setgray  0.3
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -17.07181 182.09473 -34.14362
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 79.66644 -17.07181 79.66644 -34.14362
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 45.52368 -25.60771 0.0 -25.60771  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -25.60771 142.2615 -25.60771
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -51.21542 0.0 -68.28723   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0  setgray  0.3
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -51.21542 182.09473 -68.28723
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 68.28552 -51.21542 68.28552 -68.28723
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.76184 -59.75133 0.0 -59.75133  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.09473 -59.75133 113.8092 -59.75133
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.3 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8011 24493 a
tx@Dict begin  { 159.33289 25.60771 } PutCoor PutBegin  end
 8011 24493 a 610 x Fq(Besuc)-26 b(he)314
b(pro)f(W)-78 b(o)26 b(c)-26 b(he)8011 24493 y
tx@Dict begin  PutEnd  end
 8011 24493
a 8011 24493 a
tx@Dict begin  { -39.83322 -22.50104 } PutCoor PutBegin  end
 8011 24493 a 610 x Fq(Bursc)g(hen)8011
24493 y
tx@Dict begin  PutEnd  end
 8011 24493 a 8011 24493 a
tx@Dict begin  { -39.83322 -57.33588 } PutCoor PutBegin  end
 8011 24493 a 610 x
Fq(M\344dc)g(hen)8011 24493 y
tx@Dict begin  PutEnd  end
 8011 24493 a 34467 32997
a
currentpoint initclip moveto
 34467 32997 a 3168 32997 a
 currentpoint currentpoint translate 1 1.29338 div 1 1.29338 div scale
neg exch neg exch translate
 3168 32997 a 921 36982 a
Fx(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an.)p 1062 37948 44260 45 v 1062 42745
45 4797 v 1770 39808 a(Der)g(Median)g(der)f(Anzahl)g(v)-36
b(on)434 b(Besuc)-36 b(hen)433 b(pro)g(W)-108 b(o)36
b(c)-36 b(he)434 b(ist)f(b)36 b(ei)434 b(den)f(Bursc)-36
b(hen)1770 41800 y(et)g(w)g(as)434 b(h\366her)f(als)i(b)36
b(ei)433 b(den)g(M\344dc)-36 b(hen.)p 42912 42745 V 1 0 0
TeXcolorrgb 43621 40679 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 42745 V 1062 42789 44260
45 v 1062 47844 45 5056 v 1770 44649 a Fx(Die)435 b(Spann)-36
b(w)g(eite)432 b(der)i(w)-36 b(\366)36 b(c)-36 b(hen)g(tlic)g(hen)433
b(Nutzung)f(der)h(Plattform)h(ist)g(b)36 b(ei)434 b(den)1770
46641 y(Bursc)-36 b(hen)433 b(gr\366\377er)h(als)g(b)36
b(ei)434 b(den)f(M\344dc)-36 b(hen.)p 42912 47844 V 45277
47844 V 1062 47889 44260 45 v 1062 52685 45 4797 v 1770
49749 a(A)g(us)376 b(der)g(Gra\034k)h(kann)f(man)g(ablesen,)h(dass)g
(genauso)g(viele)g(M\344dc)-36 b(hen)376 b(wie)h(Bur-)1770
51741 y(sc)-36 b(hen)433 b(die)h(Plattform)g(w)-36 b(\366)36
b(c)-36 b(hen)g(tlic)g(h)433 b(b)36 b(esuc)-36 b(hen.)p
42912 52685 V 45277 52685 V 1062 52730 44260 45 v 1062
57785 45 5056 v 1770 54590 a(Der)434 b(An)-36 b(teil)434
b(der)f(Bursc)-36 b(hen,)433 b(die)g(mehr)g(als)h(20-mal)h(pro)e(W)-108
b(o)36 b(c)-36 b(he)433 b(die)h(Plattform)1770 56582
y(n)-36 b(\374tzen,)433 b(ist)h(zumindest)e(gleic)-36
b(h)434 b(gro\377)h(o)36 b(der)433 b(gr\366\377er)i(als)f(jener)f(der)g
(M\344dc)-36 b(hen.)p 42912 57785 V 1 0 0 TeXcolorrgb
43621 55589 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 57785 V 1062 57829 44260 45 v 1062
62965 45 5137 v 1770 59770 a Fx(Ca.)419 b(80)217 b(\045)418
b(der)f(M\344dc)-36 b(hen)417 b(und)f(ca.)j(75)217 b(\045)418
b(der)f(Bursc)-36 b(hen)416 b(n)-36 b(\374tzen)417 b(die)g(Plattform)
1770 61762 y(genau)434 b(25-mal)g(pro)g(W)-108 b(o)36
b(c)-36 b(he.)p 42912 62965 V 45277 62965 V 1062 63009
44260 45 v 47992 7929 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 67038 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fy(WS)696 b(1.1)g(-)h(7)f(En)-60
b(t)g(wic)g(klung)696 b(der)f(Landwirtsc)-60 b(haft)695
b(in)h(\326sterreic)-60 b(h)696 b(-)-2331 4817 y(MC)718
b(-)g(Matura)f(2014/15)g(-)g(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 8124 a Fx(7.)p 0 TeXcolorgray
651 w(Der)415 b(W)-108 b(ebsite)415 b(der)f(Statistik)h(A)-36
b(ustria)415 b(kann)f(man)h(folgende)h(T)-108 b(ab)36
b(elle)415 b(\374b)36 b(er)414 b(die)h(En)-36 b(t)g(wic)g(k-)921
10116 y(lung)433 b(der)g(Agrarstruktur)g(in)h(\326sterreic)-36
b(h)432 b(en)-36 b(tnehmen:)p 6538 11747 30490 45 v 6538
11747 V 6538 13739 45 1992 v 7246 13141 a(Jahr)p 20509
13739 V 12183 w(1995)p 26000 13739 V 2892 w(1999)p 31492
13739 V 2891 w(2010)p 36983 13739 V 6538 13783 30490
45 v 6538 13783 V 6538 19759 45 5976 v 7246 15177 a(Anzahl)575
b(der)f(land-)g(und)7246 17169 y(forst)-36 b(wirtsc)g(haftlic)g(hen)
7246 19161 y(Betrieb)36 b(e)434 b(insgesam)-36 b(t)p
20509 19759 V 21217 15177 a(239)217 b(099)p 26000 19759
V 1375 w(217)g(508)p 31492 19759 V 1374 w(173)g(317)p
36983 19759 V 6538 19803 30490 45 v 6538 19803 V 6538
23787 45 3984 v 7246 21197 a(durc)-36 b(hsc)g(hnittlic)g(he)1227
b(Be-)7246 23189 y(triebsgr\366\377e)434 b(in)g(Hektar)p
20509 23787 V 22121 21197 a(31,5)p 26000 23787 V 3180
w(34,6)p 31492 23787 V 3181 w(42,4)p 36983 23787 V 6538
23831 30490 45 v 6538 23831 V 0 TeXcolorgray 0 TeXcolorgray
921 26527 a Fp(Datenquelle:)275 b(h)-22 b(ttp://www.statistik.at/w)g
(eb_de/statistik)g(en/land_und_forst)g(wirtsc)g(haft/index.h)g(tml)921
32503 y Fx(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an.)p 1062 33470 44260 45 v 1062 38525
45 5056 v 1770 35330 a(Die)378 b(Anzahl)e(der)g(land-)g(und)f(forst)-36
b(wirtsc)g(haftlic)g(hen)377 b(Betrieb)36 b(e)376 b(ist)h(im)f
(Zeitraum)1770 37322 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(in)e(jedem)
h(Jahr)f(um)g(die)h(gleic)-36 b(he)434 b(Zahl)g(gesunk)-36
b(en.)p 42912 38525 V 45277 38525 V 1062 38569 44260
45 v 1062 43624 45 5056 v 1770 40429 a(Die)435 b(durc)-36
b(hsc)g(hnittlic)g(he)431 b(Betriebsgr\366\377e)j(hat)g(v)-36
b(on)434 b(1995)h(bis)e(1999)i(im)f(Jahres-)1770 42421
y(durc)-36 b(hsc)g(hnitt)432 b(um)h(mehr)g(Hektar)h(zugenommen)f(als)h
(v)-36 b(on)434 b(1999)h(bis)f(2010.)p 42912 43624 V
1 0 0 TeXcolorrgb 43621 41429 a Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 43624 V 1062 43669
44260 45 v 1062 48724 45 5056 v 1770 45529 a Fx(Die)h(durc)-36
b(hsc)g(hnittlic)g(he)431 b(Betriebsgr\366\377e)j(hat)g(v)-36
b(on)434 b(1995)h(bis)e(1999)i(um)e(durc)-36 b(h-)1770
47521 y(sc)g(hnittlic)g(h)433 b(0,5)i(ha)e(pro)h(Jahr)f(abgenommen.)p
42912 48724 V 45277 48724 V 1062 48768 44260 45 v 1062
53823 45 5056 v 1770 50628 a(Die)383 b(Gesam)-36 b(tgr\366\377e)382
b(der)f(land-)g(und)g(forst)-36 b(wirtsc)g(haftlic)g(h)382
b(gen)-36 b(utzten)381 b(Fl\344c)-36 b(he)381 b(hat)1770
52620 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(abgenommen.)p
42912 53823 V 1 0 0 TeXcolorrgb 43621 51628 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
53823 V 1062 53867 44260 45 v 1062 58922 45 5056 v 1770
55727 a Fx(Die)378 b(Anzahl)e(der)g(land-)g(und)f(forst)-36
b(wirtsc)g(haftlic)g(hen)377 b(Betrieb)36 b(e)376 b(ist)h(im)f
(Zeitraum)1770 57719 y(v)-36 b(on)434 b(1995)h(bis)f(2010)h(um)e(mehr)g
(als)h(ein)g(Drittel)g(gesunk)-36 b(en.)p 42912 58922
V 45277 58922 V 1062 58967 44260 45 v 47992 8124 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 10116 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62995
54804 45 v 0 TeXcolorgray 24746 81281 a Fx(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(WS)504 b(1.1)h(-)h(8)f(Anzahl)f(der)g
(Heizungstage)h(-)g(O)-60 b(A)505 b(-)h(Matura)e(2014/15)-2617
4622 y(-)718 b(Neb)60 b(en)-60 b(termin)716 b(2)p 0 TeXcolorgray
-741 7929 a Fx(8.)p 0 TeXcolorgray 651 w(Die)350 b(K)-36
b(\366rp)36 b(ergr\366\377en)349 b(der)f Fr(450)i Fx(Sc)-36
b(h)g(\374lerInnen)347 b(einer)i(Sc)-36 b(h)g(ulstufe)347
b(einer)i(Gemeinde)f(wurden)921 9921 y(in)385 b(Zen)-36
b(timetern)385 b(gemessen)h(und)e(deren)h(V)-108 b(erteilung)385
b(wurde)g(in)g(einem)h(Kastensc)-36 b(haubild)769 11913
y(\(Bo)g(xplot\))434 b(gra\034sc)-36 b(h)433 b(dargestellt.)p
0 TeXcolorgray 0 TeXcolorgray 3170 23972 a
 currentpoint currentpoint translate 0.51146 0.51146 scale neg exch
neg exch translate
 3170 23972
a 4037 23972 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 707.11163 a add def
/d 0.0 a add neg def /h 175.84727 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4037 23972 a -508442 15190 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 1 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 284.52744 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  4609.34445 0.0 T 25
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 5336.71503
 0 4629.6034  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 4629.6034  5336.71503  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -79.33302  def /maxTickline
96.51425  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 96.51425
 0 -79.33302  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -79.33302  96.51425  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 4629.6034  def /maxTickline
5336.71503  def /dT 3729358 abs 65536 div viceversa { neg } if def
/DT 2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 96.51425 0.0 -79.33302   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5336.71503 0.0 4629.6034 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-509687 9176 a Fw(2)-510419 21728 y Fo(\000)p Fw(2)-502378
16536 y(2)5830 b(4)f(6)g(8)5594 b(10)5359 b(12)g(14)h(16)f(18)g(20)g
(22)g(24)h(26)f(28)g(30)g(32)g(34)h(36)f(38)g(40)g(42)g(44)h(46)f(48)g
(50)g(52)h(54)f(56)g(58)g(60)g(62)h(64)f(66)g(68)g(70)g(72)h(74)f(76)g
(78)g(80)g(82)h(84)f(86)g(88)g(90)h(92)f(94)g(96)g(98)5124
b(100)4889 b(102)h(104)f(106)g(108)g(110)g(112)h(114)f(116)g(118)g(120)
g(122)h(124)f(126)g(128)g(130)g(132)h(134)f(136)g(138)g(140)h(142)f
(144)g(146)g(148)g(150)h(152)f(154)g(156)g(158)g(160)h(162)f(164)g(166)
g(168)g(170)h(172)f(174)g(176)g(178)h(180)f(182)g(184)g(186)-580467
b(2)5830 b(4)f(6)g(8)5594 b(10)5359 b(12)g(14)h(16)f(18)g(20)g(22)g(24)
h(26)f(28)g(30)g(32)g(34)h(36)f(38)g(40)g(42)g(44)h(46)f(48)g(50)g(52)h
(54)f(56)g(58)g(60)g(62)h(64)f(66)g(68)g(70)g(72)h(74)f(76)g(78)g(80)g
(82)h(84)f(86)g(88)g(90)h(92)f(94)g(96)g(98)5124 b(100)4889
b(102)h(104)f(106)g(108)g(110)g(112)h(114)f(116)g(118)g(120)g(122)h
(124)f(126)g(128)g(130)g(132)h(134)f(136)g(138)g(140)h(142)f(144)g(146)
g(148)g(150)h(152)f(154)g(156)g(158)g(160)h(162)-508442
15190 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray   0. true 4666.24994 14.22636
5064.58835 42.67911 0 Frame  gsave 0.25  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4666.24994 42.67911 4666.24994
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 5263.75755 42.67911 5263.75755
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4836.9664 42.67911 4836.9664
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 4666.24994 28.45274 4666.24994
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.25  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 5263.75755 28.45274 5064.58835
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.25  setgray  0.1 .setopacityalpha  fill  grestore gsave
0.8 SLW 0.25  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-508442 15190 a
tx@Dict begin  { 5183.19716 -39.32527 } PutCoor PutBegin  end
 -508442 15190 a 915 x Fx(K)-36 b(\366rp)36
b(ergr\366\377en)434 b(in)g(cm)-508442 15190 y
tx@Dict begin  PutEnd  end
 -508442
15190 a 82311 23972 a
currentpoint initclip moveto
 82311 23972 a 3170 23972 a
 currentpoint currentpoint translate 1 0.51146 div 1 0.51146 div scale
neg exch neg exch translate
 3170
23972 a 921 27624 a Fx(Zur)928 b(In)-36 b(terpretation)928
b(dieses)h(Kastensc)-36 b(haubilds)929 b(w)-36 b(erden)928
b(v)-36 b(ersc)g(hiedene)928 b(A)-36 b(ussagen)921 29616
y(get\344tigt.)435 b(Kreuze)e(die)h(b)36 b(eiden)432
b(zutre\033enden)g(A)-36 b(ussagen)434 b(an.)p 1062 32316
44260 45 v 1062 35461 45 3145 v 1770 34258 a Fr(60)221
b(\045)435 b Fx(der)e(Sc)-36 b(h)g(\374lerInnen)432 b(sind)h(genau)g
Fr(172)221 b Fn(cm)435 b Fx(gro\377.)p 42912 35461 V
45277 35461 V 1062 35505 44260 45 v 1062 38568 45 3064
v 1770 37365 a(Mindestens)e(eine)h(Sc)-36 b(h)g(\374lerin)432
b(bzw.)i(ein)f(Sc)-36 b(h)g(\374ler)433 b(ist)h(genau)f
Fr(185)221 b Fn(cm)434 b Fx(gro\377.)p 42912 38568 V
1 0 0 TeXcolorrgb 43621 37369 a Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 38568 V 1062 38612
44260 45 v 1062 41573 45 2961 v 1770 40554 a Fx(H\366)36
b(c)-36 b(hstens)434 b Fr(50)221 b(\045)434 b Fx(der)f(Sc)-36
b(h)g(\374lerInnen)432 b(sind)h(kleiner)h(als)g Fr(170)221
b Fn(cm)p Fx(.)p 42912 41573 V 1 0 0 TeXcolorrgb 43621
40425 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 41573 V 1062 41617 44260 45 v 1062
44761 45 3145 v 1770 43558 a Fx(Mindestens)433 b Fr(75)221
b(\045)435 b Fx(der)e(Sc)-36 b(h)g(\374lerInnen)431 b(sind)i
(gr\366\377er)i(als)f Fr(178)221 b Fn(cm)p Fx(.)p 42912
44761 V 45277 44761 V 1062 44806 44260 45 v 1062 49942
45 5137 v 1770 46747 a(H\366)36 b(c)-36 b(hstens)351
b Fr(50)221 b(\045)352 b Fx(der)f(Sc)-36 b(h)g(\374lerInnen)348
b(sind)j(mindestens)f Fr(164)221 b Fn(cm)352 b Fx(und)e(h\366)36
b(c)-36 b(hstens)1770 48739 y Fr(178)221 b Fn(cm)435
b Fx(gro\377.)p 42912 49942 V 45277 49942 V 1062 49986
44260 45 v 47992 7929 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 54014 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(WS)1077 b(1.1)h(-)g(9)g(V)-179
b(erurteilungen)1075 b(Jugendlic)-60 b(he)1077 b(-)h(MC)g(-)h(Matura)
-2385 4515 y(2015/16)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 7823 a Fx(9.)p 0 TeXcolorgray
651 w(Jugendlic)-36 b(he)459 b(sind)f(laut)i(Jugendsc)-36
b(h)g(utzgesetz)457 b(1988)k(\(F)-108 b(assung)458 b(v)-36
b(om)460 b(23.3.2016\))i(P)-36 b(erso-)921 9815 y(nen,)361
b(die)g(das)h(14.)g(Leb)36 b(ensjahr,)361 b(ab)36 b(er)361
b(no)36 b(c)-36 b(h)361 b(nic)-36 b(h)g(t)360 b(das)i(18.)h(Leb)36
b(ensjahr)360 b(v)-36 b(ollendet)362 b(hab)36 b(en.)921
11806 y(Die)511 b(nac)-36 b(hstehende)509 b(Gra\034k)h(zeigt)h(f\374r)f
(den)f(Zeitraum)h(v)-36 b(on)511 b(1950)g(bis)g(2010)g(so)-36
b(w)g(ohl)511 b(die)921 13798 y(absolute)390 b(Anzahl)g(der)g(V)-108
b(erurteilungen)389 b(Jugendlic)-36 b(her)390 b(als)g(auc)-36
b(h)390 b(die)g(Anzahl)g(der)g(V)-108 b(erur-)921 15790
y(teilungen)433 b(Jugendlic)-36 b(her)433 b(b)36 b(ezogen)434
b(auf)g(100000)i(Jugendlic)-36 b(he.)5423 42092 y

 5423
42092 a 5423 42092 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 5423 42092 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -40.51985 -14.86554 ] concat

 pgfs


 9925 40440 a

 9925 40440
a 9925 40440 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray 0.4 TeXcolorgray
 25.35765 0.0 moveto

 25.35765 210.2876 lineto

 76.07297 0.0 moveto

 76.07297 210.2876 lineto

 126.7883 0.0 moveto

 126.7883 210.2876 lineto

 177.50362 0.0 moveto

 177.50362 210.2876 lineto

 228.21893 0.0 moveto

 228.21893 210.2876 lineto

 278.93425 0.0 moveto

 278.93425 210.2876 lineto

 329.64957 0.0 moveto

 329.64957 210.2876 lineto

 380.3649 0.0 moveto

 380.3649 210.2876 lineto

 pgfstr
 0.75
TeXcolorgray 0 TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray 0.4 TeXcolorgray
 0.0 0.0 moveto

 380.3649 0.0 lineto

 0.0 80.87984 moveto

 380.3649 80.87984 lineto

 0.0 161.75969 moveto

 380.3649 161.75969 lineto

 pgfstr

0.75 TeXcolorgray 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 25.35765 0.0 moveto

 25.35765 4.25282 lineto

 76.07297 0.0 moveto

 76.07297 4.25282 lineto

 126.7883 0.0 moveto

 126.7883 4.25282 lineto

 177.50362 0.0 moveto

 177.50362 4.25282 lineto

 228.21893 0.0 moveto

 228.21893 4.25282 lineto

 278.93425 0.0 moveto

 278.93425 4.25282 lineto

 329.64957 0.0 moveto

 329.64957 4.25282 lineto

 380.3649 0.0 moveto

 380.3649 4.25282 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 0.0 0.0 moveto

 4.25221 0.0 lineto

 0.0 80.87984 moveto

 4.25221 80.87984 lineto

 0.0 161.75969 moveto

 4.25221 161.75969 lineto

 380.3649 0.0 moveto

 376.11266 0.0 lineto

 380.3649 80.87984 moveto

 376.11266 80.87984 lineto

 380.3649 161.75969 moveto

 376.11266 161.75969 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 210.2876 lineto

 380.3649 210.2876 lineto

 380.3649 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 15.39488 -10.37465 ] concat

 pgfs



 0 setgray
 9925 40440 a Ft(1950)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 69.70789 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Ft('60)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 120.4232 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a
Ft('70)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 171.13853 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Ft('80)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 221.85385 -10.96393 ] concat

 pgfs



 0 setgray

9925 40440 a Ft('90)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 272.56917 -10.96393 ] concat

 pgfs



 0 setgray
 9925 40440 a Ft('00)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 319.6868 -10.37465 ] concat

 pgfs



 0 setgray
 9925 40440 a Ft(2010)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 380.3649 -4.10085 ] concat

 pgfs



 0 setgray
 9925 40440
a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -9.95395 -3.7643 ] concat

 pgfs



 0 setgray
 9925 40440 a Fx(0)9925 40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.76512 77.11554 ] concat

 pgfs



 0 setgray
 9925 40440 a Fx(5.000)9925
40440 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.61824 157.99539 ] concat

 pgfs



 0 setgray
 9925 40440 a Fx(10.000)9925 40440 y


 pgfr

 restore

 restore

 0.0 0.0 moveto

 380.3649 0.0 lineto

 380.3649 210.2876 lineto

 0.0 210.2876 lineto

 closepath

 clip

 newpath

 save

 0 setgray

 1.99255 pgfw

 10.14305 83.30623 moveto

 10.14305 83.30623 13.80727 83.05005 15.21458 82.98271 curveto

 16.62192 82.91539 18.8788 82.88828 20.28612 82.82095 curveto

 21.69345 82.75362 23.95033 82.4301 25.35765 82.49744 curveto

 26.76497 82.56476 29.02187 83.0818 30.42918 83.30623 curveto

 31.8365 83.53065 33.38972 82.65619 35.50072 84.11504 curveto

 37.61171 85.57387 43.53279 87.53635 45.64378 93.82062 curveto

 47.75478 100.10489 49.30798 114.37036 50.71532 129.40775 curveto

 52.12263 144.44513 54.37952 193.22206 55.78685 202.1996 curveto

 57.19417 211.17715 59.45105 194.33604 60.85838 194.11162 curveto

 62.2657 193.88719 64.52258 201.92863 65.9299 200.58202 curveto

 67.33723 199.23538 69.59412 189.56812 71.00143 184.40604 curveto

 72.40877 179.24397 74.66565 167.41716 76.07297 163.37727 curveto

 77.4803 159.3374 79.73718 157.75812 81.1445 155.28929 curveto

 82.55183 152.82048 84.80872 146.25702 86.21603 145.58371 curveto

 87.62335 144.9104 89.88025 150.21208 91.28757 150.43651 curveto

 92.69489 150.66093 94.95178 148.99681 96.3591 147.20131 curveto

 97.76642 145.4058 100.02332 139.29123 101.43063 137.49573 curveto

 102.83795 135.70023 105.09485 135.8316 106.50217 134.26054 curveto

 107.90948 132.68947 110.16637 126.62141 111.5737 126.17255 curveto

 112.98102 125.72368 114.53424 130.57648 116.64523 131.02534 curveto

 118.75623 131.47421 124.6773 129.18332 126.7883 129.40775 curveto

 128.89929 129.63217 130.4525 131.07187 131.85982 132.64294 curveto

 133.26715 134.214 135.52403 140.05762 136.93135 140.73093 curveto

 138.33868 141.40424 140.59557 137.49573 142.00288 137.49573 curveto

 143.41022 137.49573 145.6671 141.8531 147.07442 140.73093 curveto

 148.48175 139.60875 150.73863 129.40775 152.14595 129.40775 curveto

 153.55327 129.40775 155.81017 139.38431 157.21748 140.73093 curveto

 158.6248 142.07755 160.8817 138.8889 162.28902 139.11333 curveto

 163.69633 139.33775 165.95323 141.67522 167.36055 142.34853 curveto

 168.76787 143.02184 171.02477 143.51724 172.43208 143.96611 curveto

 173.8394 144.415 176.09628 144.9104 177.50362 145.58371 curveto

 178.91093 146.25702 181.16782 152.18547 182.57515 148.81891 curveto

 183.98247 145.45233 186.23935 125.80853 187.64668 121.31976 curveto

 189.054 116.831 191.31088 118.03804 192.71822 116.46696 curveto

 194.12553 114.8959 196.38242 112.24095 197.78973 109.99658 curveto

 199.19707 107.75221 201.45395 104.33089 202.86127 100.291 curveto

 204.2686 96.25111 206.52548 85.3686 207.9328 80.87984 curveto

 209.34013 76.39107 211.59702 71.08119 213.00433 67.93906 curveto

 214.41167 64.79694 215.96487 58.68234 218.07587 58.23347 curveto

 220.18686 57.7846 226.10794 63.69391 228.21893 64.70387 curveto

 230.32993 65.71382 231.88315 65.28824 233.29047 65.51266 curveto

 234.69778 65.73709 236.95467 66.43367 238.362 66.32147 curveto

 239.76932 66.20926 242.0262 64.70387 243.43353 64.70387 curveto

 244.84085 64.70387 247.09773 66.5459 248.50507 66.32147 curveto

 249.91238 66.09705 252.16927 63.98402 253.5766 63.08627 curveto

 254.98392 62.18852 257.2408 60.0755 258.64813 59.85107 curveto

 260.05545 59.62665 262.31233 61.0198 263.71965 61.46867 curveto

 265.12698 61.91754 266.68019 62.6374 268.79118 63.08627 curveto

 270.90218 63.53514 276.82326 64.36722 278.93425 64.70387 curveto

 281.04524 65.04051 282.59846 65.73709 284.00578 65.51266 curveto

 285.4131 65.28824 287.67 63.64737 289.07732 63.08627 curveto

 290.48463 62.52518 292.74153 61.91754 294.14885 61.46867 curveto

 295.55617 61.0198 297.81306 60.29994 299.22038 59.85107 curveto

 300.6277 59.4022 302.88458 58.34569 304.29192 58.23347 curveto

 305.69923 58.12128 307.95612 59.15448 309.36345 59.04227 curveto

 310.77077 58.93007 313.02765 58.43463 314.43498 57.42468 curveto

 315.8423 56.41472 318.09918 52.77306 319.50652 51.76309 curveto

 320.91383 50.75313 323.17072 50.45297 324.57803 50.1455 curveto

 325.98537 49.83803 329.64957 49.54698 329.64957 49.54698 curveto

 pgfstr

 restore

 save

 0.5 setgray

 1.99255 pgfw

 10.14305 23.13162 moveto

 10.14305 23.13162 13.80727 23.34294 15.21458 23.45514 curveto

 16.62192 23.56735 18.8788 23.82822 20.28612 23.94041 curveto

 21.69345 24.05263 23.95033 24.10684 25.35765 24.26395 curveto

 26.76497 24.42104 29.02187 25.02786 30.42918 25.07274 curveto

 31.8365 25.11761 33.38972 24.47525 35.50072 24.58746 curveto

 37.61171 24.69966 43.53279 25.47757 45.64378 25.88155 curveto

 47.75478 26.28552 49.30798 26.6014 50.71532 27.49915 curveto

 52.12263 28.3969 54.37952 31.22975 55.78685 32.35193 curveto

 57.19417 33.4741 59.45105 34.68938 60.85838 35.58713 curveto

 62.2657 36.48488 64.52258 38.32855 65.9299 38.82231 curveto

 67.33723 39.31609 69.59412 38.9214 71.00143 39.14583 curveto

 72.40877 39.37025 74.66565 40.48479 76.07297 40.43991 curveto

 77.4803 40.39503 79.73718 39.2712 81.1445 38.82231 curveto

 82.55183 38.37344 84.80872 37.6536 86.21603 37.20473 curveto

 87.62335 36.75586 89.88025 35.69933 91.28757 35.58713 curveto

 92.69489 35.47491 94.95178 36.62035 96.3591 36.39592 curveto

 97.76642 36.1715 100.02332 34.19395 101.43063 33.96953 curveto

 102.83795 33.7451 105.09485 34.89052 106.50217 34.77832 curveto

 107.90948 34.6661 110.16637 33.94626 111.5737 33.16072 curveto

 112.98102 32.37518 114.53424 30.1267 116.64523 29.11673 curveto

 118.75623 28.10678 124.6773 26.21819 126.7883 25.88155 curveto

 128.89929 25.54489 130.4525 26.46591 131.85982 26.69034 curveto

 133.26715 26.91476 135.52403 27.83578 136.93135 27.49915 curveto

 138.33868 27.16249 140.59557 24.37614 142.00288 24.26395 curveto

 143.41022 24.15173 145.6671 26.01703 147.07442 26.69034 curveto

 148.48175 27.36365 150.73863 29.00453 152.14595 29.11673 curveto

 153.55327 29.22894 155.81017 27.94801 157.21748 27.49915 curveto

 158.6248 27.05028 160.8817 25.99374 162.28902 25.88155 curveto

 163.69633 25.76933 165.95323 26.69034 167.36055 26.69034 curveto

 168.76787 26.69034 171.02477 26.21819 172.43208 25.88155 curveto

 173.8394 25.54489 176.09628 24.15173 177.50362 24.26395 curveto

 178.91093 24.37614 181.16782 26.69034 182.57515 26.69034 curveto

 183.98247 26.69034 186.23935 24.82504 187.64668 24.26395 curveto

 189.054 23.70285 191.31088 23.31966 192.71822 22.64635 curveto

 194.12553 21.97304 196.38242 19.7478 197.78973 19.41115 curveto

 199.19707 19.07451 201.45395 20.44437 202.86127 20.21994 curveto

 204.2686 19.99551 206.52548 18.35464 207.9328 17.79356 curveto

 209.34013 17.23247 210.18968 16.40039 213.00433 16.17596 curveto

 215.819 15.95154 225.40427 15.95154 228.21893 16.17596 curveto

 231.0336 16.40039 231.88315 17.45691 233.29047 17.79356 curveto

 234.69778 18.1302 236.95467 18.60236 238.362 18.60236 curveto

 239.76932 18.60236 242.0262 18.01799 243.43353 17.79356 curveto

 244.84085 17.56914 247.09773 17.02963 248.50507 16.98476 curveto

 249.91238 16.93988 252.16927 17.35782 253.5766 17.47003 curveto

 254.98392 17.58223 257.2408 17.9731 258.64813 17.79356 curveto

 260.05545 17.61403 262.31233 16.28816 263.71965 16.17596 curveto

 265.12698 16.06375 266.68019 16.98476 268.79118 16.98476 curveto

 270.90218 16.98476 276.82326 16.17596 278.93425 16.17596 curveto

 281.04524 16.17596 282.59846 16.76033 284.00578 16.98476 curveto

 285.4131 17.20918 287.67 17.56914 289.07732 17.79356 curveto

 290.48463 18.01799 292.74153 18.71455 294.14885 18.60236 curveto

 295.55617 18.49014 297.81306 17.3214 299.22038 16.98476 curveto

 300.6277 16.6481 302.88458 16.06375 304.29192 16.17596 curveto

 305.69923 16.28816 307.95612 17.68135 309.36345 17.79356 curveto

 310.77077 17.90576 313.02765 17.43362 314.43498 16.98476 curveto

 315.8423 16.53589 318.09918 15.00723 319.50652 14.55836 curveto

 320.91383 14.1095 323.17072 13.99194 324.57803 13.74956 curveto

 325.98537 13.50717 329.64957 12.81136 329.64957 12.81136 curveto

 pgfstr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 329.70056 45.78268 ] concat

 pgfs



 0 setgray
 0.3 TeXcolorgray
0.3 TeXcolorgray 9925 40772 3483 1501 v 0.3 TeXcolorgray
0 TeXcolorgray 1 1 1 TeXcolorrgb 10257 40440 a Fx(3)217
b(063)p 0 TeXcolorgray 0.3 TeXcolorgray 0 TeXcolorgray
9925 40440 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 329.54561 9.04706 ] concat

 pgfs



 0 setgray
 0.5 TeXcolorgray 0.5 TeXcolorgray 9925 40772
2616 1501 v 0.5 TeXcolorgray 0 TeXcolorgray 1 1 1 TeXcolorrgb
10257 40440 a Fx(792)p 0 TeXcolorgray 0.5 TeXcolorgray
0 TeXcolorgray 9925 40440 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 /pgfsc{0 setgray}def

 save

 /pgffc{1 setgray}def

 /pgfsc{0 setgray}def

 29.19315 192.98984 179.56686 176.68852 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 182.5557 184.9831 ] concat

 pgfs


 10036 39040 a

 10036 39040
a 10036 39040 a


 pgfo

 save

 /pgffc{0 setgray}def

 save

 /pgfsc{}def/pgffc{}def

 0 setgray

 1.99255 pgfw

 0.0 0.0 moveto

 0.0 0.0 6.14426 0.0 8.50412 0.0 curveto

 10.86398 0.0 17.00826 0.0 17.00826 0.0 curveto

 pgfstr

 restore

 restore

 pgfc


 21370 39040 a

 21370 39040 a 21370 39040
a


 pgfo

 save

 save

 save

 [1.0 0.0 0.0 1.0 -49.59245 -2.55362 ] concat

 pgfs



 /pgfsc{}def/pgffc{}def

 0 setgray
 21370 39040 a Ft(V)-92 b(erurteilungen)370 b(absolut)21370
39040 y


 pgfr

 restore

 restore

 restore

 pgfc


 10036 40440 a

 10036 40440 a 10036 40440 a


 pgfo

 save

 /pgffc{0 setgray}def

 save

 /pgfsc{}def/pgffc{}def

 0.5 setgray

 1.99255 pgfw

 0.0 0.0 moveto

 0.0 0.0 6.14426 0.0 8.50412 0.0 curveto

 10.86398 0.0 17.00826 0.0 17.00826 0.0 curveto

 pgfstr

 restore

 restore

 pgfc


 21370
40440 a

 21370 40440 a 21370 40440 a


 pgfo

 save

 save

 save

 [1.0 0.0 0.0 1.0 -82.01314 -2.55362 ] concat

 pgfs



 /pgfsc{}def/pgffc{}def

 0 setgray
 21370 40440 a Ft(V)-92
b(erurteilungen)370 b(je)f(100)186 b(000)371 b(Jugendlic)-31
b(he)21370 40440 y


 pgfr

 restore

 restore

 restore

 pgfc


 9925 40440 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 5423 42092 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 855 48281
a Fx(Wie)603 b(viele)h(Jugendlic)-36 b(he)603 b(insgesam)-36
b(t)603 b(gab)h(es)f(in)g(\326sterreic)-36 b(h)602 b(in)h(et)-36
b(w)g(a)603 b(im)g(Jahr)g(2010?)921 50273 y(Kreuze)433
b(die)h(zutre\033ende)e(Anzahl)h(an.)p 18483 50981 9419
45 v 18483 53707 45 2727 v 19191 52763 a(792)217 b(000)p
25492 53707 V 27857 53707 V 18483 53752 9419 45 v 18483
56478 45 2727 v 19191 55533 a(3)g(0630)g(000)p 25492
56478 V 27857 56478 V 18483 56522 9419 45 v 18483 59249
45 2727 v 19191 58304 a(3)g(863)g(000)p 25492 59249 V
27857 59249 V 18483 59293 9419 45 v 18483 62019 45 2727
v 19191 61074 a(387)g(000)p 25492 62019 V 1 0 0 TeXcolorrgb
26200 60988 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27857 62019 V 18483 62063 9419 45 v 18483
64790 45 2727 v 19191 63845 a Fx(258)g(000)p 25492 64790
V 27857 64790 V 18483 64834 9419 45 v 18483 67560 45
2727 v 19191 66615 a(2)g(580)g(000)p 25492 67560 V 27857
67560 V 18483 67604 9419 45 v 47992 7823 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 9815 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 71633
54804 45 v 0 TeXcolorgray 24746 81281 a Fx(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(WS)723 b(1.1)h(-)g(10)g(Sc)-60
b(h)g(ulstatistik)721 b(-)j(MC)h(-)f(Matura)f(2013/14)h(Haupt-)-2331
4622 y(termin)p 0 TeXcolorgray -1391 7929 a Fx(10.)p
0 TeXcolorgray 651 w(Das)553 b(nac)-36 b(hstehende)550
b(Diagramm)k(stellt)e(f\374r)g(das)g(Sc)-36 b(h)g(uljahr)552
b(2009/10)i(folgende)f(Daten)921 9921 y(dar:)p 0 TeXcolorgray
2468 13020 a Fm(\017)p 0 TeXcolorgray 650 w Fx(die)434
b(Anzahl)f(der)g(Sc)-36 b(h)g(\374ler/innen)439 b Fl(n)-42
b(ur)435 b Fx(aus)e(der)g(AHS-Un)-36 b(terstufe)p 0 TeXcolorgray
2468 15565 a Fm(\017)p 0 TeXcolorgray 650 w Fx(die)613
b(Gesam)-36 b(tanzahl)612 b(der)g(Sc)-36 b(h)g(\374ler/innen)611
b(der)h(1.-4.)j(Klasse)e(\(Hauptsc)-36 b(h)g(ule)612
b Fl(und)3734 17557 y Fx(AHS-Un)-36 b(terstufe\))921
43433 y
 currentpoint currentpoint translate 0.7091 0.7091 scale neg exch neg
exch translate
 921 43433 a 1355 43433 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 569.05487 a add def
/d 0.0 a add neg def /h 284.52742 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 43433 a 7654 35559
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 21 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 512.14938 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22636
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 213.39557 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 512.14938  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 512.14938  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 213.39557  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 213.39557
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 512.14938
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 213.39557  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 213.39557  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 512.14938  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 213.39557
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 512.14938
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4370 32694 a Fw(10)157 b(000)4370
29545 y(20)g(000)4370 26395 y(30)g(000)4370 23246 y(40)g(000)4370
20096 y(50)g(000)4370 16946 y(60)g(000)4370 13797 y(70)g(000)7654
35559 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 14.22636 8.5359 28.45274
8.5359 28.45274 0.0 14.22636 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 28.45274 25.60728 42.67911 25.60728 42.67911 0.0 28.45274 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 85.35823 0.0 85.35823 21.33955
71.13185 21.33955 71.13185 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 85.35823 61.17322 99.5846 61.17322 99.5846 0.0 85.35823 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 128.03734 58.3282 142.26372
58.3282 142.26372 0.0 128.03734 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 142.26372 177.82964 156.49008 177.82964 156.49008 0.0 142.26372
0.0  /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq {
0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 184.94283 45.52455 199.1692
45.52455 199.1692 0.0 184.94283 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 213.39557 176.40692 199.1692 176.40692 199.1692 0.0 213.39557 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 256.07469 18.4941 256.07469
0.0 241.84831 0.0 241.84831 18.4941  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 270.30106 0.0 270.30106 68.2864 256.07469 68.2864 256.07469 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 312.98018 39.83366 312.98018
0.0 298.7538 0.0 298.7538 39.83366  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 312.98018 125.1919 327.20654 125.1919 327.20654 0.0 312.98018 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 355.65929 19.91682 369.88567
19.91682 369.88567 0.0 355.65929 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 369.88567 86.78094 384.11203 86.78094 384.11203 0.0 369.88567 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 412.56477 12.80363 426.79115
12.80363 426.79115 0.0 412.56477 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 426.79115 36.98865 441.01752 36.98865 441.01752 0.0 426.79115 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 469.47026 92.4714 483.69664
92.4714 483.69664 0.0 469.47026 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  0.6 .setopacityalpha  fill  grestore gsave
0.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 483.69664 173.5619 497.923 173.5619 497.923 0.0 483.69664 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  0.6 .setopacityalpha  fill  grestore
gsave 0.2 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 263.18787 170.71646 277.41425
170.71646 277.41425 177.82964 263.18787 177.82964  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  0.6 .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.2 SLW 0  setgray  [ 277.41425 163.60327 277.41425
156.49008 263.18787 156.49008 263.18787 163.60327  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.62745 0.62745 0.62745  setrgbcolor
 0.6 .setopacityalpha  fill  grestore gsave 0.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 7654 35559 a
tx@Dict begin  { 284.52744 176.40692 } PutCoor PutBegin  end
 7654 35559 a 610
x Fq(AHS)313 b(Un)-26 b(terstufe)7654 35559 y
tx@Dict begin  PutEnd  end
 7654 35559
a 7654 35559 a
tx@Dict begin  { 284.52744 162.61774 } PutCoor PutBegin  end
 7654 35559 a 610 x Fq(Gesam)g(t)314 b(1.-4.)h(Klasse)
7654 35559 y
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { -2.84544 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121
39585 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39585 a Fq(Burgenland)12865 39585 y
 currentpoint grestore moveto
 12865
39585 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 62.59595 -4.26773 } PutCoor PutBegin  end
 7654 35559
a 8121 38534 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 38534 a Fq(K\344rn)-26 b(ten)11493
38534 y
 currentpoint grestore moveto
 11493 38534 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 103.28358 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 41041 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 41041 a Fq(Nieder\366sterreic)g
(h)14767 41041 y
 currentpoint grestore moveto
 14767 41041 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559
a 7654 35559 a
tx@Dict begin  { 160.18907 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 40562 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 40562 a
Fq(Ob)26 b(er\366sterreic)-26 b(h)14140 40562 y
 currentpoint grestore moveto
 14140
40562 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 233.31241 -4.26773 } PutCoor PutBegin  end
 7654 35559
a 8121 38674 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 38674 a Fq(Salzburg)11676 38674 y
 currentpoint grestore moveto

11676 38674 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 284.52744 -4.26773 } PutCoor PutBegin  end

7654 35559 a 8121 39376 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39376 a Fq(Steiermark)12592
39376 y
 currentpoint grestore moveto
 12592 39376 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 355.65929 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 37513 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 37513 a Fq(Tirol)10160
37513 y
 currentpoint grestore moveto
 10160 37513 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654
35559 a
tx@Dict begin  { 398.33841 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 39296 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate
 8121 39296 a Fq(V)-78
b(orarlb)26 b(erg)12487 39296 y
 currentpoint grestore moveto
 12487 39296 a 7654 35559
a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { 469.47026 -4.26773 } PutCoor PutBegin  end
 7654 35559 a 8121 37612 a
 gsave currentpoint currentpoint translate 50 neg rotate neg exch neg
exch translate

8121 37612 a Fq(Wien)10290 37612 y
 currentpoint grestore moveto
 10290 37612 a 7654
35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 7654 35559 a
tx@Dict begin  { -42.67911 142.26372 } PutCoor PutBegin  end
 7654 35559 a 8264 45700
a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 8264 45700 a Fq(Anzahl)314 b(der)f(Sc)-26 b(h)g(\374lerInnen)18405
45700 y
 currentpoint grestore moveto
 18405 45700 a 7654 35559 a
tx@Dict begin  PutEnd  end
 7654 35559 a 64347
43433 a
currentpoint initclip moveto
 64347 43433 a 921 43433 a
 currentpoint currentpoint translate 1 0.7091 div 1 0.7091 div scale
neg exch neg exch translate
 921 43433 a 812 45978
a Fk(Quel)73 b(le:)341 b(http://www.bmukk.gv.at/schulstatistik)921
48524 y Fx(Kreuze)449 b(jene)g(b)36 b(eiden)449 b(A)-36
b(ussagen)449 b(an,)h(die)f(aus)g(dem)g(Diagramm)h(gefolgert)h(w)-36
b(erden)449 b(k)-36 b(\366n-)921 50515 y(nen!)p 1062
53216 44260 45 v 1062 56279 45 3064 v 1770 55076 a(In)434
b(K\344rn)-36 b(ten)433 b(ist)g(der)h(An)-36 b(teil)433
b(an)h(AHS-Sc)-36 b(h)g(\374lerInnen)430 b(gr\366\377er)435
b(als)f(in)f(Tirol.)p 42912 56279 V 1 0 0 TeXcolorrgb
43621 55079 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 56279 V 1062 56323 44260 45 v 1062
59386 45 3064 v 1770 58183 a Fx(In)h(Wien)g(gibt)f(es)h(die)g(meisten)f
(Sc)-36 b(h)g(\374lerInnen)431 b(in)j(den)f(1.-4.)h(Klassen.)p
42912 59386 V 45277 59386 V 1062 59431 44260 45 v 1062
64227 45 4797 v 1770 61291 a(Der)429 b(An)-36 b(teil)429
b(an)g(AHS-Sc)-36 b(h)g(\374lerInnen)425 b(ist)k(in)g(Wien)g(h\366her)f
(als)h(in)g(allen)g(anderen)1770 63282 y(Bundesl\344ndern.)p
42912 64227 V 1 0 0 TeXcolorrgb 43621 62161 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
64227 V 1062 64272 44260 45 v 1062 69327 45 5056 v 1770
66132 a Fx(Es)424 b(gehen)f(in)h(Salzburg)f(mehr)g(Sc)-36
b(h)g(\374lerInnen)422 b(in)i(die)f(AHS)g(als)i(im)f(Burgenland)1770
68123 y(in)434 b(die)g(1.-4.)g(Klasse)g(insgesam)-36
b(t.)p 42912 69327 V 45277 69327 V 1062 69371 44260 45
v 1062 74168 45 4797 v 1770 71231 a(In)427 b(Nieder\366sterreic)-36
b(h)426 b(gehen)f(ca.)i(3-mal)g(so)g(viele)g(Sc)-36 b(h)g(\374lerInnen)
425 b(in)h(die)g(Haupt-)1770 73223 y(sc)-36 b(h)g(ule)433
b(wie)i(in)e(die)h(AHS.)p 42912 74168 V 45277 74168 V
1062 74212 44260 45 v 47992 7929 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 9921 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24421 81281
a Fx(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fx(11)p 0
TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)919 b(1.1)g(-)h(11)g(Computer-)f(und)
f(Videospiele)f(-)j(MC)g(-)g(Matura)-2385 4515 y(2013/14)718
b(1.)f(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray -1391
7823 a Fx(11.)p 0 TeXcolorgray 651 w(Computer-)430 b(und)f(Videospiele)
j(m)-36 b(\374ssen)429 b(v)-36 b(or)432 b(ihrer)e(Markteinf\374hrung)g
(ein)h(Einstufungs-)887 9815 y(v)-36 b(erfahren)595 b(durc)-36
b(hlaufen,)594 b(b)36 b(ei)595 b(dem)g(festgelegt)h(wird,)f(w)-36
b(elc)g(hes)595 b(Mindestalter)f(f\374r)h(den)921 11806
y(Erw)-36 b(erb)577 b(des)g(Spiels)h(erreic)-36 b(h)g(t)577
b(sein)g(m)-36 b(uss.)579 b(Im)f(Jahr)f(2009)i(wurden)e(3)h(100)g
(Spiele)g(die-)921 13798 y(ser)484 b(Einstufung)f(un)-36
b(terzogen.)484 b(Im)g(Jahr)g(2008)h(w)-36 b(aren)484
b(es)g(um)g(114)h(Spiele)f(w)-36 b(eniger.)485 b(Die)921
15790 y(nac)-36 b(hstehende)432 b(Graphik)h(stellt)h(die)g(Ergebnisse)f
(der)g(A)-36 b(usw)g(ertungen)432 b(dar.)p 0 TeXcolorgray
0 TeXcolorgray 5828 19775 a Fl(V)-125 b(erteilung)501
b(der)d(F)-125 b(reigab)42 b(en)500 b(f\374r)e(die)h(Jahre)g(2008)g
(und)f(2009)7667 42980 y
 currentpoint currentpoint translate 0.69809 0.69809 scale neg exch
neg exch translate
 7667 42980 a 8101 42980 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 403.49094 a add def
/d 0.0 a add neg def /h 288.3602 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8101
42980 a 12624 33496 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 362.63268 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 202.68315 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 14.22636 138.28857 28.16837
138.28857 28.16837 0.0 14.22636 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 42.67911 0.0 42.67911 149.38579 29.02191 149.38579 29.02191 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 85.07385 0.0 85.07385 41.25893
71.13185 41.25893 71.13185 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 85.9274 36.13712 99.5846 36.13712 99.5846 0.0 85.9274 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 128.03734 55.48615 141.97934
55.48615 141.97934 0.0 128.03734 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 142.83289 49.79526 156.49008 49.79526 156.49008 0.0 142.83289 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 184.94283 30.73079 198.88483
30.73079 198.88483 0.0 184.94283 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 199.73837 29.59259 213.39557 29.59259 213.39557 0.0 199.73837 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 241.84831 14.7963 255.79031
14.7963 255.79031 0.0 241.84831 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 256.64386 16.50357 270.30106 16.50357 270.30106 0.0 256.64386 0.0
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 298.7538 3.9836 312.6958
3.9836 312.6958 0.0 298.7538 0.0  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0  setgray  1.0 .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 313.54935 3.13 327.20654 3.13 327.20654 0.0 313.54935 0.0  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 128.03734 170.72662 128.03734
163.613 119.50143 163.613 119.50143 170.72662  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 128.03734 156.4994 128.03734 149.38579 119.50143 149.38579 119.50143
156.4994  /Lineto /lineto load def 0  setlinejoin false NArray n 2
eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 362.63268  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 362.63268  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 202.68315  def /dT 3729358 abs 65536 div viceversa
{ neg } if def /DT 2. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 202.68315
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 362.63268
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 202.68315  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 202.68315  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 362.63268  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 202.68315
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 362.63268
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
10437 33804 a Fw(0)158 b(\045)9967 30654 y(10)g(\045)9967
27504 y(20)g(\045)9967 24354 y(30)g(\045)9967 21204 y(40)g(\045)9967
18055 y(50)g(\045)9967 14905 y(60)g(\045)12624 33496
y
tx@Dict begin  { 135.2786 170.77985 } PutCoor PutBegin  end
 12624 33496 a 571 x Fq(2008)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496
a 12624 33496 a
tx@Dict begin  { 134.65385 156.60056 } PutCoor PutBegin  end
 12624 33496 a 571 x Fq(2009)12624 33496
y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { -22.76227 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 42775
a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 42775 a Fq(ohne)314 b(Altersb)26 b(esc)-26 b(hr\344nkung)23513
42775 y
 currentpoint grestore moveto
 23513 42775 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624
33496 a
tx@Dict begin  { 56.90549 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 38023 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38023 a Fq(ab)314
b(6)g(Jahren)18027 38023 y
 currentpoint grestore moveto
 18027 38023 a 12624 33496
a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 113.81097 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 38430
a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38430 a Fq(ab)g(12)g(Jahren)18497 38430 y
 currentpoint grestore moveto
 18497
38430 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 170.71646 -1.13815 } PutCoor PutBegin  end
 12624
33496 a 13152 38430 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 38430 a Fq(ab)g(16)g(Jahren)18497
38430 y
 currentpoint grestore moveto
 18497 38430 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624
33496 a
tx@Dict begin  { 213.39557 -1.13815 } PutCoor PutBegin  end
 12624 33496 a 13152 41237 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 41237 a Fq(k)-26
b(eine)314 b(Jugendfreigab)26 b(e)21738 41237 y
 currentpoint grestore moveto
 21738
41237 a 12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 270.30106 -1.13815 } PutCoor PutBegin  end
 12624
33496 a 13152 41270 a
 gsave currentpoint currentpoint translate 60 neg rotate neg exch neg
exch translate
 13152 41270 a Fq(k)-26 b(eine)314
b(Kennzeic)-26 b(hn)g(ung)21776 41270 y
 currentpoint grestore moveto
 21776 41270 a
12624 33496 a
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 9.10507 145.11763 } PutCoor PutBegin  end
 12624 33496
a 499 x Fj(48)p Fi(;)p Fj(6\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496
a 12624 33496 a
tx@Dict begin  { 28.45274 156.21483 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(52)p Fi(;)p Fj(5\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 66.01056 48.08797 } PutCoor PutBegin  end
 12624 33496 a 499
x Fj(14)p Fi(;)p Fj(5\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 85.35823 42.96622 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(12)p Fi(;)p Fj(7\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 122.91605 62.31519 } PutCoor PutBegin  end
 12624 33496 a 499
x Fj(19)p Fi(;)p Fj(5\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 142.26372 56.6243 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(17)p Fi(;)p Fj(5\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 179.82153 37.55984 } PutCoor PutBegin  end
 12624 33496 a 499
x Fj(10)p Fi(;)p Fj(8\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 199.1692 36.42168 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(10)p Fi(;)p Fj(4\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 240.42558 21.62538 } PutCoor PutBegin  end
 12624 33496 a 499
x Fj(5)p Fi(;)p Fj(2\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 256.07469 23.33263 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(5)p Fi(;)p Fj(8\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 12624 33496 a
tx@Dict begin  { 298.7538 10.2436 } PutCoor PutBegin  end
 12624 33496 a 499
x Fj(1)p Fi(;)p Fj(4\045)12624 33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a
12624 33496 a
tx@Dict begin  { 312.98018 9.38997 } PutCoor PutBegin  end
 12624 33496 a 499 x Fj(1)p Fi(;)p Fj(1\045)12624
33496 y
tx@Dict begin  PutEnd  end
 12624 33496 a 52766 42980 a
currentpoint initclip moveto
 52766 42980 a 7667
42980 a
 currentpoint currentpoint translate 1 0.69809 div 1 0.69809 div scale
neg exch neg exch translate
 7667 42980 a 5068 45526 a Fq(Datenquelle:)315
b(h)-26 b(ttp://www.usk.de/pruefv)g
(erfahren/statistik/jahresbilanz-2009/)316 b([21.05.2014])921
49510 y Fx(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an!)p 1062 52469 44260 45 v 1062 57524
45 5056 v 1770 54329 a(Die)h(Anzahl)e(der)g(im)h(Jahr)g(2009)h(ohne)e
(Altersb)36 b(esc)-36 b(hr\344nkung)432 b(freigegeb)36
b(enen)1770 56321 y(Spiele)434 b(hat)f(sic)-36 b(h)434
b(im)g(V)-108 b(ergleic)-36 b(h)433 b(zum)g(Jahr)h(2008)h(um)e(et)-36
b(w)g(a)434 b(10)217 b(\045)434 b(v)-36 b(erringert.)p
42912 57524 V 45277 57524 V 1062 57568 44260 45 v 1062
62623 45 5056 v 1770 59428 a(Die)342 b(Anzahl)e(der)g(in)g(der)g
(Kategorie)i(\022freigegeb)36 b(en)342 b(ab)e(16)h(Jahren\020)f
(eingestuften)1770 61420 y(Spiele)434 b(ist)g(in)f(den)g(b)36
b(eiden)433 b(Jahren)g(2008)i(und)d(2009)j(nahezu)e(gleic)-36
b(h.)p 42912 62623 V 1 0 0 TeXcolorrgb 43621 60428 a
Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 62623 V 1062 62668 44260 45 v 1062 67723 45 5056
v 1770 64528 a Fx(Im)350 b(Jahr)g(2008)h(wurde)e(ann\344hernd)g(jedes)h
(dritte)f(Spiel)h(f\374r)f(Kinder)h(ab)f(6)h(Jahren)1770
66519 y(freigegeb)36 b(en.)p 42912 67723 V 45277 67723
V 1062 67767 44260 45 v 1062 72822 45 5056 v 1770 69627
a(Im)422 b(Jahr)g(2009)h(wurden)e(w)-36 b(eniger)422
b(als)g(500)h(Spiele)e(der)g(Kategorie)i(\022freigegeb)36
b(en)1770 71619 y(ab)434 b(12)g(Jahren\020)g(zugeordnet.)p
42912 72822 V 45277 72822 V 1062 72866 44260 45 v 1062
75929 45 3064 v 1770 74726 a(Im)g(Jahr)g(2008)h(erhielt)e(et)-36
b(w)g(a)434 b(jedes)g(zw)-36 b(anzigste)434 b(Spiel)g(k)-36
b(eine)434 b(Jugendfreigab)36 b(e.)p 42912 75929 V 1 0 0
TeXcolorrgb 43621 74730 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 75929 V 1062 75974 44260
45 v 47992 7823 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905
9815 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fx(12)p 0
TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fx(13)p 0
TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1794 a Fy(WS)759 b(1.1)h(-)g(12)g(W)-179
b(anderungsbilanz)756 b(f\374r)j(\326sterreic)-60 b(h)759
b(-)i(MC)f(-)g(Ma-)-2331 4817 y(tura)717 b(2016/17)g(-)h(Haupttermin)p
0 TeXcolorgray -1391 8124 a Fx(12.)47613 b Fu(___/1)p
0 TeXcolorgray -50901 w Fx(Die)546 b(Di\033erenz)e(aus)h(der)f(Anzahl)h
(der)f(in)h(einem)g(b)36 b(estimm)-36 b(ten)544 b(Zeitraum)h(in)f(ein)h
(Land)921 10116 y(zugew)-36 b(anderten)579 b(P)-36 b(ersonen)580
b(und)e(der)i(Anzahl)g(der)g(in)f(diesem)i(Zeitraum)e(aus)h(diesem)921
12108 y(Land)433 b(abgew)-36 b(anderten)433 b(P)-36 b(ersonen)433
b(b)36 b(ezeic)-36 b(hnet)433 b(man)g(als)h(W)-108 b(anderungsbilanz.)
921 14563 y(In)485 b(der)f(nac)-36 b(hstehenden)483 b(Gra\034k)i(ist)g
(die)g(j\344hrlic)-36 b(he)485 b(W)-108 b(anderungsbilanz)484
b(f\374r)h(\326sterreic)-36 b(h)921 16555 y(in)433 b(den)g(Jahren)g(v)
-36 b(on)434 b(1961)h(bis)f(2012)h(dargestellt.)p 0 TeXcolorgray
3147 40303 a

 3147 40303 a 3147 40303 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 3147 40303 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -36.72902 -16.22862 ] concat

 pgfs


 7228
38500 a

 7228 38500 a 7228 38500 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 [ 2.98883 2.98883 ] 0.0 setdash

 8.14871 0.0 moveto

 8.14871 179.10362 lineto

 16.29742 0.0 moveto

 16.29742 179.10362 lineto

 24.44614 0.0 moveto

 24.44614 179.10362 lineto

 32.59486 0.0 moveto

 32.59486 179.10362 lineto

 40.74358 0.0 moveto

 40.74358 179.10362 lineto

 48.89229 0.0 moveto

 48.89229 179.10362 lineto

 57.041 0.0 moveto

 57.041 179.10362 lineto

 65.18973 0.0 moveto

 65.18973 179.10362 lineto

 73.33844 0.0 moveto

 73.33844 179.10362 lineto

 81.48715 0.0 moveto

 81.48715 179.10362 lineto

 89.63588 0.0 moveto

 89.63588 179.10362 lineto

 97.78459 0.0 moveto

 97.78459 179.10362 lineto

 105.9333 0.0 moveto

 105.9333 179.10362 lineto

 114.08202 0.0 moveto

 114.08202 179.10362 lineto

 122.23074 0.0 moveto

 122.23074 179.10362 lineto

 130.37946 0.0 moveto

 130.37946 179.10362 lineto

 138.52817 0.0 moveto

 138.52817 179.10362 lineto

 146.6769 0.0 moveto

 146.6769 179.10362 lineto

 154.8256 0.0 moveto

 154.8256 179.10362 lineto

 162.97432 0.0 moveto

 162.97432 179.10362 lineto

 171.12303 0.0 moveto

 171.12303 179.10362 lineto

 179.27176 0.0 moveto

 179.27176 179.10362 lineto

 187.42047 0.0 moveto

 187.42047 179.10362 lineto

 195.56918 0.0 moveto

 195.56918 179.10362 lineto

 203.71791 0.0 moveto

 203.71791 179.10362 lineto

 211.86662 0.0 moveto

 211.86662 179.10362 lineto

 220.01534 0.0 moveto

 220.01534 179.10362 lineto

 228.16405 0.0 moveto

 228.16405 179.10362 lineto

 236.31277 0.0 moveto

 236.31277 179.10362 lineto

 244.46149 0.0 moveto

 244.46149 179.10362 lineto

 252.6102 0.0 moveto

 252.6102 179.10362 lineto

 260.75893 0.0 moveto

 260.75893 179.10362 lineto

 268.90764 0.0 moveto

 268.90764 179.10362 lineto

 277.05635 0.0 moveto

 277.05635 179.10362 lineto

 285.20506 0.0 moveto

 285.20506 179.10362 lineto

 293.35379 0.0 moveto

 293.35379 179.10362 lineto

 301.5025 0.0 moveto

 301.5025 179.10362 lineto

 309.65121 0.0 moveto

 309.65121 179.10362 lineto

 317.79994 0.0 moveto

 317.79994 179.10362 lineto

 325.94865 0.0 moveto

 325.94865 179.10362 lineto

 334.09737 0.0 moveto

 334.09737 179.10362 lineto

 342.24608 0.0 moveto

 342.24608 179.10362 lineto

 350.3948 0.0 moveto

 350.3948 179.10362 lineto

 358.54352 0.0 moveto

 358.54352 179.10362 lineto

 366.69223 0.0 moveto

 366.69223 179.10362 lineto

 374.84096 0.0 moveto

 374.84096 179.10362 lineto

 382.98967 0.0 moveto

 382.98967 179.10362 lineto

 391.13838 0.0 moveto

 391.13838 179.10362 lineto

 399.2871 0.0 moveto

 399.2871 179.10362 lineto

 407.43582 0.0 moveto

 407.43582 179.10362 lineto

 415.58453 0.0 moveto

 415.58453 179.10362 lineto

 423.73325 0.0 moveto

 423.73325 179.10362 lineto

 pgfstr
 0
TeXcolorgray
 restore

 restore

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0 setgray

 0.0 14.9253 moveto

 423.73325 14.9253 lineto

 0.0 44.7759 moveto

 423.73325 44.7759 lineto

 0.0 74.62651 moveto

 423.73325 74.62651 lineto

 0.0 104.47711 moveto

 423.73325 104.47711 lineto

 0.0 134.32771 moveto

 423.73325 134.32771 lineto

 0.0 164.17831 moveto

 423.73325 164.17831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0 setgray

 0.0 0.0 moveto

 423.73325 0.0 lineto

 0.0 29.8506 moveto

 423.73325 29.8506 lineto

 0.0 59.7012 moveto

 423.73325 59.7012 lineto

 0.0 89.5518 moveto

 423.73325 89.5518 lineto

 0.0 119.4024 moveto

 423.73325 119.4024 lineto

 0.0 149.25302 moveto

 423.73325 149.25302 lineto

 0.0 179.10362 moveto

 423.73325 179.10362 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 8.14871 -2.8349 moveto

 8.14871 0.0 lineto

 16.29742 -2.8349 moveto

 16.29742 0.0 lineto

 24.44614 -2.8349 moveto

 24.44614 0.0 lineto

 32.59486 -2.8349 moveto

 32.59486 0.0 lineto

 40.74358 -2.8349 moveto

 40.74358 0.0 lineto

 48.89229 -2.8349 moveto

 48.89229 0.0 lineto

 57.041 -2.8349 moveto

 57.041 0.0 lineto

 65.18973 -2.8349 moveto

 65.18973 0.0 lineto

 73.33844 -2.8349 moveto

 73.33844 0.0 lineto

 81.48715 -2.8349 moveto

 81.48715 0.0 lineto

 89.63588 -2.8349 moveto

 89.63588 0.0 lineto

 97.78459 -2.8349 moveto

 97.78459 0.0 lineto

 105.9333 -2.8349 moveto

 105.9333 0.0 lineto

 114.08202 -2.8349 moveto

 114.08202 0.0 lineto

 122.23074 -2.8349 moveto

 122.23074 0.0 lineto

 130.37946 -2.8349 moveto

 130.37946 0.0 lineto

 138.52817 -2.8349 moveto

 138.52817 0.0 lineto

 146.6769 -2.8349 moveto

 146.6769 0.0 lineto

 154.8256 -2.8349 moveto

 154.8256 0.0 lineto

 162.97432 -2.8349 moveto

 162.97432 0.0 lineto

 171.12303 -2.8349 moveto

 171.12303 0.0 lineto

 179.27176 -2.8349 moveto

 179.27176 0.0 lineto

 187.42047 -2.8349 moveto

 187.42047 0.0 lineto

 195.56918 -2.8349 moveto

 195.56918 0.0 lineto

 203.71791 -2.8349 moveto

 203.71791 0.0 lineto

 211.86662 -2.8349 moveto

 211.86662 0.0 lineto

 220.01534 -2.8349 moveto

 220.01534 0.0 lineto

 228.16405 -2.8349 moveto

 228.16405 0.0 lineto

 236.31277 -2.8349 moveto

 236.31277 0.0 lineto

 244.46149 -2.8349 moveto

 244.46149 0.0 lineto

 252.6102 -2.8349 moveto

 252.6102 0.0 lineto

 260.75893 -2.8349 moveto

 260.75893 0.0 lineto

 268.90764 -2.8349 moveto

 268.90764 0.0 lineto

 277.05635 -2.8349 moveto

 277.05635 0.0 lineto

 285.20506 -2.8349 moveto

 285.20506 0.0 lineto

 293.35379 -2.8349 moveto

 293.35379 0.0 lineto

 301.5025 -2.8349 moveto

 301.5025 0.0 lineto

 309.65121 -2.8349 moveto

 309.65121 0.0 lineto

 317.79994 -2.8349 moveto

 317.79994 0.0 lineto

 325.94865 -2.8349 moveto

 325.94865 0.0 lineto

 334.09737 -2.8349 moveto

 334.09737 0.0 lineto

 342.24608 -2.8349 moveto

 342.24608 0.0 lineto

 350.3948 -2.8349 moveto

 350.3948 0.0 lineto

 358.54352 -2.8349 moveto

 358.54352 0.0 lineto

 366.69223 -2.8349 moveto

 366.69223 0.0 lineto

 374.84096 -2.8349 moveto

 374.84096 0.0 lineto

 382.98967 -2.8349 moveto

 382.98967 0.0 lineto

 391.13838 -2.8349 moveto

 391.13838 0.0 lineto

 399.2871 -2.8349 moveto

 399.2871 0.0 lineto

 407.43582 -2.8349 moveto

 407.43582 0.0 lineto

 415.58453 -2.8349 moveto

 415.58453 0.0 lineto

 423.73325 -2.8349 moveto

 423.73325 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 -4.25194 moveto

 0.0 0.0 lineto

 40.74358 -4.25194 moveto

 40.74358 0.0 lineto

 81.48715 -4.25194 moveto

 81.48715 0.0 lineto

 122.23074 -4.25194 moveto

 122.23074 0.0 lineto

 162.97432 -4.25194 moveto

 162.97432 0.0 lineto

 203.71791 -4.25194 moveto

 203.71791 0.0 lineto

 244.46149 -4.25194 moveto

 244.46149 0.0 lineto

 285.20506 -4.25194 moveto

 285.20506 0.0 lineto

 325.94865 -4.25194 moveto

 325.94865 0.0 lineto

 366.69223 -4.25194 moveto

 366.69223 0.0 lineto

 407.43582 -4.25194 moveto

 407.43582 0.0 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 14.9253 moveto

 2.83487 14.9253 lineto

 0.0 44.7759 moveto

 2.83487 44.7759 lineto

 0.0 74.62651 moveto

 2.83487 74.62651 lineto

 0.0 104.47711 moveto

 2.83487 104.47711 lineto

 0.0 134.32771 moveto

 2.83487 134.32771 lineto

 0.0 164.17831 moveto

 2.83487 164.17831 lineto

 423.73325 14.9253 moveto

 420.89836 14.9253 lineto

 423.73325 44.7759 moveto

 420.89836 44.7759 lineto

 423.73325 74.62651 moveto

 420.89836 74.62651 lineto

 423.73325 104.47711 moveto

 420.89836 104.47711 lineto

 423.73325 134.32771 moveto

 420.89836 134.32771 lineto

 423.73325 164.17831 moveto

 420.89836 164.17831 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0.0 0.0 moveto

 4.25189 0.0 lineto

 0.0 29.8506 moveto

 4.25189 29.8506 lineto

 0.0 59.7012 moveto

 4.25189 59.7012 lineto

 0.0 89.5518 moveto

 4.25189 89.5518 lineto

 0.0 119.4024 moveto

 4.25189 119.4024 lineto

 0.0 149.25302 moveto

 4.25189 149.25302 lineto

 0.0 179.10362 moveto

 4.25189 179.10362 lineto

 423.73325 0.0 moveto

 419.48134 0.0 lineto

 423.73325 29.8506 moveto

 419.48134 29.8506 lineto

 423.73325 59.7012 moveto

 419.48134 59.7012 lineto

 423.73325 89.5518 moveto

 419.48134 89.5518 lineto

 423.73325 119.4024 moveto

 419.48134 119.4024 lineto

 423.73325 149.25302 moveto

 419.48134 149.25302 lineto

 423.73325 179.10362 moveto

 419.48134 179.10362 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 179.10362 lineto

 423.73325 179.10362 lineto

 423.73325 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -4.48325 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1961)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 36.26033 -12.90805 ] concat

 pgfs



 0 setgray
 7228
38500 a Fq(1966)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 77.0039 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1971)7228
38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 117.7475 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1976)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 158.49107 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500
a Fq(1981)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 199.23466 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1986)7228 38500
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 239.97824 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1991)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 280.72182 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(1996)7228
38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 321.46541 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a Fq(2001)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 362.20898 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500
a Fq(2006)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 411.42093 -7.77176 ] concat

 pgfs



 0 setgray
 7228 38500 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -33.40845 -3.13689 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(-40)186
b(000)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -33.40845 26.7137 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(-20)g(000)7228 38500
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -8.50119 56.5643 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(0)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 86.4149 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(20)g(000)7228
38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 116.26552 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(40)g(000)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 146.11612 ] concat

 pgfs



 0 setgray
 7228 38500
a Ft(60)g(000)7228 38500 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.08755 175.96672 ] concat

 pgfs



 0 setgray
 7228 38500 a Ft(80)g(000)7228
38500 y


 pgfr

 restore

 restore

 save

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 415.58453 -4.25194 moveto

 415.58453 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 411.10129 -12.90805 ] concat

 pgfs



 0 setgray
 7228 38500 a
Fq(2012)7228 38500 y


 pgfr

 restore

 restore

 restore

 0.0 0.0 moveto

 423.73325 0.0 lineto

 423.73325 179.10362 lineto

 0.0 179.10362 lineto

 closepath

 clip

 newpath

 save
 0 0 1 TeXcolorrgb
 /pgffc{0.7 0.7 1 setrgbcolor}def

 /pgfsc{}def/pgffc{}def
 0.4 TeXcolorgray
 -2.98505 6.97394 0.58739 59.7012 pgfe

 2.23878 6.97394 8.7361 59.7012 pgfe

 7.46265 6.97394 16.88481 59.7012 pgfe

 5.97011 6.97394 25.03352 59.7012 pgfe

 15.07455 6.97394 33.18225 59.7012 pgfe

 28.35806 6.97394 41.33096 59.7012 pgfe

 31.34312 6.97394 49.47968 59.7012 pgfe

 -8.95517 6.97394 57.6284 59.7012 pgfe

 7.46265 6.97394 65.77711 59.7012 pgfe

 14.9253 6.97394 73.92583 59.7012 pgfe

 47.76096 6.97394 82.07454 59.7012 pgfe

 52.23856 6.97394 90.22327 59.7012 pgfe

 50.74602 6.97394 98.37198 59.7012 pgfe

 -26.86554 6.97394 106.52069 59.7012 pgfe

 -35.82072 6.97394 114.66942 59.7012 pgfe

 11.94023 6.97394 122.81813 59.7012 pgfe

 17.91035 6.97394 130.96684 59.7012 pgfe

 -13.43277 6.97394 139.11555 59.7012 pgfe

 -1.49252 6.97394 147.26428 59.7012 pgfe

 14.9253 6.97394 155.413 59.7012 pgfe

 44.02963 6.97394 163.5617 59.7012 pgfe

 -34.32819 6.97394 171.71043 59.7012 pgfe

 -2.23878 6.97394 179.85915 59.7012 pgfe

 4.47758 6.97394 188.00786 59.7012 pgfe

 7.46265 6.97394 196.15657 59.7012 pgfe

 8.20891 6.97394 204.3053 59.7012 pgfe

 2.98505 6.97394 212.45401 59.7012 pgfe

 19.4029 6.97394 220.60272 59.7012 pgfe

 67.16385 6.97394 228.75145 59.7012 pgfe

 88.05928 6.97394 236.90016 59.7012 pgfe

 114.92482 6.97394 245.04887 59.7012 pgfe

 107.46217 6.97394 253.19759 59.7012 pgfe

 49.2535 6.97394 261.34631 59.7012 pgfe

 4.47758 6.97394 269.49503 59.7012 pgfe

 2.98505 6.97394 277.64374 59.7012 pgfe

 5.97011 6.97394 285.79247 59.7012 pgfe

 1.49252 6.97394 293.94118 59.7012 pgfe

 11.94023 6.97394 302.08989 59.7012 pgfe

 29.8506 6.97394 310.2386 59.7012 pgfe

 25.373 6.97394 318.38733 59.7012 pgfe

 47.76096 6.97394 326.53604 59.7012 pgfe

 48.50723 6.97394 334.68475 59.7012 pgfe

 59.7012 6.97394 342.83348 59.7012 pgfe

 76.11903 6.97394 350.9822 59.7012 pgfe

 67.16385 6.97394 359.1309 59.7012 pgfe

 35.82072 6.97394 367.27962 59.7012 pgfe

 37.31325 6.97394 375.42834 59.7012 pgfe

 35.82072 6.97394 383.57706 59.7012 pgfe

 25.373 6.97394 391.72577 59.7012 pgfe

 31.34312 6.97394 399.8745 59.7012 pgfe

 45.52217 6.97394 408.02321 59.7012 pgfe

 65.67133 6.97394 416.17192 59.7012 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

0 0 1 TeXcolorrgb 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 2.98505 lineto

 8.14871 2.98505 lineto

 8.14871 0.0 lineto

 closepath

 8.14871 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 40.74358 0.0 moveto

 40.74358 0.0 moveto

 40.74358 2.98505 lineto

 48.89229 2.98505 lineto

 48.89229 0.0 lineto

 closepath

 48.89229 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 81.48715 0.0 moveto

 81.48715 0.0 moveto

 81.48715 2.98505 lineto

 89.63588 2.98505 lineto

 89.63588 0.0 lineto

 closepath

 89.63588 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 122.23074 0.0 moveto

 122.23074 0.0 moveto

 122.23074 2.98505 lineto

 130.37946 2.98505 lineto

 130.37946 0.0 lineto

 closepath

 130.37946 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 162.97432 0.0 moveto

 162.97432 0.0 moveto

 162.97432 2.98505 lineto

 171.12303 2.98505 lineto

 171.12303 0.0 lineto

 closepath

 171.12303 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 203.71791 0.0 moveto

 203.71791 0.0 moveto

 203.71791 2.98505 lineto

 211.86662 2.98505 lineto

 211.86662 0.0 lineto

 closepath

 211.86662 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 244.46149 0.0 moveto

 244.46149 0.0 moveto

 244.46149 2.98505 lineto

 252.6102 2.98505 lineto

 252.6102 0.0 lineto

 closepath

 252.6102 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 285.20506 0.0 moveto

 285.20506 0.0 moveto

 285.20506 2.98505 lineto

 293.35379 2.98505 lineto

 293.35379 0.0 lineto

 closepath

 293.35379 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 325.94865 0.0 moveto

 325.94865 0.0 moveto

 325.94865 2.98505 lineto

 334.09737 2.98505 lineto

 334.09737 0.0 lineto

 closepath

 334.09737 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 366.69223 0.0 moveto

 366.69223 0.0 moveto

 366.69223 2.98505 lineto

 374.84096 2.98505 lineto

 374.84096 0.0 lineto

 closepath

 374.84096 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 415.58453 0.0 moveto

 415.58453 0.0 moveto

 415.58453 2.98505 lineto

 423.73325 2.98505 lineto

 423.73325 0.0 lineto

 closepath

 423.73325 2.98505 moveto

 pgffill
 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 148.7276 190.53828 ] concat

 pgfs



 0 setgray

7228 38500 a Ft(W)-92 b(anderungsbilanz)370 b(1961-2012)7228
38500 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 3147 40303 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 4527
44818 a Fp(Quelle:)276 b(ST)-65 b(A)g(TISTIK)277 b(A)-22
b(USTRIA,)278 b(Errec)-22 b(hnete)275 b(W)-65 b(anderungsbilanz)275
b(1961-1995;)g(W)-65 b(anderungsstatistik)275 b(1996-2012;)h
(2007-2011:)f(revidierte)g(Daten.)21003 46423 y(W)-65
b(anderungsbilanz:)274 b(Zuz\374ge)j(aus)f(dem)h(A)-22
b(usland)277 b(min)-22 b(us)277 b(W)-65 b(egz\374ge)276
b(in)g(das)h(A)-22 b(usland)277 b(\(adaptiert\).)p 0
TeXcolorgray 921 49042 a Fx(Kreuze)418 b(die)g(b)36 b(eiden)417
b(A)-36 b(ussagen)418 b(an,)g(die)g(eine)g(k)-36 b(orrekte)418
b(In)-36 b(terpretation)417 b(der)h(Gra\034k)f(dar-)921
51034 y(stellen!)p 1062 51652 44260 45 v 1062 58441 45
6789 v 1770 53512 a(A)-36 b(us)337 b(dem)f(angegeb)36
b(enen)337 b(W)-108 b(ert)336 b(f\374r)h(das)g(Jahr)f(2003)j(kann)d
(man)h(ablesen,)g(dass)g(in)1770 55504 y(diesem)377 b(Jahr)f(um)g(ca.)h
(40)217 b(000)378 b(P)-36 b(ersonen)376 b(mehr)f(zugew)-36
b(andert)376 b(als)h(abgew)-36 b(andert)1770 57496 y(sind.)p
42912 58441 V 1 0 0 TeXcolorrgb 43621 55379 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
58441 V 1062 58485 44260 45 v 1062 63540 45 5056 v 1770
60345 a Fx(Der)434 b(Zu)-36 b(w)g(ac)g(hs)433 b(der)g(W)-108
b(anderungsbilanz)433 b(v)-36 b(om)434 b(Jahr)g(2003)h(auf)f(das)f
(Jahr)h(2004)1770 62337 y(b)36 b(etr\344gt)434 b(ca.)g(50)217
b(\045.)p 42912 63540 V 45277 63540 V 1062 63585 44260
45 v 1062 68640 45 5056 v 1770 65445 a(Im)434 b(Zeitraum)f(1961)i(bis)f
(2012)h(gibt)e(es)h(ac)-36 b(h)g(t)433 b(Jahre,)h(in)g(denen)e(die)i
(Anzahl)f(der)1770 67436 y(Zu)-36 b(w)g(anderungen)432
b(geringer)i(als)g(die)g(Anzahl)f(der)h(Ab)-36 b(w)g(anderungen)431
b(w)-36 b(ar.)p 42912 68640 V 1 0 0 TeXcolorrgb 43621
66444 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 68640 V 1062 68684 44260 45 v 1062
73739 45 5056 v 1770 70544 a Fx(Im)434 b(Zeitraum)f(1961)i(bis)f(2012)h
(gibt)e(es)h(drei)f(Jahre,)h(in)g(denen)e(die)i(Anzahl)f(der)1770
72536 y(Zu)-36 b(w)g(anderungen)432 b(gleic)-36 b(h)434
b(der)f(Anzahl)h(der)f(Ab)-36 b(w)g(anderungen)432 b(w)-36
b(ar.)p 42912 73739 V 45277 73739 V 1062 73783 44260
45 v 1062 78580 45 4797 v 1770 75643 a(Die)435 b(W)-108
b(anderungsbilanz)433 b(des)g(Jahres)g(1981)i(ist)f(ann\344hernd)e
(dopp)36 b(elt)433 b(so)h(gro\377)1770 77635 y(wie)h(die)e(des)h
(Jahres)f(1970.)p 42912 78580 V 45277 78580 V 1062 78624
44260 45 v 0 TeXcolorgray 24421 81281 a(14)p 0 TeXcolorgray
eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fy(WS)717
b(1.1)g(-)g(1001)h(Studiendauer)713 b(-)718 b(MC)g(-)f
(neo-lernhilfen.at)p 0 TeXcolorgray -1391 10102 a Fx(13.)p
0 TeXcolorgray 651 w(F)-27 b(\374r)422 b(eine)g(tec)-36
b(hnisc)g(he)422 b(Studienric)-36 b(h)g(tung)420 b(wurde)j(die)f
(Studiendauer)f(in)i(Semester)f(statis-)921 12094 y(tisc)-36
b(h)433 b(erfasst)h(und)f(im)g(nac)-36 b(hstehenden)432
b(Bo)-36 b(xplot)434 b(dargestellt.)p 0 TeXcolorgray
0 TeXcolorgray 5418 20975 a
 currentpoint currentpoint translate 0.67087 0.67087 scale neg exch
neg exch translate
 5418 20975 a 5418 20975 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 484.50937 a add def
/d 0.0 a add neg def /h 87.79686 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5418 20975 a -18224 18325 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 698.08598
 0 213.57661  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 213.57661  698.08598  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -23.94405  def /maxTickline
63.85281  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 63.85281 0.0 -23.94405   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 698.08598 0.0 213.57661 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 63.85281
 0 -23.94405  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -23.94405  63.85281  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 213.57661  def /maxTickline
698.08598  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 63.85281 0.0 -23.94405   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 698.08598 0.0 213.57661 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -19469 15461 a Fw(1)-19469 12311
y(2)-15309 19670 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445
b(10)2209 b(11)h(12)g(13)f(14)h(15)f(16)h(17)g(18)f(19)h(20)f(21)h(22)g
(23)f(24)-73145 b(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)-18224
18325 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 341.43292 8.5359
625.96036 48.36957 0 Frame  gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52744 48.36957 284.52744 8.5359
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.1 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 654.4131 48.36957 654.4131 8.5359 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.1 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 369.88567 48.36957 369.88567 8.5359
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.1 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 341.43292 28.45274 284.52744 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.1 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 654.4131 28.45274 625.96036 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0  setgray  0.1 .setopacityalpha  fill  grestore gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
59051 20975 a
currentpoint initclip moveto
 59051 20975 a 5418 20975 a
 currentpoint currentpoint translate 1 0.67087 div 1 0.67087 div scale
neg exch neg exch translate
 5418 20975 a
921 24960 a Fx(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 1062 26000 44260 45 v 1062
29145 45 3145 v 1770 27941 a Fr(25)221 b(\045)435 b Fx(der)e
(Studierenden)e(studieren)i(h\366)36 b(c)-36 b(hstens)433
b(12)h(Semester)f(lang.)p 42912 29145 V 1 0 0 TeXcolorrgb
43621 27905 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 29145 V 1062 29189 44260 45 v 1062
34067 45 4878 v 1770 31130 a Fx(Mindestens)361 b Fr(50)221
b(\045)362 b Fx(der)f(Studierenden)e(b)36 b(en\366tigen)362
b(f\374r)f(den)g(Absc)-36 b(hluss)360 b(des)h(Stu-)1770
33122 y(diums)434 b(zwisc)-36 b(hen)433 b Fr(10)h Fx(und)f
Fr(22)h Fx(Semester.)p 42912 34067 V 45277 34067 V 1062
34111 44260 45 v 1062 37174 45 3064 v 1770 35971 a(Der)g(Median)g(b)36
b(etr\344gt)433 b Fr(12)h Fx(Semester.)p 42912 37174
V 45277 37174 V 1062 37219 44260 45 v 1062 40282 45 3064
v 1770 39078 a(Der)g(Quartilabstand)f(b)36 b(etr\344gt)434
b Fr(10)g Fx(Semester.)p 42912 40282 V 1 0 0 TeXcolorrgb
43621 39082 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 40282 V 1062 40326 44260 45 v 1062
43767 45 3442 v 1903 41842 a Fw(3)p 1903 42055 471 45
v 1903 42823 a(4)2940 42365 y Fx(der)f(Studierenden)f(studieren)g
(mindestens)h Fr(12)h Fx(Semester)f(lang.)p 42912 43767
45 3442 v 1 0 0 TeXcolorrgb 43621 42379 a Fv(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 43767
V 1062 43812 44260 45 v 47992 10102 a Fu(___/1)p 1 0 0
TeXcolorrgb 47905 12094 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 47840 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(15)p 0 TeXcolorgray
eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1002)h(T)-179
b(ageseinnahmen)714 b(App)i(-)i(O)-60 b(A)718 b(-)f(eSquirrel)p
0 TeXcolorgray -1391 4800 a Fx(14.)p 0 TeXcolorgray 651
w(Das)516 b(Diagramm)g(zeigt)g(die)f(T)-108 b(ageseinnahmen)515
b(\(in)g Fs(e)217 b Fx(\))515 b(eines)g(App-Un)-36 b(ternehmens)512
b(im)921 6792 y(Laufe)402 b(einer)f(W)-108 b(o)36 b(c)-36
b(he.)402 b(Wieviel)h Fs(e)619 b Fx(hat)401 b(das)h(Un)-36
b(ternehmen)399 b(in)j(dieser)f(W)-108 b(o)36 b(c)-36
b(he)402 b(eingenom-)921 8784 y(men?)p 0 TeXcolorgray
0 TeXcolorgray 5418 43483 a
 currentpoint currentpoint translate 0.84138 0.84138 scale neg exch
neg exch translate
 5418 43483 a 5852 43483 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 382.39754 a add def
/d 0.0 a add neg def /h 349.96881 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5852 43483 a 13742 40522 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 0 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 311.11649 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 853.5823
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 323.22318 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45428
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 311.11649
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  311.11649  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 323.22318  def
/dT 3729560 abs 65536 div viceversa { neg } if def /DT 40. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 323.22318 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 311.11649 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 323.22318
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  323.22318  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 311.11649  def
/dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 323.22318 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 311.11649 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 13507 41868 a
Fw(0)5595 b(40)5359 b(80)5124 b(120)4890 b(160)g(200)13742
40522 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 42.67911 113.81714 42.67911 113.81714 14.22636 0.0 14.22636
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 85.35823 85.36285 85.35823 85.36285 56.90549 0.0 56.90549  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 128.03734 199.18 128.03734 199.18 99.5846 0.0 99.5846  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 170.71646 284.54285 170.71646 284.54285 142.26372 0.0 142.26372
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 213.39557 142.27142 213.39557 142.27142 184.94283 0.0 184.94283
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 256.07469 113.81714 256.07469 113.81714 227.62195 0.0 227.62195
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 [ 0.0 298.7538 170.72571 298.7538 170.72571 270.30106 0.0 270.30106
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.62745
0.62745 0.62745  setrgbcolor  1.0 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 113.81714
14.22636 0.0 14.22636   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 113.81714
42.67911 113.81714 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
42.67911 113.81714 42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
14.22636 0.0 42.67911   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.36285
56.90549 0.0 56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.36285
85.35823 85.36285 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
85.35823 85.36285 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
56.90549 0.0 85.35823   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 199.18
99.5846 0.0 99.5846   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 199.18
128.03734 199.18 99.5846   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
128.03734 199.18 128.03734   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
99.5846 0.0 128.03734   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 284.54285
142.26372 0.0 142.26372   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 284.54285
170.71646 284.54285 142.26372   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
170.71646 284.54285 170.71646   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
142.26372 0.0 170.71646   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 142.27142
184.94283 0.0 184.94283   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 142.27142
213.39557 142.27142 184.94283   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
213.39557 142.27142 213.39557   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
184.94283 0.0 213.39557   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 113.81714
227.62195 0.0 227.62195   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 113.81714
256.07469 113.81714 227.62195   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
256.07469 113.81714 256.07469   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
227.62195 0.0 256.07469   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 170.72571
270.30106 0.0 270.30106   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 170.72571
298.7538 170.72571 270.30106   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
298.7538 170.72571 298.7538   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 0.0
270.30106 0.0 298.7538   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.62745 0.62745 0.62745  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 13742 40522 a
tx@Dict begin  { -49.795 287.37288 } PutCoor PutBegin  end
 13742 40522 a
915 x Fx(Mon)-36 b(tag)13742 40522 y
tx@Dict begin  PutEnd  end
 13742 40522 a 13742
40522 a
tx@Dict begin  { -52.64043 244.69376 } PutCoor PutBegin  end
 13742 40522 a 915 x Fx(Dienstag)13742 40522 y
tx@Dict begin  PutEnd  end

13742 40522 a 13742 40522 a
tx@Dict begin  { -56.90857 202.01465 } PutCoor PutBegin  end
 13742 40522 a 915 x Fx(Mitt)g(w)g(o)36
b(c)-36 b(h)13742 40522 y
tx@Dict begin  PutEnd  end
 13742 40522 a 13742 40522 a
tx@Dict begin  { -64.02214 159.33553 } PutCoor PutBegin  end

13742 40522 a 915 x Fx(Donnerstag)13742 40522 y
tx@Dict begin  PutEnd  end
 13742
40522 a 13742 40522 a
tx@Dict begin  { -46.94957 116.65642 } PutCoor PutBegin  end
 13742 40522 a 915 x Fx(F)-108 b(reitag)13742
40522 y
tx@Dict begin  PutEnd  end
 13742 40522 a 13742 40522 a
tx@Dict begin  { -49.795 73.9773 } PutCoor PutBegin  end
 13742 40522 a 915
x Fx(Samstag)13742 40522 y
tx@Dict begin  PutEnd  end
 13742 40522 a 13742 40522
a
tx@Dict begin  { -49.795 31.29819 } PutCoor PutBegin  end
 13742 40522 a 915 x Fx(Sonn)-36 b(tag)13742 40522 y
tx@Dict begin  PutEnd  end

13742 40522 a 48182 43483 a
currentpoint initclip moveto
 48182 43483 a 5418 43483
a
 currentpoint currentpoint translate 1 0.84138 div 1 0.84138 div scale
neg exch neg exch translate
 5418 43483 a 1 0 0 TeXcolorrgb 921 47467 a Fs(e)217
b Fx(780)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905 6792
a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 50965 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(16)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1003)h(Europa)-60
b(w)g(ahlen)716 b(-)h(MC)h(-)g(eSquirrel)p 0 TeXcolorgray
-1391 4800 a Fx(15.)p 0 TeXcolorgray 651 w(Un)-36 b(tenstehendes)624
b(Diagramm)j(zeigt)f(einige)h(Ergebnisse)f(der)f(EU-W)-108
b(ahlen)625 b(2009)i(und)888 6792 y(2014)435 b(in)f(\326sterreic)-36
b(h.)921 9338 y(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 0 TeXcolorgray 0 TeXcolorgray
5418 39769 a
 currentpoint currentpoint translate 1.24669 1.24669 scale neg exch
neg exch translate
 5418 39769 a 6128 39769 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 251.81693 a add def
/d 0.0 a add neg def /h 202.86226 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6128 39769 a 10774
38290 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 5 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 209.84201 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 42.67845
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 189.50206 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 2845.27435
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 209.84201
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  209.84201  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 189.50206  def
/dT 932339 abs 65536 div viceversa { neg } if def /DT 0.5 abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 189.50206 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 209.84201 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 189.50206
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  189.50206  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 209.84201  def
/dT 2796975 abs 65536 div viceversa { neg } if def /DT 7.5 abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 189.50206 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 209.84201 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 9622 38464 a Fh(0)8992 33740
y(7)p Fg(:)p Fh(5)8616 29015 y(15)p Fg(:)p Fh(0)8616
24291 y(22)p Fg(:)p Fh(5)8616 19567 y(30)p Fg(:)p Fh(0)10774
38290 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 17.07181 0.0 17.07181
153.64243 5.69046 153.64243 5.69046 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  [ 34.1432 0.0
34.1432 170.7138 22.76227 170.7138 22.76227 0.0  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.39215 0  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 59.75093 0.0 59.75093
137.14012 48.36957 137.14012 48.36957 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  [ 76.82231
0.0 76.82231 134.86388 65.44139 134.86388 65.44139 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.39215 0  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 102.43004 0.0 102.43004
112.10204 91.04869 112.10204 91.04869 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  [ 119.50143
0.0 119.50143 72.26881 108.1205 72.26881 108.1205 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.39215 0  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 145.10916 0.0 145.10916
82.51167 133.7278 82.51167 133.7278 0.0  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  [ 162.18054
0.0 162.18054 56.33551 150.79962 56.33551 150.79962 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.39215 0  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 187.78827 0.0 187.78827
46.09276 176.40692 46.09276 176.40692 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.75 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5.69046 153.64243 5.69046
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 17.07181 153.64243 5.69046
153.64243   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 17.07181 0.0 17.07181
153.64243   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5.69046 0.0 17.07181
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 22.76227 170.7138 22.76227
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 34.1432 170.7138 22.76227
170.7138   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 34.1432 0.0 34.1432 170.7138
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 22.76227 0.0 34.1432
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 137.14012 48.36957
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.75093 137.14012 48.36957
137.14012   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.75093 0.0 59.75093
137.14012   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 48.36957 0.0 59.75093
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 65.44139 134.86388 65.44139
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 134.86388 65.44139
134.86388   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 76.82231 0.0 76.82231
134.86388   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 65.44139 0.0 76.82231
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 91.04869 112.10204 91.04869
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 102.43004 112.10204 91.04869
112.10204   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 102.43004 0.0 102.43004
112.10204   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 91.04869 0.0 102.43004
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 108.1205 72.26881 108.1205
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 119.50143 72.26881 108.1205
72.26881   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 119.50143 0.0 119.50143
72.26881   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 108.1205 0.0 119.50143
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 82.51167 133.7278
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 145.10916 82.51167 133.7278
82.51167   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 145.10916 0.0 145.10916
82.51167   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 133.7278 0.0 145.10916
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 150.79962 56.33551 150.79962
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 162.18054 56.33551 150.79962
56.33551   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 162.18054 0.0 162.18054
56.33551   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 150.79962 0.0 162.18054
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 176.40692 46.09276 176.40692
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 187.78827 46.09276 176.40692
46.09276   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 187.78827 0.0 187.78827
46.09276   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 176.40692 0.0 187.78827
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
10774 38290 a
tx@Dict begin  { 12.80363 -2.84523 } PutCoor PutBegin  end
 10774 38290 a 558 x Fp(\326)-22 b(VP)10774
38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 55.48276 -2.84523 } PutCoor PutBegin  end
 10774 38290 a 558
x Fp(SP\326)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 98.16187 -2.84523 } PutCoor PutBegin  end

10774 38290 a 558 x Fp(FP\326)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290
a 10774 38290 a
tx@Dict begin  { 135.15053 -2.84523 } PutCoor PutBegin  end
 10774 38290 a 558 x Fp(GR)g(\334NE)10774
38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 180.6751 -2.84523 } PutCoor PutBegin  end
 10774 38290 a 457
x Fp(NEOS)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 127.71042 180.92574 } PutCoor PutBegin  end
 10774
38290 a 0 0 1 TeXcolorrgb 494 x Ff(\004)p 0 TeXcolorgray
10774 38290 a
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 136.57324 180.59595 } PutCoor PutBegin  end
 10774 38290
a 457 x Fp(EU-W)-65 b(ahl)276 b(2014)10774 38290 y
tx@Dict begin  PutEnd  end
 10774
38290 a 10774 38290 a
tx@Dict begin  { 127.98828 167.86858 } PutCoor PutBegin  end
 10774 38290 a 0 0.39215 0 TeXcolorrgb
494 x Ff(\004)p 0 TeXcolorgray 10774 38290 a
tx@Dict begin  PutEnd  end
 10774 38290
a 10774 38290 a
tx@Dict begin  { 136.57324 167.86858 } PutCoor PutBegin  end
 10774 38290 a 457 x Fp(EU-W)-65 b(ahl)276
b(2009)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 5.69046 161.04004 } PutCoor PutBegin  end
 10774
38290 a 498 x Fj(27\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774
38290 a
tx@Dict begin  { 22.76227 178.11142 } PutCoor PutBegin  end
 10774 38290 a 498 x Fj(30\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774
38290 a 10774 38290 a
tx@Dict begin  { 44.10184 144.53764 } PutCoor PutBegin  end
 10774 38290 a 498 x Fj(24)p Fi(;)p
Fj(1\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 65.44139 141.12343 } PutCoor PutBegin  end
 10774
38290 a 498 x Fj(23)p Fi(;)p Fj(7\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774
38290 a 10774 38290 a
tx@Dict begin  { 91.04869 119.49966 } PutCoor PutBegin  end
 10774 38290 a 498 x Fj(19)p Fi(;)p
Fj(7\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 108.1205 78.52837 } PutCoor PutBegin  end
 10774
38290 a 498 x Fj(12)p Fi(;)p Fj(7\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774
38290 a 10774 38290 a
tx@Dict begin  { 133.7278 88.77121 } PutCoor PutBegin  end
 10774 38290 a 498 x Fj(14)p Fi(;)p
Fj(5\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 150.79962 62.59506 } PutCoor PutBegin  end
 10774
38290 a 498 x Fj(9)p Fi(;)p Fj(9\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774
38290 a 10774 38290 a
tx@Dict begin  { 176.40692 52.3522 } PutCoor PutBegin  end
 10774 38290 a 498 x Fj(8)p Fi(;)p
Fj(1\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 10774 38290 a
tx@Dict begin  { 193.47873 6.25954 } PutCoor PutBegin  end
 10774
38290 a 498 x Fj(0\045)10774 38290 y
tx@Dict begin  PutEnd  end
 10774 38290 a 34003
39769 a
currentpoint initclip moveto
 34003 39769 a 5418 39769 a
 currentpoint currentpoint translate 1 1.24669 div 1 1.24669 div scale
neg exch neg exch translate
 5418 39769 a 1062
41916 44260 45 v 1062 46909 45 4993 v 1770 43972 a Fx(Die)435
b(GR)-36 b(\334NEN)433 b(k)-36 b(onn)g(ten)433 b(v)-36
b(on)434 b(der)f(W)-108 b(ahl)433 b(2009)i(zur)e(W)-108
b(ahl)434 b(2014)h(ihren)e(Stim-)1770 45964 y(man)-36
b(teil)434 b(am)g(meisten)f(ausbauen.)p 42912 46909 V
45277 46909 V 1062 46953 44260 45 v 1062 51825 45 4872
v 1770 48813 a(Die)i(NEOS)e(hab)36 b(en)433 b(v)-36 b(on)433
b(der)g(W)-108 b(ahl)434 b(2009)h(zur)e(W)-108 b(ahl)434
b(2014)h(ihren)e(Stimman)-36 b(teil)1770 50805 y(um)434
b Fr(100)221 b(\045)434 b Fx(erh\366h)-36 b(t.)p 42912
51825 V 45277 51825 V 1062 51869 44260 45 v 1062 57120
45 5252 v 1770 53925 a(Die)435 b(SP\326)e(hat)g(v)-36
b(on)434 b(der)f(W)-108 b(ahl)434 b(2009)g(zur)f(W)-108
b(ahl)434 b(2014)h(ihren)e(Stimman)-36 b(teil)434 b(v)-36
b(er-)1770 55917 y(ringert.)p 42912 57120 V 45277 57120
V 1062 57164 44260 45 v 1062 62415 45 5252 v 1770 59220
a(Die)435 b(FP\326)e(hat)g(ihre)g(Prozen)-36 b(tpunkte)433
b(v)-36 b(on)434 b(2009)g(auf)g(2014)h(um)e(mehr)g(als)i(die)1770
61212 y(H\344lfte)g(v)-36 b(ergr\366\377ert.)p 42912
62415 V 1 0 0 TeXcolorrgb 43621 60122 a Fv(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 62415
V 1062 62460 44260 45 v 1062 65719 45 3260 v 1770 64516
a Fx(In)293 b(der)f(W)-108 b(ahl)293 b(2014)h(hat)e(die)h(\326)-36
b(VP)292 b(3)h(Prozen)-36 b(tpunkte)291 b(w)-36 b(eniger)293
b(als)h(2009)f(erreic)-36 b(h)g(t.)p 42912 65719 V 1 0 0
TeXcolorrgb 43621 64421 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 65719 V 1062 65763 44260
45 v 47992 4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905
6792 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 69791 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(17)p 0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1004)h(Bev)-60
b(\366lk)g(erung)715 b(EU)j(L\344nder)e(-)h(L)-179 b(T)717
b(-)h(eSquirrel)p 0 TeXcolorgray -1391 4800 a Fx(16.)p
0 TeXcolorgray 651 w(Der)354 b(Bo)-36 b(xplot)354 b(zeigt)g(die)g(Bev)
-36 b(\366lk)g(erung)355 b(der)e(28)h(L\344nder)f(der)g(europ\344isc)
-36 b(hen)353 b(Union,)h(w)-36 b(ob)36 b(ei)921 6792
y(jedes)384 b(Land)g(un)-36 b(tersc)g(hiedlic)g(h)383
b(viele)i(Ein)-36 b(w)g(ohnerInnen)383 b(hat.)h(Erg\344nze)h(den)e
(Satz,)i(so)f(dass)921 8784 y(eine)434 b(k)-36 b(orrekte)434
b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t.)p 0 TeXcolorgray
0 TeXcolorgray 5420 17825 a
 currentpoint currentpoint translate 0.12903 0.12903 scale neg exch
neg exch translate
 5420 17825 a 5854 17825 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 2514.98485 a add def
/d 0.0 a add neg def /h 467.65071 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5854 17825 a 9586 14220 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 4.0 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 2481.26582 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 4.0 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 569.05487
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 20 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 4.0 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 435.08089 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 4.0 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 128.03734
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 2481.26582  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 2481.26582  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 435.08089  def /dT 16782111 abs 65536 div viceversa
{ neg } if def /DT 9. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 435.08089
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 2481.26582
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 435.08089  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 435.08089  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 2481.26582  def /dT 18646790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 435.08089
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 2481.26582
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8954 16729 a Fe(0)27084
b(9)26452 b(18)25820 b(27)h(36)f(45)h(54)f(63)h(72)f(81)9586
14220 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor   0. true 127.46815
113.81097 506.45891 341.43292 0 Frame  gsave 0.1 0.1 0.1  setrgbcolor
 0.32 .setopacityalpha  fill  grestore gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 341.43292 0.0 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.1 0.1 0.1  setrgbcolor  0.32 .setopacityalpha  fill  grestore
gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 2307.51767 341.43292
2307.51767 113.81097   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.1 0.1 0.1  setrgbcolor  0.32 .setopacityalpha  fill  grestore
gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 250.38422 341.43292 250.38422
113.81097   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.1 0.1 0.1  setrgbcolor  0.32 .setopacityalpha  fill  grestore
gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 127.46815 227.62195 0.0
227.62195   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.1 0.1 0.1  setrgbcolor  0.32 .setopacityalpha  fill  grestore
gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0.1 0.1 0.1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 2307.51767 227.62195
506.45891 227.62195   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.1 0.1 0.1  setrgbcolor  0.32 .setopacityalpha  fill  grestore
gsave 1.6 SLW 0.1 0.1 0.1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
284252 17825 a
currentpoint initclip moveto
 284252 17825 a 5420 17825 a
 currentpoint currentpoint translate 1 0.12903 div 1 0.12903 div scale
neg exch neg exch translate
 5420 17825
a 921 22755 a Fx(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
24746 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 28237 y(Die)1159 b(Bev)-36 b(\366lk)g(erung)1158
b(v)-36 b(on)p 15558 28237 3150 45 v 19180 28189 a(1)18708
28237 y Fd(\015)p 20302 28237 V 4307 w Fx(liegt)1159
b(ann\344hernd)e(im)h(In)-36 b(terv)-72 b(all)1158 b(v)-36
b(on)p 921 30229 V 4542 30181 a(2)4071 30229 y Fd(\015)p
5665 30229 V 3583 w Fx(Millionen)434 b(Ein)-36 b(w)g(ohnerInnen.)p
0 TeXcolorgray 0 TeXcolorgray 10495 31601 10665 45 v
10495 34685 45 3085 v 15502 33382 a(1)15030 33430 y Fd(\015)p
21115 34685 V 10495 34730 10665 45 v 10495 37989 45 3260
v 11204 36786 a Fr(4)433 b Fx(L\344ndern)p 18750 37989
V 19459 36691 a Fv(2)p 21115 37989 V 10495 38033 10665
45 v 10495 41292 45 3260 v 11204 40089 a Fr(14)h Fx(L\344ndern)p
18750 41292 V 1 0 0 TeXcolorrgb 19459 39995 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
41292 V 10495 41336 10665 45 v 10495 44596 45 3260 v
11204 43393 a Fr(21)g Fx(L\344ndern)p 18750 44596 V 19459
43298 a Fv(2)p 21115 44596 V 10495 44640 10665 45 v 0
TeXcolorgray 0 TeXcolorgray 30427 31601 9720 45 v 30427
34685 45 3085 v 34961 33382 a Fx(2)34489 33430 y Fd(\015)p
40102 34685 V 30427 34730 9720 45 v 30427 38063 45 3334
v 31135 36786 a Fr([)8 b(17)p Fn(;)p Fr(0;)221 b(81)p
Fn(;)p Fr(0])p 37737 38063 V 38445 36728 a Fv(2)p 40102
38063 V 30427 38107 9720 45 v 30427 41440 45 3334 v 31135
40163 a Fr([)8 b(4)p Fn(;)p Fr(5;)221 b(17)p Fn(;)p Fr(0])p
37737 41440 V 1 0 0 TeXcolorrgb 38445 40105 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 40102
41440 V 30427 41484 9720 45 v 30427 44817 45 3334 v 31135
43540 a Fr([)8 b(4)p Fn(;)p Fr(5;)221 b(9)p Fn(;)p Fr(0])p
37737 44817 V 38445 43483 a Fv(2)p 40102 44817 V 30427
44861 9720 45 v 47992 4800 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 6792 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 48889 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(18)p 0 TeXcolorgray eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)729 b(1.1)h(-)g(1005)g
(Quartalums\344tze)f(eines)g(T)-179 b(ec)-60 b(hnologieun)g(terneh-)
-2331 4515 y(mens)717 b(-)h(O)-60 b(A)717 b(-)h(eSquirrel)p
0 TeXcolorgray -1391 7823 a Fx(17.)p 0 TeXcolorgray 651
w(Das)519 b(Diagramm)h(zeigt)g(die)e(Quartalsums\344tze)h
Fn(Q)p Fr(1)p Fx(,)g Fn(Q)p Fr(2)p Fx(,)h Fn(Q)p Fr(3)p
Fx(,)f Fn(Q)p Fr(4)g Fx(\(in)g Fs(e)217 b Fx(\))518 b(eines)g(T)-108
b(ec)-36 b(h-)921 9815 y(nologieun)g(ternehmens)417 b(im)g(Laufe)h
(eines)g(Jahres.)g(Berec)-36 b(hne)416 b(\(in)i(Millionen)g
Fs(e)217 b Fx(\),)417 b(wieviel)921 11806 y(das)434 b(Un)-36
b(ternehmen)431 b(durc)-36 b(hsc)g(hnittlic)g(he)432
b(pro)h(Monat)g(eingenommen)h(hat.)p 0 TeXcolorgray 0
TeXcolorgray 5418 38702 a
 currentpoint currentpoint translate 0.7043 0.7043 scale neg exch neg
exch translate
 5418 38702 a 5418 38702 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 461.50352 a add def
/d 0.0 a add neg def /h 314.68727 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418
38702 a 13381 34872 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 23 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 389.575 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22636
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 2 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 280.08864 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 426.79115
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 389.575
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  389.575  gt { true }{ false } ifelse def /epsilon
0.01 def /minTickline 0.0  def /maxTickline 280.08864  def /dT 1864679
abs 65536 div viceversa { neg } if def /DT 1. abs viceversa { neg }
if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd } def /logLines { false } def /LSstroke {  0  setlinejoin 0
 setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0  setlinecap
stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines
{ gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10
add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MaxValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for subTwidth SLW
subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0
gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 280.08864 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 389.575 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 280.08864
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  280.08864  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 389.575  def /dT
932339 abs 65536 div viceversa { neg } if def /DT 0.5 abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 280.08864 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 389.575 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 85.35823 0.0 85.35823
128.03734 28.45274 128.03734 28.45274 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.3 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 170.71646 0.0 170.71646
213.39557 113.81097 213.39557 113.81097 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.3 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 256.07469 0.0 256.07469
156.49008 199.1692 156.49008 199.1692 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.3 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ 341.43292 0.0 341.43292
71.13185 284.52744 71.13185 284.52744 0.0  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.3 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 128.03734 28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 128.03734 28.45274
128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 85.35823
128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 213.39557 113.81097
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 213.39557 113.81097
213.39557   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 0.0 170.71646
213.39557   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 0.0 170.71646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 199.1692 156.49008 199.1692
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 256.07469 156.49008 199.1692
156.49008   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 256.07469 0.0 256.07469
156.49008   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 199.1692 0.0 256.07469
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 71.13185 284.52744
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 341.43292 71.13185 284.52744
71.13185   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 341.43292 0.0 341.43292
71.13185   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 0.0 341.43292
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
13381 34872 a
tx@Dict begin  { -63.39261 62.59595 } PutCoor PutBegin  end
 13381 34872 a 926 x Fs(e)217 b Fx(2.000.000)13381
34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a 13381 34872 a
tx@Dict begin  { -66.23807 119.50143 } PutCoor PutBegin  end
 13381 34872 a 926
x Fs(e)g Fx(4.000.000)13381 34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a 13381
34872 a
tx@Dict begin  { -65.66888 233.31241 } PutCoor PutBegin  end
 13381 34872 a 926 x Fs(e)g Fx(8.000.000)13381
34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a 13381 34872 a
tx@Dict begin  { -67.37598 176.40692 } PutCoor PutBegin  end
 13381 34872 a 926
x Fs(e)g Fx(6.000.000)13381 34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 13.692 def /dx x1 x sub
49 div def /F@pstplot ((--2.-0.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 13.692 def /dx x1 x sub
49 div def /F@pstplot ((--4.-0.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 13.692 def /dx x1 x sub
49 div def /F@pstplot ((--6.-0.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 13.692 def /dx x1 x sub
49 div def /F@pstplot ((--8.-0.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 13381 34872 a
tx@Dict begin  { 51.55626 -6.14589 } PutCoor PutBegin  end
 13381 34872 a
915 x Fx(Q1)13381 34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a 13381 34872 a
tx@Dict begin  { 136.91449 -6.14589 } PutCoor PutBegin  end

13381 34872 a 915 x Fx(Q2)13381 34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a
13381 34872 a
tx@Dict begin  { 222.27272 -6.14589 } PutCoor PutBegin  end
 13381 34872 a 915 x Fx(Q3)13381 34872 y
tx@Dict begin  PutEnd  end

13381 34872 a 13381 34872 a
tx@Dict begin  { 307.63095 -6.14589 } PutCoor PutBegin  end
 13381 34872 a 915 x Fx(Q4)13381
34872 y
tx@Dict begin  PutEnd  end
 13381 34872 a 56505 38702 a
currentpoint initclip moveto
 56505 38702 a 5418
38702 a
 currentpoint currentpoint translate 1 0.7043 div 1 0.7043 div scale
neg exch neg exch translate
 5418 38702 a 1 0 0 TeXcolorrgb 921 42686 a Fr(5)434
b Fx(Millionen)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7823 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 9815 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 46162 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(19)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1006)h(App-Store)d
(Bew)-60 b(ertungen)716 b(-)i(MC)f(-)h(eSquirrel)p 0
TeXcolorgray -1391 4800 a Fx(18.)p 0 TeXcolorgray 651
w(In)385 b(einem)g(App-Store)e(w)-36 b(erden)384 b(Apps)h(mit)g
Fr(1)196 b Fm(\000)g Fr(5)385 b Fx(Sternen)f(b)36 b(ew)-36
b(ertet.)385 b(Der)g(Bo)-36 b(xplot)386 b(zeigt)921 6792
y(die)505 b(30)g(meist)g(gekauften)h(Apps)e(mit)h(ihren)f(durc)-36
b(hsc)g(hnittlic)g(hen)502 b(Bew)-36 b(ertungen.)505
b(Kreu-)921 8784 y(ze)486 b(die)g(zutre\033ende\(n\))e(A)-36
b(ussage\(n\))486 b(an,)g(die)g(aus)g(dem)g(Diagramm)h(abgelesen)g(w)
-36 b(erden)921 10776 y(k)g(\366nnen.)p 0 TeXcolorgray
0 TeXcolorgray 5417 22603 a
 currentpoint currentpoint translate 1.51997 1.51997 scale neg exch
neg exch translate
 5417 22603 a 5851 22603 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.94128 a add def
/d 0.0 a add neg def /h 57.78941 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5851 22603 a 1559 18583 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 248.71039 0.0 38.7691 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 42.67911 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 23 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 21.47762 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 11.38113
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 248.71039
 0 38.7691  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa 38.7691  248.71039  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -7.85905  def /maxTickline
21.47762  def /dT 1491749 abs 65536 div viceversa { neg } if def /DT
0.5 abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 45.52458  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 45.52458  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 21.47762 0.0 -7.85905   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 248.71039 0.0 38.7691 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 21.47762
 0 -7.85905  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -7.85905  21.47762  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline 38.7691  def /maxTickline
248.71039  def /dT 932339 abs 65536 div viceversa { neg } if def /DT
0.5 abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 21.47762 0.0 -7.85905   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 248.71039 0.0 38.7691 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -418 17294 a Fw(0)p
Fc(:)p Fw(5)3478 19929 y(0)p Fc(:)p Fw(5)1319 b(1)p Fc(:)p
Fw(0)f(1)p Fc(:)p Fw(5)h(2)p Fc(:)p Fw(0)g(2)p Fc(:)p
Fw(5)f(3)p Fc(:)p Fw(0)h(3)p Fc(:)p Fw(5)g(4)p Fc(:)p
Fw(0)f(4)p Fc(:)p Fw(5)h(5)p Fc(:)p Fw(0)-23878 b(0)p
Fc(:)p Fw(5)1559 18583 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 125.1926
5.69046 193.47946 17.07181 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1
.setopacityalpha  fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 72.8396 17.07181 72.8396
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62291 17.07181 227.62291
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71718 17.07181 170.71718
5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 125.1926 11.38092 72.8396
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62291 11.38092 193.47946
11.38092   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 29091 22603 a
currentpoint initclip moveto
 29091 22603 a
5417 22603 a
 currentpoint currentpoint translate 1 1.51997 div 1 1.51997 div scale
neg exch neg exch translate
 5417 22603 a 1062 24750 44260 45 v 1062
27813 45 3064 v 1770 26610 a Fx(Ein)434 b(Viertel)g(aller)g(Apps)f
(erhielt)h(eine)f(Bew)-36 b(ertung)433 b(v)-36 b(on)434
b(mindestens)f Fr(4)p Fn(;)p Fr(25)p Fx(.)p 42912 27813
V 1 0 0 TeXcolorrgb 43621 26614 a Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 27813 V 1062 27858
44260 45 v 1062 30921 45 3064 v 1770 29718 a Fx(Die)i(H\344lfte)f
(aller)h(Apps)d(hab)36 b(en)433 b(eine)h(Bew)-36 b(ertung)433
b(zwisc)-36 b(hen)434 b Fr(2)p Fn(;)p Fr(75)h Fx(und)d
Fr(4)p Fn(;)p Fr(25)p Fx(.)p 42912 30921 V 1 0 0 TeXcolorrgb
43621 29721 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 30921 V 1062 30965 44260 45 v 1062
36020 45 5056 v 1770 32825 a Fx(Die)g(Anzahl)f(der)g(Apps)f(mit)h
(einer)g(Bew)-36 b(ertung)431 b(un)-36 b(ter)430 b Fr(3)p
Fn(;)p Fr(75)i Fx(und)e(die)h(mit)g(einer)1770 34817
y(Bw)-36 b(ertung)434 b(\374b)36 b(er)432 b Fr(3)p Fn(;)p
Fr(75)j Fx(ist)f(gleic)-36 b(h.)p 42912 36020 V 45277
36020 V 1062 36064 44260 45 v 1062 39127 45 3064 v 1770
37924 a(Die)435 b(durc)-36 b(hsc)g(hnittlic)g(he)431
b(Bew)-36 b(ertung)433 b(aller)i Fr(30)f Fx(Apps)f(liegt)h(b)36
b(ei)434 b Fr(3)p Fn(;)p Fr(75)p Fx(.)p 42912 39127 V
45277 39127 V 1062 39172 44260 45 v 1062 42235 45 3064
v 1770 41032 a(Keine)g(der)f(Apps)g(erhielt)h(eine)f(Bew)-36
b(ertung)433 b(un)-36 b(ter)433 b Fr(1)p Fn(;)p Fr(5)p
Fx(.)p 42912 42235 V 1 0 0 TeXcolorrgb 43621 41035 a
Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 42235 V 1062 42279 44260 45 v 47992 4800 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 6792 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46307
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(20)p 0 TeXcolorgray
eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1007)h(Benzin)-60
b(v)g(erbrauc)g(h)715 b(-)j(MC)f(-)h(eSquirrel)p 0 TeXcolorgray
-1391 4800 a Fx(19.)p 0 TeXcolorgray 651 w(Das)394 b(Diagtamm)h(zeigt)f
(den)e(Benzin)-36 b(v)g(erbrauc)g(h)393 b(\(km)g(pro)g(Liter\))g(eines)
h(KFZs)f(b)36 b(ei)393 b(einem)921 6792 y(gewissen)613
b(Durc)-36 b(hsc)g(hnittstemp)36 b(o)611 b(\(km/h\).)k(Kreuze)d(die)h
(zutre\033ende\(n\))d(An)-36 b(t)g(w)g(ort\(en\))921
8784 y(an.)p 0 TeXcolorgray 0 TeXcolorgray 5418 37410
a
 currentpoint currentpoint translate 0.5323 0.5323 scale neg exch neg
exch translate
 5418 37410 a 5851 37410 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 606.7363 a add def
/d 0.0 a add neg def /h 455.75223 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5851 37410 a 12251 30596
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 548.92032
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  548.92032  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 394.19878  def
/dT 8204460 abs 65536 div viceversa { neg } if def /DT 11. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 11.38092  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 11.38092
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 394.19878 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 548.92032 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 394.19878
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  394.19878  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 548.92032  def
/dT 5966880 abs 65536 div viceversa { neg } if def /DT 8. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 11.38092  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 11.38092  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 394.19878 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 548.92032 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-31495 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 409.71313 341.42761 409.71313 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  20.0  20.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 523.52234 341.42761 523.52234 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  20.0  20.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 648.71246 341.42761 648.71246 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  20.0  20.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 762.52167 341.42761 762.52167 0.0 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  20.0  20.0 ] 0 0 add  DashLine  grestore end
 
@endspecial -19244 30596 a
tx@Dict begin  { 404.02267 -7.9666 } PutCoor PutBegin  end

-19244 30596 a 837 x Fx(36)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596
a -19244 30596 a
tx@Dict begin  { 517.83188 -7.9666 } PutCoor PutBegin  end
 -19244 30596 a 837 x Fx(46)-19244 30596
y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244 30596 a
tx@Dict begin  { 643.022 -7.9666 } PutCoor PutBegin  end
 -19244 30596 a 837 x
Fx(57)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244 30596 a
tx@Dict begin  { 756.8312 -7.9666 } PutCoor PutBegin  end
 -19244
30596 a 837 x Fx(67)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244
30596 a
tx@Dict begin  { 280.10893 -5.69046 } PutCoor PutBegin  end
 -19244 30596 a 837 x Fx(25)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244
30596 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 25 def /x1 73.23162991064301 def
/dx x1 x sub 49 div def /F@pstplot ((--8.-0.*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 11.38092 mul F@pstplot 11.38092 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
11.38092 mul gt { moveto } { dup -1.e30 11.38092 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 11.38092 mul gt { moveto } { dup -1.e30 11.38092
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  20.0  20.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 25 def /x1 73.23162991064301 def
/dx x1 x sub 49 div def /F@pstplot ((--15.-0.*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 11.38092 mul F@pstplot 11.38092 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
11.38092 mul gt { moveto } { dup -1.e30 11.38092 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 11.38092 mul gt { moveto } { dup -1.e30 11.38092
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  20.0  20.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 25 def /x1 73.23162991064301 def
/dx x1 x sub 49 div def /F@pstplot ((--23.-0.*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 11.38092 mul F@pstplot 11.38092 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
11.38092 mul gt { moveto } { dup -1.e30 11.38092 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 11.38092 mul gt { moveto } { dup -1.e30 11.38092
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  20.0  20.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 25 def /x1 73.23162991064301 def
/dx x1 x sub 49 div def /F@pstplot ((--30.-0.*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 11.38092 mul F@pstplot 11.38092 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
11.38092 mul gt { moveto } { dup -1.e30 11.38092 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 11.38092 mul gt { moveto } { dup -1.e30 11.38092
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  20.0  20.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial -19244 30596 a
tx@Dict begin  { 270.97968 5.69046 } PutCoor PutBegin  end

-19244 30596 a 837 x Fx(0)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596
a -19244 30596 a
tx@Dict begin  { 270.97968 96.73782 } PutCoor PutBegin  end
 -19244 30596 a 837 x Fx(8)-19244 30596
y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244 30596 a
tx@Dict begin  { 268.58978 176.40427 } PutCoor PutBegin  end
 -19244 30596 a 837 x
Fx(15)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244 30596 a
tx@Dict begin  { 268.58978 267.45163 } PutCoor PutBegin  end
 -19244
30596 a 837 x Fx(23)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244
30596 a
tx@Dict begin  { 268.58978 347.11807 } PutCoor PutBegin  end
 -19244 30596 a 837 x Fx(30)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244
30596 a -19244 30596 a
tx@Dict begin  { 463.0011 384.0597 } PutCoor PutBegin  end
 -19244 30596 a 1882 x Fb(Benzin)-72
b(v)g(erbrauc)g(h)-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244
30596 a
tx@Dict begin  { 463.0011 -22.01927 } PutCoor PutBegin  end
 -19244 30596 a 1196 x Fa(Durc)-43 b(hsc)g(hnittstemp)43
b(o)518 b([km/h])-19244 30596 y
tx@Dict begin  PutEnd  end
 -19244 30596 a -19244
30596 a
tx@Dict begin  { 240.31131 240.21164 } PutCoor PutBegin  end
 -19244 30596 a -18146 39332 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 -18146 39332 a
Fa(km)h(pro)i(Liter)-9410 39332 y
 currentpoint grestore moveto
 -9410 39332 a -19244
30596 a
tx@Dict begin  PutEnd  end
 -19244 30596 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 284.52301 147.95197   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 307.28485 130.88058   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 386.9513 193.47565   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 409.71313 204.85657   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 477.99866 204.85657   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 523.52234 244.68979   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 648.71246 295.90393   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 705.61707 341.42761   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 739.75983 324.35623   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.37647 0.37647 0.37647  setrgbcolor
 [ 762.52167 307.28485   false NArray  /DS 12.0 0. CLW mul add 2 div
def /Symbol 0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto
gsave 1.  1.  scale <B4> show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
73014 37410 a
currentpoint initclip moveto
 73014 37410 a 5418 37410 a
 currentpoint currentpoint translate 1 0.5323 div 1 0.5323 div scale
neg exch neg exch translate
 5418 37410 a
2945 39225 40494 45 v 2945 42444 45 3219 v 3654 41167
a Fx(Mit)433 b(57)h(km/h)g(kann)g(man)f(w)-36 b(eniger)434
b(w)-36 b(eit)434 b(fahren)g(als)g(mit)f(36)i(km/h.)p
41029 42444 V 43394 42444 V 2945 42488 40494 45 v 2945
45706 45 3219 v 3654 44429 a(Mit)e(36)h(km/h)g(ist)g(der)f(Benzin)-36
b(v)g(erbrauc)g(h)432 b(h\366her)h(als)i(b)36 b(ei)433
b(25)h(km/h.)p 41029 45706 V 43394 45706 V 2945 45750
40494 45 v 2945 48968 45 3219 v 3654 47691 a(Mit)f(67)h(km/h)g(kann)g
(man)f(w)-36 b(eiter)434 b(fahren)g(als)g(mit)f(46)i(km/h.)p
41029 48968 V 1 0 0 TeXcolorrgb 6717 w Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43394 48968 V 2945 49013
40494 45 v 2945 52231 45 3219 v 3654 50954 a Fx(F)-27
b(\344hrt)432 b(man)i(ca.)g(28)g(km/h,)h(k)-36 b(omm)g(t)433
b(man)h(am)g(w)-36 b(eitesten.)p 41029 52231 V 43394
52231 V 2945 52275 40494 45 v 2945 55493 45 3219 v 3654
54216 a(Zwisc)g(hen)433 b(57)h(und)e(67)j(km/h)f(ist)f(der)g(Benzin)-36
b(v)g(erbrauc)g(h)433 b(am)h(h\366)36 b(c)-36 b(hsten.)p
41029 55493 V 43394 55493 V 2945 55537 40494 45 v 47992
4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905 6792 a Ft(WS)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 59566 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(21)p
0 TeXcolorgray eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1008)h(Quiz)f(mit)g
(48)g(Punkten)f(-)h(ZO)h(-)f(eSquirrel)p 0 TeXcolorgray
-1391 4800 a Fx(20.)p 0 TeXcolorgray 651 w(In)592 b(einem)g(Quiz)g
(kann)h(jedes)f(T)-108 b(eam)593 b Fr(48)g Fx(Punkte)f(erreic)-36
b(hen.)592 b(Das)i(Bo)-36 b(xplot)593 b(stellt)f(die)921
6792 y(Ergebnisse)643 b(des)f(letzten)h(Quiz-Ab)36 b(ends)641
b(dar.)j(Ordne)d(die)i(folgenden)g(A)-36 b(ussagen)643
b(den)921 8784 y(Punktest\344nden)432 b(zu.)p 0 TeXcolorgray
0 TeXcolorgray 5418 22322 a
 currentpoint currentpoint translate 0.68909 0.68909 scale neg exch
neg exch translate
 5418 22322 a 5851 22322 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 467.79932 a add def
/d 0.0 a add neg def /h 154.2553 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5851 22322 a -6926 18841 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 1 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 583.22389 0.0 115.42458 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 227.62283 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  113.8092 0.0 T 21 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 191.10057 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 22.76184
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 583.22389
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  583.22389  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 191.10057  def
/dT 2983440 abs 65536 div viceversa { neg } if def /DT 4. abs viceversa
{ neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd } def /logLines { false } def /LSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 11.38092  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 11.38092
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 583.22389 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-7161 20187 a Fw(0)4569 b(4)g(8)4335 b(12)4099 b(16)g(20)g(24)h(28)f
(32)g(36)h(40)f(44)g(48)-6926 18841 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 398.33221
45.52457 523.52234 91.04913 0 Frame  gsave 0.6 0.2 0  setrgbcolor 
0.1 .setopacityalpha  fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.61841 91.04913 227.61841
45.52457   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 546.28418 91.04913 546.28418
45.52457   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 455.23682 91.04913 455.23682
45.52457   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 398.33221 68.28685 227.61841
68.28685   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 546.28418 68.28685 523.52234
68.28685   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 57635 22322 a
currentpoint initclip moveto
 57635 22322 a
5418 22322 a
 currentpoint currentpoint translate 1 0.68909 div 1 0.68909 div scale
neg exch neg exch translate
 5418 22322 a 0 TeXcolorgray 0 TeXcolorgray
2683 24878 13827 45 v 16510 24878 4523 45 v 2683 28137
45 3260 v 3391 26930 a Fx(Ob)36 b(eres)433 b(Quartil)p
16466 28137 V 0.9 TeXcolorgray 16510 28137 4478 3260
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18306 27059 a(E)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 20988
28137 45 3260 v 2683 28181 13827 45 v 16510 28181 4523
45 v 2683 31441 45 3260 v 3391 30363 a(Maximale)i(Punktezahl)p
16466 31441 V 0.9 TeXcolorgray 16510 31441 4478 3260
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 2451 w(D)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 20988 31441 45 3260
v 2683 31485 13827 45 v 16510 31485 4523 45 v 2683 34744
45 3260 v 3391 33666 a(Minimale)g(Punktezahl)p 16466
34744 V 0.9 TeXcolorgray 16510 34744 4478 3260 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 2730 w(C)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 20988 34744 45 3260 v 2683
34788 13827 45 v 16510 34788 4523 45 v 2683 38048 45
3260 v 3391 36970 a(Median)p 16466 38048 V 0.9 TeXcolorgray
16510 38048 4478 3260 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
10706 w(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
20988 38048 45 3260 v 2683 38092 13827 45 v 16510 38092
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 24451 24767 4567
45 v 29018 24767 2674 45 v 24451 28026 45 3260 v 0.92
TeXcolorgray 24496 28026 4478 3260 v 0 TeXcolorgray 26223
26948 a(A)p 28973 28026 45 3260 v 29682 26909 a Fr(0)p
31647 28026 V 24451 28071 4567 45 v 29018 28071 2674
45 v 24451 31330 45 3260 v 0.92 TeXcolorgray 24496 31330
4478 3260 v 0 TeXcolorgray 26274 30252 a Fx(B)p 28973
31330 45 3260 v 29682 30213 a Fr(35)p 31647 31330 V 24451
31374 4567 45 v 29018 31374 2674 45 v 24451 34633 45
3260 v 0.92 TeXcolorgray 24496 34633 4478 3260 v 0 TeXcolorgray
26265 33555 a Fx(C)p 28973 34633 45 3260 v 29682 33516
a Fr(20)p 31647 34633 V 24451 34678 4567 45 v 29018 34678
2674 45 v 24451 37937 45 3260 v 0.92 TeXcolorgray 24496
37937 4478 3260 v 0 TeXcolorgray 26238 36859 a Fx(D)p
28973 37937 45 3260 v 29682 36820 a Fr(48)p 31647 37937
V 24451 37981 4567 45 v 29018 37981 2674 45 v 24451 41240
45 3260 v 0.92 TeXcolorgray 24496 41240 4478 3260 v 0
TeXcolorgray 26292 40162 a Fx(E)p 28973 41240 45 3260
v 29682 40123 a Fr(46)p 31647 41240 V 24451 41285 4567
45 v 29018 41285 2674 45 v 24451 44544 45 3260 v 0.92
TeXcolorgray 24496 44544 4478 3260 v 0 TeXcolorgray 26310
43466 a Fx(F)p 28973 44544 45 3260 v 29682 43427 a Fr(40)p
31647 44544 V 24451 44588 4567 45 v 29018 44588 2674
45 v 47992 4800 a Fu(___/1)p 1 0 0 TeXcolorrgb 47905
6792 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 50955 54804 45 v -2331 56257 a Fy(WS)717
b(1.1)g(-)g(1009)h(Median)e(-)i(O)-60 b(A)717 b(-)h(eSquirrel)p
0 TeXcolorgray -1391 59564 a Fx(21.)p 0 TeXcolorgray
651 w(Gib)433 b(den)g(Median)g(der)g(folgenden)h(unsortierten)f(Liste)g
(an:)h Fr(8;)221 b(5;)g(4;)g(0;)g Fm(\000)p Fr(10;)g
Fm(\000)p Fr(1;)g(0)p Fx(.)p 1 0 0 TeXcolorrgb 921 62110
a(Median:)434 b Fr(0)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 59564 a Fu(___/1)p 1 0 0 TeXcolorrgb
47905 61556 a Ft(WS)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 65585 V 0 TeXcolorgray
24421 81281 a Fx(22)p 0 TeXcolorgray eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(WS)717 b(1.1)g(-)g(1010)h(Mensc)-60
b(hen)716 b(mit)h(Asylstatus)f(-)h(MC)h(-)g(eSquirrel)p
0 TeXcolorgray -1391 4800 a Fx(22.)47613 b Fu(___/1)p
0 TeXcolorgray -50901 w Fx(Das)512 b(Balk)-36 b(endiagramm)512
b(zeigt)g(die)f(Anzahl)g(der)g(Mensc)-36 b(hen)510 b(mit)h(Asylstatus)h
(v)-36 b(on)511 b(1951)921 6792 y(bis)433 b(2015.)921
9338 y(Kreuze)g(die)h(b)36 b(eiden)433 b(zutre\033enden)e(An)-36
b(t)g(w)g(orten)433 b(an.)p 0 TeXcolorgray 3713 38803
a

 3713 38803 a 3713 38803 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 3713 38803 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -39.49608 -31.01802 ] concat

 pgfs


 8102 35356 a


8102 35356 a 8102 35356 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.3985 pgfw
 0.75 TeXcolorgray
 0.0 0.0 moveto

 423.73659 0.0 lineto

 0.0 35.04816 moveto

 423.73659 35.04816 lineto

 0.0 70.09631 moveto

 423.73659 70.09631 lineto

 0.0 105.14447 moveto

 423.73659 105.14447 lineto

 0.0 140.19264 moveto

 423.73659 140.19264 lineto

 0.0 175.2408 moveto

 423.73659 175.2408 lineto

 0.0 210.28896 moveto

 423.73659 210.28896 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 12.8405 -2.835 moveto

 12.8405 0.0 lineto

 25.681 -2.835 moveto

 25.681 0.0 lineto

 38.5215 -2.835 moveto

 38.5215 0.0 lineto

 51.362 -2.835 moveto

 51.362 0.0 lineto

 64.20251 -2.835 moveto

 64.20251 0.0 lineto

 77.04301 -2.835 moveto

 77.04301 0.0 lineto

 89.88351 -2.835 moveto

 89.88351 0.0 lineto

 102.72401 -2.835 moveto

 102.72401 0.0 lineto

 115.56451 -2.835 moveto

 115.56451 0.0 lineto

 128.40503 -2.835 moveto

 128.40503 0.0 lineto

 141.24553 -2.835 moveto

 141.24553 0.0 lineto

 154.08603 -2.835 moveto

 154.08603 0.0 lineto

 166.92653 -2.835 moveto

 166.92653 0.0 lineto

 179.76703 -2.835 moveto

 179.76703 0.0 lineto

 192.60754 -2.835 moveto

 192.60754 0.0 lineto

 205.44804 -2.835 moveto

 205.44804 0.0 lineto

 218.28854 -2.835 moveto

 218.28854 0.0 lineto

 231.12904 -2.835 moveto

 231.12904 0.0 lineto

 243.96954 -2.835 moveto

 243.96954 0.0 lineto

 256.81006 -2.835 moveto

 256.81006 0.0 lineto

 269.65056 -2.835 moveto

 269.65056 0.0 lineto

 282.49106 -2.835 moveto

 282.49106 0.0 lineto

 295.33156 -2.835 moveto

 295.33156 0.0 lineto

 308.17207 -2.835 moveto

 308.17207 0.0 lineto

 321.01257 -2.835 moveto

 321.01257 0.0 lineto

 333.85307 -2.835 moveto

 333.85307 0.0 lineto

 346.69357 -2.835 moveto

 346.69357 0.0 lineto

 359.53407 -2.835 moveto

 359.53407 0.0 lineto

 372.37459 -2.835 moveto

 372.37459 0.0 lineto

 385.21509 -2.835 moveto

 385.21509 0.0 lineto

 398.05559 -2.835 moveto

 398.05559 0.0 lineto

 410.89609 -2.835 moveto

 410.89609 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 6.42024 -4.25209 moveto

 6.42024 0.0 lineto

 19.26074 -4.25209 moveto

 19.26074 0.0 lineto

 32.10126 -4.25209 moveto

 32.10126 0.0 lineto

 44.94176 -4.25209 moveto

 44.94176 0.0 lineto

 57.78226 -4.25209 moveto

 57.78226 0.0 lineto

 70.62276 -4.25209 moveto

 70.62276 0.0 lineto

 83.46326 -4.25209 moveto

 83.46326 0.0 lineto

 96.30377 -4.25209 moveto

 96.30377 0.0 lineto

 109.14427 -4.25209 moveto

 109.14427 0.0 lineto

 121.98477 -4.25209 moveto

 121.98477 0.0 lineto

 134.82527 -4.25209 moveto

 134.82527 0.0 lineto

 147.66577 -4.25209 moveto

 147.66577 0.0 lineto

 160.50629 -4.25209 moveto

 160.50629 0.0 lineto

 173.34679 -4.25209 moveto

 173.34679 0.0 lineto

 186.18729 -4.25209 moveto

 186.18729 0.0 lineto

 199.02779 -4.25209 moveto

 199.02779 0.0 lineto

 211.86829 -4.25209 moveto

 211.86829 0.0 lineto

 224.7088 -4.25209 moveto

 224.7088 0.0 lineto

 237.5493 -4.25209 moveto

 237.5493 0.0 lineto

 250.3898 -4.25209 moveto

 250.3898 0.0 lineto

 263.2303 -4.25209 moveto

 263.2303 0.0 lineto

 276.0708 -4.25209 moveto

 276.0708 0.0 lineto

 288.91132 -4.25209 moveto

 288.91132 0.0 lineto

 301.75182 -4.25209 moveto

 301.75182 0.0 lineto

 314.59232 -4.25209 moveto

 314.59232 0.0 lineto

 327.43282 -4.25209 moveto

 327.43282 0.0 lineto

 340.27333 -4.25209 moveto

 340.27333 0.0 lineto

 353.11383 -4.25209 moveto

 353.11383 0.0 lineto

 365.95433 -4.25209 moveto

 365.95433 0.0 lineto

 378.79483 -4.25209 moveto

 378.79483 0.0 lineto

 391.63533 -4.25209 moveto

 391.63533 0.0 lineto

 404.47585 -4.25209 moveto

 404.47585 0.0 lineto

 417.31635 -4.25209 moveto

 417.31635 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw

0.5 TeXcolorgray
 0.0 0.0 moveto

 4.25198 0.0 lineto

 0.0 35.04816 moveto

 4.25198 35.04816 lineto

 0.0 70.09631 moveto

 4.25198 70.09631 lineto

 0.0 105.14447 moveto

 4.25198 105.14447 lineto

 0.0 140.19264 moveto

 4.25198 140.19264 lineto

 0.0 175.2408 moveto

 4.25198 175.2408 lineto

 0.0 210.28896 moveto

 4.25198 210.28896 lineto

 423.73659 0.0 moveto

 419.48459 0.0 lineto

 423.73659 35.04816 moveto

 419.48459 35.04816 lineto

 423.73659 70.09631 moveto

 419.48459 70.09631 lineto

 423.73659 105.14447 moveto

 419.48459 105.14447 lineto

 423.73659 140.19264 moveto

 419.48459 140.19264 lineto

 423.73659 175.2408 moveto

 419.48459 175.2408 lineto

 423.73659 210.28896 moveto

 419.48459 210.28896 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 210.28896 lineto

 423.73659 210.28896 lineto

 423.73659 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [0.0 1.0 -1.0 0.0 9.55714 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1951)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 22.39764 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1953)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 35.23814 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(1955)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 48.07864 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1957)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 60.91916 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1959)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 73.75966 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1961)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 86.60016 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1963)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 99.44066 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(1965)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 112.28117 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1967)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 125.12167 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1969)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 137.96217 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1971)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 150.80267 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1973)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 163.64317 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(1975)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 176.48369 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1977)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 189.32419 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1979)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 202.16469 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1981)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 215.00519 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1983)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 227.84569 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(1985)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 240.6862 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1987)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 253.5267 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1989)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 266.3672 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1991)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 279.2077 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1993)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 292.0482 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(1995)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 304.88872 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1997)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 317.72922 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(1999)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 330.56972 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2001)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 343.41022 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2003)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 356.25072 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(2005)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 369.09123 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2007)8102 35356
y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 381.93173 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2009)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 394.77223 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2011)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 407.61273 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(2013)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 420.45325 -27.69745 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(2015)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -8.50119 -3.13689 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(0)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -31.19414 31.91125 ] concat

 pgfs



 0 setgray

8102 35356 a Ft(50.000)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.17552 66.95941 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(100.000)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.17552 102.00758 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(150.000)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.17552 137.05574 ] concat

 pgfs



 0 setgray
 8102 35356
a Ft(200.000)8102 35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.17552 172.1039 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(250.000)8102
35356 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -36.17552 207.15207 ] concat

 pgfs



 0 setgray
 8102 35356 a Ft(300.000)8102 35356 y


 pgfr

 restore

 restore

 0.0 0.0 moveto

 423.73659 0.0 lineto

 423.73659 210.28896 lineto

 0.0 210.28896 lineto

 closepath

 clip

 newpath

 save
 0 0 1 TeXcolorrgb
 /pgffc{0.7 0.7 1 setrgbcolor}def

 /pgfsc{}def/pgffc{}def

1 0.4 0.4 TeXcolorrgb
 196.2697 2.83484 5.00282 0.0 pgfe

 168.23117 2.83484 11.42308 0.0 pgfe

 154.2119 2.83484 17.84332 0.0 pgfe

 105.14447 2.83484 24.26358 0.0 pgfe

 77.10594 2.83484 30.68384 0.0 pgfe

 98.13484 2.83484 37.10408 0.0 pgfe

 45.5626 2.83484 43.52434 0.0 pgfe

 37.15105 2.83484 49.94458 0.0 pgfe

 31.54333 2.83484 56.36484 0.0 pgfe

 28.03853 2.83484 62.7851 0.0 pgfe

 25.93564 2.83484 69.20534 0.0 pgfe

 23.83275 2.83484 75.6256 0.0 pgfe

 23.13177 2.83484 82.04584 0.0 pgfe

 22.43082 2.83484 88.4661 0.0 pgfe

 23.13177 2.83484 94.88635 0.0 pgfe

 21.72986 2.83484 101.3066 0.0 pgfe

 22.08034 2.83484 107.72685 0.0 pgfe

 22.43082 2.83484 114.14711 0.0 pgfe

 23.13177 2.83484 120.56735 0.0 pgfe

 23.48225 2.83484 126.98761 0.0 pgfe

 23.83275 2.83484 133.40785 0.0 pgfe

 23.83275 2.83484 139.82811 0.0 pgfe

 23.83275 2.83484 146.24837 0.0 pgfe

 23.83275 2.83484 152.66861 0.0 pgfe

 21.02888 2.83484 159.08887 0.0 pgfe

 23.83275 2.83484 165.50911 0.0 pgfe

 21.02888 2.83484 171.92937 0.0 pgfe

 21.02888 2.83484 178.34962 0.0 pgfe

 23.83275 2.83484 184.76987 0.0 pgfe

 19.62697 2.83484 191.19012 0.0 pgfe

 20.32793 2.83484 197.61037 0.0 pgfe

 25.93564 2.83484 204.03062 0.0 pgfe

 26.28612 2.83484 210.45088 0.0 pgfe

 26.6366 2.83484 216.87112 0.0 pgfe

 26.98708 2.83484 223.29138 0.0 pgfe

 27.33755 2.83484 229.71162 0.0 pgfe

 27.33755 2.83484 236.13188 0.0 pgfe

 26.98708 2.83484 242.55214 0.0 pgfe

 26.98708 2.83484 248.97238 0.0 pgfe

 25.93564 2.83484 255.39264 0.0 pgfe

 25.93564 2.83484 261.81288 0.0 pgfe

 42.05779 2.83484 268.23314 0.0 pgfe

 38.55296 2.83484 274.6534 0.0 pgfe

 27.33755 2.83484 281.07364 0.0 pgfe

 25.93564 2.83484 287.4939 0.0 pgfe

 59.58186 2.83484 293.91414 0.0 pgfe

 56.07706 2.83484 300.3344 0.0 pgfe

 52.57224 2.83484 306.75465 0.0 pgfe

 54.67513 2.83484 313.1749 0.0 pgfe

 21.02888 2.83484 319.59515 0.0 pgfe

 10.51443 2.83484 326.0154 0.0 pgfe

 10.51443 2.83484 332.43565 0.0 pgfe

 11.91637 2.83484 338.85591 0.0 pgfe

 12.61732 2.83484 345.27615 0.0 pgfe

 14.01926 2.83484 351.69641 0.0 pgfe

 17.52408 2.83484 358.11665 0.0 pgfe

 21.02888 2.83484 364.53691 0.0 pgfe

 24.5337 2.83484 370.95717 0.0 pgfe

 25.23466 2.83484 377.37741 0.0 pgfe

 28.03853 2.83484 383.79767 0.0 pgfe

 33.9967 2.83484 390.21793 0.0 pgfe

 35.74911 2.83484 396.63817 0.0 pgfe

 38.55296 2.83484 403.05843 0.0 pgfe

 38.55296 2.83484 409.47867 0.0 pgfe

 49.06741 2.83484 415.89893 0.0 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath
 0 0 1 TeXcolorrgb 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 69.26213 221.72363 ] concat

 pgfs



 0 setgray

8102 35356 a Ft(P)-31 b(ersonen)369 b(mit)h(Asylstatus)h(in)e
(\326sterreic)-31 b(h)369 b(zum)g(Jahresende)g(1951-2015)8102
35356 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 3713 38803 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 0 TeXcolorgray 42452
45293 a Fq(Quelle:)314 b(Statistik)g(A)-26 b(ustria)p
0 TeXcolorgray 1062 48609 44260 45 v 1062 51672 45 3064
v 1770 50469 a Fx(1956)435 b(gab)f(es)g(mehr)f(P)-36
b(ersonen)433 b(mit)g(Asylstatus)h(als)h(2015.)p 42912
51672 V 1 0 0 TeXcolorrgb 43621 50473 a Fv(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 51672
V 1062 51717 44260 45 v 1062 56513 45 4797 v 1770 53577
a Fx(V)-108 b(on)434 b(1951)h(bis)e(1983)i(gab)f(es)f(insgesam)-36
b(t)434 b(mehr)f(P)-36 b(ersonen)433 b(mit)h(Asylstatus)g(als)1770
55569 y(v)-36 b(on)434 b(1984)h(bis)f(2015.)p 42912 56513
V 1 0 0 TeXcolorrgb 43621 54447 a Fv(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 56513 V 1062 56558
44260 45 v 1062 61613 45 5056 v 1770 58418 a Fx(Nac)-36
b(h)434 b(1956)h(gab)f(es)f(mindestens)g(ein)h(Jahr)f(mit)h(mehr)f(als)
h(100)217 b(000)435 b(P)-36 b(ersonen)1770 60410 y(mit)434
b(Asylstatus.)p 42912 61613 V 45277 61613 V 1062 61657
44260 45 v 1062 66454 45 4797 v 1770 63517 a(Das)347
b(absolute)f(Maxim)-36 b(um)346 b(der)g(P)-36 b(ersonen)345
b(mit)h(Asylstatus)h(im)f(gegeb)36 b(enen)345 b(Zeit-)1770
65509 y(raum)434 b(wurde)f(2015)i(erreic)-36 b(h)g(t.)p
42912 66454 V 45277 66454 V 1062 66498 44260 45 v 1062
71295 45 4797 v 1770 68358 a(Das)375 b(absolute)f(Minim)-36
b(um)374 b(der)f(P)-36 b(ersonen)374 b(mit)g(Asylstatus)g(im)h(gegeb)36
b(enen)373 b(Zeit-)1770 70350 y(raum)434 b(wurde)f(1981)i(erreic)-36
b(h)g(t.)p 42912 71295 V 45277 71295 V 1062 71339 44260
45 v 0 TeXcolorgray 24421 81281 a(23)p 0 TeXcolorgray
eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6921 a Fy(WS)597
b(1.1)h(-)g(1011)f(Organism)-60 b(us/Viren)596 b(-)i(MC)g(-)g(Thema)f
(Mathema-)-2331 9944 y(tik)717 b(Sc)-60 b(h)g(ularb)60
b(eiten)715 b(6.)i(Klasse)p 0 TeXcolorgray -1391 13251
a Fx(23.)p 0 TeXcolorgray 651 w(V)-108 b(on)527 b(24)i(Sc)-36
b(h)g(\374lerinnen)525 b(und)i(Sc)-36 b(h)g(\374ler)527
b(einer)g(Klasse)i(wurde)e(die)h(K)-36 b(\366rp)36 b(ergr\366\377e)528
b(\(in)g(cm\))921 15243 y(getrenn)-36 b(t)501 b(nac)-36
b(h)502 b(Bursc)-36 b(hen)501 b(und)h(M\344dc)-36 b(hen)501
b(erhob)36 b(en)502 b(und)f(die)h(Daten)h(jew)-36 b(eils)504
b(in)e(F)-108 b(orm)921 17235 y(eines)434 b(Bo)-36 b(xplots)434
b(dargestellt:)p 0 TeXcolorgray 0 TeXcolorgray 3170 37842
a
 currentpoint currentpoint translate 0.27087 0.27087 scale neg exch
neg exch translate
 3170 37842 a 4002 37842 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 1342.40587 a add def
/d 0.0 a add neg def /h 619.57219 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4002 37842 a -454042 32958
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 4666.24994
56.90549 4893.87189 227.62195 0 Frame  gsave 0.6 0.2 0  setrgbcolor
 0.10 .setopacityalpha  fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 4865.41914
341.43292 5320.66304 512.14938 0 Frame  gsave 0.6 0.2 0  setrgbcolor
 0.10 .setopacityalpha  fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4410.17525 227.62195
4410.17525 56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5178.39932 227.62195
5178.39932 56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4765.83453 227.62195
4765.83453 56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4666.24994 142.26372
4410.17525 142.26372   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5178.39932 142.26372
4893.87189 142.26372   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4637.7972 512.14938 4637.7972
341.43292   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5406.02127 512.14938
5406.02127 341.43292   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5036.1356 512.14938 5036.1356
341.43292   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4865.41914 426.79115
4637.7972 426.79115   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5406.02127 426.79115
5320.66304 426.79115   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-454042 32958 a
tx@Dict begin  { 4176.86282 439.4906 } PutCoor PutBegin  end
 -454042 32958 a 1882 x Fb(Bursc)-72 b(hen)-454042
32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958 a
tx@Dict begin  { 4176.86282 160.68358 } PutCoor PutBegin  end
 -454042 32958
a 1882 x Fb(M\344dc)g(hen)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042 32958
a -454042 32958 a
tx@Dict begin  { 4623.57082 315.82562 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(163)-454042
32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958 a
tx@Dict begin  { 4851.19276 315.82562 } PutCoor PutBegin  end
 -454042 32958
a 1735 x Fb(171)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042
32958 a
tx@Dict begin  { 5021.90923 315.82562 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(177)-454042 32958 y
tx@Dict begin  PutEnd  end

-454042 32958 a -454042 32958 a
tx@Dict begin  { 5306.43666 315.82562 } PutCoor PutBegin  end
 -454042 32958 a 1735
x Fb(187)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958
a
tx@Dict begin  { 5391.79489 315.82562 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(190)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042
32958 a -454042 32958 a
tx@Dict begin  { 4395.94887 31.29819 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(155)-454042
32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958 a
tx@Dict begin  { 4652.02356 31.29819 } PutCoor PutBegin  end
 -454042 32958
a 1735 x Fb(164)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042
32958 a
tx@Dict begin  { 4737.38179 31.29819 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(167,5)-454042 32958
y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958 a
tx@Dict begin  { 4879.64551 31.29819 } PutCoor PutBegin  end
 -454042 32958 a 1735
x Fb(172)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042 32958 a -454042 32958
a
tx@Dict begin  { 5164.17294 31.29819 } PutCoor PutBegin  end
 -454042 32958 a 1735 x Fb(182)-454042 32958 y
tx@Dict begin  PutEnd  end
 -454042
32958 a 152601 37842 a
currentpoint initclip moveto
 152601 37842 a 3170 37842 a
 currentpoint currentpoint translate 1 0.27087 div 1 0.27087 div scale
neg exch neg exch translate
 3170
37842 a 921 41494 a Fx(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an!)p 1361 44527 43662 45 v 1361
47590 45 3064 v 2070 46387 a(Die)h(K)-36 b(\366rp)36
b(ergr\366\377en)434 b(der)f(Bursc)-36 b(hen)432 b(streuen)h(st\344rk)
-36 b(er)433 b(als)i(jene)e(der)g(M\344dc)-36 b(hen.)p
42613 47590 V 44978 47590 V 1361 47634 43662 45 v 1361
50778 45 3145 v 2070 49575 a(Ca.)434 b Fr(50)221 b(\045)435
b Fx(der)e(Bursc)-36 b(hen)432 b(sind)h(gr\366\377er)h(als)h(171)217
b(cm.)p 42613 50778 V 44978 50778 V 1361 50823 43662
45 v 1361 53886 45 3064 v 2070 52683 a(Der)433 b(Quartilabstand)g(ist)h
(b)36 b(ei)433 b(den)g(M\344dc)-36 b(hen)433 b(kleiner)h(als)g(b)36
b(ei)434 b(den)f(Bursc)-36 b(hen.)p 42613 53886 V 1 0 0
TeXcolorrgb 43322 52686 a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 44978 53886 V 1361 53930 43662
45 v 1361 57074 45 3145 v 2070 55871 a Fx(Et)g(w)g(a)433
b Fr(75)221 b(\045)435 b Fx(der)e(M\344dc)-36 b(hen)432
b(sind)i(h\366)36 b(c)-36 b(hstens)432 b(172)217 b(cm)435
b(gro\377.)p 42613 57074 V 1 0 0 TeXcolorrgb 43322 55834
a Fv(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
44978 57074 V 1361 57119 43662 45 v 1361 60263 45 3145
v 2070 59060 a Fx(Ca.)f Fr(25)221 b(\045)435 b Fx(der)e(Bursc)-36
b(hen)432 b(sind)h(mindestens)g(187)217 b(cm)434 b(gro\377.)p
42613 60263 V 1 0 0 TeXcolorrgb 43322 59023 a Fv(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 44978
60263 V 1361 60307 43662 45 v 47992 13251 a Fu(___/1)p
1 0 0 TeXcolorrgb 47905 15243 a Ft(WS)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 64335
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(24)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

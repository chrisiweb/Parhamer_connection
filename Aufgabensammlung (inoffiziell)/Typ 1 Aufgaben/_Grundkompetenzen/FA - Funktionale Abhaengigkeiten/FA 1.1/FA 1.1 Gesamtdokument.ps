%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: E:/Dropbox/GK-BSP/FA - Funktionale Abhaengigkeiten/FA 1.1/FA 1.1 Gesamtdokument.dvi
%%CreationDate: Thu Jul 20 07:35:35 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathSymbols8-Regular
%%+ wasy10 LMRoman10-Regular MSBM10 LMMathItalic8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "E:/Dropbox/GK-BSP/FA - Funktionale Abhaengigkeiten/FA 1.1/FA 1.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.07.20:0935
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C38B48C2012E0EA
444924FBC760A5E32C9378F20C4F652DF6A4537FC25299BE55008332B6ABA853
046FF3647FED0AFF1F33FB13863341D127CEA81A0F8D82CA44B3B19D36FF290B
4BD1B807749BBF6077B8F99CCE03F54E22E2B141D5417FC4E56B370A532044B4
4E8770C72E6CDA1458BC8D2C258ABBDAB9638306F1E4C6D8B2386E52CCE80CD2
A5F47EAB3653BB035A95679F52ADC07C1FCD50B0605AB38637ED07E3102DEE7F
67FCEDC487CC1BA684FAD744DFE06470630DD70BA62817A18843C3821806D490
FAEA107416545AC5106B50E0674260A62A03E86241BE8CC3D19649FFDA8628E8
84FD40CCBD10AF2F9E73FC53343C37D035CAA7D31CD07FBDAE193A1BF3638554
5021E171175546E95080E8D1DA966CC6C5F393674A8246B77CECFCB30C3FD83B
90C35BD22D973C5391F4698FC3F4539CE4608F3298676F7C01C37B146AE67EF8
4F1F5E7C8F0C71AB70C258B7DE3EBA43140088A6D1733BEB926D6214D9DAE96C
147BDA9A509E836553DE2364CC7D86C734CD89468B7A86B44B6B208FAD03303F
2FA351983B1A121ECDF4E0549CB67637EC5A8A61DFFB309345F7B7AD630DF09E
05AA6EA1701F0714CCBF4C93141F216434DE96781008EFFFA193E820476783AE
DDDDEACA28FC6ED53FA7C30A4103D940C694F5CC879AA2DF161D987D3FB9166F
A8E9F005EAE8DCFFE467684261D5EEC67FF807A67DC28BFC7E107366EB90C46F
05A16F53C0CF43BCDF253037AC22DA2F2E94F0A49B0FE33E9FD7E32CEB4BF068
8D9C60074D267296BC8E4E9E45FE60C5899620D78FBD1A7C503A4AC993B779FD
083B9A7B48B7C2BA05987C5380E483C009BBBAB853C7CA8BB392BF4115CACFBE
39BD2CED52B4D8060D3D63E0E3A103114F1B9BF5D5A1B527CC17BF2A3901F690
6BDA702A7B748BAD4C7AC506E8B77AFA780A2042A3D87DBB0331E484F98F9A90
8197D64BFF9FEDBB6BFCEE1DA1950F7B2F8197E65A1F53EC6EE301052AD2F95E
518B23E474505DEC4BD477720A3CA0382C8A35D488572448075AFF1D05EB40F7
1E0B382B75F8BB9238FD990705AFCCDD41AFB4B6075BCDD7A2F33C2B08FDCC39
1B079CC9337B035AB1A4DE83C1BBE5D36D1970CB6B294245AF321453D0C0A99F
C1556971FF755ACEC36C2B11B61A102C218D349EACDE8BF11E127A4CD4A6254E
05BA8BCD8D81C0AEBD94ED6A8AB0E880B9A54370F9B0D45D3AB0783C6B3CEA84
8F58B62E22DD37BBAEF229694D622CEB593224C2B7A12D22E7B104FD3B0ABABD
E1231EBE22FA9C16A99F022DBABF7470D01AF01EE0A3AE083ABD3D15D35D3F4E
53D704E676BDAF1E8D1F04B802DA92D30F58ABFA69C6A343150FF426FE6ECC35
FA09D1820DED40C13988B53D9BAEDB278D6EFFD0E2C0860919BE1666BA8F0307
FAEBA3D0188F9544507AF7B88817F6B8559DAADD3733CBEB513E471DC2535545
27B1305A4C24C03B8EF5E00B6C1951924B57109A66E8C3A7E7FCEB8230ED1900
9C3AC514C448C211A815C21778467B59F57D72DC9A257F0A12C9FAE3393737B2
A1D2BD8A093A71968F6A1D49C8C6B6CECE5366A3D542858A999CD9497C1BE8E8
6DD587B0D9644FC3AF55D2B7B65BA7B8655766834344E850E1B5D871E641D3D1
16748541615D56D376695A08265882F50B3CB5B448A549FC832E0183DF02A5F6
D86FC175BA41FEF1710CA8510149D2F0A889CD15BA186E34D026D115736B7B82
A082EFD8BE3496797A7456D9ED14C1F185C4CED203D3000DAE581248C423CD7D

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE373D9861525270E0F672BE94EF236EA6A73421
3C4837DE148223916BD6808FBBF4CA6E666ADBA1D32034287198BC307CC4C673
4157442A161BD5DF3E7B535E054EE982F07720FEEA788AFC23125417616BFCB4
EEBFB70B2C76C70BF1E8FA4958CCFE84FFAB47972C1A2CA3AF8A82EFB76ED953
7071937D65F2C9E7DE6379350A87BFF8703A1B347EE8384340E16391E2592DE7
1EA0D29B9D28A1DFFAA2B2B842236E05127EDB98D97EB284E646BDAF7B4C3714
38B2A60CBCEF2D2B7B1724C246FB0CA30B71F1D78D86D1E3A6A4953F28264E91
3410092703BB738AEBD09701B726637F67F7843C67AF740B9F77A8906FA47676
D6DC9F7334D7A878F705C8AC17A3CF15996A0516B254796957A7CB62A2CB7315
CCCD2CCA5135F2609271C38C5994F95051E4DDF7E7AD067E77CA02BF85E9D2C9
68A499380262833F86B60112DE1653850D75302AFDA55CFF2BFE1280D518D25A
D754E54C9C1ACD42016497BC2AC2DE882BEEEB3406B75AE04EA3B46A207A3C72
080283484B8E4F2ADE38121C8D38A5D50F0EF74BA7F9A0A6140258BB47D2205E
1721A035AFAD06EB3AA8D08711CF590DE17FF830AA0407992804C67846C849D3
3DA63DF5D39A716877310ED1518D549AD310C00338A2A382DA7679520E0F3F23
23EEE0A97E2581AC3397A4706F6F9DA84C80BAD1812A8ED9884F88508F3A9473
71995C198FA48101D29D1CAF6E3E196F9FA0434C68C55BD3929D79AA0ED72D76
2C02219BD6F371AB09E42C79109816F687B0D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCBC43190EE840144F9F053FC85041782B25B9AD3F9717B8AC
5A4A9ACB17B620DDA2C76AA0DAFE9BBDB18C93484CDC022ABE678A7F2E298A7F
AD967A2EA7DC41B8475B6F39E58816C7A84839C069CFBB069C10AF00358CFFC0
C1779D733F531FF661381DC983DE2858E791FBE5A690808349DB8ECBF43DB214
9627D250AC3F036BF1377D071EA58A0D10AFF07F15A799749C255C27EBF31A30
880B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FD8B9B57CB16B5DF771D52B1
8ABD206531B6B4968A465C12CF8259422AD260702C4419860A94D0E467A9832E
FAF798C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2016B605576CD6872771
4EBCDAB1E069FB552B244921DD51E77A5E23628762E804EDDD045FA702F68652
A4BAEF9590CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53FE4B506FA04FC21
0E9E3DD63F00738AFFF0F2903EFF7EDA73C577BC8C1DEDC1B91AE582EFF2AD2B
9B2D6D097A7C9E12525061EDF9DB348304CE2D53493AEFE8B0CA716456CFCDC2
DE5A13ED881088B6B60682F4DD99DD79DED8693042FC09D14C99A69FCCAE3D3B
AA6C3EFEBAACF1427FE2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D0C36592
4B43BF6CE43C9140AA5F8FE895E4093068661D8BF9F0DA75C9221E3F45BC7A8F
8AF3361EE4B989D3A028431C635C595DD6FC8268C8DABAEDDE41FBF8349AADC2
125874360EED1C72A524A9E19BED13D137DFE3F0185CABE18CC0C89440046421
9578846685909845C2A0BE9CB7DF7AC21D9B88457317ED0F6CF9FF5A2907997E
B6B068D2AF9356F39EC3901F4654DA943F55F75330C1BD055F17E7340B4E1A11
0BF7ED2BBBB9AD9B8AB909430843B101906D59FEA0253535C8A6DD2D07F4B95C
A0B01830315A8BE52B960F67D6D533ECA263D30C85CD8FFA9D4D5A11EBF823F0
CB12B9B888942681DFC2715F371A8AC15F1687C92D7BF00C6F8129E347C6489F
D4FC798AD913A7F0EAA156E3EF0EEA375E66905D49892B70588D708BB273A253
C5266654D1AA1FDD19A24674F7A8D5A62B6009C8031D505D69DBB5F5AD46B06C
B8429E2CEF1DE4692B1E2074B7116C3845EEA16B5282A7375B3C445C604C440A
08A67EE8CC94D5596272F4B60F7E43809709F8E6802082807F46295D607FAC37
F0413E0CD5D53DFB5225C201ADA22CA8D733D3A12A1999ED21D5104F79B84AB2
852CAC651AF16CAC17111963E719BC2BFF4C7363937480B58CD2256C232F8973
C6C5710DB3ABF8562E1D016CFFBCD753899CB8F87ED5B96927C3992D0E2576D9
850BC6F08AC6F1709071BF6A734F6CDD2CDBB4F35F7D6497774B221B16503354
4CC77116BA609E37E9038CEFC41BA172055892C47614A9035E7EBE5EB5D606A3
1F7EEDF4F0298C9AE254619CFD825A5092052D289A653949F11C130F37E27A62
B17E62CF33D2262F538E6D307965D35D68353E1FF42EA4870FE04CECD30821AC
842CFEDCAB3CF67B65D8B53A376CBC741F1FF0C7AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EB06541D232D35EC5F35D5AD07347B69DBC55E6DD283F464E4
8DFA8BC885FAE09A9446DFDF923961AE5C061625F587D00DC33064E82B283AA4
6D876F0DD9AE8C10E283282932A59B9D4E948DAFC6D574A33B9CE67A5639E34F
1BC8C67243B29E58C9B86656C5F1C8B98E225001413A529017E83B411064A150
661B07ED13B44301FB4F90C6FFD8CCEB9BB7623FF9BE5D7D99B31E627EDABFD4
E30CA8F028FCBF0126FC145DF78DF99D9FDD85AEFAAE39B8126C72F915E90592
641FE99B4D86F2CAB2B61F652CC956CA883E95575A8B730A57721EE9D678A759
A85F77BB9E2D9881A50C3765942F2321EB09ED414AA9861BFEDEB1D20D79D212
AAF2C9C5948B3F7A5E6CBCB27417EC27CAFE8BD84BB1AA7F88CB97755F3116CE
5E9F6A439198754DB442931D89A2D64E9CEFFBF0E3792A219D478D94E26C289E
8BB4BE24DEFEE5CEB9A8CCD78C0AA830E7BE21DCE2DF12801358123442F4A15C
F2683E283A2FCB087C045C601038EB4640358CD2D6FCBD70A3B06ABE5A84DCB7
76DC7ED250F98A9D54B9F2AF8132B8E428CCFDA5D6B9B5DDBAB7FA350C8593FB
3FFB4653C9038539930ABF7303F5430A40F35CA40C36D30FA23AE8C9F9526136
0C46E31E91520E8F904FF4D138518DD564140AAB4C93B7DC864E1C505E451409
F058BBFC0301087271EE7DC82527A424073F982C9EC093D7F96770C73499AC0A
FC3AECEFC6A7FECBAAB4B15C12C70309D5E26382850017B6295A2E7DD30C7B3A
DCAB60AD76E6CCA5E6E543778DA682152ED56EB6794BBB90FBF34BBEAF282A69
007BF67B5399E7912CD3F2EAB2010152363BF9CE7D96355721B901A280F2F719
812D43D7807770C927143018447A70FD175DAEEC690CF237B5C9AA6C81744861
352351811FF96B100BB44EE70247FA3B66EC125FDE2F6D290EAF0ACBE760613A
FF8C32B8224C48E5BDC02294CDD1896E3E294BD4A0ADDFF4C3ECD7CC083D7025
2227836371FF838073BD193B932D3B9A492B777AA228E29D1EFBF5767C3738D7
796220D6EF04EA845A6241FF262C6E8C4C3F2D1052EE73890A1A610551A724AB
B6B01BB5BD1FC5191C9F97C7886BE23AA1833D2A527FC19F8695A97E7AB80C1C
AE38C9776C9C34508263844E00D8209A0D7CDED19AF65440A4E3530340F8347D
B6277982BCA979CEE6F9C59B136B17475923D43279785B68529E668CFCB1710F
3599B4A79E15A7E232176C51FAE6DF02EEACF5E0C9F80EC36EECF609047DB5AB
1D11EF4A587E569A48CB4193904B2140CDFEEF80ACA698BB223B6648346DAB2D
48777BA1640465F140E43A7EA149580132082317DD4A19E976C588EB021DF2C5
9722F53286DDB254A6DB1E5706DDC16EB65C37EFF572CA73E4E558E2B016B13D
D10CA06A9190F9D3FE540BA2788C932D6C9C5F29AE7C893FD921D33DC8A53862
B4ED64CD18471A49B62240FEF22F4D82468A334B2DBCC1F6C1B64632B2FDBEC9
FE7C7B0BD419C0E404F9ECD6C57341C2275C644BCFF020E44A3F8143BCB563C8
E997DA7C363799EB647602502B8190281BA5F0ACA49F377C3ED0E15235B3B2C4
3334107F411F9774670A47B8126AE6231E3C48243AA2E95DF0659993DF1C0DE5
51DBEFB89B829BEDB5E3DD60F5433EE1E6728C071FC4AEAEA92180BFD3F7FD1D
7C0305D67A11D28A41208CB957DE3F1C80A5CF302500D3F3428D883D166829B2
2390AD4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D795C22E6082FC4949E9D
7C1D19CF976D0581EAAAEB4173E65C1A4DE2C960FC8DD8350723042CB80FA217
A89F4D2F390B78314EDF4F4361872DFA2C65EB44D5CB662BE0B6D6330202E77B
33EC7CF4718DD267EEFF4C0000F2F310CBB537D6DE0462CA73D02FBE832FF1D4
5F6BCEB846908EB9EECF9081DEC277C2C3488C24B6FFB6FC050C642356637C4D
00623F8A7C29ADFBEE0043D4664253B09D52359DF555DFC8C27356F012F46903
9685D8BE9CEABA2B654F062B5BB10DAE3331C3E3C1B56AB328435C9964D41ED7
7C7F601B0E36197BFA431548DC233902D54DA507EDE4290B983A7CFD19B9DB65
CB41D0CE65F05CC6ADE253328F2C21B7CBDECEDA8B484FD4DA121C010A40A2D1
7FA4DB0875E02748AE1A891F2571C84066CE46D16111E58FCCF943E438072C9B
0E5A5B285AEDA6373F36A72083CB73F5E1E9809CE9BEF643C2568A3365B3C154
0A2FAFD4A82578A00844E981B2B41210D530661670AD0B2C4E0EBFE1D6D0CA54
4386D209958E82E39C166F96689652868F9B935DD1741B08DF798524E8DA87AA
538D03912A344B0FB13575A3128991794AD36351F8A8B4A09FC038430EDE5FDD
27935452BCDC35CAA1362E0BA23C6B25B4A98A4551A971DCF562769FC5E4767C
4CE91F8896FF9A59553D82942B1302FD3BADDE29F623EF50C9B12A3574E5A7AF
1258A15ED5674C3AAAC4CAA8344432F60E7327778D7B70BABC5FFD5F430DA7E2
26941D3C4B6C268D82812A9612E5908DDE75628CE253F50B77A9DAA1A0BBF3FC
F0D83E93BF9A9108594816480C7CF84A535127E4D567B1F9CF94C24746C3FDA1
7F2C848A47115838262BED2401104FFE76273D0A94C8C2DE572535D55B1F77CD
AB45C56020D4EDBF4044F0E247D957956045B16131110171D7588606F7AB41B4
29CBF347632CFE037499C0CE93E01EC89F0A6EEB2AC5F91494F51D54FDC55115
DCC0F5B0DD223E235930A60846247C0C8E5287234F09C3F961C2AB3C586AF168
9FE77C7C772DDD390EF466D40B6C02312803610B2F3EF9F080C1730B1A0DEEA5
B45583AD7F4BD5C4C52C626E5DDEC00A1C9E7A650438AF260A41F951A57260CA
E36E35E6CDF1C75CFB93CF0F6B4392FDC6B233E3899664CA77945407382F6991
01240F732E1D50304950D905D6AFB4390B62A3173B522240F0D3AB7438147310
A056B151C15F895BCF076E4B6F85A94D6214459061128AA6951DF21502BD93CF
19040B8171AAF8F654C771BAEA6C706C3433977EC0AC0CB08D9B02969B72542B
EBD5C3CD1CD7D37445D9DC55D0A60768758642CA225C392102C671FE3892C7AF
AA4221539F3C13CB01810FA4CAD10F821F886FB4496EB11CBD14B5555F3E6889
2A4477C2F4EFCB6D11B27F8A1E3C95DDE4CA70E9A40C4952CF9DBFCC96B5155C
7598D6D71114D161E132C41DCC0344ABE68C2A018FAA8C57D30B7F86BA9A0418
46012414226C156D5BA53D2FADADA2872DC3E2C775A9E06C5796FB67E4109D5E
0A6DCDDCB2E2124D53A2D5106DD8D2499CD79E67394AEC64377457821CDB3B15
AA06EF39CAFB085B9D03597AC3B18B05B7D271BEF9B8173A6C4B99B7C865179B
3FAB830E1EAAC293AE37EE0993D38EEEAFA73252996621248D67285AC42033D5
5934F6849598A24909F57F6513B74F9F6C1F90E5FA9079FAA3E2361450C3468C
99A8771958C008DA29E18492BF1903336919542760BE55223C56908D00199B1D
2D941076B1C64D9F5785B8792E114A0B3B5AC5FE262A49649B9FF8C8C49352E9
59A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7669AF0FF20C2C04DFC9F36C825
3C4346DBC11A9D851DA134233C082BC703ED67F8956F3C757799D61A801701C6
D03DF8B740187441B0D4749EDBFB35844F8CF727A382EB7AE26B5C3E7CAED86C
85B5E190C5C8294E49F4B99E7016E5ACC76D12FCB66B4CE90406085978F8EAEE
A93868B81ED58C422A119E8C6BB471DF05580FB2BC843D9690BDE795E40A62C9
EAC215ED0EEB650262CCC5BAD17B2B1AA5E35267223F46AB148E74D8D1B986B2
EBAE55014694972C8E5416030D4076D4C09B167603068010326F551D2B0A1601
D78E215DEBFE216BADAD8CF8DF891E555F0232701FB034E81220EDD744B8D445
4554E52BC8DAF69434CDB5E5E32533B70D1E617E255A4A7A43966ED762BA3002
4ECF9B9E27C2A57C517DE53310C680BCC0C440AC1C83C0BBD182EC25281FB52C
452BDF2419D6F7A11856FD58BE2A16804A4997ADFEE6E00F84F822BF828D7179
DBE603115CBA55BEEEBC718DF9816B69E19F7320CC252A225C03F528601788EE
BDAD19B56392AA3BFD21CAD7AE67DA3476CCE84832BDA1B6BB5244DF4DCD65AB
1DC40FB940FBC00A9912B63DA88B3C465E434C7ADE8D31E5733F52A53D468179
AC6BA242538EC564F080D8F7DDD3113C97DEFFE1AED9B3D93703DA04B616B9ED
A1AFAD0C3FC6A0A62B66FF1976403B8C17B6DB619D0DF878A59E5DABA1CA25FC
1490BDE9F5C90E5734ADD96E296EB6E37995D78FD99C5784B2B7C7C509E9B93B
CC2935CB4CFCEFE6E2B12759D876E93E78E14FD76B97270E30EF0962D9CF3306
707631F5C6139DE66EA86054E2297F50D012229961818A54D0EB5353BE47D53D
B0D8DB88F2B2E8065A14BC7B27B47AB8E9CC40C85CEC9807E21A6FE4C961783E
806D7FEDDC4387DDB2E10EF3FA3985EDC86F7D7951A9CC47F695536EA269D3EE
945D55154AD3030521F5F523CE96CD5CDD217EDCA671E554B36E5C41F964C38F
0919E9E6D97837356B4B1F29D4B0F67C8A86432EB14A370D68355C2007E89333
537459BED79B9B3EACACF471302E87A45A22ED99B04853D66E5A22B56F79FEF1
1EFC9BBB3BAF6B285A4CB0057689E72DE1D7D5770F0F0C513A4A20BA741F9A9E
0FDDD9189DE5C3F2A05C77B99CA0DEB96E4C3F6F3D70BD587BE7BAFA3EAC91AF
D9F990173A5780E71276C60EAB7E25C124964778296D06CBE33CE2740FA4E11B
592680683F40299172AC3A4A3FC398C470159B5621D374878E63B56C35023AFC
EB539771D03912E5A15B5CFE5D573FB3C2D847AEC2EFA16DAB2D427AEEDF4747
73A747CB6B93B3541FC740549496AA726DDD4264C1B79D2B64DD10291FE16F35
C17D22DB84BC93962E33F96CD42386C234A9447B82BD519B639D87A1248A2373
BC8E4A791EB854607D62C59BD0DA9C906402AD877A8237F7EBF5AF326230B80C
ED913EB6E69DEF0DF05C6B221581344C344A2B9834F97C6EE56522D30CF24CA9
F2F6BF055A524058940BCF1CA8D16D9A2D6E64C67325A481E31A42902243B83D
A90CB0F503589D4D806754D9665ED8B8C46ED1B4A763CC46684C252AA2E7CD03
6B3713C5F5795B0CFE3CB852BA8C7FAC395E4C66432B76511D51381A8FE29323
DA6268F8E9C1C78FDDFA7900D3314C6DA654AA4124D577D774A217D4897A2610
17122E02922C91F5C99F9CC06418549D42176DEA4E100EA565CAFFB37751AB5F
9D5F7E685C44F5AFAC1CC00F6CBD8F971B7E2ADA50A6FA842125360BF3DC1144
957CE05D3FCC98CBCF84E39CE3B141286A5994C60855979B402D6DC6796293CB
C9423D966DED4F341D225723A96091CD360A6CE73F714A543CD8FF8D541BB9DC
D345E5C2D0EDEA9FC8304EDFFA803800B5D37525247C5C189C065B91E5D863FE
B468FC7AA2DDBE2E708D27D89164B12BD8B7DA2A4EA25AA159168EBB2C3776B6
4C0436F1F67FCEF0AE35309BF5ED9D8632C4BD136C89169D45718A88BAB74815
F50DFCF371A8C762AF5BD7C49E875699AB0AF954570522335CA4F819DEF0C610
3AAA90690F834C207BC64532FD982D182E86B3CB63C968430895741B98CC3159
73EC1169316CD9FEE8F22111CC5C1BDD1347412F12762E7C47AF0F39883F6536
C3E621D99D18CE42EE5A34F722C79C6E238795A66FE9C57B4981A6CEDCECFD56
6DDCD25F0340914BBA7C438FE5130439DD96BAC786787D23A2DCB8CBCB49FD9F
FD260F56CD6070B916527529102255AD36B443B92E158AF667638543A1C25BD4
6A6A372BD7350A85275A7DA9E0E1336F13F8526C6BBFF2B1DB766F086247050A
0D7757A4BC7C0380ABEFDBC42371036E62B396A9284A1DAB3BB85A734B583B3E
2E79609CAC41E0B9A879453320DCE8EDE7ED1918294062582DFB8EBBB450DE4E
919ACD596A9D502B2FCBF9DC15B995D2B712676A654F6E978CB8E88E1DDFB252
FF9ED5F0D2EBB744E1F71AD2DBE14FE9EE3D83B7A977BB187362FBBE662AEC9A
9E4E65630EE03681A62471A1C035932B6545FA537AD8E2B830669F8630FB5570
9D85C29E7014A84F592D728EE094B48AE11662FFD3D82CDC8C6B8E693CA7828D
47B8E55F731368F373A67893FEE2BCE051279788C2B4720A60DA0196DD4B0E8A
EB23739AF92B579720B119F33B243A5C325700D9B26E3550CFE92EB1ADB8E291
B9245845BFA49E73E527E9A6488AB074BA7E1908A831102985807117D1908D95
8AD0EFBD5C6CBE684E8993B9C489177F144E5291FA4017E674E4E3F6B8002890
F8CC804FBEB58CAA7FD01A9E4F3A63641E03D2B5D851BEEC467C57D264D4FAF4
90734DC0750B3E204D6FF38C1F6ECCD55EBA6B2A7FFBC00A9912B63DA88B3C46
5E434C7ADE82159600BA27005CD6FDE60CC49B767DD3BF6BA86CC363E59CB8C4
E12D9F9E97E5DBAA2871665E9B2C0C883202672F5AFDBEB9631776656663828A
F4AFADF09D8FCC0E2A0A080F0782EA3B1142C76B364D2D85AF83BDA04D5AE215
C08D45B0926739D960D4614B51D997DA5811CD4C306CC7E6EB24B1CE1E87CAB6
B6187D2ED0CC5BB2D00DC84E5ECD451DF3F6C5D12CB95D3DC2178422A46CA543
94A2706528524A9FA3EF41B38E2DC4F1D8AE32B1AF8F93F463F546AA676CDA52
2409846E8C52358CF3EFBD54994FCB7232023DFC1D7D4C4FAF55E151C39FEF8B
47E94188AEDB4BB096DE59622A2EF791B46312F7CB19B8ED7566C4017673C78E
33FB53B8081AB6EC8060C4CB18381C7CB67C666E254938BF6A44706AFC1CC092
741BA7F1AEFCCF420622EB34B4E3DD2D6BD77D42D4F1646CD216B101A06AFC00
46335F97A2FF20EA44F794C1DFD6B10C5B520C3DA98D5F395ABF21E83E25944B
F6B17546BAC49FF8E37A06EDE5C5A6EA04FCECBBE13660D5360139F9BF2C145D
BB7A0CFCECE8AA6845B803651CDE2B427017F19CCCF679A44CB4BA96B481982C
59847B9DD51F01A6607245209973E0142B0C866367FD92E407301632F4EE2F2D
00893A100BEC19E13A6511D4EA600B1ADC4C3743EE457183CBE6414249A00134
B04D9557145C824496BCAE8043C98684CA1AC7ABCCE6CF63DE924E16D4177B30
2A71A39F28909744DD2A0E854D72C2587B6CAD29EC5034790BD03AF71BAE6A93
0CD02B6C4D07D6D0998EA1832C6B1FD883EC88EBC3CBB32CD81C40D668DEAD32
B00EFA2C916075E359A767C5998E4111E51EAAC692D9C73E06BDF4641DB10483
4D51B17377A1476D0A18CBAC14EA102EA9799995283011B2841B570B04076125
E354CF232BCC13CBF06EDF7DF34E2F4AE56F0EB9FC26F578BDBB96DA1BE65EBB
4F6F2AC4F4427F9368C494213BEE09B227095174DBF8EAF870394215800342A2
EE283F816F872A362A1E8F235C230C4FCC24B9F56169F52ACEA06446059C93AB
12E3198419CFDB3DD2A0C0ED762C78D170D3A5353E9028F3450850061B7FC4CA
BE0F7457B8626C54A1CA53004F56D3E307706B18DDEF8FE7E66E2848EE966D53
F805FA5E6F887D2B2F3F599FA7A6FE0DD1BC6F0228BDBA5EF8A1BCA196798F6C
60541F5CAD58FD5310DE1420C3040DB419F6CBA3C08297FDBA7C464034283055
4EE3A75E2BF34E802881CC85FDA9A48843F86750C63AFE6E89218E40C4CB3CFC
C5AC3C2794CA348FF578A21DC307F6FBEA04C1F3CEFA220C6017AB44C97C9190
AEC5FD1D7727BCC75BDF0BE69A6A0FBDFC00F41B50AC44E03DF7E0DE015F36C3
0D6A4F9EDABA849122436C3DB66F146FFACFCCF9805626158E0C0B204213587F
53FCFDEC18E9E1BF3011EE34B5A6C8277CDB8657B37C59CBA9923FB28948A1E8
F744F1320E2F1C1E68009B0B03F1B45EEDAC1D59768A9370B709EF4FA80542D5
0107820BFD68734C5FC3B010B410073757BEBAFEE27320B92301A8B784472DDD
6D78BED5D0343A30E2B3D0F0AA65176117C0D3DF67F287173FB520C0DC4AD685

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E99173A4757421323238CD6EC545ACBB56D8F72415A1AB9
F0BDF5BF10AADB64E9DC21E5EFD3BEC41F18FB8C6D2B457E60950E1CEE746B8B
D1C38DCFEC33DD7CE3D15A7413BA7221C2A0183B7AF9C14AFB2666D0C76B2A40
4F1C741D14A7855891FE38AF4673CC7172645BFA492CDE638EBD00417A24C048
9BE85952A6776CA88C806DDA31F029D26AE7BBE53504F2B08A80874CF0D88928
1F4761B0DA0610459A383275F46B0E17949612B89374A91445818CCF84403DB8
37A6E6EB5B52549B010FB206FC42AD1B3BA2F939E3855A521224E6698290BC0D
0742A314497D1EE7B94205C9F5DD453B1D3838591BD4A0179BDDE6524E42EED7
7F004F7DC1CCC96ADE0D02904BF3E689B2B265E479FD23BC99D34FCB2E6586DE
317EE3BC34234AEDFE8C8810BCB5B93E04FAA62C2147ADCC67517C05D3140EA6
39BB37343980D51CDD3524F0B146BB99BAB1D6B99E13FC74FF67A48296D205C9
2BB06A4B0C18B1C5DFDCAE53E87AA0B079C664ACB65D4AE6108365BD70298F04
7D7DEB8854FDFCAFFAC77871BD7221E8402A173E563B312F24B88D66A61A47B1
A58998B2A1A17B6AA78EC05276600855DF7CF3CBDDFFFF470794606584B538A3
2295BC5FEF5DD3550010E0F50AFA773ED03BE4C5E64936A40A414248F478860C
841769777C502E4DD4354539587BE5AE2347C835DC00E5A73E95668DD0484B42
1E5FCFC898D707553AA90560AA32BFC1FB1353D8E28E0FFEE0C28522DAAFFFC8
4B3AF701CF1AB4DDF43928DA047C26DAA8165842A4DDD43FC3AB8DADBB4D53C5
BC75E92D9FFC4CF5D97E5C253EC6CBC95C776157B2644FBA911DB569BB21CC18
F997D4A44DA8C2AE04EB142AEC7BEF17A9C1AC42B75BFC767EECE17C65560A0E
E4086DEA06A2D2352DE559933C8B4E514DB0410B1E140095EBE6C361D8BC48CC
05727B71589342370F8A366E11B3623E494B8E802A47C2278F2BD50DE2A806B0
D7FAF7914123A44D9570FC82B6D231B37E2AB7C7143731A8483D8D0E8D865CB6
02D83CD2DC870E1AA53E3712C683F56B2ECF78FCCEF9C018C3D8273DA993B9A1
CF9577C0107889C2EBBBC688FC7FB98005BF250E91BF91F719E5568DA6B69A91
1D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D6D253095D1CA40B9417A1DB1BC9
CFD7A726E5853FD3695D297EBA5400A1B90902EFE6792F207136E1E16B417B2C
21287771F728FDDCE8BB0876873C49ADF8152818A07E8372B9E6D6A900BA4404
6812884F2FEFBBD39715F12D929BE313B1A5F23EAF1A32ECA307C440566D8413
DBBEDE3F4E47F96B61BA0F88E99544E109918AB0BDCA926BA1162CF6F8D703C6
508CB2DC5D586678999DBFF6A39E853134F6BCC2EBBD3703E9619F762D64128A
18C95545E4C79B52D7003FB0F27D5FDA349D52907413D171FA2C0F43B7C69F2B
C1FA11191A2974874205A7DDA96A49166276E333BF24A5894AA474C9F08EDF66
B627B992C9E596047831B16841B250CD148557D72DD7E683BF122A0A267DFC37
AD7469C554F21DA9C2007FFA851430CBB5AF83475C093525EB5729D8AF505B26
F99EAC72A872C10BE7C60AA2C2AD169FF34266D8A72C91C24108FC0F3D955887
236884915F331A5CC5FF426B674CB4C72B22588999185585F81C9FE7F420372D
E86F10868948EE50880C3185549890A6937621E60049B6EF549F775AA2861FC7
EEEFCE2D6FFB37AE8D53E4AF5C970E67BC73C920CA64074B3649FE56AA0AE265
4BA7AE69654EEC38CA4CCB5F26D1C2D5C8005D2871DCD98C3A637137DC8441EA
7B8E6A353FE001C63AD0C72E1EB219C4864D18C4CD499B20534D33C822226FC1
99D26114C8B47D73304B66C6BA835EBDDFC19E88CF11D2E7FBC549CA5D86A25E
591E0531A442F63B6D86590198C5957155006779D9CE0C778599803EE49EBCAF
6C6E111EDC97C368223B86632842682BCD4EED2766A69EF6B97655A930494E6E
1A478D5C2A0D08CB39DA7D5F522A4ED633E8FE6D57A0821BFDF2DA7DF431DEFC
08A052F306F0BD86130C630B5690DB1906123D949ECFE82F7B51DC5267C06989
1DED23AF9D42E7E92E35F3CDB35836193EAAD4C88DBBDC9E20AE49D3FE7B47F0
B4C5BE36297E9DA5DB6AD90AC5A04E5C5434D732318AE791EDC71A47F2AB39A3
FE73AE47CF016E3B3AD1A5C090108D4964C7FD5E57B0D504F8030FC501B4758F
1C0CDF3A5FBB4A0CDD161BEF105C8697B33CC8C54E71E075F1693EFA5483DB7D
EBB1EC30D6A719EBB7B5AAF66866359A3E7724F400933CED59BD7219595A46DA
8FDDB20819F2337432A326ECCE7F6F636B38272829C49B77DA56D8C3459AEF93
56949ED415099A0B82D4C0E326AF1777FD532A369531C4F38A540CBD0E96C682
B067F1525DC438EA0076574A376BBA70183152AD7577C8EB4BCC88ACBC5A62EA
1F054D8C429F0F7FF80AF8B32B1A30C9F7923E3E12C1BFDDA721786D7D6000FD
0985C57E723DE55A2ABED9B40D7BE674118CFCDA53690FAF7F415B3CCDE7AADB
CF72697BCC9D1466D942AD5D2F3718A2590BD1D0A6D49E62478FF7256CE9396F
4491CBF50E1AAB4DB1875D107D8180396BA6046E8883A9FDDAC13FEAF57217EC
230CCA301F89A1016CD2DE577D0A8F874806B28DD649CB35D90E6345B12F46BA
3332097DDAE8237E4A34D9C413290538C5E297121D50C81741C15D5756CC52CA
9EDD64727BD3BE976D4963BDB9B0D1D1FD16155510EA7F6410E1511C924FA76B
3CAE4867CD22E3E4A8E70082F0C085AF03D89E764E467708D4185A1600EA8BF6
80C97212992BB2F5000FF23382B07D5B059D8D3F20870038B6EA3C5E41A3E6E6
EAE70E6200948A2B24D0AE624CB648EF0A2E816D6C1C3C83FC0BDB90052DDC7F
055DDF6A6EAB9E62CBD50ABE89F5DA45968A4FD41C738DF99235FC8AF7B0A7FC
07C2E6FB4A960BCDE8B36D06B51FDFD86A22BE594113A00F62F7A579FB409842
47FFAABFA9652CE7AF178B421B0DC4AC696FC634D09507BDF345201376AFE24E
D8E855C8EC0A4F10A8DCC2EAAE014C26BF75ADEA293858333FAD8A5DF5D5CE64
E34060F98FC38430DFD56AAFEA4135F59E74D46E9C0DE71D7EBF3D9A4DEFC8E6
7F6FC526DDEA73EB9B1EA95C15AF3E1BD133241D58DDCC67037061D453352531
380C21D21C82FCAB5E878414ED99200D945BCCD36E1BA17B2D4E2DD52B5848B2
20B04AABD14C5092F60F1C33E6A77A9E51EAD2D9A4C9C6B49ECBA54DD1C476AE
B59C2440A668262623D6A60F543D13185DBDC938B5A37FA2838C251BBA1D812A
10381D0456CC203C348DD73C1D3F3446A4E306C676DE7CB1ADC78A861EDB3837
55242F3E168A938FA99A616BBD1008CCD083D9C4180B08D5361C6A1952999FC3
37744781995E82918639186A928EF12BAE7FDCC5357E6ADF9AD8C35E6A43B682
3C4E3D2E01A271B4E229F6FAD115EB0ECE8AE791EDC71A47F2AB39A3FA3BDDAB
879CD224BD2B3BD4873BECC873A9C71796A6D13D182F1FD33DCC71554DA83716
98B3536CF6FC0B6134E4F3AFDC577DF8F4B125C0BAC2EA874D558B0F46BE4CD0
45739E04FD5DEA0FB07BCAA18723F901BF5F6B6A8A8AEF1CF8DB5AA29D60B224
C9B8872CD9E55B2E3AE2819BAF9BDC42C781963830BAFE4D6CD2356A3D2733F5
4A29072F126379A165479BE72057F0D6D0311BF204A4C6D04CAAD2542B807009
054090770432D63B1C903E5700D6940D54DDFCF2DB627140ED8AD5DBF7D86C88
CFE9A37CB06C4BE02A9FC63EB240C890DDA668C586795967B2B1D5ABD93033AA
D7057C0C7678850AB645FFFDD403F440028181B75AD590B3989A7F340FD59C3B
75CC4A85E5B3FA0541F2E746E3F5A7F0A84C2334C2D0E64590A2420765F24470
4AE2B065259EE821CAAD682B251DF56033F47B4CBF6DAA00B960B965E9C7F789
DD05BC094546CA4F9CA4E3B35C0BC7079A2CF2E2A1529550D55D4471991B7DE7
59C6BC99788940F8ECCB6AF7ACD216131278EA1107F3C016142C1A8B337A0907
F9192DB48AAB64B6AC9E0FF0F544CE8C5C086BEC650C87AC6908D0C344FA4F94
E91B0A972678A8E98315860D63EFE6178FD39A8CA2F4D538637FEE65804AD9F4
7FD5D09FE551F142955918424CB632ED0C2C1FB31D3A72F9889F590D1F350296
EC270CDAE87B801C0C536C101AA0D77A3B65651CDF72E001E8A3010266862CF3
9FBBA573AADD91993E707C3189EE45721D0F6D8C3A1D8CDB3A7574A94AA01579
67DF66E162668F8D8A3F36DCBB5352490FACD6E9EF0C86845248DC345FC8249F
699D5364BBA3E4FC59D1F7378FB61F7DD6CB7D3DDEE35065C082B37FF060B6DB
75AF203FCA2D6DBDEF48DCE63F3F4869DA9D77CAEB4DC19B208341194569F2F4
629141CF756FAC27DACC81D3B0B0BBDECE5D54AA8023B11FDD5D37C1B60D5582
E03F083CF716C8D2572DE33AA0A7E4A4F64A6E5C39382501F2377EC5E1BE06FE
FC81EA3A88B4024C64A79740384D09CD8FC8DEC08F3E43237D86822376F40EE3
FDB00E6D5249BFE627495DE99814AD4A0798392364FE0BEFFF89A5599AA1EA70
6B50613961F9E542A99E1E9EAB27BEF2BCF74FB40F2D01E2F2D09E731C6C2F9E
4493F6FF4574EEA2B17D2645AC7A467CB73043A75E693DFAA0BF9F9BA10DED03
E01737F4A4CD704E8EAFC757116FE3012E01AEBF584EBE5134087E17D7717C9E
B78CD3364BC4D5B263A7B255D0918EBF55EC09503BF1AFD89227A574BD8D6F62
83BA72533B7C3CAFA5F99ABE792B377B97E059D705A0D83ED2233BB7EC99ED28
D2B4A7B685B9B278C77FF850296C7B8CC91E377352CD4B970C802740F07F64C8
800959147D32AF178C2E2E968248D5B79889D9133B6ED6BD14AAD42F8DDD825D
7E8041DCDA231DFB8E6ABD97BCDCA958BEE59EBFF0D3BDE9B4FB0A540610BDB5
9FC4EFF8586BCF2DC5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E086A66D84
1ADED0348EF0A843D0F05CE3F579148DC114120876F891DC1CBC2613C7770AFF
963ADCA396EB26D50902C8BDDBDDC8BAD0B87F3BA50D36D20926718FD370099B
6BE08F5766FA4F3557D0CCC9EDF31BF84531D664F70963D7B37ADE87C03A2DD1
CE4DCED3C6423C5CF357B67C00FB8A600F088414D8992ECDA0ACC39AB210921E
39DAB25974FAF91DC77B8AAB2239DEFDB964B9A39EB820B0594A04C8A90B658A
61B785B8AEFE9DBA015D717A3CEAF3A92E5909A8F0811FE2758B6161A8A96054
6C2385FEE3AA4828CB103799D5A8121BFD5C984F519BECDCB8EEEF18F331A58B
E4704E5130FB4984C3FE2474E6C95273532B64A356B32A047802C9BDEE75029E
991753E72D33BB3D28B42945DA4A9455103CC33474390660C14D704E6CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF336B6E6B7268BCF2B4DDAA573EC35918A
52243149770D7A638140F9EF7A02B92E75A597785BBED4857290DC1576BACC8F
67701204263E971278EC573514392567A82BDEBB7E3AC567A69429EA3D1E7FCC
F0E3330146F527C77164649A42B061255C93ECD9B8DC0D2A73720893EA82A1EA
0AC894127775162D0438F882845B8A24DD727260B4B18E174328A4B90D93FA21
5065DF8C19C153EA76C60BCD0C0FF79B4E98495C38C459297F3E0DC1BCE6086B
DDEDF8F4E9B794586A9CD11C14D25342DE63682A24C569C99EA4E22AFDC4B35E
149F7EB05AC2BCFE82D329D6332B1E5F5EC98D713D700F4428E59C4D8FDA511B
CF63CA7B0EB34D1BEF48C8FC4FA189D8A962AE59456EC1E2FF796E37DD6D1B9D
E5FAB1CDA68C7673B94ACC38F874D92C1E2074B7116C3845EEA16B5282A7375B
3C445C622F7765443ECA040F54A876DD343BF69D7B2F16E43F5C41A8EE620EB7
E7F02C11C1B52C95B6B66A2DF1FBE1991751323DA2D16A5420B7A869207023FB
C27FE57345CE26EE4FA1566B96E221864A45A24ADAEC63F61C9FD186843B64A3
B8BA56C65FAA99BB540B469C141FF7FA87416303FA2EBAA4303C4F4992D05A21
F628B7901829DD810E10D9DD4D39C32F79AACD665ECA7277148AE89168C46840
BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C0596FD023D6BD1C2CA79CAD7F
0FE9BAF8F71089C3F94C1A9FE844D514E123FDBBD49FE36AA88DF9E59107C892
4E34E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C7086E8D9E5015CBD6DC0AE
B49862AB0712464EEA52BAC576A4BA45363D3B7FDCC2F4A81E47370B18001316
F0FAF32880794EA774CAD2ECA4581BD58ADB6AB154DAE7900B7C4B60F6343B92
F1B67E0B8B99DCD7EBB4E08F06C3A4F52203654730006F3A39B43BFEE5D80FCB
0D3A83798F244EA38E7D327F0F4C117F34AB17610F5D7F76C202F7697ECB0E22
541651CD027D5B23BE4FC86005E73CF251B746D86FFB6D567AEF67B112126E2A
CF3642047B512AFFB892DECBE1E9CF7F118F554E5688D5246D21E1C4BEF63FF3
123E5BB8ACC107D8B722419A9C1F8EBE330B864E6D9CB09895FB773DB25F1A4F
BD03CEB58C7EDF1577444E6F9B5C63BE4DF55743E0DC918118BAEBFCC476F9F7
F52DC619649FAF3BC7D3F0867D1B8D78B9A9DE9DA1FA281D38D992F1779CE576
DBC43DA0B3D52D76D907DD2BA5FA67289DAAF80C0F5EA7D9E67929CF4142CD55
62FFCDA62B59D893A5959E924476E93CF7DCA4E9552E15B0C62E64A0059FD24E
9E54D410482DA1202736A20A2C8511C202DC92A263CCF305021C674FC70A8D1E
5B9FCE9EBE0709F542F3EE5DFB1C1A0AB40E808537744BD9F54562D7B4167C0A
622AFC28FD1A1F890D10DF396A72D110434C6DF848316629CA47FF9B07038337
966F12D57747A2957AF8F20D293F17F5521D3311F85DC40CDD28FDCE6ED8D979
9646156E1491E5521FC8B9CD9158D750D9AE1D1645E399B20090DBB60D0B3F5E
A1A13FB288A9C0D536A297936EBA8F80BF5B2ABD3536A2450AB577891F3BF378
698BB17CB6118EFDFA622B219121677E28A1CB84DB96F62E89B545CC8CE8B786
D388BFB00807370CFE577C1141A7903C924ABA53A4B5C7C390F436CB4C08BF45
547F698E0DC00CC722B65CBD277C5DF3B4B1275640937E5325EA8D2985AF7B9F
14EA2C7C51096681B774B9079F2DFD5420F6D2453D8A30572DD2A12550B2D61D
32D43CEA6CFFA363D804FAA42013AFFAD1401B54E1E86AFFF6D7E6A9E866BAE0
54F5EE51C829C26F9B88AC109A4388B2362A3AD1F83A14BA94D46350DC9C2286
F9A29749D657CC05714F170AC2B490A94F98BE39F5EBC58E442616A88E8FC019
4CE3B471CC2C4DCD7EE8DA67D9B82DAB5601A9125A3B90CE131D3B48612958B3
89F643AF4EF40437BB056519FF432CEA503118F0A2F57D33E98813E044F87B8B
46C868D6D2FAEF826C12ED0AC734005B3FC8E636D5951411C6F46CF31F03D351
7A96309E02D4153F7F64C21C8767DFAB7E5677415F55FF32E4308FE161C7315A
12FB600B92EEEC2CE2B6C918A7906736E895F3154BC4409B9A97CCAB9DA5C761
48888F30AE04C7EF468C8FC8AA1C0A2E529502832B329B1EBC55089A05E432F5
A19F77E45AB50CDF50B9F75F0A6338BA2148B76EAD501C9C1670B8A568F69091
BF0FBC9AD619AF7C31436CD5130B3B64C1EA82BD4445555CCC8D8C82839F55A4
6A84383A5CF1546572770BBA3CB09E41AB8CD211371A43A1F9F4354B5BF2FAED
4B00F36F2CE5F46491EE8650568A3C4E497D1E90E7A0F10941DE0F2AC2D90107
4A7BD43D4D5B05FA1A04F498C68D3A49078A7E2CB48A43238E9E64127BC951DB
04055489DBA72C24342D68B5C8896AFFF13F6C5D87F9C357CA8E2424585B9D34
982C57A36A52CC3D3CC3A173A7346B4A33C99BBA62EE86C30D0E93B2BCCD4A74
3DE63B7A8395F625BA36D9134FFB89994E5460C89EBDDDED2D74AE20D4B29604
D021B8CB1F3AD3CE5104318FE113C2FEE0BE9AFC4DDB110A7AFEC7A193835DAC
ED6F47059CEEBBB988E953AC22110E3366BB92A8B570377A356DEC6AF110FA0F
C9274961C7033B715C7038A7CEBFE998249291D97CD034935C3A0DF3CC39563B
4230C6A08BB4FB0CDEA7D44636102D47AB90B928C3FC68D277777AD2F477516B
6676A165AE58B26B9DEDEE02099393336984A0495B5AFDFA147835FE0BCFC558
AB6171CBF0AF8D53B79FF544A0C6F98C72AB9F84F3C402380D6677A1F2676225
A2299BC2E64FAD2F51D2218D29E57D8C2C8B7EB292D0E4ECEB60C79F9DF0F8E9
2B8FCC8CF0717532E4799F0DCF5D2FAB1DBBA602BEDD83581EE4119973AB763E
3B857A6D32903A4124E2264000233BA7E9B1E80979B7487BA2CB786018E20A5E
0355AA35B05E219F5E55187DF09674F324FAB81E61751AE62138DD04BE3F1DF3
1CD64AD21688B2FA3BDF5E36CFC585953C95FF27739E9099A4B58BB53E3827F4
65279870CA842A232C789B363F4B77BB6F513F2D1CF82BE364B0469E2E163414
EA231376981947B80419C6552BC98F10E252C17CC9CA5E9E71CAAF5A17D5598D
8E8BB772EF73E44C8F5C4B69EEB8584D6AC888FDFEDE4783A639A6DA91EF82C0
84C1C89C0B70F7654DB9EDF8305228BA8CC8209364811257891A08FAD24873CC
2C75DA3473DAB2832331C2F3DF3CD45EAC63D7202E2F23518545A75568CC03D9
528A3DA314C3781B6AD8A675B3985D96DD31C832B4812AD67FD873378141C0D5
E654274F0A884B4E81A58647CC0C2F66BF8B28CC148252E90F6E7536E42E562D
803338A8B8A330B36B22482CF96FD2696A48C832F41C5C234E5A477B14256AEA
DF217F5E4092D1D03ACD2FADCF1422BED5ABD93033AAD7057C0C7678850AB645
FFFDD4055C250801E1B884A635A73EC67F26C4A36894C4120C6C7FA052F8979C
7A5CA5D52FA1B48C90F140B934EB585E3DC75A23E9F871159B2F3CDA9654D2FC
FCA727506D00906AF8DD24262D80A1DDA1396947FBE8692B77E9A6F5B1286C5F
FA28489391031EF6DC2E9040E85D23934571B2C15D82EBEC804D15C0FEF51E81
E63603AB1E9281C2D8B798E7CDA3D88B9B026AB9A677D0A13C4AE52D001C95D0
C24AD339181124180169F3AC7E7A19D8565769126D2B830F708F56A8327BB7FA
5CC1E56949F31D5077D185A6A8C1C19267AD441581D7A43EC3324CFF3DAB7E16
2F0C63A0687F065CB219C926D4511E817E1D39B34D480522E9DC062394210332
CD9277A4CD1995D21351D824C0F8AB1AB137E7F6D35AD957835FE482F81CD228
FA2227DAF5336316139B1C3959321B8800DA2D2E66DBE5B33DDDA58222CDBB75
89CF09DA07C6EAC8D8FE03BC36A4649EB5F77E9930EE7D89C8DE35DF4911AAC9
B7C62D6F7CA19DA5777365A7DE0EA36661EEDD0D99F80734662C33FF30DB7BFA
31060D48507E4F90994CCCEB2B11C34946640CFDC74AA12724E13770A8817E1E
619793C85487C0571E75403D111C5EFE83AB5351D1812A8B8743AEA49E26DED6
E9861BAAD4020FFC9E1E36598BB8A970AC962596E5DA29211EE28BBBAD5C0771
8185F2E6A707C1CBCB5F7BD74B934EE2BC8350E3A8F4332D19994238F3B603EA
8489EF99E770EED78A968F1DC07FE09105B30F327FA3BE68C5416EEA99D327FC
24376C3213224CB700644CF44FC66D9118186CFA278E47EE2D0B419B93EBA193
7F83EEE9027F53A79111AC130AB4A246A18F1735A73665A2731B4B56297DCE76
B0044C5AD81F01E220370DC8099CA12BF2C5AD035AD6DB4B6128E36279CAB175
64F0F604C2CAC70727F24CB5F2B23E93A3CB703B62F86E41FBC6421EDB9FF682
9A42E3952FA29C49E2D9F885C42FCEF1BC56E92FDE53A26F9395671BD1653E8D
F6C5992563BCCE12B4EA70A67A6BBE9A02D18CA44689E5DC1DCB1767179A1B63
E40EAE3829BF4CE47841CC9958B70AF6D0D07D34102A25E12F04FC9F4B80562B
21C6D0BE5704A5B17E3209DF9F81567747542BD1857B6F5060D31C481C37D159
D01BFF4511CDC412A885258111779F31BBAE3304BF771CEDC1ECC1EEA9D34523
544C00B58BDB14CA1DC0694534AADB7CA1C907C3EAD979BA7BFDEC43C4901AD5
8FE29E46A3635D2AE3390593FC7EF25EE5C264CE4BBB73A61F7C685A3A9A5187
34F9E4D7E801AC7A5134A76D1FBCE0045C8F147537B7C2221103C664299859CC
73266D8ACED067119C4592AC1DCD83087C2DB81FBBCCE75EF02F7E3F51D6E7D6
0A9C421889066A22AB0574D96700D6A10203D03263B1C28B26EADB953ED292A0
674E017CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC7A20BA2D76D94BCE9E2F0
6F49A6F65CFF1A4F8BA05BF9DE746905C1624923AE6DB8994DD4DB0D452EE669
0A8E0CE736A59918E193BFBB4953AB21EDFDCA58BBB7775A75886631416C2190
B36C30927C412A0988C5298471BA2035819B7619DBE08DD2EE3C007463730DBE
8260970F6451BFD1EAE7FCA4E259856EFD5CB9A80D1CAD55D9DFC9B64DC3402A
A1DE45FC978490BB69153DA6D6161F7E3EF19D51D17FA7017754C7B13E4890D4
53802BE679D7D30A907577C8B8DE4E695034A0AFD7D67EE73457204600BE34C5
3EEDB7645170A6A6B6C1A85D0058926158D3D3D81E3013A7856D01915A184EF2
573168158585CB5B398351233CBF49B756D42FA0CBD862C56A5046047DDC604A
4DAE890620BF249A218DE01B8B920F09E9FA8EE4B1CEFFE1421AA0F101BA284D
079A7D06D8D7E20E0C27538A6F7E4290030E99140D3932E4F572642BD80270A9
D022DBF622DBC6438DF6625367A51A814A040839172E350457EAE0585F0E658D
E2D96CE4E32F2AD8BB9DAC4ECF39A8F72733B7F3B44F48E78519E114A8BDC93D
400AF5B67545FE192430635B74CA8893365038EDE85D89C7C75230DADE15B8EF
D806EFC61625AA46AA34B6BD18DBEF779562C307DCBEA8610E12D792CF039DFA
B1ECF15319BB2AE81A3421D0EBB8CB761FC76D93D759CF9C50207336FE0171D9
9ED216F355139D0FFF6D5A812EFB4132ADFA39B4F873B845ABF2660C775A4704
DBBD673F79CC1DC21B27ABFA53F4AE2E622FD9C4587AA9B51673BB078799F0A7
52F3F7DE5CE57978C0AC1830248B5410C7C68DC45383A6470A21648D9F06AA92
E81779BE5DCE90183592A2C6E2FFB3AFF49BBE499EA940E619D58FDBD331C9F4
59A557AD41F0DCA7EF4768DA319D4B2F3D95477FC12ED9995399EB66829AB49A
42016F5E76DD0CDADEFC54FDED78A9446ADACB1F10AE1A860E302A83B960B624
C72D86913A3221AE9CE1E7A23339ACF55167FE8A2F947030413B8C42BDC2E33A
BEAC42E0A3DFCDAACDA7BF1E9DD09B987DDE9A64E9BBAB13E9E5AFB65565788B
7370527464C55762EC46306800B751F026ED5DE92278F31B2E573FD86696D988
00443F32CB27EC3DAF35E795A2D32193DC2E11E51EAAEC0F6DFE29F24B034A8D
5B69C16F750F4788B6B3C3C2776D4DDE217E123FDB2D3B8D6DDC59C6DA3DB9CD
03200959F34BF01B6785A13393D9C3B2D96ED57FC55FCF060D13BE6123F4292C
FB54C356ED031FA2E3262CE664683870EB4F2750798F380B47051133EC68C746
E4F7C5DB3B40A4A909B62BC0631801A4B89C40C2E1A1172CE064648ABA64508A
476F7B9B5B308EFB52EB7278A36712CA21E2CFE07DEA46CE64D8A8853C695C66
5F456A900204055B6FCE3025B3EFDB81F6555F09A25CB68EBB427D11ED7860C0
DE22AD177610374D182906892912A954BCF7BB00D53F3FBD24FEFC0C19947A45
ECC6B9F49C83EFCB2DD144D59AA23A265D273C60C32D8DEC992FBD7A83016D00
286C69375E9E0B1B272B51BB1829FEDEA7A8D8E361ECEA4E7DDD253666AA024F
FA986DDF098E40E2EA149E2D19C21EF5F5DD745F323D016D893B5198863938C8
E3B4CAFE23E8BEF99C8D9B8645A54B519859A8579CA0ECCDCD40CE7AC49715D8
BD0A6803D8B14E7552C24309F4FEF9ED2417593C51061309D2F9A4742DCB0951
F33E6F861A0A32EE23534ECAB1259C875ED86B49895A31C1287938562B220356
5FD277C13BD2342C13A685521D2F9CF54295649CB73D27AFEBD51084FC653EAE
29C85C0951E0B20F41B614C43F5ACD9126970121B0F16BE41947D12B80B6A14D
2E4803A47DDC45AB8194BE9FCF8879E26EDFB90DA95B5899C9FE409D491DB422
E2CF3F84D9B7A5B18F88BC747DC2510E822259DDA43D30C339AC2B795FA517BC
D14F2BC5B745A39B9BF94363EE9662C30C69B5879BBDC3E431A35F75AA9F2EB2
A871F588D755414CE43C8359A162E7A5D6C3533F250818078B97D490CEB91374
1254040BC520FE1C36A44796BDB5DF0FF5C238535735FB2F12E8DF9C6EF0F015
C8184493FC6CD10DB2364F1C5172E6D0D74FF44EAB01854639169FD558750B7B
9D4E483227880E1DA76448326A47FCD6200A4C1DD19594B4A2FFE379FF40D788
D5C00F3E5029A1ABED5E2529B13B00B99D8EC514B5026EBA991AAF4E26E2F552
84C3B4E1018FBF44527E8355633F5C77EBDBADB775033C05D96C09356FD9657A
A5B9A9AA4522C68A1FB049E97F6C22EC02CE64CE9F9DBE52947CAF49A78FB907
EF96552B4F2B9552C8062FD3AF6DB5E64B0E98E3DC0E2409A4459BC9CF7B2BA7
69BCBBE17E81F552B6003F302A5E1BDED74C9BEF3D01A082C36934BDEE62E99A
65F052B9EA1278E210D305677B9A4739C67ACF82AAC6528E4EF65E5D900353EF
C3A7D5BA1EB1F51ADF85A241BF8634666F2EBCDEBE0CB0CBDE736DC50A51AAC9
346700922DDEE91AF18427CA61F1FD7081F840EF225854026C776CF9A6D08728
DA3D95ADF1C5C812B03E2569E0FEBDCB5417866EC07D54C89A8053FB4C205413
CA5F8090413E2C948CF1656FA97A05A937A3AF22EA39978F1D74938E7D314BBF
92D3F1CABDC48E9156123182A8C9355ACFB9A5CD32D55AA3E61DCAE5E57A9D3A
D3DED4F1EB8651A2C612CA44A7392D8E791DDE1DE818BBF26CE3BCC5EC51E7D9
853223CADF1D781A7E4D07DB3D4F16AE2506A7CE1E86D9435CF699EFFC1E7CAF
E1F905DCF098DBBCA46776FB0B75C2FD27FF98722F32AECA18B7F0FCF82D9F69
0140B0348C326D6283FAFB4F618A83C42FE1F93C815E060A973FD6AFD09E1F5C
08ECA6B49A6E98ECDC132B67706E51CB96E8561C64782374B5BB113B860B595D
0EB37B68ECA8E317C53791E197D7688AC4FA0BFEA6F19F871C5461E2339EC468
5617621545E85237B81BCB4FD62723DF9D30974A40872E176EC0052337061489
7E97E006A0FBA50CEBE2BE28FD8E6DE5582244482747726246DEED68118F3352
659297CEA9BF5FE7C0220D844E3E5996771D32D380D3E9212C270F9B03075629
05FC6B007A287AAF68FFDB416935BF25534EF2624694FA389B03B827C361CD8E
3DE146AEC03E2E23107132137A314EE064C2991D2EAF8F1F26C506DECA2CB27E
92FED95B5EB373AD6DCEB0ED314523E81CC6D0102B969D7751807F6A041A56F5
A6771D14EDB3216934A39C1D621945DFB095C0A07651B302DA747B08208D5026
049FADDC1D69A9229FCA424F301FE8EF7C082F7AA3D0B09E098130CDD8F5E9CE
385EC4DDAB84CBF286173FBCDCFEC6A1A9CB03B54B9FE05A283B34E1A60F1699
9113391FA794098F3F01CC82A92938B399848B8F0A694CA5139AA6D4E7C9DDEE
2028ECCCD9844213E41BC82D098077B21B33C6C9938C2AA4C56E468BEAE99C61
35BB2A0DBC9C1EFBBB97B92ECF06C7450D833CC54309BB9A7B79C4E91724F312
EAEB8EB52DDDE6A5B490374097FAA2C1DF59835E8856E8DFA486E54C4E5A1318
F12E614AE73E51EF48603F4053F0BB158FFCFD6FE8447932BEB150E3A400CF8B
83ECE855B1F64D83D1A6A8A3F63EEF5726CCCE0DFD72D09F402E0261E4A5D20F
55666D0C1357B0953D8E9950803E1A5D4672FB06379D3A469D9AB505B94F2B82
BC63104BB150918AA7A74DA77525E729101943FB1073125C8E145DB24750954F
393FC406C0129378B091F6E0E0C2ABC7FEC93DC6E66069D56F6579693CB65053
BF56062972DE5B529A730D5ACBCB0882F35AE8A3E3B1FE3903A941EA20978284
81D0B4103EBB92A3F801177BDE9BDD61E288E9C4265B04D585E6AE259EA0C1E0
60B1C495ED215C9E3B589FF0F0DBF6C62D83149B03B5B9161C5B5E1FE556DB17
D9D16ED69EB52BC90411BD034E11E6B81735AB30E65B39860948F76183A847F2
02D77815ED3E8E7869950B22734B56B59A0A3ED243DF5FC4465A19DCF6C41EF3
B021BAE7E6ABC85888DC059DBE81F40B65934AD2E4DF3C2A219661127D80FD78
3E271DBEDD8994F8A2E9F96F4F86C836771EC35651395E03113FFC2CED08DE46
89EFEAAF3B66E0E00A028B98F990B4D015153CCC2E1853473BBEB42EC8B79B20
990536E070A58988992B1EBC6837AFBB5526AE3B0A5D4BA4A68C8F9467EAD475
06D2F6B52756A8B330001790770D058B9FB23098A309023373FF754F3EBBD93C
D89B84F14D18A2C653EF52DFD5BD5FA826AA0901B9070C1A92470E3AD7F1CD94
4E91ADBD1EFF5559D97B1D3B433DD2B301F57E978BA76768086AF935F710C1B8
A8AE43F782C9C7F3EAAB68393918581E5D402BDD9FC2DC4D8FC12744123F2946
5AC5267B36561BBE6293E3C059CE994AD4BD0065D122E44FFE52EEFF539E3EF6
FF3A0D852582BDB1EB6971F2EBCC0C538B9F4747E6F7BD506674263F62D3E6D2
62F980CD3240CACFB36B9EC30FDF06DBBBAF4CAFC20B5773FA4FB82F8CA5E93F
C02F1F40FEA458ED232D3F24C4839AAF0BA7BFEF50AAAE945DAB1F6C849635FF
109BB34E10042752C0B839FF9E58FE1B77A50542DEBFE49BE6CC438036AED93D
9AFE101F28C08DB367464FCC848329BCBE84245A4B5E96BA220FEB629C482ACB
47B78AD526567B3635C2DF2D8A778075A7E7F2E7D41FAA5D19294AD7623E0609
77AB9233338CBF612BAB2409BEA0B2194F8237AB16453B9349050645B3636A96
BFF33DCF1124A4E0DF06126E587E8F5ED4F7DCCB35E206C199AD291CD4F0E033
445E86EED3003DFC7429E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE258B4A
292B55A210FCB74F1B7D0C32C7ECB4241699220B107223F8CB5838CC4F288F75
56007353D88969A3F3D9D8DF3787C591C3F2AABA930D964266398898AF43B510
B472A9AB0C9AF04166E26851EFF3167F964ADA843672E870B90BCDEDA619912D
6E53B350637A1C6B75840B145CEFC54611D9D515EEBB7192C63D22D02BB2A5A2
727479C9BDEBD3DC879377A13C5DCB4A7FC08F8842251411D7F5FD741603D1E0
E18571D3DA62557A0376C2E7162271136303DF6A79C301E00600AB38A00EEA61
310B34A1AF4E53D785E1D0E5068ED5F42F2186618ECA4318D6826E9B94F98412
9C446DD56ECEEA07228F0B0DD1460717C7D8956486C96942AD652B9188F2FFA1
495493978227CF35A182E84F87163A97D16C6DE238383AC59698E080AA93420D
8EEF6ECA04DF85390E261B43A555BA97B9FC5DD4799C1BAB6E8626E7E9F3F6C2
AC944B7B713B63DF43BBBD240FB7E694DCFE132CC1F6E0EAE7BB26824CCBC34D
71864E9788B3C1295FB381FFE037D9126BAEBC89EDCE83B2F52AFC1924FF85BF
0B256F7F383F4F86A402E12641C71508D9E5E6ECEBF585AB8C7EB2B980E23521
148368D3ACF952C9B77A828446BBCA803D774C5E1D01DAB1D5433BE8B3506810
4B041AD7722616B477CCFE4F4CA1017F56A865295A80BC736A8634DD46036359
DFDD4EF9C6AE3C09162E8A4FC6CD4741B38836CB599DF98A228A141B118B0D04
51FA5C0CF712548B9D164B87B1EA798C275059727637A7399FACE02A9D3F119E
9C9E53EEE9534A40ABE963649785F697D2DF5F0241C05C449D8DE10D45301E5B
DC0E125346571C3AC8F053A09AB668003A7606C8BF13998C676F5633D42863F0
263EDD8FCDF7A810C898C94B6D69CFF950270DC1AB3B2964A1A9472231A6F17F
D3C2604EF52210F343C793DEDEFB0A2B19553E8A4DFC3929AD9700B3205A4330
16971AF248EB25722C1D494D0A2A7969C4C1E24E272A91C5C70D329E38BB45C9
A516F0A3D3A6EB0F7FBC3BEE47C4336E84B4597EDAC408FA5F7D6FC1E5AAE5C8
33E6B820F706BFB74203504D4FFF9F5B3A390C7084BA4E6E0D78AFDB692AB573
36EA77F5DA72A975945FBB6481FBC4F25889CCCD84E335EE7A3234A963F7F6C7
4C3424F132DB46B106ABEB773A7A0B01B8A20B93FD8A6C6511665267B075C5D9
1DDA598AD2A3034BAFB367CE721AA7121C80D154E0955DF11C4420919D12354A
FED37CD28F168AA61BB6A1D0581D6E772F7176C9524D7CA2AB7B9C639CD9CC80
2AEDFADED63BC8FA7A0F008D1751CE85D3677E2992991F8911FC331BDEDDDFCF
2C960CC7D5E2182D31F96F99C09696A839E835378E0843451E4D9840AF87F800
D3B6E0248AC51C4A17F50C7BFA2F130478C2A03674870F9FAFD22BD2AB57191A
3196210E0C1363B06E0C4CB49A374F2A0C1638A1093C95E5E87308560F434CC0
370A7E797D91200686FD4803DCE12FB3CE2044B4C5352C0AAA24AF697939E31D
FB3C127BFE62B7892E7B84E9F18421483857B05435F809450303520496959774
571975046E21FD503A4A93AF550285DA91183C4F754C307CCE056DCDD8F80D77
97AF86374130E0E7C7A57F1A67B6246167D10A7A979DC0DF7EE8E51C4BF6C70B
C794C6BBE8A2AF26595BCB0EC9013F7EA391C8922ED288DA4ED0C81666751413
8A90F3893CB2E0B4C75A713F443B08792A50891DB97A68F5366491D1BB097D8F
F4A71966D42DD988F48A29F0D9FC648CD35B1E03827411BA7AD177E43BD16801
26C9B220EB7D3F8A7C29ADFBEE0043D4664253B09D53ECFDFCE4C848E41EFDCB
5AA1EE1DB0E3AC051E6654ED69DC9F3564BE4C153AC91451F122BDD5C724CB80
2331A64C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CEF106F7290E7562AA
10DF6AD4BC9BF80F3188A55927B7EF3CFCBBF060F416C0B747EC5BA54AA74315
4084CCBDA3F4B8C354769FDEB9633D3380A5EF6871CC7FF4A8DBE390972EC5B3
89955A931A37C06AD33548F4F4AC1881AB632AB6CFFF3022D1FFC91F6F2C6B28
808CEB9BD6EE3B67D7F16A7043460436FE0FFF031CE20930C273EA5B88EFCB50
F09C029DFD240DD11799F2F6B3FC0438504B2855F9540EC304140C4E1569529D
433336951DE4EE9E3D49D26442237EE2121C14F116A1114838B333EF11A922D6
8F5439374C40C301C201A9B3E65AA5E0D230265952573AFBDADDC996E9EDE494
5EFAA728C4A18A407BCC2FABE82231873F15E4EA92B37F9045EB711B4939EBC6
188DBDF1F5449C2169315824D0A6BB0AD8D5662A85E8BBACDAE4BF534FC07180
E277C771BBC84A300794A6EF80B9903CFE41A030BAED3FD73752C693BB69DD30
9850915AFF65AA47D59BDE98DFF72C676430AB9A60F28F08E167682B10F81053
6A999BDAB4683EA838449C729EDC5A757C5B5E1E1C5F4D2C469DEFE3F85C8595
5800D2C374F256A3886969D17E57EA78AD5E0DCF6FDCD74B2049E4C93E28E86F
10868948EE507B47172D7B52B098280728DF8DEC200EDB3A2C7866C977678C57
1CCC9FFFBCC26FF6AEAE7FD7AF2F2D88EDF90670519FC2E69ED8A26807CDE334
E0EDC575DEEA0C73666D12F2D112B93EF7E36B764FF4DAB7A5A32ADF28C1A2B3
1DC98AA67CA359ABD5C37680C27310CD065D11C45046EC33B07469F871F97A69
69B3069E84EE1A7A786E1000B59EF234B71023BC83F771481BB46B91EE932517
DFE2B815D288DAF8F0BA2E3FDE32DC8120E63045002D044B71370D2195B07456
F8DF0E2577130E254DF39B4DE56AC726971985A0C26CDED6473B8267FF196B1E
52B808F3091EDD87CAD5016470EA1055E94D2FEE120C7BA6055FAE88DE894EE7
FD9B7283AF109382E0FFBA9018C104F789AC508CB4BDC8DB58FF54C825E7A073
27ECDB2E8C17181030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD9235D909650
BD9404BED91639395DB88CEF35A4B8506D31B17734D27AFAA023B97C367CEF27
6C725B73F6E2214A0172520647FA07B7B6A0D06F3C5A9923AA703FDE1C2A48D9
9AB786A3D5D0C5AC216EA68F8F7D3A5BD929E65D6A3A14590FA2407BAB1E8BB5
63A9C89C0F79AAA6140340522035B2875A44EF7DAFEEC6B06D7DB4B3BE25B008
63398C839ED8D858AD4C773175799B685B89D40194C126593508297A962130FF
121C9621988B5909B8DAAB8F31E2C7FC6ACCFCA617E5ADE3D0B721C751699D83
E2EFACAA1897A0F984F440B9BB0EFDD09656C615245BC9F224ED20A96E8F4430
344988EB94048545A761892E458270716170C5EA7DB77612DF679C0906D77AB2
144E88EEE0330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AEEB1E9C54063AFD7
16088B6E8FE0CD1702C2C331273573F7B244323CC083D9D5F0CC23C7493D971C
8AD739BCE21D5D27DF6EC29E90C08D7617119BDC68150065FDEA072215BB383C
12155843895629B71900A3ACA96791E391EC2AFF0C278E99D4E81BC6A80EA827
7251A46A054E33FE15EBB91EB3CB214F4F214DFD130D697972BB11E9FAEC10BF
4DAA942280A326B0C4356B774DAE57D209909698FEB6F7430526ACE47406FB01
6249A334141B4B1E22F272127793DC4DFE03595BBF57B47B6B47F36194429B83
A549DF505817CF5FCBEB7DD5871EDA1C1A748286128156F0F8FBE4B0AC369070
B3EEC04549DCD60CB7B23EBC7DA2DE64C1D02FD6CAB479553AA9B765C965D691
1223ABB7FE79F11FB59B0CFDAE2C9D3E76CFE803EEFA03CED1A83ADAAE542768
9ED559EBE5BEE0A331DE6080D7EAFBAECDE040816E3AC20786DA28A3711C0627
3B79F297A2252DD820081E3821F226D8D45B9E0A9745747E016355E3FC61B055
2D00C4D311498DE7499F9653EEE4FCE22A65C2A9E7E256F238A0D49BB81A6E5A
0C91E869BA9FB90C0447136B3D32ADAC080E47FBD491626CA771E2B69CE5CAAB
AADF0D6B4D0FB01918E8BA87EB21AAB2C494C6F6FF275D1E4D9DD4D2B1F245E0
1C1F36626E3819E7DCBA9450A2B429534465334A41156A070819E98D7384DCF2
0A308398FD62E704A7ECE39370AF0A1337290A562AF46CE779AC7F7FEE7766DC
CD9B30F171DDE639B45488B890196AC4A256DBE87FA2B9FD5C78839321E3B2DA
5B6697FC6F0224F4F6018C8479E187C50BC36C500B101DE6C11079EDE135A3DA
AC7B4C83F112CD364456A7F5BB6C3088238C4838202830E4F2AC7BC9A0512C55
98CD6A8558B8C48946EDFDAE0712EB238A87FDC41A647D79A3E56C4B5AB817A7
F318F05DDEBFE49BE6CC438036AED93D9AFE10103551553B02B7017DC7778496
D1A7100D9A915D2A8FE391555001FBDAF0D485BADEEDCC18657062F36EBAE123
8653DBEB37050E53DD4E6AA8EE1868EC97A9100D213D75FDDDD758D466939A23
D7A779E813657B78B7EED0F79EAB0E79D1775A4271DB221ECCFA25639CFDADAB
B26748D0C122391FE6A514D300575C2EF67386F05A45B152FD75679CC1F5AFE3
453AC21512E0FB7C64CA58C9FEC679E82E40874F4AE55118EA3F62891AD4DEE7
C73D21CCD93E232305776F93F69C855F72D8A37A9BA1DFD71B7DD86DD0BF2C7F
B98B15F0F0384477A2A5CDBF02F56FFDB54335F9AA9F42C1330294869C78868C
09C04174BAEF8D5181CE3B705EC0FFC1999CCBEB73DDDD93879C3EF192DFE5F7
BB3E4083B8CA604579C3AC38C58F6235EA3E61DF897ACF304881CA6D0BF77E1D
1FCAE469761CB721E4ACAB68BFE954359C172FAEACFCD4BDE28886E9CC71D71D
C563BF3162AE741D85DCE22D655CA7EA6F16C25D5FA4DC48C8E07366EA974854
E793CEF79D1168758BC59C550CF527AF9B4338A594BBE5139DF586A182EA65F2
A12458F69B6E9F731B075C02BF33470523EE11A695819A4BEA1780F81C441DBD
E9B70731E34CA0E11E8CC506068BF444477183AA5E5AC7C7C6B120D6A180C6BD
E7F9A323699EA95D99B413A3A5A7A10D5681F72BB1D45ED4696A9025AF7ABCF8
00D7C5D651DD129EE4EB60B583320A18D172D0B30128964819805040983095F0
7E5775A0444513B0E5645BC1D17B48D67133BF0BFD4E32CC94D09E67394AEC64
3774EB44F3EA113A96971D017FB330535788749F3C53AD7B863C08D3ADDEACB8
D02A0B891DBB4C9916B03C58C164979E02A351E0A91001697990C8821408006A
B81DC0E435E865799F892C4368A6DC439247F84FF0A7278EE67FF2642FF192B1
2415251A79563B0014F00FA110A94BD048A963BEC67E2AD4BDFF02633D5705CD
09FF927AA94EE2A966ADAAB08C4CF5482858C35474401528A7A913ED3FD8D87E
00D5600224EF84A67716773D9DEC452F742EA4FA3C89760EDA39A78F0E9DE819
15161753605ABBBAF43FA1A2C2DD181195AB2E140A84C6C5378603BFA7A5D925
9F47B52232AE0C4CC3A7235C31C5FC50CB3FC22BBBCF0C69
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC
7B7FBA63800A37B6EDB5E58E81BCA267212F3D633FBD44F1767D5CE3A205C3F2
98258D4435F7CAD86CDB2D9EF08F2E13FFD0FFA610B1CCA391B8F65032736F4D
D2EB18FCECC20D99411CA0918A4E18AAEF907EC7D6131076BA25EAB5421B2C55
A43C3D7FD8317443078E3A7FDB6B95539CF003A195663FFB3A1235FEC42224E0
8E3030C575B01BA01325A524D676161B14D376DB237618616EC64BDF972895EE
541BD1EC657ED5D3BD43A15CB7EACE2A5AFE749E97308D8A30731A2D16BEF610
3E5CF27493980D042DB9334244F1B53A7CD80D444A93455702169AD375BCEAF3
987102F0C9D83420D26447974D5F4E690980035348B6E613150446293F3A2B35
3C3C9D2AC6CE183F72C2571F46E81CE317A0B867554FC418A96A550D2453ED75
51F09716732B9B7F6CFD3DBEF2854FBB70F3F5EFDA7CA047CE71B49325EFE87D
508AA84519A585B0D50E05208B6D2C68F8CAE9E03728954CAA40EF5C7609B7B8
A5E1768FD239F48D40506776C2E5BCE6D4AF2E318F2058F294D236578CFFBE68
A3A58E1A82794BABD4D8814B53865E03C0C0D6DE7B16FBD58263E48108AE8702
3FA6C06816598772E12C1CCF051938DBCF63442E4E1621C7B4A3EAE77A96BC8D
7EDC0AAC6DA6407D2629816D401982539FBBD85CE5A495B91553790303BC2B34
C61FA82F21D77803AFDAA49FDDDDB86B8F6978F44EAD1E6C3FCCB186BBE6C59B
B74DAFCC33DADDC64D2A8C99DF087027EC2EC8D96AFB0859D8B9DF74AA62D786
288903BA14F2AA4C819D8EB3C82EA74007016658E856FE5EBE3C8099E375D64B
D63E250047E910F5587847B9B4F6BC4383775280C8337FA283BB4340DDEBC4D2
56E13F78F42DD4C3787832DA8FE8848BA6FD3427F6FEADE6308DA8EEAF8ABC55
508E470D0EDDE6465223B3ED9E26A5D9B2A0136C9BC16AA4812839EF1745C0D9
E8A74DB6DAAE6CA7DD212083440C3C61D2BF3B821B982896932E0212DE5D58BA
9334E274E26C9B301BAAEE8A0237BCB5C7A1CFE8F85CCDCD23E9182604CB5D07
52DD37CDAD896C537B440CFA78A1197FCF102CBDC87BBA4333336530C19C1008
E363144F18651E39ECD39E1A3561F99043CD9EF07F9D957AB251D62164BA463D
C0714424BCFE282588EABC04F4E40A42037773349DE530D7055980B63AC736D7
3305BE7C76A6D637A543047CB6FB3907739D7EC6A3BD1B16ED4B0620CD94F6A1
3F12F4C185CD6EDA68951673D6384E6CD12944F86D178C9E4085E7065FB50E28
631D2A286B9862B0C69172A92B2BEAD105A169AC099700E454C9B0FAAF6F2A73
D0F47FA372D5CF659CB8BCC3A264110C2C6A35909BA14CFAEDC2875F4D6B2C1E
A59D629B0FF93EB424BE478116E5FE553BAE20B09A6F8AE40BE8937089322286
8F2CBCC1A37AC300FCBB1C8F38EFE801F71407301D522C2D87ABEF72CEC76681
F8FF7ABBFF2A12FDAEBB2C961DE6141FECE531A950C020BE383482E14BF8D9AE
C453B7C6B245AFE9025E9D4452957B2F2CD39BF76BC7ED9F3887071835353368
D8131F7561EF5A3DE144D44BB63166AA8C7281F619F322A3635893A174A266F1
46FB68007DDC6962717FE0EEFBEE2F317BC45E4B7647B83B7437FB44CE935D6B
4CF9DC620B2E22056DCEDF9A10781829D8E2CC2364301A79073E539D81EFB4F3
0C40106141EEBFA99CDF16DC6A00064D7077F2DEF495F3DAD5C26B06C284952F
238557A5044367C4D455433442616A4C587DF68D98B214195ECDA182220298DB
B1EB1FD9E604F09020F0544340C3B4C147A3CA6B939B4B19E81ABB65A105CD31
AC2704D9CB29783F12C090F7E38CA5FD2712B178BA064C258397CD00ED26AE49
300AFF5B193F615C74668742D21FF5E767074B3615FDB2707A42467B373760BC
57A72FAA1CD068777D347A8B6F77399BEF9EB82E6BD016871B1147B362BF40B3
9A4D6B374BA34BDAB4CA64606F06142CAC4E1A66E8E5FEAA5F4C73B8B7863968
2E6E7F0409243C6256300F7C60791293D5BEC043B961C52F408C0C4DDE1AA36C
3A8100A905E88E03863FA67D3BD8E03F418C44A895CF176DD123FAB23AA37B36
092D3F6CE83BE0B858CEE9CC0B2852034006B7B521346BCEA349DB71A2FBA746
74B45522764E6F579503D13E25D710131959963307FA4B714A496CD4CEF09B0E
D0F5EA472942E287483E4CF87E1719621E73D1924CA50B6F6CE394898642FFE0
B0330D747E4E19758FF0516FDF44E39D3CAA12C0B5F0EFA39AEBDF6F391E16A0
49A0614941E5A2F473A7FB099D3D51EF85BE0B5CB4644029FB80D1A2E5CD343C
DDF6652C06EE776A4C64918F88C43C68049EB787181E75D8EEC99DE256698CF6
4BC236DBEBC18195D4BA3F2D9C1BA99FCFC7C1AA06E23CE8D749527468A9A8F3
73D160DD28034D6CB673308B57918C6021A2C89D464D9F27EF43A14462603094
CE92581585D4AF6BEA4446A96EFE9D405791E7A170197BE122807EA0183C3F12
358E6640D334B3B6DC08A7A32948413FC7FEB1E3D5F75D2D02D9941A488BD955
77AF3B49E19CFF0E0F07C90F6F855904137AACF320408BDDDE228D3FFC32F4DC
11F6EC986B036C5DF89B0FBE8B7C18E2A7B55A71FFB2ADAC151A6B0A1FD7CDF5
A46134EB92CECF2BE970E6C4DF597301BC195E409C760F618296AFBFEE1989A0
9F9F9F779BDAEE6E66D20397C46FEA9B6EF288668FF3ED38378F2674A78B8CF1
F442FF1D29BD05B63562D004710A8334A2FF57C2FA041DBF351FD9F074C98C6D
159862B0AB696F138292F2F3BD650E492ECA67D539F5618E2557047043CC87EF
9BED29CEAD50C3030B6E9C2D912D0075454D9823A8BE84A42B32247BB1741C13
3467E8C6B76F74D9789A7CD9CC027EE23F3B3BC61A40EA57044322C2318E6021
9727F949FFCFA845B02DA6330AAC8899CD0DD97354DE4C7EF9FAD6765476339E
BE76D72E9B87BF502FC713972EEE9F871297B64B15DAE6CBA770F6B6A655DCBB
63F58AE668F073BEE1699F55E9F0E269CAF06B98DA337C55689D08FC1420A9D1
91AE738011EF30BF68A7B38C7A56EA6A28CEECD551D569370F38EADFA07BE64B
2D66348533FBD7B921EAD660B1402EE393F1238DCF4F7AEDE9B8294267C7B7CF
98E825EB06255E9BFA74A48286A97EC6F6B9591FD0662A030F6670C4C2F1EDD3
2C396B4C56916603A26477613FD4BAF26C1556CA27B37847A26E28CC683E82F7
543360110E3B578C35ADD0A8D9D4D8624CE3B1BB7EF226F862C9EC7F837D2257
02ABC89DB0B0B6AE7AA701D365245FA38BB516F3DCF1E7A9E50878A5BD96951F
226510EBF89944E64413A3C091A04B5E38B50709CA21A207D8D609336543AEC0
3E88BA830172D02040286BDA9D17A20F6DC3C0DA1C98016CCCF8AE794B156F8A
765F5298B12F0902609C5A6C814531C504104FF01A8C4E242D55B1636092FD77
113D57FACC8581FEB9998D7380381D725B56B3809172E022D1219D78BE4FEC35
74D5AE3388DDE9AE21AFE51F54FBAC23F58C8EF808B093595E631544CC051BAF
ED695D5AF5608562153DD6A09E462ADBE677E6F550F93926223BED8EE2895A69
6AAEF0EB67902FA53D9E8BCF2B5D8AF926C15C37D9CEF904EDEC7E3FC20AD92B
E4208DFFE40631D5AB3408B3B97DAD6D04F8F648A3A9E159E9E504F5B6553AA9
BB15553DA69B99B6C48B3BB425B6B0B0227232E6FEE461134BDE0DF9A847490B
82EE2A87FFB2310B9E3451EBD233B878CBBC30EB08B9D15092F8D7ED625CEF5E
DBD37618D207AC9D2AF1C72C5852CDBADE2BB7515A4CCE0A21281D3155638959
72BEE88BBC72BC00EFA22290B3DC8113DB1B383EC98F8367ECA2844E0B8E3F51
1BDC9AD9DF4202E2F03CE6233E642D19FD41E415FB5F95E4791A6371735299FB
62D320385820DD78AA19FF23F88BF734E8196D4B53ED8ADF3E388BFB5372277A
7521E04D548D00E7BD7927D8E012015BB185EB7D35201AD3125FAB5F94FF12D0
8902EE97B8CAB0F872DDEF7202632E7D13C56D1365DA81125A10EB80E6ED8D5E
C2F0D4D4289F3A272B7A987888C1E9D50C054CE99B9F75309C621EC412B70E15
C4E1121B95E27F60A6DC8198F9CBC98E8777B557411F63F20B284160198AA55D
BC4F8AFB26976879164A87AB4CED4A848913531321E4CCF34293024D3D1A7BF3
37DA8B9939021638949FB0039DA5F622FC47CF29925BE5E43D9E9731AAD07B02
0D3CCBFC275E73703D30559DA66FE556747A21296C1F638532CA0999707CB19A
6202ACFBA635A73EC67F26C4A36894C4120C6824F4778878790722A0D712FD2F
DC3A784CB8008AB9156346DC95F29056A0E8972D5E0FEDE1268161B9A03DDC5A
4E37D26635220FB98495B2E4CD4729AAF9B80ECC6F2D5957085F0408A462B763
9B2610BE2FDD5E67DFD530A3184288257C95DBB994E1887E1D875943A84DBBC2
498E7C660E8B4909C37CEBACEE7270EA076115E876426995CF97D6FB92307C90
95DFF47B1910C57A47825AA81A8E0B96B01BC1A3A9396EE80A258FFA390D92CB
FA44570E58AA459B4B19F3D15F6C7215840AB673F35C1710F5B9F52031D967A9
782C3D1060E25FEFDA9A31D6E8675CC3F471481BB46B91EE932517DFE2B815D2
88DAF8F0B34F5D4E695F084C94FC6DAAFF2A9D3F119E9C9E53EEEF08AE123C97
6C6D8743F78DC7D08679C38C7E7C399B858A2EB52A590DA0FBD0CCBA3A05B25B
0E98968FBA2BFAAAD4702FB53E7B56D103AD819382A9EB1E201AD6F5203774CA
29A7E1CBCEFF5D8A901D7FD1EBA71498638B358CD2CC1A3091D8B9A27050E5C2
B717DF445BD1A455E6E60215BDE6D5431809F175C7567728FBC797A6FE0A044E
05E689851C43E8F5701567DEE73141D0BEE3147C42136556F9C9D4DB5C342277
749E85C7BE53D7191ED6800B6AD0505F551F95DDE3615B9F1E6134534A315CF6
322003EEBDD461895B0CE67EE0F3250A0626C15B61C06C83CF64DB734558A0B4
956554FEC18293C59D678580049342E160BAE1ADCAB72565D3820C5DC08A7165
07690C6E7738A64DA6519EE828AEFE91DCBB846531D5935D9AA8F5E15946610E
9F323CD7F2A9CD574B60FCDC337885AB91B265532EE83FAE343882AD0796D5CC
BAA6F264F2D525BF2C8521AB6B8FC85ABE689B800B8365F09F8AD95CD0297ED9
CF20980B148F6000C565F75E3F384644DEF9188761E697057F013763629BE817
F053F9C6A4F1877365FB0B7856D540B61473D5A112D1F716AE66126E38BBCAD6
03C74D3C8F83DB12FFA2FEC28A987FA54B40D367A1A0E4558B4E33BFCA4A814D
824EE4CA5383C6EB8FFEDB5720326DFC2A455157B1BF595EA3E14929085DBE5E
C08C2EA7E6A19A68B64EAF236A3468C0F9453189A28D2F3BB17184E9FB3C39ED
D64DD3FBBEDF6264FC31B266A6049802351B8BE0311EBA746E16221DA38E13E1
3514CD7A9C897B37857F7DA23405E1C7F07975158D6902B2DC12DAC3EF705D9E
38A3CE8A943EB455322A87C1634074EBEC25F494445521B5226A3CE66EF829DB
D89EB24BB2F33508A93A2DE96C095EED5449C6319F2DB9F1065F9997AC88663A
52FC36DF24F2008D619DB75BBA85281C413245BACC55AED8C9B996A9157BED25
298071EF79FB982E78EFFF0AF84328E8A6634A53898DCCBE54353F36F4E20E9F
F94EAE3D7C9D53126432B63965BCD801B0FA80E9848F75888A0FEFFC11DB7088
3FE6F475BE491B45FAC192AC842739AB99A70DC8848152E92CA525C7462B9305
CDE1B59889528DBE0C561289A79D9C260FCD56FBCAF9D5F43363A842E0B107BC
C764817816E494270495CB51BE7FF107E4C46F38DF188B333B227D98FD7D8637
9B149F54311CB14681571757E2473F3387FAC65EB8AFA030891C62F9F14087E7
34B03974E34213A1B0A55054B7FB7A73E5490313BFC7599FDCFA8F14A048ABE3
94668C6F1CEC3D07A14002E454BE43246A11B4C17B55516CF4256C1AF9DBD30C
40B6D35742A408FA77154EB77D6F52481697CDA9CEA9E7A9E8D9AFFE49AFD568
F517AAE9AA5E1BE212223B168F4E160D094F96DD0947684B190468BFB7B9D2C1
9BC589990656D0ECA75DFC764023564E8FF99757565804B85F39D796E5291351
AE1CD2BD437656EE331C217060AC31A8ED3AF8897BD16EBA220B626CAB57FFD5
957CCF94D46E085D6B51FD3EDDA3EBD21CB5B571D21A654440DB786E290974F9
FA28FC998BBA0706D024C4B1B2ABB2C2646D3F2500142328D8D3B40136F3CF6D
B7935302960691FCAC3F3D018449DBD45BD173A06B84C2EEA2479CD3E08A7D82
4F2B9C42C32A520341FA16D6427F797BD4F9FD0EF0E519B198E249E928F6A7F4
4545795771C4B0FDD276BDB5814CC668F48EA462E9C8ADE002024C5FFE6777D6
E374B40FC2ADE40888C5DC808B622153F347797DF580DA0E0A4F13FBF20B25DF
F7861AC70D56199D99012E739E57A09B6024E280930FC9BE78B461E977F25004
E7BBF5D14982D974DF682AC54E1C416E1BECE3CF25BB0C4EE70CAB7C5DA7C9BC
DCFB67F1B66A4C1415072D732D073F4FCF983F6E922F751B981FCBAB4FADEC11
0CCC126D530C543C78E3762A109DA8B55B5C61EAF462FCF7B4C92A8EA9C0E004
89535D50F3C73B53F9A19363D6091443CAA846B4B896AC332DBC5C50C97EA23F
43176BAFB7DF0A157151F7625E63296E325E2C35206D5B7A2CEF0B8831E122CF
EEC2DECF76AAB9B3BC37C9069478654C8AACD179511A766B32D2B9FB28B1B954
A305B543C622B160945F93BA6F1215EA2DFFE4D82E847DD225E82B764F67FA71
65C2CA2C4DBAC2EC5EFF288945B5CF559A079F2FF1C3615FD8AF94F0747C51AF
468239399615ACDAAF2CF94A6DFE0713DB9B8CBDC0D146C607ED01847F68EED0
3DE18F3609B3FD879FDEDABEBD4D7006A2629F17CA285F102B7DFCE33759C29A
9A3B7AE3F5211BBE23CFA17F1BA739410ABC2D312B443B447D89408CC1094706
9ACD42F7B2F1158CD08F8D4FC7F3722A2E41B4F600706D7792EB4F17AAEF29B1
E8466CA28E646514B8CB0A928362B4A13AB83AADBD6ED7BE07C01D2D4ADAF99F
15F7C116DB632E372CAA22D747B1608854098DD64C5F413002A79249F6745F50
963F8E2B3489A3A8B31A1C8701545ECA6EF2160CA7018895B617ED9386EE2F38
1A51DD43C6B44363FDCF69CD663592BF1214E24066AA573E6EB9881D0B12D558
59CD17EB731CB63B38F33C014F2B764A66C7D6AEE897F2839C52994C62744B45
2ADFF16F83FBE176C468E63B296FE28B92C7CBDFADDD149633D50AD302885631
58E377EA500B8E1D8BB3CDCE8EE707017EAEB709280A64F5FBE3E3039D62216F
2DE3AA8D4589A13C7E564F3C0920FF09C785CC7E1D0401A7FCD4D6A34515CAD2
F83D54A389FC2172A73A4815EC92F2DA7F5F5B55B29826CD94E8088114534F6D
36E4D6B12D818CD4C665D405CAAA6D9600AB50157664EC44367EFDEDEDDA562A
EF99FAB7997436CF1E501C581666771FC28436D078698BD1510D50924235FA27
6C55D091A144CA75805906E174EB92356A883378C6ECB538B1BF02188644718C
421391BC4E0BDBECE4A7FC58DCC2F00B5F239D97644F6E400363FB537DB0DA67
0E7BD287A94CF9CC473E527348574CCF9343ADDA08156FB1E6117FB21C2F4693
C55279D18F5FC90B50FF3088027770565CE44096C2693A4660FE64C1C440D1C8
0183C887483EA284E78FFC03292723E9740CEBBBBE4A72103663FE29397D8ADF
24C75416042628EDCD86876B9AD32BF87142F762E107F30CA143FBA1C9F662A3
5F3BEB5A529B512E85E0C644FC2DD3CEC3F7DB1333A4EB3C05B28980AA04D5FE
4731FF68F65715BEE99940BD3B54587424A5EE94FCB35E3D33ED635ED9019232
C234505B395851637503A6265C8CA6CC1B3B924460D9FB6C2AC28C5BE853ABEF
6FD03DEE65BAC3139AC539ACBDA49DF3575CCFABEA87FF6E8186B64E808AD7C6
9616952258C0FE93CD557B6E7ACB7D3646D1A5598A42F97C89601CC59600CCE7
329E8B023897CDF0B7EE5A0E8DC4A1C038E4A4321756215EAC98410AC0D65D6E
B6A63CBA788D18B0976D0581EAAAEB4173E21C15F78B17C4CEA5EBC76C94D6DB
8098AFEEDB9891A4D160EAB72407B03DB1D677859BE22829180DC4FEE2F59C3B
E7FB52989F4B398FD87BC2FEE90A1234E7AC76077E12C2819EEDEFF0A5E9BE1F
295D57E2C94BD8F6B16BBE5810CCDF6766ACD5626B5EC04F4DE6F4237FC68CAB
8A03EA7411202790637E4375815EA4ABE99BE732D65189A26A937CDE2766785B
6939FB1FF0BB2232BA259FC90822919E4CE06A8B8F46297420FFE3156A9D060D
4353F64D1D7F6DFB6E00260EDCED9A6FC8E5B7B915712E24DC8259A354975350
DFC0455852748C0477712A9A9258B4621CB6A079B1D70FAC10A4EBC4EB0BE4D7
25F63A6FFD91656E6AEC36C38FFEE58A7CF412C97859BA2D699B6774CF345B44
FC96D08126FA6EF4AB5CC7D6094DD7117ECFC267D7B1F6342DCC35BEB2EB86AE
5AB1D2CE23F327EBB14E86067FE0FF1E63EE69BB13FF319B6A7B9CFDC0C733F4
52DE7F0441EB7A91FC1AC004B8A6D183AE185AD76911077C30DC0E40C2D8A6EF
4D85355E596E26B676A8C62B49818A141E36A6EBEAC4EBDDFFE3A1CD8A96F57B
84537F6AAA59C5CF7954D408A67824D6DE27B03FFBEC9976DB8C3F21E3904411
CCD832A4367EA9C08745AF5D06F2C1DB42C069893A6C31F0A44812EB03806099
43F3F90B3AA8208A7256BCEDB7F9DDBCEA5C9A3FF0196DD8B24B56C64477D228
181C863A4D48BCF4A4D901C8CAF12BCC0B92274E1F35429B37EADB5A309DAC73
7C05B4B6653042FC09D14C99A69FCCAE3D3BAA6C3EFEBAACF6BBE947F82CB65B
3193DA760614BFF4F1E9B18DFC8638AB2F4560C2288E99872B907D5A35F41506
68DE32DDC14B75789457D52224FE63F52062A57BB5525EE34897555E41856D17
3CED91E77A8626A29B22DFECA500D3C0CDF50D3E9219F9084FC2FF15E481FD06
2EF0396CBE6E4518191D73F4B2C33C65A92958D22B630501C40F76620D8BB0CE
AB8336A2326064C6850F194EA0F3B1173E2D0A3F5DF0E393873A2B440ECD771F
E0D1CB9333369F463FFB00BC4BA7BB3093E5D41E635BF0B16F47313008F064D6
023F0B911BA297FE067941D39239CFA195CE54BBFE9F13E4F119193F61CB7A3B
D457397797B1F5E1DF730CF36E7E0DA7F9805563542775ED9ACBD9A9F11070BE
452B7541ABA3802CAB0DDE0E2391A4398F807B63BE700B1AFB79F0AF65F727E3
1CA39406D73E24E5E04C6E0ED12E15FF74ACF68FDD32149850BE57A6864A7656
C8B58B50C813C0222EAB7ADB2DD5A9F66C4F8318AD871177D498B5988E64D3F9
A4E0FC5FFC450B21A11093B30D44F25A29858232342D74B1A09188847B2128EB
8B139A5FB3EDF22290E55CD0C1369B201B4DA7CE2B7194624D33B42527A74CA3
F5333A0940A5363EA9B5EB77C98BF402E498D91DE8AD0B9E7F7F265666D7579B
CEA6D053FE58FA2BC93A3066FEEB32602DA2B5FA880C537F60E1394571392C3D
DF2D1BF0A0B29BFB01DBCF14D4CA5F89463EF6D0CDD24A10C444DB6BEC4CF367
0414C2A7245444DD74DFBBA3C240CDF9352A88E98158207EAF44EB9BEB5FF854
E579B79B944C34C57BAA186858CAFA75BA7DFD613802C1A87E96A8379C3AADF2
3AB9DC687ACA989BF86F24F23F68ABDDE720FAE7571F9542FC063B35579C73EB
8B80508A4DF70C1EA26A509F71696EFD6AA65FE8DDCF6896665B66A7FE7F3813
2B7E187B4F875CDC2D0810206BBE5A330CBFFF3359F62327FEA224A856E0B730
9A9711146DACE9D8C453FBCA9132C26716B73584C049A786679CFB5EF2716545
BFC34ED8D81DD9CD844A043E05E71A63A45564266C895B9329DF559EE4F73496
FDD2B58F8B140D4759F878B3A2F97270CF2AA8ECAFC79BBBDB66CE1C1A4367F2
F60410E4FE9A0508AB7AD97D6A747C3B3FD3EF1374EEB860C90893FC6E41DBC5
4EBC143D45C196E894130FC26EDF9639E4256570975B25C6C1F06CFDB2FD9035
36CD299613813684DC597FE51BE13F6E5753A079544EF443E2F49FC971F94007
E7CCFE301062DB793BF0C98FD1B0476C28FC1B1B3E5FEF3A3B94CD552E29288A
B0A2F7AF1AB4EAC6FB4A789EB88F31D5F2337EAB4F702119F85CDCC0FC645340
6CEE1E199A2ADF708DDDCAEA17D16D5C5BC98F38CD281C040714C328B831F1FF
08C8F7C3F6C71F285D3BD320E14BBA53523C51904867D723EBAE87D8926ACD27
3FE63A16FE984DD5FFF5F83DD310DC7BC9A72904601397AC6124220C280E417B
CDE241F0C2538DCC3A35978D6AC89C5D7D115D20015326BBB45A5A1509620D2C
08D1FE8B52B6439032D4D1BCD52F450A808D2632F2D1F9DB9473701FB1941A76
1454F981D212A0F30B0604B0B0E7A25F06EE17DFDD0073BE14C1AD2D34100CFD
4DDF731DB26C86ABBABAF4595AEA9D49E3F8A19E93F3B6ED6ABF5FBA7CFC2153
F70944A8E0BE7578B7A682581FDD7668540F756B0FA290D6A228C8604285777D
95E72413DF80D5F696FC6E2D4FB5CBC4198F4DD44AD245F4A10FB1903405EEEA
F0EF679CF89AB4678AB6609423412969FC1DECD51E5B3FAB7389B7E6235255F3
B9781519418354B3C9D4EEDFE9B817AFAF601CCCF53F7D922007B1DE3B137130
5AB9DE7D352349244EB8BE2259642C943BB5E456F818BD729B7F7F4E6A30FDA8
DE677CCA20E14126A98C80DF80A4AAD82FF0B59C8A9ED30112AAEF28A6AD5F37
FF1C0B7B1677781EF35697E1E5A8B467F6A0977BF8BF827381B9604331253B17
1124505A0B81DAD0F2FFAE9910A5BA6B4B702E29B9ECD544CBE2D7C6FCEF4143
E50F9A9079DD2FFDDF1CFE49600B28E6DE6DD5630777328F56CEAD976629276A
5568D9A4A02AA79B5975C140AABA1B604C266E6DDE7BF2AB65B7BDC9F704E15D
8F7E4DE009307129C04453913E906F101A72D8A82F7CD70D2B36956329630A3F
9C14C33CCE480B3B81118510A06852EBDFC8B36B510418C098AB1EBCE160ACB6
D82AB81483F5A1915A280689D4678781570A540DBEAC2A6E2F100DD95B678B6F
190EAF29AA60AD3772159ACAF8967883430B4EC67FA6ECA336DC6B0B0340A268
B0DDB25BD184FD79C57C9EA994EA6BE7584D0670E527BC95332D13B3980549FA
02073BC65F5267997DFA2EEA9B7EE86F7FF6398C06F8F578B499B83F686001B6
6E6F09E890FA521A931274C30C6B87C58F9EE545585845B09D855C3A01F713C1
BF081EB27E28AF2E8B8086EE57CDBA55D394AB66A7C4D3AB2CFA6442B4E7DC41
A0488BD81A96995486E14DD40726C5DB38507CB250DECAF46B650947B490DD96
671AB5498FF7A015DF8A87BD6305E84DBF237C074120E9A595ED91541B42E281
832B76458887F0FD9D971D2C75AAA237EFCFBE0DB069F5CD08D2103181F00DF8
ACF62882BF41514C613BC1C545DB288C6C3B3C1AB46BFCDDA190E9E93C8DF81B
2AF2EC03A564E57F914969A1F2D001A5D7C9A8DD908E921879F1990BD3858B8F
DF4445719EF487B22532E89147C3FFB0BE9CADD113A1DC51B11AF5BAA7AB8DE0
B44E4AD580BDB4826950643DD1E0C7F8DA6C87DC26306136303E2EE061BBFC66
180409995938F9BD5A6CA0873B2818E28C533CE73BE753625DD6DDD8816291EE
7725531F8F28E0218C4D4CD7BEBA74BED51AFB08EB16469390F93BCD7262250E
0BA6B7C627731402610E46872CE5AE09157F3D22F58FAC1115AFF937E1A85022
96281BF8389D5A1C495C077DAAE47E6B8FB0144A861E53B3DFC6938F14D96D11
251F0D8BD58651E901CCC6BD34A540CC0B82DFC7796293CBC9423D966DED4F34
1D225723A96091C9E2BD4E5341320F1BC615E42A10FDBA51398D360D6B438607
9C11F12C5F8A59DAB86CE7477658A608CB758F249D2CA9DF542AB4A9C67F4235
36F0D04CA26CED51F1B3A93EC14F0D2FE83F60403C598F8E360AFD7C3A3F37E7
7D7E70DC8F0FB702CEA5C02F3FE8372D2DBB679E32E8B9523C3316C7EDDA3AD5
A84ACE6F8C51299E860EBF0870ECB3490805B678FCE0E17688A5BD0D79AF87D0
99C160A77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC0A81C49132265698
16BFC2FED797BF3FBF60B3E0A4BDC07376494CD0FF350D1CEFAC53A2119A54FA
0B1F4C17D8FB24F40B331D853D2C54E5123E5E2F843602DCE3A9F31292295BB7
FEEDE3A4F983FA3424D8908193BFF7CA31FCA7DED36BBEEA1CF22AAC9ED43059
3B28EAA745D514C1CCEF5353BCA7EF8CE6151D158AA7D6F4DBE64EF3E6ADFA0E
AFB07C28E80FE1BE4890F4ABE1BE8433E0196753C98D329FC716ADC610133ED7
0C3119180B78C2071433FDCC748D4A2A0AE8620FD24CF4C248948E397F8D9055
BE2EFD56230A94692248D224912F77E5C213D71211104BDAA3C4E6BE9637FC8B
D3E94D6257BE1B7BFB16E4BFCDEDCE5B0FE5ECF23DB04FE974772A2224FC3BCD
9779FFDB12824857DE02F4E2422976C62CAF5D87C2BEA40EBE8D8CFF4DC312E6
A454DCCDF83FF2BBC7B17EFAA6B80DEC07FFC5DB8427CF5683A5EE4D7FAB4C37
B6AFEB8ECDD07FCC210033B0316FC13A50F6D110323B8E23E87BC295EACA3E7E
A4F5ED92E78990A082ADB3A32F00AD844B165777B02C5938A3F19631D6133A8A
826BEFAD5245D29386419D4CE4AA05D1B9F055304FDE0541624C7A0B041B711C
074A9C05A17C014945F08547DBB905FABB0960DF7A27D153F5B5FAECE0ECB558
341F4CF2448C5E6B3C63E62401FF8E32AC2D33BEA4BBD681EB4AC7FB081DD51A
9DB64D82D53435C7BAFD262DC7F7D015F4BF17F5B9245FA7CF327CD80AA98451
165EA950EB7286B19E387871FC1E8DA934451F045700730153B1064BCE1E4864
4C28FE4D8F7FF429F96D0DCE41EEC1EA29EA44F55B293362B70DAC2A775DD602
3840F6B99E51650B25F65390F19446FD9AAE7E228A0221C37943AD3C07FE979B
591BFA54C3DD55C62FA36A90BE94625D1665FA71E013C2311B9B71FB748D8AA7
E4326A89202AD1F0E09303F8F6B661371BB906D915352458CFD5817DAC157E38
85B8EBDC3048D931442F409F848C2646EC58EC8181601B97C41B91E49D5F16F0
317449079864D54B26A575D9DA9B920B2331F5EFB61253C837805D7BAC8046DF
C3F1C85E335DF9007059F4864B176AE297116D9396DCD91341308ED6D2C4693E
E8E6192E8598D13746B031AB6DB7538DDFCE91399EFE67E259717847836C58DA
3892211F2C244EF9C95F757618883EDD882A7A6A06BF41E73310943FA7825338
EB77FC488E0908556D21F5AA813B81FFF08BD037A86EDCE082162D13926D3FBE
136A04BC4FCA63B1271C7B1265D7FD59BA1F9102D5A13492C763050D8E3ED64E
5CB85EC0E63DCCBECA12B839EC2CBFFF7FC9AC13F612CB55FC8BA98A706E2A30
A8D04F8F9869AE0635F14888FE5585696DF1DF9B36FE935AC7ED5FBCC2445825
11812BC0653C63E62401FF8E32AC2D33BEA4BBD681EB4AC7FB0BA046AF0FEA6F
7664923CF9E8C2DAB8CFB4A81105CA9282DC381EE896BBE7AB8209F798187BE8
5B570F3AB27522EFDBF7E27A57CE61292AAD6582B3A661F4D48AFBFA771025C3
AC407FB24F4ABE14345D6A3A253C967BD6FDBF5919FE284DF3EB31BCF8E2D748
EF30C1AD484DB4BFC9765476D38BE9527F7087135488FFF30297DCB1D7C540CA
1E36570539BF9B5C30B050605CB66F364269E788D016E83C7C6381716EA9FDA8
379DAFA5415D1C28334B862CBCC1A37AC300FCBB1C8F38EFE801F71407301E1D
D0BA070CA8F4562F321D000ADC343E2B19318543537BB196AEE312CB054E84BD
3442D366CC01BEDD930B22D1A0CDB0DBC05574F7670085AE08BFBD0425E1C1A5
5428D4662E48F649117CA18CA484E11F30598F44A65E28AAA2025AAD3ED6BA7F
318D51CE670573B51F6466922561049DD6AA15B6DD86726F1107016FD88A03A6
79E33807C38259422AD260702C4419860A94D0E467A9832EFBA96BE9F096EA44
8EEEC36752787F85EB045535E44A67A0963DEE23FCEBEFDB600F329705E66D0B
BF112BA75A25D3C81018A148C5E9680DC50E94288A7D70B4F61A321837856DEC
A1314799400838672FAA85DE8B014AA6FE4866BB1FAB2FDF42E184BCC24CEC0F
0DF52F752A1A312D0D8462C9389D0D7275D2BAFE88E44636F3AD561C22720C0C
78F40D46FFD5B2E656036E49EE941EBE1E65D96A80F79FDE63FC7D2A4A9E536E
A827EFD97218971819C58624089FE39F416FB3FC681F63152407698138FFBB16
C5A1132F73A6E14E09CCB4A51B28502CB3BA262D22D1BE79A172564F2C36D240
C5DF06897B48C7D5F84C2BCD06B95540E3FB3EA320DD09E5B54CCC6A8AE10011
6920383B0A69281E3DD8A266D48326567DD882ECEAE1721C799A9DBA12E901F6
30BA5067A51E005DAF108ED84B38AE432E26D07AEA271F903D7CFB8F7F0D8F74
A67881D55BD5F32F0FD83D482CDF7EF6BF0244C513B87939EFD9DF31C42A62BF
096B816BF1E53DCF75CD212E6BC289D87F1E08E6EA810D7009159F1DC8317F91
CF44D7D24B679F3F71A5B3BB3F340BD76CDA07902DDF6A86944B3BEE596931DD
7D5EE5949236930A10408FD741DBE14E0C10896BEDBF25262B1C95F281E01093
481C9AC73B31E33AE09BFF84B081C3F860632FDA436C6B8ECA1A2FE45A37211C
066B06EAC454C2EC2E3F6038FFB72E03A05ED59A723EA87D7B7EC6CAEB5D464D
2F9278E431EBCBBD0149BC294A9A29640874F1BC354C009184EB8115BFB080B2
E13090929978105673588C1F1ED9B28E72BEF671339F900E204FDA3CA9C2B6D2
FEC0E0E1475851AFE225349BD9936E274ED7A5CFCC0057DAA3DF9AED0CD76DE2
B8BBFB516D51E15344DE683298529C07F44BA18967704D31695637101476B760
FEC108EA4DED7717E8E16EA5DC60DFC24A7BB13CA20FAF12231330B7123392A3
AA4A30FEEA34F3C033B1F788191873DAB479186FEB4248630A661FEF6B02BDC4
F7E2AD37323D793D097088A0C0654CB3D87B2D7527AF471DCDBBA0BDC96AB2A5
A065665A87ACB59F9268C1AD9A3E060A269F3AEF1370BD2A59F55C16D8B7A59A
FF84CDB1658232D94B96018018AC4C0895BD0D6281D5941AC7D29340F9B33396
56B44F5246C6B787C3B81DDAD3416FF2F4637184CABBB06F48159CF4EF8690A2
B50E739854F373739B877888BC5A2D3F437E2BA9BE3FD04EE2BBC277BC321ECD
DF8287AEDFDE149D299B77E388252BDFC2BB8C4CECDDC432D0A0A6BAB46D02CD
FDE2C2A559FA4901505284B885EAF2F92040E6F7FD2E70D202C93F5144261E6B
E9AD11145AAD509DDD488C2EF7CD93F5DC46A765E078F9DAD4A1FDED08C91103
0D504B627730A5113A0C2DE853AF33D2D8F3C324136A28F40190369BEBD17CE7
2100852F8A08A91869C656598759CE9592EC1EA0E111B35B93E0480FD275EFA1
FC322E292CFE39E3BC0734B662C68D76009AC82CC2C2DA8C44148B8943BB21A6
A99858AFA01D067B1B42FCA9B433958181139C2FC3B0BC0D163EC93CF0AA925E
DD56BA6893A931A83AEF2D6906DDBF5A6219BC49991309BFE0467FC01E2157F9
F0E52363730140EE89AA9141A51B2A0E89AB87FCBD414B68E1C4E710E73AA8DD
573D49B405874CC201981FF611BE60DAA9D78E5CE8B77D1D2E93B2B1029259C9
0AADAEDA461F4E7558687243AC76B88E9347568EAD38A387139C7D65FB1BE686
827224D823A88F9999D48015299AAC635725AF0BBC331A8B1E799080B0225513
A48648CF8C5C69EFF9D9768CF2FD862DA1F3CCE4CC5D1031487649E9F341D724
F6F33903DC9528BED048AEB3D028528F61F0B77FFBE6D93210C0D2EC47CC7E55
E0CBFEA07E7BBC796525FBFE257E719F0DD33992B4A7D79F0741296BDDE2127B
0D82AD53432AC71A721849D82771953E9216164FD03667E2902B3E4EAE1265BA
740BC9E11D46EB6834D020D50F987A501CE71E98927A4AA541C0330C0E58DC51
F2617688F493F83000578783E1A8407BD3E1C5D5E6188A3CC6AB8D2F0B55B88C
7226D2A38F1652CCCC8FB780F2DB81D72ADD30AD9183C77C58958306D0513841
F50BC25FA8C391876AE372003985DED94D7119DF5D92C1D6151D1ED965E9073C
64E5F9E5AD6C0D954CE341DB7B455E4A937B05BF56F35BD79F3811FA7BF788D1
C1CF4A6165B8EEBC6554D1A58E1AD398A43D47BC256016011C2E3FFD96BA8C17
CAFB469E55D95E461D93B199BBBA5386D16DE8DAFFEBF3BEE4B783224C0E232A
059EB5BCA2A545D03E6FD5D2655CB53F06982275AC577C29AF73F8C66E80BB80
03B90C90D5ECEBD8026904B4DEF04618E30BDF97588ADA6573085733993B4724
B1A742E31A6EB1E85E9C0D39AEC4DF7FC4AB3251E45031210302CEFC029100F9
3960AB6C76B7CC7FA127F49BD2B5ACB25B4FE8692C746BD0F7EBA74B51E0BFE3
EEB8A0E9C3914CF4E7A311047D4B06B9F10B94BBE5994B4E5E46651FAAE43ACD
A4C0B8015F8D803FB3A9664FB8140ED4FE4C534FFE6049473593E9EAD124A322
67B2F5769C081F144050978A7F1E7C784B4B6235E131CAD47B681C3101A5AE6F
219797F0B574DFEC1F07CD15C9F36C2867642CF5C3C7A6B6855B30BB953F6B8C
0D11256D8D9242914E59BE1941F0804C39103EA26A0588D78A44180728FD311F
9508D6DA3D309ED7983C6D4FCA3D87FAFDBA822786288AC7CC5D3A751096721E
0106A0FC93815CB4580C6C918147E883F119FA4FF4A4F17D81B3D2AC24C03566
5DD913E0E9D18AAF45AC7C3C57F929FF1C8FA1259A71B1FD9A8991C29496D013
2C6C59FCE92C76E4F58BAFE3C4D9FC7B5FA9A7DB9F0B74F66639A6DFF14A3279
F011053AE0DF342E2D4F544EA819564644C0054F7F3540CF4773619B7ABCCF2E
96E29BE0969E2E6FAAF3001E775494F97DD20D3C772786841C941885B8E7EE8C
BD53D58A72ADB73E9372DD2599A8630447C3B904EE372082861BF72C333EEB34
C40A56520949BC5B7A8569BC150D9CAC425E700E2B785F4B47B9050EADCB8286
221515E8FA0324852EF95DA1E9E76779AD43AB1D0C6B1287D624F7D78C26C1D6
9BBF5DDC30F4A61119733F6F6DE0BF4C6437A849A664C2397BA2A85AEEAAB08B
10DC15E61F19206B9BB78D667159E27EDB4C70ED18AA515CCC195C6F74593794
E215C20AA078C6D26B1BCB8E79F1C7B522DFB2630621CD5BD667566C73CE2A3B
D7D753AF151C3D225E43D66337DC7B442029D2C2EDEB1CE54B24958B79B303A7
41B690FAA527D670C78E718381F6925EC95C3AA67949A6C54C6F91B67C2AA9CD
5D59C69F866B8767BC0304A1290EB4E355D15BD548A0B54E05227BC64A8E4ECE
820F005C2917C0242CCCC3BF224D4C20217AE93E4BC9355CD59870B8C57F2F7E
EB6B877B917E0EB23B79C5A3AA2957EDAE5514F883618B69E282F671685277A9
C4CF1D411322A0A3F988455D7AF8D58D6DFAD7AFA56131C3C3E2DB3D9254363A
00BFB2F2B2FFC89B87A86D6AED2DC26C28A403BBCA3435C3FB7971E9A563DA97
C913D524DB451DAC56B286F6800DCC71D24C384024BE88CEC54AD33055784F7C
EFA3CDFBDC17B0E9D3A764A1C19B92780107DF7679BBDD40A579A2D3DD857905
E92680B2E2589BCB04D341DDA599C4CF75633C6FA9FD0673BEC85EBC932F90C6
D98649DFF4327382215F4C0933964E7BE2E19CDC85E9D8B7E55C55B02CC47C12
0D5B6BAF315A3B6B5FC1351BEE5758F2343B95478A506D5036270445661E0B5A
A0AC4649D90F4BACFE7CDA4FFE64DCF7591F16BFC51EA0DB9E8A2B44D67EC644
66E5410DD289DFF882B4B2773409736124F114A58322B4824C36F382B70C2EFB
D01B0F54FF8B9555B1342460028EA20B6F93CF03E04B7B70665FC2461E976D48
6AD3E06C0717D04E786BD48932785622DDA773D3218F55648037F10594B61990
9B1914C9BE0F4374A86B6959060FF8BF5614ED4E66D784E93A77B03090DDB53A
864A086E6BC47BCD37F493300187A4A835579C73EB8B80508DDEB53F6E52ED2F
1DD38A57AB9AA6FC582E9A9B3EF96C0E0D37FC4CD2BAB6116D53BF50D671BC0C
6A5914B4D27112A758FB3783C177DAE9A669756D1D5729AF8E8CB9BEBB6DEB05
44CE4D94D6F3812C2648A3C8E9AA515A06D52DC4AAC37B24FD108D6577953440
418FDDC13BFD324ED82D6FAD0D3CDF77F6AF35B5E16DCF147A45C08F96F8D673
43B20EB481B07EBCA78C108749A0DD6DF9465ABB17EB0B9C3F738DB2D17A7C0F
EFD2323D9BD1AEA02C1033D9793F00C5BD05B748D15204936750102D2581FA03
BAD307528DF531A368909874DC82E0B3D5ECCA8B5FDAC64F5DF8917BF977150F
3B5544E934582F93CB2989FFA3D4A4B249D7C73539AAAA8CEE223D879DC0E84C
571F4A72DC4DEB12BB801BC5F8704C4D47CBD2553DE20E18691E0B14E0AA7B5C
D7AC2A6252BC2717D101C704511C927D949D5CDBCE3E513AFED096284C96B1AB
B917C12B07A78E86386D29A7CCEFBAA8F35B4813CC9D289E569CFD37CA20FFCE
0F253FB6800D5DEB56E83F52227979360CD937B2E2AC3AC528624C4B07752EFA
E07627AF2D3D6FEB4449EFAABBCE2D1DD8FBBE104395779E67E198275F318A30
F94935914C8E7B0DD6D5870F72C7531D15E89A276367AE836AF2EFAC55FE94E5
3DCF6B76020D9A48A911F04925382D04F0BEE41DE929DA3443EC28D399200BFC
00FD0236F2EB01AB01A410BF4FE23DFDA51D40DD9BF5DDD3CB175F3E1E612D85
49FD121CD97988D7002598288EA2C13DBD98402015C3221E5CE6827A0ECC31B8
BDD49938EB436641D9980349F9A19CBF02B8C539FB20F08257D40F890FC7E35E
847B20C6CB22155A37D36FDC2843EDBD271BEC306E1817D90B0E4E747E13FC84
3742144C46BB479AAAFA13794D73F8A12D5CBDAEB1AAB2BDB66676AE6536459B
0349BBC46EE2946E21341D0E98EE42A054CC29286692C4A36FBB57A9420AB242
AA730FA13A36BB17E7CDE03CEFBE7EF357C99B46EFF502237D53BAC76F84778E
6FB2AF410742B1EB51191810AE2A153F5122163C770D619E36DF9B831BEC6A62
5BF5CDBCF3E8E599E404C7DB577CFED1EA8C003A6216AEB0EFEB533760D2A137
C28BFB63F7B04AFB825C2F187D7BCAF81E90FF30AC989913132D715812EE31A6
F726B9E957132BB8C58B0E0A6F0C44695F46FCF58B35601139D4A605F0D52134
A3E32DC69E2F2BC5BC50693B85808FAB8A8E5725D1C4CA5023439EC8A9DF71D1
4BF7881D65F8CB127FF9B3AEA0D99371591C06AF8A4C22F97C6ADADC2857ECBD
BFB7E0345B75E3BB56DC4C0D5DA91FB9AB2187AC066F249CB46917B46DF62078
3AC90B300D39EDB89CCA63F3B87C07B71AA4EDCF0973B1E7A258428B6E219A64
A6115BB77C33B44DFCFC60E46ED4CEAD56C1B5E10D405E3AE7DB1947C69F674B
62D1630FCB7B3028560C0D78E4A778EF2C0187967A0E2DC4BF2D389770ACB16B
B95461241002CC42F60DAA610BB3944222C01F0BAF8EB2230B0A4F757395701D
4EF87F234D5B862350013CBE7E405B592FDD6798E57A2BFC9CD0229C4B31325A
71D30AF9BAD5BABD390C2B886A8122D7098504466A045B47FC498A67CD522A58
F9214B7BB4D900DA8B32E9BA21AD60494FE734F97EA63138CA116A3C387F377B
85908A1655D64CD205900AC1F0F5F458F502811E2B033758BA187935BBC37D4C
18F1FA07D0E42C8807E1B1C2F71F059AD4DEB6B62FA1648A3CEF87375447A48D
DF747F173D9DA9978955A9FD77CFE531CC98DAFC59DFC418C5293A8467F7E1A2
C05EA3AB6842B30983A42F1833CD9808ADE0F00D0046700B475E00D41EF36EDF
DE3F79C14B02F024EBEE5C1E79A408C9BD1DD1C7F3A22D017A5A32FCFB655CC8
93A8ABF5E1A2260C9BEA7DEAEC0FFF109B6B54A2EB3ABDF7412E05071FA80CD1
CFE073E310A7F07E9B553F5E331DE5281BC7D015149F61B91AD0C121CB3679AA
DB022B5FE1A6809D305B63BE3A8857C727884B2EC69DC4EED17E3BEE9A05BF95
0649DAA5173698D178C196D32C1133F8E154535D39877CD72D2429FD8391F01E
14F35E89D4C0B4D1DD8A2FA6962E9B69B43B9BCFB60B86A2D7C5E8674FF714C8
ED7E15AE21A28EA220B3E7E2801DDC5CD7072A8520E903B40026C82945ADB51D
4564357A6EC8D98FD1D73F06C8912AA36D7D7B7785D3A066E4AF32B67FDBCD0F
B5C2F64696C408309B77FDA513DFAD17E2239B58976F94434C1FB78334D81374
C359FC48147084E37DFA97082369335AAA53A4D891DD3CA40653D79706F80645
0B5A5009B2665279C0670FB3550E5683AC0191AEA3919D1AF60386478A61C103
1E253AB322365F28CB8777C1DB8F5B0DCBFB9C8A95985A0571E67A52C2E9A1B0
8B3C2A698E4F95DAE539B5E403A0771421FBBBE3368198BD448FDFA6E376B9FE
4D21FE10DE7B57D14723C935B15AF8154C88A985B0E063B661466F36D61E697A
3DA9A27818400BC3BBC6AD9AED5355CB8872596F19788BDFC052E7714AC24D5C
C7ACBF14C30DC952E8889E35EF671C8BED37B62B421AE7EE7724E7A6B9952397
861E17C7C5C065A6493B46CB95D4DA59522974E2472B74E8F6E1B541E50DD4E5
EB772AAEB666A158A5D83B7E0FBE24C3092C15639F3162B9C583897864E59CE6
F46F213B0EA52186AE5A39280C4BAECACCA837A18C2ED96F747DAC3A4A3FC121
E4FDD8C97FCA4BF8CDF622E99C6ED1287A0425E6C2E3919B246A04DA70531082
22E39438B9CC3155C4A496ECD5038DA7F5B416CDDDD5A205B44107A2D7D2D844
A886FEE5BCE164483B7CD51D515D8CF075776783A01F6149288BE60AD8CF8541
A38D7CCC28E71737CD49622EFE30E3503B6A24C48B85430AD13990FFCDB3877A
688672DE2440AB76209E2D5D3038D356A2602ADB502D87197FCF75FE0BC3E8C4
9ED662E07467E0BB2047AE7ACE21A6CD46675E36642265915B54C1EFCD6C63B7
45562AB717EACD5F4334AF80C34633E2B3CBF9B2FB8CC286EF17AAA8EE15A6B0
E63D4409C34472503511D86A08E1607F487769C5390A0D5FD35B09EDC1ECBFAD
8C8AE1930C39F74A0A6E69BDFEF9AFCBC139A51A389A93DB856C37109D4790FC
F2D46B3D1E4ECD74BE866F123E115BC777FA4F2D2993F0D0D41D2EDBF2F3EC0D
E56583B046E9AE8559F6531C06C7906C9DEC6EA71564D070D72BEDDBBCDF36CA
A00F9F7F1B1436A702CB590BBDDE3789C01AB938EB7698A5FDB4685C29D7ABC5
99CBE21843BBCC7A56BFCCD3AE83CABB0532B101D220EE25CCED3F32D9E04445
D939A53DE0B11C3AAE351BB16914EA2BC90DBFAC3A0E418C6A0C59082997AA0B
DF04B78ED9638BE56D649CDA75187203F3C763C4C8F7C1066017E58BF7DC5162
F262B39552402D28F2E84D2EE6479DD4895A415FC06B0EC169287349C52D3977
9DAAF3A93D15A43BEB612E6FC3DCF522EE4380B6F4759A563EF8C1543E040371
A976F0AF6125EFDAFB8A96AA4A85D3086B43C04EC49032FD5C9429A68E37D2FE
30F5ADFA0A96B7F5D9D0F560FED14D054902258AB6DA10ADA9BA3EE9E158E45B
C4AFDDB99E505C68FC66DFE803C3ED0FC87572876BD9F20F541FC740549496AA
708A21EE4AC806958EFC69D561830D33B63DFA6C31BFB52E349AE42B423322A0
AE1278667805AE44713B3C9113B521AD979C5D0D25FCFBA816782988037AF29E
53FA241D6D24DE489F935D3177E883651D43C9DE466B0035F9F968954337A1C5
3E4008E80FF370C32F19DFD48A755D3DAEE9963371A38C925E0587A1CCE37006
3C91F1F66DE67304C8151ECB8BAA2419D4B6FAD849D8F78B79E76128411F6F62
DAD1130B6F373145003C5B5AE0D31A4CA10A20732867BE318E0F29DA36F1D8A6
AEF67968712B9C8B426EFD16F767AEC9797B885065C00BD87453965074B4D370
76E2732D6E79CF5636BD7DF810947D1D33A9631A35230401234B36B6C61B27E6
08674E546D2074A3AD2FDED543CBEB81BAD46B37B7EE1D90B03C9F7F76B44EE9
25C8AC12751900AE647253411489AD6E8101B9103C81D8008F8B355524A7BC1C
9DEB78B38036102058330FF514EED807CDA552A0C578A93D0B4D4CAFCA309B20
99D43FFEBE34A2FD59A829CADD877A000FC77F8F249D73B1C77BB795000E8EF1
A6FB96A1B96432080B89569800C1EE54E411FCAE6E966A6798BF0B806F5B27E5
DE31CB19B88D1D86F0D2902616B41CE1FAB4D167E30E42679FB8D9A0B62FC71C
57EDEA821FC97B34EB13EF282CB14C542BD3CDB02C41C368EC0F8BECA27989A1
361597E907CA371F07C9FC41A60FC29BA8F85961B560D8436134AE325E28DD72
94867052D0E38D1B00CF95E1871600C2A6D0AE50D7C66575EECFFE2E6925962E
DF958E719426BDA1A81A0D8E75880EF3D7798AFB3431A9C936BD3BF1024E4521
C755D34B49654CA7AC01EC0550084F470D39DA788E47008109D48C9B54C23D6F
7DE57D9852BAF85E219C5847C0D82F0E866312D963E012DF0DD89995520E8DAA
7E34174144F78A8F72E0DCB8CC64ADDCC52126D38E7284386F6082C2362E4CCF
3E66ECC33C7446208D12AA878E6791D2D603A9F27E558E396EB858681DC8F5CB
6F312E7BA4F23F9497EDE5276D2E75E43898FCEC2792D32650D8D8F257466803
DF00CC6DC19BC6DC44B1B5AE5B7DC9874990090723AB0956FE44F56E66290162
B0C2801387FE944349CCB605BA127E59FC3624201A3C9DF68B1C0F08124C489C
4AFD46D0A57619C92D603C41AA73582D3E74BBFBF648513053099102F28FFA74
F2544EE405FED6DCA669D921F23DE2E18DA56428BA11D53BEB168DAA3A482661
317077A47AF1E83687FA118953FEB4FA7166BB4826332C315DA430B9F53F9286
8D2B476E55AC1EEA4DB4FE29F3AAF00EC588999945337EB95903CA59930C2586
330D685771FD9C288352D24ADBF1E9B866938951E152E7ED9A7C4447E7EEB9A0
5C1DB4324935F474EDCB620ADD71ABF4845AF99150326C210AE207CCB5FB4007
BEF0BD6FF54C4AA8584C5EBD77F47265BA5377857349A3D6F79FF93CEB7FC121
82764A42EBD6CC9F4BA971E384FF8006ABD6A112156301E2AF8F2412E78CA82C
79FE548AB5AB1461702C16DB6B9FC7A6BC09A67527F95CA7CAD73E31BD3229C5
F8931981B7F9C278F0853C022FC0DA760514F3096D12ECF20972B58E10A8538F
7BDF22A5285821F806E068BA068BBE958C834EAACA821ACDCDF167FAAC92EFC1
494640BCF0294FF2103926BD4D84C6FDDF83040BF71A9A9B369976055E2BD802
45F249E81A48500925049188B9D91BF76B2C66F566BF46C25E80A5467763160F
3F2AF7CD40352982F402E135F41F3D4B0431AB2303FC215B5B353C8B1D386CED
0321AA1103F30795911BAFB93238EE22916DFC649DC0F26FD57C5CFC952C220A
32C43859688492E8F9BD3499C6C50190C32527D8A6D3B865C5D7A33777A93EEC
981495EA18710BC6F9919AE41C4FBE12BD8E0DBEC51688517B21C684EF659CEA
E5A4131B8E1A910FF9D45FC79CB88C226DED2FB1FC69253A5BC03742EB700043
207D038EC9C8F94568E2E17613658DCF3506FD4770918757F61C26A450DFC5A2
3E03EBEAA640CF23D89D1C2F0FFAB095C0EEF8FDBC70A40B5551A06499BB3979
4CB9F4EDD09E3B5E1D653967E8FC62C767ED826DFBA53B7D44E35A2C1BD1156A
C74542B942B0A4F70B64F7A89EB8D386545BA5445493171CA3A4439C3B8653C0
5986E9A6CBCE366EE68DE52A0C0D25EFE4A52724E729C277E902195DB58216E9
86BA77EC41DBACE2826B07DD73D336E5B30DA3B8AF7DA914F650BE2BCC6663A9
837FDCBC194C4F86D1ACC6705980A725610B9E654751A9555316F90BA6C4E0FD
012EE02767DA3B0240B9C21B2A83C78640E1CB36C40294150614D7B142BB704C
5F0ED6129795EEBEA9F21BB31490F5ACA385C4276888FB99AF0D7FA4DA1316C3
C5279767142D132F62ED8BCF0C0D800126FC145DF78DF99D9FDD85AEFAAE39BB
B5A4A0FA6BBB20F0DF2534AF569BC8C28B4B643B80992757CAE7DDB2FE3DF3B0
A54FA6F218627A66EC82A8599078BA66046AB43C9857D215690076BD235137B9
77582EC87B0D922B8384813E560211473610D33CF753900272692004D1E8D274
4EFE51763AEB4CD41CB3620BE0719AC41BA7961F55F83F70A58A11E45E04B909
65015E5A85A0CCF2571089EFA42AB1510FFE88837DCE3327B80ACA4A6460FD08
F28E4F0FDB78E429717C5823C9BDBFED4F5F0D7AD69E0F71215E586A6B8AA38A
20142EEF332C24D6EB659B773639AC04D98DBF273E63F40064D0719390767620
E67E5610CDFB2B44B9CFB249338C14F18731B69682EE59A5AD8F1B52BE124FAF
F443C0A979D48F768640F3A6E6177E799855334DAC3760EA1B589B5562F3D486
5427CF689C7E27D41340F9D2987C0907C9D76DF7295AF99B16D32B448A2488F0
47A9DFD97E7A16EF96BF0B6EF0209BA9CBA63C99BCCAED9C7D2C6F8F82234A46
B51F8EB59B5CB7B10F42D0CBEE87AE6D0D4D2A104933C978020A309667508E78
402CD522D1E236935F9B37BA258A5F303D48EBF5B2852D15B4252919014A23E3
2FC626464006D434D2E29FF7AF32CC38F4F4E6966227C54BAF334916FFEE076B
AF49B71B69F6AEBEE7DAD6167C2BC89E388F2E62F7E55661F612E272F8A104C4
8D0AE176CBF00363357D374A7CF0908C1B52647FDA0CB1C63C8F5D1D12A1B06B
72A06520042015D3A8B5EA02CD10C45038FC6C4E8FA08109DB757E44CC09BAD7
FE89D6A84BAAA892BF31443C40E10F310FF69B37AA1F2C7843A71A64C773142F
47AA2F4DD0BF84B3FC059CFB08D27D2924985A7C9DE03ADF4E6D0FB5E9082E90
DBFE87968918000FCCC4BBB3D0F0A77E10121FA159CCF75C69FE6A4B6EE29547
830E4621FDF4132D5A9E10210A029DF5575714B949625D61816C240E4DEF3CCE
AB244CCC59E0E5D1C3F01D1F40FE4A6A761AFA6C492CC4A8FB544ACE80A02545
41A3FE4712B1D0739BEA5B0586EDC6E2EF0BA666A2554ED192FB07873355B8B2
C76FA1FD79C6C1AD17DE14990AF3304AC9E260D417D341536A7CD45A2BDBBA34
00BFB321F455FE0D7E359DFC407F923D9FDD060D641D2967FC4600ED348D40DD
39B828BC426E538A3026182FA01997F71710C6D3AA851751784528830EEF021F
A259BEEDB8E53DF62FC14593FB1041F4E824236EA0E4FA2A6A4DBD7A3F1530F5
C1B8AEF5E6B9332325F058328C5153214F7088915CF9F72252A0657E714550DB
8E763943AC6B7E96B5AD46DB008CFEFC52F4B598E7CDA3D88B9B026AB9A677D0
A13C4AE52D001F3B1B7DE0296D4F6D3AC184BDB890A0DD4D7C62B15DC35DC539
73875938BE310D0033D4C73CD6C95A76CD17A1AF3F793891A9E69E6B18A95A9D
277318EB7238692EB7E51AA5ED2452034006B7B52134C1CDEC4DDB76C3355D2E
5E77F519C6E9AACE641F0BBAB9D609BDF757267077DC69502F0CD71E651A0ECD
FB1F7167964E644D6B705F7CCBF0920651AB446DE4B78B0DAC0A2EB45FE7328E
735DB9740967E6887D1A3A4DD8E48F837C6B8E6B2AEC3E55402533D2B8E7897E
DDAA0F10FB185E8DF96B9FE97EE2B8D3FEDB5FD98D46CD279EEF971A2E330AAB
6481AE29195F7E974243931B273C52D4BF26AC1054D321083525A5C0254E3038
27B7F667CC460BE466357D2B558AFAAB912B0CE9D22DDD1B227808EAB61311B4
F68C94F67BFD060EE61E1CF9245EACF240CD5E1806A89D6122B7F23C4C6B1B40
64591326B7A7A5FE7216BCE081EF42F0846374B50FFAADA1784D12BB5F05E798
9CBBC6A9C7F5E8E1D0942D62D759402A1A8883F7633A2B0EE8FF82EF3426794E
1C9EC5A603CDCD017990772A13F741688D550BA053D6247D7A1DF72E2CCB58A5
15B2D8AC5087739E5D0B78B1DDC263DF8CAED883AAB075D047CD99FEEAA12128
32754C72DEE3DF02D7A5491131857615042413D9F8607B266BFD6DB5194D936D
3623699D17F30A893E24DB6B92CD01E9D071C100B7C76AEE1B1361234C288400
6A1F0A0EFC020EB1C2DDDA18D12F60C8ABDA3A375A891AED07637BF9ED516CC6
B6451FAE9F16D55F238EC69B6EB979F7EDA8E4933C0625142C335DD81AFCA425
111AEC1AD625EC53EBFDD35FE361CD31367A857100788FC1D626711AFA32736C
1C92E7DE155FC6C2A19B0386C4E9F121BA7F0401E723102B6820217C09223692
EA461238FFF855A95BBDAEF679177325A1BCB0CF9846CD383D3857F11CCE7FFF
92A66704671E51CD26A817DE43146AE4E04FA79AA91C814B18ABD2C55E613916
71185F1E1C12B0E617517412BD2C2A4946B397DC19942F8BC6F9D2E943804067
1BC9214E31D426C8BE4B767928148544D164A38BC140D6497386A786E482EC5A
D9223D986CEF5A3DE144D44BB68F1FBD1166D8ED27FA17188400D8C6BB07B717
A6E7AE78D5EF53FB8CC9D91F83A37EDE42A21DF88E843E299837FE18C0E1688B
BCADE8ED7092E63B312A8B3CC3ECC121582D09BA766BB705F763998370FCA5A0
87C18A407737174DCE3C3636D12438A770CEFE738FA5DF704DCD705A2AB46386
ED6942A6888B1B38CAF9AB9CDECACE167B4021E8EDE73D6811CD76FBC92C386D
B81FF17FA4A20F18140F32F26BEA6DD89C925C74529C98D37774642CBB01A1CD
423EB147F95B5ACFEF11225679E430CFFFEE1E8B31F501B401651FBC69B8A860
1B70DD68A0421ED9E9D07EEA401241782D7E93AD542DCA461D47ED678ACA19AB
FFCD5BD33D652749C83C5B78962D4A56D09C9B81C9C24E86B0CBC0EEA582F8B5
AF554CDE0B72FE9776E9A3A8300CD16E2E5A5B8826DBCD1A030629F47D7C4574
F0F0515713AC11204619E77C87BFE6FE50DE547A4CD3C7D183BC20F6938A286C
4E76A6B2EAEDFE2FDB17FF267D0F21C35CACA9E6017118C37AB2FE439C0785F4
006CB6D67EA844E6010F7C453EC4C62D25B1ED56CF0524C9E6B662AAD4F5FA95
D2D6F27E677A9A066AFFBD3AF602A7507C468E42DBC3B0792049FA6863D4AD0B
3061FC817C23C624C216F985D0F3ADE59460C435361B9EE2378B0B2365178CE4
FDAAF86936ED5F15962D7DBEBEBC3D2667ABFED58E96F29885B57D9F392E7CC9
44A387138EDA8E22287D04BDB0585385DD9CA5E7BED417B243867B9F79A92FF7
5C802C2F2235F8E5D9063A56B5DEF842E3FB4F418D86758199A5825944E6A8FB
598FE53D06AF8F3A7768CA71BB04D0323445A964CAB48B5CEAA74739621F659C
92B4EDAF3818E65C79B041AFA99E557F481753AFB0425FCCCE35E8CBFD5B4330
13437B72493773067464CB460F7CF649F4A623C63A895FE66E14641959655F23
5BD056D20196B4E23133028129F4A085AD6DC0B0D7E9ED6308EDEB684FBFF8EE
4FB32FF296937F7079A36A5BEE8A6FC27B34F38F631FDDEDFE231EB02312C6C5
324BD8DF4C21DAD096ED5CFC7764EB38014D8AFD78778E828512307217D2A233
C37004085BA3AEE37926983E2FD762B14D45C8693A68A3B87F5E691C0F93D5C6
B466B82C2F0B84531D5B7072A70AEDFC73D7697FD45E3DB083E5F85D01EAD489
7E07633CD81079013A159A4D5C10B8DDF34F7B40E1D4297E2290AD4AA350BB81
4E34D79307D15DC15ACCE802956A5709F26A2667D9A40AE8912ACE5A6EBF85F3
A851F7D0751C6D9C933E48B247FFD4D9B82BFADCEAF2FBE8C5711476373596FD
EB077C64066170B57EBA79F7CBD2FDFAF6DB2012C61B818067964601340DACBF
BADD2CA8197BEB69D0E3365CDA995A30B8144AC2CC6E87218596664E82300CB1
C94471E8E31695A336B9B9B65ADCF48645D0C7527A39405C20DB5BE06A27510C
5477D70EE72643D2B8936155EFBC820774B6AEBE8931715499E0066E363CB681
B598F26B29A4D0CC1A3091D8B9A27050E5C2B717DF445BD1A455E1FDF428FEB8
A9E50EB56E29C78CFF0CBCBC5BBB295C20D9BEABF610B26DAE7A79628E8B7224
E82C832DF36103ED305218768CBB0FC80B646A2FC08C849ED0FB8BC7A1AEE0A5
6BE8085D76D15EB463666E0805551C1D9D9652BDD053FFE120C493DFF9FD4972
DAE07EC24172FA185E41F8C63625AACD0916A4648BF5BEBC551E6A6A94FB15E8
618173B619E022C26F109A9BB7072828A03A3699EB07AF553CC3361F96BDE418
028D0623F4C94799C616C4CBD8604A496D43B55A3F3ACADBA99045637E24C7DD
2CC62787FCC34BB49A80CA4750694CA5F3FFF2647F18E3C3615CA7AF845DEB22
6DF86483BA9F5B594DF8CDBDA0E00E908F282425191A69B88CB3D40B8DF7C541
6109CCEFEC324FD2DF976CFC21F029256CB6FAB89311C8D330F0AD6E39865395
536828DA89CD95686F33F0EF84E03C60BE701384D766CA8CACDEFCAF9E7D3FFD
9E69AC60D04886D1063742D723EB1C06B948EA4A37115F01BDFFB5EB6CF21444
0E4DCFF294E01915AC369529BA905766ADB2EF24EA02CF97B1D8E1021F51CA29
4BDC7B454129E6DD0803880E1EFFEFC885746324E0D5188AC6718F554CA3351A
C9D5C2D42B5DC972A1D6E40B220387B025179C6C7BCBBB8D9714249A9A7C328D
78D3DE205DACF00BCE930F6409136C1793AAD1ECAA2A3CDA4D80384C86FD1D4E
42D1749CE08AEC4630D3E62ABAF9BACBF92A2A6E252001B79F03F3093F321CBA
9EE3E2FC4D00FB76F15C9DC68C138FB4F7E2FDDA8B62C9D15D146B1F79468D13
5044625266E58B9BABD89FA98E8461FC7F9A68707004D825BBBF84FD99940224
CEDFFD53A6555556089ADAB4DAF9B826BC53D97B44F52B014CC1C4571AEBDF9A
96304B33046CABA812615B4088F6EC43320D24867624620D636BD5D74B42B038
8D34CE00300E4C81D9D739DF88C655165C148CA55C7A1936CE3F02EA2E6627C2
92001D28A40628F89D0C92DE6149B2BF0F7362CFA24BB2F3D4EF7D39E1902C53
053C27FACA90E170EFFC12D2D1F2356F8A3D634E5AA9137DB99F4B25F58B6C39
37F7A3D8165EDF4C74CBB662283EA60DBEE9108C28BD3BDCACE2D523AC51DB2B
E615EEEF47365C21CC28D856E1923E8FDEEC710B6CCFF25048A503F72204FEA3
23B18B181C72BACFF218DD3D444E26503830C04AF3FF2FB05052270E1F34255D
8946E44F270E02730841A22652AA30B419B1A7471032F2A9CD0B0632416E2316
A739A2703A399BACCB0A38FF9D65329058203176FD4C2D16191D8876927CD90F
BD2951925DD3895AF5C5494FBA8B3BA18E2291B934F2683C2E0190194BA11535
4C9E7BB83AF76762C2B4FCAAAA631C5156BF78580BD31808CD5B82E47366095E
C153870C2B19A306BB15DA5CB7FEF1419B1470DDA02206B7B7411AF464F0F87D
0455F58E197E3D314A99EF00593548C7CC878821BACBF512AF0F0E49AEA0BCF3
BD235FD1F5601DABFEB43C8D103DE775B9F4EBF84090FC6B62D1DDB376CF6980
BFDC8797903EC3ED4922F03F7AB2EDE8471D9A09A8FB6172F8316B078597B2DE
46F5A22F03A2D2352DE559933C8B4E514DB0410B1E140095EF20827D600CFD6A
F6115FFBCADCEF0815E4F076F03E76CBC549686F7A74D985BEC536E96633BEA4
CBC1B060F56988D885D64EFEFA51409FC4D512C520EF5235E1EAD9E108A9AA8B
6E77856A3C6A7B37B39E92BBA5C42182D6771D6CFDB33C3A1D7324B1ECD5B830
138BFA555ED56246A8D7A907282EB5A9AF61FA5BDFDE1971AC051CCE88716C24
38971C0E61781AD2BB03DE42E309377B26CC9BED39A82305B707B99B0F334300
6CFBE10D39328466F24BB72B531131D20EF5FC3811312270C16F6744D32D5D5B
AFA09387B2B4438DA6AC63981577CC7DCD73F9A2F5A5D4E544B79C73C35BB7CE
C0F081877B317766DEA2090316916B5639B58B828512307217D2A233C3700408
5BA3AEE3792699E9A73BCA4046B0910BA9E173FDD2D1E94244F9FC3D6208549C
3036270C2941C55F0C10D6FE8BE5CF162AE0257C0292C8A10A97B2AD6B1A2FDC
7C677976316C9E522C36CE481B9D6675C1EE9DD123E6C0E5C208C8AF1C1744CD
43910999695ED6736784B93E2CF26F6DF07199C03BA5466FA3EFBD7F77E1468B
E82C2813504CA1EC0B3F467B33A9A1DEFB734621E4B9A621CFB33D7C6D034EB8
530AA184CA8A5E111CCC50643BD817FAFCFA53893D1A325A4C1E1DBAEEB2506E
62DD8D1C03E88FACD342B9BDD752E5EA36023891A0D048DAE363237782E3B2AE
143E60069683917D8D87F03508B3B7464966DA6D4D3C67A1F5D60F9D4C78148E
DC11E941EDBE8B6209CD78FACCD78AB901627FBE024354E8434EE855754BC800
985A57640B2B6105B2D2C996F6D00C02A1F200A5F7EBD0A7DEDA931A3F3AB2A5
2ADDF6EC7A997B114110F3599D8E6CB9E93D141668D361EB44391A7596D5F83D
54A389FC2172DA93C47D22E22208EDB01D44DD89458DF1F326D4F23606C6B8FC
607D92DA9CC572064E792951D874ED7DD95F14807993055EAE0941366F253FA0
2054EC1970ABB57820FE36E7B75E384FC1EC7D7BDCB8CC3BBC829FA6CE850576
6A92A30DCF28A4BB318AE88C3C4C1207108F3D4D7AC6BB7F5EBB84447B363874
BC8CBF9DF7C77342796363A7B6B294CE26DBB9179DC77621160CD28AD509908A
CD994D392C02DAAA8BE1DA64E5906D187C73DE7EC27BFED9D402EADECAA0399A
D026E717BDD52F97832A24A541E64896CC6DEA0F7E3AF4C39EE4E68AA31889A3
746F75FEE7BFE1DCD5BA2764536718B57418C07E23BB293E05529FDB1612F916
D7D98F158635436B1C389EF06321A7D268B9D1C6675850CA819557BFA1344288
FF32265CEF62C5216E38DDC36FED3B90D83448B72A8133F2AABC97BD47DA7C6E
C0F3B3FFB1F9D7B1F148BF0F9018A84A313834E9E3AF070928DD7764607FB276
803B20FFF88302691B60C41264E1772760420364A2F57EEF5FB32D6A4F639D0B
81EE0DA8A71B9E1F6A47F14E57CF25383AB2C486B2D79357D5F254F31E5EB1BE
264222971871F534AA90C67E1ABA7B6BFB4A85BB11D9ED713F261101BA4EAE81
E70AE164D86BD746AB60D080D6169F4E074CE9936241784D731AA7D048D0F6B5
33408F3D7332E7ECB95D1D16340FF23A4B8806EE909DE8C5040FE630E1FAFDB9
9DFF29348A9AA9F29E4AAD95C4C7275FBABB5183F1E57ABDD95BF8BFC3C95747
C69296B7999229531B651E4C98B0BD07C1AF8D52D44BEECD08BED2831AD3E1DB
8A69414C6E3C4882EA2777BD5BE0524DDB01771DD0AE22AD50955595FCECC900
E7EEAC4CAD991C4DA475602C98D1064DBF03040BE44D34D4D598A19CBA9A2B67
5B0AC7709CDE702C0B62FEF721FAC775D5CFF77C8C3231C36D227B4A55DECE25
58496E6EAF83A538E513B26906E9E6BC229D511F324E32956172DBAFF2F6BF05
5A524058940BCF1CA8D16D9A2D6E64C67F8E4CD95FDC0C8D5BF2E7D04AF5F2FC
A69C377DDE8E0C674B346BABC17BAFDC897254CB4960DC6D666CD1F2305F88EC
70E89A7B24032854B34F5FFF1B2283621D790147E8344FAA94F2C41CF57C40DD
96722D089DEC3F220ECA6645BE24D02AFF56B18D6E2E1503E9DBC77A09C16D6E
DB04B6C319DEDE2EC73DE49F4013A0DC7E2E9370828A46CFC0018ABB573A78C2
71861565CA746D4F166453CC2B18FD0CAC2AA46E6CD682FD69E18FC6B682CA62
78EC7BE1AB06E89BC42607DF530239A54A704F192F539717F4290FC2675B83E9
CEF6EA95FD665B591E12E4DDA66BC7E76C5031C3C0FD6080CF97D0318FBE6A0D
B8D7881E2292EDCBD09E0FA9529732824413A72119D2484F2FCA5330607ED488
9DFC82FAFCE87DAFD858523953F9E77018B2B8DE41915E54DF679F12079DF942
D87F704D691F34FA5D00D6B30371349E91009BFA77876957BB8BD4302D3FC4CF
7E8DA48AE10F1937746EB265A11A8CBA5FFD36F05414BA084D71FFE2E1D9C270
FFE1FD172F6D2804CA36D4619D8885FCEB3FE5A7C9320D907438DB23A82D8CB9
777BECA40E4BD348A796A43EA25E34BA76F1681A3282F7FC211E12F0105E1AB0
CD9B4F53D76767CEBB5907ED1D4869931C5A356D4DCEA275AEEF2B2CF35CBCD5
1683933A44C44A400633F004DDB1EA743DEAB207B6F7A19CC10BBFBDCF134E1D
ECEB4D0196E33BAD2BFD50FD062C813A14EA78B5EA44285F484F600E2D63BCE0
10820B841FE0122C387D01E4F56E5EC14B3404353BCAE0A7D4443C70399EFAB6
057548210C130B0972AC8458B9DF80653D2A2F0D5F869F8AA462B3883A673A97
6328E1F0D54CF554278F7E73746B4845C1AD7BF23F95E5832647D7751F766386
FCCBCA1DFFBF833F39DD96BAC786787D2CE2DBA766EBCF15CA68D755C30E02C0
12629BB5113F915CD5D6EB48B5EF659F1892A8C81AFCA148704CC13134472989
19CFB897E834D81079750511F5260974E84B5B09B20EC14E60CBE9C5AEB39504
1F35A5340BE770E44C61A306103FB8A08DCCD7061AD53A8EF8E4D0339BA198B6
D10ACE836530F60D57253B67C93DBDECE93275A3D91483767D7AB50B2BB29413
2270228229EEA3F8D8300DB6558367724E6A7662499EA3FCC278B616531C0CB5
B92F5A5610C7969FFAE73E095BF64D523EA5C09FE173C544C6D88A4CBEFE5BD3
1C5B14B003F38EA1D7463ED69AC8109AD06FAE9113F3D8561BA38C75DAB52F0F
1124DA4A816AF17DE250CA1AC04FFD6E62D922CDC694C0A0BECD9C445FC32005
C6BE4758530F02C10DAA800CFA681B5DBF0472F160B9DB1B4A2301F1EA27DD78
17A5C161B425A854364EDBB6803FD753A9E4CD469FD15D729C4A67775EC44DE0
2EF8B62341684FDACCBA63D48EB4EDBB9646A156B1131100E35CFB1CC7432A59
67F4F68D48F98921C6AD5BEB9EDE6D2C728887B8352333A63EBD274B38A740AD
7E016D82F7D2A8EE7569501C47BCD5CA0386B6455396B67FB8A6F6C199257121
64D2DF9CE3622494B45C0756E6209BC7F69960CA6E4F7ADDFD7653EE920A7C2F
82E5F3ACCF40655524199D0B7A554794FDD034B6931E132682BCB7376E74FD34
6974FE59355A6AEFD1AB79108490E5B3E0C76BE15242D8544A636A804D2FD651
367C509FBB958B1E2D9E095C3B3ED544E2395C0D7D9CB1C2DA902F4BCA6FD0A6
1D48687AFFF5E45115E227763E96F2C385B9F96F63145D3B419C66B8ED486710
65A34C9A980FC8530299B7C3828A1F5F209F316F35248B7EFF4D686F317B23EE
0EE6991AE34D9C23D3BB1764B0901804B4093CA15BFA6FD0584880995649BE9F
BDEB6D074D24D8DF855C1A7B8D768EBDF805029DA809D0B79FB32C714816D0B1
6AFE1B34AB4B31DCF83245E6622D6DBB7E8A758AB4657D6E52974662CDDEE6DB
3CA56A99D3AAFA1436CFEBB10B6DB45AACCE3D28F6FBF55D8A0F6FD94878521C
4AF4FDA7CD7171B2AA848C493EB91E22B7B5C51957C9CBD23BFD47C38057D074
D937D566E2CC5D25488BF1C667DF1D266655E2FFCEEBA2145910362BEC10E85F
C589424B1AEEEF7C9659CC71425220D0A8B7216F71B74660C96DD78E0113271A
2BEEF135D622BB18A30364ECFC35BF8DDB078E2722439050023715FC4FB51D5A
950652B3DCEF43511B168FD93C4C7C49E0E5F33C31129D4231EC61046C58792F
3828E6BB7FC28AF7D25E82D10D913CC54CE6BA75410BE0E8A281BC0BBCC53710
2151BCF22CEF82A859E6A18F3D4F005A0AE16C1C9699FDC0547C9C554EF88671
6F29998152AE144EFA2EBEE87FCD13E84E5A54DE97AB567C075C5A88D8AB7374
E485E9E1B14478C4C614C10DFF1D9414EE523EFB79D248E2976E11E7ACD22180
FE53D25D85A44268C58B47FB321108EE9B985506FFA360A33A473E6D636CFDAD
0A09D1381375BE9AA3837197EC6FF5B80F9E8E34E49AA6C62D9E169195FDFAEC
B10425BF48A2797FA816397AEAC8B7A5B47B7F642550CC0C47E0056B069DC386
682938DB4B54F85C065A3B5F4451BCC0EE32CE3D2873B0C2996655E8768CB9F5
06894943753BD09CD4630618BC41935ADA18DFF477E0FF3A6BF5FF5AB60CB740
230FAB0B58EAD1D8C2CB0D6EB333885FDA6FF81415C00D0147CD78DB10002011
AA1709DA4CDD1CD61FDBB13DE296C7822B2DA0083170D9FB76105F21D19E90CF
DD1181F2324A429689B719D6859BEE6E2402977C9928BA1BAC664000A4635AD1
0BBC9331B5BFA4DDEA786ADD012911E86FC50C80C3205CF0C9D119DE2E3B0D49
F4BFFAC4D314379D714895C57C3B191DB6DFAD4EC9C0C79CF926800824324387
B5B343544D5E79C46D9DB34D7272109ADA8FC8E8AE1E6448CDE2D8A3DF8B21ED
36C34221A80A616612E01E1E7B922EC353EAD669F92AB73D6F7CB57074D50F13
8F4EDB8DD0AC194D5A2C268356C6BB79601D3EE9B89E87C043226D81833B0650
B0D126A79D090F9384646B2D4459B6FED85E629B57CA0B165211D12711BC7639
2D47BF687A432418A5263411D6E8FE75D6DFEFBFA277C348F5730D91AA63731D
5AA8330C475960D7AB9F8B9927A85C39F4B9958806927A1132F7A12C6B2F1431
5140C4101720B4DBE4A32D28652DA12143B2020D9B6BF1F21C56A6495569385A
1891828137879185B0CB9755B8632E6B590579EB8C9CBE9F6DF8D46A813F173B
2FAC2C2F057C754C10A077D2827FD21CF558F6A19E0EC140150D5B91C0A83CAD
20A05CFCB029B9D430DB57ED54F70CBDD8AF0A436B5287C2186EEAFE68F03080
8D21C6E29EC7E9031758DE70222B6B821A1A8623BA9C2A52B2C1A3B4228D6526
D5A33BB414472BC50CB0A61D5938C0987571639105DEF9D525DE96A8A5AAF64E
609B4524E1A9DDE7C9DF7128F5B56C7C29C0849F8E63E4BC5E61484084013ADD
9D3224542FB9BA4E8B96FDB3DFB75BF77C68C88F369846B40FFBE0F6D48F7F5B
B4233A12D75112B05CAED6184F54525187250A86D5611159DE0406A87347029B
40B35A022C633877E2EA8CFD7E14A87420EF26FC524C7D35771D3B6961CF63D3
24324C3E4EB76228298EDEE5227F43602E3163DE842F552992ABCCA96BFF7451
F3672B5F0F706E28CE85FC3B2CA21D2D71CE17FFD00E7B5AB53471A585413CE7
8ADECD46B66A324F61A9E587B37E2673B9A8CEF30634C7107FF92469028DBF56
102B0925E23A893FEE5B84E2FF1D342DB0B953D89C7E8960352E7F6497C9C421
A4AED81BF9A8E875AB199A1A7FBE08711FF7F95C03035323A575E10783F73B6D
4B550EB9F1E46FBAD44EC01BDBB408CEF9D68298238A1B23B3EF2FB80E96AB4D
A11931AB9AE8C7EE739205653F51ECDEEB9CBD315B8E1DEF18FEA3685A9CB177
C26BF96D9EACE168263E11FBBED8D68EE3081B8CC784BB87721E9C49E305763F
08DA964A91B8B5B075B5F53FFA45D00BBCFB3DF18B2912A5CAA10E33FC1E611B
C3B3DEB36C5002CD5EEBBA915FF059D84EED68FEB01DE23D032EBBEC84C9D839
CF2ED381D67021EA98ADD91BB6AE6C08305C5D10BA68708379C95244289B7067
7570186538B93C1A8567D07F76D7A22EFD3271ECD816C217B6A3D19E684F6F45
ACBAFD9E6F1F7572BCF56EF672B3ABDBD904B66EECC0CD4391BC77343DD7A29D
962D1CF6496097B11499B817A3031BEAF016845FC010366B9E4A0B24EEC46C2E
F2B45E214D22FD19E4C7377BC0C6309835F84E5FCB4DA0E863E4343A7ED21EC6
52170F7D9E65677150344B3BC6A17C42787F97BF7EBE4FF971FB0E1310F27EB4
D9FC12AFEF4388A733DAEBBEC14C5256B9940FA43A0367DE198941CC4AF40C4F
94322D3C14AA7206359F867F166CA7F7890E5F3E8CCA133A7A518BDB29EAC759
6FB388FFE9417892B9912D10800A9A9C14722505F92252DD141E4BFA04BD682C
72AD47A46BD5355205338363FF20B5A0762AACDE5B0EB7B284B8ED08F883CF3F
D898232EB75016E8A5CE376E80F784EAA203C0F97FC85EEC535D7C47BA684B1E
2BB34F8EA233A9E3374A47AC2912BDAE71E99BF4555D281983FA9C6BE8375136
3DAC7A2490AC56FECA507CBC7AF4E3A84E95DCCE309846E001DF3FBE83F10199
68AC44CA08573E8F1763CC6251A5689967512AC885F471C0CF7B0EB3538AF304
903499EA47A7B09DA82CC6D9D6106EB2EE6E0F400E5718B9C4CBC59F53768B03
70C4D2E6A8A90D5B362EA187A17F0A161EE6586E1C5B6D7845CF627FAA3D198E
0A4B7A44D255B9E2DA3792CE0235D679A84B69C81D42DA0B3E0303D0733C4A5B
BF8ACB4CB152A886B0AC427F3BC3A24FE1CCAC267F560006C9D6A8CC8C06EF56
4A46E26D8300294388F52B57A8021CFDE0AE74936FB0B17F06FF6EDBCDB562A6
A8FB3740D068EEC9D655F8846B9120BF0BABB2B9C2D6AB804B3ABF7F712E52A3
3D81C98C1F62149279CDAB5D7204395F2C7D6E872CCFF0498A4A1F4826AD99AA
9311C34A19E763D54579F7C7E5601C68C8DFB755D38B93AF2B1FAB6E74C6E59F
531F73C22E51BB7CA9FABBC63CA0DABF8DF9CE9665D337494BD2494CE24C6D2A
08EC62E713D16B175A4B92661C66D8862A9B59E828D6D79D33064B891216AAC3
447A2907704B0427B0A070F52A61D022A6C405C4E707E669A841A3AC1678915C
9539855E74181536FE95BDAF13B6190160CD4FAA13268CA45E353D5F84DFE948
E02983B03B6B160989A453C5E2073D9276CF7A8BF4ED52049DBD698DAA3A7882
C0B248E34E2E11E13B60490211976209F318B8EE5880AB825EE1D98019131DFC
CE9E20BB8626AC270D34DAD3D9BF09BC2E5F108029F01A6FDABF3343219653C2
ADB573FA55907C395884556B6BE0301B329497DC04B3D90B74DECBF2C593C839
464AA2B8DB6086CD3C39243C621DC21067426DAC11CBD18D8F1013E54B3B9A85
CE63565D65768C9CB901EFE53116C42A1AEFB4811F4AE293A6E0808E9144C5C8
3865EB033543C58E132B4307F1673A0592AFCA8F79A715FC84E923D372C6A6A0
ADFF984F8908F59129BD2CFAA01576E25FB77A60D04DDEF46093F4D83F027593
46C80E3F68BD2850D8670A6BB9E8FB8BC5A0074FFE36FF8C8003F82A76F8A3E2
9AD60A7BB776172D20401C4F5594E043E3838BE5A1A45AEBA057C10AB8DD9226
201D8BA8CFCB2B23AAE9C13B14B5E55BC5F1194F61CB4CA17E1332C2981DA72E
57D14950A7E4C58AC71D5593F8C9D173D6B7D2F5EC1A124CDA5D57430758A49E
809AF9BB1B23AB1B7FB3AB272FFDD1AF70F6653D31CCA84599446A75BF8E4962
984A60F120604FA45C499248A17C8E644C65642D9ADC690276D25DC81C0719BF
F095B9BAA1E791CC3B811636C75EAF0CD40AAA0D681B80A7FA7440B2108CE10C
CBFA1B499C627007A067047067CC0C75DC9897A985352422D89AD78B48E5DD32
9804694D38AB61CFF6AD9E25ECB543836FB26256DCAC53F07A5468F823858BA1
860D5974DB2E789E2DE207FC34DDECF2BC8DA275B28340F325C9C9DCBFE53223
D03370576D685F773A4F417475E24EA3F1085EC886F79A778CB0B554648DE512
FB810D5FDDCF1A3440EDBCA9FC84852A3BC25F9B7272B3CB1C51334F01CE2693
13A133025BBDF4C2E5808BBDEC420BB7B8789FA83E1FDAFA7F4ED61AEAAFC824
ECD0A6D9826C90AAFB8C8FC4919B7CD1211B338EB41EE8C4660AE35CD1108DD8
BE941ACCB7CCFC67F43365690FE4147235791ED2E79CFF0047A1695EC858076A
DA42CDFCA6FEC6FC5E1DCB2C662679D6B692178FDF71A12CBE0873D4C186F0FA
B4F19B5ED7F14F9E6E0FC49DFDAAE5EA5B28AD0CF0A7C3682660EC181ECA4F06
1C1D91FD6DEEDBDB8585878518DFFB3EEA99144BE3FC08B23346E56BE5FF4DA6
283306609EB51F62CEC4D1431AA936FF0133504B81E12E86E562F3F3D65D9E9D
A9BCE3A2EF5714F5E53D3F5E5E79E45160F9318F5D57BFC7B84D7D3154DC9029
BC6F57094014F0901ACD8486D4E8765A53C05A4BDCA05380778A185749D0E599
C802D8974E68634D9A32EEAF19EE9DB73175BFE42BD1129BBB48A0F6A0B3BE75
E98F6E71BEF680D2F2F571E10E10AD79606E369AF606B460C7D4667806835ADB
F425712961B720BCDB2AD4FAB40DEFFEF4A0109A4D15A410AC5AC35FCBA9392F
65DB3EAACD9127037040CB38A6C3DBD048026AD5E27CB4BFD67BFFC298138C1B
66B6FA898C76DFF12F5745365D6F6A0FBA184880E6565B26EA2BFB505C5B0422
CE1C9C0F6404CC06FECC1C95D949DC357562B5C2688D77D0661D718E517F7F13
221BD49FB7C96FC5DE808165B3784A45317D8E12EB3C5C9E07D9B74715B6FF2B
86770C7F3F08309E3549A8A71A39A8F76580292F260EBE9C7770F2DE7DF6F263
0185BD801F458BFE090FE542B2C8D5258286F5295D79A9B99C4E426A4D0C00F6
A206A436DB2C09594EF8271016A05DA560279B234A6ADA0B58C95EB3F7FA15E1
ABD9B0750A15565F9CD24E1A0AB730F028E0F50905DE37513D64C05768FCE625
1F500F540933A875A212B34DCBDC0E3AB3CA43777EC510CA28AB901476D93911
C440018A9A93E5E65FE38255E9340156923A6739DBE9C6E0F4BA355EBAFA6452
C05CF6D5DB6E4AD95F89BF2337E4899FA483D548B09B475D3AF367496E341D68
F6669B9AEE07717CDD8AFD6470711BB7C3E012827080FFE810F076D007B71168
E0680517FF8EFB2319BED14AB1E9E947ADCE03B0890A587A5E7FFEAB1E9510B5
988AE71B8CB26954FAC3851B3A90B245CBD5504F877751BA5FB94BB147B7D7A6
176DA4028CAAD9E680DB820D2A96C703B3C637A31D42565DEE4BA93927213CCD
5458D73FD8DB79139D479F3B77E74279568D6B6161C57A7026EBE9E2D2901766
58BDCC1D99CC74A97C9E5FB699F80ECE1643BE015E366D5A928D70AC40119AF7
2FF4F896E5AA4E662A851A5D2285D32B026543BE1C668C021A4F559BE8EA5883
050D0FB58AC6F5591FBF38191A341912F32D1B7E48EFB003D48C10F749CEBE8F
BDFBD101E2D8F2233B71C65C82471652D77005F194AC881CD20F078909B24870
9AE919755E2E0ACA0EA0BC6A6B97BE74C8DCF03449C53D774D0321C69F867082
41030DED4C112B8E1D0991703B578EE051AA346BB2B63F12487EACA5E8E174A9
13FC3E3C5AA5438D9922CFDE28B8A3F3ED3F8F4262BC19289DE84C70F67EB0A6
329242865E0DBCFBDCCEE1E111F0D9AC3AD5BD4FCA1C392E3317FD91906802B7
9D7D08E27AEE0440CD9AE58CCCBC4F8630C3089F3B091F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE6C590B0DEA5147749326DE6748E008237D25D5FC737A
8F6729A72998A3947FF2C55673D42D0C2EA7C77884CC3810653843A05DCE23E9
5617C26DCCE0E96BC0FF6BE1358902E8AB04EE89A019EB6E107AC3B7FAA33FD3
7B81F7D60DEDE4263866CD683D9E2833DDF7F0F8E5B487EDC7DB5BB69B760727
9862E41917DA08F87D352652A3C1C51A42EEB3AE4C6CD7E7B194162962680130
D78C1A0C5BB937E81189912695D91C1FF017D6ED3ECE7D8AAC4A74715CFC76B1
76E1104CE528460DD022891B54B03BFBB05D94BC32BBD9B63477E62942260FBA
35589BACDEAAFEC6E0F31862296F17D9EB2575679D3540CDB376F36CBFA9240A
07421DD8A51DD117D67F016B4990CFB9B7335AAFB1B259A7B19DC098BBD29ABC
FED7027D94228D330E2F4E2E31A0B0D6463D9E7F502D60295D216F39AC04AF2D
ADEEF4220AFE8D81C71A771EEAE01E5D278DDD7EE96878F542A8B74F6DC261E9
A71BF25C878213A3AE8CB056ED3D76BF6AB892AA3D4E50311A7ED13676405022
5736E344440269FEBA89595FD48BAB503AF53D8329F85DEEC5FD036670BB5F12
F1C0EA7E29EEC652612CE1B9F4E7B967791419344E83AB29C84DB3393B876ECE
C41011C7BA9F84837A4BF884FF1007D6F8E84495ABBCA10C49794706AB5CAE6F
B30734DC68C6DD2861E96C0309ACBC17537C2E0AC802BDD51F4544619B7B8389
5C71526BE1694CCBC003450DD180CBB5B6790440D6222F3C0517FF13B34FC571
5BC0B02F2A123A730A6114C302B587C4AE9343F6E5E2905863B80A67BA43D685
1AD406AB761483A260DF79AB096FD8ACEAA0A0B0E8F098E12F469F55DE8917B3
7AB2B1737952179092539882B115B27EBF9D6962133D155AC832C0F7FF0B53BC
ADC5965B160878A095E7C3555C81020C38789DC224300DD0A7DDA5961E12EE22
C7609FD716624011EBB82D1B791E43E52C09DB05D744F0963A4DC53354469E6A
CF2DA08F685F0B281BA00FD41F5A36B710CD2FA084B13F8DF1D96EF12439AEE1
31057988EDD688E5858FE4D9F6AF2134798AFF2FB6E22B99A99F411301B54FF3
9018CB80D9B150624D59CF69086D35AB74A208C9727C021A4360282CB5467127
06CA3E743ABFB89094D7D87207C450F90EEA7B81F5B66A6A98DE654A7EFDB2F6
277C857C53AE26B47C9522A015D41C58DC550A379DF12B8C33DE0DA576F9089A
49EF2E5176F19A01C25182C7E030045F3C17C2B4A1B6267F5CD009A097CBED08
591BD60C06ED7F70F05857F7F7D97F1CE2E2F68DC0B709DCA4BC2197366A0A6F
EF3F5BB8A303FE80F17CCC35EC178B7BAD2C0ECF61E1167DB0A41ED2F74ADCE7
423BA3902C75213BC11C59DD3C6B2B9B7AD5482C3A445A0C4CA552D4C917E677
F7619887BC74799EAF66CB8B4EEAC7A2E368C904389E509C87734DBC5AA70CF5
9F3EC82EE87AA59357E7A04EE4A1B47F35DCB2708820615BE711C333E25E26F8
95F82D2AFADE2A715B114A3C217B9F93BA7896CD116C3D9DB54100A85EE1DA34
1333AD6D1EE474DB2FCE7714F04E933CD37B810BCFA3D8DA1EA27BDA00821B02
288F00FDF611422918F205736FF02D27A0E461589247D25B630F9184181458F9
B482526924E54F786C2303C35317BF8AEFA5B38165CD924AF70AD8C13ECBDF75
05FE99A53F7DBF8C1947A3CBC2A301B6A635A0FF952BB5FC4199F5E8D2FF9EAA
8F2E8EA922BE56ED13F4C2CEFC84ABD13F2DD33DC411DB421039444E51CD3513
78C826B4AD70CD881A77C7B4F5B371800F141F71F3B504DD1D323A242AEFC831
E454F8D0EEF341470D0B78BE854297547EB657154F8F7556E226DA575647DD40
806653A616467B017E22777660A4411DDFBC7F021D0A438AA6416AC2C5A764F3
013E401A5FA5AA33D8FACE81B6B121A22A331A4B62821C54978385195542C6FC
2F6865DFED11BA93C3930B238DEB0657E3B67EC951609A10CABFC13D06414373
E493EB004B8833D93A6EDFE33D048B2C17C15018856290E09159F11358C402FB
FC111B015B1010B0C670B689587B48896D69B694EB24113DEADDDB4EFA537A68
0B61C075AF4F4F1A839FB6BB6B7704A0861E501542EA0777BCC28844FA893783
AE0A8C1FE56B8560F33E8F579CA74EB1156BB9C20A893FFE18E57006D909D91F
01E67CB75FBB03C5E3E9FE20D6154CDB0B112E368C45C4687BDCF20010C29C1F
C8CC2AA77AF71A2F3C9A2960516324E457943AC6C48CE799F94F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39829DC8A2ABDFC584BBBC8AB8932CB
FDFB9FB917139ED02FB419CDEAA892CDB606C133DAA908377AA57FA5E2A16FE8
F9DBC207EDEAA72C2F7D4B7B7112BFDD1A5BC950F254FD477654C63037748411
037887C4B65D8E1DBFD8BC7F2661AC6E39CB510EDF4CCABC332ED1A5E5FD49AB
7955B7A0C9770887DA7B5A123239565BB1D04FA90E615D06A805EF2EA704243F
B382621C073D18FEC9D5FFE44F8C791C47B490C8E3D8B586D529D30A9E40FF7B
C1C8059928ABE24544F41569DAEB26F1186A550FAC789DC46BAEA1D028891BCE
072BC4077D5280C8337FA283BB4340DDEBC4D256E13F78F42DDED30EC42990D2
D7674A62EACD13CBBB381247F44161A0539A035AE3749991DEA439FBF139A16A
553429E039046EFE39B6B9B33D252B140142EE927CE5E607C1F2BC03785EE94A
E63B97F0E34213A1B0A55054B02E9C5BCE6B0E9B760FAC62828B9B2C3BAC419B
073E6FCA10420F989127A04BDE01D71D3C32869196A7C486DD1CCB62FEC5AE72
4457E9628C077A0C7218B75BD86AE495A872463510543EFFE5DD50FFC2FCDAB7
133032D62176E87C9CE253A193BFAD2575B7B23BF4B47D1997E6DC26B83665DB
71ADF03DB565CB3278F5B72C3E42823F4F7EDDA13852C3D2523C98C6613FBB7C
5DFB870023C31C1FD013E274504CF62EE88454734AE583D443130A9533C9769D
375E5A0DFE646D603F49A26F9E5F210B120CA7EE5A3EFD38C40BC343C18EE38A
6E5EC1E16F206873FFBAFA03266BF0D28259D561A56EA1DEFC0D6891AFA3D1E6
DE83FBFEE99829CAAAF9FE809C13BE788C42E74A8A162BD9BB26137253BA8B58
1941E759A7CA7AC42EE55AE3ACF0B696E4444DE0BB3491FE84A6315E3725A28A
20C7E32793E2DDA8ED6D90F8041298B7A4C1E2A2D16FF35C3D8F5FD37B1D5760
3AF1ADAD3760CFBDD46FADABA26B5433D34C2AEB076031841EA0296AC711128C
794F77BD223CF144C0FDBF1576BC1C20D6A4CA7FF78D906699CB9C2B43FD2042
ABADEB88D3FB46627EADDC9F2827BAC12E0E45B310AD8C11FEB1DE5440585524
AD00C04BA139245E95B76F3695B0BE5FEDE9A0B810C0D8253B244EE74C47F8B2
0547A2ADFAA6E40432CB09DCCF5C286D5EB04E5A7D952E7167268B30DF26FC38
1D8D871D0D96566F0E4910D1712E7151AFFBF5AB2C8A5AF1CB6DBF0B027ADD1C
2409375ADE1F82292CA07F3948B726E9D3DC6F3AA19E84CDD50D789E56263362
340FBA8CA49B9AD210E2B4D77B4553E8ABE6A6FBD131E1691F749DEBB18A5B5B
90DC695349522715A6B6AF951007027352BC7C9612CFC105C8BDDBDDC8BAD0B8
7F3BA50D36D20926718FD37D86663C2F134BB4B5EEA3039CCD3F02DB45E13804
E3B7B4E4EE45019BA6FF7DF40D9FE58108584C65DAC1D387D9CF2FB4A626EA3E
546717AE6E23981338327681221810546F0009F98531353C9A8EBFE7DB9C9A1F
83F6E3CC814D6844FF1A23AB32B521C1A09010973B310CD03A0ADA22C6863683
473B13FECAED39B923980E1691F99CB068EC99B0F5292E5450773EE1769530D9
051181315AEF884EABB76C5B134E7E0185E7D5929C128293EEFA925E555E77E7
2F0216B34D71875B4FED0EE2874DF99ADFD2E19382CC90DFFB25E67F6FB762DC
D3C3A8C76F4F6F7298116E7FF68A8348389D3052344BC6AD77FA9B4CA05CEA57
E184293362DFBD0B5D90A7909896CBD0A038B6BA98B6078C9FCA1556AEB8E16D
CEE96FF74BE92989C382E8FAC254F543E8D3E7146C9A0600F9A0BE530EDDD8A9
01220A971045A9A8FC9239809D764B6036E658222897A77DC3394593C5B714D1
EF72E72786BDDE985D872823D8DDFFCCCF5ACABF850C801E14FB8153C749EF79
3EE03A1199D0A9EF4C5D26725C6A658DECFF150A9D0FD7AB1F56F507EB972BCF
356EDF826023098738D40D1E2F1976A39CB1DAEB62F9F7729E6E985765D126CB
E7FE55D3E2DFC75C0F145FBECF6A2D130D4840A799889CB9DCCD3FC716139294
FDE93AA5F2D8120ECA4E117C31227384B1C5B443F68FF78E4CACACDB36B7C4BC
FD26A7241379C2955D9BA1921169B16ABD7E4852648FEB205E020B27F5307E54
B6F4A4858CEF9F21FE9A561AF418FD9D6B8576F8DCC579206AA9F21A1C50D38B
556542BD5BC0BB3EBCE2E7C56E180C73756CCDAEAF24840E6C6A01AF6C1A517F
86D2C6190AFE9B31BC89297D17D4564C28040B982EBF82D0914F7C33F549D305
58B5E8ED6D88D23E7530C2BB5B2FADC5B34ADE0644C0F54B03AD9E14CF669C7B
38CB2D16EE53FCC59444A3FDDB80E6632FCB86E990AD1C8A0331513E0B6F2A90
442F6791C4741A0ED35AF47FF40F2DA0B75EA8C8FB72576304008495771DFFCF
89E918F1702F5867DF3636C4F5C221A18AC30E1CC4C35114DEE607734D0910C3
0DE2682CCCDB283F082A7EC77AB52B21BA9B8D4A0B9D7C5926D1B554B27D710B
5690DB1906123D94EAD0FBA00FD369A6D770D5E2564AB454896C4F5A393516CB
0B28F80FBB4E20BE353D30CD025624C7B916A97812E37E5EFAD3FC3E46711774
FEC1F7738A2AD81197D1CBBF29B5725D3B132DF3984E59D8877CCE2558DF1E30
A5A6DDD8C614B2FFAFCD4B6D9F237ADA30D3C0E24D416DEED9635FFFB23654B0
877663453EB7FF454D41369C4D069E6D1762AE662D19514D98A4606942FC3D76
5F00D47B7AF675CA22BCE830482F7347227AA1DBFAD15C24E79ECBF158880C14
F356FEF1BE1FA788335EF0647D47D0E9415E00F0963CADC84DA9CE87D81D4F23
06F0F4CD8882D55D5220A6D9197FBA488EAB0EBFB50FEF925BA6DF2F7ECBCA5D
B4FD78D89E2167E977EB8C0475E6BF7B0A6468833A730FC3D22EC26F9B276146
9B0EDEE8BA22F029985EC5CF4298C38E32B95D790323B4A5713E69521D8E8AA0
1CB34C18DF8A379C22193172318686ED9E447F8E185DFEA44B45241AFBBFB78B
D03562DD6EE838D77DDBFB30BCA82A782AD53550CFF43B4DAC2BD3A84C1A663B
BF1D4F15CFDCADC40A08553B2815A915DC33558C496994773E172D45C0D27D21
F892B9AE92E8480F5B8A2AB1B87BF7A95DA47617A27763AE228559558798FF83
A81BF4085B5542FFEC6044F952A4EF7713EFC7017A63899555D5DA52BCA32E0E
B863C256F65A8F40EE3AC0C9F6154C4975D6DB87269D8C8640A757736309AB56
8DD976F3356398E4FE6449EB80A9B134C0D4478C5ABCA26796BB61D2839669B9
C11CB98612D45C4BFBFED2C841F42B1FDCE3A56B4EE8FCB5924E01F73A956FCA
977A5793953E253F649790106065F2F956E07BB110F1D7FF4A5199B53F26D310
D9E3553DE260FFD590BEDC71CA9AD4AC12B09E8031DDD811E7CE1C4E2D9B0998
C10E0AE05405DCE8434015D5E8434335D76E0707C36ED5E5C2EC7E59783CA099
F4BC31F75A62F4C02608C28329316045535EB9203076E59D45EB0453370647B6
15E56986C8D5E2480661F7148175EA2A55A5187666E9D9BD19EC0057F585DA96
CF1F91B38E71825486F2C563C52C7A22BF7AF3BC490D2042E8CE8832B38E2566
82C68F3D27FF9DC1CF763E3582052D32457998548EC65BF412065C6FC34B8522
9B3E5A5EC0BCC2B701FB1F62CD6C9CA9E9D43D8526A42660FA0D8A24F2D50765
9172AA7390EA9540B43955D033876B75A414D45FB1BDCB0EE4A8E1C6763117EE
D34F871C1D692C4BA0644E95818D08106F5905F67C15DECBBD1CF81D6489ACC1
1E82553D3DF4A5BFF200843BEF3B3DB3C6FCA2F0D737557A1B3BFFF929DA5799
3BF9D3E0878EAF2EC43C023951C59F3E09157F87CA9762F00A7EE36053FA6D32
6A9F5285DFDCA777CE739D7A77BA7CDD6D7A4568B29EE071294F9C0AAB7236EF
94196DD7E222146343ADA94C02350974E95307847599B02E5A9200C5BBD80FB3
451D6927B5C23ED718C9BD409F696B3DA41751DF6E19A3D52FDFD919A52E983E
07BFCD447294B1F96ED4AC5B1BAF7B88865069F26CF6367091BD71D7EA1069F4
8D987D3E76BC13E662D8D4E2DFC75C0F145FBEBB48466ADB7CE834363CB68E30
A0F1A91C4A87084317B0021AAD5B1ACB2EBBF8AEDFBA01D0E1E9DACA45F94EFC
91D568C63F0DF551344A4ABCDAB4F38A44C189BFBB5CBA860F9CC900EBA7EB2E
CFB83086D6AED4460D71BFB257752C5AEE42439A707FAE585CA35C2C450B5929
783DA0ACF374733D7447001CA710E20DBD21C85CCC6C44715E1D1185646D9432
1F4A4260985B376D7905F7302C36F97F5F502F2F1C38C7E2B365E99CDA8999D5
04B49BD38BF0B6962E6DD44C43D3608287CC308CA3A6B72B91DCC5B8AE77AC31
C8469E35D6BD1F33ADAFA68EAC99D4AA3B5C0CB97432A4654AEA3D07EEFCACD7
4368BDA94989537D321DB5621BE2BB042A97301D2FE70F5091641C7FB54AFC5B
7A19E38845B4769E212509817638845B53F1C76496D80FBDE4CD2AFF544E59A6
33B5520AD35E51290A3B2A48117BBE9988B61ABF40DDF4F85653AD933BA79330
8D8D8B1A8028B073456088F14B0E5EA826618EFB78BD5AC554C7A94BFD3A91B3
FFD4F252EC70527AE589427561EAC1CF4EC54D29A0B9DBBAF10B53AAAE674482
8F64D74606B0E9201EF0CA8F67CCB7CC009C8F3EA0338C40A487ED95860B9805
0A8C53A75BB461D32E372BB979032814BBABA742ECE84EC3C70C8281FEEDE827
F394AD4E14D9CBAADF8EF93A933795C0CBFB7204DC6234198B8B045489489D68
0E10D295F544E3FCF67EA5E3C901A2D7205BB77DD35458B6E29392025926B94F
3EE4EDC49569BAFDBE642C963411707E41DA572B2601547FF2A3CA041B9C5206
5ED9868BD921AE2E19E59DD6207CAE408A3858BB337F0E6842EC5D9C0D5D2596
ACBE7E49DCA378FF00A40E236B7BCA3A83192D97B128519E4CCF28EB25012C51
60BFD7AD66A2DE7D9CAFBA0562AB6D291F1C21BBA4C2DFB31D17A60124EE8DA6
CBDA94196D7EDC4E8964DB820841B614C43F5ACD9126970121B0F16C9F17495B
0944DAB553727A204C65A18A0AFA2C09BA590AE264BCCEA1DD5D81A295CDEA55
0A848F335B390108BECF41D4B25FA514BAB9F71497FB0B5F6FE0FB86C51C5D53
A33B5E7B1A6A403CC958FB840024382EF8F0841ABC2CA091D1C8991C348E7186
369A6F39DEAE8D919C80FC20274D7B30DD69E1B2C3CA70F2F79FA29543F526B8
76EE206FCFAEF68CA01BECA56517AF0ACDFD9C0B72FF95BC0C5915CA0DE369A0
D7112BFF6CAE56CB9BF699D9CBFEFF41E8E1BF7E9CB02F2E46976B514E496BB4
EC0463AC3D1C45B6AC7F41EEDA416BF3799E7A55C4BE3FE3F293154CF974930E
EE6DB4D383269056908BB3DAD67503428937472D2381DEA09B8BC800123D0BB5
4A24596BA7A6C770D4F7E864FCEE58A5C111311744B77AEBA5674EF5FCA77072
9FEF0AF2D2965E568474C617900CEFCFD0FFA610B1CCA391B8FEDA3D73843902
BCCCB3580B83DC0102166269AB6A4A6B1EE986BA77EC41DBACE2826B07DD73D3
36E5B30DA46CD98193FF92366AB94B406DC87770A2258EDAF9CC898F593BA430
2D5CAAE2FA4897ACE11FF84C4DD8F728EAB6F0967ACD7BF53E8AC06E4F5A7BDE
F178B1643E105BD1D16EB1ACC0E90B264F32A96037443DD001A5D7C9A8DD908F
4322DFFE98368CC0191FD3EC66A652C08F6DB61A1C32A78D8CDC20C1D5F55277
7DDFA0C0E03028539338323FFACE640EBF1303EFF9E66F6BB32B219D9AD464D2
04FA8A012BBBB3CFCB08EDC0FA979544582C132C919A4A554099F102CDFC5976
78378A13AB1A56F8A2352A7754493B909CD108385A3973445ADC0F6EA36C6DA9
CBD276DC4FAACAD5A174A32C58D145119526B2C3D294FA26FF1D3965B4AF6563
682179384322597E9E2CB635DEF9BD7118C237E43BCB731105A3243E26F95CCC
E957E156CD3126CE303F290E760AAD7B5C691FED64CF3792130158A84EE5ED75
D83C8174ABEDC27EF76AA914F638E7CA038E6BD84A267EFCEE80B333755865BC
341BFAFEC3EF8FC5875008AD38A14AC0D7C6326D000F3DC4CDF77D72DFD43011
270F2F4E4FB036045EDEBF3CA3B929414B1B29EDB53F00CFCEF86DB4F0C0A135
C2B2F371B1559D8BEB245FFAA7955250F08E8F5A6B0EEF67467EB103BB7812C0
15B07B6EAA4931AF4A59646AB20265461DAE6E57B5C958A54B43ED6AA7650993
D6E8A2F6F71C5CD8623B1DB3F5B933E3C7C42C5BE574CECF61D93DF47B131055
6883CEC750C615EDCBCCDF3FA71BC746103DC2D1F22DB076A5306D7BD8FA8C8E
0B2EC85E41383124196569481872D2637F7C40061417CF95EC5FAFC433A6E5D4
2CAB2CD2AB08BA4AE24FEF2B67CD6FBA7A6697F6664AC6B6C1F5650255776305
892A6E3D9B8DD31C1E93F5F396F67B8ACF439CABFEEACA48453BCB7890793784
480596E2853A9922271DC7E6EE3F0F60010DA4FFA1AB0196CF0B21F0851081A2
6969E75BF022678D5BF6FC74B2621802B29CA16DBAD0A2BF9A151AF359466146
85B523515EC158884E26A6EE6CFA5EEA25F52688478C4B70F8BAC1FB7FC9191E
173820EAB8A5D479D28B7F0E93C157AAB6B168295CF1191FFDDE2C4273FD9616
2653B00D7E484A88A248FD17FF0E7A075A554F9EFDC958BBDEC36AF13AEB03F9
3D85B2D5703212F9A5CE5706F322350879A114B70CB407B34E2C7F767E5886F1
9344167D469492F873B845ABF2660C7304863E63C21DC47D2CA3D7E500BD1346
BC148F0FA97E8C43F8683F1B4B2CC627C779AAD6BCEB9F5002AE1230C4BC5F76
AD2134CC4DDB0863CECC88A25FC81B91DDCE0CA3E5B551096DD5762189E8BAEE
B3E0A3E10B009E48968EC723C6DECDFDE76C4A7E75CE36D07B9A1A1DBD41DB89
C4200F685FA4011468DFB216BB93CE09C8AEDE145A73138558FB954027FDCE08
22FF36FA6F1C1F12A645A8906E524CAF38F5613DDA0C417053E8936212F232DE
54F659A360EAACBA07E9AE56AD3F0E1B4F8175E5232D6644A2260837F172756F
06AD294E594485E59DF38F5D6FF092E1498F8AAA6846B39BEC4C427F2A98E3E7
E08AA5E529377C0CD1D0C11221AA27F63FD065C5F3A6A112882F7F37638E5B2B
389339270519455E7D9E558D3F664D554AD0EC1866268A8C637659C817B16A17
77CCA3D56A827CA6E2FB8EBBA30BA2F91C666E44904AFCC4FF4BC074370AB938
55CD45405C5A165B868D431C0106DED8EE779C6561659DE55298253B0DCA3E42
33BF90478DF1B3289B974267D5877B6EEE9381BE8D04609B43776382C4389362
AEA7FE4E03637B459A99860D0E75E691EC815A22E4F06AC52972CAAC14E86A76
508E2AEE7C54377780B0FDBE164EB7200CEB625A2FD64C089212E7CD009AA2C7
F4C9897623B52692B023C71909B9A5B0901EC307EDBFF4A6CD8CC2FA66CAC34B
1718D317CE2040752BF94A98902E608264DED8C3241F0C713D0A6A3935424720
14F905534424CD98C82E2A9F4F9B6D9D7C8AFBD8B07C313A040026484B57B4CA
D36A5EC32A4236F5D60D4A2BCC3285BCA27120C75242CB2E3D0C31A18F0BE159
5C10BB71E57F70E9EDD479DE21D36B8AC50A327F01B283971E8189C319B82232
F548517D1124ADC946C2E4E79D4F3AAE440A1F525EEC2713C0767B3D1A8B3A8E
F59F0297765D3E4DE71F0CC30B63C9F47DDCA35071C516BBFABB12DE585B297E
55A609522A90C583E958EA39AAA9B441F5418A965354C91F8519AAF829BB958A
01BCC9D72566E3F4D34E56D7F9FF1A88B01317E79DF1586378263B978FBA0BCB
4BE7D98309AFAEA9BDCE7871DAF23EF3CAC40E43EBD1E81973D88E786816F0D6
0A51C8903943C6C66F8BD36DBA309089B4FAD42B86273D30CE80C424CB288CBB
7155E850C4E8734A0FB2D029B166D01B44818AF5389329FE1DB1443C61713463
9D9BA1140336BC143532244FA23261C8E62F0676E7EB96907824B42289A545F3
AC0F4EF1A383E161C5D155984F2C2E5939F7FBD5EFBA078A330AA3D47E03486A
3CE03FF9EE1C4293A042586C7D5DF306BD03A65EC55F0BC5C7A59B86DDE788CF
4544D70446CFD36D3EB77677ADBCF0EEE058EC5BEC0EEC08C56D322EE68809FC
A5F9F4354B5BF2FAED4B00F36F2CE5F46491EE865734BFDF7EB96A2E6C2297EB
8656E59E82D8B8D8D9C3EDC060AE4B8FDD306B66B9355E59A1D98F1F7053697D
44CDE97D6904608760D111F44625B25F470A3FF2986C6858BE325F4AA2ED4E09
E32A482026D3180EBE8F03A3899991058DA1F21D32BAEE70088C9E26969675F5
F3B9C593165F7B1D591B8E7F59EC311B6A6961FFD3E15BA20A922350414C6560
6809E80C7D72EB338DC6EDB28DCBF977631C0B89E277F52CBF744EFA218B838C
FCA83A445FA0805AE960D06C87661AE6FD26C9AA7A47C5F3D0C745262B88DDF0
5E7E3C1682E8E90FB8FAD5AC9FBF383B3364B50D5860E9A1646A92A94B094EFA
E7174110F3599D8E6CB91A302E3D295C27EB763D0313F9E3AD9DB07056436F12
95B3EF67AEAD84CC8BC297009EB5D21EAAD7A8326789AD428BF4E1035E92E55F
B21E639AF66E6A3A55B54B3B91F292832C2695E79BFA462D7789C875F63316D9
1EB822DFD34841FCB3F5AB7E1798B23757A3613D69E0BB838FC0B5926498262F
418310539EA4CFCF5990D576315AF77E9C396B60AC5143932D62BD7454D7C4A1
9139236B64F780D2947F2AFF2E0FFF984F022FE12D3D422DA3C7776E54A68203
9510EA5F62BDA21D0F909C5A8487A7126B689964B87ECC23E83F19351612FB0B
1E70D86D199F5CBE9A74A953D0596E59F9510557EAA9071AFD7E489768372CC0
E84BCA86276BDBA191466083845E134E7724A6428E157752FCABFE9220DE0871
3B8F3A5B76D7245D891F5D5EE25C7E2E642E6FEE5FD39DCBF8FF3A62868284DF
3301A707606734572F807049EB845BD5EEB6221B2D2658C06D45E63C9A5EA8EF
66FCF240291EE1DDB97A664AB5EEFC7B820575D35624FAA504892ABBFF14D03E
54B888E4F1B7FB089DA26F38BC76823F5B4A0531B1F64D6A0AEB2C3DDAB25909
FEF00778D7003A85E2BA58522DE65BA324640B70E9B902E9FB32F894C4CF428C
AD76C72E9D95AA2B96376A3B83379B8B8ACBACD4CAF07DD4FC672CD10024F331
FE72D5006B5CB38C7A634F07CF6DE73E5A06C67184BBCF69B32C4F358A707613
C7734195ED0F74F86AD1E5960BCC178CA91E649ABCC49CEEE10F4D9FD0C5B9E9
F3A14F9BFBA60CA6556B0473DEFE587B3383B1E81D6C228D0D8F536059633838
456885E83DFEF6DC3AE6AB5436D0CC4AFBE18216BB13E034930DB1B056B9A633
9D5B4AFAE1B7D87F43426B64371276FFC9550E9C21BC719C0DCE89FBB23B25B8
BD6276ADAF49B114037556D6E9C3326F8592F1A8E23E12340D6D94B09D9A5817
9D70A070BF56E95F620E2C0A49C06ADBF01991DC54C2FB1F6353EBDDC027D392
5BD32D89219A752D22762D2D4B60D7A3E379BF000C72C3891E4D22B394ADB043
DEADC75BDBD096BED0614DED2AE3D39C42F5A55AAF8F703ED627284A783F0017
89834F51A623C6CE602045D9845455F4F39629920D97C36F4AF1E5E72A5E739A
A5277BE4C0167A84B609C2D74C253763AA077E58DBCBA3EE6FFE884CFA489035
E2D061E086D27B4111C98B1B536513FC15FDF323A7899A1BA694A320774FC770
37D7F6E43B182BD85FD6FF960420E3B5F8A1C120887EEFB9C85101613C0BFC32
DD3D6469B6A9E53EE89C601ED32A9AE0C405146B04E77002CEFCCA06691FC1B6
ACFBD39955BA1657BFB86EC8A8FA9D2EDEFE211B9E97BC531F99999053013611
B3230B8D462CB20BE067C565191C7E2EF94BEC9B9AC2148619921DE10E917016
B5FC03C43BE397E8115F3A0C322EFE02904D82B430CD8465ED7103702AEF7497
3F6FB697E645E902D652A3AD058C6D311CA89BE960392CF963A9E9FCA6174B6F
6C3B970F89B6BA6E8B05DDF2B538BC24B526ECDC0ADE5DF9AB93F4A47525B967
F5BC367753638A95F165320CB57E1D694E02AF6E9FEB358782D178DFEC7FE0BA
186FA18016F95C6A212208CDE1635F4E5271224CC19B6D404D4E2C5A151BA868
5EA40A7E410F3EF308B8792776E605C64013B6B4E693A1D158ED9866DC5BCACA
8616749FEB7FC712C9A80195D4C3A837404D1729BF073E5071C2898BDC8E01E4
559A9C3DD8F6F3795F08AB34397B5321C9ED2112D120DA2922015508D3D2C553
90382826228F0C9384191F886F2B2BBDCEB0A04AD8EAEE5761B51B33E47B7136
5B8F31103159F65D30A7A318C1056BF638CF844784F969E166E6A53CFAB75F75
CC28A53483CF3153E74E3BC1358EC3FA22E15FC60EF3EC60091856CB963F1B7F
66BF85A2222275102ECA648F08DF489647FAFF34D71C3415DE40C492F1036351
910FE6B93342626EF818D023397E74A1FCD21E5789A95CD7C2B2DD6A02320C90
F58F45EBC6DF72B8D560BEF748B624FE17F016DE82379DEE28B6D1B65C089468
A339B8FA87B88CF526AB2A390394FF3BD138B0559D3E5887B7EA9C9C54F8335F
55CE958AAB7BBB73A8C475477E1E085902458C96E9107071A205660158C989B9
009512A2E17BBFADE849DA85124C6F494A7FCA980184A9366A77EB2FA0E1CC24
65A94804FB53A419A9C1F47891F67F19E3E2051CF3F7733A0623AC7979FDC83F
65B0E6BF7A62FB6C2F72A7EBB5E65B3C0C8B4D9FDFE14D64893669743B6BC2F7
C99701486E6A86DEF54BEAB6227878AB001472B32BD540B24672F73A91238850
466A1FE663624FC26E88758AC01C1C98B56F8D1866E61C25984CB5511FBAE3C4
8B1B02C98798499C84C46A07455FC54C21C91014C9D31B5743A9D4FDDEEC061F
BAA8ED68322B16C6B986109CE381BE6E0F8551E24B4BD0FEEE3B1A9713DEE940
0F5F752721620DB18015DB866EE5C6B153BA55F194E998B6EC925AC28831C652
0B70D038B3D9F60F63119EC9FA765E6E318CA3DBEB21469CFE94B9FDBF4065FC
6CA66B02202BFDAA805E647FE5BA3DE2F45597EE0694AF8445C41A12A0DD5382
793B37C2B30566D330813BE00F185D8EC22BF69C7F3C7B323D70E658B5B785D2
AB6863AA16D6C4C82EE4AF7AAD7F01C7AB89C97933EA251CD675EB316B25E08D
5C0AD1046B39C8109064F1B79385F1F09F222B545B1E00A91B382A13434937BA
7ECE3B966FA4A35BEE2036FF9C5C42384E0BF38923A5E9452652D21216EB3326
C34D2A0E4E8BC6D21E3297DF93CBA6EEDDC1BEBC9536C17D7F7254FD330D3FC6
EDE3E969EC9A32AF0768E75D440300F0BB4D91F5007D6DCB2A974E04CDD34141
696BAE8F8DE78325F125C5A7FFE787387CA91D863A9A8C9FA8CF7BBB5FEA687F
40BB8721E5EF326085016F9E506375D1E089C674C6878B7001DB7CB38F2ED456
8BD464C960DBF2CA9A266AB96447046EEF2AE810351B7FCD69EE2BF546967024
BB3AB4C26255E4C48B23738C38C522905337A70F25F3364CD10193B73D2C7D6C
71A1FBC04F6E98581B5D753974E438237A8AA3D32BF8D6E1ACA3F8030312588A
121DAE8FA28F0AC50C8835A568748D569E5A19DC5C6CDBF166388D0AE4644AED
A86E3FBFC275FD432A8A3B1ED1E975C5E50F25F6AF33E8E354F8922402CA313F
30CE2B5EEC29631F2C05A884542E408BFDE756C91AB084E55076B14D92035D23
04EC4F9083716CA7906B80486BB5C795F7EFAF5A2C93E5C578285B76AB6823AD
536B1E3F3D212F9957CF1B92A145530344BD2C906FED03F633F3FC8D840FB2B4
1F03066CDE17ED245D82EBD6D8A0E6E054309658648F9D3A71EA6CD16BF2351B
E1A662509515B1FDC48D9D8217BAB427D2B3258ECB7817720ADD9E18FD2F5633
6F87D1A473A40A3EDF8B197CD2F3699339E66CA77A734A0802A5200C48499964
52E00664414FC96496FA3B9827634E06E3C4596AE9DB308E70E59DE86300C955
678EE5FE4C18CA96E889C36DAF2D9A65E1FCF4A6659056E0188DFB0C7375A69E
AE631BC9900C4729B4D91C2115B0CC3A3A5AD57EAD62A642F7BC52D0064D626B
A548CC56BB43C2E61C6F69E97493F3EBCD5EBDBBE63A7C5FE1574EC8F0ACEF6F
2EB3BA5C082E9E6ACEADF497A2F9D01578CE2336D13964007E1320965F9A9E1A
AEA8D0B90FFC33765BC4B0A996C1197B46D0CBEE4FBADB108A87802A5EB64B46
FA556FF6AD04D46529E9BC9A18762418A4F2D7765504E4DA6CC0CBDF15FE40AA
423055761A641E8045D6E731C73A266B3165C55791AC67DF9ADFAE75DE3509C1
9EDD9422F77B27BE343F685149BC5AD0083F6C5D5B7928025D403D9518B481FE
DCBD97BA0595847D43CF7C30CAFCE21C74ED943A4EED0C1B3BD32479CB4DDD7A
97C2D7019C9D7DB4E0B1ED0B680FB004DDC9273626138E34950BA2906B425FE4
84270855BC7372D1C0A577389D48292FBDEC55AE303FB7ADF8AFA0646A4031EA
61B2246755E05EBD8614AB2FA897E8227A0BD7526BC9D87FE34C50128DFE49F7
5A1FEA7FB038BD30EB7641081A587132E35C90510B2EF00505D58569F35E0F24
A382481120415EA8334CC2F26CF23323EF301095C6E99EFA8B83F889200505C0
7E64B2D4509D1270CDBEFF01A028AE09C021434CC2FDC35A4FDC88E365F40B9D
576708B1B4CE6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4A86DB8972E826C1B
B1FB0AFB847E1B1AD35A5A69F32289D9BB3C69584C743C7D8A12A49AD70A5D13
AD9A644A43B7B3F49D27CB74DB2CC263413888D1C4B8121EC2C5D4A04E486F19
5B123171A69B2D426181910E8EA5EBF6D1D6CD947098F67A41B02DE27C7914F1
F0A96E74D38961A91B696CB2835B77B564586905D558A3CFAB0F1F34265887A6
920E0BDE7C64BBC23EA554AAC9BA95BA57603A8EBF83573208788DF39F63343A
DEA9D821A658006E6AD7EF59C7B4240705C19A10B53830AD637E14F8AFB20A70
CF48D5C18FEE8453579EE23F1785112E31C6DFD8E9E9291B005236906B6B49A9
E2D48836209FD44EA76C173C2D7657EFD8E4E9D8B2A1FB58162DFB145AA8902B
8D621F80C525EA450CA2E00F13584B0AA7DD92F2646BF7F0F1E1889C23B903B1
D4A9906F3EAC5DE29FF4E6F14E8132A3FD1B158F1DEEFC669CE697CA332B58B2
95832B48B17AA33C5E7EBA96669D80EE6F3E05905CCA51B2640457CFDB3BD7F8
0C944959B74FFA0CA674B3A52B5E4288836C20B2AC0BC79B34B48930980213FA
0E2C36D1BC7BBBDE3F1B814287AC06CC61F294AC1CD25B319DE25073823AAACC
AE08206EABF5E61E8EB6B71AA4B19F803785CFC8F2B0D464644727B8F99841EA
EFF1D1139D8A35ECE4D8C90B959AC3A19FA9D0303DAC5BE0058B7AC46EFB639D
FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAAEA104AB9A29604486DCCFA49
ACD3F55EED1E1CC53EA266C1CC2F8567DA6B3B031B0608A63FB48DD470A860D2
05AE370E3BF8733F2268AFE2F77E6AB8C6459401AE3114CC83B1B24FE74C351E
ABBC368E5352498E138C7E1A68DBE739C01D6D3668122629F3C62E9F01486EAC
AACC508B9D267C79A91646478075E259EE1C0F84682B19C3799784C1394A7F95
FA260EA13D49E4E4BA0190201C3829DB22E0317D73DB9E2CEEA0F1FAB79AD94A
FED924430C88DA60D54DAB1FF0F28B7075378FC1EB6BA0AE68F883D9F85B81A3
A160369B6F94F049EA2003A2D2352DE559933C8B4E514DB0410B1E140095ED4A
6B8D665D7AD4D88D93C0C8AB119B54176F13818AD21A19E74895D1B415315CCC
F6ECCD15CD3C0C3C3AB1F6AE0F770CA00FD02267EAF68823BFE0AA2FD9ECA512
FC5EAC30A52AA3E631B7417F217B0BE86CEC32409D8B66D2F7208584D5DB0E5C
30E5A42DB22DD8E13A29F907AC8B09B6A736712541A117E690134A5915D13634
B978BDF0013BECEDFB1567439AF718D3B7B02416DF5DECABA1FE42D290CD8F7A
F8845CF78D4BE9C7F2E4DC00372535CD1667C7920FE0D18A619F3B355B53B61E
C328513415AE99AABC297A8C4C8985FB5F0731836DBEEF53E3DAE6E02AB7614B
5068382C76644422AE18999FFE3798118C69B591F08D774693C4537361126801
3B15430C8552D94C8C3185DEC6C4F8EF454A0A41DEBAE7BF7A16F17D727515D8
2B3A36DA8CB5E590F9BBDE89001BB2008E75C39383A000941FC5F85C754D5132
402A0A94EA3D0E37D322142340DB65AD2F2D3AACC0EF280C59CB7C3428A0201D
71C654F93676CD7156CC449C1204FFDA4D2FC79A2C2A4C2854AE79405374E0CD
5FA29B8ED4A8217BDC85C71B66D8D4E2DFC75C0F145FBEBB48466ADB7CE83436
392D4250A744332069F3CFF233A6A2082CA4564D9A9C6B2242CED62B11AEEE4E
7A6AA128E3E58444869EA7298A4E5A14927719209AD1E2BDC5895A3BAED2007C
8611C13FA0D8E28971AB715C74102BEA73618E2AD84834A074E1688025E0A5C4
86EB1AF349CF7FE2538E88ABC9F51CB5E3589AD472157D0F9758C7A33E8AFA31
C96A1880000B4BDD26B6A227726D4805ED79F35A6514BB1051C71A024ACF61B1
2AF894AD848A48982E5E1B4C9DB55219090A5C4BEB5DF4A00195F2333E6D5224
E071986957ACA71DADA9A9B23F8DFE152F9BCF7C4A5E7EA8FC37575A237C9637
BC3A58D7BB96AFD1BD3F1808F7025AF214C48065871D95F479057A8A29DC524D
9781A602753744D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AD73A411DBD978
F3032D2FC6BD54FD7664FAF472BBF13D5A885E836B7C7D1B6B6FE2F8CE38A966
55B073C606E9B652E534BEADE590232CD6C8E17F882FB007353436840306DDFF
584238530C6965FA6C19A77930C479AD24B462D313A32520972CFB0F685E6165
128A1763BD3B4575E25A5F08A9059AAE5F714C2D1C9FA7DD56574D21C2D23D38
5E84973D335403E920584A67EAAD675F65CE6E00FCC4D8F24F369E1FF57193FC
F5189226F024FC4511858054B8F0B92046816683E26F75E56582195306CE6018
4E4AEB86FBDF4923B38B9755BD3B14AEC08703FDF9593623E8AD0DD1167F0735
D1FB23E6E1A6BA6E452CE598AB7BE42194A452B101E541A3A072F3150F6BA142
E6C2CE62AE2F12D3C93A80C0AF99AD224465D205E4648C2E561FD8F25EB7491A
5704A6279B9486499E8E8619801FF7A2900C9E333B773A10986AEC55EF408371
61EB473DA6B47D087914239AB78A0CADE9E3FDBBE1B370EC8FB3AC104D18E08E
2A62B8E6FA293AD6C08255B095E2AA3EAEAE628B6C5D05BB701468F0E92F3B76
9252F66CBBDF169491477DB48D6AC7E2330C563D61A7F314ACBA25AB2BD96FF0
1630157A543468D47FA38245BB063664AE06A85B87D4AF57A6320C8F34A80719
DDF6A166F0A2E988FC20F16EB782F9BF109726F7FAF916F660844638B9EC5214
EB8B4F3B900C34193E943C7B09AD6D49D06FAC9701AF19072A7B226CB039A486
CC0FE1F2007D2D5770621D48D2A7F1156A3B9F3A6C9EEE4479C99DEA5C2DB491
467D20F11E2569E107B90738E6BB18DFEC5F2EB7BF756A40F05B96B5F9F546AD
AEE71FA1FC4FF9487B350CF93DAB0CFEFA86B99E789DB168F63C6589384C6928
49B5473C6380E7F65F58F8ED980BE53E7AD9AF22508732F5E3C62063FE6AB285
D812F4B8A0F87BB77A01C6B545C6070680DB9CE00A8F0860EF5523DA24DD430C
3AEF8F3F37BFDA801A01AAE88E223DD69151ADBCC9D14A9518E4B808DAF8C889
9A200FB051430DD48A16B1763750E44E585F4C8CF764DCAFD05BED2C599B423A
C51BA48E7FA04759ABCE3948982E851D3B0847DCA2EE0BBFB4C0D27186988D03
DB25DB95760574B9510DE0F1A27BE38C79F236B2D31AC5B31A7C1BFC49C52E65
FF3BC4D632CAC269E6D9002CA262CDAA28EE327EA6E45DA2297C64008692FD19
7DB012F4E06B217F0421303A8AA373A66D2E122F172847D6866B6A7B3CF9848D
960A10918E369E62BCF2153D8BE51C762DF8E6D8F1E35E3F86247FD3888AA69C
4071FF417C34A01D59CA409A66FB8FC763FAE46053177DCDC3667B29DCFABEC6
1EAED06B18A1ED02C5FBF0DDC793DCC2BCBB60B356207912A27982741C12CF63
6BBAD9A825C3187143228DD163FC86124ACFA2D476608A7899E2D563D6C238CD
8084E7420DD9E13C3D410799DC22533C15C98132BB705E95486D902F2A06F0EF
15886DFB61E457F8C791E3BF0F9F31D79095F8A0D322C981E3B2E06519CA2663
9C7EFD3938553AEAB604C6FD0C20B0E29BF8E1E37685488691EF21286FD15A93
FF6A0468C6D06CC752D73A6266B49E540D79100A0E3711196E420C86AE6884F8
CDA575786E981F2BEE8FC602BBD6EDEE6FD1192067AC17EA73EE0AAD14A6148B
140749BCF7BAE63A8A6EC7B8F1AEE9D2A6EC2B2AF1D74131FCDEADADBF729A05
9B9126BA926E6A7AF094A1F9CCC08D01256B7CED1EDB94EACB57F4D1939F24A1
3BE4C74F0CE0FB3FF574C6DBB1B0F31BF92481E37F7D0CC4E9E1AFE786284070
E75E77CA3450C33D0BB41D6E28DE72304D1C0EF74C607C2256D10CD69DD65FE1
CDD42AE9FB3834E6F230826692E5D11BCE66FA82C3DF936112FCCBFAAE12BF05
686BC8201D7E0E4EB5EB61652989DF596B965CF027665CD782EC2CCE9C061F0A
FD9598D8526AACA31ACC7DB1C1583C4FCDE7D35AB99CD134CECA598966512D53
D396CD321BCAFA2043BDEB19CBF070E4DA4BD6E3F5A259B0CC129B34F7B5E4C9
FAE869F6C29E00DCD11C804775E4B49797CC71063814690233682740BE24649C
2FA5930E23281DECC5AA908E54244566049F221A9BA5FDE6D30F9B08478DF384
4BABF04CA767EE575699D63E63966B7A6BA5E64FAB66C5E2398136FB22C6DD20
8173509FC0A2D2C94DA0A3862736747B923DE038A68ECD7C9637E0419C48FDE5
6FBD0076C384AE0BCAFB08B19D942E41038FE5A03D9D084C4304AA26B690B605
317540ACC19E4D86DC729AEE1EE7D720560A0284CE7A994170632E5C132EF079
8C41896F29F308EF10EDC419BF3A54256E363F1E05B58EBB8CAC76DA0B21819E
209EFB5641184DAEAFF3FC3E99EA1A0556532E19C10201720A898BC1D42C79E6
5214FF60607FB457EA8FCE8009D30DFEB19A02D18CA44689E5DC1B680ED52494
9A252036B921751FB3806B69940F415DCA13FB1C8D1F7623989D0E44CFE43CA1
5A2E60ED2A3274766197D83EC9EE992F86C965AEE5FC8C1A656647A612670BCF
C7DB01F98B62E8DBD30C2910CAFF85068E7B985B293EC09FD400028A2B80C8B4
0A955ED7451221E57ECED691D9C0F65401119823390E0FC88586099205815018
A7A244B61A912217A7FA5BEBC0A2A049489E87F4B00619B6462FEB035127966A
03E356BB6AC8514DE4676C150B3535A0A0B4858DC52C5A8A90E21ED0662E6C51
F00D0245484732543831E1A7F20866F172EF2EA271A9E738756ED817D353D550
424FEDC5BD7C192CE2AF4F49A009AFD1838B56567FF16D8C7C8533D8CA304B79
9D349C90A6C0CECE10CB44B446C62F6567D1E2F4809BE7C75F24B3866FF610FD
A6F4FF026535C761E3771D6140C0FC759E65A7FC20D119938CE43FECD9A52538
753A88311821B477662CCCE77BADACEACB3D979FB64C1924B9A869DFD9A72C83
D2DE423A5AED4DE61D8C79F8DA266F89F3A0DC02BC6DA849100D4324AB0E7AD5
C3C5D5B1BAABA354F932E78031D291D5F1AACC9A0641CC2097EFFB9F6D14FC98
3E99D27F9136D9898DEE397F02CBEEBCD4DECCF681450F0BF41741C5DFD40175
8DB39457BA581E7207A071E11D3F168D1CD6874ED2390E6ACE54B7E7A9CF3D32
E278603FDD8C754C60E7364930B4AAC76A132C32DCBECD227134E7F747AEFC1A
C5315A12FB600B92EEEC2CE2B6C918A7906736E895F1BE5C299A658F47D04875
84B1F9E7DEF39AADDD2122E2572DE405DAE2B6EC8603B6D81BF237051CFC42AA
915049254F89A9775BD594C8D8702FBDECF277A39FA48FF9F92771AF4A7E8357
E4F6D3E8A2327E4C580B9B5218252DCA73B96A0A1EC8065219E569FE370E62E0
1295C009918E2E82E099CB538341FA4D65A0A8824487049396532635B98C5018
A15684F9BCC79AD6DB725EA0E16965289FE28186AFEEC45CF8F5AB034EDF79DF
5158AD89C7A604766FFA65AEA58C77DC4ED68C27DD8341F9711B20B401F3A783
BF474B95CAB8F6F0F68C2C49471556F4213B07EFDE6EF7AAF8618A7AA66072EF
073DB1C3E30498E3EFB4552FF7ECEFC68B7376C9DB426258136CD8A897A99DA0
03BD5C327D5662A60A11AB07B6AF9A887A21D59357B124FB175658468CD6ECA3
01D7DF996E76C827664C57542BC723699FD4A5BA72587E32274197FF8C194008
B8039BAC8F69661ED33D19A1FBA9798B35CBB897387546C058DC0BA6DE0E8976
2AF815125882D50013B5788751E97FCC9BB750C68D1B708E8540A16C1FE42620
2D1385B7469527036FFED05550D29CCB6FC12FCD261B67205B15E1FB75852266
12201098F66F9DA630598B1DA46B4F7ACBBB35975170335B24871BB26E5F9963
F3D5781D3F3B7588222674C1BA557F639F2EE9C0FA967D4E5D5F320357DB771B
D7A674D75FB486A911840172E1ECF723651E77725BFCAB36FEC044A22874D196
30E3F934E26D2F28AB554CA4065043D5B37F82020AF9439F6910DDE5478FB74F
05741D9951D863EE52362E388D85BA59F458CEE9515B559503499F3D88DCB3E0
FF925ECAF1DF22643FE1B7A265B5557BFDF2FECA7A4324333D058FD8D33B3747
71566B3FAA08119C04C6F940103CBAB391383F7060874063185451EE6FECB776
CDE57117F9F48F217D5C46F3AEE1E45CBB75B7341F06D8E37285BEAA9AB71AAB
E3CF31A5E85280E03809D0363830D1DC7502CEE16E00B9AA320CF669BD531EBD
40F60C2966E53B67F590AD3EA1E5C1A29413E924BE0127D82D914E350D2ADAB3
A112773B20BEAB92FDEB2ADC2CF7E870F62A2F7B63830B595DAD1F573FDCE02F
FD632414CBB06668437939A4336F1401883B5C7736DE20C7E21843060CEBF7C6
61F733044D617FC9196519AF7EEE7642235D15B2C014F380ADBCC96D670480E2
B747E58310BBA39C60A90689026F9112209530A35FC6145232C379D553953BE8
28891BBBDEB2FD22CDF770BB877420F3CF25B49F6A4E1010810B097F0FCA44C9
D6A24015A7EDEABE0A752A7D904170FD5A79CBFED434A0E958977DA04A0BE837
A97E5CD28D4699DA3EFA8928420631BE8FAB27D9514B4F409C806CDAEC49D2FB
245959812F6CD9F83F21CF614D16623B3DB3B1838CFEF5E8379C87025DB87956
9773E9E51EFA509D533CDF5B4CB817DDA8D8F7E0AD15D8FD4EF9222D005AB0AA
F02EA4580FFCA376E600F2280CD7A3501155916D578C2C6E72A18C47A71643E3
8846BA2B3B5C13270AB3956E65553012A289D81F4DD49B1742918B32AE921BF9
59E26D9F0973B7D7866C0BC459DBD509CCF2288420EAFCADF7F8882F27A91228
C120C8EDBF4E8AF33237CED81E65EB7223321154A35098AEA5AC1710753EBB24
17DC51DE142447110C44ACAE96741B56966061BB60F968986D1E79CC4B292783
4E5FF4D69FFC01BE0429EB06597317E16272B637110DC2FEB0468795125393A5
0F4D2C7C7C83A7E7086D42E55436E2CBCECEE1B803C94CF313560C2FE90F6A3B
01F82091B1F0237B082278961A1CA297840873961DD9587604EC25CDFB43CD10
3ED7A1373291BC0AE647B5E7EE6C3B8E50BB36C43DB402CCF58262D7B079E351
72DF67D8143059E236BF5511A32E25D743A682534913A2238E218C1DE2802223
8D73402C5F22F695F0C4CC62A0CD565B8A6A1FCEF61CD2A5097CCF506C626B18
E1CC6E48BF5726E13574F1CF601F19B044731A5EAF971AE2D8A9462CD73EA735
EA60A77175B7F69173D4BBCF3C0EBAA8C6278DA3D2F3ABE0B539AFB2B074A778
1A65BD5CED630B94BEBEF008C7523643C25934FBAFFAC2FB8B279AAB5B2C2CDB
7C6BEE176F200BF9DD84CC7275ED0C46468A6549882CBC0F420209A2ED5CD01A
CC7E1D0401A7FCD4D1BBFDFD09F2F1C2208673A3ED3D91ACE4B124110BEAD0C2
60D4166BFDA12BC262DE9CDFC614D7DC1BC5691098151441970A138DFD2DCC30
CE5814706E47F2DEB906024D54B2A739244F7A69BD5CFB4178614E6B47EE5C6C
42AF0C00F5921FC73097D0B47D9104DE5CD76002E6418A0AD84A261786D4C665
D405CAAA6D1235B4EC47CF2CBC4702A6E83F88D18B78096DB0BD422E93DCA742
00A95DD8DC4B1700C784827122572866EDC319CCEC4A143AED320C2186531BCC
86DB13DD32CE810144FD0EA5F4B0B52B4ABCFD63268C2663926268259DC58657
C093CF65A942646C314A101937C60CCC59DDDB829A20CB5E8460B0F78E9103D3
B8AD4C61E9683CB588FCBD5FC2E6EF318DF49E489D80201C07E83FC186438CCC
280F34591253BCFC6D74F188DC7E2E026B2DB4CF10D420B0615366167E9B6747
77F120850083599346F4A64CA22D818EC8A99C314DD32EC802159E4CF3187F32
7BBBFB0E12CD481F1857383BF2D3788643558F4846EDC5C7B09A3106C2735E5D
35E71CD47369E73463986B155BA95665CD3327ECFB20F07024B249FDB9E2C8E9
3E8934D620F492AC17C04F99ECD869F0A153522917D457495053C8BED2C057EF
E47BC5F165F8B7F4EB6B6441D239A5A2B5ECB73495EF1739AA1DF43C36E9E4B5
522DD5415B871987F50CA88BBF57A4FBF9C5D261A449C118DE8B1B9EDBF53BA4
E1A00E3B6A07408043CBFAD9A3BADDFC68DCCF67E759C154114ADA73978E9616
FE099066621A67E74232CDA1095EA5A9E1CAA5E94B0856CE64E50BDF59815F41
95C482E7CAE9F2844D17BBDC178AFFB0DEB4493D2BEEDE39CF1A942C82E3E05B
19390A1775D2A5F9EE021B22212F0F6D0FACC20C8DEDDE1923AAFFB416FB3029
ADCFE189AFFA042CA430B81F6B3FA0BD5657C870AF1DDC327A6DB5A2AE2E71BB
1927C6ED2804836BF3188217F325C4F2D5C9C7F959EDB19CF59B6ED08C026687
5BF846E2D97FC0C60E976CD53F13A128C272D7D4E8FCCF1C3859DE5A21B8A1F2
C3451344CF5637BBAE7DFCC702E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65C
0C41A8A4942074E5E6B2DE3B1299F0A1E6B43480FB5EEC48E003F902FEBC471A
D6C6DB3CD6BEBFBA593CE34DC66C08974CB5187A516614FFA086067DB7B8D79E
B494B60F94CBD27B6384116F985ED4FC0CF7A1C204D4BD2E1CB2023B7CFD7BC1
9B7456A83B17083469EE367CC1FCDA347BA13D63A2DF6044F4707F3F4239774E
C5D2A531F787B932FDFEBB8A80ABD3372BF7B61D458BBC8CB552A93649819CCC
9366AFE79A48A3BCA95DB66E5D14FE0C6D73B45D9EEC232E5A1E70301EA5201E
EFAAEE178CD39324D5E788AACACF1B28C8C2396D5C8CE61D98B0DF3F94D20A9F
C1F5DAE96E1A7A9C6023DE05228EC140AFB6FD23B30D5073CE2A53F750B082C4
A6590AD501BDF6EA084AF5C95044FDE2392FAEE38BE1EB6D086F2AB69CC2CC08
6217B5489E162385C84F86E70D3BCB5ECE08BFB86416753FE25B9A8D44314BDB
7804894CB7E539807D35EF423BDE95D69E64FDEF4396531CD9A8805196AD2773
879084EA9DFBA3889FECB91216E2097A188E727E9DD24B0EC6B24A3FDFE1B1A2
7E3521C498D736DE6652E807C0453067C105F79A954D8AFDBAC7A28ECE646736
3CC6C277134E2D1FB3A75DE53FEBE1B7B9217170EB7633E9CF7353102D74FCD3
0EE31B2004F31E01F33E970B3F3C112ED828E9BD8D12840526250C07AC3413F4
5DD6EFD11E08C066555078D464F390243D1D3F6A80E33CADE90345C54F6024B6
F53DD34A8AD6464615B194825DB8737697C51523E3DC4112932583337A9E542A
F625A84CC110A35558FD30F298EFCF03915C31292CEB92D2D857C4B14549E6BF
DE776B9097E24E38F13E5124F26A49E3BFB2F830BA5220D6680DF58B88A3A0A4
F3433C56D632F88A4EF310FF8528795E241E6A95AA4017DC05940F32250DC3AC
66894660C1D6D0BE07680225415A4A7B512A180CE092968BBBA54E3A60D97EE9
008373A9D2C02A63E2E41F3E9544A2CD24FB8371A04B2624925CBEE7787D68CA
BBE011778D3C2CC787C1F19B923A37FDE7C43B6BB0C8CA4D1CA0DCAE7397A07F
5CB058FDFBACABB8859781A88518AD8883E0DEC9F43EBEFABEF2C792DCA151B0
D8E1B1412624A9A279D18E171F04F6E164C2CA9F56BC5D4E3E633D6E0EDE0732
40736B4F1BCE96F57A97F831842958E6B6554ACE7290306F2B40E28DCDBF18E7
2B17D6C2F443F275C3FCDAD62974640741E932216B876BA9E7D9394F5113ACC7
7DEAB04EEEB6DF712D36BB05E113CAEA9503DAE4DFD4291A56F3840DC606687E
7A70A2FDA4D50BA93D9AE1DF905B89579BD3760C728A839E3A2225EE93EE44C1
960A75A2102905B8CCB2F61255AF45BDE940DC77837C048A952BE760F64560F5
0B146EC0F3B3FFB1F9D7B0C55DE833898D251D8FCCD90B2B2BF7EAF685663568
9D2EA5520D6120ACC022DF53C76025540BF8DD6902E56AD50EB025C584F4EDE2
713D9FD43402004F686F590F9F74DBD1AA2E2F1D1419995551C8EFC7CEA6075F
E46A0725A98DAF86117A3399E125D817498AEB3445D8CF8CEA8F3B46D184A693
179464DF7E03C8D7F465F63033240C557A4B45E41E5CE1318D6E2351B9888D7B
C5EB2B5D0CB145DD2DB8FA7E698B3CBE8F262043BB6931A6A495898566A515E3
276174F284BA9BAF4130F770C7184562603F7B03B0C29A6665AA6064C8DDA097
49218DC0A34F0D2DEE2C6D4ABF108A5E95EDAF347283111AC44DAD865E2A04C4
23D05F82CAB75D662CFEC10B96BEA71EE37BCC94DE2A880F75CF59ACD41011B8
C04EC8307076E1EAAED1288144EC21EA20F863387174E3B1B6DDDCC4C462A289
5C9CFCE424813E9A8F6B24CC94A37ED7FE37D7D03026506C2F7A2E372798EDC4
FE24714CBA54CFF500B9671D0761FE98DBE9589405332425109CC6795EDEC350
7616202DAFC3CBD5AD08F766323E1ADE33183B5F100174DFBBFDB477010C1E68
5F759A9F3F1B4B2CC627C779AE2D9A450394AD4A2DAACA192E92CF195742D5AE
E9022A24E0043B7BC1D982E7CAA79328DE04F0F7A33D4CD50E505F9097C2F000
13BF9997611A763FF213040D3BEB7E36EA657E4CA1C5E19A43A6E3C455F87BAE
39B6832CA26549965DB0D72EF7799E134417E97E743F214C920D15E17EC5A6CC
53A8BAF39883AE261391BB667719D9F90D4513770F41C9D59948E7D6E5669C0E
C13FA59846364CD8EE5A8E1DBE1F0727C28079F6A3B51A7E96C469B1411084FE
027DBE030663B23BD6DB6CA0A14C8974592D73B3CC4B4B1BB8DC9DAC9C08F6A4
1DBFBFB965C82A632D44F5344BE711E12562903DCCC17F3EAE08BB76021D0E79
0CC4AE014B69CD968A5A8E306F04408E4A84B3B6EBEA8E63798B665B809A0668
0D81C64C56F272C36C81AFE68C2A018FAA8C578586CF617A62B04838AFAF324A
E0DAA6D47CBB050920C82FE4EB41DDD2CEC9BE0015483EB8D92A776C2074A6A1
336789E935F72D63DFF012D9A6A19BBDC238CEE08B149B1CB1F4719F2DB4582D
4A90684A1465FEDF4891ECFCF5CD3D6FCC75A63F17A65EAC97AB16CFFA3F66FA
FBD0B269C85A2743EA9149267E2AE36932B1C53EA335483605847F13D5093441
9D6035B773F952696436B7118F7EC82F15E78DB1276F4F4B3B1D86E6107E6079
516543D36AAA50815285847391388DEAE31E11C1FE9C2F681EBF1418B115BC4D
6022F70D6408A3845FF656EAEB7AD75F579529861FAEFDC91E0CCB447FF6AF9D
A5F31D4B0AD312FAD1EFA4133D9F7A0ED913F0ED786637DC4A873164749DD612
DAE21F112E437B0833670C7E255A4A7A43966ED6BB81AB940CBAA90F3BF0022E
6611C9D5EC3DE44668086CACA701D4E959B4F1C098A78B985EFABCA7ADAAED66
E8258C0190932992B204441F6C28F8FFC6DDEFB3BA87412982ED98260DB84337
892A232A3A1E688B82C525FCDE98F0272D21EC2569A93D886940DBF1C74A8C84
178B27B151E8D4F7D855C4EAE8DEC82AA77763238CD647200E1D5345962DED3B
80B04639C155D48DB49948CF3458263AA9E425D22748C468DA7EF74FFB0EEC58
6ED57A9FCAC28875B34AB843A4F085CEEC11E6F8121282D88FA80DAE185A6CA1
703B1249C0E83CFA5B048D8DAB7180D7375845CF1FC328F7B383C0E31A45E63E
48B31557AEE052AAD74E0966B914C84D6133D9D4BD95C45E2CA86A83AC1938FC
E2DF9C271B7B7EE08A4211AD764B9A8D9CAA0D1DE3106460BE7330462687AE0F
3B838C3B4527EA4929E4C6E6FE9D62DFC663E51AC2C563B89563D0254194DE00
0681912B17BCDC83EEF89232B34BD8D1A690B61E603799AF42598178C7C3C3AC
7708061FAC0F21DE18CC23D29A563527B15F0055C920430B9B73AF085CD308DE
598078BF655B00668426AEABC40B64A430C0AA868759E4C0A2689D82883FB966
934B9A2AE930145C65F0034DA4A3A49D63DC06D1AD3F50FFF083740C18191F51
5E47FDD5BAFB1ACF936E9B81DCE423ED67D8077EC4429E9F6FE39D6CC4DB953C
D1EFBE89ABED3B1422A124751EDA0CED4C3D2F1D50D0B22791EC9E653F77B478
161CC49B1800698574BE566E0F4E6C425BB041EB66EBF52C716551A7D64C8384
7BC67F9DEB35111D57712AE45DD3367E37DA618E9CCE36E668706C464FCD1B33
AE94CDF26186588763E9639D5D3DB9A3D5696942059DBAF9F395FD83FAE697F7
F930C6C0F2D5F535AE93682E855B1BDD6CE9556272860CC4F2B25832107BBECC
4E114D01464F125E0A6B762EEE61A8BB79B50B784FD9239EEB2738821A848943
6AD8A3E73F17C181EFCD9C2EBA72B51F0DB554C056A1DDD7E863851B56353CE9
DCF31ECA018225773B359FBC14A9508D1B97E405C045C305C9970551CE63E45D
74F8B7590D3C20595CD47E3C79CDB4AD76F7E7295BA295F1326225291C253A9C
CE662616C550D4A199521123C4D88361C6A27641C1BFF6230E5FBC126CAEBF68
9CDDADA0D9E78E54D2667ADE6068986D1E79CC4B29247E9E67FFE6A05DCE65C7
B986CF466B6A832F1921A69059593C32955BC90EE29DEB37DDF577BFA71B8A65
1C075B2CEA47AC24FD8EE5C6C240D33D5F278EF8F3DAAB752D718A7C5C2BFC7A
131E6EEFC29E9F3A245A0D91E491A692D049A022808893BADF81E2FC3211B599
AD6036A73F47EB0137A2E7FA75593990DA39EA2FE095D4A9761F4DCF1E7FD3ED
380701745BEABE2C98842822EE91CA5F54DBB4DA24D13497EBE6330563B69A63
83A5CDAB2CFB5B30B3566EB48440D16A80ADDC5761582C90C7AB5071280EFC3E
597ECDE0884F0F7355858DF9894AACCF6FCC5C78714AE6F776AD12743DCA6F93
FDBE26D4E14F95B195119EEA940D61091B4EB2051992352509A07F9623ACC0C0
22965EFEFCA56FDEA8346634EA2C9A685A4C4D38AF1752A6547B2F7F77A71915
AE991C57754A6722EA3A4ECBD084FC5DF1B26838D8B5F0042950D62182BF36E3
3D367D8B8A9CEED1320D3DE7212312120C8E13CE5DA0B17786988A25FD6F48C2
438EF96E2B3E7302C870678DEBEF475FE318551EBD9B8F4AA038DF79588063FA
5C12788E68CC69F639D589612C93B39CA0EC2673CFEAD8AF1AA8CE0237F9E587
52F5CEBDBCC73079BCB0785DAD1A29125DEFBBC166B9B4E40E5BCC6F9DC80104
0AE72DDE7A474CFE811C2076101B8C8906C1416680EBFD995A337CCC94A10902
6D51F307DCAD5F842A02A0C9F79E01E69A6025891C289395D9D28424164867B5
79F69E34040E2AFF508CE7AF4B0D544E7517C2DC1D4D8A059876405158D9422E
934429B55AE8ACD2BAE302764D00203C21F1D051AEDD11F65FE0F14DAC4A3645
CCFB4ABCB0F054105D73742E37B7836B2B4CFA330CCBBC0BF0A4DD2CB038B884
3685BFEAE15514C340A9824CA55DC54B2B25B0996C2C590BBDDE3789C01ABAE2
B4E30180F132FBE37AC3236AE99DB944D7B4B835FE7423964AC08E3D7F0D04A1
7C5233C2CBC92DD03C1A8FFBAA484F2222BFD38455BA078A1A500CB006AA6A7D
43E2487C1877DCA0CC3F8CD8CD85CB0D4F824D86E19360B2B3D8C7BC445E500C
128AA2B10494823BE831209ACCD52EF6CC868ABB2CE5B2C145DAE2B6128E6C91
3C88155D32BE63BE3C73DD1063B2D374A4906DCB43730DB05FCEEB1243332FE1
E3FC91864C8AEA7916A726F924AFDC8E74262B58167617019BED0DD554AD31AB
998F5821B8212D9B672D764D2F51B2393ADC71A36AC0FF19688AAE09031CDEFC
D8F5E62795B990DB5F017A12825C0D64226B3DA8F057FD4D5D2122AF19FBE581
E1D53A38717742779E6F0D9A3D6E2B4CB329D13FC2162FB111DC49768423C678
755F62A3B464A0300513DB48355B3D1870D997D37D5373C293BC00646EFA0A96
570BAB2AD4C34678F3F13E699872CDCF4C4A160F3373FF47D707DA7220F644F5
D83E5D5DC3CA953BB415E7A13F826B680DCD9279C4D90D7AD6FF6713EA292EC1
AE9E2DCD9DE0EB684D4AEF469812F73D55BF7E9EB4330844CB6AF35D2AA9116B
9E694AA25C250C84A7ED5BECBDAE3D7C09AF01A444FA9A5527DBC431CC1EF45E
7241D4FAF394D14F4872A43C55BCE077C95360CE30E12507BEFFD3C64C38EC16
B2D339B68339DEE85CE619109DC5B0CBA8EAA63129ACF3ACEE557ECFC5793EB1
C455C989AD024EDEB72F0E9058E29D51EBC3A3C0A201089663D101BAC1D91114
CC7163F80FB636FCDC451C50C76BBEAB3E02336A4618FF703694C300453BCDCA
512B82877CB0134F7B95BC68798E169AC1564190729D9E1695EF9F0B04EF466C
70EA68992921A4E132AEE5BDF71E90DA34D547ACCA61BE6D41EC33B774876CE1
CFE159231A026D3A3F89047579FD28BBFA862854EDE3A9BF589E24299FD34BD1
3605ED1672C9A30C4382A569DC1EC49ED6114400749A6274D80CE84B19BE4DFF
B5778E04BF12C6EFF9DE915007F1B1A1A213262E4D4AB8B2B829EC531D248703
65A38AA8C5EEDD3B474825105DB46903FC79A00837C7DFC6CBAD470825AA8979
C2394D7E73946FF72DA1DA89CF6F9FBFACA3A735ED0119A05825E530A8DBC9E1
5A8C89B164036EA2711CCBA78266F176D29DFF60701F4F7C66B61198F8066DD4
93031D1A58C9F778B0E924B11C3DC8938A559F0D5BF2DAD4417250B85191896E
629F88B5154687013151452CC2EE73E369EC376EA3D76220182D57FB18DEAE23
49F27FD72C7ECBA19D8EB5DBA52297BE877AFD48A316DE1AFD7074E582135CDC
C357716114A8B777B7EE58B4F779795D364201E7C0A5310E3CD433D6E8DAB54B
078CBB9B354727A942CA3BD0C8838F9465660E7ACFB5C5210195D0E9925EEFD3
887932680727627D7E34942249953CD1CD593D63DEF774133DDAC875AA8D5657
A0E4A558AB0BA93007579732E8622A2F791AEBB6595ACFA45DFF2F0D83601A0C
C9D64BD45DF1DAA8C4CE7A3EC64DB619DD9D75BCBD285680BE05F621867846D6
07E5ACA6D838EBA73AE972393DC2666547C315CD5A7463F1829F1F8482BD326F
2DF4B16CC2BC904739AEE6D7F0F17E613C8EB4385862257D5F9A73A906C32539
CC0EAD16213FCF9E1B9514BCE0D70993799D43500A28A6B2126EC9DB90BA60D4
F0CEFF050A2D0C312C8E30911CF7AF1D13A2161DC716D84A9DE53E47A01D879D
8D903ACE520E5C7CE18C5849E359D4689386F9D173374D96BDAF0BD36479D9E9
468E90DBC423710361E44F48F36CF72B5D3FD84E73F22023C63FEF39B8BA4AC2
29A2EE0287CC9B31D5DDCA74AEC3B0951BD68B348B3FE91B3C44DC05BF90F7E1
C0DC50899D11BE76EC06E156AA2F41FA8B6DF5F95734D8735E4A1934500BD01E
DA082509C4D54D66B5DDE6B64A27590E6CC234C4F66BF8DECDDB68A17EB81101
971427A77C3819B115C4F9BD55E92E37237A777F33D08DDDDDA07EB0380EB953
29B5ED27C112FB23022E75D57D24147D284196D0A5173202915C788CD3E5BF0D
D2185ECC3E597C6768E0973F7BEBA2AFF94357FEC561D7EE1EDAC1F8BF62983D
775A3A54F98A822B895820EBE7346738CC89DC5A220E4699C15D3972B2F4A1BB
6CDF98F13B4EA7FA22C7661638B4583C8E173DE7479C88A34B3F026DF847160D
6A0B00195DF9C651AA34A864BE8AD8FD28A9EF8EEB25F6A230DC6AB0708EA904
87B0AA17DDFABE69046EB0B0C8C4818AF7E1AC71DAA8EC619E84979B100B8415
2CF6E0E17EBA2352DE294B8539CCB7C45426702C139ACE571B62E1A19B26F2E2
6EFA95F9E51FC473410F96B56B11B7BA4B3B0F935D7B9F8328C81AC1EB2B8A20
A13A54480898D17FBDF12A3CF27CA9089074F56DBFC2992CBBF2D3BE43FC7E8C
E14C9FF2C1620A4FB421D079F3741B296A58F0D5B4E47DECF5851CE1C13E06F1
086EA20848A8E5E5D3DFB2424B7CC45EDB8CD31912CBD1BA0B0C2EF18633B72D
97190DFA6413D73A1D221EABAD940BEC053508CD27E63BA4CA97FD653F0D102D
2B7C6EB3A0466CEFE5210979A18FAA66BE4E03733E3EF464284210CE93EBC317
83E4739B576500ADBDD6E2B2411AFD7F1F1047F47883359EE2B5AEEBA42065E9
BC516843B433B7F3C39EC301FFB65F85A87B648A58C78748BA48E0FBABA14F1A
FA73E22391AD1D0DECEEE102A436C08D145639BC7BE1D6ADAF0D3CF8AEC95EDE
9449F134E37B1D01A11B703087A9611743E2EC204EA0883B4272A2E6FFFE12A1
87496F1189B29A59B2A77880F18FEDDC373F539983CEC224830F6E41876B63BC
C65722CA958CABAD3A3E384B6993EAD43916A6529971CBCB06166030EEF983EF
33249751102919EFC0E88AF09C8E66A6F27EE257E88F34E6654EDFB384355B43
C06B19887EB524D6E65C5726EB9D729F30C59CEFE59FA506F8812F8DA2BE72F0
827246FCA44E4B24F274292909EE79FE294598B8493F9991DE93CAFECA0E6D8B
2B71A0DA0F78DC73FAC34D7FDFE36BEA6C08036BCEEA380E995D1CF13034430E
DC64C56AE6B807FEA42425DF05E7298ADF77894331ED25BF6955E13DA0B4DD03
D61C4BC9EFA3BEE0D63E0DC4E6F253A60B2B187AA94ADFB86841E16F7904932F
13EFD1599DE95328D3083E90EE2A3288EBFB3C67AF740B3FA1B24F6630F31E90
67F04104091A0C1E303470EE1E8AAD274E14259A48571872D19BA02C7737A61E
A5617D5E1DCE750E1776BB01269470065341F552F40503BD7F3EBAF9CCA6B496
C88881146DCE79E0F00FD9FAFBCB60BCC04DD99D4FA6EAAF656B56AA5C9AFE01
59797AF521C0D3FBFA39FFCF7966BC13EB9C0BAD7D972363462466BDBA54667A
D62FFA6362387827D40D4BA859C4668A7EAC336373B5A648E0177C15A05770C2
E0A7E510533AB3E47E6BDCE13F09BDF18D93C8599D05340C6A561DF3A56C0542
35CB5A713FDF778B55EABC55ED2D98DA057A876FB35F46EFA6A949A75CF0154D
E33DCEB8DC36446FB24D63F66122E702CD92ABCC29919298D7E8EC3D47A1B711
0B8BE409368684A138970726F7C29944270D4685080BFEF325C6AE3E80A85AFC
91E183960EC2B89D57EEB4E8BF20057979A98A4A121E37A182E84F87163A97D1
6C6DE238383AC59698E080A16B9373F48144954ABF8991B61F0FB7E95ACCD3BB
D20D6521C76934BF679E354989D7F43374E15A1242DD67E6E21198F23F53001D
92DFF3E0E4CD301F5FE888E50101DB2CDA91647BE595260BB70C0A65F5F58529
409C8B809B843842A7FCF81F17E9EDBD0E399ED8786C56C0650955F2FE89CF5E
0C032E81DE37763696E0A26CC105BCCF12CF0EF40CC05C5AA1DA521B049E9F55
5E17A0247E2D65E138F9BD5A6CA0873B2C510AF449C9E8DAEC14FC13ECF35297
57989E8C72C8BF8F25F79D56C5D30E1DF15E4F183ADD9886E6B70C0C19FF70E8
B38A5AD1EE0D2CE32C60102BE03756BAEDEE0E1F2688E665710F486AF21FB3F8
27BA901A6DB8F058B9A0E40616DDBCFC5195EDD33AA19029F595D308687356AD
1C50C289B13FB2EF3DE18E81E2392BA9A2A24773E1E91EFE99477ADC3F692717
3E205378548B89F69180A539FCA3D080DE8FDF090568A520539FE2BAD0852236
B1293F86BB5406838254F8B53A65AA522E7EF3FCC282C91D7F5A51319DA9FE8E
96ACF82AD596D6BCDEA7680537F7499121E65A88DE5D265331F92EC2FF4C76C0
97A96EE6E6DA5526D6A1BE399424E759077DE5916A5E45718616649B4A7048C4
3E0A36339D11BEF6673B88B8F7708D4C6114E97EAC5B04FD1B2CACF97AFD914B
8FB73DAC87B64D99E81ED47113934F3CC47F20AF6AC87A3F083D425D60617D6F
8A6CA8DE60BE93F90304CBC79643BE6362DBD2FCA4A6E5CBDBA53EBDF8E63757
694520F394EC28EBE10442617893047A8099429D3EFD33BE13F1E9A959FB0A26
A8B9428DFA1714DFD918D9857C445D7C0DD3BB0AB14C3EC43732B77D9CA0E5B0
3D9D6C4521D0C4FF4BE0A83AE987ACF00DD5B98726073C5E069241136829D647
ADBF8C46EF8ABB294CE46A9E42C77AFB39BEB4EE5FAB55643208F856643F1FC1
3777AF936E39BE63B26AC15B85E76D040A7C739F0EE29F7A32D7742CC2D4A691
FE3201E8F9931AD1065AF850506DDF9FAE5D9AF73241A9A8301D4C0BB4F95B55
454FE7AFA29CDDEF5E7AA262C4ECCE1F9AA34AE3DADB358363106514429C9D20
77FCEBA8069C7AEAD5D846828AD2FE41D83EA48762A2164359CC18A84B9DC60D
4314BB52CF2A3A18DBAE5F67A4781FE53930BB114C00EA4948C6037BB1F87183
3FD4F52DA87027CA3CC2BE2DC3E39756783B2891C34F1EB9246FC0C8D9A26C21
20A9508A84E02AD65C71856CB3171A5B721AEED75D8566DB724BC619AA6B87E9
58E5AEE6B3C525485FE011C7E0D4786C33DA44E1D32FE7B114C105A187E4AD41
6C2DA4F5AB6BA2C9470FFB761EAA3BE7B75AE249C49FE4D42D985945D1E40B82
B7C7DE8CFD623701F9F605FBC6CB48FA3FE4790C80DC3895D25E2F0EA1E333E4
13B27501361CDAFC36EB5BDA14E186C243C860D9146809E1EB3419FF364463A0
5C3BFCB44D523FF47AEB55E074E03B40AA43C5A5B56B2E64E6DAE257137A10BD
C34F34DA91337EF577C4A1A7A931B1AD2BCD53BC8F13B5157E6C23C85BE7D3C1
C7DF2857DA961EF3FC8A39439F88DF82D77FC1D98A5FAF42747E2925812BC7F9
2548C723F727B41958FCD9968FA1F488E919992E016E8CF277C55C1D61F981B5
F092316ABC25013EB302DD8AE5DDDA668774DD0F6A00DDF817D883C97E89ED5C
D37A5DAE3F78790B956D75D43A0BC56B2A36A3395A13C05185EAE2B2B915DCA5
D50AC2513F17BF5EA817B34D486379663C66345DD0E16E8784C7CAB58F621F41
648BB24DFC7686108ED5BC9058833705632D7D21B4BF72FCD1319A65406AE895
84C3B69ECAD54B811E59F297EBDF8EFC0CF788AA59EE165F328B037A61E7825E
0F2D542F06AF57BD1D36F219F7352E9812110B84AD7B8E7AFA6E40CD0D350C99
3FBABB682FE69863D22670707AD6A5F8787898E5F919EFF2A6136405C9D839BF
5CE61F77BC4BEDAD52287812F76A878B798879CD7F367F8173F882A496B39EF1
73E98E511444484883A0F02FB4B39238B69CBFCE650E794F62F068AEC584D8E9
EAD8C1970C9A89BC930E84F296FB208154FA1212201F1288F879BEC89B51EDAC
1CE61B08F12627B40E7564D20B187BE4CA8C83E572D084F55568C2A16ECB2A6A
4C3BD281671EFA223381584E31A91FC99EC219013CA462FD5BB7DCF1CEC9B5C7
1D0890A636B324368F388D7AAB1B550854386D3A3B13F17960F0A422D7AE960A
DEF92A72A65B9A1C1B397781329835EA206359A5EDF76C4703C4D575A706CE38
7BB24FFC1A82F75E954DDCDDE54FD075C35BD006939CFE37E238599BCD612076
275BDB833CF633E394343043D7A73D179635B8EA82FC952C1DA772BF55EB33DD
D60B69A47A8C436F72EE86A68A74857AE66FBC9FEAE9F741C8A225CFB08BB04D
5C38CE461D6FA6D70C8C704072698E4D3CFC9B46A590B4247189A0AB6937CFAB
E940D44DB171316ACC9E3092E00F1044F063528ADD369F43D440A0003DD01992
298883F38857F730F46357C8FBCB650375157968562D4C0BB7405DA87A675451
095CCDACB9BE5ED83038CA737030C405320F5008A5C04B2CB450321E86C514BC
EB613AD6871A196E68229A25333B74840FF36D52BE6D23BEF557656454F72080
19C94C03F37A5594970A228830639F8E7E3EE8EEC9CCAF7DC0BADD3BFF085B61
2CE8868C1CF7905FD896A525A3AEA34A7150D855F4A01C204981527AA7239BF3
AC077D49DD71DD9FA70A5A0E815822318FF299F696DE0429D2E84F672EF4D2FD
3DCAB5AAF5AD68004DE7D511A7AA7591AA724D8541BA38FC43CA4F59B3F3A2D5
A4DA05BE7DE2B3278983522B7AA1D11DB94102FB88F6319BCFC8BBF2B42ED310
C112BD83C0B23F9B573C5071DB435ABF7653D4E191CA84B3A7BD7B2F92DED104
AD921D15B006676BFCC790598D747395BE885E484BCF94106518DE677E3D5CFB
CD1D84F7343CC105FA75936F5EB368753E34D357DB8DDD05ADA032413CD03A2A
651A6E2932A0783E656FFEADAE5A8FC157FA1007DF73FC4177864EDBA7AFC9DE
C1F5E066D53F2B7E74F4BBDCC8CB50A469C71B1BD4EE10449DA10F22F36DC4D2
71B602EEE1919743A27D8C11288E75461390E2E7EEAE7F66E9308BD722F4B11A
357C8B84BA7B0D60460A9A75D3075C33C8E879D751187558084D9CD408EFD526
FB56266FBA682AF366C1AA8656DD2081150DD0E20298066B78B7BB68654E3FFF
62BFAAA47B442820517C4C7A3919164C8EF8210E87F80346655B75CE8BC65873
4CB89D6718F69F02D653AEC724534DF1B15FA2EFD2CDCEFCB684F78E2D5567D6
CBBFC4CD1F0BA44D994ABCE5E05866ABED04E95DCBCEF0049BF03A09000FE8D9
F9104341208E10F2A1E2020C492497BACB4DB5153675BC62091861010B2A74A9
DB7FDA68396E9B9022DFBC20C23FDD9723C6E3625C773F5C6B21337479B9E980
B24C2F36F6430526ACE47406FBBF51371A179591CD11ADD10E94A499F5F57AA4
E25FB601B3825D0ABB61206904ACB5A80898B6A66EE4FD9BC2B8F50C3BFC8FCA
8912F2FE6BBC3FE44652767533BD8729CC0457B09A1010E24E19729EA7D00C79
6AAB02E0C6677020AE3F1C51E55C77933B4081CE118C77C7FA1250BD2F67CE66
36F4B3685B08F5249C4D06141A73C4F86F98
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(E:/Dropbox/GK-BSP/FA - Funktionale Abhaengigkeiten/FA 1.1/FA 1.1 Gesamtdokument.dvi)
@start /Fa 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fb 135[530 13[381
106[{ enclmmathit ReEncodeFont }2 885.568 /LMMathItalic8-Regular
rf /Fc 173[959 82[{}1 1328.35 /MSBM10 rf /Fd 185[723
4[830 15[553 2[307 46[{ enclmec ReEncodeFont }4 1106.96
/LMRoman10-Regular rf /Fe 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Ff 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fg 255[732{
 enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fh 200[470 470 470 470 470 470 470 49[{ enclmrm ReEncodeFont }7
885.568 /LMRoman8-Regular rf /Fi 143[1107 8[664 664 51[886
16[1328 32[1033{ enclmmathsy ReEncodeFont }6 1328.35
/LMMathSymbols10-Regular rf /Fj 162[361 1[361 29[1012
1[361 361 4[650 650 650 650 650 650 6[506 506 40[{
 enclmrm ReEncodeFont }13 1328.35 /LMRoman12-Regular
rf /Fk 134[634 739 17[641 14[1228 18[1080 68[{
 enclmmathit ReEncodeFont }5 1328.35 /LMMathItalic12-Regular
rf /Fl 650 2[723 5[650 17[650 13[1012 91[578 686 686
939 686 723 506 513 506 1[723 650 723 1084 361 686 397
361 723 650 397 578 723 578 723 650 6[795 2[1336 2[939
723 1[1012 1[1012 1[1192 813 1011 1[469 1[1021 849 885
993 2[975 1[614 7[650 650 650 650 650 650 650 1[650 361
434 361 2[506 506 6[361 5[759 27[{ enclmec ReEncodeFont }61
1328.35 /LMRoman12-Regular rf /Fm 3[1196 23[1046 110[1196
837 849 879 1136 1196 1076 1196 1793 598 1136 1[598 1196
1076 1[982 2[1196 1046 6[1315 2[2223 2[1497 1196 1605
4[2041 1293 2[801 1[1691 1353 1412 1[1554 1530 1625 1[1016
9[1076 1076 1076 1076 1076 1076 1[598 717 45[{ enclmec ReEncodeFont }42
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)717 b(1.1)g(-)h(1)f(F)-179 b(unktionsgraph)713 b(-)718
b(MC)g(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p
0 TeXcolorgray 651 w(Im)434 b(F)-108 b(olgenden)433 b(sind)g
(Darstellungen)h(v)-36 b(on)433 b(Kurv)-36 b(en)434 b(und)e(Geraden)h
(gegeb)36 b(en.)921 9338 y(Kreuze)1265 b(diejenige\(n\))g
(Abbildung\(en\))e(an,)j(die)f(Graph\(en\))e(einer)i(F)-108
b(unktion)921 11330 y Fk(f)511 b Fj(:)369 b Fk(x)g Fi(!)h
Fk(f)142 b Fj(\()p Fk(x)p Fj(\))433 b Fl(ist/sind!)p
0 TeXcolorgray 0 TeXcolorgray 4702 17316 17100 45 v 4702
29557 45 12242 v 5411 28612 a
 currentpoint currentpoint translate 0.4616 0.4616 scale neg exch neg
exch translate
 5411 28612 a 5411 28612
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 260.62679 a add def
/d 0.0 a add neg def /h 202.58337 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411 28612 a 10261 23888 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 216.80975  0 -43.81703  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -43.81703
 216.80975  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-66.01056  def /maxTickline 159.90427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.90427
0.0 -66.01056   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 216.80975
0.0 -43.81703 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.90427  0 -66.01056  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -66.01056
 159.90427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-43.81703  def /maxTickline 216.80975  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.90427
0.0 -66.01056   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 216.80975
0.0 -43.81703 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9016 21024 a Fh(1)9016 17874
y(2)9016 14724 y(3)9016 11575 y(4)9016 8425 y(5)8284
27277 y Fg(\000)p Fh(1)8284 30426 y Fg(\000)p Fh(2)13176
25233 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)-26033 b Fg(\000)p
Fh(1)10261 23888 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.5400000000000018 def /x1 7.6199999999999966
def /dx x1 x sub 199 div def /F@pstplot (0.004464285714285714*x^(4.0)-0.019345238095238096*x^(3.0)-0.3273809523809524*x^(2.0)+1.6964285714285714*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
10261 23888 a
tx@Dict begin  { 99.5846 128.60652 } PutCoor PutBegin  end
 10261 23888 a 922 x Fk(f)10261 23888 y
tx@Dict begin  PutEnd  end

10261 23888 a 34261 28612 a
currentpoint initclip moveto
 34261 28612 a 5411 28612
a
 currentpoint currentpoint translate 1 0.4616 div 1 0.4616 div scale
neg exch neg exch translate
 5411 28612 a 19392 29557 45 12242 v 1 0 0 TeXcolorrgb
20101 23769 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21758 29557 V 4702 29601 17100 45 v 4702
44434 45 14833 v 5411 43489 a
 currentpoint currentpoint translate 0.59554 0.59554 scale neg exch
neg exch translate
 5411 43489 a 5411 43489
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.0142 a add def
/d 0.0 a add neg def /h 196.32419 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411 43489 a 13474 32843 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 129.17526  0 -72.83894  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -72.83894
 129.17526  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.17041  def /maxTickline 100.15378  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.15378
0.0 -96.17041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.17526
0.0 -72.83894 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 100.15378  0 -96.17041  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.17041
 100.15378  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 129.17526  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.15378
0.0 -96.17041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.17526
0.0 -72.83894 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 12229 29979 a Fh(1)12228 26829
y(2)12228 23679 y(3)11497 36232 y Fg(\000)p Fh(1)11497
39381 y Fg(\000)p Fh(2)11497 42531 y Fg(\000)p Fh(3)16388
34189 y(1)2680 b(2)f(3)h(4)-16584 b Fg(\000)p Fh(1)-4352
b Fg(\000)p Fh(2)13474 32843 y
tx@Dict begin  { 50.07666 93.89413 } PutCoor PutBegin  end
 13474 32843 a 922 x Fk(f)13474
32843 y
tx@Dict begin  PutEnd  end
 13474 32843 a 13474 32843 a
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 13474 32843 a 13474
32843 a
tx@Dict begin  { 0.28436 0.0 } PutCoor PutBegin  end
 13474 32843 a 13474 32843 a
tx@Dict begin ps@rot  RotBegin  end
 13474 32843 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0 360 113.89128 85.35866
0.0 0.0  0 true Ellipse  closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 13474 32843 a
tx@Dict begin RotEnd  end
 13474 32843 a
13474 32843 a
tx@Dict begin  PutEnd  end
 13474 32843 a 27773 43489 a
currentpoint initclip moveto
 27773 43489
a 5411 43489 a
 currentpoint currentpoint translate 1 0.59554 div 1 0.59554 div scale
neg exch neg exch translate
 5411 43489 a 19392 44434 45 14833 v 21758
44434 V 4702 44478 17100 45 v 4702 58728 45 14251 v 5411
57783 a
 currentpoint currentpoint translate 0.63297 0.63297 scale neg exch
neg exch translate
 5411 57783 a 5411 57783 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 190.0641 a add def
/d 0.0 a add neg def /h 176.4069 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411 57783 a 12529
55263 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 125.76106  0 -64.30304  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -64.30304
 125.76106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.76227  def /maxTickline 153.64464  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.64464  0 -22.76227  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -22.76227
 153.64464  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-64.30304  def /maxTickline 125.76106  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11284 52399 a Fh(1)11284 49249 y(2)11284 46100 y(3)11284
42950 y(4)11284 39801 y(5)15443 56609 y(1)2680 b(2)f(3)h(4)-16584
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)12529 55263 y
tx@Dict begin  { 58.61258 90.4795 } PutCoor PutBegin  end

12529 55263 a 923 x Fk(f)12529 55263 y
tx@Dict begin  PutEnd  end
 12529 55263 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 153.64464 56.90549 -22.76227
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26450 57783 a
currentpoint initclip moveto

26450 57783 a 5411 57783 a
 currentpoint currentpoint translate 1 0.63297 div 1 0.63297 div scale
neg exch neg exch translate
 5411 57783 a 19392 58728 45
14251 v 21758 58728 V 4702 58772 17100 45 v 24758 17316
V 24758 31566 45 14251 v 25466 30621 a
 currentpoint currentpoint translate 0.63297 0.63297 scale neg exch
neg exch translate
 25466 30621 a
25466 30621 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 190.0641 a add def
/d 0.0 a add neg def /h 176.4069 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 30621 a 32584 28101 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 125.76106  0 -64.30304  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -64.30304
 125.76106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.76227  def /maxTickline 153.64464  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.64464  0 -22.76227  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -22.76227
 153.64464  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-64.30304  def /maxTickline 125.76106  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 31339 25237 a
Fh(1)31339 22088 y(2)31339 18938 y(3)31339 15788 y(4)31339
12639 y(5)35499 29447 y(1)2679 b(2)h(3)g(4)-16584 b Fg(\000)p
Fh(1)-4352 b Fg(\000)p Fh(2)32584 28101 y
tx@Dict begin  { 59.18175 81.37486 } PutCoor PutBegin  end
 32584 28101
a 923 x Fk(f)32584 28101 y
tx@Dict begin  PutEnd  end
 32584 28101 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.26 def /x1 4.42 def /dx x1 x
sub 49 div def /F@pstplot ((--2.-0.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 46506 30621 a
currentpoint initclip moveto
 46506 30621 a
25466 30621 a
 currentpoint currentpoint translate 1 0.63297 div 1 0.63297 div scale
neg exch neg exch translate
 25466 30621 a 39448 31566 45 14251 v 1 0 0
TeXcolorrgb 40156 24773 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 41813 31566 V 24758 31610
17100 45 v 24758 44997 45 13388 v 25466 44053 a
 currentpoint currentpoint translate 0.62054 0.62054 scale neg exch
neg exch translate
 25466
44053 a 25466 44053 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.8699 a add def
/d 0.0 a add neg def /h 167.3765 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 44053 a 29774 39945 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 154.95187  0 -38.91803  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -38.91803
 154.95187  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.10716  def /maxTickline 130.26933  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.26933
0.0 -37.10716   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 154.95187
0.0 -38.91803 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 130.26933  0 -37.10716  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.10716
 130.26933  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-38.91803  def /maxTickline 154.95187  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.26933
0.0 -37.10716   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 154.95187
0.0 -38.91803 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28529 37081 a
Fh(1)28529 33931 y(2)28529 30782 y(3)28529 27632 y(4)27797
43334 y Fg(\000)p Fh(1)32689 41291 y(1)2679 b(2)h(3)g(4)f(5)-19733
b Fg(\000)p Fh(1)29774 39945 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.367814021398395 def /x1 2 def
/dx x1 x sub 199 div def /F@pstplot (x)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 5.445940009284722 def
/dx x1 x sub 199 div def /F@pstplot (0.5*x+1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 29774
39945 a
tx@Dict begin  { 83.57515 88.20367 } PutCoor PutBegin  end
 29774 39945 a 922 x Fk(f)29774 39945 y
tx@Dict begin  PutEnd  end
 29774
39945 a 46927 44053 a
currentpoint initclip moveto
 46927 44053 a 25466 44053 a
 currentpoint currentpoint translate 1 0.62054 div 1 0.62054 div scale
neg exch neg exch translate
 25466
44053 a 39448 44997 45 13388 v 1 0 0 TeXcolorrgb 40156
38636 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 41813 44997 V 24758 45042 17100 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 62800 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(1.1)g(-)h(2)f(Reelle)g(F)
-179 b(unktion)714 b(-)k(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fl(2.)p 0 TeXcolorgray 651 w(Eine)613 b(reelle)g(F)-108
b(unktion)612 b Fk(f)816 b Fj(:)675 b([)8 b Fi(\000)p
Fj(3;)221 b(3])675 b Fi(!)g Fc(R)613 b Fl(kann)g(in)g(einem)f(K)-36
b(o)36 b(ordinatensystem)614 b(als)921 6792 y(Graph)432
b(dargestellt)i(w)-36 b(erden.)921 11330 y(Kreuze)400
b(die)h(b)36 b(eiden)400 b(Diagramme)h(an,)g(die)g(einen)f(m\366glic)
-36 b(hen)401 b(Graphen)e(der)h(F)-108 b(unktion)399
b Fk(f)921 13322 y Fl(zeigen.)p 15229 14288 15926 45
v 15229 25338 45 11050 v 15937 24393 a
 currentpoint currentpoint translate 0.553 0.553 scale neg exch neg
exch translate
 15937 24393 a
15937 24393 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 198.37946 a add def
/d 0.0 a add neg def /h 149.63478 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15937 24393 a 26712 16315 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.04422  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 101.04422  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.97658  def /maxTickline 76.6582  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.6582
0.0 -72.97658   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.04422
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 76.6582  0 -72.97658  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.97658
 76.6582  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 101.04422  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.6582
0.0 -72.97658   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.04422
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25467 13451 a
Fh(1)25467 10301 y(2)24735 19704 y Fg(\000)p Fh(1)24735
22853 y Fg(\000)p Fh(2)29626 17660 y(1)2680 b(2)g(3)-13435
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)26712
16315 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26712 16315 a 26712 16315 a
tx@Dict begin  { 101.04422 76.6582 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 26712 16315 a 26712
16315 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26712 16315 a 26369 16601 a Fl(x)26712 16315
y
tx@Dict begin  PutEnd  end
 26712 16315 a 26712 16315 a
tx@Dict begin  PutEnd  end
 26712 16315 a 26712 16315
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26712 16315 a 26712 16315 a
tx@Dict begin  { 0.0 0.0 pop 101.04422 76.6582 exch pop } PutCoor PutBegin
 end
 26712 16315 a 26712 16315
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26712 16315 a 25664 16647 a Fl(f\(x\))26712 16315 y
tx@Dict begin  PutEnd  end

26712 16315 a 26712 16315 a
tx@Dict begin  PutEnd  end
 26712 16315 a 26712 16315
a
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 26712 16315 a 26712 16315 a
tx@Dict begin  { -0.12936 0.0 } PutCoor PutBegin  end
 26712 16315 a 26712 16315
a
tx@Dict begin ps@rot  RotBegin  end
 26712 16315 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0 360 84.88803 47.18477
0.0 0.0  0 true Ellipse  closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
26712 16315 a
tx@Dict begin RotEnd  end
 26712 16315 a 26712 16315 a
tx@Dict begin  PutEnd  end
 26712 16315
a 26712 16315 a
tx@Dict begin  { -66.16122 55.1198 } PutCoor PutBegin  end
 26712 16315 a 922 x Fk(f)26712 16315
y
tx@Dict begin  PutEnd  end
 26712 16315 a 37897 24393 a
currentpoint initclip moveto
 37897 24393 a 15937 24393
a
 currentpoint currentpoint translate 1 0.553 div 1 0.553 div scale
neg exch neg exch translate
 15937 24393 a 28745 25338 45 11050 v 31110 25338 V
15229 25382 15926 45 v 15229 37560 45 12179 v 15937 36615
a
 currentpoint currentpoint translate 0.55554 0.55554 scale neg exch
neg exch translate
 15937 36615 a 15937 36615 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 197.4621 a add def
/d 0.0 a add neg def /h 167.30225 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15937 36615 a 26961 27356
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 97.8775  0 -99.5846  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 97.8775  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.65112  def /maxTickline 83.65112  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.65112
0.0 -83.65112   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 97.8775
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.65112  0 -83.65112  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.65112
 83.65112  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 97.8775  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.65112
0.0 -83.65112   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 97.8775
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
25716 24491 a Fh(1)25716 21342 y(2)24984 30744 y Fg(\000)p
Fh(1)24984 33894 y Fg(\000)p Fh(2)29875 28701 y(1)2680
b(2)g(3)-13435 b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f
Fg(\000)p Fh(3)26961 27356 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26961 27356 a 26961 27356
a
tx@Dict begin  { 97.8775 83.65112 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 26961 27356 a 26961 27356 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26961 27356 a 26618 27642
a Fl(x)26961 27356 y
tx@Dict begin  PutEnd  end
 26961 27356 a 26961 27356 a
tx@Dict begin  PutEnd  end
 26961
27356 a 26961 27356 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26961 27356 a 26961 27356 a
tx@Dict begin  { 0.0 0.0 pop 97.8775 83.65112 exch pop } PutCoor PutBegin
 end
 26961
27356 a 26961 27356 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26961 27356 a 25913 27688 a Fl(f\(x\))26961
27356 y
tx@Dict begin  PutEnd  end
 26961 27356 a 26961 27356 a
tx@Dict begin  PutEnd  end
 26961 27356 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3 def /x1 3 def /dx x1 x sub 199
div def /F@pstplot (0.1130972583234016*x^(3.0)+0.3307862988886959*x^(2.0)-1.0255164282445268*x-2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 26961 27356 a
tx@Dict begin  { -81.94403 42.67911 } PutCoor PutBegin  end
 26961 27356 a
922 x Fk(f)26961 27356 y
tx@Dict begin  PutEnd  end
 26961 27356 a 37796 36615 a
currentpoint initclip moveto

37796 36615 a 15937 36615 a
 currentpoint currentpoint translate 1 0.55554 div 1 0.55554 div scale
neg exch neg exch translate
 15937 36615 a 28745 37560
45 12179 v 1 0 0 TeXcolorrgb 29454 31803 a Ff(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 31110 37560
V 15229 37605 15926 45 v 15229 48792 45 11188 v 15937
47847 a
 currentpoint currentpoint translate 0.5218 0.5218 scale neg exch neg
exch translate
 15937 47847 a 16371 47847 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.3145 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 16371 47847 a 27146
38828 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 108.97926  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 108.97926  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 108.97926  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
25901 35964 a Fh(1)25900 32814 y(2)25168 42217 y Fg(\000)p
Fh(1)25168 45367 y Fg(\000)p Fh(2)30060 40174 y(1)2680
b(2)f(3)-13434 b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)h
Fg(\000)p Fh(3)27146 38828 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 27146 38828 a 27146 38828
a
tx@Dict begin  { 108.97926 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 27146 38828 a 27146 38828 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 27146 38828 a 26803 39114
a Fl(x)27146 38828 y
tx@Dict begin  PutEnd  end
 27146 38828 a 27146 38828 a
tx@Dict begin  PutEnd  end
 27146
38828 a 27146 38828 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 27146 38828 a 27146 38828 a
tx@Dict begin  { 0.0 0.0 pop 108.97926 79.49193 exch pop } PutCoor
PutBegin  end
 27146
38828 a 27146 38828 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 27146 38828 a 26098 39160 a Fl(f\(x\))27146
38828 y
tx@Dict begin  PutEnd  end
 27146 38828 a 27146 38828 a
tx@Dict begin  PutEnd  end
 27146 38828 a 27146
38828 a
tx@Dict begin  { 32.46172 78.35835 } PutCoor PutBegin  end
 27146 38828 a 923 x Fk(f)27146 38828 y
tx@Dict begin  PutEnd  end
 27146
38828 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 79.49193 28.45274 -81.47862
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t 0.0 def /t1 1.5707963267948966
def /dt t1 t sub 49 div def /F@pstplot (0.5976207839914188*cos(t)+1.|0.5976207839914188*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     28.45274 0.0 lineto closepath
gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.39215 0  setrgbcolor   0 360 1.13358
1.13358 35.52554 7.0728  0 true Ellipse  closepath  gsave 0 0.39215
0  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
39209 47847 a
currentpoint initclip moveto
 39209 47847 a 15937 47847 a
 currentpoint currentpoint translate 1 0.5218 div 1 0.5218 div scale
neg exch neg exch translate
 15937 47847
a 28745 48792 45 11188 v 31110 48792 V 15229 48837 15926
45 v 15229 60201 45 11365 v 15937 59256 a
 currentpoint currentpoint translate 0.53171 0.53171 scale neg exch
neg exch translate
 15937 59256
a 15937 59256 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.3145 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15937 59256 a 26712 50237 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 108.97926  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 108.97926  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 108.97926  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25467 47372 a
Fh(1)25467 44223 y(2)24735 53625 y Fg(\000)p Fh(1)24735
56775 y Fg(\000)p Fh(2)29626 51582 y(1)2680 b(2)g(3)-13435
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)26712
50237 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26712 50237 a 26712 50237 a
tx@Dict begin  { 108.97926 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26712 50237 a 26712
50237 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26712 50237 a 26369 50522 a Fl(x)26712 50237
y
tx@Dict begin  PutEnd  end
 26712 50237 a 26712 50237 a
tx@Dict begin  PutEnd  end
 26712 50237 a 26712 50237
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26712 50237 a 26712 50237 a
tx@Dict begin  { 0.0 0.0 pop 108.97926 79.49193 exch pop } PutCoor
PutBegin  end
 26712 50237 a 26712 50237
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26712 50237 a 25664 50569 a Fl(f\(x\))26712 50237 y
tx@Dict begin  PutEnd  end

26712 50237 a 26712 50237 a
tx@Dict begin  PutEnd  end
 26712 50237 a 26712 50237
a
tx@Dict begin  { -60.49333 55.1198 } PutCoor PutBegin  end
 26712 50237 a 922 x Fk(f)26712 50237 y
tx@Dict begin  PutEnd  end
 26712 50237
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.43246 39.8163 40.39676 9.20927
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.1737 -20.83116 8.08916 64.75543
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38776 59256 a
currentpoint initclip moveto
 38776 59256 a
15937 59256 a
 currentpoint currentpoint translate 1 0.53171 div 1 0.53171 div scale
neg exch neg exch translate
 15937 59256 a 28745 60201 45 11365 v 31110
60201 V 15229 60245 15926 45 v 15229 71768 45 11524 v
15937 70823 a
 currentpoint currentpoint translate 0.54063 0.54063 scale neg exch
neg exch translate
 15937 70823 a 15937 70823 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.91377 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15937 70823
a 26712 61804 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 105.57854  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 105.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.57854
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 105.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.57854
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25467 58940 a Fh(1)25467 55790
y(2)24735 65193 y Fg(\000)p Fh(1)24735 68342 y Fg(\000)p
Fh(2)29626 63150 y(1)2680 b(2)g(3)-13435 b Fg(\000)p
Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)26712 61804
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26712 61804 a 26712 61804 a
tx@Dict begin  { 105.57854 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26712 61804 a 26712 61804
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26712 61804 a 26369 62090 a Fl(x)26712 61804 y
tx@Dict begin  PutEnd  end
 26712
61804 a 26712 61804 a
tx@Dict begin  PutEnd  end
 26712 61804 a 26712 61804 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26712
61804 a 26712 61804 a
tx@Dict begin  { 0.0 0.0 pop 105.57854 79.49193 exch pop } PutCoor
PutBegin  end
 26712 61804 a 26712 61804 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26712
61804 a 25664 62136 a Fl(f\(x\))26712 61804 y
tx@Dict begin  PutEnd  end
 26712 61804
a 26712 61804 a
tx@Dict begin  PutEnd  end
 26712 61804 a 26712 61804 a
tx@Dict begin  { -73.5297 72.69046 } PutCoor PutBegin  end
 26712 61804
a 922 x Fk(f)26712 61804 y
tx@Dict begin  PutEnd  end
 26712 61804 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.43246 73.25748 -28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 9.20885 -28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
26712 61804 a
tx@Dict begin  { 30.76114 -17.997 } PutCoor PutBegin  end
 26712 61804 a -172 x Fb(j)26712 61804 y
tx@Dict begin  PutEnd  end

26712 61804 a 38399 70823 a
currentpoint initclip moveto
 38399 70823 a 15937 70823
a
 currentpoint currentpoint translate 1 0.54063 div 1 0.54063 div scale
neg exch neg exch translate
 15937 70823 a 28745 71768 45 11524 v 1 0 0 TeXcolorrgb
29454 66339 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 31110 71768 V 15229 71813 15926 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 75841 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(1.1)g(-)h(1001)f(W)-179
b(as)716 b(ist)h(eine)g(F)-179 b(unktion?)714 b(-)k(MC)g(-)f(eSquirrel)
p 0 TeXcolorgray -741 4800 a Fl(3.)p 0 TeXcolorgray 651
w(W)-108 b(elc)-36 b(he)334 b(der)f(hier)g(dargestellten)h
(Zusammenh\344nge)f(sind)g(Graphen)f(reeller)i(F)-108
b(unktionen?)921 6792 y(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(Zusammenh\344nge)i(an!)p 0 TeXcolorgray
0 TeXcolorgray 5654 12705 15197 45 v 5654 26482 45 13778
v 6362 25538 a
 currentpoint currentpoint translate 0.50058 0.50058 scale neg exch
neg exch translate
 6362 25538 a 6362 25538 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.99757 a add def
/d 0.0 a add neg def /h 214.53348 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6362 25538 a
16882 13254 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 110.96552  0 -95.03206  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.03206
 110.96552  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-110.96552  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 103.56796  0 -110.96552  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -110.96552
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 110.96552  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15637 10390 a Fh(1)15636 7240
y(2)15636 4091 y(3)14905 16643 y Fg(\000)p Fh(1)14905
19793 y Fg(\000)p Fh(2)14905 22942 y Fg(\000)p Fh(3)19796
14600 y(1)2680 b(2)f(3)-13434 b Fg(\000)p Fh(1)-4352
b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)16882 13254 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16882
13254 a 16882 13254 a
tx@Dict begin  { 110.96552 103.56796 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16882 13254 a 16882 13254 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16882
13254 a 16539 13540 a Fl(x)16882 13254 y
tx@Dict begin  PutEnd  end
 16882 13254
a 16882 13254 a
tx@Dict begin  PutEnd  end
 16882 13254 a 16882 13254 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16882 13254
a 16882 13254 a
tx@Dict begin  { 0.0 0.0 pop 110.96552 103.56796 exch pop } PutCoor
PutBegin  end
 16882 13254 a 16882 13254 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 16882 13254
a 16539 13411 a Fl(y)16882 13254 y
tx@Dict begin  PutEnd  end
 16882 13254 a 16882
13254 a
tx@Dict begin  PutEnd  end
 16882 13254 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 103.56796 56.90549
-110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
16882 13254 a
tx@Dict begin  { 64.30304 69.99393 } PutCoor PutBegin  end
 16882 13254 a 1 0 0 TeXcolorrgb -258 x
Fk(f)17523 13195 y Fh(1)p 0 TeXcolorgray 16882 13254
a
tx@Dict begin  PutEnd  end
 16882 13254 a 29165 25538 a
currentpoint initclip moveto
 29165 25538 a 6362 25538
a
 currentpoint currentpoint translate 1 0.50058 div 1 0.50058 div scale
neg exch neg exch translate
 6362 25538 a 18441 26482 45 13778 v 20806 26482 V 5654
26527 15197 45 v 5654 40083 45 13556 v 6362 39138 a
 currentpoint currentpoint translate 0.49124 0.49124 scale neg exch
neg exch translate
 6362
39138 a 6796 39138 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.99757 a add def
/d 0.0 a add neg def /h 214.53348 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6796 39138 a 17315 26854 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 110.96552  0 -95.03206  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.03206
 110.96552  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-110.96552  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 103.56796  0 -110.96552  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -110.96552
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 110.96552  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16070 23990 a
Fh(1)16070 20840 y(2)16070 17691 y(3)15338 30243 y Fg(\000)p
Fh(1)15338 33393 y Fg(\000)p Fh(2)15338 36542 y Fg(\000)p
Fh(3)20230 28200 y(1)2679 b(2)h(3)-13434 b Fg(\000)p
Fh(1)-4352 b Fg(\000)p Fh(2)g Fg(\000)p Fh(3)17315 26854
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17315 26854 a 17315 26854 a
tx@Dict begin  { 110.96552 103.56796 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 17315 26854 a 17315 26854
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 17315 26854 a 16972 27140 a Fl(x)17315 26854 y
tx@Dict begin  PutEnd  end
 17315
26854 a 17315 26854 a
tx@Dict begin  PutEnd  end
 17315 26854 a 17315 26854 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17315
26854 a 17315 26854 a
tx@Dict begin  { 0.0 0.0 pop 110.96552 103.56796 exch pop } PutCoor
PutBegin  end
 17315 26854 a 17315 26854 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 17315
26854 a 16972 27011 a Fl(y)17315 26854 y
tx@Dict begin  PutEnd  end
 17315 26854
a 17315 26854 a
tx@Dict begin  PutEnd  end
 17315 26854 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 91.04869 103.56796 -51.21501
-110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 17315 26854 a
tx@Dict begin  { 64.30304 55.76756 } PutCoor PutBegin  end
 17315 26854 a 1 0.49803 0
TeXcolorrgb -258 x Fk(f)17956 26795 y Fh(2)p 0 TeXcolorgray
17315 26854 a
tx@Dict begin  PutEnd  end
 17315 26854 a 29599 39138 a
currentpoint initclip moveto
 29599 39138
a 6362 39138 a
 currentpoint currentpoint translate 1 0.49124 div 1 0.49124 div scale
neg exch neg exch translate
 6362 39138 a 18441 40083 45 13556 v 1 0 0
TeXcolorrgb 19150 33637 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 20806 40083 V 5654 40127 15197
45 v 5654 53904 45 13778 v 6362 52959 a
 currentpoint currentpoint translate 0.50058 0.50058 scale neg exch
neg exch translate
 6362 52959 a
6362 52959 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.99757 a add def
/d 0.0 a add neg def /h 214.53348 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6362 52959 a 16882 40676 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 110.96552  0 -95.03206  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.03206
 110.96552  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-110.96552  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 103.56796  0 -110.96552  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -110.96552
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 110.96552  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15637 37812 a
Fh(1)15636 34662 y(2)15636 31513 y(3)14905 44065 y Fg(\000)p
Fh(1)14905 47214 y Fg(\000)p Fh(2)14905 50364 y Fg(\000)p
Fh(3)19796 42022 y(1)2680 b(2)f(3)-13434 b Fg(\000)p
Fh(1)-4352 b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)16882 40676
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16882 40676 a 16882 40676 a
tx@Dict begin  { 110.96552 103.56796 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16882 40676 a 16882 40676
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16882 40676 a 16539 40962 a Fl(x)16882 40676 y
tx@Dict begin  PutEnd  end
 16882
40676 a 16882 40676 a
tx@Dict begin  PutEnd  end
 16882 40676 a 16882 40676 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16882
40676 a 16882 40676 a
tx@Dict begin  { 0.0 0.0 pop 110.96552 103.56796 exch pop } PutCoor
PutBegin  end
 16882 40676 a 16882 40676 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 16882
40676 a 16539 40833 a Fl(y)16882 40676 y
tx@Dict begin  PutEnd  end
 16882 40676
a 16882 40676 a
tx@Dict begin  PutEnd  end
 16882 40676 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 -42.67911 -99.5846
25.60728   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 99.5846 79.66776 -28.45274
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16882
40676 a
tx@Dict begin  { 64.30304 50.07666 } PutCoor PutBegin  end
 16882 40676 a 0 0 1 TeXcolorrgb -258 x Fk(f)17523
40617 y Fh(3)p 0 TeXcolorgray 16882 40676 a
tx@Dict begin  PutEnd  end
 16882 40676
a 16882 40676 a
tx@Dict begin  { -50.07666 -21.62392 } PutCoor PutBegin  end
 16882 40676 a 0 0 1 TeXcolorrgb -258
x Fk(f)17523 40617 y Fh(3)p 0 TeXcolorgray 16882 40676
a
tx@Dict begin  PutEnd  end
 16882 40676 a 29165 52959 a
currentpoint initclip moveto
 29165 52959 a 6362 52959
a
 currentpoint currentpoint translate 1 0.50058 div 1 0.50058 div scale
neg exch neg exch translate
 6362 52959 a 18441 53904 45 13778 v 20806 53904 V 5654
53949 15197 45 v 24758 12705 V 24758 26482 45 13778 v
25466 25538 a
 currentpoint currentpoint translate 0.50058 0.50058 scale neg exch
neg exch translate
 25466 25538 a 25466 25538 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.99757 a add def
/d 0.0 a add neg def /h 214.53348 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 25538
a 35986 13254 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 110.96552  0 -95.03206  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.03206
 110.96552  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-110.96552  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 103.56796  0 -110.96552  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -110.96552
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 110.96552  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34741 10390 a Fh(1)34741 7240
y(2)34741 4091 y(3)34009 16643 y Fg(\000)p Fh(1)34009
19793 y Fg(\000)p Fh(2)34009 22942 y Fg(\000)p Fh(3)38900
14600 y(1)2680 b(2)g(3)-13435 b Fg(\000)p Fh(1)-4351
b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)35986 13254 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35986
13254 a 35986 13254 a
tx@Dict begin  { 110.96552 103.56796 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 35986 13254 a 35986 13254 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35986
13254 a 35643 13540 a Fl(x)35986 13254 y
tx@Dict begin  PutEnd  end
 35986 13254
a 35986 13254 a
tx@Dict begin  PutEnd  end
 35986 13254 a 35986 13254 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35986 13254
a 35986 13254 a
tx@Dict begin  { 0.0 0.0 pop 110.96552 103.56796 exch pop } PutCoor
PutBegin  end
 35986 13254 a 35986 13254 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 35986 13254
a 35643 13411 a Fl(y)35986 13254 y
tx@Dict begin  PutEnd  end
 35986 13254 a 35986
13254 a
tx@Dict begin  PutEnd  end
 35986 13254 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor   0.0 0.0 2 copy moveto
56.90549 0 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 2.0
SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
35986 13254 a
tx@Dict begin  { -36.41946 32.4361 } PutCoor PutBegin  end
 35986 13254 a 0 1 0 TeXcolorrgb -258 x
Fk(f)36627 13195 y Fh(4)p 0 TeXcolorgray 35986 13254
a
tx@Dict begin  PutEnd  end
 35986 13254 a 48269 25538 a
currentpoint initclip moveto
 48269 25538 a 25466 25538
a
 currentpoint currentpoint translate 1 0.50058 div 1 0.50058 div scale
neg exch neg exch translate
 25466 25538 a 37545 26482 45 13778 v 39910 26482 V
24758 26527 15197 45 v 24758 40304 45 13778 v 25466 39359
a
 currentpoint currentpoint translate 0.50058 0.50058 scale neg exch
neg exch translate
 25466 39359 a 25466 39359 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.99757 a add def
/d 0.0 a add neg def /h 214.53348 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 39359 a 35986 27076
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 110.96552  0 -95.03206  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.03206
 110.96552  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-110.96552  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 103.56796  0 -110.96552  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -110.96552
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 110.96552  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 103.56796
0.0 -110.96552   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 110.96552
0.0 -95.03206 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
34741 24212 a Fh(1)34741 21062 y(2)34741 17912 y(3)34009
30465 y Fg(\000)p Fh(1)34009 33614 y Fg(\000)p Fh(2)34009
36764 y Fg(\000)p Fh(3)38900 28422 y(1)2680 b(2)g(3)-13435
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)35986
27076 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35986 27076 a 35986 27076 a
tx@Dict begin  { 110.96552 103.56796 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 35986 27076 a 35986
27076 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35986 27076 a 35643 27362 a Fl(x)35986 27076
y
tx@Dict begin  PutEnd  end
 35986 27076 a 35986 27076 a
tx@Dict begin  PutEnd  end
 35986 27076 a 35986 27076
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35986 27076 a 35986 27076 a
tx@Dict begin  { 0.0 0.0 pop 110.96552 103.56796 exch pop } PutCoor
PutBegin  end
 35986 27076 a 35986 27076
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 35986 27076 a 35643 27233 a Fl(y)35986 27076 y
tx@Dict begin  PutEnd  end
 35986
27076 a 35986 27076 a
tx@Dict begin  PutEnd  end
 35986 27076 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.340000000000001
def /x1 3.9000000000000012 def /dx x1 x sub 199 div def /F@pstplot
((x+1.0)^(2.0)-2.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 2.0 SLW 0 1 0 0  setcmykcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 35986 27076 a
tx@Dict begin  { -83.08195 64.30304 } PutCoor PutBegin  end
 35986 27076 a 0 1 0 0 TeXcolorcmyk
-258 x Fk(f)36627 27017 y Fh(5)p 0 TeXcolorgray 35986
27076 a
tx@Dict begin  PutEnd  end
 35986 27076 a 48269 39359 a
currentpoint initclip moveto
 48269 39359 a 25466
39359 a
 currentpoint currentpoint translate 1 0.50058 div 1 0.50058 div scale
neg exch neg exch translate
 25466 39359 a 37545 40304 45 13778 v 1 0 0 TeXcolorrgb
38254 33748 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 39910 40304 V 24758 40349 15197 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 57977 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)635 b(1.1)h(-)g(1002)f
(Zusammenh\344nge)g(als)g(F)-179 b(unktion)633 b(-)j(MC)g(-)g(eSquir-)
-2331 4515 y(rel)p 0 TeXcolorgray -741 7823 a Fl(4.)p
0 TeXcolorgray 651 w(W)-108 b(elc)-36 b(he\(r\))395 b(der)h(folgenden)g
(Zusammenh\344nge)f(kann/k)-36 b(\366nnen)396 b(als)h(F)-108
b(unktion)395 b(dargestellt)874 9815 y(w)-36 b(erden?)433
b(Kreuze)h(den/die)f(zutre\033enden)e(Zusammenhang/Zusammenh\344nge)i
(an!)p 1062 10855 44260 45 v 1062 13918 45 3064 v 1770
12715 a(Die)i(Fl\344c)-36 b(he)433 b(eines)h(Quadrats)f(in)g
(Abh\344ngigk)-36 b(eit)435 b(v)-36 b(on)433 b(der)g(Seitenl\344nge.)p
42912 13918 V 1 0 0 TeXcolorrgb 43621 12719 a Ff(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
13918 V 1062 13963 44260 45 v 1062 19214 45 5252 v 1770
16019 a Fl(Die)f(K)-36 b(\366rp)36 b(ergr\366\377e)432
b(aller)f(\326sterreic)-36 b(herinnen)429 b(und)h(\326sterreic)-36
b(her)430 b(in)g(Abh\344ngig-)1770 18010 y(k)-36 b(eit)435
b(v)-36 b(om)434 b(Geburtstag.)p 42912 19214 V 45277
19214 V 1062 19258 44260 45 v 1062 24055 45 4797 v 1770
21118 a(Die)h(Gesc)-36 b(h)g(windigk)g(eit)433 b(eines)h(b)36
b(estimm)-36 b(ten)433 b(A)-36 b(utos)433 b(in)h(Abh\344ngigk)-36
b(eit)434 b(v)-36 b(on)434 b(der)1770 23110 y(Zeit.)p
42912 24055 V 1 0 0 TeXcolorrgb 43621 21988 a Ff(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
24055 V 1062 24099 44260 45 v 1062 27162 45 3064 v 1770
25959 a Fl(Der)g(Luftdruc)-36 b(k)433 b(an)g(einem)h(Ort)f(in)g
(Abh\344ngigk)-36 b(eit)434 b(v)-36 b(on)434 b(der)f(Meeresh\366he.)p
42912 27162 V 1 0 0 TeXcolorrgb 43621 25963 a Ff(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
27162 V 1062 27206 44260 45 v 1062 30269 45 3064 v 1770
29066 a Fl(Die)i(A)-36 b(u\377en)g(temp)36 b(eratur)432
b(an)h(einem)h(Ort)f(in)g(Abh\344ngigk)-36 b(eit)434
b(v)-36 b(on)434 b(der)f(Zeit.)p 42912 30269 V 1 0 0
TeXcolorrgb 43621 29070 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 30269 V 1062 30314 44260
45 v 47992 7823 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fd(F)-123 b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 34342 54804 45 v -2331
39643 a Fm(F)-239 b(A)524 b(1.1)g(-)g(1003)g(Zusammenh\344nge)f(als)h
(F)-179 b(unktion)521 b(-)k(L)-179 b(T)523 b(-)h(eSquirrel)p
0 TeXcolorgray -741 42951 a Fl(5.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(F)-108 b(unktion)433
b Fk(f)142 b Fl(.)921 46441 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 48433 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 51923 y(Ein)1322
b(Zusammenhang)g Fk(f)511 b Fj(:)370 b Fk(D)405 b Fi(!)369
b Fk(W)1503 b Fl(wird)1323 b(als)g(F)-108 b(unktion)1322
b(b)36 b(ezeic)-36 b(hnet,)1323 b(w)-36 b(enn)p 921 53915
3150 45 v 4542 53867 a(1)4071 53915 y Fa(\015)p 5665
53915 V 3583 w Fl(genau)433 b(ein)p 15318 53915 V 18939
53867 a(2)18467 53915 y Fa(\015)p 20061 53915 V 3583
w Fl(existiert.)p 0 TeXcolorgray 0 TeXcolorgray 9411
55901 13212 45 v 9411 58985 45 3085 v 15692 57682 a(1)15220
57730 y Fa(\015)p 22579 58985 V 9411 59029 13212 45 v
9411 62288 45 3260 v 10120 61085 a Fl(f\374r)g(jedes)h
Fk(y)417 b Fi(2)368 b Fk(W)p 20213 62288 V 20922 60991
a Ff(2)p 22579 62288 V 9411 62333 13212 45 v 9411 65666
45 3334 v 10120 64389 a Fl(f\374r)433 b(jede)h Fk(f)142
b Fj(\()p Fk(x)p Fj(\))p 20213 65666 V 20922 64331 a
Ff(2)p 22579 65666 V 9411 65710 13212 45 v 9411 68969
45 3260 v 10120 67766 a Fl(f\374r)433 b(jedes)h Fk(x)369
b Fi(2)f Fk(D)p 20213 68969 V 1 0 0 TeXcolorrgb 20922
67672 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 22579 68969 V 9411 69013 13212 45 v 0 TeXcolorgray
0 TeXcolorgray 28963 55901 8723 45 v 28963 58985 45 3085
v 32999 57682 a Fl(2)32528 57730 y Fa(\015)p 37641 58985
V 28963 59029 8723 45 v 28963 62362 45 3334 v 29672 61085
a Fk(f)511 b Fi(2)368 b Fk(f)142 b Fj(\()p Fk(x)p Fj(\))p
35276 62362 V 35985 61028 a Ff(2)p 37641 62362 V 28963
62406 8723 45 v 28963 65666 45 3260 v 29672 64462 a Fk(y)417
b Fi(2)368 b Fk(D)p 35276 65666 V 35985 64368 a Ff(2)p
37641 65666 V 28963 65710 8723 45 v 28963 68969 45 3260
v 29672 67766 a Fk(y)417 b Fi(2)368 b Fk(W)p 35276 68969
V 1 0 0 TeXcolorrgb 35985 67672 a Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 37641 68969 V 28963
69013 8723 45 v 47992 42951 a Fe(___/1)p 1 0 0 TeXcolorrgb
48228 44943 a Fd(F)-123 b(A)369 b(1.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73041 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(1.1)g(-)h(1004)f(W)-179
b(as)716 b(ist)h(eine)g(F)-179 b(unktion)714 b(-)k(MC)g(-)f(eSquirrel)p
0 TeXcolorgray -741 4800 a Fl(6.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)513 b(sind)g(die)g(Mengen)g Fk(D)541
b Fj(=)504 b Fi(f\000)p Fj(3;)221 b Fi(\000)p Fj(2;)g
Fi(\000)p Fj(1;)g(0;)g(1;)g(2)p Fi(g)520 b Fl(und)512
b Fk(W)686 b Fj(=)504 b Fc(R)p Fl(,)514 b(so)-36 b(wie)515
b(einige)921 6792 y(durc)-36 b(h)311 b(Gleic)-36 b(h)g(ungen)310
b(b)36 b(esc)-36 b(hrieb)36 b(ene)311 b(Zusammenh\344nge)h(mit)g
Fk(x)369 b Fi(2)g Fk(D)348 b Fl(und)311 b Fk(y)416 b
Fi(2)369 b Fk(W)181 b Fl(.)313 b(Kreuze)921 8784 y(jene)434
b(Gleic)-36 b(h)g(ung\(en\))432 b(an,)h(die)h(k)-36 b(eine)434
b(F)-108 b(unktion)433 b Fk(f)511 b Fj(:)369 b Fk(D)405
b Fi(!)369 b Fk(W)614 b Fl(darstellt/darstellen.)p 17991
9825 10403 45 v 17991 13266 45 3442 v 18699 11863 a Fk(y)417
b Fj(=)21293 11340 y Fh(2)p 21263 11553 530 45 v 21263
12321 a Fb(x)p 25984 13266 45 3442 v 1 0 0 TeXcolorrgb
26692 11878 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 28349 13266 V 17991 13311 10403 45 v 17991
16295 45 2985 v 18699 15092 a Fk(y)g Fj(=)368 b(3)p Fk(x)296
b Fi(\000)f Fj(4)p 25984 16295 V 28349 16295 V 17991
16339 10403 45 v 17991 19540 45 3201 v 18699 18337 a
Fk(y)417 b Fj(=)368 b(2)p Fk(x)22519 17855 y Fh(3)23341
18337 y Fi(\000)295 b Fj(5)p 25984 19540 V 28349 19540
V 17991 19585 10403 45 v 17991 22785 45 3201 v 18699
21582 a Fk(y)417 b Fj(=)368 b(3)p Fk(x)22519 21100 y
Fh(2)23341 21582 y Fi(\000)295 b Fj(4)p 25984 22785 V
28349 22785 V 17991 22830 10403 45 v 17991 26112 45 3283
v 18699 24909 a Fk(y)417 b Fj(=)21130 23881 y Fi(p)p
22237 23881 3013 54 v 1028 x Fk(x)296 b Fi(\000)f Fj(4)p
25984 26112 45 3283 v 1 0 0 TeXcolorrgb 26692 24803 a
Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
28349 26112 V 17991 26156 10403 45 v 47992 4800 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123 b(A)369 b(1.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
30184 54804 45 v -2331 35486 a Fm(F)-239 b(A)717 b(1.1)g(-)h(1005)f(A)
-60 b(ussagen)716 b(\374b)60 b(er)716 b(Graphen)g(-)i(MC)g(-)f
(eSquirrel)p 0 TeXcolorgray -741 38793 a Fl(7.)p 0 TeXcolorgray
651 w(In)371 b(einem)f(K)-36 b(o)36 b(ordinatensystem)372
b(sei)f(der)f(Graph)g(einer)h(F)-108 b(unktion)370 b
Fk(f)513 b Fl(dargestellt.)372 b(Kreuze)921 40785 y(die)433
b(zutre\033ende\(n\))f(A)-36 b(ussage\(n\))433 b(an!)p
1062 41826 44260 45 v 1062 44896 45 3071 v 1770 43693
a(Der)h(Graph)f(v)-36 b(on)434 b Fk(f)575 b Fl(k)-36
b(\366nn)g(te)433 b(eine)h(w)-36 b(aagrec)g(h)g(te)434
b(Gerade)f(sein.)p 42912 44896 V 1 0 0 TeXcolorrgb 11001
w Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 44896 V 1062 44941 44260 45 v 1062 49996 45 5056
v 1770 46801 a Fl(Es)340 b(ist)g(m\366glic)-36 b(h,)340
b(dass)g(es)f(zu)g(einem)h(x-W)-108 b(ert)339 b(zw)-36
b(ei)340 b(v)-36 b(ersc)g(hiedene)339 b(F)-108 b(unktionsw)-36
b(er-)1770 48792 y(te)434 b(gibt.)p 42912 49996 V 45277
49996 V 1062 50040 44260 45 v 1062 54837 45 4797 v 1770
51900 a(Es)366 b(ist)g(m\366glic)-36 b(h,)367 b(dass)e(zw)-36
b(ei)367 b(v)-36 b(ersc)g(hiedene)365 b(x-W)-108 b(erte)365
b(denselb)36 b(en)365 b(F)-108 b(unktionsw)-36 b(ert)1770
53892 y(annehmen.)p 42912 54837 V 1 0 0 TeXcolorrgb 43621
52770 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 54837 V 1062 54881 44260 45 v 1062
57944 45 3064 v 1770 56741 a Fl(Der)434 b(Graph)f(v)-36
b(on)434 b(f)g(k)-36 b(\366nn)g(te)433 b(eine)g(senkrec)-36
b(h)g(te)433 b(Gerade)g(sein.)p 42912 57944 V 45277 57944
V 1062 57988 44260 45 v 1062 61051 45 3064 v 1770 59848
a(Es)h(ist)g(m\366glic)-36 b(h,)434 b(dass)g(die)g(F)-108
b(unktionsw)-36 b(erte)432 b(f\374r)i(alle)g(x-W)-108
b(erte)434 b(gleic)-36 b(h)434 b(sind.)p 42912 61051
V 1 0 0 TeXcolorrgb 43621 59852 a Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 61051 V 1062 61096
44260 45 v 47992 38793 a Fe(___/1)p 1 0 0 TeXcolorrgb
48228 40785 a Fd(F)-123 b(A)369 b(1.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 65124 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(5)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/GK-BSP/5. Klasse/_Gesamtdokument/_Gesamtdokument.dvi
%%CreationDate: Wed Aug 30 16:12:32 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathItalic12-Regular
%%+ LMRoman10-Regular LMMathItalic8-Regular LMMathSymbols8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/GK-BSP/5. Klasse/_Gesamtdokument/_Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.08.30:1811
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB68A4B14D70599
BBC56D832892EBE9E2BB72A6F7B956D8D8F257466803DF558640D82C0BFCEE12
3AFE51583D9E576810FD5239C9CC0937BF33358AAB8807108315E38FFF635A3F
57C728E8D8020D71C1703AE469859D5BCC5C0B83DC56E6B235EBF3767BECF1C4
78DE16ABA697C3F18F402EBF9F09621B8C072090284BC5C6F10E7A971B454ED6
62FBC1A91870F50B7B061D00C50AB1B96FE351BA98EBA736BD0634EB795F1750
1A1C040D912FE802B5A2237DDE404BAF0C14BF53D8D2D112D26D2FF250FA063F
181B85F0AE00B3CDD40500DD3014552F5A15E049CCC7143BA6D5481C43A0DECC
7692405E86FC991638FFF960D01EDD1FD63752D6A00771B87730EEC035F26737
2D75F4CB9B95C1946B48FF93280C26B85F7F17A7A32CC00B93E60DB42FA91839
C0D12438B3A01FD93DAD24CFB6D523F0DF0DF36D74639E605690A455D15945BD
F49DCD419DD626588037DD122FD1B21F61D39564EE5371200E2E24AD33EE69E8
62AF235E1F550483BAB3612EFBBC88AEFACBC968B4457C6C971658B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E2F5FDD5FF4A21DF1D7B029ED228AE8176AC8FDE061629A81163B7A247F
4AC251E82C6F8DA893D159939EF998AE7D06DE000BC276A1800FAAE4671C30FC
5F6F7F8117287AF2D483EA1B294EA5D2A7A0E242E67E22527BD17C13D14367D4
78A2DDA733AE8E4EDB063A3C2559073D8ACDE59EBD4B0EA25D371BE9FDC222AC
76124A59410EF51880CA64BDC73AD1A8116CFC524A749ACFB3F74DEAF14979CA
99648AC7971810F2E1A7C89B513B7DD837A6BDFFD36847BCF1099AE95AC0B4C5
9EDADC2F0A01F9BFDC190E29BA33396FC8598E50D6DB8CF74E739DE8C200F179
90D35A3680EB7E38BE239A886D5153870BDF50F61ECB986B27E37FD67F41027D
F91189E8B80209D1347529714C5C6182FC4CD1BAB40A0DA49B4878239F35C4B1
88CDE7D6D2D4E464FC6E82E113F5EC016DDF11F79234A880A99AB7E17843842B
2B7DF39F2FE50C8A915F9509A822FB278023E56BEEA38DB3F20DA14C72D396FC
DF472EA459E0D38F1B3CFA112EAD8004E62533F9F3689D9F8CA2BFF3F9D381CB
388A15FFD90C6B82284D6A75198D3709DB41B886F9E10F6E677234B932386972
4E5B9B138BD1ECD3D5A132DCFB75BDBD2F534C1DCB2C662679D6B692A04DA68D
AFF042AFE03B807C0F94414FE18030F79C658F753E052E06897C59638EF872A3
D5FE4C5AAE4166B724651DD36643371D0BAD85651FDA02B22AF2A316937A3766
2E5A9F62E131E8C073216B618126D10754D562A97C214E88DCF08F2838AC0825
107B077BAC69AA8DC1EC35AF2C3E12674A53B3A55B64C0FC1BAFDC2E4B2E4ADA
C57AC4E808834EA5E1F77F11AACA2D0CBD42EB7B100B99333D004155898A4ED1
BCCAE4FFCDC2F3625DBCE62375D1DF3471D83495B193392BAF4B8F10C50D3B5C
C763A1912FA4115BE17055DD21A9D1746157123FEBE6D71C653AC219CF2559CA
6713618FC46751A5689967512AC84C42DFB2D9C47204DC6235CD4A16E5CBDD29
930856F00BAB4302BB272DF7D1D0E328563A806FB4EC884B26DCAA25E29F413C
3847ED2A3B46F254A093582A6625A0A490C4C0D6C3E0DB49068461909FD61BE5
C587D864754B774DB9CDC2DBDEAF1B36CA8567433D2BD104B323DEF03F10A671
6CDBFCC261B3CEA036E102753EC158B65F81A1DCD465276FB4FB5DD6A6D54935
ED0E068B072C3F11CF15C402D300D2FA7A62087EAE47CF016E3B3AD1A5C09010
8D4964C7FD5E57B2BA987FB40FE2F0786E979497CF2A3361B379302099EC4A44
33F9E70B0455B6097E73553EED34DF8DA712C29AE750D6326FE3972951ADB395
041F35A5340BE770E449DB18D15A5BF828FA3BA2E3A39502476ADBAE3D9D97B7
EF424139B2226BA59807A4E5B3CC008C51C13560F141E1541383137F464150D3
90E63D23EBF909C3772B458F975E3A1819CB2732460837EDC62035D7D232AD00
0EDFD831045B9F840D1138FE79B813421C3D5EFAA73A37175800660510E592C5
67EF82459E96DAD799DAF44C46E76BD518F69F1E56264B8E31F7850BB961E933
EAF370C4188F15514B0FCD8B218F5D6F402974C4ABDB32658495F7707836091A
6260F217D91D4EA2F2B6FB87E2E004C6FBF78707A9105F1B664619F2F0828BB0
54916D49D691E0C267050FC94531DBF480716F1FE7FDB6FDFEF441259AFE6C66
2EA0701460B561C27A38B139D8683694542587802487F80F4DEE34DCE95E75AB
A3A85139790DAC9FDA2A1CE8EB7069C9E67E96EA825EBBA92EC6210B4F10600C
3FC132DB99C17A6E747D024BC3297C403B5E27023BB33F388663FDE92797BB16
CF12A44DD6922E0385078E5AB8ECD536AF7A652BCF0541218D571C3EB1A05031
189783580D7240E7096F83E0D2E62F1C09E6DC9C9EA6A6D39BA1AD4D40E8251B
828BDBA6087CA9889B31AA8B63E4C5425A6F7ADB67E6217C2B3A02A17AF215D9
39FFA89BABC66D73678FDE76E5E2EEEFD24F40D32CF19145E5804D9FDFE14D64
893669743B6BC2F7C99701486E6B4C89AB7E3E61A7F1029FA5E9FE7BAA6A177D
A4CC2B5D93CA45C80493B3ABABB911186600AC62FEFFF4F7754FEC885A90540E
5FD5922F512C0A83999C07CEB7A37F76A1F0B0B4AEB313F302A0F648EB0013FB
2A796201976F8EE68172D9CDEB063F4E4C2205AE4503C71AEC1836F384BD49E9
7F6C22EC02CE64CE9F9DBE52947CAF49A78B60356531420847FDECB667D6344D
FC50A6DAFCC37D6433E675A78A90EA9F52ABFD70788A26EBE7BA4D5421A2704D
EF586267439F149549A6615B4315E82C359BF2E9D1DFA2FFA247A7399B354B0E
DEB8272D75E4EE205D197257724268869683C4FB7DF2963032947A51DFABA0D9
0EE42B4CF803672EF0AC1A4F76C8B2A035BFA776036191C1F128DE46B5A4EEA6
1949A873779B1EC4B757074562ABA560FD903432A3A9A54A710D942F8A6C4128
F6572E3F1061BA53184111DA5E9394DCEA8EA947CC9AC1262E79310C38B48C20
12E0EA444924FBC760A5E32C937B0422404A3CEFB3AD50732A73133F621717A7
71A7A61F98B66D662D84240FBD48DA483EB5178D7A5954B974FF913A6944EEA7
E4F8A562D88900AE157CF0DAEA24C80DD8636AC106CB4DAAEAB310E536B7C5DF
A1F90C1F4FF7D20655C920430B9B73AF085CD308DE598078BF655B04B80A2ED3
3B200AE21D0404DCF32BCB28A7373F882021F923D48D50A8899DD24D4DF5D873
698E7150995524026D21566B91425A2A65C07D4FBCBB8FB94BE05DFF2B3C1680
75EE2FB374B1AA261F22CD75F66E7295A254FEFFE9F46C662EA0701460B561C2
7A38B139D86836945425834BFEA5D9EA2F610ADB9AE7757B2307A1BB9D6797DA
A31404104E1175EFB44CC4C632B1D5D2BD3E272043E87DD12722ECAEBA773E59
4003499F0F90FD53C30FDFADA50C7B911EB8AD8A29161B82F04EC77F5542BCCC
7D31283AFEF6DC3AE6AB5436D0CC4AFBE18216BB13E034924527F4F1C298D34F
3811D5DDA7F33DC6E913E04ED66046C916D35E96FA40AA847DA5E22F00136F21
273615D47B3901498B8604BF902A1912A066ABAEAAA44F8168799E2E4B7219F3
1E5A942286CB11A0D89420D72ECB55FD6D60DFD991C001C437B231507FF515C5
784507F7DA159BEE9955D9F5B0C3E791528069D2131BE1C7C43CB9D973776181
782CB418D2A2842D2A8D814A3F0622B58625F107E230290370856A89FA8D5652
9F252E7CC538FD572E04988F18537E639DCE4F416409386A5B5F2C28A995F63C
CCD6BBCD792189A12FC9366BA7134EFD67A22B4AD89C3FF5933ACD2938305FB7
CDEFEC635C4E3E11848D694D2525A147759BBB495C5D5B99EA24A21A41A2E09E
E8A1FC2782771202EFACD33817D7BAEB7B955CAB886ABC7E700FAB750E41B779
97BB57C3923321C9D354EDF0486A783AC9A3A8A50D9E4040DC6ADF8979C2C772
91AF4B4152233B804496666ADAA0D84BBC6A705A9C77B52187AB7B264BC9EC8D
98FD54FA956FA6C063FD47A3590EC9C09B9F825D09A330FC50AA0EBB54631BD3
8C0D833343743003D9EBF5AF03297DD126069F26D369EA7692DA01A50831793B
CDC48A9734A55955F6AF771D944602BE875C0E8D3876D27CC8572030668FC456
B3334F76E5910578DCD4A83A8F902F9850B1E071372B6BCF391E58BF827DCBDC
88CAB3E1CAED0ECB0B4073475DFB74C2575CADC036837DEC41920166606FA10C
B83E2B3AAE03D9BA8301AA84D8BF720625170F3F9DECEC62F2E7186C23BFD0F2
2C7792EC0446E118E97B1EDBE1ADBCE77243B1EB202AF53BAC1594B71CEC0427
D5FA06B29F527B6A236CE267095F219F67A5D9A7F3347CC0D290E551C3AE2936
2C779ADB839CD30E82227E9165B5363270BB0B7419F52B949B4104BDA3C89B51
3B7DD837A6BDFFD36847BCF1099AE95AC3D55C915AE1A7B21172D02E3D78E253
519DC09411034B2AD92BB2B15ABB32D64FFBE347A945DACF630965AA94BD0459
1B26C8BE56C624A85CB82ED74022F98B7F0F2F5191C2C721CA9450E2888A74B6
B13601EBDC28DE32B01A7D0FB45E3B2D0748BC00BECBD77E589575E9569E23A6
B6FF0DE544B05BDC21BB69C38829A6EC25B94E589B83D340F98A0ABA1E1ADEDD
C9836C05506EF32C0149161B106E3EAE419A32437707B48DE067F2938B703D1D
F07EF2E12C9802AAB56426BFD7E71A8051D5A8E5F39E7D95DA9DE8FE516923D8
CC810E306A5D58AD17FEF99955886C444F83365CE41BF7BDA5157CBAA8A0EA2B
12BD1301F1248952EE375832C57F9ECCF6D8C2C03345C80493B3ABABB9111866
00AC62FEFFF4F7754FE782804E60080A4C7FC4641AC84D9C0A610AA270C030E0
2DB7905A1D4BD179AE5684053CA89B477D5A7CA9BD7B24299A869222D13CFDF5
99DD43370E6F28DB5DE10E185FFE027D7FF581F639942945245D8F3401965C94
603179731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEC846630C0E0ADCBD3
D1F3B66962A7C6579DE0654DFF220EF05F913C074EEAEBE390144ECA2EABD1ED
2BB6C725C7F76BF39282D0236E0983786DEAF6699160F883896718E0179DD51D
77FFBFAD2BBF8868D71E522619EABF2673F9CEFB9B43D1AB67E0C1B90B74C62F
F8FD0FCC23EC62AA24F57CFA5CCB8485932F527838C9E2F1889D10843978C1F0
021E46CA77856A05A144DD0BC77CBFAC40D690AF85067DE6EDFAEA7567D26EB2
4093BCD34AB434FA666E57429E6BD74FFC6257A2E0CE1910FF41A7B70BE1C83E
8A3F98100A686ADB740C45D0CB167BEB8857F1E675624A37B48C6DAFB92FC1F2
1A4EC7894E2A0D724DEC40586297064AA5C2EADC5E6EF258AB1B3B5FDEC3BD58
62FA1663D6522D775FADD5344E8014531CEA9C31F388C1853B13A2D88CB67CEC
A9A1D3498D569DE012062AA14EEC2E1DA96256A9C8141D8B7C8067797C0CE920
DC601EBAAA2524F7D33DE2C3F202B96AB0C59A00DF442A7A5D8415A007581CCF
8281A901794AB36126A199A07BE2827A83B8CD7BA6EEA79B7034C1128484ADB7
FA412011254F6763C471FCE09BE830EFAA1848D82076C95BF7C6E39EB200D9C0
527F9576C9CA4DCA2FB7C7EBBE81AC61DD8E746BA49D0F9A5A63AA4C67C69C4B
98C04876FB89CC96CAF95105A2C4D253CE665AD4656A8411543F2BFD4464BAD0
E3CD601ED99C2BA0B49679C9DC04B65B02092766AD00D244DBD4BD58CD7D2FE4
CC0827DFAFAD55A397B043F6832F2946B0FF1705C3B615616AF611C0D7C1A57B
747534B3EC85C1A110A0DF341F128C794D9D6EF7E18E83010405CAA3AF558B22
0EDD5368DB7C6022BCC5A3A6599E8440DC37D853338BB9AD8BB827F30EABDF8E
4AF75FC848456161BC77B240A7A12FF18085EAEAE51E4D7B7D66B4481823B60F
897D0E9283F5A9962D953AF02C2FD19225D25382E07A0330A0CAC82827878BAE
E83AB15AF7823AE436DC4ACE2F1A9ACB2EFAEE34959A0FD994D2DEDE8EBF3F64
D0959280898297FD2C67038ABB237E8BB6667602CF8AAFA7F60D7649AFABFADB
8BE47AA6C623BB1E86BC855FB26CF97B7410807CD210AFD2C02131258DABAA1C
D08127A538F69140D05B9050D2E505AA097F2FF446589143D43EE23E64B1C6FE
027E9D535F27D01655AD662E24306DDAEDAB1F5ED0F57357F4F5AECD3FDB730F
5E8ABCD0F27FBE67C3D802D40576568262B2289BD805DF76CDB22E1F984A47FA
25E36C526E7549CA892D7D2DA9DB1F2B4C1EC7ED6FEC4A8A162BD9BB26137253
BA8B581941E759A7CA7E1A5A9455DC1A80619F155C66DC637B24236DAFE0AF95
15FCAF573A9C560C53F4EC10F01B24BD3061707FE66FFF5A660A8574725AC0CD
59BF564010A948A5470915C5C4AA32220AEE7C75A5BAC24E9E43AD56BA6B5B91
5CA30F77DB1355CCF8E3E54C3BB8D661E4DEF3D5B062FFBCDE60425AD9518EAA
9CCF31324B1361E9A081348CE274781E184A9886D92E479DCB4C2758993ADD87
E53498572CAD36E5075280062A516E93E883C04AC3D262EFF1946D755BA2F7BF
E00578BB6C18A3DB61A9E84B41CC5A6B714F3894775B2DF1F871924CE2C0479E
A8C8C337504EFDA50838806C965228715A35D8C7887C76374C1C424B0747BA5D
9A50B153195536AE6A6E83FC0D04CA55D1408C26CEF1BC56E92FDE53A26F9395
671BD1653E8DF6C3261EE74895D1B415315CCCF6ECCD15CD3C0C3C3AB1F1A5C0
5410161E7A841ADCE046C2079EA5BC0A9AE90D077218DFECE6C9A7CEA474FA91
51DA64C5A488EFD0D6F204ED7807E04F51013AA2E2215C03ADCA175FED41854F
6DD7705D73C2CD9A14C5396873DCE47441B413975C0C659A53DB44869CB51198
CFD8771A99ADD18E9C3289A1ACE08D4AC55330E8A3421C1DD9ECE7B41ECC4C92
B197E048F98A95BC94534501285318ADA7FF6A5828D0A896C286C3BF16398367
DD2F1A199FDA3C8FA50A3520295A5E1B19A9C0B0BB98EAD3B5ADABB830C68513
A5DFAAB51942FC987A55ED58D87566C8DCF13322078DE4CF1E905D7DA1E5D5E4
B896D55B67837FE1B0D9EDEC9711F4E9A50458A83970B2B20819C87E06075DC3
2A70F10CBCAE6006AE2DECA9ECDE88EE04FE636A43B6B361AAD79CC0E39373CB
F0FD4C582927E6F48151E720E33CA846C5D4E4D75B12481CDDD1FE7A73DC4D18
1C5916886C28EF3ACE3E40176D66D31F4B4F23B1370C6929AEC2009D38FDAF8B
64E0219A156C3AC00500584B571230AE6DA656972B8B4C0974C5EF103E8B871C
72619E1925054A3840BEF2D2DD0FE4D543A62F8ABE3B31E04FD876777454D427
72E98C262FBC012BE5E4044BCAB3A1A0E8E686759EAE3C5EF566C1B6345A9FD7
5F123B9D58A04D880971F69235139EAA9885472587284CAE46FDDF5CD68DF5A2
AA0945BB224E8FC35C43DE0D5A4F0514FF307F5ED154EE180E8AD1978B6BA40D
5F8F12BED3969657670228721A60E9C7DA719845AA9C4BA8AC40C1E24DD4CABD
064949F7DDAB42E991655A4E858F0EA546C3A723A3FF1CEC65D540E5F0CF90D4
A57FFDC9846F2B53EF7BF3B90C59647CA32369298B36645A69B98423DDA04A18
DF5410EEECE3499BE2F85EEEEB0C32EE8A2F40E30BE8EC1A9A84A3A76F0B924D
C4B86318921169C7F112991FDA63181543D6883BE338A0A9D593462CF91C1DC3
D228BCF7E99F93FB87DBE9700516FD02309FC1FFB29C800A6749417B4A4C5D4B
6CBEF2EAFCA2AA8278E793C1A3ECD47AB267955723773029CD583F6405828CA8
C05E7325F9077349C96730466CD529CF49A29030D28090CA803D774C5E1D01DE
843A16A29B2FA6EED0779DCD39D9849EED96CBAA4FA0629C98B3D2AC24C03566
5DD98E26606CB1A3A8C57A868F88DAB08513B73D45450E6550A9201C6B53F318
9E8DF4796DAC4F88799EB9D0B6E11CE72C7DCE7A7831613680D8C09EDA896ECF
FB9944EB7EEADEC7BD012E823A315F0C66E857E9E8AC1C2DD5D792284965F00F
59BF602D26261E827D0608A6B90E08CBF44A30669AF4E20CD5C1FE7EAD339380
6B86F68A2B24998E20AE7ECB82DE000EABEAB1C02DE323917F5A206046CDABD9
D54EA413DE4E72226DE2C524B86A3E83C8FCA1FD3D12A4104156A84859FD41E5
1F352F5ACF474B8D104A5677B231727E89E3847396BACA6164963C3AA18EF7AE
2BD8E0268E60958111DE297237758B75F5ECCDF503383715F45158FEBE4F3F94
0CF633C69D64978FD33DEB0B660C6C18E482FA35A8E2B4DFF28E8B1DF45EA09F
ACD50E35DA75FA891767E1C53C02EBB7C59A47E26416D0C02BCC703B3D6E178D
1922C678755F62A3B464A0300513DB48355B3D1870DB7BB30585773732002113
7710209806D7C3E7739FF0606BFE48E80CD00A3DD8E93C9C279080FFAD1B25BC
739BEA98D62843999D71C5599F89C29824458186DF6558A2E9B357C0260490AC
60C0AC71C775FF45AFC56539492B032F2EB6CD7A4A50AEED2824980D3B052BA6
ED7645CD9B79136AE676E52680371D036D1801406A3A5009F8AA42BE276706EC
7C748A40418CD85FD323D46131B9284D99DED6EC398CC60728D7C950215F7843
FD99CB4846116B5AC10EAA581E6AB0DE87BDB8437FB2BACC6D518A710C9CC882
B95552C5215183E5FB51605BAA7948D6E5178BFBAA09793C8A74DA25396CBC14
84DB56560791149E438A8FC81C7A93EC9FC3BB5BDA3619E904570286AF4C50E5
FA7F48E7D337FEC7836AB3E337D1905331FC5180AD7B2AEF587491B60E283491
9F5224AAB13F1E17BB4225B900E8E56243E31E69A8781036D46DAE8DB4F9D93E
1DB0B7F7435B508C0FB63B6F6E5679D2432045BCBDF9A89800747415A1CE767F
96EB6EBE6688309F6D9793F9C0A751547EFE9C11BAEAB87E7827B8321C7FD253
44A15782868B07F5431C973C89C949FAD868DAD4334BAD9F30FFD7C4C4305B19
2D25B4CCB9A9D05281EED29F7F7E42D6539B635B544499D40AA6D343664B1977
4783F390DB90AD4C8FC0033CEEF644ED47854E3569ED522FF4EF8590385012AE
5A91462AF79767E97FE4DB2686E90AD593445C44FD9AAE7E228A0221319CE786
D1E24A8B87C71011050A1DFDCC768878F88AE90E87FD781289145C5CD51CE981
0C4DA5AE41B6FC5168A1757831BB68863A34DA7A295820DD78AA19FF23F80B18
8F9969CE4D13F0E4C325C03999939FFC6CC50503BB871565797EC537E26B256C
7DA480959E4F8348015D1F8D9591F91F6A2A228EB06544C0DAA6DD5D5492CA17
36A52B8B9D95AE23A9C380E3A61B9F3B463DEE44CBA80C234D6D7E0D6A70DA94
361C139D2AA8BF58CCE6D3C086645D1BDB1786DA473E9C75D2A16DE2FD83DC25
39BF75474B0B9C993BBAF0DA3B080D519DA028D46BD8A6C8689151A1053F96BD
81D9BE70CB069F4A7B911B96C587E65FD0058E0576018C71DBAFF2F6BF055A52
4058940BCF1CA8D16D9A2D6E64C548FA3900B6DD28F30D56D1DE308C49927AE0
4C0CA35CA0CB4C9FDF536ABDFFA429B820A82AEE9A73D7DCF77164E81C105784
6B76616532B79C929723445D51E55F2C9512139E2DCAA12133B5B6017B0E08E7
76403F967AF215B75ADDB38514AC894FFC691E00B2E00D3A171F46D0BE82602D
962D745036951CBE2F48745501CFAA4364CF4C18D75547F61F66F43106A015B4
BECF94937CE559ECC5C325DCB7C07A9FD4973CA9936C7CEBD55EB56E4255E448
FC6A6F74FBCA5445D5B4F43726D9BC891653DA61ECBBCB6494575BE7C27F44B9
9EBB6713BB8306E5B5A1401CC6639823BAF2248AD544A48273795FF8EC6F39CE
CEA342E85E9BA72134CCC83B6EF77480164AFC424539E88A68B947574C1DB283
4483C460A5B2429AD49BD4611F52553F07ECC0A2BCECBA36B97CF02F70CC7E73
AF16EB49606C83FBE5FC602B7E70A0047A05623D54F22D01328BDC8F75DF47CC
F6216626AAAFA4DFC47FF9D123C4C04911DCD97FD5E3F1A99662DEEA6EF927E2
21050F31907E764F88644C6E5835216ED2DD1B36FCCC46801187B37AC3381611
3602163D500E957D7591699856E4445450A92CE3DB0B46E25392CD6FC3BEFB27
A960CC43B18DAAE490147C5AB8EBC973CD8D3946E50D5357E57CD8F2C9CEAE3E
8EF86BD5CBD90AAA608A3F65C0FB12D24CD3BA20A21A60DDB2317D3C80B1A70B
71AA537516A6AE9281540C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F9620E5695
D314E7807F206E0C13AA68398A6E28FEB3B0BAFB168609B7080172FB96FBB203
F0B58A4ADC9B4A56C69C127014FF4CCA4DAB06CBFE577AB49D78602657410BEB
F2376B96BED7E150B0ABC19457CC6C0C6036B1526E7B4F949274F484E5CF75E9
DC900DA0BDFDDF66CDC5D473B932900167C9F8E56A53FE2327EF9005FBD4DB3D
234CEB943C5AFD9B42A8D53BC397F9936CBA7529A4BAD58E115EAFC7ECC4FF00
8A8123FAD0B30DFAF717211AC59DB917677519A1F5C4B80629D782FC42AE0F4E
426160BFC14E96D836C5B460C4CF2B625A5E17848556F4C74B177183AC8DBFAB
B91D54CC819680322EAB72E1250A76084B79CFAB6B8AC894D3DE5A07441A7995
2846B0AD9E0D17795D19AE386456AD8C5D6D789015B2CC356F404194E036A9BB
2A12B3458D45683EA3D49DC880FAAAF8C23932877E28A1ED57CB36EC875339EB
25DADAA0E1A671EC78166AA466F61345D046731E6DA80678EC9916BB64E97F00
54D4CC6391D45B0A6CD0716CA475D96F399FCB8BE505E95574AFAA473759440C
B93D25CEA7D30F5F17203396EC4AC9EFDD9DA23C2B6E2E8EA618163D2268734E
1101E0FBA6D2813AFFFB6256C6A72975F6E5AB21231D50F46BB9459C6F41B3B4
EE5B63571F18E7077F199067C569C93285487121FB3EBFE72A4B9268E1F3D065
E8BB2AC16F63F51819C4206CB45D52E88EB1C042E28A6DFB6F9062C4DDC5ACE9
5A878698528C4C0E32E2C73CB8FB57632E95C0C01CBAA10C0032E8E7384836BD
E8A66BD0BAF419FC9090192F172D05BA3046172E87402DF3168948E1411AAB9A
60C2FDF1D3759ABCDA9DB4FFB4CF70518632F977D12A5C7BE23CB6EDE16C25E0
D9EB07239AC3FDC4D155984F2C2E5939F7FBD5EFBA078A330AA3D4785C94F472
28F30D503E1E0A943EEF9BB23471D1CE0E37ACE1699BC069A8BE8F827227EFB3
7969C2356F9388677617855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECB7FAE
7D7A27B464BFDADA50B69463D3E7F8D73B13087B2C36D79FA4C4E5A2A2C775BC
5001E4DA81747FD266CA6ED44C798C8CF098F26C8AF48B458803BB26487C1396
A6170A22A0FA9505D9A09C8FD62172610A719CD4E8F10848DF972895EE541BD1
EC657ED5D3BD43A15CB7EAC8738A3B553BB914B7A10A1EFAD6A6EDD26E87144F
70B92516BB3E2B65D78732C40F1F4B6614F932F98837F99FFC57F6254E6A4D3B
38558C6287C81A6FCAD90C568437F13B19D714FB66472621113AD7BB240DE7DF
BD1F17FB83E8B23A86621421E2B0DE3A365F9948A115239FB86851ADC3B6AB12
94CC34A4E8E3C92492497C655970855E2B88E9BEDB12DFECC33451DD7E052CF0
0FDC0A854E042266F627D3CCD32E4B6170DEC3F342CE36CA69164AC6D4A47B2E
52F2B9E896549C8050F55E35B4AE9BFCD93D489154981D7C999B88588E3BDEA8
34A3B0F64592C48CA5FA1AA195D9F12E03463930D05A3D71E1E9830AC1A318D3
98C3588D856421AD456105F4F4FF47779A5523F2C8F7F242011E70880A8AEDA8
09E90BE4203C3F857F733EFDEFE6E2B12759D876E93E78E14FD76B97270E30ED
935F713F5332E0CF05C754FD76916FECE4DB28073348FCAA0C239243C2A0366D
689A885F2B7D7F4E7742FD38B65760C9D279613FFAA3D65FFDAAB3B89F357F7F
55A09247A0F2F3C2F479FA651F01F72A57705673E627FDF4F4BF6D3466701360
B64A0E68B3E4ACEFD98F22E80F8C9E01E74E8428BBBB487D799F17A28722DDF4
8A5182FBB31F8F4EBCCF7BA65CBB6605D4D72E11338D87D5B02C7B7D396C1E80
F1096EA9B7208B77E4C82D82F098BB7B71D7C07F365BB9B817A766BEC0F19893
7149ABFCBE4EBC495880B7D6CA5327DB81FAFE2021B109D7DC8DDB880161A021
60DA97D3209091D8931BC21C6F969288B1CEF398CE901DD2E8EFDDDBA23B3C97
9AEE51FB9DDBF773096D60C1E7EF7566232A6E513C7453D17EE21BE265B2C73F
5E4EABC1EBE99B7D69B3D8E190A8F5E37AE6B1B9B2C3A3A1A1BE80ED8FF0A9C5
09420006D2229CC525B50E3397A5688E0D0D7CD1CEFF5E355D691E098D1FB679
3CE8A3BEFF5427C034CF0128DF47A8B3BE724F188690E67484825C7F2C49C6B5
5ECDFCAB2B87D00D84B6D0D325D2DAAD0AC6745916FA18BB7F7D0DCCCF62D091
D524C27A1806A9137DB417D7AB84F57D855A697253686194896E3D41A3E8AADC
DB4D18753287AF757E77D486D15404E5581EBA032C3EFB399326E705DC06FF7A
A54AD78BDD228AA2169A24F246F586326169BCD4B8508F98E9A2DED0C1214250
3BB1C0C446947A081D2D7F96372E53EC770EC1EC2FB01B6A5F8ADB04BA524DEC
E34673BD76379FFA0BF5310D575C438B2DFDD132D6121E7EF9808619C5F37056
0C0AB39BFD238A0859BA570499CAAA419F52C786C490B04B0CA0A969E41E3F04
FA629E2B6649661B663D1B5FED7935DEC964AEDB4721F177FC89A5AB13A7C2C2
44B40C5D496DCB96A463116389EAFF5982413681C3FE67F9F68D7637DF098278
5DABB8684A5525C6D23A221CFBEEB764E93FADD0A308C5B83AEB4164DB120EA5
F6A12B8FDF5CD52C65C27E8681CEA83A39DD8F7B7E00CB5CF6F4383F779695C9
A969DE58BEC9A6FBC5BF37982DB3C1C003F982B905BD7D67725C83EF7119C2C4
ABAB1F4EB50B1CC6781A016A285C8D08E7F4229B736986E92EAA54CA242F0D9C
C02F1BED5F60F5C9977D820E70CFBCE7E2D79A2B30D4CC3DCF6B84FC445028BB
1737D9AA43A6B2C2B1A9AFA9C9DE442876D10CE2FFEB527E7F7BB3165E06D26A
9BBE52E1F8AC594D1FB97CC66F87A5FC4E95C1CC249D60FEDDCD86D616C74A49
D0B13EEC603AD57A63D27A973743521EA5B0C41133C69AD75946DBFCC0F4281C
B7AD124FAD88841498F5BB3F6CEDADF04FE7E6F9F4CC1EB588C0DD7AEC8D6A34
2F3F22BEFDD4F862AA2DBE34A499EE8FD027C04F99C64AC4C5C58A7ECE3C8795
11F0057BB81FFEBB440C38CB4770D0A3461CAE8299FB9959194A39E90FFBEC4E
ADEBEC4AC2CE31542776BCEC2A8E5BAE1533530F215C877BFC06058050D156AF
E2197A0F08395B176F5889A8A3E619509C8850B5378D0CB419AD9697D42CD40C
89B6643A4805DF0C592B5D7452CB521DBD1AE65E9C3D6B0ABA3378FCFD331A23
25F0831C11172E240A9F5EC4928A31B8112B1F56537B5AB9C6544250D93214EE
0589DB373F4DBF3FD500C82868714AF2B47D07416D2A51B83AEB1553E1A256B6
9412EB01693CBA2E0E4A4E8B4F55AF936438B5A0AF086EF1D9291FE9663A4F20
22DACF26DAC5A3245C3EF27B1EB40C8A664FE68BFEDB98E14E3073ABF39EF1EF
413986DFBAB7FA350C8593FBBF8E75968CDFB8AF6CABF11FDC8C61BEE736B204
71E9EB09A513653E10DB37BD476A6B8EFFB3AB6DDDBCDB4820B1949FE5F6A0EC
E75EFE3E4F19E2D5B9EC575F8788B1225882033FBDB68F7E81959986ED2729BC
87CB403E5F7E87B5D7D70C3119180B78C2016149808E8EB0ABE955DFF5D18D82
DDC9333A06B22CB38E4596C6908AEFCAFC2C9DDFDD855116AFD66EA16F91A23D
527D3338B3E89A18C5A3DBF575BD2DCEBCE2997D4DC5550E9C21BC719C0DCE89
FBB23B25B8BD6276ADA992F653C32E9EF3DE510D05F01B979454C6280A58F8BF
EF5B059E431CD83EEA8085E3337E32DEED5C9FB49D20196A7F52F09F53B087A3
E5284B1C41859808C27C7DFEAB9CE2489871AB157F0467ADC64D600AD4CB66D8
C64AC63CDDDBCA057387BF1868F8F5FC71B44F27AD672FAB351CBB8EDF5FEBD3
6C6E600300261D453EF3794BEF6518A5D6271F74EFFDF8F0815D7853BB5F8AFA
74326CFC9D09FF78A92DB2AA8BAE319FD792C2E753CB06FFB946E911C30801EB
0ACE3EEF0FED25AED0C6EBA4EAD725788A7EF8E3533E42904F734F1B62F108E6
A6E1634134E1EC582817E7EB37AECCF13CB9114C801BFF6FC37388AFE303291E
785E5E32034377F3DE1AC1059F48D7306E51E7924E0FC351A9ADE4960356474B
77AD745D08A34C486AD89EAB0D0C26DEE9007B390B4306B56DB0021606D2B391
10AE5BCA264A529D94B60FDA916CDAA9CE286BA6787F495A14AC90F9DAF0C3A0
A0F4E99A1944B2F2B4E977E7C99ECD5BF51DF8F13EEBD103E038CAC430E4350E
4C3DC89D789252AFC8DFFD53A6555556089ADAB4DAF9B826BC53D97B4715710D
8863375993CB447759CC506C2FE22FE5659ECDE9C53C02EBB7C59A47E26416D0
C02BCC703B3D6E178C626C7DD639D9CC828F52311A94A494127574D949072B42
58EABC55ED2D98DA057A876FB35F46EFA6A949A75E5C3C342D8157822D42F334
B8793F13FB6797C5E5249B4F010350B03219CECFCCA1D3C1D0FE8A4F802753BF
FD3BC45B1B342DE6B5E3E38467519B96E7A56FECEF8931BA14EFC1DC2B9B2A17
5DF50991D208AA0D133C8309D92CDD63434DBCF2B88E9AEE42D1BF399F811E93
3EFE0528D8281A3651C7D7C71639084E0D77352B796382901393059AC7C193C8
8A044CF33F6A39388F6A296F42C630846B90CD556C341C478926673315F3BBC2
ECAB70AE3C10DD390C32A10912E41B77C22EC0D1B0F31398B13B38CFA9E2161A
04A7A5AD31E3EEB2452F7A2E643F42D81981B57BF54FD908650F54EDCFF07F1F
DC473ABE8F1454D6AAC22DB1E37A56D2674EF19A324694ADB3B58D244A90CB7A
4589A0257051C54716D2440C2CF4262663EA20B3DE4FC5B11F5E5D7A41A3DD1C
ED1B040870B95BAE5C1725729B603B6CCEC05220CD184DF3A8F645825C9F5C09
10D78E66E509C8F9D526BC9754167BF1AB3715EDBE9C4D0726A2A382FAD4D17E
733CFBD7E4D5E17539193C3526749F8C8166E69E429419C26447C94516A97789
1ADC4B25BC8A9B6536780DD87476CC8A2256A4D87787C04EA742C0D844566898
041893C5005303F310B5A8068E167B6E11828C9721A9E9DD6413BF8D9AF33225
6FCB3EA78A9EB74B4B091BB5B674B00BC2CAB19F9211DE8E3C682C96BF0C1C0F
16071FE6249B1AE616B0350CE3B1F6940FD72632318CB05F5C3236399F9CDF86
88A69754ACA70F3D7C5D777D6B1B4021598A6D2B80AFCD60F29551F39AFE3FFA
D1623684285DDA828F32E57645355991B4511E39D8B71F1B8622A7A5D19DB68D
021183BAF9D8A0037037BA321C07F827B16443284F5B6B234942404C46943A76
1BADA6C3B4B9C8B9A0E8B3E4D6B738525FEF89E5722C14B7DED7E9AAE85B0FDA
A3614E9625262CA557911A3715E19E727337FD161717ACA3838391D7BA0AA3D3
5B278235FFF9A707E8DA8346A31F02A882A57957CF45F4702A1B12C6D0D4D06D
60DE95C9320FDC7A96133B2E41002B7E0B77FED73C709870C76A407B0D6DA25C
2D32546CA13079ACD948E7C46996781DCB6D47BCC998EAA31C7FC9B87C56CCC7
9663949F3262618C7BA7A1C2B8DD85B44E916AE2EEA40306E65B1BFE6F1C32D3
67E8EA1C017E57FA87ADD4B800D58CFC32379D202E9FE870D53EC343C11BD464
722DA2A2C0601C57F5B7B1710191E642B07B29D9090363D04C501519B6251A8F
DFE9CE7F71E14423EAA5D1B9A65239769FAE72FC43ABE424CD4D8E96486653BA
CB4534CB1D2FC973C842D546CBC8A73D44DE3A648CDD8D7CD4AD75F12406CF99
3C2B35B0190FBF4CFD54202F89F37C409CC309E90A8C6DAB6DFD4349A669A869
33F8B05B9236B04C3C0C757CA37AFCB854A16C70DE2A317DF81F62E9625582A5
0F194BF2331E77DFF9D2AB32E9A21F3938325477FB5F3A48DF5E0C7CF629734F
D72535354246F33B2E2F7F4DFCEAC871D469B888A164B82D3C3FBF6D1C7B96B7
26329E0436DA0F252A04988F18537E639DCE4F416409386A5B5F2C28A991B452
C87EB126A88A279B73A0615F840608A17BA22DCB2B7DBE27C739F5308A5C440E
8ED21BEA735122C136EC59E296212167ADE22B5728F5F9B1E60889D97FAC2C76
AA10A3967DA998AFAD854F54E5FD4DDA0AED726D42547D57141860C239FD3649
D4356058F46C35C1FDAFA7C125E2870932F6D281F0F9C45F9969A88E05652EA1
2974AB97260A19A1BBE5F56FC10A1C2CA34EFF3A7D45FF75AD51990C8285E8B3
0A95FE7E65D68DF8951796A647284FB192A43712108520D9CE9193DA216221F8
42FD0F3B89EA2EF2773DAF259E6D1B252E4E34BB5437F75671962BBD7A94559A
898DC36BEF9C32BF4B4A49F755B02FEC8E3332D66EB3AE461EDB7CC7A45957BC
5C6B1992738C9E4ADD5C79D026CE9F5B78A5923B07946AF750F7C238B73E3A39
58BB81CA51E5B0366D04BF6D10592B7BA0CBA5F592C2678CD0084F1DFA0EC2AE
8B857358C6C1A92D37EFDA08769C8BC0E182385853BA36522CFE03377247D25D
8054506521227674339C79F366B6CA9EA7CD06BAB56EE89D1BA848F9FDECC660
4E7D488ECF152B69493B439EE436D6B0129745977065519D41FEA05DE277A2B2
48CE710A2BCB814E449D98B39FF349F6293A9CB4FBA6233EE0130F41474CDC6A
18A4C71B50CFA95367C68E8BFAADF433CE7E512C83ED4415BABF4A3FCDAC2606
5042A6B6F9FF9D7A179C3F80BAF10530B2AD398A9F599F6CAB9DFDEBA1E28A49
44761D39FEC2A82A7BECA81FF86FC6FEE98E026BC5B3C51E92B1C66D314A9A4A
FC3B021A513BC9ED89A17D8CDE9B86BB0D7806B03A4DBB31FE1F5E6AFFAC00BD
24FEFC0C19947A45ECC6B9F49C8542808B5872580E379881BE02909D7E57B80A
D9F00ECFF79C900C91E6DF15400F35F789CD093396F0E34A65711D76468FB113
F2B977937E70B7214069A06007D987D5EA7A52F33F5224C40CD4580FF125D61E
E0B245E0F8F818CCADED6F1559AC779E0392D91D3A0A44AC9125D7EDA34092D1
CA9BE1635F769E2AC1459B0B3AC1DC117FA4734CF5EA532AA886EC057F20839E
4DDED60F0FB05126937CA473A1FD2E01CB1197990EDF8444CC83F1AF7CD16473
0D24D8518117AD200014839545B1078F38D72C804524723A954072436EDF60F3
0CD8AFF952E9BAC603C498B2619C7CF300FAA3ABADA58D1BCE5C9DECE27A3675
27694CD9756D66B87C838592C36459977E2D584AD27D1DBB1A4BF6668257CE14
EE287F46C60CC2A3AB16AA1EBB6B8575DAA93C68EE3707E7971530A223A4364C
B6B5B6999406C02352BA428B1F2912D6B2A265DE09B43C28CD6FB58B840C6D14
EE78FC84B1BD61C526475C31612FE6821291164B14DA11FB16C0E671A6104082
94D493CFA21133E594461685A92D372D4ED3F9DB786D7E774C01BF11EBD9FB9C
5A32E9E1009D6DE2FADC06F3CF9BE775792B1DA8F972FBF7AF89198BE6437E63
8FA41912FE9D1BCF5FB93455A74C7E013AC550C78230F9DE248080A91DE7E31F
9952F450564F06CAB105AD6F4C749DF90ECC90B0ACF56291130D4859BD3323A0
B709F40562D440A990837CBE55E8818A643F3F3F88BB227E90541B124C1402A9
F69CB191E2F8FCFF6FE23A3ABC8D6EE13776C0D178A77B3B6BA95434EFA3EE1B
88A190668ED326B9D33D83EA001C76B681675F5E4400D758C423D376E2C5BB0D
5955166DB67AA65CEE2C6023FE17C89D4FE44BE4E1B2E0FE4EC7187F9B098903
67F06395ACF6F7748505595AD302E2926C334532B539F70C0F780F56FDBB525B
4489FFA2003C002A834B09CFA0C7D398287E439A0E82C5E1665B969042288C85
5438125BE7B940E0AE7631B5E7DC5BBBE35D527F40F2E194844E76B625836C94
F281B1AD7D57BF8634019A1D2FA36F071B13DF2E7B7F51CDB887E87906C6A764
A1B3F183EE56525F4F1B65F7BA3BA8AACA01DF48232C7683CEA0AF36FC2EE39E
83E4AD91AEFE52410F83C676E7AB960B128A6F37BEA6F0D11C026236CBF0687A
0B5F072E7235E9B1BA19B953CE9DE783BE36D6FEE02B410940A6DFD0667DC444
D6342205506A827D271A106F52081FBA3E79CE29FCA5C502B38C86D8D507A983
E08BACC0B12C70FFED18061145BAD931651A4B1EFB2CD899397506DB4D41EC26
6C58862DC40E95DCC8CB845DBFB1EAE737051C55625AD1F9B8F9966E65A7C94A
8FEDCB1E5774AEC12CDA3F68A61B0DD5FF9CA582782EEFE33336AA0E1ED55B70
BC0079CC996AC611A934830E2723FD0D73DFB2FCC6CA510D1697AC1FF0A19C37
2A973093F8E37A06EDE5C5A6EA04FCECBBE13660D5360139F7D645E3E872BD8F
6DAD70F1143917DB990826700ED99A5A06057CE8CC71AA4BB84DAD5C8732A428
500D51ED24B582889765C4A31A899598D22EA55DE76735D3C2DABF79EECCB514
DA6DE060318DA4875AA4D5D876DC1E45FF444BF34C3801CA43585E8042312597
695CBDD171190EF2BB866F5AD692F5610B75F9E7C6B4A4F614773EC4E214A5FF
5053D505D1698DB2175A63130FCDF172B81134E27BDD3D5650CE735475FF6F23
24565918F9ED22231ED36214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F09BD
C698654A19505809407145D7E6BDEFED1654AF5445ED65BEEA091F0BDB0192AA
6F79247BD59C464A26C4A6C77DB5859BBEA15F12803D179A6639E51507B12ECD
D92FBDBCD40780F65DF7035403CA0F72E4CBC21733BDE3666BFE00737540B217
45BD882FFECB8914A1E25B2A8B29385438C0C2899042585D01A59AAA201B4F06
C7E8832220114171A9CE391BF6D85443E394086F1DE6749FF3C3A73B7596DD9C
1EAE6D72382D60A1A753062A05C1F13508071FB266A553D35D8400664F1F2E0C
2F488BA00D76ABEEE50529E1F15174DF4AE9067EC4E67725672D654E025ABA3D
75F1EFFB112F0A4D9FC5B6A797EF69C179AB030B3B036DDF4CE43930119F7238
E314A92695B19D53BE260387B025179C6C7BCBBB8D9714249A9A7C328D798332
6AEE430D9DA4B82969DEBAC38EB82CF68A50A7547F33342D74B1A09188847B21
28EB8B139A5FB3EDF226EAE803713C525D6B12C8BC41BF641A35D16CD267DE52
F7E5C1897FDACE081033C2648F76C255145D67DF638C91D167E0DF4748B39BBE
76D32933BFB3185C3972FFB745A29FBFF0662B93B2096355DD002464B9ED9AEF
4D66184522F58D24B4AB1D4492ECFB3F7AF5C3ECA8370294AF59DF70C60DF4B6
A87B879E66D5E87D245B9BCB8895997A3F79B52E24284B8FB0941BF71DE5A8C0
4AC209B7BFA142B94F2EB8D997A7019306E4878DE4117F053629B2390FD3F190
57BCDC87EDF81DBBD12746885EC0B93C5E85D64F181AC6D7355D4D5AA7DB63FE
A574CBE1D26BC23BE44F55442C4053B30A15AACBDCC8DB585D05EDE05CF333A1
23C16C7092BB267750FFF122216DF93857BD2B4ECD4CF20CCD8A05E35B39244A
23353BDB0ED9F3BC38BE94F6BAD2948665E1E90F4DF964B074E18AB38C3CFBB1
0E73DFC16F8386E6F6D836836DFB68ED5DFBBCCF8B2AFF0F9F46C771019311BD
A7A9189C3FFDC39DA3D21E8120C2314D9F6E24E15D0F1F5487991B2B4E835F0A
F842AC35152F1EE78072533F8900CC3A1869BE483058A44C6420233E4952E6F7
7BDE60B62F6B6B4DFBF3D68CE727E7E7B672905E7A4222ED648A6CA0F8150494
A7C34D80E73450462AC1FB753A41D8AEF0DF67893C1D06F375FB07317E68EF2C
3F555A3B98ED30070CE54B0FF3413778F96E299ABB918FF662A5EE19C1360B5A
CB813FEDD59AA702C74C1847E4DAF52019012701B060002FBE2B8C8E6D21C498
D274ADC1D97A103530EFB969DD8211536BDAAF2D5EDA062C703A602B82325F6E
E7D2BE04AC7A4DD539B975287260E0FAE00E1369F7ABE64B951812CC87F0D89F
E9B2E05B20D542B7E6B5E994C1B3ED1FAF22FF83550E72E982744D0A5A42553D
7C524A30BE8BB82D12A18D2F3F704287AEC4700BA0CEBDDBCA5E9945C1442F35
15A9D364B1CD13DCA3D385B83499C715ECD7598764D7EE55BDA077E525640CF2
11E7A3B8DB7BF746E85C1E9C7FA443ACADEE13915C5CA44FF41CCC2BB9ABB47F
DF1D9EB5ABA942FE0F7E1CC26DF0F139B04229B1035582B7C887C1B92746E826
7FA78B9321B7497195A0D094F90A1E099E419B99BBB377C5F8148B1CD606419D
43D12BE60CE68E33B5A3213250E4B49D16F7F31113D7BF4D547CDDF09018FB64
C22D9C4397DE484F43E3826342C8BDA2D0C9BB5B332AD8F83F6F3A654567D303
E37C6624E386CE628C26CB1751E6F6F923C9B8586CB87E1F0CB4457A26238935
4F9F6F408CAE1E41803749A8A0F7D3AEA12044D8A718026FA6E3BFA81B903519
E95194C31433469E17CC7C9C82D5BF578A0C3D7F1620D619856345A9C5B500C5
DE45A3519F7136A882713399C831384FA126952C92745D7159FCDBB10B645927
3EFD03520F2483A9E3BD91246D471693F2DF2608C28329316045535EB920362C
F4BF60B733634483F340E20E3F99A5BBB4F12FD99FDDC7AE6B9AF13A25D14ECC
5FF4C6D1DFBCF8CEE94B29CECDAD0A2D99517A35BC45189DE3CEAACF4F9348EA
4C30D85A5D241FD3677E133346B521BAE646C275A7A885270867CC04960E6059
F6BE26EBF8CE5452C6167A41DADA6314E14651F9985A4C77BD0A1B23FED875B3
8F49EB7EFAA620BB4EF4C626CDB942A93BA1D180C04F0FA97BAE9A50BCC18118
EA0BE3CDF7AC503886D9E2F8714AE0B564BEBE2FF35ECC4DCCD14C35346631E2
EACB4EEA403DDCAB8837EB696BAC4B915CC97D8C7016E0D6337D8261FDE80C9D
0FDCFC10ECF31B8DFB66FA8263682ED8AC2ABC213F81757FCDCA8EC6F0E9EA33
8B210A9FF5399B9AEE28C7CF7AD74A19DF3EA014B4E23E80FA2203D4A5833F21
EA8DBC1E590F28F7981044FF65085EB66B4AC1C4695128EEA482A28A5F2C63B5
0EEC8434043A1BF5F4898A4FA7DA25634F0670E0F7E93FD6A5222834D8F7A813
8941F7BE5AC33FBD8E3A9A53F87A887790AD66094709274169E75C3923B20AA2
7967C460E7E19AA0D75663AF5CB33D5641B1D6077818FC7AA6950D06E44A8621
8B56D8558A8584065890A92678C2CBF8FFD925675379569A1DB1723E07A38533
3CEAE390E07355FA9CE1F786D72DEBEB61EB4738BCA0E82AA803B8790D93B0A8
092E176ACFC8C5A4031DBF1B7A9F82AB973B61627ECB39D5BA7F8E095B9F852E
5F33B05454C125AF1B4CEAA3CF90E2897690D4338A3D9785BDDF5F1E6350EDE5
D2768687CC471A1EC7186D318D849C05B5ECB379B26D01D8ED2B2B70E658F0C5
1E9765AB5BBB8DA11F18B4EBAF5DB938AECA1124060D8D138F01FB4731868BCA
A1BF17BBFA4E9D98849E6AB20FAEFA93C3F0A0C9A44755133B3AB52F2E454991
A62FB03473A98E06CFBB05F1B2592E1FC306899AF4EE52EF7C1F4F8E7782F0D4
ADBD585F3561FC58B2580B83DC0102166269AB6A4F5B7AA1E70DA07C43942B96
4A6D5ABBACCE69775DA6C5BAE183E6417F2609A9DF7178D1CF77A703341F4D58
7F67560342C8A67BDDBD597BAA0DA4E10D0347ACAFBB96F3139136CB9924F00F
CF022C6BD7CE581962C9DE36EBBC35A798B6E803A0A99CABA87DA35B532BCA16
C510BA433E0087B2FC75CAD18883113AAADF162B023352069B7DAB0838806C96
5228715A35D8C7887C76374C1C424F5311F990C5349F494200A88FDA22E24F5D
5F7DF0EE67F442D38E543419CA33BE1B17D63FDB90644A3A2A34D7DED6F45696
C589BC74CA556158DA32EAD64629BDED7B52C8BEC94347685181CDCAF33D89F6
52D5C6424C6D0C85A86EFD1C4BC76E61923EB04DB1DFA426E752C197FE11834B
40EB00EC544A2B7421DBDDE68976BE50D33C466E82383BDDCE027F1E0911D111
59D19295A351BA9BBBB97E528231B6631AD7623A9AEAB758F9CB4AC116B1443C
C175969871D3583D1F382737498D12830A3B1078AD46A5E7B7BA4A07CCE4F9DF
3A174028CBB2A2717C97FF0F700841CB1DC0896FA2E226B8B932A195CC0EEFA8
E39744C2315DF8C43E7D292335BF6663088E4A13FF65FB1A4A5E6C8CFA2B0BFF
A70F58A3967DE26F93EB7C1019B8A18D4135A08592C6E4677E7B9C335167EF75
28F38861F2C51F5CFEB356500668E59A7C8DF2AD0123EA18D5AB0735D57A62D7
8BE3700953D590A62AD8AF0F977CD9FC6A5B91EA8F6D5EBB10BAF0E8A484D4D6
88683ED2B878504A44F08555F191D3B52F4B6722BD29396FB188AD6C8ED2DF80
D71616F96091923906FA86E7108229008548C55836CD7B0B94AADED518B7E446
C30415C1DC1439CC314F9940AE48775B4094985B207F8A83303DAB5BCBAF2595
E818473AC05D81DB7AA11041310FA2C58E3F796A58FD029922164DC90A3564CD
D2050E48DBF0CAC2692113CC15C94DDD294049748B473FD5F4AE9C38CE4C8BEC
6F031497B782C0B6094FD0AAC0858943DD3B8C2B0964034C5D6F1B058909F25B
C43E76DA0DD6A259F1D526CECF8B700CE9C0415271514ACFA19D2B9D2E27B7CF
ECC16CEAA06FED505EC60F7460026CB419574312763493E4A54487A84A1FE082
6D7F99326A41155CFC7B476D5F69FA82D22266532F87CC8DBEF7EEBD525766EC
6EEE4E1C968B32BBC2E17B75CAF20CAB7938D921D333DE7A725846606A8D52B8
4515E85BC8750AD386645658CB9C445FC32005C6BE4758530F02C10DAA800CFA
6814F429BB87283D668AE7CFFE59F18F5A18743210743F0C94AA0B34B1FA3CA1
23BAFFACB6AF74398500FB30DEF0CB1DABFC5730E478369E2FC89F2F28C168E6
B988F76550571CCDD985665B84CE4B056D177D9C8AB6DE487AB48B624C5BF95D
BE48FE4DA1BB5D3B1B4DA1454568CE4D59328EC8AB3867E917C98CE630833A36
F018B6309FFB7C1C459BB90886A9D3F3B3D28B3D3272BEB5EB9167EC6D8AABC9
772F8502DD9589879DD872D4747775D5CDE5A55559FDBE6A5E05F302E15CA31E
9F36660AA3F1F95F4495B74DAFCC33DADDC64D2A8C99DF087027EC2EC8D460FF
1C2F1DAE3862CE6FC4C59AF4C51B407D44468B54350C17F76093F44A497312DD
E006B19569C83F1DF937903B6D1F980F1795301F225B536BCD65DCDDFD47AA35
3A85F30291FED98B2CF78378088636FC9AD91DF53641646626F2893A987DA9D0
A45EDB6812A309A42859ACDF0EE09981F1AD5778B2FD0FC05CB4C628A1F09377
B85E9137309D89A4BCFB0B711A7715808EE2C87099D8F59DB5C251564CAFB813
D17AC2F5FF8BB3F39E0D945B77D4446EBF02A0707CEABD8409B7A2C9292E8625
B83749A64A46A949F02A8CC65CCBC848E97C784ADFCC6F5DDA818C0DD6064A42
D1103D2DE1F3BA2F09E2849516AAF044AB17C70003E7F89D4B6E89299EBD9AC1
6B2591FA6B63F2E6A01815F9B9980218440542C80B6CDC613154C5054FEB3993
A344A7C61167BD4FC57CB4689FC0FF821254A2918393950E1F7E818D51212900
AAE39E289C13169C8A29ED47BFA0B135E0989C48F28FC2B91C78AB2E36400C80
EDA4C7B9E7AA036C519879BD2073F645753CAF99802B8522CD9775285CCCC1D8
661C4F061141B6A95274ACD894B73CD1297C6FC49DFA3370259AEC31E568DAD1
D8518F68846E3E5386A1D75068986D021414BCAC5CDB7351020E43047E47CCE0
BDC342A927FFF8372D40E8D85CDB32DFDD7E7BA91C053387AC57104B86FDE522
A1C8F09A14C80C79DC71ACB9334B3268C2FBC093F5F559269B9DB1B4B788BE82
AEBDC173307D77DF3F6650547EF5C85F9A53572AD9D9D1A64FF25413026431BC
89203EDE698ECBE3210D354EE0C9414A490786C04073D1339783EA912A18284A
FFE60A0C7A2BFEB165D5351D5AA871D9B9FFAC965ED71736140A0D41AD571329
C7FE546B4F9824330D5035BBC540EEBD08C9748D66FF8EF5DBAA618F92A8F69F
5768A39B5ACBE7D7F96763D892478DC85F812909144C30A00A6E010B4220EBFA
66EF79E0BFADB4080BBFBE2F6D421DF42C12547C70BF5637F6D5E46DF0B16D33
6769F99E923C38341D5FAF91E5BC1FB3E8F0DE682EA9EBE4DD2E4ACA345BB401
A7B127F68F2914EEBE6FAC74BD740D39ED27677630DB2FC3672EC526882D9E71
C6E063EB96C881089E4366DCEC5BC3A863FB50D16C4EAF37E97C820EBD8FC8D3
626E4B93CD027EB52EA2DC22668BEF510B0A80A965D3326B4C657D8732B44789
7BFAD3D8BE90E83FB029AFD90A4E6E2DB8EC03AEDBB930E1AD42FBDD66C57BE1
3B33991E1F3007198626128C206D893B714F9B3D74F03863C3388D8252AA45E0
15ED221483CDCF408EA526B4E2A1DB405771BB62040772112A25AF16F63D26C0
3EAF58E922419AA03CE5A8666935E23FEE40AE12FDE6A8AFA6855318C5AF0A01
9E3732C1BF95ABEC10FB9F4BB2533D15A78150B1C06AC0DEAC39AE796C05B223
7F3D82444449DB76A321EDDE455AD5D57D49CA6236D4718691D29A7C81EFF92C
A74814CA6FA09ADAA599F9B9706969ECD5F66C063C3328DFE056258AA295803C
C22D48EFF8FCF639F99E1BEC5F1C147FC75D2298D60C28694C3A5C7F698AF27D
75012009032DE886A293B5E69460BCC7D23E61748E7199919E946221D0FDA7AA
A23833D0786800BACF3EC5346A9F55CA85A2703923E568698AC821BE0D84FF97
C702DD5BF23F40B2BE6DDC4628CE6AE144679CB5B7891A200F9E4CB3E69641D3
795A7BB4C7D64AD87E1396220F4A4F4055EC36776817C13A04E216E5C960EAB9
61297761AA5581CF8198B8DCE0E24EB416FF32F3332E50A50575F8D845F91C98
768BA53CBEF224B686312B05F7987D3B29988CF1944F1FC1403C58AE645EAF60
76E51EC18C1E24D62AE767CFA9423D6E3013C55CA9568422FFCB9D542F496279
D0031B96B8C22B71688B86A23BC5ED72566B251BAA2C14911606E401F26F9287
A0B018894A4449EE8BDA209FD40FD12DDBC962AD848FD2412DC93EAC5DECB82A
6507DDC19B252F15EEF611385471074CF46561C7F6A2D05054845D35C45DD484
4A79D2D9F6A7D6A7893FAB06A5C2286BD39F93263B7931E441CA784A02F5FC19
3E0CC640D9DA666114E5E1FBF1F0647AC6FEA2FC0A2F994BED980634E1C7A3BD
D6F486B515B3749F791F56CCDAE5AE37E24BE3ABB2F015DC68EBDD55E0A73C8C
84EC831F4126E4421E4450B78055824D97CB37A2E6F20AADB8CB3C098305731B
ACBDAC07385C015CC4966077
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE366FD7A9FF7917C89D789205E574FA14895D60
74559B3CBFEB1985C97933EA251CD6756B1C77F32C734B1495D101C764930B6D
AB05D3F178B531BA4517043B7E79714C7875A4EDA1776BE2AC7C444D14A6619C
55BB6A7DC766CF57D92200BAB00299A3D4C94811686FE4D0C209D55A87AB4069
C45E643B12496BFEA6739FD8D6AA82B6494AD7E58F71C15A52E0752EB103F076
AB0D0D54DED272E804D9D9398D8241897878F5E14AC0831CE220B4B1F094B79C
12906A5E10F5DE84DADE948472CDF02B7E3A9D9D091C3629F0F7B80251A75C6E
B369BF35341D67213945A95CEA981FA7728892864BABC9D8D678B05D8513B402
FE4BB0C003E7DA5BC72A74D9FAAC77564BA20BDB918C377B44F75EFE56488320
BC0E359A549AA416B3931C0C10DC22F780C2C3F9C2025AB3D5816689B2F266E0
82800BB466E236E4ECFB9C698DC7704085DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C077E757E3C8ABFCD6770402B4F6385812E1DF
953E18E8C835D8654B22083FE1B07E38F1A22DB03751EF775FA762A1B799ACF7
11607ADAA5F878BDAB70F16D002A079862994094D807D2ACA57AB522D38931D3
7A7A69DCE16AF779DB5B1F7CF09A046115D45493F7A67587727B64D2D562B2B9
CC7FF4EFAC1D126E5A266CB4F99CB75BFE4D05D8E9A9F4E756032E0C471258C4
D46476815F98C8B106FD26F9594CD10296D1AB863C95186206F7453C174D514A
9C4390CB61CB54B870B7C9C0705374E0C8E16ECDAC5E64886D46FD31A07B390F
3CE60CCD246ED0E1CADDFDC27CF78E392506AAF7A5C8A21E06037F6984666212
C503A95B3A733E367E50FAA92A5996F8CD29074B9810725BFD45F14D03C5E6E7
9C4C60FC2937DD6AB18E16C2BC75772E05F668E491182D78018466DB22AD6FA1
E0A3CCE1BFDE234E9218A565FE2896541CBC416F047B15A4A96B2772BA8BA179
B0D1563E7E339DE03FE1F01FCCC7F5399762D1BC994E94B6179B1A7B6405974D
02A8D6C95F5714B2886D0A38261697EBFEAA0CFC2742A66EF2BBB6B29D16487C
3CFA6F892AF0D577E6B768F35E7566E858B2CC4E9DD3BFC7614951CE0EF4AD2D
5D52433741A0018C54C0761615331EFA46418E617DEDFC0E4077566D4E41C8F0
E927101740E46E0D75E77A06A2EC0B7193DD414AA8135C8E1DC709AD9E14CF66
9C7B38CB2D16EE53FCC59444A3FDD875111F936A36E33A15AAAE3D4A2A56DCC2
A73404EE787C2924D1424C444B9D6FDCD0195626B9FF52B0C786DBC76C547464
EDFB81F79E5D7A9AF1DD9809395C1947A6A323AB6C18D6544248F253F9761EAD
A629C34756E7EF60BA443FE0DFE3C33A52F86BCD6B9E508841110C3BD4F48D0B
BFCF33E5B44F23F5D501BDF6EDA259B22403C1F1B08901EBE7607A0A86C523C3
6EE379B8E45E3E72C373CBD756881C1853879EB79905E1D5337F0779776AFE85
BE8A59526694A0F4EB056734816EB67AF788FDFF37ACDEA67110CE092C31968B
97EE52D196EEFFF2D9E6B8CE8CF9F32866ADCA85FACC46CC87EF9BED29CEAD50
C3030B6E9C2D912D0075472C63ED92044B80E0D7A1352D7D4274677B103477A4
3BAA9F24548D00E722021FAD70D99E2FCCE6FA219CD5E4F662AA2B647AFF0572
2E88E6320A422C7025D6B302F544269DAEB43889C7D20B7EEBEBF6977DFA340A
92FFB46990A5043226AACB842E7FF72DC5293A157708A3B2A7A02BC29585F879
92AFD400D2F662E02D1897771C1687BB8C208C8A4A69B76313CAC04F35C181D3
4FA65B3FD76716D40C47CF247250C134FF33B14F82C1C965993AE8B5E671B1A3
163757FEF67C6D1DFAA88D839EADD20F9A893744085F176E43E1878F8E885A6D
C2AE4C627276365855F11CBBA6D747BFCF43C351E43963ACD7E7868CAA4488EE
815D40E28CA54C82147C048B07CFE453C8070B0CC35C26E83223783B8FE73709
1B05A3BAA49FCAE6E32DC9D1AED22C2EAB692AB021E1FE2A443AC56DAFE0CA14
4AB9E02C217AD13A92F67E852DB3FA36EEA39B8FF07CEC6D1BB14DD1113F9D2C
861D96D9F2E76DCB02C1A252F0C02D7DC108E5A1FA942A4E3E66EEDB334BC61D
9C644E3FC73215FF4B2EBA5E902D9C5ED30617417F403ADD5B2D4730192EDFDF
C2778F1D8E17FE4348663C76B4E51D6A47C73B4C28293307F22EB28C915A6423
433A18036515A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD32059846E805477
C60F2A8D3C80999E98D913AB360865A27D4EA53FCBE67F188553AA98F8F2F937
97E81A900B6DECE40FDF803344CB844CCFF0B65999F5BFDF0095599C65393BE1
1269C8DD7247C96D6325232568F8FC1756EE0BD6BD5423B5C4C0F0053040E40D
34A3DECA901F57E05BA8B4D829DF4684CB74785537AE120CFB0644A2BE90C36D
A268F7B58E4FBA7C92DA29EB132B0B4ADD1D974400A8C2642147D4B652A8F1A7
E5B9CC8FDA657C5FB7C1EF58B1C8DAC7BE2803411D64FE9BBB3BAF6B285A4CB0
057689E72DE1D7D5770F0E5B5D044EBCF26BF1541090FDE196E3F97A6B18CD14
5D79E430CFFFEE1E8B31F501B401651FBC69B8A8601114F0F2278479E7168F2F
4E058C0177456811B2D0E37FA4713C65620D09F8EFFE7766EDBD7CE06A64C4A7
9D37E9CD14A077B05AC1D894BDEC87BB96D4ECB7293D33152BDA977F2CE166BC
A591084EC06E047461DB629E4877DC526ACBDE6CC483A11B60938F0956B76313
3C9671B4329C478509F4DF6F8293785364A5F91974096C801AF3D07AD30F9931
A19C1C8ED262075B1588F5199E88AF05E9E6696DE4E39CA05A8F919A4D1CDB28
4079E0C1BBE42D4E32397B42D6F3E389C51CF1551EBBE8B2E16CCC5EFD174057
C781DFD270EE40EAA64869B9F4ED56C6C5CFA68B814B94B7BE0A5F2AABEB82C1
565370384853C2691778FCDD2A17B7A94BF690F10F9FCD090D1108CDBCE3878E
032C863869E5387237DBE82330DFB8C9C15CB32399943E3FD64FBC00EAFE4889
EE5F338D3C4885368281B3C95CCE2515426733B7CA2FAB28360724E0928C85C2
1A9F5D5DFCCB6DB57706DA244B8DFDC8661514CDE029EAA738FC1A57B0A1C2AD
A3F755618C93209036C0D43F1AA65947620797F020956A61C93EC15ACC8EE5F4
7D870C05C419BDE36680C8AD10A56C33C4B06DCFF17C02E312502D18AE3897CF
65C8389617F534EC699BB12C33FA751273DC120969CAAF54CD5F89FD89D153C5
8F0D6AA11BC46F08EDABE22B162DA9A78C234FA2E075B9F654BEFCF0BC932ED8
458A998EE077C857CF8618ABBE8EAEABFBF6919D7FFD1E7D0B2FA582811CDA7D
EB0DCF3D7ABA56B8ED4E7AF0F4D8740C71D0E6305207FE6C57D1934E148831AE
7C815BDCFDCECD662966EBD8DEA07D507CA97CE92E3DAEBBE3858C8E8D7E1FD0
492315E37E745F1478DF48659E20919F519EC7B7BED53081682ECCDA4AA2CF82
9BB74C20C39E1575675387E702B3E24B1C4F7EAFD43D3A111D7AC375945F7539
83ACE30AEEB73BF979B76603510EB77DADC3A90F91F7AF5E8149A4D1681D4541
0BFB5095AAFE9FF793254C2C28CB6314FCC53BE27CEEE5696F68966ACAA484F9
773109ACA01B3042CB34B1025509BC87450B4FD9E8A02BF6EFE82B103889A61F
D11075AABCE9F2517EC9B53D7DB5B1427919FAEDCC9135C58F8F73D47D434DC4
A4E0C28AD04953EEE73AD08E20791CDD3CF827BA903093EB249BC529A063C6EB
6939B4B36C663316967E5066FAEDE5F28AE43E81846A8D10F604E10AD60B635D
2F72CDB12CB6403BCC012322BF86C75D542DF2E2EC862783E843F96011B01C87
B8BC5CF59F64B790DADE8D58756157053F80DC904E59812F6CD9F83F21CFE121
7CF272748BB9CD75763CFD92399C24EE8AC85E4D8C211613CE4DDA344F531A3B
CDCE5F5677B107A435EC6BCD3FAC8F71FEEE1037ADA3E6DB9912882ED7CBFDA2
F55709897682661851B3D94D71826575CB693DD1FB755C859192C2623460ABA1
60A991010E11E6D49C77FC64188A09F419EC0057F585DA96CF1B5FF8718252D2
28572ECF09F2E3E684094E239500D681BACEE52F3613AD72A728358177114D00
C71B77875CAB7C40DB042ABF4E006F303EADF11E91B8D5D93BD8E62D195C1560
E30A51990FBACBC381E52FCAE577C7EF0A0C76483862E36646584C5A5CB064E0
63E0D8BC8A0BF424628BE6D00EC6E0A19B83B0FD74090B3D09D499C3B01F3D25
D6130BEEB425D3760296EE13DF23B383E39712D0220D7F2AB399B96A6577209E
606453DD6A5CBCFD4C333CB3DAF6ADE3DDC4FB8F46BDFB4533A84EF0714F19E2
25D78599C8C9C5984F546EA3EADAC2A3EBC99B93533EFE51CA7C66492C0FD34D
B08EDF842E1AF58A09B085A9B7FF5D5C2D52F322CC455711C0147CB76F4723BB
02264F502DBF2F7D2702DB352D0874442B2074859EB49313BC27F602F8CF97E0
E1A56C6BD10BADDFA6BBAB805D099B9BDEF9B206992FBA1B6D9146D3A741BDCC
CB7EC1DF50956524C5E3561BDFF89136385827B7980C2FE0ACB1C4746B4AA1E6
632B22D5107325266CE303564392765BEB8FB688D50EEA68DEAD0613A62C3000
C037092ED0A93F872DC8041D54CCECD79A73BFB38AE77E4271245E983C3DDD0F
1AE8C44FE31CEE80C0D8954150DB3E2C7FAB236758EB90A8F016953104BF2422
B1B8B7C195E8AFFE8187CE084BFE13F58D0A5B2A7C84A0897807AB1C2EF74DF8
4A95B6583129FB837AFE9E5EA65226535F722426F6D02593487C2944D35418E9
E9DAC3479D3309DE69137F6C51BCA5AE6FD2F0CFD1F8470F0DE9599E8F9F8AE6
60F4671FA87B9A81A3249FCD0540EDBD9496769CD6DF324E2490BB9D558E1BBF
66C0839F5FF759E791EF3D8B448B525259BE9799BD387E88D61748DE25B2081C
4DE68DA69FC77F321FB7E7AEAA45B2F56D92D0956BF321AD859D4EA7E3040F65
15229FCDB226EC73DBD346DE3E01D850B008318A12C2C09A0F32C2954C689BB0
4A12A787BDF0CF24FB8371A04B2624925CBEE7787D68CABBE011734EF8929C90
ED629A87C033A5FA7D5041605D5F8BBCF524718A9E199346B2D3460E650FE576
7B20B56DA1BEA9494A20B92014405AD0EF2B7E4FB2E203561018F0CE7427861A
DD075B1CE78189E52FF79091EAF4D42CF6A8DA8C721384136291D57736A44549
23D4B4B28F24BC26C20B50359FAADB4C33EEF1BB68989E41FD8401DE1CFF6165
3AA43DDE5BB0252BEB0EF9D8235977B315C6B061EF8FAE7BFDBA7D2F9B0C79E4
635A10CFB39EE250AD0FE405863E670F03DE2BA917E3284D54F612C02DD4C626
D9EB8BC6BF1466CBE78E88CF731D3304A8C76D1382E6670E30A18369FB3E9835
97014EDA4FE2BB6704E49C95301F96218CBA86DC8B9DFDD6E40CC6D9AEDD701F
F0D0FB20E0F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A00C9911F2B53E
072D324ADD764851888781FDE97B26FC79BCB88B7D3C2AF94919F4B9EA666966
6A2E0C1953284ECAED1DC2C4FA947F9D7FA8CFD3A13D2D1BA728E4FAE8384026
7D7D1A70288C3CBA2FFCDF1A4368603D6B8D44948D231559DBD1FB713E6646BB
A1A606F7BF9654CA4092035D2304EC4F9083716CA7906B80486BB5C790891D91
36BEFBB6F17E8DE96E921502FB19F0C21F0A4E7E09F669BD531EBD40F60C2966
E53B67F590AD3EA1E18AE4ECEAA3DA7A33AE9217CF89BE38E4310670F118731E
9C2DDF6A86944B3BEE596931DD7D5EE5949236930F18D4297D63B8DC952C181A
02D22FB85F961C7CCB8ED31F32B16F50DAA186DD0C099E81618AF2A19313E987
E0973C2576F203637782391C3025D117004E920FEC8042B8D1015235F4D51C1C
753EEFDD6ADCEB45DF4D0071374A3ECEFF717EAFBAF4EC7B29B058EB744414BC
A564B8833B0A3B7785D00C79714D6FED70645D2D05E49BB9F92C972E327817D3
BA0E2BB98DBC10417A546A8A3A0BD6EE6C3F9F16735E3BDF0CD8E7BEB53151B2
95365B9B9E21DAF7849F129A102D85699E82645BC6784423AB9BD63ABBD68E52
7DFEC6C96CF09019822C2A7402CC77A439F3B62C42FFFD53ABAF7ED904BC8AE2
0B2B15F19F8A0469B8E47A05F1DEF0CCA48FAB214208284A8F508D04F0CDAB58
596D1ED1E381872EFDDF551E2B35040B728226DD0FD14E7456D7C51CB856383D
1AABF0209B70104DD579AC0D0507238E2ABF7760B6EB83C36829DECE216E9E70
670C9A877AE16BC30D56A0B208DA546903B801BE47F5C9E2A6D644CA8735A4E9
6445BA9CEBB627718F8588D56A556B9279FC9194E2846675A21436F96354CB97
442433BB60C7875CEC5973F95A8C872458B63F686FD0995DD9B835FFD0732856
5672AFE4D260B3C5CBCDD213E55A9B4366459001D65EB8E3B97292C22851E05A
AA1B3B099DFB356A8CD7124C119706E8F6070A92ECB856495A1C0713616B92B7
645170A6A6B6C1A85D0058926158D71A1A46FF5CD5A93E1EF62EEA51B201D3B1
4BF477572F4540AB07F0ED98F38BFDA1907B8DF5490432EF00530234F1CFFEEF
D6DE3A2FD816398A08E4D6C40A823273EC3733F90B797221D94774689E83E540
6F5D9554C1284190A148F9AC90ED7B624CD4E5EB652F778F794216517EA0F75A
63CA278DCC38682E1BC6D134930242730DFD17CE492F2792469D4BC8FF30DF62
EC6EF7FF5542CE8F9FD58823AC76A1F343BB3E1061CF4DCFCFD87D706A308586
45CC562C47F2DDC9632F3E1296252F084D6BB74CAB94555001FBDAF0D485BADE
EDCC18657062F36EBAE129B92DA67D4C205294597B09384BC11B0F1096BB8B09
A82CEECB50F09C029DFD240DD11799F2F6B3FC0438504E4B5A948BA3817DE8E5
4F71FAC584426F531F4A3F9C4CEE6F19CFA0F0E07A4A320264C90B9161D0B9B6
12199A7DC68A01B89454D9CFA08690CDF7574095F57BB37508A50B74A2522913
22ACF12EE7FE8A738607329268F441FFCE404D3D2A68B2366102ABAD3D8ABE1C
FB0A9DE45DB510E419D578FD3B4F48133328014035CA46D6A6DA0FCAF25B457F
222918FACD5EFEF326E367B7ECF5DFE24F6CD08861E5F87CDBD81FACC7DD8009
1F968191E7B7F96044B8070D31E6FC60F8C7961BA96362CA771E3DB9D81B23B8
2697B96B8E4D4D6DE09E0ACD2F00DDE25D97C0BA10D1F4F10F1F0CBBCB31825E
163FEA3BE751DD38532B830B80ED11E59D700348A585D49827535E9EFEA0E1C3
99EE56276CB5C7A5863400BBD725BB08927B936A146B2D854766BF66F28BFC3E
67E513B00486C1EBBD183F91CB8DB0AE8D8FD27767696A71E401C3D7EFA3F690
6A06FB0DA22E09E257BE924C7F0B2E9EBC37847A2850B82720014FC7DA1A9AB3
C09DD30928904494416E3DF1D3BD867E5A682139F85FD44F45A013F484BB0C07
9FBEAF114D387ABDF77281ADF83C3380A5EF6871CC7FF4A8DE726824C4625918
2E8F03D67D73718EE565F9C9AE0CB0B321ADCDE00D0F1CE10F1000B123324B81
F66B94E11025087CF54F6C86A39390575D5ED4A59BF74D1818954A1B70C4EC2D
F9FF5831F242B8B5A0FB902F9B2355F42C070FCA450BC8DF6000D7A571696DFD
366D2040E383540FF2BEDF5E26A4CAEAC397152D34458B281D8EA05D632BF91E
96D469B396D9EC72DE12F979F22DF68BD1A01F832BECCF92599EFAE822D4A177
BD5CF4F36C2AB8D4928AEB0A3533028129F4A085AD9DD05C3A4D0001737F9192
726214FDE117584140381D43F8F39618E4F572819C1778099A890D0689822578
79C46AD41CCBE72D83A5F9C4D81544E38F98AAF6C37CB0DBE9499869CEF394B2
8CD96BC0121B70EF238C02844AC7349427034E40FC353EB02ECFA4F3D09D178C
737025193E2ABFC8962C812057FD55CB090E79A5CC212295946E98647A6F5903
A6BAEB1613D5E8909C07B0E83CB291B89B4852A379E83155975A7EC74C039D6C
2D64ABED52F0A005B15A39141AAF7365C9457B16FD9FA2606CC3C0740F437DF5
F1B361E2ADE016366031C22F0A9189488F94228B0127757402E830B723793843
22597E9E2CB635DEF9BD7118C237E43BCB758E0545C941D59CFA44DE81C95628
31CD23DEC40E64DAEABE769312C50E570718E585A8BF0DCBB9CEC865DFC53301
FB89443353F1F032FF5D7F7C97A02506798072A47BDD3F8EF8385B45D44B09A9
615DCA767BB4E6E779E6A988DC521374212B1CD239F1939E28CC5154BE59A577
18E80E156920B7AD241AB7309430CC88DA525126853E4EAD52C326F7D4869F5B
FCDA189FE81641832D1FD9E474523610F60AA52F893F9E9B333CB7FEE6396B67
77C60347A7974053DAB9937E5FDB670E295524876CCE41E32BB6BD15030D7B40
622753C9A7F0B1C126314700F19861FA446E378D6300D9788ACEC208CF1CEE59
A30E3FC18C82849184A8EBDB90B1167333987F7D42A76E9C5FEEFE5674D6B2EE
4CF591CF933B58C5425FD14418362416F8861E9983421DCCF43BE77361CEDA06
5DADFE7431416C2190B36C309202DA4787252BFE6FB8A6AE6179BD0E103EFB28
CCE8711607AA51CE0B606882203A5C325700D9B26E3550CFE92EB1ADB8E291B9
2E4E518331A6DD5575409067295FF6345939F378CA6355035CB69593E0913AED
5EA81757E4FB8D9F97617B462397F7FF43DFA0932B65C1FF7776FC2AD3CC8496
259C1F5A32686DF2FAA0615532EAE59C82A4B95D495FEEE1359A8D2D91085B4E
047C7F92AF7461811CDA6D6215BE2A58C5DC1FD13D5DE9B840FDD96372799EBF
4C9FC600AF7F6BBE290210B9848E6FB91C81497FC1AA96D6B48172749095D2F7
50BDCFCAF1E66E95CD51FD3CA7793F8CEFD8FEC8586AFE88F80719C82B41676A
4AF3E762FFDD4795049B6835A81DF4CFD34F44C745F6C995009C1D9671373DD2
107D819094CD8E14744B571776B1D9BC9C54455EEDB62A581199E65B1D8E5F59
136D8FED9BEF89C39503070A473D2EAC2F9B94FA223C45C32D38934E40372C97
14A39001FE2D8C879D563EFDAEF6192CD15484C1411BFEF8224C30B0E7AD46A0
88E256407A554EDE8CB0A24F4D639FCABFF4EC3BCC994CE1FD48E705F80B009A
CFBA5EE586CAC86BBA5E5E5153B097B6C7DF9CD0476246C69FF53A317A31B5CF
413C5A6BC7DFE8BA9D7BE47ACD5F1F050AD00D19CFEBF7C899CB6DC0F30CF38F
782C90F710C7F689EA1119ED5923656F6B65295F00A4A4F6BF39B6F9F0315CAF
C23ED4F9CBBB2EAA73E79883897651E46EF8A99DE3167E4031624F0ACB218614
BE7415679E5DEF4D3ED8950B75AF0B6BEDFCF429BEAF8B3559A6C73FFD766596
D923DE6A4819F3DDB1411C376787DCCC4249BA37A64E5D3D4F344C2CEF37572E
4BD892DA454AD09805E0FB197A63850D6845242D99FA33CC4EBCC92A66056B60
951CE771C000FAB997C8699AA219CB578D53845602FF7780AD4749A6C5C0F205
71C577ED03D63028C15690445853D02D69F06FC20D7DE3791B8FB54AB6996ADC
B9C1946AE90F8F22F5353BBA2FB1EB1795111596A7398DC6E8273A0A358EF12B
2D5FA77789F403D80BC3FE86BA7F49393F76BA5CE298C1259BA8F85961B560D8
441A6DCEEA19D0BDE898CF328861C3CB4423FD2C0C1AF9E67A7C5FA2A0EBCC7E
875A641694AAFFBAFD9547DFB6E7568FBDD02A5D564D59B23FDF9AD9CECB2D86
E473917D916D6F2508D429C62585777EB9E6E9DFCA889F03CE7BEBED6D88D23E
7530C2BB5B2FADC5B34ADE0644C0F6709E377254B981CAE483B8C9A80BADAAEC
8F1602CA4E9FEF9D58C77E8AC9953A357841A0CA879BEC6B48A9C3703B06974C
660A27F619ABC0E178D15C8C2172701E6FA8E1480210E0BA1D53E704FA24F551
07E8C5B9DFFAA4736831D56BC3B35A05F4FBF95C0F583DEE0DE828D2D8DB98C7
AEF418EF47ACD1255068A21969742C55D97F1C19A1F8924A0DCC610F842E4E30
C1104F859AC97006C5D24159160186297873833682AC8605C4F1CFF61783614B
385E1FE9512F87AEE0411C9627D28F185EA401BB1082BC00BE51509F685173FC
157CA62976128D48E72C175FA61010EBD8E77BD4B7FAED7B613F488652BEEC39
10EA4E3535286B41180AD68E00DF5037586FB1A55007FA8ABDA3F1EEE9665495
B5991CD7707FD9FD4EAFE30F8F7DC358E99BB4116CCAB159DE672A00C4F3C9E0
3B565E93D1698F4C6FA5667BE5D25FFF2E69922C496CB4EFE519FD86F1A234FD
F8ADEB552B7E7E10AA577ED3D559005D2C38D5DABBD8DD0F6F9FD27FDA3B150A
099993B56CB501B9D6F6BBACFCC966652D4994385B0DB511DF9CDCA823431534
700371469A49A9C05D6FABB7A8C644DE58881B3CC0C0042B48793475561AE271
8C4742058FE11AA0629FF922648E6D6191BFA132B8B8B2F95468CD1EC11FF11E
AAB2F0BAC298957E4172F101A12BC5F2734A2C314DB4464ACF6BB7EB6DC648DD
591585A08F81174FF962C463E79FA7019874C49B52001F855586B9D8D8E795D1
7A85E0519FB0B6C5BDEEBB9554D34547816955434B03C03B59FA2A4A18D74B18
7587ABDE7A3C8949663445991359690B138CE1794020155BE6C09E7216168904
F7B051C74AD099199C387A31767AFEBEE82BF109FB34C232DA6BC50B20EDB379
53452F6653DC4E88F2CF6E93E9EC0463D7B37ADE87C03A2DD1CE4DCED3C6423C
5CF350D292385012AE5A91462AF79767E97FE4DB2686E90AD20468AD27AC7E1E
20250E3AAB09E78E7F66CB3CC2F58FEA454CE33EEA95A09C7B64F45856AAA4F8
0B0C2D3702326EBFBF3AB63819BF6541E73737B25312E6C66A69F9DF2D4DF89B
6FB3948163350E034A3CFA568DD26363EFE27BEEA5713D78F437DAE50160FAC2
8C1C21FCF83DE086D03E563C5690E593F2A409AFA17E2E230C999615F158CE89
431FF4B1DF0930F442D8ADEC45F642DD8A886F204250EA31440CA22DBF825096
CF1ABD3A4EECD3B71A4F1B40B0571439E5AF3F9C520E811EDED8DA4E014B88F9
5EA1BC7C8AA2AA554CE30086F803F11CEC80B5A4AE7E25F03D3603D6B370E688
A51026B6FD8EB28564E5DCA712A9A2A09C7581D00AE9851B126B7BDB0BB15861
9C7C527D08577E142367B8B2C793C4C3F429EC27C0DE75B9B8EBC862E482643D
CE6A8EB4E099D4A15B609E30658CF468DF274069AE7AB410E612F0EA2D31C7B3
1D6FB0B7D8A5598A42F97C89601CC59600CCE7329E8B0238961D76F2A8ACE261
620AA95755D6941EB85166FB6E723EED0C54BE16393EDE9646B2D979488D7565
78B11218BFD7CECD978DEC483D4DCDDD173894CAB70B73187E5BBBA6ABF91561
508D4F286F58CF2232CC5DE35248DE1C21DBA6F53DE5C0151E354118C14F4D15
2725A5ACCD01874DD524F053A56FE4CD666050B4554CCED753DB52D6AA6F5228
3DF5D3ED82456F5FF014DDA97FDB0804970815402CE27A065EBC126C816B00FF
5AF1029041682E2C55EE5A749FD63F8E7AAF0EA12F5D6E697F344957560EE068
2C9C5BCE6B0E9B760FAC62828B9B2C3BAC419B073BDA50B8138130F18B83D8AE
0C5BEF6F915697207FAE56009D0521ED35A9488016DC834C3F251F5A4E3AD99E
4506708840A77AAB12DF037473065B62E9F3775CAEDAD8AC781F76B0F9D70399
4024A3214877736FEBD350E44CED58A984890C62B75E5C6F1B03315347A11607
EC8579E450915A2F41B21629926169F4AEFD81BA2A880F479B490AC026F17608
54F731043BADC914D489B407CFA86F68C81DADB5151507CAE41FE79A3C4A7755
1CEED3B63D42C659CE4BDF4907ADA234C6DE77DC4957B683947D5459EB31531B
8EA85AA74FB443296734D6B7F9A7E71D17B6221FE1F3BFE28ADE72E1F7E45D55
CA2034552666D4C30FDE2D6AB5B07064C07CCE41472971848451A245DA5CAF59
E1B079468F08130FF077F66ACC0449643C295F6E32511ECB7C52B7B6D47042B2
6B5C7B7D12DE631FE1DD0B46E118E97B1EDBE1ADBCE77243B1EB202AF53BADCA
05919A108CCF28ADD9B2582CF6C3178700E56D15B1CA416F1A11735968BD0E06
478F2B489B0E9B262C69057C49A8A15EE28E5772676DF8F2F603F3442EE12E19
9950CEB4C9249E4FF166644F70925D7FBAD1F5BEB2A17FBAB1F7D6B1F15E6143
963E60399FD2942CBA82B08B0DD4F46418BBEABDA877B61551AC2513F418199D
867936272DE1D5A404B8B45B2DAF636CC1011CA07C4C11B8148AD0203D088ED7
A1FC7CC863AF414AC14AC2D75E5EEC3D6CC2CEA84B0A20C8CD27783C6CE8F421
7C2A536AA0905296A335EA60A77175B7F6119F4E3D8773D1003F31220324B9DD
96A135DE24B41E07EB960FFB6B386EC6C9D463F65715BEE99940BD3B54587424
A5EE94FCB35E3C0F0E5F92D50162CC8BF51020AB411A3A0AB79B9C0734C5A444
27572EEE2EA522F9BB9A0BA183AE7EB5185BCFEBEC14CFA31029F8E45D5A2095
DD40AE0EA50D270562ED15DA30E866859BF0F2368F5DFD963BF8FFA5642F937A
AD8EE9E9BE9A4B975DAC526521443621CFE03CFFAA6AF0CF2C4D2EB942BB3D91
5186E222EF53C533AF3B21010D6ADE17A52A09061F578841058F3FAE9DDA4237
FC208A1B6693BB70A7AC9B290539B172E2F22DC62C985E37BFDED75739A29DDA
D519705EC0C3A425F84078E97E4B6FA381E3C7686A50DD234EE73CD469E24B97
9DB7A3CC5753B4A8BCF98679477C990194DFF8D61E8EBF0F4A9884C61E38D829
1F5649AA86BBEC1097015893E25183BD8A4E46253091731FCB1144E0DB8D0765
486D88D0C5ED2BB8F5FEFEBAAF35ADF8B5DAD7FA81685829A47BE6D874700CF2
A0339F932107DCF0735034F53154A16BD4CB4FF58562CD8D210DF5C898304B7E
77CBAB25E38A47E73CD18FD69AB6F539560F9E8D4C9AF6C8BC23B0EF15C70368
5DD3303F9A4BA6AADA0BCDBB2821612964B30A6B8A668D17B5DE1B8D5A413287
D9E221BF6768D98EBB6D8401800155AE380DEC3842751B0C9CD72E6375527B4F
F30AC78C389CE68CBF1557B048F8C9E46F213B789A5E803CFBD921F0CA89ABBE
E5B7886F0CB27373524C3A97023C9329B221ACB437B465EB4CFC51C2F6AF138B
F818617229781D1E47E62384F43D892585597CB66F5CCA54252EB6CD7A4A50AE
ED2824980D3B052BA6ED7645CD9A4F9B4238067509B89C71E9B881551E150BAE
5EAA9925EE766BDB7F06B86095774B74948C839BEED6D6C31A2537D21DE023EF
EC3EAB42278DA9E391EA173B346DDC8199349082F6530C501595FEE183738BEF
36982B7B6895FC8F9F4A0FCEE7B11A31731DE6B46EE9D1C3D61DB41E1730250C
C03493B12594C2028BE191D58D0BF8530FBD7476494CD0FF350D1CEFAC53A211
9A54FA0B1F4C100A5F70AB4E3C9DFF0D2BB80CB291F8E334678484A1683BAA3A
BBAC55FD47082DBE00ECB6C5C0F3CB6F2433FDFC54CD173E9D3D2261AA9B3F73
296995CD0398C35E53672CD123D581F2B19F01E71BDC28D079CE0A3E0E3584D1
C52E2B05C19A896203E5989DBCDA2F6F6698E3A87C7F81CAA283448C7FF5400B
FA745C859192C2623460AECA03DCD3E057392B1202E416B635D3F474AD6CD39E
4EC6FAD16443DE00ED69C1FA674BA3664F8BD00C08A27A5D1D4959D18974C288
F493E8B146CED8AED058C502171F0EAA3C0CC50C7A259AF32F4C81D9B39470D9
993CB966F6D9F034FC4E903FC910C2DD83A9EBCDDF1610B2DCFFE47BB3A026D5
0C7A88DF5F480147D87DFEFE463F7062C11B5470133F24B7EB6B0A4C88BD415F
F70F0BF584415D75F3602396A1B7C3D1906E2827AB2FD80B579D026862DF0FE3
4CEC934F99C14E909440B5457AE74872211CF5641AF333A71119C04E7C670E03
482CC063B751457C55E5339F573978AFDA870D31F0BE5ED8FC0CCF1618976818
D058D7B7A624A24E9ADD421346F6422F76D7C83B113D563D72EDA0CB54435883
A32775F148EEA9BF9B97EA71B2803A6BF70C74D8EF4783865CE3532C2BFC620E
912540D9AD3349225E6B8EB758ECEDE8173B87B4A8B7BEFEDE49FFA847654F56
4E1AEA4D2EC2DF16622A23797DEBDBF96773D2F86DAF0FBDA9D2E7F9AB662F5C
5FB4C394A4355AA673AA61555EE91D01EFAB45F6927C79ACBEB8BF3EF2C1C6DB
56FDEF4190263A01AE737ACE2D0F50C5CC2218FB71DEE78BFE969B575A7048B6
086DCCB64AC70C22568949E624D8FE780D65910243575ACA20C7051CA0C559AD
8DC9780426676724C864184A3E809E7387EE397F02CBEEBCD4DECCF681450F0B
F41741C5DE2C1367C61136ECEFC056F812112CA2E5DB900DC43E641D4EB66F3F
A5F7EBD0A7DEDA931A3F3AB2A52ADDF6EF82DD998E960BA243AE4A79C194CCFB
DEAED491A64636B1128A704F46F8D097D53AB04E673CA6A7499BDE06049FE945
A0688BED45967508B39362CDD78FE87CB5FD74A88A67E74FB71F2025DB83B280
8CBCF67068F475601864E5ECEAA3DA7A33AE9217CF89BE38E4310670F11876A0
71A1E09D3D4E636C2645E9A855FD9A287B38091C657EFE53C32E9EF3DE510D05
F01B979454C6280A58F8BE3D7EE4D6171BD9AA3BEA81915B81C56CD5055CD7F5
25898F9874A3F85E82C396D9E2891D8E0D6E5571D4EF14F30373FA17A2DDEC31
7BE5E541973975AE845866983025B05B31026B49433392C8930BD9661B23C2EC
0E0BC213F55EF475DBBEB205EC6A898F6F7E3E0D97E46E70E2A3FF0858970DDB
EBA58D71854ABA6BABB05B04A446307C274F6763C471FCE09BE830EFAA1848D8
2076C95BF0673E9C51D21BC5FB8F14A51C2FD96C5614886C7A670CBF7E172E2C
A9514B84DC676A2EDEB6AF1FAFF4E98D256D2A1675FFBD0B99CFDA88F0418CE3
26871276B9BC8760C9E41516CE412CB410BD026231E22A9CD0F664D76C0AFA7F
D17D352B303F2518E05CFDC4DFA697683ECBD75D8A472D3AE7C4ADD622E4C02C
8A60993BBBCBF09507B6598D847D0A4C231FE009058F5848C775E343C61830DF
63B9DD6A877DE6AEA9C3179677B7C0726022D0F92AA3AD77695628A87949CD0D
4D9FB89970FAE10E9B6268AB4B2B34FAF8CB61DD5E0BF54F2B8E1C7EA1FEE81E
0BF0FDBC879A3A7321FADA299277D8D09E8CEE8238655BF785F0D0869FF15ABA
D0083FF4BC53CB4E6A826FAB2BDED6F785603AFB76B55C10426C6B620BF1890A
7406C0C40A87CA33028129F4A085AD9DD05C3A4D0001737F974FE84BECB5E1A8
37A3ACFBBA005CD72A3772B499539E1BBAC2394BC9355CD59870B8C57F2F7EEB
6B877B917E0122075B9DCC920A5FC0D6206DF1B2B7701C20E811C4627B9E32B0
69607E2DF3CBEF32A8490B9FA9CDD72ACF8CB199D96938F3FDF31D90D499E39E
83E4AD91AEFE50EEB1034E376490F561BE71948F64280100C3C5BA1F5FFC6DFE
B9B8699653B19211BCBB496DBD14540A1F3ED3F43BBE60C5CC7E02E8BA2137CA
D04FC9B35F0225CE0530486FB4024114DBC1D9BFAD07695C8F35E5896047E8D7
E33B20BF39D2C3956923C9DD71A04C7A9CF032A8B596A7CEA866503D32708C76
C30BBAAE0F953D5B8A1126A1E25BFE73E22391AD1D0DEC1DD4E91AED7FE13BE5
9B6FC04875CF107E8F35C40C193914BBC36385AF5C2705287D2E77207E6022E9
D50B282B1284DD9EA66137C2960B9A9BB3D1C77BF9ECE6A91142D95593EF9FD5
1E984EC3EC360B3511F823E75AD49BA7AE63B192382AFE8FA99F1FB21DBD126D
8627CBB5FB38475AB19AAF82C4663F2DF783F2A858182EFCF99114F384B2D69C
75A42B747A3446EF8EE0F13E9CF1D70516391662003AFC9EC243C8E0F775D05D
0E3F9E07539C80A599C7AA78251241B46E6B15A9A2A09C7581D00AE9851B126B
7BDB0BB158619BB9CEC84FFBA306FC5E40690E464D46673BC84C902C0AA2AF52
42DEDA2CFC1099B1C95A296106DE15CF1B4D77486A37B435FF635B80BCC4B491
2AC3076B863D865D83A0EA0768C4B15D651FA8B720DC21DE0755EEE6F50ABCA0
4B7B24E484023D78E9DB5A2446FF209D4729BC929F8F3A05B3E0C76AEFB69565
A7B7347B45770125B5D86A82A1086A3A8247773BF93CE143AB03DA13405FD339
E51C6DC80B22E64B31388226B5C052471F24909E5601B1E0D6E81C09A8F68D09
775E743288B3F0EFF0D6228E2772987EF3CDC194DF7541D34D08480F1A1CA16F
2E2F8CC6D3AF5976B26B2363262545732285C77EBACA3D7DB1777B419D3C3C56
9CD3B0EC812FEF7F33E5D0304268823A0EA99576BCE99708E6AEA277BCB8C310
65CC4536844A27EEB6A027BEA7EE7554248140D0CEB6EFA6CD0545D9CF98CB82
4BE6E3FEDA248248457A91624203BC9932A3C357F15121A5265A4B316901E61D
0B6A13CBC0EB3A544651CE9D70C78EC698ADCF13947A866A8ACE63BB84330A95
5FD8B9DF74AA62D786A28F95223B0DC0A6744276BAC6F9947D613D7508533669
497454E52766AB7059AD197DE4E19B4429446C0981B34070CFBF71A5FD30015B
D75A8E69F4E4E2C393803A98EED710D6CEC48A28BFDBDE4264C1B79D2B64DD10
291FE16F35C17D22DB84BE79D21B8DF9752463E32915296E14DF8098D83F6575
34C573AE1151B6B6AEBC41CCFCACF35D9DECEE6F9E9FC928A597264EBB5C05F4
67B01EF827521F304CB4345C87355F53B1727EAE5E646178566A4853DD5017B2
ABA6EBAC139770EC0ED49AA31FA3F91F3F32707774DB00EB964670B45669B6CA
B61314565222A1493030E61D657AED8DD52D3183B646672DFB2D45CE801DA6FC
B815622C7BF345B7222099FD8A37EFDA8A3CCF56AD9EE9F5DC024358D75A8E69
F4E4E2C393803A98EED710D6CEC48A28BFD8B2383526536E742D1F299C73BB93
E28D89714B02CD0D74540D9AA3C82AE44C3A37CF0E60BE926315049E5CAD5403
F28F09714D92031E48C87D3089107839390625B60CB48E2446E4AF11C73D5291
0F14BEF067F255C444C98307CF061A6389C844A4C3429FA2BBD010E0FCA4EBAF
EAAAAD8CFB0AA1C09FEB38743101FBC9959A0017F8C83499463EC5DA4EABBFEB
E23FAAC12BA68C2622BA36A6892FF937AE52A6F8BC86AA385DBBAA35E3BCAEF7
60904456E56A9F06566377D2DE31C00D90FF5DDB509F8A9D9B5E3203005A55E0
EC96BEF80AFCC65AF614080C564A82442CC8D0A0AE401F14F4BB6F6FCBFE0F45
41F5A27895975FD6E11FD00743FEDE965259A3EC5847D3E6B83DF3539D57FF0D
ED6661CA21F0B23F7C0E45D0EBB8D0A9B54E83D08A531CF2148002F9A6DF197F
87C989B83CE5AF8D24AAFA39C60EE153A0B74660FD4FE0ADF32F5903CF19BE5A
1AA944C54DB9518F931EB97DD9D881E50EB7516FE6BB16A2789F0C4CE7806975
398573D65BFE4EC8AACF8E5755258959D93624FFE199D39A3DA75EB095303794
D8389C25CAC32F16DD308D6D5AD32E6D8DE72865A2D26E316DFD05D033B7BB01
DD0B9469C910B7A7DB89651FDA02B22AF2A316937A37662E5A9F62E131E8C4B0
98DD4E92B61AC064BF43F064D1A2FE49A02A2E0B75B57331014AB1AA8D98D60F
6425AFF0DE5B6428940FB1DC448B1C0471F995FF9B16AEB06EFA17F88C1BC49F
0B657F679092147F5BF9CC0D4CB358EA58704A8EC8929558D4F85B873D44B459
B287CA34E6BEFF51279788C2B97C74D03C6BF5FF5AB60CB740C9C49ED9DEE464
62D60B6A1D2C9D85A779E543BF8C6CD4A27893E17F31A23B525201D9A0E71EFB
7075790A3A1E11482D57964C8C345AD64592035D2304EC4F9083716CA7906B80
486BB5C794CCAA9F0DF2A0805C9B140D8CEB44740442AC4891051194863E37CC
6630F796F8CE5ACC4F49566EDF37EE388D10667C2D9BF139C9AE75C932AB97EB
C00AE1A2260C9BEEB102279E15456C72C9D5D0A44F2547C832BA3D9918FC3024
4C0990CD5D264A457C0B7D8A0B2087D1106B5F1D0E2BA6A49324548D00E72202
1F2D833AAA89CE00D22215E2148617BC755AD6AE31378DFF168CC3B7B067C8B3
74B162EE10FA93DBEC2ADA66CB99138932F7A73FF174E087A8AD85FA92D814DE
65763830341581AA34E9BFBB11D367B94F9874B49ACAF3A27036AD204C1E97BC
2AA42C62C442427355E2757AAB0A50CFA0D72D8477DB555D1E368AB2839792D9
A13257A5F76381298EBD802374D9738F74E0E3F37D7C46C8B1712C96A58B020E
6ABD474B14F9FE3A7434E53F28C04DC333BF8E09D4EE928D24ADD7FF8D199801
CB4622356A707D9530C44EF106CCBF08658D322C3D6FC79A824D0EBC949B78C2
56E9F608E37A6A9E19AD4DFD313B118D766E07EC7661AA4935770DCB7EB414CF
18FCD579C7D2E27F7F640B9E16C3099DE3E8F4FA8AFEEF88BA6FFD847EB0FBFE
BC6BEB0438EB2779C40ACAC9F4150D327AFC6434E342D8BA45110159FA02C205
595DE8623F90D01D1F0C3D8ED41D62B5E9F71AAE1C38BCAB089C99342B4A4325
7FD683DB957DAF59FA3EA550B6BD0F32A212F222987222BED8879707D17347AF
0F39883F6536C3E621D99D18CE42EE5A34FA4BFEA7A9D691A53BD33F9AED3561
C4E080C3A2CE1EC78E71EB71799DADD1A6BE6D49998860482B626C62849F888B
403FEF6D0969CAAF54CD5F89FD89D153C58F0D66610587850F9073E30FACA807
36C0BF828DC7E5A8F8F7F9D3DAA2DE6C0097EC1BC552EBE9B4BEDDDDF27B0F00
DB9C4CD7D67E335CD1D4CB26193D06F753FC3BD99FA74F2159CB14E227493728
83A262140C4E6714F5D76BB05BA334AB912E238315325F66DDE461BC6B773D77
9AD5BE250BE15AFC6D052F79B8FC23A4E6FED2DFCBBDCF4CE70B529CD6732467
BF89E8EAC7A4865824BD356EA9DC5955909650BD9404BED91639395DB88CEF35
A4B85060B2871318D493DC71793E84BBF3E2BEE2EB813B03690A93E736BBAEDE
1CCB9F8DEBD21E86825581E3955A5ED4AF8D472097BB7656081ED5206F282719
1B4CDE8CFD789F9A1536E174784D21CA938B31D8127B9B6462C898A7FB0BDCA6
47E66B811F82F08DFAE1979E9ADB992C57D6163FE8D15A5B5960F824BD17A845
5F537A947B9726CC8F8A3888CBFD85127F0290DA598A51130F223E6A0CC4C4F7
892002C19B3221F02826617596B5855B28202F696BFBC07247CE5236EB13B7F1
E8A15AB9B0819C356919F4F7604401CF5235CF67B5DBFD92F99E847FA7B0D89A
73978263BB49B5A0E536FA063D6D8C53508A79C1DE700C6599B9C50CD21979C6
6ADC45E9788EDD3A24389AAC045314E736C25F2378F0E9538D5B14E8FBE71F3C
5EA36EFB97B554FBCB62F90A0A80260CCF63AAE519616F25DF26EC79EFF94424
6DF8911317DE4C75D695826A46584A935F4640F348449C01E851C4736321D6DF
CE20133B8FFF8952C9E6425D4FA67A18F9FA13125D8B037CD15F8CA2EAA94000
C80CAB2AD7ACA1D2D0827EFFDD05D4EEA76A2DE3DA6F20B5957F6F748928F915
6100AF21730CBAB9CF6978EE0EB2CD7601BD40620205B40BCD461333B470C7FF
825827FE2A6C008801304DCA2BBA8F01DFC0E3415ECE48BF9CBE57898D2E641D
9DE2223F4CBCDD04AD8653A9BDEE22D46F9CEC8C17FF66C1F90D8C4E366AF96D
B819B52B85053185AE6CD16845BA7CC58A0CE61C12E3DF213AEA97259581392B
9BC171B1AE1279F582DB4F63CDFD3ACD21F2431580556CCDCCF71D363EB5DBCB
63755A4EFA8616E5BB1DD3BAB615DCE159D6202519C82935FFEAFD15FC988249
54C6B3827F1F98F26014A44E00BE64F538E97FD6B1BB2AB26E23DC03A8E6F3F0
88042D19167C0322F52C3B92C29F8FD050130FF7C7D8E433434C0AEE8D2E2DBB
374BA8B0C30D5E782C9B7DB455192532BDBAC2EE943566F917B7E3C6B26FF7C0
75A884DD1ABDA4A518CD5875BF2C0CCF808D15B325EBED86B1CAE4E760FAFF76
ED5DFCAD3B0F3C59A4D52A0E0346357E407D35973291DF8304FAB487AA4B4CA2
79CA5CCDC91C1D79071DEFA5D9E32E3757D29531D7FCF22989718F2F5C70BB8A
678026968855B88283552DD3CD9831BE0D747BA1FE729527F833F6BC88619CEB
B990D4AA98F4A3FEFC2331E60E5F8652CDAC1C07FB4D3CF9F916F91539556096
A254984E08E607269086C7D6D1BAADEDE43E477CB0DA2BB5190D33AD0A912952
3F2C7935297F71EB9CA0699C2AC31EE36F887D0CF61A575444B3118085017217
9231CCD2C4E4103FEB184076F816ABF37783C71E3282248EFCFF40D1DA4F4601
89CA645A4B3AFA961B751CD0892CF36D2810E9DA9A23F405821AA3D8BBAD78EB
089E9B766713EFFD7A619F5B9FECFF5D03D71831AE48273D5954FD0BBD697490
BD5FB756A64D00D8B3FBCF46EE61626A6A858E8C5D57EDA46E9B7BE56C0288B9
FBF074392D4121F180E28B1AB973D053D8D3A68592A56AC054E9AA4D56F522B1
9707BF28D8FA0786B20FC3051C96E687229F66D06D26E8A5D60F208F0F0DAE3A
A2FBCC4D23BF5BEF98729422FAC2339CFD91DFF199914C90763A43F05D5C4538
17B4C3EA69692E7E4A4E8297847913FD90E77984D6B9F37A2A312CB07CE13E38
C7373AA8469F809E3B0565A1B2E8CDE5B41853C84DAB12BF4A7B53759A53B327
A58590CF7C5C68F35EBD38144DC0B8CABC5928AE68403AC7D2174BADE4B196DE
9E61C75BD0996ABB29FF393770A1670C9EC16CD77225DF91E1052B74A0CECCAC
565C16B53C7C5E1A202F5363892C70ECCC036D3FAB60D3E81A470BDDC46AA93C
B8B89B768FF8AE96614FEFF85A48B3A327275F7C9A433ABB0C95B598574F2CB4
5644E610A3C02D768058BA2B97ED6782147F8DC58A40EB1CDFFDB901F93C044C
87B3CD95AF693B46D58227C44AE183D00B3DE2DDCDF9DB098BC76CA1F691F4D0
00126B2CE72AC322B4D962537889CF225B3384FB35E33FD00255BBA271A4EF00
3AFF094650AE0168130D9019F650F767A53A82F9D83704FECC98C9025092882A
F08F98DA8885B49EEB34067BFD6D4B1CD777C88DFE1DF6B40817ECD640B52FF6
C69244E1F7209FC8F1F1C6B226DACC2C14EB92E2F97FC88E8FDDA774EBDBE7A9
57E212E2CF2657A2CBD51A828AFF6D632592EAEF5EF11C171354002A2DB1C9F9
FF6A9DE9A3D778A6463E16EAB838E2E78D2F285EFE30BC461BFB2F0B4E61D62B
F54A9F322D5D5FCBBB04D77DC4955E84168F9AC6EA2E25C8C7C7BFD68D4FC3E8
0AFDD7EEED74F66BE8E8A733E43943432C574902372C09780A2703C43A5529F0
ED7FBE021D34C261A9AD9FE92290D6A0B3D5AE24E25393D501AA2EA94748234F
51BCA6F444C2905A4E241A269ED51FF32D28FB0A908D3DEB35D08E2EAF4EDE0C
0C64A45E3F43EDA93ABB30841E4EFC9ED1858353AC4063789B6A407EAC505D36
4560FC2FC21825F52F9F6DD01569B77B5F48CA45E6237B3467B1A26791BB653B
865750745817CA28E678CB0115898F910F38FD25CE03F740C969FCD8FC608213
C389FD9024AAC0B8B6A023886FCFCAF1C3215B36330E9306B11BC67975A2DA68
BFAD5210039E61598ECE58A7386EAE85CBA7D0FCFEE888CC7FFDEFCBD5737257
1763FB100204D212B6E7A84CC797802E2E30E3B9D85E3F0F13DCB96FD59E23BF
72280FD906E282172C8BF995D692296DBDEF48DCE63F3F4869DA9D77CAEB4DC1
9B2081E1CDB2F0D6755D8F7F5A6F1A68BB974C12EE5E31D9C607C319E83AA5F2
D8120ECA4EED74ABF85E3E44D28B0F84D556654DDB145511CECAF4267E9D378C
DCD13B00F96FEB1B3DC5D54F473D67AA4E0B001530F5C1B8AEF5E6BC47D3F7A9
24CD93B97B6A079BBA10E78FFA5A91E9AD7BC19F69B43CCF1D69F55D56BE380C
358B794C2EE612797D59245BD5AA1A57DC0E956ADC19E19CA5DF2F8CDC88B283
8C0841BA8EEF27FDA86CF66E032F1B0D494612ED00789D4FD1919A0D5E617269
DE9037EFB267FEC47734075F9D01F8EFAA980AFDE0CA2A312CB07CE13E38C730
5A3DFA570C5289218D585E3957F8A5F1A9FFB71AA3A9B426BC139E5A805CB3D9
FCB29E4B4EF4B4EE15553DE1CD067C5A78D48AD4A103B90599289C9AA58E4726
F7A3138480D802FAC442571397A62FF6727AC3BA11E891C5B3424A3AD4F4DAC7
19BDB54D617A5DDE6E44FDA014AE6ADEB42D646CFEDAA09CC251C84A48B5AB27
BBC9E2EB203979C77A24D5FC81E9B9C3FA269C8553905A0D830112A035F6BDE5
658657BD0E7974FD3185D22CF2EC2E3FFDD0D434E7C0F668AF758C46B5E53F46
EF208122DC04125F7A9C2C54FFCD2C6149FBDE14DF47391700948B01BE36114E
E833C10CD0854D9C3FF027EC5987C030C876859119CC80A167A9851873D9D16A
27E25C30B12C90C02F5CBCFA816D4EDEB32240362985D70D38C32E7DA4DA26CE
F524D1EECA0D4FDFA87C42ACA27D51FBDD95032B9985F716E224A3C44B3E2228
8F48AB1E501E480FE0BB79A2DC3F72DCCA2A8F59A0CF417AE82AC236760C06CD
DEF25058065A72AADEBDDCC09B6D1029E840882529CE5E4111CBB13CC3AB7AF1
B865C905F607C0A6D12FDC38E3993120E9D60FD5FE71B1AE3D44CE1B6CE92D1C
B0373B54B48A334BC58D1E56137BCCE787F835050C51BCF03328E2AF74242014
DE38609AB9B1ADB7472B67034F7316B5922CDA33478F8BB69EA1BE4148DB14CD
31D4790B301E9CE62B78C9A9C351AAD549552397501778391AFFD3804DFECFAA
A7DBF725DA481CDFD4D2A2A779A48EFC4ADA60AC51E8C71B9666B71A1D20468B
104AD009271852AB28DAABF1CC892ABAA08F3A3AB7EAF48DA20F1AD234E29898
144B943D89D63966FC98D9CA32B97933842A14BDCB7575A36876D66694E3DFCC
DD4A5F9EE70883FDE704943B7FEC3941BE4A948B3490EA861BD99423B56C2084
523D2596FA6F6317C9BD700703DA64BEFE7F7A6810D5C5BD3FC0EC9F4E50C9B7
E123002128EF5E1748F8E03FE422E9B3D29D1C66DE4E00919CEF26A7E94C8752
9AA9C2544ACD7953AAC7FDD549333334A8479BCAEB272DDD92972ED8E7789EF9
899AA30083C684F7A17F8ED87A4177E1103949CD12715E48D108557F689206EB
5365C156E47A9C1E0F96024C27EF14756F2A7D77A990393CA5CBCA996BE2E518
6292AE67947E287A622FF3C96C68D4FF66F28DA43616D3185497D0FB3AAB8D92
267B48EAF24CE73DF8D15F751098B89960F1F169805580F4EBFF87B92A0E4040
F9F5A61B558C5ADC9C6AB916A3E13042CA78F2DDD02D8632B42602C956AB04AB
2C81845DE64C387F3AE3EA8386A9CB5709CA8EA91C83C0BBD182EC25281FB52C
452BDF2419D6F7A0669B706CDE820EBDE531A007D8D7FBBC3C55D1075B6E896B
169923CEB18025FF4554899EF60A69BA10A8E421AB104F695F5FCDB616F45FDA
682823143D7430D652136546C561A12D2BEBB44A71F76248841DE5394BBBFE6F
62D4993A2B670C19B19D222051E7E89D6F7CBAAFCFE56D1493BDCD772A1B9A9C
B8C1205F7896343973FBB992251E335196C4F551770C28070FC7FC7A33F62D3F
E4A63D4C1B0371A976F0AF6125EF2A39AC82D44CEEAB043BF158C592E7F48CB3
31B971E3B6080AEDB45B1AD955422436F73F6801A8D444C47FB698D76C578D00
9485AFF1239C9A59989A73512C3580CCAD46643456AA60531142C8970D0B3FA0
CA60A2E57AA31C1371F8C279D4D209128AC747B7C328FDC32A3C909DD219D4A2
5FEB3E43332475CA0392A32E43FA49F5870695901E686D807DCC388AB9518E5B
B2167E415C21463C22C4459A92374A9BF3C1D370D9C53731DDDBFA0A0B019593
BF22319C02486B31C9CC57458FB78C6ECB6460A281A80F502523BC0229286649
9816AEEF3795C69DE577C4B9C0EB5891CFFFAAF86B911F30482BE12342D80022
5F16A4967C6DF1C1225DBC47C26CC05755B84A1B8F164D30FEEF6C9A2DB498E4
D37ADD88CC895AEDE0FE8B822C791DE98803154C1FE5592A6597216F8EB29A27
3F565F58DF9C93B7D3886C4919A30118566A9B9D406D3BE27796E51BE6945813
8B963E32C1C000CA13E1A1CF2080943CA932CF0558912DD122E16010687CCBA3
57EC5C1C77239733D652E0CD62301671BD88D6C5CD551068CF445C5F8015B05C
BAA0F4C2FF85F88B0CC9508AFA4B6C0252CFBD56AF94BFB82FA8FB5AE053A92B
95B480BCF32568643D68501E231759CD15B985BB2D00197AEE3C0F83A50E05A8
E6A0F89C04C960DE81273E2CC87AFCE644D65932A5F34BD975384746D768F0A1
8EE79FBD4DD4183076657F699667B3BF72CEB25F3D0BC0DB85EB2013C9C26829
63466334F259FF0C1C6B0F97B27345AA8316DE4F130A0B512508C4A2AE5603E1
BB9A4DAF0258C35EE990F664417C84F84C5026C20AA5B1B19BFEBA52AAB0BDBB
E0539C09DC52E481079AD9A1CBACF68B846FEA8F032AB19B58C358BBC9EBEB11
AE626DB8F69D942D92732EF4D24271D9ED8E891EC10DB95216D7E14C692B3C9B
DE4F8524291A34E72C290E08134D763B15BB6B2B3B7C1EA96FA426F7195401AB
2ABD3C25D5C9A2FA8C392A82F8DC836C8FE32AECCE5E9CC4B52E97089790D08F
FEEA7D143DCC7A924F7B27E9A8054D3D6B635926CB594E52CDCBB0BF90F25D4B
389E1934B98FFF72243AFF882E061CA00527AF42734914624FAA4BF2B5FCA344
8D360B18D5B8F984E23D19D6719AC9C2257EFE8025A77EE3FD66EDA1201BB29C
5C0BA822773DE75726823FCE87E1943876B8DC19F76456E6F80F289533E1BFAA
D2838E66D1D870CF36728870E6E4F02616F1D45745A47169DFB74A9DC82D2672
2D9E5B40C15E725CC5F28BAFD1E94CFD3A29AE7A70CC022B150CAB9A428F23B0
F9B996EC30F56BDC0CADBA831157AB8A441DEDEE59F33D9D246AE8F987AB4E62
BEEDC9697D05915E0B9DF531CD017AA860B96CA41C168548C6CBCF2FAD15FE86
6F5836A00A3BE60BE77724829205148BA814750E89A9B75373FD9687F3389236
06C2DD6B03F16597919179FCDE51DAEA400AAF8982DD653B0A77929ED8735102
0E43047E47CCE0BDC342A927FFF8372D4FC080D55414836234C1D0AF2E1C2591
2F3ACFE7CCBD459A4FBBE7141CCE4BD29366A97A5D740CCA11DF380F93FD830F
F52EEC38F483A86D33B8FECB35E69BE23802952A13D457CD214D05982AE778AE
A1330D4DDD264FD3C874ACC0D51AB943797023065C805B19DBEBE4C9A81AC75B
83A7D0ADB4B19A95CC2AFE686E55D88E47257C1FE0D97ACEB616EFF5F6C99552
306526AF1980EDF91E8CA3B40BC4198C7AE63EE63D34A6E5E6483031F98EF3E4
655E6361251DCF8A9302D6F53ED0F720442A89467CA60BCC4FBBE40E0EF6EFD9
17EE28E980A062580B9FA11EC9EE74035B2D8E9D8C05B11778948FA94928834B
EE3A0A9FD7CA91E0C88FF6F0EBFAC5F9837A7EC7AE3F0134DEEB40586297064A
A5C2EADC5E6EF258AB1B3B5FDEC3B9192C7C3F3FB0FE3C6A0F9989C654739987
58CB83768248C4A85CFE645109B1AA5FEDE99BBB3800D471BB00C21BC228E89C
5355F29E7EE697BFFECCAE75C27AEA6C74AB42E56AD8DE314808FB8636AC4B4F
409C806CDAEC4BB5AB5D74E63E149EA56A941E4DEBF136186B257078A13074C7
49CD28214D84AA201E7A8E6D59B712B2AA3D7BB7B81F9B15E42D787630EAE3D7
941F54F348E8ED022DAFF30C1CDDF679DEDA691E30773C286B1BA80CF19505A0
EA1DD58D7E54398EF4AFDA5A404E194BCC39BEADEA182718129151F4039E69F1
62D67BB5DB67595670D82C3560A414680F9176A05F32B350E2CF46BA0E8D0120
BBDDB5CDED1B0AE4D903524DA5839DB2DE078A37DECC1502D3433B35637CF0AB
9DFC59F00E558297BCD6CD33D2991790026AB9EB1E58C35E4A2C10DF821DD1B0
7F793A7A91C2F3E4EF7005FAA7AF98AFDF7500359B651D485D73E54FA259850D
101D84F4CAD106141137C1FD5C1FEDAB6F14E38C3695295292CCEE57A365680B
483E622265EE4F6A6DF0234233EF08A17ED68AEFBBC8914D0B4823B071504953
8CED34E669A162E422B331A3242DF9092A2872D67A15C059E6A89CAA27721625
093B0548600068F74689952C838623B68519D11ACB5A55AF22AF3C69ED70870A
AFE0BFDECA8155EB4B4622944D399427F1230DEF665AB22364382116A593A43A
2564A451C9C2B5E8F0A6A5FAEB418BF5FC0965BF7B274782C8D608698A04F4F1
625E775EB811699792290062325BD588D00D8A6A07452D798C2F7EC4992C1B50
44C152197BEB399437F35D2AA6F70B882B5EFF2CB573B8C287112D2AD99FEAB9
36C27D9216FF6451FCFDED1ADD3E2F982EBE208BA9E14011BDC6F947205DE82F
1F269661A95AC6CA56E7E1B0F675DA901E78AA828FB9ABAC42443EFEBDA80787
A0F0AA1263806FEC35AAA4100ECC05416ECE2F061CFDBC321289A36971A05AF4
F329B3BF197F1CE08A4D8635BC8BAB7F4B0B72EC09A99E846384818A44E541E4
E108DFE5E796CE0B2A89794FD537D7AC87A594FF69F8EF9429592B60BAE52C2A
97EFB0D86DD9BF2F3AB34DE24D16AF015E9397D646AC1CBBA7BDD35F637D616C
7003024B08E527888F83F96A9DC950870C1B21E2186D8C4CA15E8E1CEDA60080
957FD338384130B535D0579D727DAD1E967D5150442AD33DA5F0E0E54A393257
30A438A6EBB4649316FBE1021D3FB5D5882F227F5EFEADD582C932F59D55E792
78492A44B7F43E4219879931BEA2B95C7510EA3194A58AC136DC8767B74025EF
5FAF470A272F57F548D7348AC5E666A5693C95962D6AC49F31A5D39135CC8D76
2C5F0C1CADB630138C9B03ED2F4592D3D38E10A40C93C736DCB64244095927C5
72FA90C64C8B709C5B7E4386AEA92B7D13C56D1365DA81125A10EB80E6ED8D5E
C2F0DD122C3726FE20D669E65AD7D43399461FEB76701C8145D5D122DA465986
E17D04696548393512567DFE2EACCEC50CFCC57E7C01E510D507ECCC19083226
6609281D8FEB1B700031F7EA2CCE9B98E13899DC35280AA01B9695BC74058F7D
67F2F1D2D04A98B2A65DB6969DA8776EF9F79A74A8D4EA9E4728E8FE70544D6F
EA7C1D4EAD89507E04EFB96476A3B4A2511E2B7A5ED44E2590664FBDDC6FE264
6B6845D9D4835F7F3C793EC0557EFE61648E12A39638FB42AE591FE504A26A8A
6B3BD94BB607BAB73B0B10D6049C11BCB7A16C1782D4BC5DDB74C1DB8F5B0DCB
FB9C767C2533ADC83E12925E0B7BBC33786D11EE99888F95CFBF7E680446F888
A9F1C3F84FA09BD0F0F01A5C693C8659E5ECE5F23D716A9B89A8682674E24838
BF99B06FA68C91E1797DB85D9B8700890674CF9CF62D79BB3521128814A1B75D
D571FF0CB9A322D4E4B9F225EEF68B8281688882693085432214792F9B03C23C
59305C7A2A9D392AA29F99E97B1A38E8EBC07A0BB1C59B638E677A4FC26F9D9A
17F28132B4606550EDE5D2768687CC471A1EC7186D318D849C05BAD1F735FE14
F2CBB58922F0503241CE88F7E280B79C92AB2649270603A931D08C5B96E9F560
7A68D40CB8DBC4FFD738451E8ED99C8495C8421BCEFB6FE8FCA1DCC7A142CFD2
4FA7770BE6068F5403ABE805AB2A81CEC34D92B1F39808CBDB6FD7720E2F4AF7
DDD22F1873BDE4D1074765618A0838B48C2012E0EA44BBAC8EF5BCAF17AC98AD
B306D650B4B2F5F024339701A49758AB5F4F239DE322F116D5943A9D42176DEA
4E100EAA56DCA6BF31CCD8C5A949FBB5DB580EDA64442DA3626B843546209857
8BCD5050EB47A9F4313EDADA4845CD670DFA8BA98A706E2A30A8D04F8F9869AE
0635F14888F2895C9E8FC7A7ED3D99BC762576D38886EBFD84A70D9AB5B620A2
8D40FCD6D9B321855BDA608E23BD365208DB5209646F79745A41552F95F74536
C803FD0E67B1A0094750845A44FFB46A93CEE3E8A0263882542F7F103D1AA88D
C30C25057A23DF1469CAA260ED4AD93BC9534EAAE3830AAE1F0B28330E00E9D2
10D7B972D494AFA5BEADFC072DFEA68295A90FEA34059F842002D97A1D853758
E565430D7FE36AA71D4111CB414AF4C3A1FF1DA06BD032687F2FD146D7607274
35015213CFB157A1414B133BFFC79D106F3BC09ED496BD9A79025A9683ABE4C7
E6DEA5C6B7C45426702C139ACE571B62E1A19B26F2E26EF5AC7BFBD49CADFF1D
C7AD838B897AD728B35D869CF78AD7989BE1DC27603C87526341706CA713FD6B
3CA54BE22B857B14C5DDC67F6C2037E455BF0095264043E6D5C14A99BF794EA7
74CAD2ECA4581BD58ADB6AB154DAE79CDF4D1D2A24663AA6A96DBD57E0710C73
18C152697C62D22E55766F3C65AFCA94D0E84C7FC39E73EAE0E4C168935C3343
C50B20180D686B2FD1E795255503F5B2F58E0DD7EAE709462FDE821DC91B574B
6E002992CB565D3D96974D8AE68216531C8748ED666A5E58BDC3CE593214892A
1A9FC71F6CD8118FAC7DF493D4D458A9C1BF9CD1176F337BAF1A30DC50957749
8900BAA90F3BF0022E6625F25179C29B5AE320D41F5AC75C5622FA25B4061D68
0CF64AE0514482391034A12807868B4180105507FA8F0EDF06CDED3C1B095392
C76823928F3CF0A2C7ECD85C01251D90016D1BB46ED0072CB103A5FE786E3131
4C36F761D18AF0016893A6C2B2F9E27D822DA9926C5E345197BFAC6BC1719749
CB3AE9576578E8AA6879D65FD575D96165C64A26E8AC66E26A7BFB49811A3F6D
A895E52A201DAAA63C6A4A24A808A9AFAAB2CCF8A31713498C9DDFEE0372C4EB
F0BA57D1DE3E935E231AB6F0D37E338BD458850BA59B25520264F23DA2548965
7A44255D1F4329FE92C87EECDDB28DA53D91E67D1764F0C3E599C554AB4C36A0
97E50A9F9AA20F92F1501F70B493965140713FA4B6C3EA9B7E2B0E6694564746
06B114205FBA1813B7AEEA3F0D6D256BBD0F3749D72E09D96001C7002BE76764
533035AA716832E41811FF328C1A0C5ED8D94EA6C2808C19482F87A57D5BFA30
83541A43CE94CB4A7EFD920AA52E9D3636A1018E7D22803FAB0E6071ED75D77A
8A9E6E6D018EDB6AF2CF4EE22E7063ED54F2E9617B3B3BE8CF551D5AAD687D74
8100EB06BE26D3457B005FDE94D5224A78F7383B3319A212AC11E55008BEA6E7
3E507A63DA945A1E6BFD6FEC1EE890B145C42BD86850F6465599CD88C393412C
802F60DD6226418230EC0310BD857D5E82B3AA156B2773519284C6F675E8FB7C
275ED815F0317449079864D5CBF5FDB6188AABA416B64FBC7A5C62B3C99272E8
17102E9EA8172D87F60B1E2FA8EF7281043D3016496C57D22F3B75042A29E8BB
D3FE7872DFB3E8024652DA14BBA4D5A24A7BD1DFC80E28523B59CDC4276A7200
1B2BB7A91A3942A8F9BA309DAE8C325F2A667E8E313F9913ED70945AAAB119B8
E1198CD5D37BC1699CFE25E1DEBD2E425BD7DB21120F3AF7699C251FBB85
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ABCC72B6CF075717DF5200D680CFF152D215865DE535A6
1CA8E063640C195BD08DBB8AC7B4A3EAE77A96BC881F674B33575A0CE6AC3EBC
22862808E84C47AF37E871AB5A85B043190EE840144F9F85E8C54196C594349F
1E95F04AC99AB789ACD0FE5A2F6587BA6A0786B3E4FE1AB8D3A3BFDDEE2C5A08
EBFA713F917FAB61A4908CFDCDD24D6632BDCD20C8987AA65BB71AC2C4FBD1A2
275B89EA38BA595C388368F9DBA8FB60FDC1ABF2444D24859892031FFBBEDB7C
0B60BF304F643C6EB7961A16A842BAABBBD910C2748284F3CE7A32F21A3A6A36
4787DD9EFA90624A759AF6DD36C5912A042CF20C459D7EF8ADD9B671A6BAA23F
28DC33614BB8D29CCDE919C11D53B8627D2C020ED86B8D6E8B45F8B265CBCC3A
08B3353FAD0A245F2DCC87DA5A737CB79E9CDADB93D3A0E9CDEEA64A42C988DA
E99DA7EBA38B77B2CF41827268FB897EFB45313370220CE6047893964C29682C
9733EC9367D902F346A5FADEE63C367F7A8CB11A477AD9CE16B805AE3C1C2BE8
13B4A7EE8192C8E734475DD6B32B2FAE0B666A33A6BFF5D3D9C00C9D3A32FEC7
5F69F8119560B47502E44F6A5A8F6992E42F38FE9FC0908D223B6E105C89F5E6
306E7CF6B94FD70FCB56CC05DA2D8705FE7C0CE33FB3DC1C1A648FAA043E926D
67E657ABBA7FBEBC29BFA08EADAEBE985B57DA60C2C25E5369019FEE6F52E4EA
7062B32D2ECBC0A811EACB997C338643E3099B81706A51920DF8D6499908DBE9
1E4C944828F30B97F9DEEC209C92F4C2F272298D8F46386D89B71D5D0735CCE5

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE637A46D470BB1239E64BDFB0C5E059913DDF7E2AFA021A6
B56EC9F33783F715048AA4EC1B1F89B3CCB0149CE74CCC7518C027E399132550
20FAA5D8352D4237219BC63DD74387A3D4C45B156302ADF2FF40BD407790793B
2B4A9E06AE094338F09076A091CA69B1ACA5AA995EDCA2CD0AC32539CC0EAD16
213FCF9E1B9514BCE0D709937B6C195D979E9E98C9A7924CE582EC2347A9D9D5
33A43F1525A4BBB12EA7ECA1A5A5AE9679354CDA6A3F9C1062927E36A2E4A6F3
4E754C8DD8EA2571C7C48BC29C175FBD01BF238B753D3E79BC34EE383C5A8AB1
6E3C947A011221956AE269FF01BC597924775DFE721577703E5588268DAA8654
78898C645295B338359944962E09541FBB7A00956D1ACA7D8C2355A7CEAB6B77
A4F4A47CB6269D49966E24FE51C7D95B148AC1B7A39CBBE3E75DA003115C7416
C29A27BE5F176495CDB33FB4366285011AFAEB151B1CF06B726D350362C6AC75
0D662C96893585E5910E342D8D4F4775E75159382FC657B06DED974A697CCFC0
9C7625C9B0711FA238F4631ABA1F02182C4DF8677DD7968A3D348169A0F0D186
6CA9CA94D87E1CACB6B0527EB39BC776BBE77AC6B5786107B9147FE1B052084E
6B3C489C8B63D931E340E4EAFBCD5432DAAC1F28BC96B2CAC41CFF9F74CE2A99
711ADFCEEF00D5F13EB7ABCB7698DCA187063FF5665A9EB50B6303EB3998BF75
F83C7FEDCFA9BB909D70E55CD51F8F472107584EB70C0ED175E6F2078C5E2E7F
10CD08E24EBE60B97851E7BD26AB7A9EE244777D10AD98060F8E5E3B1E271B55
01FF7435833FE17E962420E154FE9D0736416DF88EA7EF8EED2DC2F848BF07AC
F311C8E697690047FD0CD0AEA514456BC370897B397D1273CAA4937307B6DCA5
3A0EEE4D964674B7BE517EFC26DC022AE9F0D67B2ACF804BE9BD76A6F8B11132
2B1273AEC261A340406A3E139FA1BA90C435783346361289AE9797133BDD208B
CF283DD0757C1566EF14DCF80841D32A3FD711A9AF5CA9C7B9340561E4E9F90F
656EBCE84619690328A2454894192D0BD52A6DC1D9129BCDDCA40A81BAF0DEED
9DBCE3FC019CB64AA2166B715BCCC8D139431C8954846AA33084280A6C363F19
EBD437DCE529AA77AC0912D13A123E118830CED60AA2F2A03D6AD24EFD6E70A9
9017DB8BCC8971A8DD1B297B3E76A8FCC48CA7465B5D3602FFB901578BF003A9
0EA02927E6E4DA1CA613FC7CCFEE1E8C1A694E2A0DF8E4915005257A6389955A
AA29890F95D0D571A17576C4EAC38E027D9945E9D14E56A81181BE772BA78891
6BD8E2D7C442814A52E2F042D257D61F3F976504180756AEEB9F1E5B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BEE85BA2BB40F538F55C11D50F882B739138
48C40C08476F761BDD8D791CF23DE48A9C407138837783A7A619EA936D0B6239
F72579B0E99370DA9C9AE14A6753DCA4A6667BB22C841A91A8AC118812C9BB04
9DCB608F8DC52CDD6C52BAD1A1502779B638DF933793E463238A36732C3ADACB
0EA238AB8B29F707E615837444592036A2427850EBD6C17EF1545EEE457EAEF2
8C8D76A53677E7150CB9A33D3DFF3946558639A6DFAFF2F6BF055A524058940B
CF1CA8D16D9A2D6E64C044BCA10C564EE265DA452D7B6433E5816135B31CE8B8
BB9FDB01E4A7E246A98E073443AFCE3DD2B1B8A93DF1856620D7CC501580BD13
E4F0D19684EB8773549BAE43FF1AD0726CCEE70F1AA9CEDCB21C2A3B0DF78B09
19481C505E451409F058C657B3502B5A26E753AFE2700E52F39743055B62F027
5AEA4719416FA35EE1C53E92313C397F0A208EB0D328555C5B86713BA4B827A9
6E1EF33A39173CC1AFCDF3D52271D6CAFCB00B7BEF6E47AC23B920F7B535193D
B8FEBDF4B87DE5AC09FD05A1762B36FA02D42C15F455167DE94BAF94A4BB66F4
0FD286D9769861DFE1683E2CBBFAFF817D3382959C18A903DF75F4A3D5762C29
295E431425372F765EBB37367CDB40EB73F4BE5C47E19B535F7EC7A5A4B9F621
4465171F3AF111E2722605554A46271AA4F65EF4832B592CBC9809C6CFD90AFB
12DB06411FBB41B21BA01325A524D676161B14D376DB237618616EC4ECA8CBCC
9086AB4D09E359B41CF74AED5B75C01085EAAC4637BA9450F00D4F0240AD2B9D
62E41C0BA3054383C5B9A3F000EB0818CBFCDA2DFBE8846E142A9B2CECBD5F40
713999C97BB9F989AC66AD864407F5DEC4738283E0B8AE0F0492EBE6CF79F6A8
AA99949CA91F15452DDADC572A39FFB35AD715BB0DCD4B3C7CF7FC717F01C74D
1384B83A4B674AAC70539F7866D7B3B832190CC928ECC55A36853AE144AC5A19
35FB645D3C9944118FFB82C0AF127322C7FA7A6DD8F229C5D7372EF249FAFEC2
EAC332911BC421715D8FF56D5A77B0C43821F047EF1E80CDB76C61582F341E57
F1E882F87EF96A1C9F166E156FE7AD1CDB24F91A54F29EB0FE778B856A211504
C4A83000BF40B903C1E3037566684C8875F735DC9FCD8B42025433298641CE3D
CDF8C80B693FBAB74DBF0E3FA1B3BBBA9B8CA038F113C57B5B2DFA65BC103D0A
5557C1E0913B055F591F8F2E8A74B365795F764C561FAFEBEA4F5827DED76AF2
7796B35D19243C562EC90A851D898AB9A7EC2C36181DC56F9B0188798F80A5F2
F509EE8ECA30D88785FD165B58549F12163570DD71D4C102B9229BFDD8109322
DF0CCE8FE0405D523BD805A9DA2E46B5B34155F8165399FB16AAD7A2B307CBEC
B808C1C420B24FF1AF1BCB4107958F7BA5DF0E28C3DC3C4B5C26B4280C0E0129
6A4C3B457A2A0E5005D5FE3AD3C5451FC06CD65A9A041BE6C4F895FB39DD4FE9
9A51C98376B13456F25C5A0B98B0125D3D3408D17A9B58716E33664DAD98E133
A61B4182FFB00C635B437AEC8FB2F4759D6C9C458980A3698183119DF743B60B
CEA6BEB0F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74C4E836AB19ECB89
B9DA9A93D028D28EFCB73500DFC7FFD1E4F49D36681AA6A43DC01BE8CEF99710
AF2F9E2098BA4B20478BE98D0CD6403A0CEE82391AA72FE8C0033D6C31A1F699
56F75531F0416132333C894D8FC400C49E53F3F3481A760635771EFF726D4CF1
5DBE496418B6770F89C1B08A8F6DB20F903B7C6848DCFCB53602750F77EE8B0D
C8459A988692F0931B645389DD9EEFA606C7C16504FB1148D35A0D801EAB3A54
B90340EE129822028061F5D0E0A00C5F04DDB4B27952C3745B76EE5B168F047E
5932C64DBD32FA0B0816A0C7C6B4E3C8CF98D1B82FD0AA1BD954A6330366630D
8595A4791352A86A9398F45112CFD7D670026E852C4DE79ABC964DAB7584D244
00671CD39859645F5A8D84FB1C177AED502F9F054D68CB91DE66F30990C45CB9
FB0D893F79F3230443D11313D6EBB93191207AE3313B8D619B84DDD8CD3878A4
B306950873DA9F4D46D4AF3FE8E4A61F72B56377153D0B890971A824936A5238
4BB5EDE175FC7E481EF74C90360755DFBF7D9D237939C43BF179895E1A404580
399E65C1EC0F675703545006B526AD5D4999C58A8A322A1480BDC6E00A059E3E
2059F46A636EEEE6A62B6E1214CE593C8E6A44D965DEBAD0B94BB1E9E4397ED4
6382B7F8A62CF533D429515069D7AF3ED443E932F28C1FBC220A4657478652DD
526208C65A376E555E91177C25C29D6E749326DE6749BBC9822C836EC1E6C690
1D8EC247701DB2DF7D29FD8ED9CFA139B68C1936059511BE83E22175FD33DE7F
72835DFBAAEBB939DE320592ADCBD738746D3E9F1CCFFB3D72A34426D57006CD
ADE0409B1A248B52378E7ECCE82BB1F4A4A85661E18ADF577A7AF35D41A333B6
E59942915D6284228ACBA46F5DDF43D3CA439B4506CCFE90F24C7BC22B49818A
141E36A6EBEAC4EBDDFFE3A1CD8A96F62D46850047DD1E00689644E9A9D6E223
30BF572FF87B069BF94EDED4EE9AAA436D4CF958C5897D06B7C97CD81681F7C5
8FEC4F546B31566D7C3F43D5829E6603AB03A0E44715E42D9D1AFFF7AACCB3BE
5EF63B1C4E79B498479145B30D89A9C4746392E8BEB42A4BC5D8CCBB281B2070
528785F331E02AA401E30A909608E8C4C56CA2ED9607D78A9A97D2774EF4D5FB
C8032955669B0469E3561D12F2AE5C7A008D5D6D8FB2DDDE41498CC6B6D44363
68D28AB9A9E70887177E32CF45F52768B6086C41EBD917B4FF3F8981A8ED13D5
04E6BA0733BAF9BA931D2557FD19D15B8FB58275287714443015F3694580C475
7234F23A96E4A38C1576C9EE90FE9E0A9F5EC4928A31B8156060EAB55F935906
BF3E2F584CC148386F9D80E0B68560BEC47141F9C5DCED967A0667DE7465B7EE
C2606AB6E9C748A89E9EE68C45C32B1FB59F6E1A6A781D86A0C3DE1146FF5CD5
A93E1EF62EEA51B201D3B14BF477572F44955B8D65BF67CD151A1136DC751200
48E1367FA200099DAD1D8017BA9EFE095875C132BA926E34A8F8C318922BA3CC
C0066047253D42A7FCB3C1780A0C4E8BD605D12B75CA6D2D249929BA4C2DED2B
AA764A41DCB7D0038E264E0340610A27244970757F3C25CFC3E853E2FEA88D20
A09CBFCFB4CF3D13A7D2321812C81B5AB9FFB72F0A58DEE977AAE50D5ACDCB21
6313F39D00D4C01843F391C30B20FE3DC8D9960422871CDEA1DB2820B537E9F3
A839976C988D6CD724D3CB61580FA06973B02E0C72C3891E4D22B39602EA5D65
3BC28E2E7BF13ACA6B3BB54E58726C1DE834CA5C0C3FE0EB837DBFFFAF3B8881
34AB38B5B3BDC9B4BD68A6337200742FB65BAE285D806F3273A4A2B6C88D7E9C
43CA8A11A99510B0A8B7B1E654C8AC3E8D668AAB6698DD49D77B928F1470EA70
2423E369484A4945CE4A25B25524EB6045D4BD546E95B0DC702E8F840292DFF1
4C096F47A2F21CD6B7480D63381B1E2022957AC237C4241F8767225E00D4DA95
8B0CA5AB955CFC82B4A73B2628A2F3B48BD6A3C0EA6FCB062F85188250B9E925
7307AA9B3217A45DC6A679FDB1CE311BB051D5C727C72CEA56D2D1802F2EC862
FB85A143D7B299223ED8525202C1B7D6901D7508E17C81A5199A57BA3B720C16
93D02E3A56CAAB8FF8EFC8DA34C873E57D38B01DF487377213764F2C51007921
9C53405917D47D54E80538222B75ACB3F2311DC7260579C7DDA09A0A30BEA557
73FE4972A46A12D7E5EB29BEDC9314736E9046AED39FFA15066BD90CEEDA44E1
185B218228603A4BE4454CA625FF4A75F5B1E907C71449E90BD6EA65B8E7DDBC
69A7F7EE5667075BDE15EEEB2495BE6DDF7C7106C66F3EF6A89F9D6EE685ADB9
E6B6A51F2B2815E0E88DF52A554E02FDD67275C7C66A1699700B83CEBE19EAED
24C1F98F12A9E59DF18C67E2348C863EDE31E97ADF14D9F180343DA29EB6D490
86888C9C079A12A564240DBB49C61F64943E97805E0445661E0B5AA0AC40A8D9
309655F4D928F66027A6668262FF8EAD78131B8CC710C6104BCB313E5C886A02
F33947182327965F9752C64E9D400BB556C2DD51FE2ED51FA366ED709A0C2579
ECFBCFB7E7721E07C9503B4C33E2A00940B0624E52F21809704749F6D81E3B82
9D150E1DF8BFF8F9BE679F191571EAB250818AE5C3E71703B516B85B1B6F9577
0B364CF19DEA920A1DED65833D902B15B5F83F74EAFFABC289CDE655EC5D586D
483DA69A55185EB7CC5F12ECA7099BAFC5493B94C8F4D2EECABD55219C8A8FA9
E7F90D27E38DA7BAE33901AF57C7DB90576C1EB6DF1DD36642B5A8BA107BAEA2
B7086DC2E4804BA57C03278F02394F4611CEA11A59B78B90C463CFD01B24A37C
CC1DCFA6067B19044BD68048F44664D1AC52489C2D7C52E02D7BA9CF50549D78
F86E725A9FB02142F8B0D96E9F2E802299F67905281285F890FF78C7D0B80E21
F723CE25814E30876470F16C5E8F87F74CFB89CB45C7090E857AB029E6C75123
998FC42D3E0C3F20960C41DBEA57F8154C88A985B0E0E306B0F9CF07D37C2291
4F9E778043F8279A423942A58A4A2475FB42D52151B2F874A2E1912444DE9D9B
14C25FA8C2E805F49B2B918E0BFEB2B97BAB801C7B3D314418E48F9FC2C35D85
1E94B698D4235C83C601AC47989890DA61133587DAAA4802F999D739FCFA75C0
5E15B0A1304BA80F27B387E1A1C3AEA181619810EBC3908A5EE8356CEF4A62A5
93FC1B55D3E111A000D42EBDFE2F1E19060E939D525F8D01136A7CD36F643201
F5FF971324F72468AA5AD6D13FFC98157FED414D6FA40AEC9E8A3D579CEC7737
F9D9CC8533DE3303668A042551B0799A7646D4BA5BE8ED3B3DC02B71E34D6AA3
30B97BFB4A6AA66A805ACF593CD86F5106A639A9BF73A74599921556BB8982FF
6EF8934008B6611F2ABDDDAD5E1B2A9E8032747401A80A05927F7F265666D757
9B44B8598D034C73DC34C4F810857ADB22FD1E0B5232FF2FFBB3DA27565446DB
11FA32359BBB5BCEE2C9C90E05922AA46A1D6D66A23EC29DEDB28F4B253EDE60
68C679BD5AAEEA6D9DA70201985A28F701162C2F7F9270C6F847910C8DEEF9EF
C464D21DECF4CADB3E3F7F8DB1CBCAD7F05A1CCE9E325F0F891DC6815CAD5E2D
0400A2FF10FBC74D24AB6B857291BCDA9B6778220B496A794F9B94A2F7E172C9
7AB5684F331981467EDD6E122547B3B8A7668DD996B461D16380F91AEF70E885
71AC7D8B0AE025B1A51E10221B4EF82D270EF712C30399977100594A5886F365
97FF31A1957949CF8EC35046F1566F5A02A0A4080A732B877EA2DED6026CFA18
07B087EAB33F273786E184BC32D3AEC992B620A98338F962CD1669D0DE21FE5B
83E1D2DD33E5F85C523665E89BE08571244ECF0E3045B175021256F3966F8C69
73E4254B3E605D8CA74A7C494894F6BFED08A0AAA58FC2983315F8958912F1CA
6926CE94C3A3D64F1FB81A7057D9E4D48B2911B1AC4EFEA58CAEBE7C450BBA19
2F680BDF496A8D3BC5C0ABCF1A91A9ECE26A7A50DEE4ACA130DD76A67920DBB6
D47314FF4CCA4DAB06CBFE577AB49D78602657410BED54E8116F2067AD2F9B62
E5EDD6FFDABAF6A0834A8A32FBC5C90D143C5F6FAD3E4A3F80C2FC2B6A1EA45B
1E40B639C1FD4FBE2F70FE56B13AA90E78AF892C68B6248DB6EF4E4CD8C6953A
5C3B4BF27BA8A317BA18287D24156F6AD1E7D85A98CD8D71BA01CA74D342A750
88082B6048B8F7EAC2D6E2FAF9287268BF1C0FB911F7C94178959984FE3568F5
F91EE275365769916EF1BF70C062A455945FF32910FE815C9A30BECFC696AD2F
24620366F20FA1A9969153F4D95AA1618380D55DF21A4E88CC7B7FFD34E9C162
2B38D3C7449167D2BB71A2E2A8AB4936EA7B25985110F0F59A79448D44E92E5A
691F651E0B0956824FC31567779E0A3C4DFD6C280B9D3C4D158900960AA872B1
411AFB91DC4E6728A1CA7BA4ACB868F9CC431C92BAB57EA97E009D6F40978896
B8F7A0B472D1F9FFC68F7C2B7C6C4A30853D90BE54207C2842045E4CB16FC9F2
F8C4245998CC22E782B544B4AF7127EA6D5B8FF5A07352586E01A4C384B89A91
D53E0CD886C7BE0692CEB0CF29DEBA57C0260490AC60C0AC71C775FF45AFC565
39492DE716C44793F22D21EA39CC104695A06D169F15B92FB597C7E148267850
42123F578404BB143E60CF3AF1721C485BA02817E893DF04072B5D76AFE97A87
CF71BFAF2660CFA54C2223533E3493482391604EC3CD33EF1F0568CA540F9975
63E18B28804119292866F8B534249B0DC84A5685EF78B1D0F72CE3FE6E475E5D
061105933646FCD745724B6005BEEFF3FA45A3B0827C61ABFA9DDB04C8E784B7
0455187E7D3B4AF9FE320D0AEA175BE61D1F741FE571ED2FB13FB2FE1EFFCBC7
19BDC2448BBFC520C45811FCAD52287812F76A878BD8A01A713F74E1D06805A0
5949B289A9B088BD9EC3B6580F2817D63DE90FD71A3CBAB7177AD139137E1E99
2023356C5C546DEE5401E1B9876EE5C6B153BA55F194E998B6EC925AC28831C6
53326682EB823194818E6DE249207343C37BE9B926EEDC9EE25202AF6000790C
1C1D0A5BF0C4623B9815B8D3B777C8211F81404A39FDB273B64ED685BB2F05E6
532BBF24344E0ABA2A16F7C27F4A0316C4B5BE43E1714FE2305BD7B385D49521
11989A6FA08A46A9CDA9A7F497249EE3006D67C3C07516B03861AA05DDB016BB
A5D31D4FF1A9F14DE0BA8707B4D7F7F533F8AF63E3AEF3E28ED0B21AEBFAF220
0F63EDBED52E7A45C4B92B4D4E5EFA64C349484222A9FCE7DCC8B58F6404F9EC
B1F92C439FDC8F59AAC8AAD4375141633300549D0A51D846382E841BBF95A075
28C8343292E178983EAD85A8798CEB212797BBE778DCDB2D0F6726BCF115DA15
343506080B4FE69807BC5F37C37F75307C68061FE700D47A6254A0D16CDDB671
CC59BE6D8B935D1A346C5B78CAAD9E68D5BC6CB4CD118419E5AE892A5055F5F9
4E582DD089DAE985DE0526ECA4246DD91C9C512BF46E5E8F7EC004CBFF72215C
F3CAB7921E974E0F025090D4A071AD0580BC14CA70AEA97FF4B704F7641BC266
15B60B96C85568E76D34AD5D4D314FCC538984EDC70EE31534E6FF73120542EA
25681E01597C9A8068828C2E113E0EF9EFD1011B373B255A74797B2ED2CEC60E
1261814D213057725969D808B280BE2A969D2207BDDCAAB4CB9DB710C91AFC97
674F2843FB709E08E283462DDB1DB94C91222775300DDF7F463EA60EDCE62116
ECCD47253C0579F78802EDFFAEA1B27E2B385B6431EDB69A60154CF1284FFFFE
B953A66691941FB3973E9829A8FB165849B7300786B6BB9781640696B74F41C7
D5E32C525FAF2F16C660DF6EBC642EDEA4A13F646345C5A43825AB1EBC29C03F
D5276C6CD7F3B16D23257DECF0974678EA5A9CFA0A910EA98EFC31A04041B8A3
E4A901284F589BCD0C7250B4AA21AC42B13A3B38664AFC53F5576EDAEB5387B3
F8CA0492CA1038FEA46B99D05AE5ED8E320805347DF2E43FCF67050B2A54A760
6CC3C81329015CD414084B5D96A1B0ED2BA5E4D5BA20DBDDBB8359030780CCE9
ADC30421A0A59116948B1C5D105C70F57C53A8F04B503EF9929C90ED629A87C0
33A5FA7D5041605D5F8BBCF79C061D853369B8ADE0B18E8DFDE785893B5EFD60
19A70ECF8D03EE6A6F5DD566CD2A6228577299FAF90989AC79113FD948C3B94C
B7CD358CABBC7761458D882F528F85C19F987562CD6AA206F56662BE96AE49BE
13904D8EB5BEFDB730DA86C9CA2049211DFC67FEF43680759C56A7DE18F69F1E
56264B8E31F7850BB961E933EAF370C5C5E474FC4A46FBB1FF01C814878F0C17
7F552BDC9BB43E789B5160029C2C808865F2E4A0183C3F12358E6642B2A95C11
44C7F8E92600D0BAA927ABC183A538251EE61B8F3C498E27493FF1368E57D1D3
BB77BCA871A2411D9B33A9A515AC5D6B5F8B5A1402C2C4DC011B043066EFFD11
8C1E7B19D83F738F4D305CE85F7416979CD264494B0B223692EA461238FFF855
A95BBDAEF679177325A4CAAD8C93AA8B50BBA0F69C64A315706D38591372BADD
5516350DFD384B94A8A7F314CD33781D5FA679A0A56B6140E0FAE1833DF62CBE
183EB6BB1ED1885730E570A3252AAEDB3183D3EEC87358B9A22224B2A954DB76
FFBE2AB51344990FFB38A6DBEC48F9CBDCEDB7655264E5A5CBFF0E4E7E7536E7
F6C6212280E8B23A86621421E2B0DE3A365F9948A115239FB86E04156D010654
3A53CC16344BD81A194FEBD7861393771541DFDA94B1438B4AEB72DD3680CDFC
E4008A7DC06CAF501CC36E692F4624D84D70949442CA8BB93B63EEB09E0AD78B
CE5365E1CE48CD621592E13F40A9276AFA5678018548215773C0D21882DCCBB1
F74559B6E245417C95D7194B1817A5D4B8DDD32EFB45B567DE081A7A9EAAA8B2
6EF5E578EC302A5C63F547BC4619E5041C903E570CA4BFA0254541A3FE4712B1
D0739BEA5B0586EDC6E7D39F09E617F2CA0C7D35F28EE7422F7CA31B3A514AE4
BCB3B4E4EE45019BA6FF7DF40D9FE58108584C65DACBC4A116FC934705542C84
1542BC1FDB26DBE389CED1923C0D24BE982D6AE5E796ADCE781F1F866CC356BF
B3FC75620C9E3106C682E0D9A3BBAFDA592A6F36610CF1C7E799DA1F859CA1E2
2DD25F2F16ECA8E5DFD480060642FF19038EA627ED64658353BE1CA3769040F0
03E92214B803DBF81D603AA8E1C41CE5D48D0DE181A612268EF1A34134DCD369
BC6549D8D02596DE943C067A52E1E24B60077D48C64C19A374D2E21792BC0CBE
F817DCE1BA434CC2A9B17C8909097119232B3876EA03A4AB8214ED1CC39329D4
3D1A3EB7D6F68685D43D11A7B6645971E03FEC46CC866E8256FD47AE6B7F72EE
B3548BC968950BF4CC728378CBB6585126F5302B9FBDE0AC56D4BF37E9880EE1
78D00E351A980FD7926DB858B91872F91CEBFCF19E6A51916902C2CD37D25492
5C8492A676F6B639809E4393DBA2DD7079F8F2368FD8D8279CD98C44DB6835A3
2B82D170A9C9634F4D8720A5552B5A3F17430C320B093795BEB1466E532F8E20
8D5E7F5F2158B3DE9E17E22637C65BB7CEC0F081877B317766DEA2090316916B
563D88EF33AB92CA36C6D06E8D4E51000F60EB69CFE870331E0FACA51328C628
017AC93638DEA121647C09131AF0AF6326F2893A987DA9D0A45EDB6812A309A4
2859ACD468FB0B6A381975E9A01692A603FF9D104723BB02264DF36F8FEB205E
020B27F5307E54B6F4A4858CEF9F21FC39C9DAC4C28FD713683DEC1DA106227D
7A36B5AA4F7530F9BA4874517A1DA067436CEDBF502C4013C1C4FB9D874857AF
F7B9A1E820720EC4993EC419CC471B55FD82E610E041311583C14F86BF0CB18D
048901F2F8E7F34D8204C021434CC2FDC35A4FDC88E365F40B9D576708B6B809
2924DDC9E79640EEFC4B9852F50C93C6BA15171124DBD466B82F3F53CE916B65
496DF9FE3E1C4CA174486532FB436F629EAD2AB3BF6C3781D123D7B13FA06622
2BB17E3AC567A69429EA3D1E7FCCF0E3330146F527C097FB696182C2DB093794
9A564D4487EB05297392A1310E4176E97358DECFA6BE9B8612606BD71EE76ACA
BD4079137C324ED9094148BB33DB26E3E436B06A04B309E8E02A5AF9B9433AF2
1E8D84C50F750434191ECF16684ACF84FF5DF5F69DCD8FB92B332FB6509FC3FA
395199F80080FD0635C57A4F765901F6DC2E9040E85D239345776548C62BE1B2
0F349525DC3AE759E21AEED1C09E8009449D78E431EBCBBD0149BC294A9A2964
0874F1BC354B50BED1A629D536AC5FEC2823BCD487BFE8E77B17095B9886509D
E66F112F49E63A16F60B6795CF0D93839AE7EB404B5D7AB94E4C153F264048F3
77A11D08F846F08E63E7B8614AB4CAB58A065F5AF8CAFE8E0BDCF4FD673C12FE
2E2F0AE83DD7687AF90CFC4C1A46454B745938B8D4496E244692BDA44E136B80
1A216AAE5168BF1DDF7684F60FF9EE3A06766DB1C758A8D75A32116FC143C27A
F97BD698359074FAAC55DEE70CC560D6AC6457B5C52F58E6D6B6C4C7A6F71524
A3FC7E01BA3CCCB302F2F1DCC84688BC2EADC60BB6225D9CB6CA887922B117EB
0E7D2AE0F8F7EF854960CADD7176090972C5B158A400A02EF9D6536F4BE3C86F
9764E9D7F4313861B4D82AC08870B1FB60F4C7F19A7195E992B3C0533C07A21C
C042E6247579335F3CE185C2DCEBF14A652AD3A8995FB0E88F7D2C27B186FBFD
22B68F30AB29E8F16BEB88A6CFF0978CD6F0A6165E6117720C4A8B1D5D8A53A8
67D9742F0298198BC22AAF7BFC20B637B2AE97252B52101B6F33F6396AA5507D
35F092FA58B287777FEDAAE750B107CCC7C00745D6564B0C2F3B595C9F8B8A31
06AC80DB85CE6630A2ED8F81F85DBFA44D2F9C0DE26C2417D362C41DD7F96C39
5D38373B81323A7E861EF6AB8AEB55CEFDACC6BBFAE09EBC38FCFE2DE44EF169
725ADB63F35AB6A2D55C6FB79CDE22BF421C982054831B13C0CCD75CFE65E107
1AC6404D3D2A68B2366102ABAD3D8ABE1CFB0A9DE45BD81C34F86641F2DE5271
26363C9A3AEDC52E192282EBC1E4E3C8B5345709E0843D17D3C5727AB54DC757
EB089B865E5329215414AC13FA5BBBAD1644C28821E5B1EE0092B2610F1D528A
F5650261ECE518732B43397807DE913CEBE01FFE68E34547E71D9A12596C4151
DF7D5DB5AD7787A917622B6A36937998D8DE0D7C5500A05DBAA0C671065C069B
7A80127C68319CCF3396B200AEC477909C2A7CFACF4E2DDFA16383B9195F6034
C9C7D5C18FE5C273C0C08E671CDD80A6E1F2C36B7494E68E34391E2542903355
658BD278E676961066C7FE8CC4F1A4DC3169C25CF63F91D69A3C1C428F1E3EEA
4F7092710495D7A30239E7E76EFA9CA18600157CE4B7B663D03AB336534CE24C
80F654A39D2C5D50CA531627849DA765FFDCAAD86026AE6BF312CDF423D6EDAE
4D70E01C5CF828ACB0730F46F17A34B04C110AA8EB47CAAE0E7B564FB9D11FBB
D82D1B22C0DBAA929919D80DEF89C303AE9B7A5F45D61E02D0AB82AFBE793D70
8ABB68FB5FED4E2A045971D213CDC2DB3621FE6CDAFEE3D6D96604D180892D9E
1AD5D37BACDBCEE97B97156C9B679A6CD1E78B1920D259C0095BA4D5A0F9607E
25DC31323A36686307842337CD1F9695491BBBDF271B5345C44BF28907CDCF88
27EC04177712A79AED14FD6A58590CAEC36412DBD85CA66FEEB463995EF7066E
F0AFB220FE1A55A243CC0A5675418F3EF2EE092B3043182EA2E9516AD54B9F05
7BA99AE776E482E332FC6F4EBD5E2952106F7D13A9A21324819CE85AD51C124E
CBB70A98762196BE67D2ED60D7967278469F8151750EBC9BF2355EF3F59E7E8A
696DF1DF9B36FE935AC7ED5FBCC244582511812BC112E93686D71738FE955FD7
C67F11323E059BCD0C4BE8A2E851BDFDBDFB0800183386582831736A70CC3AC0
A04D8E120B61C9B1CFBE3C57C6A60222A5C6ADF8C6FD8D6A39828B171915FFF4
545D5E6198DF7C495B95A55A5420F4F1C298D34F3811D5DDA7F33DC6E913E04E
D6667EF6932D12617F4FA5B2075ABBFA5B9682D05205EEC7B2D5345299B536DC
B10CE7B05165DCEEFA72DC1B32829BCE58E99BB4116CCAB159DE672A00C4F3C9
E03B5659AF4E7B572C44DC36C236272FD4CDFC8923B80543E5C0B54AC98BB16F
D06B69192A2146790B67AA56FADF3E67FDBE0B929998B413F0629F86E2552DE0
E783C2C0F86AC6544D1C7C31A53640E45FADCBEEC73D359624D9BDABADC859E4
2CE29B85E12C010232513BC09BE3CBACE7032FA494C240ACBD6FAAB7F7E1842E
06734A510548DE1788FF9C89DFBB823DF700E40C28E21001E06D4E3A5D9B158C
2850D3804A3FD46D6C80AE2BC445A8E0CC91E1D614C9FCA10A660D8835C4F50F
6BD16967841E1A749084C0602F13B2F4140A0A7DE082798F5F878A85ADF68A69
75BE0CBEFCB2C3C34A650FE137F2CF48DB26F515B6576AE85A29BA65112121E1
DEDF84E3B0F923CC12B6228C0105AE5F8C1D033F0ABCA75BFCFB0BE10DF0E964
1DBB70577AE828DD3CAE98FA9E1A73C2155FC98C4431CEF86BD83C5C530FF9E9
E77B6982E706B2EE7AF1B21C91041D828C72E2878F2F679C3A0029A3A8BC940E
AF782A3DD97E9D9C38B45594AD68EE45EFDAFE4B182070AA3A421603ECC1623D
32353CD7684A1E94CC9316FFBBD1CFA91D0E2276D5B0C8E74E5B98F8294C4AF6
FCAF365D4B5550BBD8EA3D1619BCE500F78A23114CFD40B5C0041310556883CE
C750C615EDCBCCDF3988BBEC43D3EC315817DD65934A6057B1351BF5739DB6EF
3EFE263FDD04A29FDD1974485126E0DC86B790B23A6FC65660A12C174AF75DF1
CDE0A18C94817F54639ABE64A80E973A68CA7A4061A48AB6671A33AE2AEAA6DC
F6503703300CB5AB595D7C58123CE01E1590A3015450FC147DED17AB48ED8B88
CB1B254415BAE8C4136ECE75A3690DE29BAD4958AE96660A7860BFF06658C32C
AF85AD55E9B2670407610922D5FCF87A82D384170EFC18551D32BEDB70891D12
5D88110CC3735ED92A0886948E310A0FEF9B15ADC95969C35978447E18ABC448
66FD29CF6249BD1C31992357CF473042A9D1E0E9424736508813DF29C8AE75ED
2B9F54F37ABA6C9C89D33D3CC80631823E9F49106978DA98D604EFAF77C2E004
58C9158E8D9C9AD491EC869FF94DBFD3A26DC42DB3D84D1CD5BE08DB019BDCD1
86DE1767436A743C178EBAF80C96264722C4B12B37F5B60E17C6665863AC03E8
F8CE02D50F50548797E8B789CFB71E67F2ADB1429C4D936EC7F85018DF421937
D7FA8104341A623D4CE4A7683329F4A2220DBF2517F9A651E1246FD015364B48
195A87AB16077B491B42DE42482A7260625ECADD91A21583631E053A96AF10A6
76DFD76AD5A8A275CC121F4D1E6C7484510F057D24B4228F66015A7ABF63752C
6DE280A766485832583A7B75E47BCCCE1638C54D4EF549C8F8F494C2083A550C
3AA9D53C3124FA02E588FE4277688E70624518AAC7D5449F72C61EE438270F34
449D98B3AB03652A6AA455B2268B820BE6FB4D17BBDC178AFFB0DEB4493D2BEE
DFEB142A42674CCA7B685CB9BBF81851B180BF377D46EB16B458516A4BE80A80
DF94FA47BCD27AC7026C782E2E6E4A524B93EB3F3E0079463CFC8807F036A149
EF4C38F0910F96C260B0F169F14C8071CC674140E8E329A8AB746D059B92E02B
93D4969B3F2CF73346FB6684EF02C3881D98B9713BA863A47023CB0A67E65F84
19ED1239DECF945E719108E51441FB4C0A775D18DA05A45C5B2CC24F165FC323
F6BCE76CCB4E6E3FD7157359A35A62D74E4BA7BB1D8F484B70C1B302BF48AFE2
55319748DA64745992ED57E912440DB652D4C20EC662F274C72BF33A6A1B8AF0
431F373DF8E12954B2A7FE5066D01371359A11E8B1772B8B4F02DB01DA8554B8
E069134BA42B9E6D69AE3D1C4B818198FD31FAC77CBA7BB5040980DB33956BB1
C3DC69601E56F413DB5601102E76A190DD6FF82BED9F2A9E2EFC1DC1B721679A
19BF0ABC4E804FB97CEC5F77202E0A46F297C3D91220847CC3FA326458CB8A6D
80DCF2E8C6012FF1167A686F9A759F82AF35B49C0DF77C9A11E7D4BDE1D10237
51A623479522ED732A8A6BC80DF445ABE96B573C47F9CCEE3847E5B1336A5FCB
7AEAF9277199CDE9259510FDD6FDF9BAEC0F5EB5912BF0388A94F787E3E726E2
3CDC17D2B91804B6C354CB657824644FCB941D4A9527AF21D28417F7D4ADE2B7
890A6A81CED1DC9B42865FF3C8A3BC731B6B0FDB2ADE1E952AC224C605EF443B
B593B2821801FEB73D261A50D637FB8AEE4F94D81BB71569A8E8601CA673325F
C1FD74B99FF63C852D7FE4AE517E9DB438E1852613C87EB95B8C65362C50773B
46AAFA7E82EB995E2788835CF9BF120552EA7CE4641DF298B0ECC60CA4B052B3
C1DB1CFEFBAC20F9A8878D46A6701726BC11F20B55A9C1360DB8E6F6CD61CCC8
592939BAA41D6C47E845FBF05AC7A06F2D4E2880EB4A142B123701498B8604BF
902A1912A066ABAEAAA44F81687FBA7846B57F996D0B21E89872FD564ACB36CB
F058A6C14649BBE40E0EF6EFD917EE28E980A062580B9FA11ECA91DB75DF7CC2
9FFF274B4E1CA95D33F73C0F123EAC877CA0FF3D6105ECF984C628D33EC351FA
D60CFA37E49795104B47F6EF79142A4A1A5CC32461273238E345E1035281CA68
4C114B20871AF852D107521BE84AA5F62BD39DEE066DA6ED1DCCFC631566468A
8EA91CCDBF2CB575F757E91002E07D6B77CA2241141E1EDC021A0067FE204A96
2E40AB6CFBF6A1CE18AA2EBF8DD8971D2DC7982F9176CB8EF0D82C5EE7B4D4B0
D1BC2A2EFAB0D06C519447050630030391782E58A9372198343A77CE4254CAE4
265519B18426FF34E7D3F525A24C9566B2BD1AE555B21F1ACB757D7B51A9DB72
1193CA8D8B9795BAC734FF4093F8918B09792D962D745036951CBEB23E3DDF9A
CAD535F3CF047AC93C0EB2FBF45CD92D84108ED5FED4C6E4066C2981B71EAC04
30C7FC0AA01A34EB2A043BA19086EC2EE30B47A4051B803594EE3950BFD86C89
D43E3BCC705E1F09B1E395E3500B5284AD31F377D68293B9FDD6F04481F66BE2
89C5940BF08BAC07534BA68F28A433F0508B9485B3795859550F11D8E813E483
AF59201EBDC36EE403E3C6380165DEC03B6DD8499506E3AC5E5D90445AB76726
968549ED32CAD91124FD36A7CB9896F974045A3AA723AE269622ACFEE9C5FD91
0F7FF8297C501B48AFBDD26AF2D989559FDF570FB390CAFF2DD853B0516E1394
F3C05D2ADB50B7F02B3E79A3E52A2D620504C4695385B6F6F72F3E84E5776FAD
CE1811F78FD7BE7938D325E6BF6C522DF37A6D1881A4239E9C46973BA30A26EC
691FE9C88BD8743666608B5266A703530C94F0C5C79E990F15E00FCF226A42AF
C284B89CB941FF20400DD065CE993E0440AEC9719CE45C2F822C6731EA20781E
A5D2AD36D70BC262D165E99F862C63E777928072C47C3B4A2404DC128293FD70
E7E4625827581C8610A2FADAF1FF2C1D2082C1F7E41BB9741A2DC05E84A9BB0D
5DEA032B2B4D5F8236F29219573826DF5CE8E1DAFE29C99CFE57E4625908084C
5EDA152F6DD2713F0B5327C7E21633C86C99BC87D343A05B8B4AD124BA6F30C9
C48E338685FD6C1A02D512EA821BA58844A66BB1F11FA4B1F6A13460BDF3F371
B7FA4EE388A0F19BB5BD9DC916FA539C672A2B8B5B64251CB3FDD57C341FDE42
5A0AA5724983B65AA7FBE874AEEF98A27529B4143660ABFB71018B1DCB0D7F81
30CAA0B8EFFF57F7B76C620AD57C33296B8897E6D47F4F435F098D346360D280
B813A8BEA26BEBEA0E3B12E38D2D9487818C3A71F3F0142C0D2BA97AAB21D5B0
34759A49C2E2AD193F426738329351D7B6C43BB18143C055B60F3C1F33AAFCC9
0CFA13983934BCC2A6A658CB3E6859049B3C6D0A4338B8CB0D158E50707B7F04
F7880C0E3F4A29A9499A3781BFA9254B22DAE6FA70BE64E22D63F0CAD9246EF2
652EFBA50FE8E2B806C643FE4686B8177D0E290A94871B59251E02AFFA3CAC36
7FDAC6DA831632A47D7E7447122544F43951AF2583AFE49CEB7DD3C1E63E2172
F0A5CC9BA7D9B4A8363BB94F73ACBB4CD27974FCEE079E42B7F676EBD85E5F21
FA095C1BDD305F557FAC0F613C32B0549273DC7789E792F012CC10486C74A7C1
3AE57541A9C9A4CE8482AD4BE58057CB7DDF52D82A756B94842B91A9AEBF21A6
B5EB84E7D0850954AAFE87F9299EC7FEEE5B8D8919E0D1E69B1FE209C5F74C45
8DB056F7BBAD2C03FDC5DA687CFA4330282DFBFF3B6CEE99B23AEF5E371D88BB
7BA41AAF75AECA63C6FBE59431B87EE1AE5BFAA4817F48445F233AE8419798D8
8A7E2B70C390215A940558145D2C70C5F136D0ACF000A8F3B7F563E279D82967
3D04E16075EC92136EDB97ADC2BDDDC38341384F9E123E99D62E502D69F59FF4
DF2371BD20BB27D905CB42DDF18C898E8F37C0832AEC7025CAA524C8B374AACE
6AEAC8CB4182A887EF4B2F7F946CC192C8795A084EB7CEB7B4E58BD790922483
D083CEEB00E4AA4B4741E0206FD06625F2777BCE315FEFB18C90BACEFC9F8FF9
FE79A93E1CF77874C2300DDBB9A7BC130DAED4A1422E71A7736179A82026C893
B09B248D635349CB78888FBEBE0DE296D2AEEB00BA2C98428A482DCD369EC8F0
87BE569E628919F0A1E2BF41A206295152CE0A04DF64AD00D68BF7A4DAF9253D
A8F8043F300344F32EFC66BFE32202BF288B377F5FB494E28B5F26625222AF83
E554F3EC8E5FED2D838B6C11A1F2D41FC5608C4216ED80EAE6F2EB5016BEDA2D
70CE3EBCEA519710737399D7F9B80DA4BD8AC922624B0CD8D1D852A20FE0F6E4
6E23DF7A84074526EB3A6047C46E4F021DD0A60391B3D56953B09F283483BE7C
FAA66508B3412D109FB09BABE1DE6A9F210B590563EA94F930201BDACC4406CB
8E601B345BF60B6462DD7913665633A369E7A3EAD9838923342D8B23AE0864DE
92FC7EA1F45B80A553E582C59264192CC13EA5A623CAAD1FA80328613B50818A
1FFE2E3E85F329F8EC9179CC2556BFAD8971B924310084F92B6FBCC5415159C5
A2DC2A851524D166CA940E6D0A741AC388F04B00DE2653B18C99512BDA16144E
D81AA8ECE909B02354FF0785CFD525AF71550F7DA28C9D4153169E29D9DC3ABA
360CF0E51907CEBE3B8D4FA9FA36FEA85F8B6C77ADBBF459DAC4DE9A8B591956
96A5CF7407395D68959C9855DACC1B51BBE1D7FAC36561C8942811924F2D9474
EC6897E94EE9F1B0AB25EBEE221BA6CEA5389EB6F670BA5FDBFBC78A1831B726
3210E607B04566B91B6C0F0BD8E0D494DC176559F4BFDC2F2ED6DAE547783D31
0F6309582F7DA4F91060462F9C68C424E58068C1438B142934E17CB9680E9D70
95E0B993276709BB5DF4F151C489DB3867A4A2C52F0F40EB176F39DA8BD3689D
66A66CB65B0AB8DEEFE6F6BA47A47221B7C0D9A9F29FF628375CEE3D981C3867
89EA59070C49CD3B401B6A0F7D09F5A6B509D345A8CBF1DFC11F715B1E7BC45A
23E9F871159B2F3CDA9654D2FCFCA727506D0094A1BC97591D02CF51DABBDC9C
6BC277EBDDE83AC7F86F3663E27A66F14E1E1C1A1C61CA95A8C1AB892D2DA6CB
E510C4DE299C6E1E2B5E4C4B08B7C409A3EEF2BA09BE5D3F59BB73A98E7AE6F8
A15C56267D4EC47542C9B3F94BA7C5E1C9B7EE124FDE800897F045CB158999BF
CBD54285CEEB9EDD376E010D766FC979E4DC1821F9C86582DEA06C1F4F215FB3
C3923AEA99C3463B01498B8604BF902A1912A066ABAEAAA44F81687E82B0AA13
F3CFBF315BCBC1B4C073FE943B6BBDF2C5C72E00488BD53B9768C13917F21CD4
CCD4C65D1995ED62E51B0B7336BBC58D45E65D6A58AED970483C8E085FE23395
FADB130A81A430034EEB8F29271CCB2F6C439CBA6BBF06BABED950690C8CB5FE
801FD52D71197AF5D5007467F08304194538BD8434FB05510EEA429157A88C79
B55D644C2B4A70DDBFF51F08B0D528DB78330A14107B7CA690CDC0B45CA875A6
64177442AD589A4395EF7A476EB50E056B068A3CE85458A2D526CC883F11D2AD
A654F7BD93093DBA72710BCE5A5AEDA2786F84DF58762E5185D9E03E25709511
03F301F73827D13B1DCCF42389A260FBCBADB6B50921D7522955E3B67DF72230
29885746927062CFF2A754038246C46C1A5B0AD5810236F391D8FC9D26DDAF0A
E724941FCC6ADD4BB2B450D3249B60EB8A78D631EE73927800408E8080A5957E
CD92F62351172E72A99BF27CA2501C441483A761338B0E76D4F510B78A7B11A9
A3943D196A412094119F6C7B842348893BB548972792F6C98BC185514EE68967
025779E5CDD456756E002B7700711BE194DB6748FE4F98AFD044877F327F2570
6BF3F256CC87117853336A14E25BD0E38B6C73C52B41E969BDED64F392EEA73A
3E7565B14E781A22372F661367CE4708956F35DCF1A55E234F546E11545BE9A6
B6E99913FB7610E7961D69C97317F2B4A4B923CCD5062749CCB4EECD8F300D52
0853D595CC8D7DB0BDC0B88E5B5800EA7262C0A1DC3D95CE623A9DC2F8C38C45
EFF25CF5993E96D3E319E0D05FD323718C7293FB5122527EFA589455B7C07547
E3BAAA4AA7CD8A2387EB1A96E316D1527B5003F22B01112F4BDB701BB94B4870
127C82353C2086E551C702935BB5111089F167B79048FA48B7249F5D047CAFDD
08821CD7F543D5811D3540BC4395F6D808C6B1FABA4CB1183FC71E080925E657
75C04B187E74AF87FC2953781DD30F4FB38CBDE5E0700BB4A6EE177D44BD3DA3
D953FBA600DA2AC93E0D08680E61495AD3405EA689AA378D0E12672462D4CF03
49370AA3F656B45B5A331AA0CA8E192532476CD8EA1F5AF507CB853A32E8C534
9B1DFA0D1383C50BB3E6C3DF078ACB88DB37ECB38AA8C6109E7767AA28831253
9283EB06FDF29C10FB803BAADC063669A5A0E0F514455D1EAB5788C6EB0166CE
199A0350CE3247D5FEA450DB6CCCBD10EF5FC49437CF42E2EAFF61B93429B3F7
5A62DAF91C533FD461B20F5C6AD1E43C67E096E22A96A4A4AB4BB2CEC3DC1CCB
1480C8543EBB477FB3B36FBE46178546EC8D796721C7EF60237BE0131A1E7C53
0B179890D5B5088C31EF0135EC95CD8FCFFE6C7E4C31E6C38277370BC47B300E
2CF294BD90A21E04EB9C020465CC6CB1FDE889E510E9FD93AC653BF322E96142
02538AB1CA8CC60E91A98AC921CABE0DBBD7E15D5799E8120D2A486246972FAF
131C6C94BC37019E22208FF4D634064884D109D464D37969E6F71AF3FEA00303
53C12E7D8BC78E06BF785C057A2D723BAE7DFA36B38B0F7A0DF40BF00E60C644
ED094769E2DFA91F73501701A16DC745C6A92915A885899F47A8BADE4F3F7E76
D2A403EEB7A4A954235A57F0F599D3BD981EB9EE99339842E652479368F3992D
91D6DCC15A7C3ABEFA83C16DC1CEC376DC3BB8F4BD627EC828896A8815932DF7
EA440C49CD3E02DF52BAFBC01A13E2CCCF51C6C715FDED49103626155C37D94B
F0C9F285414903C4E1C14C0A9E5298535BBD2C87D43ADC32B161ED0A62ABD4C7
42E7140C5A713A0DF0633B0FDA064321595A306FA80E3632772BF8651FCEF83C
DB92F91E71CEBF92988668A963F780A78E56CA9D87C1C5E6CB0CC4DC3F1C5D3F
F29509622BB73C2A0FA644124437C6DE2B0F8E9E481BDAA8A5914E6E2A1D1603
7038A985B10B652671AA85AA200B19C6F06385D63627B135E46392C9230BECAE
0F1946FC7115EEE9EA10B3EB5DF9912A7F5A8E1ECA63FC9A5ED285837271FAF6
CC611B6559EDEF9C514BF9FBA3A854DA481FBC1CC4B58095CA43AEE0D646FEB0
09049940F99DD41D8B45F923EFB256681998DA864C4E7DCF9AE18AB16827490D
C1FCEB260C602DE1FBCE1B70F441BAECB3580F7C0B432D0282C605F956327F3F
8392895C072F6347883E14C527DF7A2164B37935B4EE8970665FA751137683D7
301DC69C51E8D0541100E3DF71D501F4BFA0AE8260E6731838E6FD512283643D
9BA7BEFDA1978E698AB1BEE746F5D1C6CB9A052204766EDC5CD38BB251DF7AE4
8AC02FD82B1CD3E595A606041F59E9036D170DAD9CF941CE99E6B2AE40CF1CE4
264DFFEBFCB443DC19B7D47299E2C05EDD18B1F276F5F3106A9747916B5BFA01
6A4BFC3B397A617E176C79AD0A7293D1C97727F8CB58E43569911E100A036EF5
60E6678C15EEBE073141FA0EB382C75267AC9F2F2EA35182EE23ABB5DFD35494
B33D7B83AB55AD5C17C069AD7514A06BCBC04836494D7BCF2EAB1805A7259059
02364A2F6239413DD1708517296DFF90175D3C54A4DD511EAFC42775C1B37599
396DB70424C67B69A678C8D5CDD137AED2B1140CECAD52A56F1BFD459667449F
B7D3A09203AAED46193B4D652DF6A4537FC25219FD3D85D9E03AB9396E9411BD
4C9FF5CD1F2363348893D241B3148E2CD2F69D5515EEE4CB0ED4083488A64F48
2A7B0AAF21FC011423D74FCA28A52FE59BDB2B21A65EBB3AF99C3E02D35C1B1F
7C9D1B8958A42DE22DE3D1C72ED10403C72A2BBF687F1E923F97ECDCEDEBAF23
3EED35DDD7C4780CB46C46A42E63896BEFA9ECA318F18B5B4B9E277E1AD28967
E56C9CC92431283E3FEC6B145A8B026D3A5240EE71825B4D9FEBC08EA9C77C46
3A6D12AB75086179979A655743C623B34333EDB0DEE3ACDDA1F583E1423D4F34
4C2CEF37572E4BD892DA454AD771CBAB8D802B28E97E3B1E097CB13153378D85
500BB10C7EAA5D7F2701FFFC593487D43D5C9BA5724888757D6F6FC0F3E4585C
AE02092F991F62E3F6573133B8CC1CA522A205BF77E16D1B0387843CD39A2AF0
EC9B5167743001AA6A1B7C9AF629B6230BFD81E2AC57A8E54B8671C601372B05
A4483BC8446F5E8FC474B17DB57760F0077A8C54FC0C9902DC64ECAF56D3BF3A
F342B6C848B964C0FB391A7DC9318FCF55296C4F2268E5F8A1292BEFC6954A36
14CEC9D7C3D2E03EEE8572462404CD8541CA185C2D47F078EF61B49981EADC44
27DF95F15FD7D1720ED87641DC36AF482F2E48AA56435A4BFC57904CDBA6BB2F
B35CD5E147DFA6D249F9A5AC91B1ED3896F2C6874D6C2A6A5B0F6F2ACE273E8A
AA1E8E40424BF886C19F170C14F02D0BE301297AAD126E579F022355863119C5
C93840E252580BB3EF40987B73813E7A04AE7F27B7E06EED8CC276FBC94CD720
E3ECEB8E76C1EF67C1ADB1E3BB0C31AA1615BB811A878A19C1C03F5B3A77374C
15A410AC5AC35FCB375E20BD3D283BE2AF9178D21B8637A7FE55DF98DCBE9015
D4A4D35B006CE68CE94CD5719BE51EA4DED86D7A4B06AE62A2771727EDE77212
AC0CB776C607F28E5C144B57922AD17C3A021348BF2F76BAD38FCCF63563F705
CAF1D16AB703EB9CECD64796C4C434A550724715496FCC39A9B02EF9622B1730
A147B49DD7F33D5B4AB6568B1C88BFFA914D4F014978CD1B82677EDFE86FE962
48B626BF18BD5558F69C9F18DB26F827A88DB7FE3C53ACF7DC2FF0E40D5A3A2E
5B7AF64A3304B9E86E1BAFC67D141D9E4CB3E69641D3795AB67934B16BD1AB63
701EDEAF27CB98A914D22E25B41FE35179D5E020790534D27E6AC8D988E06E1E
D02B277AB08FCEBEA6003301365B54CD6641B9CE61C958091ABDF028ABC06788
5B5CEC614F6403FC87B005448A17FF1AA5117AE241375DBC823CB43F22C0AB58
1D0FEFCECAA1615EE015B4701779D82394C3188E509654FF0F25A13DAD4357D3
0926BD5B66D4DFD6CE13BB0192ACAB4D0B431F654C28BA0269963A8AF1045FF6
F0603274A0AA341DB8599C90E4A2B8134A7BA517C7CA9A050795D2EE7BDDCCF7
ABB3E1EDCCCE2B069AF9A22293D3602D09585C1BAC443BFF483DE38506647BF6
FAE6217F33D93064D975906ED13421B6EE5B2ADA989BD741693A0231D55B37A2
37066A5FAB87E4FA193238B26A7DC6BB321D23CCE16C49D5B21A661FC5A011CE
9FCB1A8CD9C7C03E8AD35CF856DCBF09C0DB2502C4C4A91BC788FC12516BC85B
C89A23C2CAE6D972C8387BC8E9C7F62398D9888FC47F9FA03C6C4E4D8956AE77
5F614724D9CC2C2BC26930FA961EE73F53AFA2D4EB49510DB2CE5AEC31C91E21
1F0A7E41C25DACFA80B01387078AB900626C7488A61231C7BE4C83A074F3390D
64834B739E114B2C49D68717488571A8C69BC8434E22C3B2D924F78E66F54C7E
82EC954475A1A0A1A44D8AC1A8E36535B22269817148B15F9CD07341E3F74DDB
DD1B3698630541B76B15DACA1AC661A41E5B64405BB56A60D19EFED7D65A12C2
84C675CB5F90993D09ADC292397919D94ACA804D04C9E027BC9F127F79622FEB
3A6781181EAD3F021017B168F016B702D8EF62D1CAA336732EE5F578302026FC
997A74C1F3F69F041C7D00EE44CBE17DD19F81B2125B51CCACE301EECF257B1E
9BA488552799E40E102D9E5590DAD1875F837B69204CF6A65762EF9E8EE87F0E
897A26E0C904E7C7FCED238E4B22800295E4312270F23DC9452A6BEDF3691DAD
63AA156E816F22CA52B1827EFEFED942BCB81E7AE8BBDE16642953C02357D24C
52E45CD6D5D8FFEC08B52C9CD7AEE826D69C93D560989652BDD053FFE12044E4
5F565C7589CA7E36DAAD86C8BB0E806D79982F96FB982DBB5E766F8B7C98AE2E
9A82FE0D039999E755B7394FD448454C2061359C6345AB335A47E3505ABAAA3D
E8183ECA0F2784611B128DDFD3B8061FEAB76A85477E7E1354830444ACC1584C
D6C80A8D3A743D5E41F802977DBFE8CCD3F6A21C5A0CF54DA689745B877D7ACC
D45D637E6544A4F7393C18B2E5098B1E6B0D879A638AAE5C8710B8FECF198AA5
C28D09422292380844FE7D375C58D9CCEB88B324726265816EDB58938F78BE71
F5E463A60BE90C821B93033C851A4FC419CB7B994059EED086F5E10DC8D9E1C2
2BD20556ECA2801971235029E1B64DE91C306B813DEFE9D8027DB687567832CB
06403D4AC83113CD862EE194BD5E4DC2D5C51DCFE8289BC38A60B266753A0AF9
E8F0DDB7E68AF105D2AF9B22A4875ACB9DE099EF4FE3220B0A5A1A72EA11EA27
2C5C8B83FF8F16ED7860E2AA8F9678E565A75E27349DDAEA619E52650F8D44A7
B988FD00815BDDC8234B8620A78AD0F39EBAB628135CE729DCE459B0BB05BDEE
D909B9FAF217558977A13FD677FD000BE68300573290B53F60374DAE2BD72A17
9A04DC04BFB1D49BF5BEB60AA4F3B48BD6A3C0EA6FCB062F85188250B9E92573
00DE506CB3E2D1FBF36AD4440D616A0E9BE77A18E191355083C0C14CF99FBA0E
A62EE8D1C35B60B8C329272D509B3EC39AF55AECAB66C16D0B06A70462BDED6C
F1570587AF3CE5F2C4548CD746ECEC4B91C16CAC395BC953AA3EA5788239D1FD
4176B9C310D775443684F70A4178A03A3D1129C1204E95D0F19C0E9A42DF8969
418E22E82DFAE6D7CBDB0C2F268BB8BFFF2897D5156052618A3D44DD192024F7
346872E84795059D0A12F0E798D6DD09F60C7E4966B4FAEB0406B72F8FF605BD
06D1E44C92D103CCED885841ECE762E3C3BE03C7C33CB54AC4D7BDB4CA8582DA
F2809A41072FD817E7072D80C5483715FA8A94806AAABDA31A9C1A23E7A19F9A
CDC86712146ABA85A4C0A125CFC22F5BF18F89D806B3E19297ECCBE402EC4529
992114915DDF1A4196DD98143CD3E8FEBFC90A2C5D08D74C1A5D49C19460C4A1
3C341899D206DBCFED91D34325F451BF673D65F73E2888C7E9BF038F030677BF
AF6D425FD2DDF8B80BE236D848BF0FCAB713EDBFE54E4BA5BA08543D85A0EFC7
9C8D54376A9E10D0CFB29B94989BD6A46AA7CE0F025B95AC8E684745C9A8E85F
4803F09E0948303C52EC7C0620F910BD922E40FF678F65E5190CCF781E751085
E6E9B8EC647C6820CFC12980C2E8957B1D3F3B7588222674C1BA557F639F2EE9
C0FA967E7A4FDC79215D3C7159A63851DF09529A0E94BAC60B98EA220A24FAAE
8272CDF2D445E5324D84A0FAA14CA0CC867853C9E88C09E053ADB3C709FB00F8
EDD7E412286C7ED848AA4CB31E13C6069C64B22F44641D85CD0F49911A0A3468
13FDDD1DE9E1A13608EFD1AB9E69F346F8F023272CD1DF9F8358F8A4D59C2405
5ECFAD943AAC9D8A989C16915E134AEAD839D697FBB69BDE9439DA52C1621BBE
BA733E8FBDA018B69F857EEE84CCC0A0C2800EEB3145FB5580124E31E8BF7125
FB02920466A94328274D7B30DD69E1B2C3CA70F2F79FA29543F526BCB298EB54
2DF43D57F70718498F723F611455CFC5677807EA51E7E4BC3F74801C8AAB4702
DAFB58C126B662DCAEE79AD9AA60B3306731765B322539F0A75CB2C9249F5EFC
C605BA5E341613DF5E22169A2DDC01F3082ED8855F3D5E9ACF4D7EE9D023873F
51B97A4B034A42F24E6DC0718B82F25A57DA5B17DFF8FC790B79D75093BEB523
1C5E7A4C3A7CEA3250571FCFF0B8CD03EF9121CCE324DBD53229C7188AF98414
ADA57B34316D07DC570EDF6AB622BEB7B3E7C1BC47AE55F1F237F036AC8E2220
89AAEED6F429BC1DFC2635B2542128BBCE020F2C1C3AB1711FD0362D444FAB59
2461766BA5515E3825D2DA5FF434C19C140D5E17669CC262418B89452857FBFD
395479533AE91DB8B8139F7D3911F48E1B6F2A1BC8DBB198D26E98D7D3B22EE1
4D2B3672A74C46F2A450FD9A9979E5BF974134B02B9509C33DAF58DDD71435DB
92E9EE5714245B92F1B2C700A5D6C5B7D1CEBCF30EE34E39143E5676CA9B1088
128AE8832D60E91796C9166F0739313679FCE7EEE11EA6257160655CBEA2F0C5
6603EBEA7662E1356CEFCC30D11197C58881A2CF8311D07D8983EDC4AA047993
BACC39248D4348467EDE3A8D5F87C12541AB4CCC3ACE5E04B6DD28F30D56D1DE
CC05B2E5FBD787A8A5A73DFCDBA23E59108B0E8A6E914E922AA4E63003143532
EEBCA3D20AE5B285FAFE7C642BC43487E59837487288B55FC731457C149A25CE
9F8E3F4F73415A620F8F1D9563FF48FD3F4115AB6ACFF86C5B057FBA8A473CF7
B639728B27B772190C1ED6C4E152F6AA936B59112A2A095370B059F10C492999
2114915DDF1AEB1154E4C21FCB1072F0E54F3BC4B80968AD1178A8DDBF017556
2C2E450B9BF29A2AF1F972F72734DB97A902EA73020B3333F4102BF2A063AE9E
48AFD6373526BC1F830856B75C84D8425D5505D5B89C48385498717FEAE0978A
5AF77CAF025C6AD0F4DFFEBC580A8247A32855A2BFF42B9DBFF1CF4487E0A932
F474ED91EFDF386E7DB94B3D5B3B7DBDA4351CB31A8006452979E48AAD6DA7B1
73E1A2A1DD611045BD9EBEC8F177A8022199D0A7D13EC1C907F574B848225E11
0640A81C8F0E6BD38709914799AF3727DBA7382AA1890F1D3C4ECF45D2F23F8B
F1B4B48CCE11608E016BA556D694E652827F4A5CB2A662E847B43F77AE0E7850
79080243CDBCF22284D25B669F5D791A79B0E14D5746D5A01E478B28EDB24633
F4C244B9A7597255F9B1AC169EF250FC2A6B8179789AC98C8D55DD38129804FA
65C64E29684F0ECF6E9BC1A5601B113FBF178D2F0FC6B4653A52A9C672469C8D
34C97EFA8049D8A222545BFECB6E0F01085AA2E37B388A7BFB53F09CBDC0449D
CC827285BECE34E851AB829B7C6283E6C9D360D86CE2E6C3F5A3495B88A3EBE6
22308DCF47DB112E460D37D6F14777B3C85A94BF5FEC5417CE43C28028E83D39
4A4B69B9262BEA8D983F72A8D5856E38EB16AF75E2DE297DA1AED8A3FCC9992B
89B5CCA774C01EF74A8EFB2D41C96024F14035EF3FC98B0D607AA36B0F28E3F6
5F21160B7CFC6DF07330779615B05650C89F3FD3A30F4F015CDE9893D5D66C80
4F030B04DF33446A9D33DFDC62868861B6EA02DA05D223700B79EAE7D65FB8D3
95DBC847CFC3AC4C36967A941825BEAB6E3F56DC91EDBB7F76DF9C9448A778F4
D62307B2F042B4FD7B010DD43EF4D36C3C6BFC310B412ABDC95F0615C164200B
1CCC1C886ACB3D1022F78382B432D20D49AF9753045F611C1E1AB2937945F1E6
01963C701796D620D8664940F238053B7A989A595363C8AD5DAAE979AAA1DE34
96DAAECD5E0E082F8273DED975BD5360968C31DDA58C794101BFE2E310AE0BA5
37368EE2BC5898D2DA58354F9D9243411DF32443E7A8C08C653BE4D3EEB981E5
61FDE88C1D3263FAFC82D1B9423D48BACAE809E3CA5CF0DF52B2147C5EAD7F5E
C78742FEFCE44B06BD82AFC5149B7FEBD7D29795F4B73F061DB5621B1581D10D
7AD55C85D6187BF97725558E0CF27336E00D98D1325E0A792A290AD42AE11F31
23C443CFA290D0F4FFEC436D055174FC0E0CF46A06EA6985B5C97747C96D31CE
EE2050CEF3A7FA68EF0D44EE408113097292D891D1D7FC1AC6AA1890EFDD077D
21805E89D8B0FCF45B231A47C10DE60A539D53983C4875D056EC205D4E91CF3A
87C3DE5937D454593751EDD711F21B6DCFE6A28FBCB99C881ABBF836F8EC13A5
A32A91CDD341E13F81EECCACE0F806B460C7D46678066867EDC1A484DFDD2D9F
4DFB9B2A76B4AA7FF34FAE063C43B37B87CC819018CF5BCD16B7AF99532C22EE
26FF50A7BE430CF34E2CBFE553406CB3A80A4AC3F891A07C02666FEFB62D41E8
88746882CED2225C082DAF53EBCEC9B89DFD090E5C4599C508AA9A546A212DB6
0D5242FFEB17A90E1FBEF6E3778DE10A910F346C4ED33D753B283B625724CD4A
BD2941B3FCD5A155C783D9CCBACC1121875FE5D7BC788EABD2A7459B0FE262ED
A172A99BDEFBA8B02AE905C518E634F6763DEEF59FADE7248B211BAA66CE0122
0662CB6FC9D8585FE53E837723E7EC88DC8976EED6C4EA57D0ED7352BFF98AC1
61CF5C41C774F76829EA23B0C523895515658E6670B25E2595C852723D15BF4E
8788A7AA27D398BE9EC3ADE5245DD627628FF7E64EA5AB0E1FE82E76C8512482
444485E8AD4CE8585B007288431FA1E99468E5BF42ED89315CDAF8B686861E40
7A85B0C1A6D5250933CAFBC2CBC707BB968B61EEE7C1D1D245F8A3D527418B5A
668DF06463201B00F833E16E44FC54ED013B359983AEF8638A74767A14E550AF
8D1AFFCC217666BE3EF3D7E234D9B8B80F72E1452E565D7BC4FABA36BCF6A1EF
D853F06A11B08690293D8DF4024EAD5CBF3F5EB4F2B352F6A9FC7FBC2A089072
D7CF83F981822020847F53C4901AE23B204618665822F0557CD847704791EB10
68D0C523DBB843CAF7B942CB717C3C883DE02F1CEFD0BD71260782BEF6721D2F
71D27658A448FC502A8DBF8D959B786221774A27ED12F029D2CAFAA9F401092E
1814D53EB57B30F6D48982CFF36C92C6D2AC9F10D14EC183298277594958908F
55BA63E879F2ACEE148D55098B00AD714B169DA93627B0680029512AC3C8B9B4
8DD47238B4C18A9A7997E2E16D093A176BD7200979D99132FDD9A2C5D5A5C908
63C06AF297D926F9C979230DF7CDA80DA5853EE294F2BBD708CA46875BB61F8E
7641F58AC11080C471FE2405773EFF2D63105F5C631D4636B2687B4070CE2510
3B64CFCE57A1FC865E450EE1CBEFEEACE5F264186DB3BA957E4497EDE2659B3C
1F595DAF088951C2DCEF71212E011691F99CB068EC99B0F5292E5450773EE176
953FC1EE3ACE68F8192664DADA740DC6D6B04101F8F792B8699F36E8F8CC74DA
D0DFEF443BB951AFEFBF0BBF1DF436A51AC741A71E3D43AF65A1CF553B0DE2B9
9AA39C2B2F0536185343B0D5E5278DC1215183569C79D37B04350B2FEA765B68
E59E35610CFC48817354DE01B2B5757F7703A342FA26D47BAB14A9892706D86C
0FCD0F5D25384A4200788324DBE238579DBAFEE820E843608DEF3A0A6486475D
C648BD67BEBCE6E128BF221D2BE80ABDEDB9EE108528C83C630A234FF5D32187
3AD09AA756EA41AC3AA9099A830E000406D1C9E5F430B1214200B75B56BCA5D8
99F157DE02D11CB4A6025A8F4AC4C7C6ADF1A8ABF2C8E1C883EDCE8BA8A0360B
28CF7D49B277378B0FB26F46CC8D6A5018E9E4413584CD0A71C65FE34897555E
41856D173CED91E77A8626A29B22DBA3617184CABBB06F48159CF4EF8690A2B5
0E739854F19E8595DB52190746E586B04C7A9A0A568A58B1750ADFDCE7FDFB24
40C327D89D0C48548D4DD19C9F39E9F19FF32321A88778FC3A34B49B8D0A684A
D99C6B52980A9C1041430DF0934705542C8415429DAB99F479AD08976FC566BB
F750F1874ECE20DC61DF47D13AD728F321F0A2A5D409D6A96E6D27DD8B231EE1
5E51D4FC8207183522D3C760C17636AF2070F1A117D23139068EAEDB9A03C9A5
C51B3EA008A1B5A72395832D953AE7D54E2B9EDDF787582709775477B23AB62F
13004BC7009F6F9F9C0A2D284D287BF3AC834D9B77849C378DB01F63F4F4300A
00F6487CB687830972BFB0D20CE2A288EB98831C2173B37A650D97565FE4D1E2
162929789973CAEA1C1F97917B78A022AD3BA3A64C050465D562EF9E8EE87F0E
8978B183699CC06CC8F3C38638084F8F4F7DA8B4AEEED922B7DA27F1D3D5236E
A97982C0D9C902C3D5B2112E0897B4E6E207B003F88D68139F4B5205598DBDAA
FDFF5A729D0B2C318363FF20B5A0762A4A9A546A212DB60D5243A875F4B743CF
C5807C551651FF922639E5077C139E39DD77399E2573FFD3CAF3BD21C445F6B6
F94A5018BB42F701EF901997FA7F292F76A8F584E39836743766E380A77C34B7
3D8592C922B8284C6C64525B4CB3EBAD79CA52EC71B1BD379B921472ECF6A74E
4F91ACD9CA3A9E3144D1220A1C15988847BCB5B01B04F5C3A01B3BD243968E05
7BCE9413D853847B32CD7D5C5097943F10715FADAAB582DA620B2E22056DCEDF
1081E83957FE43600500EDBDCBAA3972BCABAB06157DBFB18A3A746FA3102EAB
59094C5B6FF7D2C81EF13236C901D1EA649BC0462FC13A7DB628F933B48F9147
0AFBD608353EB83BA0AB8F65ADCF6C3282F1F224E7241B1D62E8CB19072CA767
05E8170743C7C4246A6BFAFA2F12135BFF313497CE64AF947743EC2041DC2A34
CA9CFBDBA9CF1519633A44E889CB71E7B3191E4167D426490071462F241A3210
A02DF25AEA9FD404C7FE3B9A612A57210095FA7CC84755961110B6901FED4A2A
8D9F8B0FED735A07D7FB93D4FACFA45E68A2453EE195441C0322F5A76B95FE31
EF0F8DEB63E295E8826BF920C8FEAE3B24C32915B6727F4289C6C81A102A7E38
178ED36221E23B63AA974558BC11D4DFE8EFBAE6B340CE931A1CEE3F8EF58E6B
BB5715EF1C68319EEA32AAD04F77334448C3EBE3071A9D8F9DB665C1AECA4F3A
C8A48D8FDF697DF773EC435F824A95D06FF2D63B47A73D1EE34E8CD617263431
783783E282C5DD61D2B7AE19F7F5898A56673C153CCC2E1853473BBF6901BFE7
C4F91333D6CD3899778644A33617B7649225908598A5679207C76C9999039695
68B43673A80D0C5721927975B3C8FC5D5856C4CD23C29A70F8E71CE392DB0B78
BB44C1BA3CCEF6F031FCFFA0038FF602E7D0B63834C6315D307D4DB74734FAD1
50438E3F6D27FA54985962EE0A783A157A336D4318B6739041B3BB6CE9E70519
534343E3827D3F6CDE4ADA28877B6B867613D53FD6CF230F4B05040C3826C67A
FA21F48213B6342E4E069367C51173364B6F10A0FD1A940334683679B065EDD1
594A96B28C7AB13FCBAD7FE75879BE4EF03B9AEBBEB3B51AA797687145CB71F8
602BA288D241AFAD9B21B8A7567DA118DB4E6B821305BE539F7AEAFF7D7F64A4
54ABED6233E9787D1CB450219DEF4189B84A339700CD6E74F3BF89884DF1DBD6
6978201D4AD7D2CAF1775097357A4275DC394324393E7F24CA3CBC729416976B
F6A20BBED57C6C0FD85C86DFA5C0054BFFF87BC43B7676E7928DFFDB5EC6106C
4A1045D47875C2F4C648D291642429DD61FAF86CC41BE0B94F8068BA4B23707B
E8C925BE37F7B4C8E511C95D4B679809E1D06A7681885E81CB33E66AACB290C2
630834AFFB148E86C15426E4FA49EB9622E45801FF0A29945D6BF133F73DE47B
83FC331B68FABD15A9BF934684DBF165FC2621D7082423D46EB801F850244968
4418493C3E04D1AE7397A07F5CB058FDFBACABB8859781A88518AD89B769839C
2708CB5A55F4ED91FBA9AC00C0C25D34BBF54376F107191BD84EACA3B6BB0E0B
6F65BE4FFEC8131CA6F5B8CCCB4C1E7696D16531A5EED36C30AA15C66D513BF4
D494848C43DC9560E46BE38BFCEB0FDA3EE2B1EB559920CE60D218A8996ECDDC
6138478B29F1588ECD65FB8CA923049847881947ECEBAE94FA366C4D482154A0
B9063A422A32BEBC5C892A004D8F8B153A83C55A08A4EFF8BC12DAE148188639
38351BC14B943C8C0DDA05D9C69B69AF30E4FE9E4752E96938763DA88DC72FE6
A7DD768B984FEEFE58A20E4A8F65D8B9959A9855B99748A4BFCBA72B34061532
308C71EEA43D61A73E72A9B12E19EB6F94A50C01C37390C1FDB565C59FF9B6EF
2604A9F3E06BB06A52BB2C6B82254A5665D3E6DCBA5BBF1E7BDF5BEC3C307168
0A956141701509AF177B438E045B0E14CCC4DD5C4B04D1CD8ED93BBDC0E6D725
2D9D030405FC314ABA0EA223A4981FE01EA77F8B138FFE344CA66191EE0EEEE1
BD989979E2A9849609FF9CFADD3A8ADD05090D2AD1B66718D0A9C3855CECEB5F
2A7F141AC0FE782D89BEE91D87C4CE4C4E56531302A3F402C6BD5AE604B15ACE
59F9353AD251D02310425D8A10F2F289DB48F655135427F6E6DEEBAC86AAFF1E
34E51228F9ACF3A2A8BAC827C6108724409620A901AD98606C248E4453D8EBAD
C19FEC33DD69AA570BC555C27BFC8CE84999F45D43A687F901B1D001AD2CAF1E
8228092609828A232A2187CA1F9C67869C3E108C10EE7CCCF06B3FE91D12AE88
814DDFAA3503BFA7EAAACA041B9C52065ED9868BD921AE2E19E59DD6207ACD0B
07E2FE5DF0B7AB1BC8DCE67756FF01459446443ACBC5EBEF3776B52EF0E87F9D
19FF49E6F7C07FFAD54FB24799AC3B5951B557D62C7728D6E3F13BE05939C2A6
FFAF84013313A6E11C75D16022627B875E2A5A006C333EAAD988349947B44851
3C7E832EB9F35B28EF86C23135C598EAC3F1391D72DB08B0C95A9C0ABF069218
28C1D7E17C92E62A0EBAE828FADD77BFC2ECDC1E562DAF5666E1F1E9A1CAB183
E05EF9F3644BF2530CB119078ABB9EC10522639EE315626BC14D272D97333B74
3C7AF418C40F46C3FE03C7D9738E03D9B5DE922234C3AB8B2DCC9F0995579910
E090FCC1137C613A2DF8A7F2105E7B41599230290A1D971484B9C6E49D1CF859
5DC99E34C2BF825F9C769CD611F343C793DEDEFB0A2B19553E86715952582F33
E47951985B4BC69AC1A2911EEBE1EF1B04B5D290D29BA8F3D836AB5FCE50FD2E
B0DB8EC40A62E02F00F8DB1B396955362D0DA7F94B9C938FB6EB92229B9C1297
5771D87567CC21922E096F64E78BEC26B100A8DBB331A5051BBEAD591145ED6A
68052CCC8451F0E095549A7794A52F9BF6707DFE9D405791E7A170192F8E4BB3
BD5D96472663F835D73285D0DC996BC52B17D1A78A0D29FEDDCAE97380EF52A2
2737FA640571628DC0C8944004642195C536FB784A53F14635FE80C7EE1831B0
65F6FF919FBAD4732191492E06ADCD3C3D47D40C083EEB8ABD69B35733767D41
89E45DAB0A4848457AEE370CC4BC1A617C59E898C3EDF0B5E03BAFC0CD206172
1F575A74487D6A26C1802217D390F16233CB57DE1F412B7C0512E297FFC20B0D
9E05E0B38383D53920513DC253BC5A9A13112DF3E759611628670F20F24AA836
0444AE544B58FF8CFC45C92141A06032D13BE99BE23D6CA7CE342370D98FAFDC
ADB8BA587878E95949C0A6312BA4DB46F008EE2A8F5D70E10A3AB5274554345E
78D427C951601ABC741C9F3AA22CFDDC294031196D8005F56606BF7EF9CF8C6C
A32BB86FE217C8BFF20B0D39B3EE8CA5E8950DF424AD2F431CE2FB9A54D982C1
818BBA77EC41DBACE282A1F3E2F595C830C089AD6A7309B1C1DF4DD6C521D381
F872BB56C524FEC5C370F33D10C6630F09C71885125798AA022B0353D0409B09
C0CAB53AADC84DA9CE87D81DA658229D395C97AA2D93FA0EEA493D758BBFAAE7
135743BF5288D527C1A3B64B58DB6649BB820DE838A53381C99702D4BC3BDBD4
5E33ABDFB0487F11223692C6B0F95B114B27C434A4A13D701ECBD3FDDCAA9228
8948BCEEDF46B4494D36D8444B23B8AA744540DFE792329326FF1FE2C9B6CC1E
896522C49507C2B4F3FA77CCF9FFD27FC516746C04564E4DA62AD88B83A554CD
5CC2B7EC2F8E8D94449BE1C2E89701BBEE240AEE9442DEAB94E100E8E957E9E8
AC1C2DD5D730020DB9FF29D9D4B75A5C9BDA291986319471BB2581D43DF507D8
67511496D5C202C23DB580023B7821659F976BFDCDFA5D2791B4DB3D7643314C
7C4E3371D8FAF9878BE06429D9A0B1D9C37AE80D3AE048F8A1DF22638EDEAF42
9CFBA8A52686511914A2CDAEF33F47C7DFC01A9BC4FE09BBACF1A73EC2F3A507
996F471C39E8914CA6DFD24DEA628B878837E1252566B61716B044E5EB76C364
A288E6C3BAD8F35D539B78A99B4775F150389DFBEAD2406C0DEBD348F18E29EE
31FC761B1A2FE6D3F7928FF2B6DABA4BFEE100A40415D72852205250E5EB3FF4
B92E9EA2D255622D311B87F4E8BAF4B62100B22CC64FAE5C4D67EBD927ECD3B5
E0856230F8A960D0E7A219CD9D3C68EBB3BDF48A4C4DDC6436B2A1D944163462
D9BE831ED2EA3549373AF7F4B7C926A20EFD2F7224BE7474D2361E8C09264275
A9A12B68D071055F3BD00B95E0166AE5B1E74730D5F59F50D0EDC193D84B07D1
BBD6C328AA8D7C0E01AB46B95C141D731F7D22F2B129A83D00D6CEB6C625F15F
B17246DD87B4D9E7E760823EBF454B1FD8836768366EE7C5DE1CD3D41C16E4DE
48B82533691E844E21A64F50AA7D53A48E098400A907378E52E01875760D9EB4
41218F3D71A5CF35E7888916AAAFD3DF4E18BF61B5A0E0FAAD36DD7DAFB1A6AC
5CE5785D531027A249EEAD558016B4C47AC40DF8C2639AD09FA381C94FD9D1CE
D3DE14FBA167AE28D5FDF264F0B577B683F84D4845E393C68EAFCBA9A4D4ED56
D45D6631C3C3E2DB3D92549A6A6996056680DE225EF96D40E6135C5AF20E1C09
08F9F72E59B99A852C02A2B14473B60C44FB1CC03A48D0C3694CF772EF763451
3827050A7A87624CDC0899E2FD8D97EE83A68FDD4D946CAE13F5291C24662086
B6B4EDE0FAA68C1E3E2C5FC86FD5FFA18D57390E38DE6128FDB80C23E79A5B5F
346BF4C4B8B877F63A5B78F0694A4C5C1F3AD00102BB1B6DCE101451A5903126
FD20AEF12EE3DE27DC6F4CF8033286F68CF95BBA370EBCEFD2F146D480050FB9
73FB2D3EEC8CBEA4BAD15DC04D44F9C4963AFE4AB2C6596ABA6FFBBBF86D7655
31A9C536BB8CAAC6DD86C4ECEFBBA5560FC332666E5F5A99C900E07A35207E7D
ECAB50D0C7081FA565B3EB08B22EFC578493ED1EFE1C8D67213AD4983B07D499
20A4F7A17B3D7314AEDEC9D5E5C616CDA4A02908A93A3DE21EF673A9FD8FB831
49D4421681FCE45E882DAD5E5B4648CF66FB902424F77E2ADC185C844E9FBE43
DB887C99EA56F0D3F8849914C81F5609EB734860BB355EDAC9632EB2FB9B1261
8361B51006443A17C66B98BADC501FCEED398CB41B2CFA474420F705C4678DB7
D48A8C305044626E740EAE45CFE7B03662E0E30ABFBDCF21D289485696452E7E
113F4E483363C8F4EAC56A42FC5E9B1D2F70A87D871C10008A0FE415E87B6ED4
85DB3EC95910A8EC833A47CC429FD2D2BFB9BBF210261DC808FEC42E21411500
7EA6C45EE6C8BB022EC63C568DFD10030C5BFD9F06521DC5FA027439F45FB87D
9913ADDC62535C3BF233A2C1AC17B04381C675FD22DBDFA3B3259678F817A6B9
5CFA379399A95FC14A6AE2EB3DD88426FB2246B81553AC5252FB3E141E337A00
557B966547051114167156962F9E93F8EB0957D88674A2939392D2090E8474CE
6C92F86C0483C04F9E4D92B68654528264FCB142FCABB31F466096AC62A47723
F403AC9133A847D6F72E2CF1859C4D4817E837DB0352A301455D8D89B2784160
F43263900947CA893A48181568A10B536F687DFA6D73831D0BBD97C6654D42E9
E1AFD8D657548F87D085F30918CACF80D424EF61CE0BFBA25DBB8ACB7808A07B
8836F404B0B9DB0D8DC4767B6EC22C70F56C63F5D167CD3AE18739C56695D0FF
F137511AEAF926907BAA6DF29835D8191D0D96464D3E177AD15B1FF738CB74C9
CED6D28E246FD0A1E627EB4EEE512D72C6EC57A394E702FFC694B5411A4111A6
68A93CB67AE545132A38407C77D0E383059FAF7E59EBEA93F5AE1545F78BB79B
75FA8EFEDAA23542C2FD75FA414B7443613866F89395068EE6EB8C2DCA18338C
46ADCFE8D8E149AD5B28578EF97BA34F0B0C47FE596D7BA3678F4F7029E19A8B
83B2B558AD4EE531D3EB52FEF17E3D5F4657865E2DC1E6F04912979B385000EC
77016CF9A5AFC9333FCA56BCBED63F4FF5656D24E0DA26697031D10479EF4820
DF4281A77B686739B5C0777572D80C9374303603D6B370E688A5DAA9E2B580AB
ACB2C43F075181726984D20C14B4D0C8AF690786C730D91093F42E0F4D221D17
A928C9631452ED1B0B009E2B03EAAFA30FCD2C7FC33C11DCC0D50061D3B5854B
E75B8EF7EF21D7F331C4B41F1FCD0AF8AA46CEE5F670979326DD7C61478DFF4D
ABB9D8D911F3FBDF7E65F615A52A36E19BA457A87C0E12856CFD221CB4CCC548
CEF995788BD4D0434471AACE432BF498443F09B391A31D10D1A0583F95CB3E54
ED14D422CABDD6E5C65915B145E096F0B6BA76121C9C32700C0D7D36755790F7
1FF13F6F532CA6473D443A13B6156E1F601C721C69EA0AF4322B4008084B143D
2BA7977C78126F25372CEBCEC7AE0D9AA23560EBB0AD74983805B4ABED96EF33
58F914EFD7AEFC6B8CA2717E606285EC06524AA4C3A460E9BBEB21397C3E6765
9F0C815BE727CA6A2EE708DBF8A618D5D593F51DF9FF3A0AFB1219C4603BAAC5
B11FD5BD6E1377AFE7AE451471BB9E5F0BFC002B31E15FB1B37367BE87ABE61E
1C9FB6BDB06CADF42AE3C0D7D6FB3BE8595738E3F5D3A08665216628809EAB40
C6337ACB40392252BE48C3686CF72E9813BEA9B8FC6C9D5EF590C4061C9347E0
9DABDF59D829DD199BB1EA83307AD90408486F48EFE46C6EF8454A0180113881
5C9388351F15C87E246FB536E430F8C042B95FC87369B5031DC47691C5DC598E
3566F61594200EDB9AC412754D14F22CD98D5DB7F3DB4C0F3ED900AD2A977730
99DC3241E362CE94917A77596E813D350521B6F4724258042D004064AA534A2A
F5125620326EA0911B6689C08DADA870A2B5DFAF4ED82E1BF05612A8AE44C549
D7951D0143FDA48E301D4A995212A19BDD74ED74DE89177FB52524A03751CB88
539D2C41B05FE82EF738A497284D317B5199D68ABC0A44022B7F328794F4F338
DA2F0A403D4D482CF929BF5750407E68911F6BABF3E4985079E64304CEC38934
74572471AB1D02E2C76C7B0720F101407126D3973FE281D8324E4D632FF3E1BA
145B110773D005F0E5CD3996769A0850EF36C266E8D43674EB4374475512E0D3
4B5F39704245728E2307A5865E162763DAC1B073442BE706115D034EE3E85084
A52F73F0B3FB1B2AFA6DBDE8085C1AF23D160D0338ED55F6CEBE18D9A9003DF1
EA186C2ADE50A1C3F58E5DFB94B8A774B8922494FA308AF0FC1475B8483B4F39
C0D061856C6FC029680C9D6E6D3C94064AD4934C9416383C90D4D16D01714391
D8911E631B6980077F341B7281FFEDA17EEF5191B9AC2F2B33658DF7D91F665E
0C2BF357E7D49E33D18F442F5B86FF7AD6B11E8CD8E52D1115E67CA0901AE619
73A31D89598C8E3C834935AE747EC2FE4B5126FDA5CAC4382E7D2547C9B478CB
003F3C16D26089B072B2214BD4156129A9FC0E3626B636D5DD60E3ECE2810FE6
4A0BF97FA732D9972B149249BF0EAE8BDB050614BAEBD43ED3F1E228425EEAE1
B3241F5D189C0FEB88E8646186F6D229A4AA8A50B8A9070128322AD0D2A2E9AC
DE341A69401B53E8DB89351B8D64B5A52568135B320345C7C73B6A0BFB83554E
E2674E5A13F9731FE2AB23D21F63B209A02EDCA8CE4CE93D8811CC4959B6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99C4FD0FDB0357BB5233F3D0F62
12F013072DBDCDB2F20DC6A480CD99FA259F81813F0B8FCD2ECD42BFCC594F6D
FA4B45B6E42E31EC7AFE87DF45C6330E9D124CFF528F1AF268D017367509157E
4D9109A418E937074345AC93636B71D9DDB8E53A0F9813258E0005DF7335876F
57D22AE2797EFE0990B7BB874D23B1C1C0F575F4A979FF04F1B3C17864FBC8B9
2B77D9380FD3F19057BCDC87EDF81DBBD12746885EC0B93C58C6F453ABAD7378
A8CA6091F5EA7C1EA649164E9811D67DCA99EA4C817D6576B0929D7D4B8B6AA5
28E197FD027E1B0B5AC9076C21D22C18A1C53D4AEA7E5289DE74BE36312504D8
F7F6AC051CE1ED882DB34E19C8A5F2F0A23FCF10C02ED8BD1AF09AC4E8A0BD65
CFC49343CB1551171CA4E1EDC85D3D4FECF94025157AE3BED36EB2C52BA18EF5
31DE09B52B7093D785F434322CC4CF7E8DA48AE10F19464273ECAC6A6CB033DC
11150474BE27060866F3E5A43170D9AB04D5315404CC3361B58F38ACBE8868CC
263D0793FD510BEFD0B98E307DD211433C8276293FAEBC789B1F6DF42411BF20
821420255B64B2889C780DC45D78DD13425781594E71520763D6FD209A23F24B
713F90024CC452D45B173B18CB7C8DA45DD0F6707DC77BE488A36A54D9D2F24D
3064BADECD2208915F105B9B3BFE688D3C21CD3A314F1FF6EE52C5F1163105C6
081F9765E539AFB2BC52F8979C7A5CA5D52FA1B48C90F140B934EB58526F2A04
D26899399FF91F4FB98EF6E228ADD22D09309FFE9772B67F797F9EB5B41391DA
87E6AD902DC409718D7EA6F88FC4A0DC6D2A471A78F98EBDC2A9861BC737840C
73294FD6273F61247E9B350B5BAFEED95B1B005E66A31AAAAFCAE6A03034E228
1BEC8D06F7BCA7D4BE7C8431A12536B4640FE61DF82B5E597B9C25D9E5B53746
456C07D394BB1406BD933320F59478241B55A26A6B70113D5EE7B15C46E39393
3D2C0C9B6E55C164792ABD9120750E6F5E40B38FAECD02D709420B491E8FB223
0F54DCD8AA3CCE6DC74199B5AC793F7177BD0C2EC4DC49D8173012B6F47A07FF
0864F9D3437A03AEB4218E0CFF7102F51C8402B2991BCFCA5D536CBC6D1C4413
9CB79AAECFF6D1904BD1EAE4DE0A8330DE53C1993F76055E4BC1666B5B147E7C
0D6AACE8205382D817999870F0AD19B5EB6F9B88D8C3DE42E08F2150A580FF8A
F02BF60AF499119C564421C449433283BFD52DDEC2D7D83182F79BB04EDF4539
D429AEA526FFB04135A7661B78EAB6FB39B7B73F882A551087BC152E862D5F2D
BDADDA3EE24DB3C82C11A247582DF0AF14A5ED9420CC06361F075BCC3CC62F15
3DFA7696F915D31ACE5D70E4A43CB3A0FA506762286E5F5AA0B73BE21C91DC89
1ABB0F75E16A10D82B3A36DA8CB5E590F9BBDE89001BB2008E75C63E334FCCA8
483943FEFD671409BBB2769C8ABD0E1D2DB6FFEC04A31DFF256C6198A819D55C
36D2C5556D4AE898EF28E6A10B9C4CE4DDCBD9035FA26259BCFF03976A2B8CCF
58D8BBDA154BFC9348A604AD1CD1644512270E43D9E81FC2CE7BA777B592888D
38EDE68FFB3EFE838709D36D13AAE036CEFAB476721A2E3A65C2C5B0C7A8CDA2
140A261708AAF92541E013073FCB815A2B83CF7E2C5CEF48D3AF4EAD2703F57C
C0F852D6354F0EA9B44087B238B3B8DE8DD27EA9D12727FA1535196170E9653B
E31016D9DE505B356951C13DA10A3EF094840AFE537D13509ADEAD07135CBB70
B81D3DD53483BE7CFAA66508B79949EBCAE749176999DB46FD10CC9126E08DA9
9B91A25013B49BD9220AE366C07D824749D453FCE317F53A04FDDA01F290968A
3807DF83B40761D4CFD11CB1A45974AAE041E85E4574BF359F918F2B9D3FDF5C
F9C116B9C30D7308A12DDDA2501C6655411A4DF2DF658F42D355F702A4E5F6D4
A30E73C8888AD44C29C75FC575E5270DF8FFB56D60F1DD6EAAA05069536268C9
2FB0729C26A6642583D95B7DBF3D2758D029FE6D1EC1336A154B5490D8D536D9
00C096A492130ECBCFF7F3E58DE3BCCE78BE9452E375D1DE07002E86961D2048
A927713588BB8FC5EBB84A10F86C01D9C9641201B73FB8B48E107D6A48A8E496
8B08F636669356E19FEFC7684530D78306BB0A102F279E019FC7C839A94A2063
6BBA90A3FBAB71B0420101706AA636A9B0CDA1509D95CA8A85A9EAA164A4716C
5345F990FD7E9885CC6B050715AF08BC9FBE6FE358C1B3E7FE6651E557683614
521110DEC1CCAC426117DDA7D6CA034000DE38DA7BD7171FDE19B2407F893D52
3EB783E565425AD9518EAA9CCF31324B1361E9A081348CE276DDE357256BF0A7
BCABAC49BC4ED2413E58486776B00D767789A3AE7D1F4FD7BB0D32C04C88A200
276A7F6E1F6C2E9520D5FC825643BF53409B5D9564B980FA031850C5A0775CE1
A0809D5C2979D409E4D68BB6DFCA0135DC7E63DDF3174A09E363E92A1EAC874E
4BF7544FC321A645BD6DB6A7A50B07D3BA3E41BC17DBD54CEF2C90C47F8BECBC
54F126834654AD20853F11A6AB840852C69B0965A27D4EA53FCBE67F188553AA
98F8F2F93797E81ED7ECAB66E8AF5859BDB0E2851C158D45F5E84699D1873453
8BF9D7A269F9B3891E13DA0344397713B6E0A5C61577AE47CF016E3B3AD1A5C0
90108D4964C7FD5E57B2B65AD72B3BD2EDD03D137866473DDD942178D252686D
619DFC2EB8EC45E5F326A3FE4769199872A70259B3722E5EDC963F17FF9859E3
1BCB65F4BE158906E13EAFE74B3F864B98B8FB2B09B7F651A82E32ADCB635068
816C56949FD21F5E993611D8A4E6025A3F4D6144C2F5795B0CFE3CB8523AF0F1
21AB027F01EB561A6F257C8BC677E50E6853DB8998F9CBE0472F641CF6660A76
C929E5680AC7AB5CFD9F86253ADB37FA874126F2328BB5C8627DB199B388354F
CA7569EDCC74F81852304F097C7FE33949BA7B89AAB1E0E69C93A7B937085053
C42ECF7716A5C71FE74ED1642B917B64E296D4E219A3597953634A1C0DB59421
8DD37E3D54588330C217EBC6291C073A243E1AE8410871B497C879124AEEC414
C46BA9935AB711DE647B73A6A8A7E897FAB685D3C714623561274BD4CA6F9C51
8C66DAFB5381E7CFEDE9A87E16FCA64D1170CC2B452B837DC5B53EF949C342AF
0EDE656CDF7E59EAD6779B3484CE668673025C3205DB72BB08EC68B2FD291F98
C0B5DDF3DD266EB9D7B737B63982514CE4041249E3088A321630BC1C7CF40E87
1C90A6175956C54E9E368CA67F79A9DD91E973D5C1F09F19F8DDC59FE67B0EB8
45E2E23E1680B003707D1025C3AC407FB24F4ABE14345D6A3A253C967BD35574
D4FFDFE5332262C12D8255314897422139DD5CB0CCF89BB8427F252D90ABB66D
7154EA5AF4A165DF6415A64C5C1774101F055F3D4BA0AE55E1E4A6C20556D782
44B687F06E8E01DE68CBC124049EA103CD8FD9A3278D7B251672F15CDE086413
5B202D3FA42B097EBDAC6A0A0BBC2C2B2734B2155435171FF7A740F32AC4B70D
1441A6FCD1E20CAC603A9D56DCF392E40E60A256CF2EC7D262E8150633F3F937
E9606FEA2BE633517EE593A104F3E07F80277BE4E8ACDF170B7E47CC81B3445B
02E27AC2A2FE3A14C5CA57DB545BA3E10B4F3DD45F473311F039C6218F4D2882
FA95447F857D20145FF2515C0D4B2AF2D9C3047E5DDC31CB8BEE4BDFD313B8FB
1B33A25F4BCC90B6ADFB4DC714D6D083209C341E388ABF0767E7BE27FA203AB4
536C63E84658A8AF38CA6BC0754BAD59DF4558D2D608FAF16668DAEAC6B220A4
53989EB7CE1FEC9D31E66BB00C09B952A829C1BEA4482BC6A803CD7CBE7297ED
B0D63A166BDA4DC1EBB6FC551EBBE8B2E16CCC5EFD174057C781DFD270EE4692
190383F85FB9B692A0A29241EE13B4F6714D41A2D7E8043C9329B221ACB437B4
65EB4CFC51C2F6AF138BFD084892B3D6E82E049F4EDC7D7F5B4F3B5F633645BC
B35254C87241FB72715838A2708FDEC733B81B8961F038625D3C563E6EEB73BA
022089A4C47ECF01BC054639350274FD528B2FC34AB914C268C8874E34F01A8F
3E17FA89FD35432DD84B8E4AEC46F191802A97B0542A5CFD6E028B1C8B788F49
1C937843051E6626CB05F32CBBB7EACAA8D59D6E77D53634C137AE6A6E83FC0D
04CA55D1426FDC8B94AA8EF1F5AB6E3DE702D15E3CC75C455193E84C73EC69D0
367FA04BE436D9AE303D028897CFE1D4D0B260068F252FBF712D4F6AA9CA5171
4523FC48BFBA1AFE320459A8C4DA9C56A0E7FDF5AB5DE3BB012A4BB513185971
6866C7406275A3206C0B981EB6DC945854759861BF000D62218A713A914262E1
E871889B5EDFA8FF2CD18DC6ED1F473C705AB25634F19770334684CD7008493C
37E72DAA04EFE50FAEAA8C7B9291E8CC8AAC6E4AEBF7AD16F1245F1B7F06E002
719799AC31A8BB4E577289A0097587802F6C66C3BC6E9DF45A22A24877E4A449
96939DA861F7D99BFB580F4481CB301E73E09AD127A638E9DD4AFF0050489854
F671ED73E4CB70CAFF612572803E0E2DEADF90624BB22393DD4A317B9C42CEA0
BF1FE209B2FAEBE1A7FFB35016C8BECD3B9F74A6B21D04D33D8D6867E328F1F8
4E51EC24F5B9CB036BEE99855EBFA4EF4B7B119AFB502938843DAE8C3DB66840
96A4CBFE226E7AE728A1B19B8832FE9BA1C09209777C0495116BCB7D33A77E65
58BCBF36EFCFAE3FC2B4FEECC7F8F63FBAE0648833A8A814E5376F5C6BF23316
24DB3C513250CE68293B2DB724600C77DCB570C1028F44347CDA0C2E3AABB4D0
AE6285563D836BAB476B753586C697B414EFD4874CFF62A84963541BA7FE7A8A
AECFD1F72BFF12AB00F60F9980CB3BC380F8A494A0182BBED304B28C825FBBAA
F61C73D2254EFA2B771948C8026F8DC0E546617BDA4097FCB8FCB635C4E810BD
A65215C9F425C048AEC1C929FDAB375F3B47EC32042C74D05E250335E05CDD95
E3BEFC41E38347AED4C52CD9A1855C2DFB7F28CA33067D35107E25C31677E089
6EAF72053994C82A96520B0032BDF3F8CD4B2BEACB2743688F697AEAC8555DB9
7023A54133FE2D286CB4EB6CA0D55AA30BE15CA7BE2CFA913E771DC95135CC9C
F536790167A51F0F96884C31535448C20ADB4E95361E998200010B28D99C6A47
789553288F0D22CF5D176773002363255E71702FA6AD8E7F3C78D26C89F1DB2E
AFA79EBAB6113E0F829226B9DC09081469223AA0219763C2B44F426004299999
933BFDF5A9F44ECC5B23462B2312B87322DC2D78E1D35507E642327B74B616A8
F047600E90E6AC7243F612F3212E6C4E3BB9EB3B83B6CC6F8AAF0C6F28320575
0E9361E023AD60CF2CDAEEEFEBD12888FF26D3263B0D9C60501C47B6D7C1400C
3EE6688FD5D7849B502507E5D803991377B26AC761B1A938DB70C841821BEFA3
8DFD24699C1C5E7D20194903FD4EFA0D4DF0EBBC7856F6661EFE04852B9606E8
E074B6742A1847C136340CD545E40EF249CFB1A8C60E56234CFD61340010CE1C
184163D33FBA8EB5E7A6939C43ECF80EC567B562F79E35A48284FECEDB3BD7F8
0C944959B74FFA0CA674B3A52B5E428EBD80A8C979E696CCC57988D3B725E166
59ECC4344E7566C18228BF9EAF57081F57DBF9D74E7C301764186393ADEB3F16
8DC564A9F80B8C7549D22F30A448F1A2A7A87401B46F002A6EEECA27573AB03C
B34BBA039100AC626DFD4A244D9C62352A2CF2DB8831D815BFC5CCB48C387606
A335F5D403518871BFDEFAD857968CB89756E1BF37366C21A72F253FE4E3D1E5
6ECD6A75037D452F8ACE35824B33465F31CE2EC459C89A760974E45E10402EA6
B6C929A92C24E801348499E3FB8440F5E2F7F0752D2E9E84FA4DD17E0EB69D76
392B84CF41109364B757E8F43E9AB9006DBE11FA1BE1EF8BD9F3DBA0A518DFE2
3B36D9B12A032418B9321A056670EEA02CD17E7EC38BB5ABDAB00E5722E22BCF
382BF892C767894F9658881B07218CA48BC688FB299CEB1030A8A9959F337765
5B969042288C855438125BE7B940E0AE7631B5E38421EFDBF7E27A57CE61292A
AD6582B3A661F4D48AFD53FDDCF35E935A614069343E1A056DD350A3CEDE4428
C9BE85DAD457C8351CA765BA358247310D2D65F7AA103F557B3EBEF1809376BD
5027E2C7593EF5658A9CA19C5B7114FE18094DEF50873AC01A67C834C5B2CE27
AEFECCCFE5003D5F23F7CC75812D2FCB2475F074A0D44FB7F0AE17D695064BCE
D8FC5E0BD1993772BCABD0A455B827E3E67900498C2F9834799128DF2B034852
C673ECC3817A64630A7BA34D7C656227886DB240ED7408441F09918D56A9BC01
20CD61B56115A4207DEF9096D27D3D6EF60CF297872CFCE56CCE1582A3A05CBC
51647CFF73C6EA81CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C358535040A6
F5EAF3867D0BA21009BDCFE0D7F5BCFA2F280178F0F349157850C07ABAB38446
C399ABA963AC9718D50EA9DB9B12A5D759909821BB1FAA64201B5D909231D48D
6BEBFF9F373158A4BCCFB82623C273B594B2F88AC8B353BE17D4F25AB9ECBD3C
CB4EA3A262534603D41867B508876048521F937A458A63396A578F0213154793
673FD1899A47E6E69EDB17BC08CA1B092D4F20BE1AA32AD0CFE4616B871C7AFA
CD58F93FCD83DCF3EF58FE4F531331B4470B5A034CBA00791EE592FB4DAB538C
2809D06F3BD998F3C5BDA4BB16589BF177A238168FD32798BFEE995458FC6EAE
7BCBA2D6716860F864B3771C82D42C6E08974CB5187A516614FFA086067DB7B8
D79EB493852F97AB41FD9B42A8D53BC39777DFF908AA7DE5C22C7682C63C0531
52F52F8E1AE5C8B8A9DDBC639EAD460DF4740CFD75F6A53A56F6EC56EAA9534B
DD1D5442DC61E235A20DFA7253E0A7A64042CF94A74E4B3C20B4C9E38F719ABC
33DC990CBFCE3FE274EFE7CB19A7ECE52E4B3584DDBD03B345F3ABD2897BC9C6
E095B751258300B9BB455AA872810C7948B1EC866883E78C92A71E75AD0820BB
68EDCC2143F284391BBA9910455F2F5704A4C1CD1D33D5E8BF44603E0792D6E6
31D300A32DA70539035081D3C4E787A2615DDC9B82074D8BD9BAA617D06D2F58
7530D12214A3CA55B5C2F66574675290E782BFCFBF45A265EF7728BF1E9A648C
FF974273D18F14C78C286B526F518231408EAEF5070BB95F0EF502230FDF33CC
42A9C8492C628F50E3885C00D662DAE00DB560F4F85F7F266D95AD1FC0452CA1
16399E3814C8F182E1188C4B47FB762975E14C6FEAB7BBE41FD692FBC23E4BA6
476B753586C697B414EFD4874CFF62A84963541BAF0E87682AB0267EBB3BDACC
EBD717AF3271DD9D078B0855D4F8AF4636303DDD37A8AA4709C1A1F828B222B8
AF53D5DEE0E6B465BC273668725BFF2B6BF271B4E43E82E3E9BFC8F43EE9C02C
B6F255D803E8C90FB755C76BD0904649D250A8D8D0B82FBACFF2212A6711889B
9BDAC517D8BC6677CC095B22141AF82DFBFA9E8E87EAEF22D1E6879E5B909CAB
9ACB87B45F55488B4CBF91F7B8E3AC3C742EB2F38C4CACFF62DBBD4EBF0E6008
A1E001BC8E25148FDA353ACA3D201E82F8A0A7542247E5C1F4932753485A4627
CB1675AD8F922E9FCFEFDCC4BDC1DC72B33866ABAEAAA44F81687992514764FD
4038BA75602EBBDE8EE1EFC998E63FA1B1246DB20265461DAE6E57B5C958A54B
43ED6AA7650992254C9816AEEF3795C69DE577C4B9C0EB5891CFFFAAFCA43612
1D0DE5936E270E3B2DB28DB5013126B6F2C95E10584FF2E613EC3AF9EECDF5BE
A87E7C92105FC83182D0144D426E46FDE470D568BC4A17A44A31E61DB881C335
11CBB494457AB6FEED1B5EAA0BDA5226BB7BA949600DE5E1F2ADB31C432B7A6B
88F7B26F555A751CBAF82B78A00AD62AEA3CFD663916700C95E0023599AD8BF5
E5E7F823C12C1BCD7239AD483C23383B1BF965219C6624E5CFFD642AD61CD077
6567E48DD8D9094FDBA1613FA279A0E168E4BC682C4552ABBBFADE42E309377B
26CC9E0ECF91AA7CB06D15F07AD79D6C0ED1A722A10690EA36BC87B4D6066CEC
3C313244CA986CCB616C7E26129B8FE14A5DBB8D377E376DEB9A4C30C3D8B529
25EBDD62DDC14B3E777B06DF048FAC43FC281ADE45FABED5C979A48F302C9156
B30A6056497FD3351D7C0F6F281460A76683507FF148B2CDA2B90CB5884440F4
64CD57295728AE4326970C83A1C4698C66A8C900013C14ED7BA85AA03289D97D
83B5191DBBDC866A82E368E0D44D0F83B6BF668A657DA6F76FF4B424C52B014C
68C1924EA4BD6E305B7876501A1493419F16DEE7887AA1DFC931389878410F4D
1032A86738FC4C2E7A3A4438D1D16BC51653FAA2685D849EE18DD301AAA69044
E56DCC291482EA4A2A2646FD6B9C1E23917BCCB330A619CAD31DECBB7681BCC1
3C3EE0D552944258F3184E28421EFBF0F6600EFA1E7D08A281013DFE95030A0B
9632AD80927CDC9C69D78FF1F9F0B6808F0F3C2F56C6D7B86A1EF2651D54A621
41A815D16683CEEE28EA85B42F24249A929520F0BFC0D0DDE30719A8FEDD636B
EADE3CE20163B38F6CE760A719D1EEBB399DE411FC4B41FA37916D6925540323
301C4413675D8A3796AFADEC8E98D78E01B81DE3A78F6FF1BF957A53A0377508
BAD0A7CFEAA913B935BA91F1682C8957F1BA19CC7FE20FBBC297B1935A3A5DE9
4E8681FC684281470DF74CE8E2D1C3C40F2D73104612FA58833A4EFA2A4B2DE2
7882B0D6E75FAF1F0EA49BF15B2B38933927046DA13BCC2FB48992BA917D5B91
FCFC9CADE032280F7E75645587761AC21F5ED179AC834CCDCD90581DDD1537EE
D5048BF4B8F596612934B1A8C06566F464F555DB2014F3A6172D2342D2030B57
6F5B7898AFB8F8CA0492CA1038FEA46B99D05AE5ED8E320805347F5A49ECC45E
7B733CDB34A1BC3CB136751300AB9F91F03487952E5A701E0F825B35DBBF865F
372CC051A9D4540C90C4EA4035D6720DAC61A652F2DB0AEC9E2780648CF1AF80
CD6A74273F5204CCD208C109EE75EF233DF666D87CCC5B2F312D9B93A6382CFA
066C7FE21B35001339402DB98A466FE912EE340840EBF250019F736B0BE6E4AA
33D56B118DFCC4F09721BD57C38734D3DB8B53843D6D6CE394898642FFE0B033
0D747E4E19758FF05165EE4395E0ECC246A1A96A67E7EDE8C1B81FA5A78EE72F
9D755C245A4CCB9D4320925A3BDEEEC5D09AA10EC891EEB540C214E62974B83A
5A5CC369CE9F3DF01FD605545787391CD122E422C56FA420378F19CA93390FCB
59B9E8D0A136ACD1C9780AA0F25FA907699A94684125A385ADF253CF1E33F6EC
39837B204FDD6937F45C869DD22E09BE325EC936C9825E30E3EDC991FE7034B5
51077510A2568D3091C99DD2D487D033EE9A75B7ED9E43439B6ED9E364BD4F2D
5163CADE45AAAE02FF57B1628C6CC9A8C953B69593E0913AED5EA81757E4FB8D
9F97617B4622E79868D52B70DDFDCE42BE4F9A7AA1B5923E3B9FCB41BEBD7485
49A2EEAA996F4CECA9D43A2BAFA4423177A9C80BA78897210D30DA8F7CD85D47
409E582BDD2EB2DA4888CE66BC6BC08C8DDDB541B5711C940798D95D2F9B8FA1
2C4340F2E793A0ED8D143B9CB5FD8950EF78BB364DA3A9508F6836E3CD323B86
F7C01070725DF295DAAA3A1394C0E2CA89BB581FF57DDBFF7865063A2AFC57C7
681544D17A9535FDD857AD224A2DB7270781DAAA348A600CA14C24A407D40877
1341818CBD9212AC5931D8E689009C43B860B5A9C51AF0BEF11CC8E85B067A40
234025B420AD06744BAE758B478EFE5CBBAB5138D6E4ABA93A27A784D7657DC8
28448814EB159950185ABE396DAB656E9157A217BD7A0F49DBCA253B5A47F447
5844570196CCEC77B4356BF8281F2D2B9455F611A4113AB278E8DE2FD81565EF
1E13AA97507A9841FE083B062CCDDB62122C6AD62D05AFDCDCE4E33091132D47
1EDCAE38607986EBC2E0FF72A920A5FEFD64E894D64D1FE6765657E6D00AC7F8
C598D226227FA8C178C10D90A2F26A639CF1C50AC0455F34F89764223F7DC55B
A669B8793F48CA8E9989A4DB9FFD25C55A4F377E53B352830FA336B8CDA1818D
BD4637DA34744818D2364CC6932DF0E2362CCDF7F662256FBE3EA8DCDBFF6695
65664D0B92E34B5E7EDA8B908F969FC41A37205C97F4E2DAE9A904C4B300F405
F7F7D17B997EFF71C0B00B951A7570A341DBF602CED95753FD58BE2A16804A49
97ADFEE6E00F84F822BF828933D680EEFAA50DC64C2AF35A3F9916784B964679
C69111ABCD0651128CE2956C78B865AD834911C1A179E2C201B622282F1FB1F9
86A5E62DC37AC584AA74172816689D0C6AA826B223E36E496B79B2C7384BD18B
3817C4BCDFDBB3B3AD271CB5CA98A92163FD90AF07DE1610FF965216FEFA9CF7
A9F685F2DF496AE239D43135E3E16082CAD53A66DD545E42A1186979609CD62E
F3C72F91FE51359C81BC32E9C8DC4B3B1236DA3DFD04797A8DD688A56CD449CA
78C51FCA3587638C90683909D6D65D9F18F0A242FFCB7392E4EA5BEC2AA85224
F7C29A671F032195D58725B51D49C48DAB045F59616134880BD8BFD50CF005ED
007B390B4306B56DB0021606D2B39110AE5BCA209EBC549166AF006B75763481
C3AC0CC33978205427B050010D215B6555B32B69CB55983BA444F1B6A11A2B9B
30B54FFA1EAC827EDBDDA678126D3AA061FB3614B78EA54AD02F0495F4468D46
EA652FA3C1D0822F18A0DABD4B11A76B9E0D0920C9326B499854BCB7C7CBCD9F
9988D9F8DE95F1F507FEC112903F2439C1E08D8924BAEFB122E642732D2A5A07
070351CE3D94CCCC38CA05A3B897B383E6DC09DFE6D18BF866903D3C694EB91A
AA50A2ED89F8BDFBF15591B27312E42848A40A6098BB95D07FB57B3512ECF70A
C43BB1D4751F57512749F002E1148BF8EBE4BB735EBA4E9C05D6F238CE8CC902
D1CB601CDC91582582412C22EC0C64A7150D6C43B9A09A43832B2898126AA44A
EFE84130BD4D15BB2EC8597057E4EDEBCE79E2218132AB459F803E0DEDC3DACA
2BAB2D639677C6C40CAEE9E52FD0D2CC0989983DFF33B0CDCEF8101CE47E728D
2487F80F4DEE34DCE95E75ABA3A85139790DAC9925BD0DBCB73DE06AA84522EF
D87ACD132F40F2ABEB45F08F472097BB7656081ED5206F2827191B4CDE8CFD79
46B706F880D67F16B316CBB5CDF1977988257A0ACAEF3ECAE8BD6589B20A16C2
E1CE69B430C9E868EBEEAA1F452E0D6F6F25A3A3261B5480BBF054147B1CDDB1
DF88A7C8A2E2D4AE26385ABF6CC82A01F18E577035FF349518082328E1B32287
D1724301D3B14553CB0D9C6CAE3B46208DD9CB93AFEBDCF50001F5A56EDC3630
00573021F36A07EC587466B0E55B5690955F260A441AB54B256290B582A9DC56
945D411176AD1A8848F979F052CE26A23DF2A70A31D55BBFDA0D8B20CACB9241
F5F460C546781DDA64D57B60C7293CF362A457B088E51440ACAF6ED0B02BF115
B3C55C7FBDB7F09EB38F7C8CA86C9C89D9BCBA13FD811857B3884EE07C774FC3
C46E6FF193765CC2DF1C622D9415114EB2F3FC4EFB8EB31E6D5FC58CADC44935
FA9E6A3552760C1998BB54FE1DE1ECB51495B5694C5BC6F68A86B7BC067186BC
DC0A56EB2F2BE12BB9732874AC092A285AF9574D6391C93B9713965E2392693F
2113BB8F138F1F254A77EA74602C6D2BD4D78057167E3F95936847A155567102
C65DDEF02EDF43C5EBA02A9F4B7B7AD3C58004805E2F60779FF767AF2CFFAAA7
F2FB1E988028CD5BDDF48851E1F958530DA41C2A6804730E8908952D10AE95CB
AAB2029D54B3548653CF8009E7731E1013CFF149F643EC607E69394CA5141B1D
D5E631C82237FCD51D6CF5DC1E2B1CED5D9B69ABB3746877771D1E5ECF9150F3
237504C3512122B334CE03EA6D6A3CDFC0D1E4465C96FBE9F655600B8893EE2C
65BB593B873CD789D885D64EFEFA51409FC4D512C520EF5235E1EADB46408C75
794C620B2330FD5BB8F5BC59A60F63CB797C0FFCFFF09FCBAE6C1BB500C839DC
25CB07FD277A265476C880D36EC0611DB7DFD41217DF50CFB8585136029086AB
2D0B480AF0C39A12B68F330C6794A3CA9CF5CE764EFCCB3CBB56BF05CEA7C520
0B5A292B432D0E5F16CC484A9810BF94FA7E0D033E338E149518B5493D7E3505
58234C9A33DBCA5087D9E044FAEE66BA2446568997D76819F8BD73148E885B22
C95FA78B9E9B4E4483DD252B2608DA3BD897156E72985C4E6BD2E7C6A96DC29B
DE65BA4AB4114D7AAC6AC5870D0FDB7D9B36163ACF2F27752E539798877B4A50
60782921388A9B2D468C96730BF8366ECA415362050ECB9A7C3AB8AB6C697AD5
845D58D83BACC940D3EDD5D675EE14CA60D33D1C57855BBEF5F72B3D8FF08EDC
1D254AA9E355048C87857CF229376A72039D52B1731ACC17C5615AD01DD26C08
A41B8BE616FDB47FAD30DB394D570DC876A06C08E3CF3E7821D6EE374486F83A
2FA271BEA80089069359381FA4B6C81B3DFAE8CB75C2F574036E13FC1CA59DB0
2E731D1809F3CABCEA2C7F99930FE769403B46E25CFC2041759BBC27CBA4BD0E
0E18641EAC906A5EF0F9BC2108062134A7F1095B3C4AF285635AB07303DD83B3
1B0126B86ED28DF8CAB1FEC6ADD8939BE7366D1E3226749B9E23E4C2AE4B9E9E
73BDD040817806BAB81FD676826DE6BE1AFC4028F57DB7A0EC414E0B3A1A6C53
FC6B951CE935ABC955B8194EE26D9F4F58E4908EFA20B7551C67CB65DFB3A6A4
F462B9CA81342B8A5B460CF17342B3EC42F3EBB3440E2E6021F3F2414ACE5716
2F9F96CED4305F6E30A982C30AAF3BB21658415CF702346306E88069A03FB214
ED307DEF08DB297D63B8DC952C181A02D22FB85F961C7CCB8ED6A5E98AB828EE
C69F3D2498503AF00EAF3AE0B8065552BB6E01D68AD8E42921EA6EC4EF25A13D
8A05734B00F5C97585B6F0D4D325D8F2CF7D6A8E7FFE556472E7DEBFE033C489
7D51AF17B9562670633526DA154F2FC6BEEBC5C6CE8A2DF6DD952B33819FF58D
C3B451611B1DACAB404620082622BD4E3E50B189223DD7593D3674AEB6FF1FCB
71B934A2A15779591F6C524E567539F9755A15D4D3143EE4742916BEAE0D21F2
4A3E4D146DEBD1987279C5F1BA4AF93B4D5944EEFAC690FF1C17DA3D4B6BCA8C
C26A029B0F91E4E7E8FCB04C4A950D0FCA179322EC338CD4CE81B2FF46A7BCBC
CA74B6D314B33AAFF2161809A4BCC7D2152683D4FE7CC6AC4B33741066D8931B
A1BD1C33342D8157822D42F334B8793F13FB6797C5E5249A91E3D2F2BEBE3923
9ADB477FBD2B0D86B7025004216CD14F7D7D28F26A0D7691D33FB03912B1A02D
E8D25901ED136134C82BC2BE6F136D0439FF5B2585A53C7CB0DF57274F64AB62
0EE152ADFFF6FB35CB22667E746FCA5C8BB488D5C952346C0A93FC6C2B437B4A
3F2A39118BAEF1C8DEB26A62C3DA893EAFCDF3E02CD967FA4F5BAA3C81C2EB41
82E4979F90B7BB01091C8CE7E29A94988DCA2EA162824EB5DCFD3182F1D47C47
3E9D4AE3D7945FD7E6273510D985D71FB49F37CB0EFF67406088CA65BD3FBB8E
0482320E9128C8101C9DBCFABC482555C3487975DAF5E614C44029783F9353BB
6F8B8F444DAAA819F8062AB0A2D87B99654E85BE8C232F6D9E78CFF549A16453
25D932DFA367536141BA88727A80869623BDEF75729AF885F9AE85700C5BCFA3
4CCC464F2F174B3C239836E1A3B8DE27E84CABAD794F6E6E7DDAB7BA7EBA706B
3837D4AFE41348B1E6116D93DB2C77E00FE409FBCD5D3ABACD9AEADDC24A1F15
2C04590CE1F165A32766AFBA01B021FA3602FE926422281BB7F8124F1DBEACF8
881959367447E9BBEBDD2CC287C02221856B6ECB5D043ED98C747269418E1A47
C9F0DAB1C6E90DCBEBD619147224FB6ADDDBF9DBA2294D447CEE443E55BC3FE2
D78D7C006C089BF5521A19117A09AD5634BA7CD57325B5A34CC3F984018DC965
364978617305E71987561E6E4CD95008D557CA7BFFDFB68A41EBBBDA98C052BF
C0B40FBFCA767F3B1EEA76B1520772E4F0A0CBCE159F7C9052074BE095971188
4D54979C5CDB66115717E8C12FB893305D4CB1D9427AC02B7FBCF0E72AF4FD60
26F5C4424C1703EF609D60EEE4BD46BB04A06EE8DE041C39BAA9BB45D442C89F
E1D8CF703F426F06CEFFE9C2958928317A80792C7CE2EE3525B36B8064CC278C
69738290CE1E2CB25BA923B804C33A5F9778D0C0DB3FB4651AB84DCD3F7F4FB3
4EC134EB8D5DB9170647101B3450816B6745079EA9512EA13B2CEDCBF8D7EA19
3F1E798D491D387744045176488E5A67C069892D82E3D80E034689530AC34FAB
0DF1BA4C7B22DDD0B150A3E8F562124FD9DB033AAA294C2801B017713CF2EF21
0D0BF5C9849BFAD32B83873EBC8C23AFF4F13A96F3D9F1762CC5847FB786AA64
15ECAAE9802FA36E4096D06B36932CDBD87C5AECD109E5E69F3FADF2CE498B72
C709FA1C06F1CE35702F2EB0093D9CE3EB8C164ACCB1F12F8D4B445D355DF236
D7A1C5046D90C4D3B86D3C8398880851D0E4D88DBFBBF18AE29EE3C946675357
EE5979A74D3EA1E100CD0BDB3FA6B4C8C4E5DC1649B5D245330617A367A9459E
8C2156A79F843615DB13A2DE143A7AE5C0A820C4D64F3C8FB1822D7C8418E098
201DB206C3AFCAFFE2570857450D7BAA2C28D6E5C2E73A95EBD880D4F105D0B8
62005449D50F838D839732F16F9F6615CC4B2B9816448176455464B5851D915C
C46BCC30DF7EF2AA9D18B735F33C0204A3EBD21CB5B571D21CCBDD9F3564BE4C
153AC91451F122BDD5C724CB802332664ECC507C3E5215AD4ADA1BD570F3ACB7
926C4A2E711E253730ACC21EEDACEB9091124C15A6A67C73611AD648337DE719
FDCB23BD991781A28C97950CCE90A8D8534A1D7AEBF3D56D909535DBB3B2D740
8BE4E5A754257AAE5A56784E13A1090C10CC9CEEE810D86727071B4A05D65224
9DF7048835A16E27956176760D977B6BEB3CA773AA2BEC11D8E56B83FE343006
13AD3A904203E3B1E255D7062DD9A9AF99C6F4EEFE50C3A72BA6B7E8B43F82D8
A97DF78F44E832DE55A37BF78F7F5EE32BAF08248CA2194DEE5B5F0632C3DA1E
F92376BD298AB0C2186369DCD27274DE48F4BFAB965DDE8635A2C7F97EC7D73B
AFA13DC2DBB8EA76D780A4B6D775E4167286D5E0CEC83F6561EFA15072070A4D
2EE7DE75E2BA715BA690F4D441343471046CD3F077DE48C37D1DDBE9AFC81FF9
3A4DBFF0B611B4C6033E677C43E84BD9856CC30555FC7C2DD822BBA326D4E3F1
DC5CDDCBB1254A1ED24539002B4F89290F034784C81D9FA6ED8ACCFF15B6ADA1
CD04605E0AF572B2914FD0FDB0357BB523CF86391432C8EA0151F78BED34A3A7
080753BBA728C4E36D66A07D29DC9D3EED0D6A60C5077DA1E19B220E937F5581
D1975ECFD00B6D7F8FAE0B801537A59AA24FD11A903CBF85507A570C8583938B
0F769991CA57788BCE5632365B6E34B21E25757F12ED37B4DDA6F482DF939054
37670DD410654E2F4000B40B5E96B6BD823084E320D342F27E2E27D5549B78AE
1328349CE319F1E98BB9B8B3E494B2014160CF85023E0F171856279D43F1DCC8
63E94E1F4E6D6FFE6BE23910E7F181D048F238829D40A109755080E6A912C199
5C4F548767BEE356803EA7F6B63C5BECD06D47F6B05A5E7A47526378D488DE30
96059D1E52C96F57BB4D643B1ACD115FDFB8CC64ADDCC5212342D38A9C18114D
2952D05A84180BD1D23E7D4743E745C93425FD0B0E5186F6949A70C40B3E6AAB
5B0440DB686C09693644014E579BACFDB7DAF89C5D10CBC2237E7A1BED8BABAF
E9416AA5E06C7C4C600BF38B70C87E5ACAE2BC55D3E78A9CB5BDFFAE7EC801AA
BE09A13A36895F1A5E05CE9EF796BBF902893C83399D0C9F7CE2061F36AB1705
F42E8ADE5BDE0E951972EE5DAB534A95B3EC774703E6A8E7449093FDB9999150
7C71753EE604A02F97A44B8B49C81270862B8528051C67824D505EBA49C21F40
8A883F99F9D2ADE3960B1E62E2DB5D6CA4115A06C593291FE5008DA68BB2A383
2DF7B82697DD600E9BF24F95980229F3580D861ABB86716CF2307E3C9A240487
D969C928A6CD6045998D2C3B22847CCD5FD60C3CD4853E1EBC08C892BADB8462
7DB5819C23A976A4A815C42357039C231B28D93954D320B666D6A0B88FB08836
75096A2317F5A85426FBCC01C748FAC8AA42A9143FEDF66B180FAF52BAB95060
60E7E709F6FF1AD07D501A46120090FA1145E673DEE6886BDE038E272BF50DBA
CC5F9D6A34BE0B0F5BFA9959B684DA1F185E212C80FA988E60EE370AA6B91B1A
C5573FB11F0C591F3B4EE6F4AE46FC4C14819FBC72B49C6AC8B99C40AF744AF9
A7E302EC7F39D9CC24D44E4E79D4441FD01557E5E8A8C094DBD7128F91F627DC
10ED55A6B0641FE10FAD2D7022346E5E026793D03D043256DC155172F82CFD64
4BA87995D4C1FEDDC0318BB95ACFE243C77446CF860E3767D8880357E5017147
E5372F54B764A8DECD0CEF2A8FDF0E16BA13E4A36F92147E38CD271718777E3D
C686125D9A3FABF08480D6B95F1A725A726F55459A54A8F83339A0A4E5F1AA19
4B2FC8593DE970B2C883F9782A64C158B276E8851C66234A9E6A165F30BFA407
CB5C1C3B194CE8A149EF9121880DA9C89FECEC969068C499ACC0D61E05B8B320
00D4F6A0D9B74E591BADA348BC6621E710DB3D3C578C86CDBBDC0A2BE5F6D17E
DD30DFC919700733331432ED8C17CB4DB47FA3AA70DF55B9B3093689E579F2B1
719FBA71920862456BE1232B74502429A7537DE9B414C741759F68C24954B3CF
36BE58162CB99F6DD8656501B9D96CC434150FBF6EA95F72F122B5E95724776F
608FF313CF49ECE1AF08FD914095A4F6CEB92B97885662536FD59C2313276B41
4A32CFB3A91FF8B7A61658EF37BCD5482F8B93AD55F1D27B8AF6EC016DDF11F7
9234A880A99AB7E17843842B2B79B94C135B483BC8155E7DAD9D85DD27CC7D97
29CA797CB94DC988AB19E90AFCF255DD7C80245D9E8D139FD4302A1BA84F9877
24653A6EBA1F30D227A123811D47A6AB485E4C198331EA39EF3D2AFE9349BF0F
C288F5AA04DC160AB05722DFE51EE3043A0D01649AD7FE8B0E49CBFA7B500BCC
AAB12A444D03F6ED874A9AC1BF47408AAFCA95A4412B80F4746312A45FEFF373
D6C7C44332C43F85A1F377D24AE2DA2133C3DA1ABD89D7216E866D2AD8E6DDBC
F32D0EC0BD16A19C77267A1977D12B346921EA3A8BE3B686B9A98686137C75E4
9C91A533B409E0D086629220B424B17F78853929A63DEA8030DF11027C085CB9
9911A1E9853BD43A742D929018D4C3503CBEAD9315C603E66F81CD9690EE82D9
FBFE4DE71921B682F27642BCDA3796EB85346A21770D192937D0E0E8537DE347
D2310EA51DCE22F98D03A4ACA4E0567A6DC1A3FA7E5910670888940246888E97
084E26E0DB32FB638009799CE6A1B2FA742EFD8024F673AD97425FBB55DDCB62
005F6519E798D07B41FB5D05B3DE9003CCB878BE546FE4449C3D239D0822F16C
4018E6B622443A1BE3698CAC8C3EAD6F518231408EAEF5070BB95F0EF5022431
DE233605CFBC9484005A11A8D48DCFE441237BD37227DB778AF94DD1D299A24A
CEE278C1230033255694B4B9C5C98A30E03E41827B37AF10ED769A45240AA44B
E288618F56B883D3AF69DB6A1F92730018F501BB325DDFE1F59BFCF5DC20B580
118D1E706D75941422FA20FEA8C57022799430BCA2BB2D8957B479E0EB8CC6EC
6D5E9E8C3F5912B8E8744B933EF47A3885068FCA8396A30A2E76058489FC1A69
E562EEBFB3BF7648E199367C0FCF6C832EBA5B2BC6B3B33F6DC8BEA6BA277694
B45A660CC4F8CA33F2BB3F16348259BCA055F7E794A08DB74A375CA3F267780F
AB1361A833A15B21864BDC6EBACDE51C5E7A09CED69562BCC5BE9AA9BE0040AC
84562D028CD68CF7803C2BA94631CBB35E9FB5EC17169B6CCEDC1852686CB041
E10F9BA4A23177D05C717514E523E0396047D87761A33398804A370B2DA43DEF
CCDBB357019858463191643B40A359022CC27199E03F3B0818DE8B7A2087487A
D698DBC422EBF1506608CAF12920A6FF00C27ED0D1FD8238C83EFB750206D130
E289BE868BF3AC21FCEB5A99F47E905A556563A1005DD121B94CEBA697B3C834
53E1C0F6D52568ADC4161A59C422FF30204E84C9D21EEBB08B5473DD51A3225D
B491396F912EE6AE5633C8D8E88CF4A6CC1BA052AFCCA58F5037FCEAA746DB35
E53DFBCAD94873A7AC69FBBA8877E236E349E744FD2AE7632D4B1653A62FE001
516BD0E87B5ADAA4384B15882C6B0E2215C605259C56C31EF2B8E056CDAE4935
075FCB35CCF7952BCBA85E43C6E5A4F99F0133D4148F48ABF20439F99DA1B857
715109EA380514F643E92B71E97487D0FF9545E8EE9EF466D56961266315EFD2
F24C4F5168AE636096799A57D6A8C0FFC35B84B45930BBC19DAF40350EB07FAC
1CF89A0440884D1BCACE806961D5C5691125BA3C4EA56DBE1B484EC5D4820E3E
21E0D5EF53FB8CC9D91F80136A6CE15C04B25B3433DB692157950729278CF401
0563118CABBA76E7663A22731A3BFD4FF04C691D8926A96B9C5CD86E8BDF41F8
AD290862DE18ACA4AF040E85C5385C02BBE8EACED0F164AA8A62B2356CB859EA
249E987BED42B9B3E17E0CE57CC250ACF51417414A2551F3F3E749E5E8AC8E1F
4623F75252B3FDF8E778571373198842CE8EAA67C1AD294E9496AE154AD6C470
A05C75E982319D7E15A932E08051B784664EFEE51EF298B5F60405EACE3C6C42
0F53DD1BA44D239C4AE71B9046CAD64E311171DA5B83052A3947A20ED609E706
465267C2E85B796AA02776DF8DD163A3CA1D6A0C90DF7FD1DE8232FFEA77B553
D996D24E6B4168CE4B664F13DB69D09D4159705458CFDAED7FB218BB7E4FD986
5E7EA23B60F4C171874C2769E3AAB7A23628C239B72E46D33B3F4D0F890D62AA
DDD91B1CBE1F8EAF96A1FB9419487BC7A82E60F8B49DE562668F8D8A3F36DCBB
5352490FACD6E9EF0C868505C8DD74BFD2C45FD1A30675D11E8F2817E361F92C
4FBA43261E3C176C1A1502B45433C0BAAF6FBF4238921726B3C8CA5FBA4E4E99
A88103935A91A910B6AC680A894F4A74301C8435A64C9A456DD6265D8D0D15BF
FD4124F6E6C82368E361D4034E462F659DFFB64C404825C32FFECEEE4D0080F3
3CF486D5561802BE7AF1C73AF571A57AF226885E3CDF9BFAD6F5F2F3AA67966C
90BFFC98C24E1AA0744186B21C7C47B428BFE1F30F27CA26F8321354F8AE76E2
383FF2F1C299F3C189E12893FD192DFBC6C391C87C0C52F7868457674376CC00
1A8D44DF11AC61D5C2F18E312DFDA6528F4B0EBB08AE954A43F4ED280BA43B03
A3B4D59EEA102AC99C90044A7F5EEAA38DE1CF56A1ACDB8E8F6D90389C1F7374
FCE9EB35BCF07AF1E03176E7E494453A37F11C624E5D1BC5188B21A3546E8522
7D85CB8C55DDED76C50B3E19BD4FDC27620CF9E73E4C56D825689D816FDB1A47
13F18099602C65A837333761183D0C720073C05A2F6D7CE4EF45440717B9DC97
B252722950F1216BE4DDCCD51327D1BACEB01768B63AB1FD8647270B7E6AB646
A70F51417FC07D5967945B8E2AEE7C54377780B0FDBE164EB7200CEB625A280D
15C9C22722EFEC6BBCDB14DB7688A8A314499D796D1BF5FFF09FCBAE6C1BB500
C839DC25CB07FD277A26552621D3AAE7AB25DF8A37E992D8580FF57E5ED0D362
77F6B1ED0BF763461ED764B530D2C007E69B0C0CDBBB56219875ECFFFB7E475E
F8D2494F6910B015046CAA1178783979E4E2CD142BC37C5BC9DC769A6B0C43CC
700A7DA61394D024D055212647551E4D1ACD043CE332D46E431ABC80344DF659
E1E1539398977023517DF2C952C95AFC8907C102971780D4F48B74CC49AE9B8B
509D58442248ACD2A7972364C8360C4E43E2198C6E5E2479AF6E3ECB544654C4
3CA7BEA5B305B1BCA2F2E5CF3397338DE5C961B3AA70DA22E24F5D5F7DF0EE65
18D63F4A900FE2081725F4AE20FF5356642D5BEFFB636DF04CAC068A62E2B9D2
0DFDD5A0B1D64C656EEA8A4589F0F9B4879A99BCAF708E326D070B8A72B4B3BE
25BD8D5DB03850ECDAF201BBABA430326604E56F26766AB8DD860214079A4071
287493CF60835B57D688D87419036AC24E01FCA305E0699ED2002033D0851E28
921CBC770DF14BB4FBCDEEE2DD064CE344608BEFC72FA3BC09B20467A1B5466D
742363F38ADF7937A89EE47EAF9B93FE2A8694120725C03B4132B7BA25E3B70D
654CBA4A65F0E75CCF6211D6F89B3F9D78E0A2FD3FA71C28EDFC157B1CD49E00
021831DDAB3D794484C4A85B8F0097DEE9B978367938CAB8EB531837396EB5E7
4E82BF298EBBEA6A340E243EB77F77914C3F657601CBF0D537F16ABFC0FE5B89
3992198112B4E0466B0934E18DCF38D94764B8BB75790D5D62EB60B4F6A84675
CD614591D3F489227A85D6480DA41A9D0603EB0FEB09921F1BBC791B4E0A295D
1DFECBE39D9FF712C85C748311C9CB8421B77092B6596500AA70F399DC0F72C1
F50D22B1CA7136960F20A64E5D3D4F344C2CEF9E350FB86735D4DA9E14BF05C8
147903EDA9609D291F3F9B5E45310EDA5FE1C2382F683FD5F5D7F6BF41D32051
35521B323963782FF6E28429FEE85034CC52CDDD9A502F570884F646566E0AAE
0D0D4930105FA97BF90EA99D68B8B3488E64AF2DCB2CD3C52994868648D53DB0
A871E8FE6CA599863F1D4BF81C5EA213B72018613D17F99B3B1F3AC5787F64FA
126C1793AAD1ECAA2A3F60DC2FBE443764E6A62177C66ACAAA20500A09579E67
35C88F5C63F2AF356DEBC9B82C938FA20D18544670EA623C94DE2797EA505DDC
0A5842CDA6E6E5484BCA81A6783EDD95A554E64ABF5421FD338F17B562E955B4
EB2F86DF6C6F262794DA9ECC4A8315DBFF047FEB743C8E23B3DFD0DCAC2807EB
52000FA982CC11B675F962E779D4020EA75D40119013F43D9AEC9AEC5A51E00A
C57C8E9F2D93A6155BB0695CB857D7D18E788D2DF9753691F485474061239D8E
8052CC15B53B907E17802B8F1B15359EE3C17F7D9A1E51138EB92AB182C38291
9D53E6CF1DBE7216E7E4B07C12A28AE03BE53CEF9894EEBBD3459DA51B00D086
DF326D7CA50C1EFBB3AD48F21DC7670F5245D7F7FDBABB8BF813CB9DB27CB44A
A47AA0D4E648240A6370B37DFF0AA111D6B991AB4675E7C118F9BBE0A99890A2
5B23F771B444F354508331C092DE8A2490CF8EC2ACB2918DC19E667617BAB6BC
D599CF8ED11D53AB99D8F5B61F8CD458C787BE6E4E2526A4E19A8C02D1BD76F1
DB27CEA5D181D7E6BD1EE31242B2A36DB0E19710EC27BBEDDD25AFFDE220C21B
8C12F59FCECF6F9848B491C64BE4F4D111C5CA3DD5EF79873FCA0C01F737DCE7
87E36540498DDA516D47B0F1789B8605F038CFAC465E3F5AE8ECFD0581429FEC
D1BACD56FCD88AA6ED93933EEBD736D4AAEAE5E5497AEB35CFAFC2528C47F1C8
9A430472434E6B35D99D2CC3FF46AD120D492F25CD6E1980C881CA45AFBF5763
77A48059E6DECA5D00BA874DF1C82474032BB57DF31DAABB7DE1EBAE20A38DC8
04C235EEFE5391D6C66F1DD1922CEC0BFCB8D21BE3C364931039942115D1B6CA
32D2FD29903D9189106E773D41AF978E21977CF4891FDAC9394C7C321156CF52
E97350C1086E047F043F4D780E9A34C3E671B402F789CDCA61531EBDA3904CE7
0AA9F7A74DABE0F4609576ED3C008091B1E0C419DB3E99A2E08D6749F21CE313
BD5A85352270ED6DF5AAABF3E48C1DDFBFF3E646936132CEA0BF186C9CC78905
C9BAF92E2310328D074DF53D18846887495E8DBDF64F689E0064ED032722F74C
90360755DFBF7A0FF2C797DF577C4FA8DF7125193E2ABFC8962C812053A6E0B4
DC396BE9F0F8A3D99758B736011CA5A4367C58217E60739092147F5BF9CC0D4C
33C4E8C43FAA59D579B06410AB284E6F47CA3D9CD1BEA574F560D39454B9919C
B596B65ADB7799F05ECD26761D1ECD916FC9B05E6E537097A9152E517EF0F6AF
B326443FE85646E3BAA22D81AD541B6BE12B37AE12C4A9D5F27E36DD029C2724
5334239629DB580986C5350312E62604BD4BDCC8DF03AFD4B7C09587B05DA471
299094F47279FCC1333728039C940ECD45BA3B03DC9861C1E8E36052AD87F5D4
26768855B00219DF12D7126294EBC13D6152AA6B018BB4388B59BCC219FA4BFF
0C73FF2F9658531A3FE227D76F615F8936F163FAF95D90410021306E10589991
80B3F20D15C5FC1822BFED3F154290E260A08980D332BC3E951B1F13829E41C9
22DF981188F09E377CC2D262F693F09B02242F0363BD8FA326B1C2293B126AEB
6943A7A0B073BA674C052CC9AAD5AD1B0DC7F8952EF2FDF0CE7008669E197502
49DCA571DA98E7ED61754C402C85604980135449D0992EBDA93D9A79B94FA864
34DE03A05CD8770E937A012CB79CFAFA04C6340D08A254710D7D51CFC22B6111
4D32FDF4A08B6E04163AC562D292B7E38F2CCDBD73B39603B415168A1FFC9F68
CA12AFE312988C0368F9F9B9B03B4D479E2F44ECCE7B5102DDE2B84D02604A2C
2D257925F15E02BEB5BC99575694EE6B00EF1862F6D3664C5D0355F8BA598F84
D1E74709C738989E93DF1881CFE30E1D7D90E9CE16658E1B06DCA548D41AC588
50911D4D3A68BFC49B157A0BD2BF59C4723FBA2FC1A1AFA932B1485A15873903
B270C1028F44347CDA0C2E3AABB4D0AE6285563D87A0F0D53E5F146FFAAF35B8
BF4B489AF91F30654219A0B29609402515859B5C81A2C07FB011A59FE1C1482B
F8DA987EFA4B57542111CA38F9325FA310B5A94076EEC0803FAB6CE31E258D53
BF777F710D6E40DFFD4601D645AC9A24158569F13BCFEFBC700CF3DCC7585F89
4578F9D2438ED25EAD7F8BAB714D9B09F67A90A5D28CC0331F005109246873CE
6AF00228DD0F73FCD8126A2D82BC98C9F8423D79C383ABB001990A07F8B008FC
FEF55C2B9033A8F2EEEA4C05990EB23142620576551DC347BCB60FDBF7866486
665CEDBCF387F67EAA68EC3C5832338A0AE04BE97FA35DCF80C1E509E8A7490C
BAB75084B1C8E6B36726D0AF899B2D00BEA13339CD87980E868D3458CD62B036
1529D811FE8DCF23C73C1F725870E1EDE2146411CA562D63CFA12F8768CB3ADD
CA5046DBF783C785E40043E7558AAA21C046DBC8AE4C55DD51EB8F2B9858B1C8
2693DEB59FAEB3A14C1547C6C46C24FF3513EBCE7E6831D397F67AF35221CDE9
FA629086E1383E99C6FE2786E4DBD7926C5ECF91A876C1FFE291E8947983B990
895274BA9F89D55B5133EFCB9ECFECC62720B27A31F79DE69649CA9EC65AC5DD
BDFE1455B9756DB924A61258BE454D9F70400F536640930226D66DF3651B0323
6C930A1938932638DE190F010642CA37EFA4EF95A80220FE72248FE394FF0E9C
C2AD41EF94A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBF8D9780172780
B141F2E169D2E94BD6E749162099864B5E81D0BE2016124F6D3AC184BDD56C40
7E81F6ADC65414C3B1ECA9B1D185A1992FD4AE466ECC29ABD446EF843A1952F9
CA19A24348DD5A81B96A24B3453BAB21BF4D1ABE0CB264EEDD6BE0658FA2747C
5684DFEF1F20739BC4C5106C4527DE148B31E0F553FE1D4114D254F0C82E821C
769735FB86A8639C6A57EF8B695B14ECB3ABCE4CA9A83B1371C5794178633335
5BCD6B36AA2BFEB0120008688BE18433469A53CBC63778C1315F6207465F2720
F919324682903ECF1069F30090AB4365078137B741A785A63C8B3A1BBF279DF9
9E2DC1C130C983530A57CD11B56ED314ADCB530DA2C8991992A2A1A278B2E9A7
E7C3CE68481869E5DAF45DA74C206BE178320D01B4DF145D6DC515C88CCA37A6
1CA73964C470E1FA471436D8C6E44AC4C5010157DB239E9BE313B1A5F23EAF1A
32ECA307C440566D8413DECF5EC0E4B8F7C3EDF3F84092A930362DD09229C801
33AE92E824B0BA20F1FBD0943F22B4D84CF007C1D9B1D39399490A7A695330AA
CB6D18A25A78469D984799D135BF9854981D7C999B88588E3BDEA834A3B0F645
92C48FC9A6CB9F06D2110DDA89A3CAE0A3082B99772D58532EA37F3C99DC40C5
3BB0F0A68C7C49C128507F648221B66CC69E732ECAE96C94B20AE2F12D8EF1D4
8AB33F467373AB2D2055EACC2B9B19DA04B52A4A2947B0281A225D3F3FF4ECC9
0571044E7021EB4E531C7D72EFF375CC4D0754FBD4107B9A801E9D4CC9BF9197
5819549C86332833AE6FABD7868A1AA52DAC728E9595DCEFDB354F6605B75BDC
BBF35A0CD2A66E9B64950401031863B1CE6E7D8001380DFF434A70DDEEE7E923
0DABAFA0FF4E8097A39BC917CE12036BE894B0A69767E1F13DE61F3DBA30C4ED
F2B50D7E73B29419F7312094C3C340E4F9B1D898565E37E9B93E79D1D9B0E845
35512013C74769E497F5FD6926FD0229D451A1EF4160C90D2A1B932C5284AFF0
A5B32F2FFCB83D29DD6A50358C8FDBA420A0229625A7715A023F4168EDA727CF
0DFC3ABE725F0FE01EBAF6D7404B03FB878D974AD04A770977FBB2C31C4F8FF8
BB1A2B0D21ADF8079B77685637DD988151C61409D1448211C6555F8CE28E3035
136C15642D6C4CBE8F3AFF39B371F631A2E70C857649054FC69F8D4BF6C5E91C
51725CCEBAB7BCAC17B19BFAB8B2E847FAECBE0ED4C9FAA806A5C4865511493E
68C762C83A6DA63D6CEA621C8FEF3833D30AB76DBAE3AF4FFD6E2D1B76DD3B13
C37D2D5497730FCFB9463A89A504AB57C377BB062C02225DCA03E64A3D507AA8
413E3A653F17CE3D33638C065EF056061AF958397D2E516520C721520580C863
AEB9F26D0EB2999E59E95E2F884193E1D5FDC28A8A7F6FA6EC89007816A59D98
47889486E4F573A87A19E5DA17E070DC8FCED3EE81394E097418C1033DD02093
0229EB088F1FD538A20BAF7E108DA2612902D77900C11D1DBA0F5D4292D03259
B5FB09B6C9493A60AA65C1A748273C485A5F88DC1C0046D8AD0BAFCF511263B3
A79824A37390769F2EDD524361C8C59C09D6607358809158C96AA69CB92C9623
6F99069F52D3308C57734B39E016FDEDA848A63B7CAD7D38F6CA95583A8FE6E1
89C6289E3D5392707641742E1F88F9007FA4217D853967AF5E3659D9628533AE
56E652371319D8CE328AD81BFB6816DC78B58A549D32519C5B368779ABCE777C
A1C5C32CC0FA0ADAF483C9F95D8EC0BC2929B2DC5CAED5F7C8958AEF2A8428B2
47CFF3565F70BFFB8264E928B0224E5C15C3E4B1B7B9157998C8EADA678CE7C5
B1AF7CB7E7ED91CB43236FBCC50D20C11C6929C93C07F3A86232F92FC49DBF4B
870C28C308C0373A7CAC18607FC2AA4C67F3EE4D176E0A4B84C9F47E5E871C67
6D5DF9512BB3B7862EAE8E10393D1987095FCA5160EB042F683D45CD4F6DD29C
FE584C5204B59BAFEC5FB40AC1683B118DD6A842FF6BCEC22ED9D42A957544CA
AD6A567065A548D39C7FC130D1DBAE08A4EE6F0A5DF57CED92751368AE2954C2
8514D91A9D54BEB95915E160B6ECEFAA80417B376266C585B6F3B17B1E23C26B
4279C3780EBDD404C73D283DDD92B0432BECAE3F51B3DCC1AF6BE372807E20C0
0F40A3FFAB37B246B655620BD05ABD644857C50989875CD8A05BB4CE3F65196B
A3F6DBF60DD648A764BF8F9A50AB0402644E83479EA265192B41D8F3E81B4767
9FFD8C3216C6C9934959E2E2E181F60586C124C0DEA376E3974EB6F862421F6F
37283AFD0F95C4B889F3E3008BEF360B3511F823E75AD49BA7AE63B192382AFE
8FAA47F9A31BE1697149D7BACECF4481DC61CEAB7476A2E621BD0B910DB288BA
3D575E787E6B81A97825C183D7958C9347889486E4F573A87A19E5DA17E070DC
8FCED3EFB5A2920F8CD745270C62394911884CFE469CA423FDF49FC6A49E56AA
486A85DBC2F455FEB249ED809EBDF094657422C656DD7FD255DCC4A1C3D52D66
589ACDACE892D51F130970B083B3C93EE95ED54A1981FBD102545F537C8C1059
421D36AE9797B92146DCD444DAEE93529EED1CDEC8458C584E3A9ABC7FE44150
90C876B0D072EABAB7ECEF7E5F846A44428053C6C606216322B5CB00EB119736
80028F1D76243E898F2442AF858196ADD0AB7EC59A2ECEA311C0807CBE55E881
8A643FC373C01B534AA16F4911BF688DAFDECD88220F5ED867F1D8DB44257575
3A6B652BD1260B7A39E0F87E7AD5FCF013B3EA4C39D7A98BB489F3D6B37501E9
AD147D24DA5A393A6D91B00C28559B2152957C065CB219C926D4510951A2B2AC
EA82C2556F230A9C9C2B17161AE21868348B0E9DA4CA2CCD3AEC049D0623492E
9268B6CB07836810990EF116ECF45791C0B02D2423BE598C47327A49AAB8653A
2DE5A8C234987FE1A8FF45975BE538FBD81B239C4B1B98D17C997D66D0491D2D
29CFA7F4C88869E2D53DBC1096A7B240A8362813974AAAABC799660EA942EE4C
01F6697B68D2C86D3AD2DA85883698A74087C041F4CB94A22A5BD63E3099EA17
974826426D2C533DC004D6F4C1A7E16AFFE3CDE50F7693D5A4D6BF6BA810B780
AD3D7D057FAE178DCA3133DBF682F6B0F87163888A053067CF71E68408B2D37A
45A80B6EA8EC9363C4496E88651E5FD7D952A15453B3D87E5BA383BBED896F36
EEAB8E04F64D65811726E41351E349B6167CA5058EE84D1258EFC05709534695
84AE9A37142A3E14CE5AE65A2C78822332260686A6046BE4372789A5E4A84BD1
17779893C65F5154C0A2825E256CB8879FABFA0D8E3DA9C93BBB6B7085F338C8
C0BFE55DEE1AF58852B50FD3884410A7B77F47D006E32EADDDE4BECA5D5ADBA4
55ED9DA3119948D4B63E570EE03C658176A881B33381A8A917587C9F2B886391
53CA5E76D1420555ACB4E3E205CBE8D2CD22B1B00C5F1818ED916E10F03083BB
89F311F38E8043FA363DCA07A103B020299E8A99B0B72E990A1D84831236FB6E
9D0A187FC789EE54F083421685CE1D1A785AA70597CBD2D2F88311490233128B
DB6370FA61522B51536AD69F860DA4027A93C3052ED84AB231B88E71B9D3FE88
048DAB5228D9CC9EA4735506E6A03C7A805C5AA651DFD7BFC5FC1ED6FD5D1650
C9E72BF8E2143D43A1481140B10252DC8E0EA15A80511A27D667AE834A969256
98006601802F57A3F51A4194515E87FC36485599FBC9DAC6933B8A61A1223BCA
12183E088BB76CA846A545B90147CE4927E87B19A7AF2DEBBB343E261F3FEB69
0748505BE430D5D20E24B924859189DD2064241CA86616C38853EE22164898B7
DFCA1E0DA155271C4528BD7E092347619B0F4A87D8D42B51966FC2CF9527F8B5
94F29CCFDA190FA602BB0779C8F47703FB5C9558DDEE8F5AB5B30873F7EF5F9A
08916318648507B209948526A27C674BCA1DA029B6AD3386DB54549957A9A122
77C5C52B2FB301628AAE6F318BA2C364A97378970963D08E7284386F6082C236
2E4CCF3E66ECC33C744622634C52F4D7C0250D658C633D68B6FAFE895787CE65
AC9FF6A94171E466E55C00DA09E33D4874B43A3D1C2B90A6885DCC127C76FF82
E579A06D8A3A323458808BAD099261425B5ADDF0821009F568E615CE94158D9E
0A16274A2A502C6679AE5F800C4D68FC6C5C8D02843A33C41E49BB7E39C19BF2
C5D0A0310A77FAAE497904F8FA721FFB3EA07E52E37E0E3C411506C07C5E6A75
7165B44F0C47E5015E65845B48444847FFD8923E2AD093B00AF011F5AF3F5237
8FE5CA9D10043E0DDF5406C0316645AA6C946CD99FA328D21E9E2F8F27B94AC0
0C32E36E1E0F61B5DA2A50A8BB96DA9DB538695C4420C98D80CB40CEFB868250
797D6AEA1A9D7AE2ACB5ACD2E5B15B0525D2DA474BFC38A821AEBAF5D0C7E846
542A358E0B8F82D7940B858E078F34519695EAD030B132D028C0F9F3F729635F
22505495102769870F6AF3891C8469F0783D71E6C81AFAA55091EC4E2B95858E
61EDD3D283D44C3BAFE9DD741B274C9F2C2C9C3FC289718368DDBCB4F92D0A21
710C97C628D68BF6AB633AA38DB76D1B2BE5142DEBA28168379ED8E43DFC3C6C
5837DE85B0278025522F64B54734DAB28ABA82980EAAC6131940026E3C2297E1
97FB897C7D0D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999CD3128CE40D04D61
E2BA36830559BC1E8FF0C3D790FC1C24DACBF7FB5979EF5F012CAF413DABCB32
90E29A0CE8600AB60A9ABEC6F1FF955C9F58B2EE9650552271020DE319375AC0
9CE5AEF44A9C3F70237BEAC8805B0F58840E6F6A67B0061808B1AA8A9F4E87C6
82601AB378DCE5819DFF8A4427B00164D21F816708436200C6EFF66117C4056B
627687D3EE4AB64AA66E7C7B7FE2E7C825292E2A4BCC6A7DC3DBFB464844F9D6
A6BF415DF5818344B42CF77FA6F55790E477C71A2F7CAA6DF3E02D22CDDC8D80
0E854BAC2597EA9D1AD45005D25C76573D3B7592281A9AC89C17F75B02BBB21A
127FEC7987F45C39382501F2377EC6A6BEEDA37E6F998AE6E072B40FC0FA043A
B0F10D68CB42155014687442AA80636B5976EB5F438A649C2CFEBE9473E2322F
307F2A9311FA8071D138C04DA291097D0DD685111153328F90F0901359A41963
D0CC0523BA5B51E7A79809A9F63A8FF0E4D23641675FC27662451B0DE83CAE92
CE11461157F15EE157FB73B146D6A20C209303AA772F63900664130948DC9281
38580765B2E9B823085383F528E5628008BE0124FF978647558A1332806EF4F7
A94394FD517973BEFACB28CA65A87F8CF9DA46CAD29703A8F2285F08DD54D215
865DE535A61C881541F80C10AEAC738062322A37F5C3EB66A50D7D2E11CB2289
7C39DA3D355E8F646F3CE4932C073FE19A314E0721BA7AA990BF806BA18951BA
56B51DA0A00CB9E87268ECBEF81D635E8B248C22B97A0DD77737F84F56BD8CCA
8EA9E7B0CB98783D47CE695C68794271A20157FFF083740C18191FEBF1302CF1
AC1750AD5BEBABE99EA0DC1A1E92D27AEE0923C6C72651D5A15384102B12C4A6
8FB129568563D45B2A28377901161D2D80F08E19F0EAFE582F813D5239299576
2F80AA0ABF5A6C7C32E0C847A8B9D755A9F1672ABA51B49A911F77D50522312C
699AFCFDF239C4EC4DD53E374A6CA5BC71C5445E7792CB305F389E141E29E039
DBC5A0FC7C5ECC4E5C78DE650F9FE134CFD3DC4060451EE83575E706FD3A0868
6DDF7B07C2A9B735808CCD89991579D5B07857A5351820489C79FCEBA3964889
D726B9415B118FCD7F8277A4276987C21DDEDE0197C5D6AD69FAD5A4281F95BF
C26C8451FBC7E0E6329DC9BE9915A4DBBD5DAC5FC6623353E1C0F6D52568AD58
D7A65319A4444E9AD9DA6457C124618E37A1B853A74B2A1790C3AD8D6D41A044
C340EFC93702666821AD9B4AC5B7E8FE36A6E658BD6D9BD7E87635E722B95765
52C183E7EE41D4A40D036E301F3B464D4BBEDC9CE89E385508A0A0760427E4B5
E6A0626B4F7EAB1A09478FBDEF067537ABE156E981D1639666061966C21A2B80
5DB323B2928221FA6141796E1F0233A0F7B69E22D50FAE58151D30138420B915
A4E83A47CCE5FE47C397C0368841EC611E13F5F6C757234D7E61A2698DD8E71C
3378B02466A762EBF2E3731DB0F7CD223E03E276DA3BFB7599B02E5AADA333F9
18EFEBFDF214791BB13D29F9D59C93C8279C42F64F647F4B1927678C66656404
A3ADD43C345C5630310A86CB6D77D349C08DC8A27FD5799ED08FB337E3A9D1F0
98826CAA657739EAAD6EB9C615B07AF38A917E6470A4200C922A1A3365937136
6F83E932F928F916A8AC4EC685DA71F0DB363F61B08AD65556FF2F351AFD5E90
F0F2133D754916E65C2056537511B97A85DCE1095788CEB7DD4685FE3EC29AD6
067C60D1CC7A19871D6E02515193AC8626775773320E358E409851F53F9B36D7
DA980C81EAD5198D6C71ABA4ED2CD6962B7E1DA976795740A5A0E9958490F023
DECAFEA628B266A6F6CDDE93BD7AB741BE2B248DAC12CD46702E3AFFF2C99612
2DA36A068EAA35B2A92388FB53C3239A97D07989E84382AE5C946379339B2482
2CB0A4B9EA0EADBCC528AAB2C6457AE81EA65A4EF886716F2999813886614F5F
6519FD3E3E815D730F6BFB4B97FF3E2B080E731612386A722DF5F1CB0C009BA7
E3C8843EE2AC2088118090C0764B7A5BDD3DC0AE216BD60FCC3E2C2134220335
ECD8E825DDD95DAC745E4F1EACB4D6A5A020B795DCEB2408EE5A9B48E309C41F
B7F949CF6A3F17043ED94F054DB744193645A82BD558AACBE2F1581724E58759
A47648A6A89848CCC33C5A92169AE858D397E6C0FDF6DA0D2173FAF245A42A9D
C3572AD427E1703746007EC9B5F8E0E2CD63D34BD0F8274313AFBE9FC55FA707
D5F7AF507ABCE2767D85D4C4E2E94102C7213DB669353C7DB29959CA5E8A921A
90FB4E3D805F53BE1DA5C85D306556730E3E89859647EF06329ED709EF71AFEA
23D74624057F8ADD39DDCE027F1E0911D1AFC60B76C228A520A0590852417C0E
22706366802C9D5D6CBB48E0F6381F8D46A0EB1D1CEA79BF714DCEBADD2EE204
43E015651F2C78237E159E9B8793A3E8AB8C76670C5EF222B10FBAA86B2ADFE7
375B776E1681D6458B5F3F8E4C5151B3A0B493A5C19ABB8393568251ADE2AEBE
64BD916FC29DB487A66948D1D26618F684B88F7F1EFA46DFA4A89650571D3285
39026F0F27B24957C03C0A69F1FC46F4E55B6B50C23EA061340715CA77E2F379
C8E1973962DC2AECCF87490A0D30C3426E6B2B95896BF9B0EB71BA693146E939
A3A993D1C57C3DABDC078E331BEC8FBE9516CA53F7CB7E284ABA64D4855434DF
D39315573A982B4C835F8AA40B4B08D6523857204A62230425054BA38C052AC7
D41C1CB00A5F578DC50F648ED48182240052CB812EF7A4A73564C68B479E6744
0BD47276434B50CAB3E7085C8E14CC867719E8378E8B494A8C18C8F97BCCB591
13D3F24EC254ED0B93831CEC3DB038DC88DF48B211293CF81783FE38E088868D
C2568F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/GK-BSP/5. Klasse/_Gesamtdokument/_Gesamtdokument.dvi)
@start /Fa 241[470 14[{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fb 146[784 53[470 1[470 470
470 470 470 470 48[{ enclmec ReEncodeFont }8 885.568
/LMRoman8-Regular rf /Fc 216[613 39[{ enclmmathit ReEncodeFont }1
885.568 /LMMathItalic8-Regular rf /Fd 165[676 5[799 1[815
4[1015 1[861 21[553 7[369 45[{ enclmec ReEncodeFont }7
1106.96 /LMRoman10-Regular rf /Fe 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Ff 196[361 19[852 39[{ enclmmathit ReEncodeFont }2
1328.35 /LMMathItalic12-Regular rf /Fg 199[470 470 470
470 470 470 470 470 470 48[{ enclmrm ReEncodeFont }9
885.568 /LMRoman8-Regular rf /Fh 214[1328 15[1033 23[369
1[{ enclmmathsy ReEncodeFont }3 1328.35 /LMMathSymbols10-Regular
rf /Fi 139[506 5[723 12[650 3[361 1[361 29[1012 3[650
650 1[650 650 650 650 650 650 650 4[1012 43[{ enclmrm ReEncodeFont }16
1328.35 /LMRoman12-Regular rf /Fj 650 2[723 5[650 17[650
105[578 686 1[939 686 723 506 513 506 686 723 650 723
1084 361 686 397 361 723 650 1[578 723 578 723 650 6[795
2[1336 3[723 2[885 2[1192 813 1011 668 1[975 1021 2[993
939 921 4[1012 5[650 2[650 650 650 650 650 650 361 1[361
10[361 3[723 29[{ enclmec ReEncodeFont }53 1328.35 /LMRoman12-Regular
rf /Fk 27[1046 106[1136 3[1196 837 849 879 1[1196 1076
1196 1793 598 1136 658 598 1196 2[982 1196 956 1196 1046
6[1315 5[1497 1196 1605 2[1616 1[2041 1293 1685 7[1554
1530 1625 11[1076 2[1076 1076 1076 1[598 717 45[{ enclmec ReEncodeFont }
37 1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fk(K5)924
b(-)g(MZR)g(-)g(1001)g(Lic)-60 b(h)g(tjahre)923 b(-)h(O)-60
b(A)924 b(-)g(Thema)f(Mathematik)-2331 4515 y(Sc)-60
b(h)g(ularb)60 b(eiten)715 b(5.)i(Klasse)p 0 TeXcolorgray
-741 7823 a Fj(1.)p 0 TeXcolorgray 651 w(1)516 b(Lic)-36
b(h)g(tjahr)515 b(ist)g(jene)h(Strec)-36 b(k)g(e,)515
b(die)h(das)f(Lic)-36 b(h)g(t)515 b(in)g(1)h(Jahr)f(b)36
b(ei)516 b(einer)f(Gesc)-36 b(h)g(windigk)g(eit)887 9815
y(v)g(on)522 b Fi(3)356 b Fh(\001)g Fi(10)6463 9333 y
Fg(8)7210 9815 y Fj(m/s)523 b(zur\374c)-36 b(klegt.)523
b(Stelle)f(diese)g(Strec)-36 b(k)g(e)521 b(mittels)i(Gleitk)-36
b(ommadarstellung)921 11806 y(in)433 b(Metern)g(und)g(in)g(Kilometern)h
(dar.)856 16344 y(1)g(Lic)-36 b(h)g(tjahr)433 b(=)p 1 0 0
TeXcolorrgb 433 w Fi(9)p Ff(;)p Fi(4608)297 b Fh(\001)e
Fi(10)14875 15862 y Fg(15)p 0 0 0 TeXcolorrgb 16089 16344
a Fj(m)856 18889 y(1)434 b(Lic)-36 b(h)g(tjahr)433 b(=)p
1 0 0 TeXcolorrgb 433 w Fi(9)p Ff(;)p Fi(4608)297 b Fh(\001)e
Fi(10)14875 18407 y Fg(12)p 0 0 0 TeXcolorrgb 16089 18889
a Fj(km)p 1 0 0 TeXcolorrgb 855 23427 a(W)-108 b(eil)351
b(1)h(Jahr)f(=)g Fi(60)127 b Fh(\001)g Fi(60)g Fh(\001)g(\001)p
Fi(24)g Fh(\001)g Fi(365)371 b(=)e(31)221 b(536)g(000)g
Fj(s)355 b Fh(\))d Fj(1)f(Lic)-36 b(h)g(tjahr)351 b(=)g
Fi(3)127 b Fh(\001)g Fi(10)37721 22944 y Fg(8)38374 23427
y Fh(\001)g Fi(31)221 b(536)g(000)373 b(=)921 25418 y(9)p
Ff(;)p Fi(4608)297 b Fh(\001)e Fi(10)6793 24936 y Fg(15)8007
25418 y Fj(m)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fe(___/1)p 1 0 0
TeXcolorrgb 46414 9815 a Fd(K5)370 b(-)f(MZR)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 29152
54804 45 v -2331 34453 a Fk(K5)706 b(-)h(MZR)g(-)g(1002)f
(Bin\344rsystem)f(-)i(O)-60 b(A)706 b(-)h(Thema)f(Mathematik)-2331
37476 y(Sc)-60 b(h)g(ularb)60 b(eiten)715 b(5.)i(Klasse)p
0 TeXcolorgray -741 40783 a Fj(2.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(Zahl)h Fi([)8 b(110)221
b(0011])18614 40982 y Fg(2)19143 40783 y Fj(.)434 b(Stelle)f(diese)h
(Zahl)g(im)f(Dezimalsystem)j(dar.)921 45320 y Fi([)8
b(110)221 b(0011])6422 45519 y Fg(2)7320 45320 y Fi(=)p
1 0 0 TeXcolorrgb 433 w(1)296 b Fh(\001)f Fi(2)11025
44838 y Fg(6)11846 45320 y Fi(+)g(1)g Fh(\001)h Fi(2)15413
44838 y Fg(5)16234 45320 y Fi(+)f(0)g Fh(\001)g Fi(2)19800
44838 y Fg(4)20622 45320 y Fi(+)g(0)g Fh(\001)g Fi(2)24188
44838 y Fg(3)25010 45320 y Fi(+)f(0)i Fh(\001)f Fi(2)28576
44838 y Fg(2)29397 45320 y Fi(+)g(1)h Fh(\001)f Fi(2)32964
44838 y Fg(1)33785 45320 y Fi(+)g(1)h Fh(\001)f Fi(2)37352
44838 y Fg(0)38247 45320 y Fi(=)369 b(99)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 40783 a Fe(___/1)p
1 0 0 TeXcolorrgb 46414 42775 a Fd(K5)h(-)f(MZR)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 49128
V 0 TeXcolorgray 24746 81281 a Fj(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(K5)500 b(-)g(TR)g(-)h(1001)f(Cheopsp)-60
b(yramide)497 b(-)k(O)-60 b(A)500 b(-)h(Thema)e(Mathematik)-2331
4515 y(Sc)-60 b(h)g(ularb)60 b(eiten)715 b(5.)i(Klasse)p
0 TeXcolorgray -741 7823 a Fj(3.)p 0 TeXcolorgray 651
w(Die)450 b(Cheopsp)-36 b(yramide)449 b(ist)g(eine)g(quadratisc)-36
b(he)448 b(Pyramide)i(mit)f(einer)f(H\366he)h(v)-36 b(on)450
b(147)217 b(m)921 9815 y(und)432 b(einer)i(Seitenl\344nge)f(v)-36
b(on)434 b(230)217 b(m.)921 14352 y(Berec)-36 b(hne)433
b(den)g(Wink)-36 b(el,)434 b(den)f(eine)h(Seiten\035\344c)-36
b(he)432 b(mit)i(der)f(Grund\035\344c)-36 b(he)431 b(einsc)-36
b(hlie\377t!)p 1 0 0 TeXcolorrgb 2683 37091 a
 currentpoint currentpoint translate 1.39275 1.39275 scale neg exch
neg exch translate
 2683 37091
a 3550 37091 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 101.86086 a add def
/d 0.0 a add neg def /h 122.34644 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3550 37091 a 4558 28398 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  [ 71.13185 -42.67911
42.67911 -42.67911 42.67911 28.45274  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 -28.45274 42.67911 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 -56.90549 42.67911 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -56.90549 42.67911 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 -28.45274 42.67911 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 -42.67911 42.67911 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.13185 -42.67911 42.67911 -42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 28.45274 71.13185 -42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 42.67911 -42.67911 42.67911
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 71.13185 -42.67911 42.67911
-42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 42.67911 28.45274 71.13185
-42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 -56.90549 0.0 -56.90549  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 -28.45274 56.90549 -56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 -28.45274 85.35823 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -56.90549 28.45274 -28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t 1.9513027039072617
def /t1 3.141592653589793 def /dt t1 t sub 49 div def /F@pstplot (0.6*cos(t)+2.5|0.6*sin(t)+-1.5)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     71.13185 -42.67911 lineto
closepath gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t 0.0 def /t1 1.5707963267948966
def /dt t1 t sub 49 div def /F@pstplot (0.4*cos(t)+1.5|0.4*sin(t)+-1.5)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     42.67911 -42.67911 lineto
closepath gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.39215 0  setrgbcolor   0 360 1.13791
1.13791 47.41313 -37.94508  0 true Ellipse  closepath  gsave 0 0.39215
0  setrgbcolor  0.1 .setopacityalpha  fill  grestore end
 
@endspecial 4558 28398 a
tx@Dict begin  { 62.59595 -40.97202 } PutCoor PutBegin  end
 4558
28398 a 0 0.39215 0 TeXcolorrgb -172 x Fc(')p 1 0 0 TeXcolorrgb
4558 28398 a
tx@Dict begin  PutEnd  end
 4558 28398 a 4558 28398 a
tx@Dict begin  { 43.24829 -45.52455 } PutCoor PutBegin  end
 4558 28398 a 570
x Fb(115)315 b(m)4558 28398 y
tx@Dict begin  PutEnd  end
 4558 28398 a 4558 28398
a
tx@Dict begin  { 22.1931 -12.51927 } PutCoor PutBegin  end
 4558 28398 a 570 x Fb(147)g(m)4558 28398 y
tx@Dict begin  PutEnd  end
 4558 28398
a 4558 28398 a
tx@Dict begin  { 21.62392 -60.31967 } PutCoor PutBegin  end
 4558 28398 a 570 x Fb(230)g(m)4558 28398
y
tx@Dict begin  PutEnd  end
 4558 28398 a 14826 37091 a
currentpoint initclip moveto
 14826 37091 a 2683 37091
a
 currentpoint currentpoint translate 1 1.39275 div 1 1.39275 div scale
neg exch neg exch translate
 2683 37091 a 24758 19322 a Fi(tan)227 b Ff(')369 b
Fi(=)29599 18799 y Fg(147)p 29599 19012 1412 45 v 29599
19780 a(115)31512 19322 y Fh(\))g Ff(')g Fh(\031)h Fi(52)37133
18840 y Fa(\016)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7823 a Fe(___/1)p 1 0 0 TeXcolorrgb
47306 9815 a Fd(K5)f(-)g(TR)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 40566 54804 45 v 0 TeXcolorgray
24746 81281 a Fj(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
